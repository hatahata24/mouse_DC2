
mouse2020.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013ec8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f0  08014058  08014058  00024058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014648  08014648  000300ec  2**0
                  CONTENTS
  4 .ARM          00000008  08014648  08014648  00024648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014650  08014650  000300ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014650  08014650  00024650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014654  08014654  00024654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08014658  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001574  200000ec  08014744  000300ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001660  08014744  00031660  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001701a  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030b9  00000000  00000000  00047136  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001430  00000000  00000000  0004a1f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012e0  00000000  00000000  0004b620  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022ddd  00000000  00000000  0004c900  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010eb0  00000000  00000000  0006f6dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8c4f  00000000  00000000  0008058d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001491dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e4c  00000000  00000000  00149258  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000ec 	.word	0x200000ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014040 	.word	0x08014040

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f0 	.word	0x200000f0
 80001cc:	08014040 	.word	0x08014040

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b972 	b.w	8000f34 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4688      	mov	r8, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14b      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4615      	mov	r5, r2
 8000c7a:	d967      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0720 	rsb	r7, r2, #32
 8000c86:	fa01 f302 	lsl.w	r3, r1, r2
 8000c8a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c8e:	4095      	lsls	r5, r2
 8000c90:	ea47 0803 	orr.w	r8, r7, r3
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ca0:	fa1f fc85 	uxth.w	ip, r5
 8000ca4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ca8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cac:	fb07 f10c 	mul.w	r1, r7, ip
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18eb      	adds	r3, r5, r3
 8000cb6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cba:	f080 811b 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8118 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cc4:	3f02      	subs	r7, #2
 8000cc6:	442b      	add	r3, r5
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cdc:	45a4      	cmp	ip, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	192c      	adds	r4, r5, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8107 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	f240 8104 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	442c      	add	r4, r5
 8000cf4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cf8:	eba4 040c 	sub.w	r4, r4, ip
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	b11e      	cbz	r6, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c6 4300 	strd	r4, r3, [r6]
 8000d08:	4639      	mov	r1, r7
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0xbe>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80eb 	beq.w	8000eee <__udivmoddi4+0x286>
 8000d18:	2700      	movs	r7, #0
 8000d1a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d1e:	4638      	mov	r0, r7
 8000d20:	4639      	mov	r1, r7
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f783 	clz	r7, r3
 8000d2a:	2f00      	cmp	r7, #0
 8000d2c:	d147      	bne.n	8000dbe <__udivmoddi4+0x156>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0xd0>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80fa 	bhi.w	8000f2c <__udivmoddi4+0x2c4>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	4698      	mov	r8, r3
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d0e0      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000d46:	e9c6 4800 	strd	r4, r8, [r6]
 8000d4a:	e7dd      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000d4c:	b902      	cbnz	r2, 8000d50 <__udivmoddi4+0xe8>
 8000d4e:	deff      	udf	#255	; 0xff
 8000d50:	fab2 f282 	clz	r2, r2
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f040 808f 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d5a:	1b49      	subs	r1, r1, r5
 8000d5c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d60:	fa1f f885 	uxth.w	r8, r5
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb08 f10c 	mul.w	r1, r8, ip
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7c:	18eb      	adds	r3, r5, r3
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4299      	cmp	r1, r3
 8000d86:	f200 80cd 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d98:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x14c>
 8000da4:	192c      	adds	r4, r5, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x14a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80b6 	bhi.w	8000f1e <__udivmoddi4+0x2b6>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e79f      	b.n	8000cfe <__udivmoddi4+0x96>
 8000dbe:	f1c7 0c20 	rsb	ip, r7, #32
 8000dc2:	40bb      	lsls	r3, r7
 8000dc4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dc8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dcc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dd0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dd4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dd8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ddc:	4325      	orrs	r5, r4
 8000dde:	fbb3 f9f8 	udiv	r9, r3, r8
 8000de2:	0c2c      	lsrs	r4, r5, #16
 8000de4:	fb08 3319 	mls	r3, r8, r9, r3
 8000de8:	fa1f fa8e 	uxth.w	sl, lr
 8000dec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000df0:	fb09 f40a 	mul.w	r4, r9, sl
 8000df4:	429c      	cmp	r4, r3
 8000df6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dfa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1e 0303 	adds.w	r3, lr, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	f080 8087 	bcs.w	8000f1a <__udivmoddi4+0x2b2>
 8000e0c:	429c      	cmp	r4, r3
 8000e0e:	f240 8084 	bls.w	8000f1a <__udivmoddi4+0x2b2>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4473      	add	r3, lr
 8000e18:	1b1b      	subs	r3, r3, r4
 8000e1a:	b2ad      	uxth	r5, r5
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3310 	mls	r3, r8, r0, r3
 8000e24:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e28:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e2c:	45a2      	cmp	sl, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1e 0404 	adds.w	r4, lr, r4
 8000e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e38:	d26b      	bcs.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3a:	45a2      	cmp	sl, r4
 8000e3c:	d969      	bls.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4474      	add	r4, lr
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	eba4 040a 	sub.w	r4, r4, sl
 8000e4e:	454c      	cmp	r4, r9
 8000e50:	46c2      	mov	sl, r8
 8000e52:	464b      	mov	r3, r9
 8000e54:	d354      	bcc.n	8000f00 <__udivmoddi4+0x298>
 8000e56:	d051      	beq.n	8000efc <__udivmoddi4+0x294>
 8000e58:	2e00      	cmp	r6, #0
 8000e5a:	d069      	beq.n	8000f30 <__udivmoddi4+0x2c8>
 8000e5c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e60:	eb64 0403 	sbc.w	r4, r4, r3
 8000e64:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e68:	40fd      	lsrs	r5, r7
 8000e6a:	40fc      	lsrs	r4, r7
 8000e6c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e70:	e9c6 5400 	strd	r5, r4, [r6]
 8000e74:	2700      	movs	r7, #0
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e80:	4095      	lsls	r5, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	fa21 f303 	lsr.w	r3, r1, r3
 8000e8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e8e:	4338      	orrs	r0, r7
 8000e90:	0c01      	lsrs	r1, r0, #16
 8000e92:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e96:	fa1f f885 	uxth.w	r8, r5
 8000e9a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb07 f308 	mul.w	r3, r7, r8
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x256>
 8000eae:	1869      	adds	r1, r5, r1
 8000eb0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000eb4:	d22f      	bcs.n	8000f16 <__udivmoddi4+0x2ae>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d92d      	bls.n	8000f16 <__udivmoddi4+0x2ae>
 8000eba:	3f02      	subs	r7, #2
 8000ebc:	4429      	add	r1, r5
 8000ebe:	1acb      	subs	r3, r1, r3
 8000ec0:	b281      	uxth	r1, r0
 8000ec2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ece:	fb00 f308 	mul.w	r3, r0, r8
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x27e>
 8000ed6:	1869      	adds	r1, r5, r1
 8000ed8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000edc:	d217      	bcs.n	8000f0e <__udivmoddi4+0x2a6>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d915      	bls.n	8000f0e <__udivmoddi4+0x2a6>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4429      	add	r1, r5
 8000ee6:	1ac9      	subs	r1, r1, r3
 8000ee8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eec:	e73b      	b.n	8000d66 <__udivmoddi4+0xfe>
 8000eee:	4637      	mov	r7, r6
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	e709      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef4:	4607      	mov	r7, r0
 8000ef6:	e6e7      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef8:	4618      	mov	r0, r3
 8000efa:	e6fb      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000efc:	4541      	cmp	r1, r8
 8000efe:	d2ab      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f00:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f04:	eb69 020e 	sbc.w	r2, r9, lr
 8000f08:	3801      	subs	r0, #1
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	e7a4      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f0e:	4660      	mov	r0, ip
 8000f10:	e7e9      	b.n	8000ee6 <__udivmoddi4+0x27e>
 8000f12:	4618      	mov	r0, r3
 8000f14:	e795      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f16:	4667      	mov	r7, ip
 8000f18:	e7d1      	b.n	8000ebe <__udivmoddi4+0x256>
 8000f1a:	4681      	mov	r9, r0
 8000f1c:	e77c      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	442c      	add	r4, r5
 8000f22:	e747      	b.n	8000db4 <__udivmoddi4+0x14c>
 8000f24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f28:	442b      	add	r3, r5
 8000f2a:	e72f      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	e708      	b.n	8000d42 <__udivmoddi4+0xda>
 8000f30:	4637      	mov	r7, r6
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0xa0>

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <HAL_Init+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0d      	ldr	r2, [pc, #52]	; (8000f78 <HAL_Init+0x40>)
 8000f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <HAL_Init+0x40>)
 8000f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <HAL_Init+0x40>)
 8000f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f60:	2003      	movs	r0, #3
 8000f62:	f000 fd07 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f000 f808 	bl	8000f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f6c:	f011 fb3e 	bl	80125ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40023c00 	.word	0x40023c00

08000f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_InitTick+0x54>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_InitTick+0x58>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fd1f 	bl	80019de <HAL_SYSTICK_Config>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00e      	b.n	8000fc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d80a      	bhi.n	8000fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f000 fce7 	bl	800198a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <HAL_InitTick+0x5c>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e000      	b.n	8000fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000080 	.word	0x20000080
 8000fd4:	20000004 	.word	0x20000004
 8000fd8:	20000000 	.word	0x20000000

08000fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x20>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x24>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <HAL_IncTick+0x24>)
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000004 	.word	0x20000004
 8001000:	20000120 	.word	0x20000120

08001004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return uwTick;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <HAL_GetTick+0x14>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000120 	.word	0x20000120

0800101c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001024:	f7ff ffee 	bl	8001004 <HAL_GetTick>
 8001028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001034:	d005      	beq.n	8001042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <HAL_Delay+0x40>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4413      	add	r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001042:	bf00      	nop
 8001044:	f7ff ffde 	bl	8001004 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	429a      	cmp	r2, r3
 8001052:	d8f7      	bhi.n	8001044 <HAL_Delay+0x28>
  {
  }
}
 8001054:	bf00      	nop
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000004 	.word	0x20000004

08001060 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001068:	2300      	movs	r3, #0
 800106a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e033      	b.n	80010de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	2b00      	cmp	r3, #0
 800107c:	d109      	bne.n	8001092 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f011 fadc 	bl	801263c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f003 0310 	and.w	r3, r3, #16
 800109a:	2b00      	cmp	r3, #0
 800109c:	d118      	bne.n	80010d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010a6:	f023 0302 	bic.w	r3, r3, #2
 80010aa:	f043 0202 	orr.w	r2, r3, #2
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 fa92 	bl	80015dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f023 0303 	bic.w	r3, r3, #3
 80010c6:	f043 0201 	orr.w	r2, r3, #1
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	641a      	str	r2, [r3, #64]	; 0x40
 80010ce:	e001      	b.n	80010d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d101      	bne.n	8001102 <HAL_ADC_Start+0x1a>
 80010fe:	2302      	movs	r3, #2
 8001100:	e0a5      	b.n	800124e <HAL_ADC_Start+0x166>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b01      	cmp	r3, #1
 8001116:	d018      	beq.n	800114a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 0201 	orr.w	r2, r2, #1
 8001126:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001128:	4b4c      	ldr	r3, [pc, #304]	; (800125c <HAL_ADC_Start+0x174>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a4c      	ldr	r2, [pc, #304]	; (8001260 <HAL_ADC_Start+0x178>)
 800112e:	fba2 2303 	umull	r2, r3, r2, r3
 8001132:	0c9a      	lsrs	r2, r3, #18
 8001134:	4613      	mov	r3, r2
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	4413      	add	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800113c:	e002      	b.n	8001144 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	3b01      	subs	r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f9      	bne.n	800113e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	2b01      	cmp	r3, #1
 8001156:	d179      	bne.n	800124c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001160:	f023 0301 	bic.w	r3, r3, #1
 8001164:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001176:	2b00      	cmp	r3, #0
 8001178:	d007      	beq.n	800118a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001182:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001196:	d106      	bne.n	80011a6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119c:	f023 0206 	bic.w	r2, r3, #6
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	645a      	str	r2, [r3, #68]	; 0x44
 80011a4:	e002      	b.n	80011ac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011b4:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011b6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011c0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 031f 	and.w	r3, r3, #31
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d12a      	bne.n	8001224 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a25      	ldr	r2, [pc, #148]	; (8001268 <HAL_ADC_Start+0x180>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d015      	beq.n	8001204 <HAL_ADC_Start+0x11c>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a23      	ldr	r2, [pc, #140]	; (800126c <HAL_ADC_Start+0x184>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d105      	bne.n	80011ee <HAL_ADC_Start+0x106>
 80011e2:	4b20      	ldr	r3, [pc, #128]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 031f 	and.w	r3, r3, #31
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00a      	beq.n	8001204 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a1f      	ldr	r2, [pc, #124]	; (8001270 <HAL_ADC_Start+0x188>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d129      	bne.n	800124c <HAL_ADC_Start+0x164>
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 031f 	and.w	r3, r3, #31
 8001200:	2b0f      	cmp	r3, #15
 8001202:	d823      	bhi.n	800124c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d11c      	bne.n	800124c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	e013      	b.n	800124c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <HAL_ADC_Start+0x180>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d10e      	bne.n	800124c <HAL_ADC_Start+0x164>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d107      	bne.n	800124c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800124a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000080 	.word	0x20000080
 8001260:	431bde83 	.word	0x431bde83
 8001264:	40012300 	.word	0x40012300
 8001268:	40012000 	.word	0x40012000
 800126c:	40012100 	.word	0x40012100
 8001270:	40012200 	.word	0x40012200

08001274 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800128c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001290:	d113      	bne.n	80012ba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800129c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012a0:	d10b      	bne.n	80012ba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f043 0220 	orr.w	r2, r3, #32
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e05c      	b.n	8001374 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80012ba:	f7ff fea3 	bl	8001004 <HAL_GetTick>
 80012be:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012c0:	e01a      	b.n	80012f8 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c8:	d016      	beq.n	80012f8 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d007      	beq.n	80012e0 <HAL_ADC_PollForConversion+0x6c>
 80012d0:	f7ff fe98 	bl	8001004 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	683a      	ldr	r2, [r7, #0]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d20b      	bcs.n	80012f8 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	f043 0204 	orr.w	r2, r3, #4
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e03d      	b.n	8001374 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b02      	cmp	r3, #2
 8001304:	d1dd      	bne.n	80012c2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f06f 0212 	mvn.w	r2, #18
 800130e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d123      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800132e:	2b00      	cmp	r3, #0
 8001330:	d11f      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800133c:	2b00      	cmp	r3, #0
 800133e:	d006      	beq.n	800134e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800134a:	2b00      	cmp	r3, #0
 800134c:	d111      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d105      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f043 0201 	orr.w	r2, r3, #1
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d101      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x1c>
 80013b0:	2302      	movs	r3, #2
 80013b2:	e105      	b.n	80015c0 <HAL_ADC_ConfigChannel+0x228>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b09      	cmp	r3, #9
 80013c2:	d925      	bls.n	8001410 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68d9      	ldr	r1, [r3, #12]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	461a      	mov	r2, r3
 80013d2:	4613      	mov	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	3b1e      	subs	r3, #30
 80013da:	2207      	movs	r2, #7
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43da      	mvns	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	400a      	ands	r2, r1
 80013e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68d9      	ldr	r1, [r3, #12]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	4603      	mov	r3, r0
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4403      	add	r3, r0
 8001402:	3b1e      	subs	r3, #30
 8001404:	409a      	lsls	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	e022      	b.n	8001456 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6919      	ldr	r1, [r3, #16]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	b29b      	uxth	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	4613      	mov	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4413      	add	r3, r2
 8001424:	2207      	movs	r2, #7
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43da      	mvns	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	400a      	ands	r2, r1
 8001432:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6919      	ldr	r1, [r3, #16]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	b29b      	uxth	r3, r3
 8001444:	4618      	mov	r0, r3
 8001446:	4603      	mov	r3, r0
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4403      	add	r3, r0
 800144c:	409a      	lsls	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b06      	cmp	r3, #6
 800145c:	d824      	bhi.n	80014a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	3b05      	subs	r3, #5
 8001470:	221f      	movs	r2, #31
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	400a      	ands	r2, r1
 800147e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b29b      	uxth	r3, r3
 800148c:	4618      	mov	r0, r3
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	3b05      	subs	r3, #5
 800149a:	fa00 f203 	lsl.w	r2, r0, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	635a      	str	r2, [r3, #52]	; 0x34
 80014a6:	e04c      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b0c      	cmp	r3, #12
 80014ae:	d824      	bhi.n	80014fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	3b23      	subs	r3, #35	; 0x23
 80014c2:	221f      	movs	r2, #31
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43da      	mvns	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	400a      	ands	r2, r1
 80014d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	3b23      	subs	r3, #35	; 0x23
 80014ec:	fa00 f203 	lsl.w	r2, r0, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	631a      	str	r2, [r3, #48]	; 0x30
 80014f8:	e023      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	3b41      	subs	r3, #65	; 0x41
 800150c:	221f      	movs	r2, #31
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	400a      	ands	r2, r1
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	b29b      	uxth	r3, r3
 8001528:	4618      	mov	r0, r3
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	3b41      	subs	r3, #65	; 0x41
 8001536:	fa00 f203 	lsl.w	r2, r0, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001542:	4b22      	ldr	r3, [pc, #136]	; (80015cc <HAL_ADC_ConfigChannel+0x234>)
 8001544:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a21      	ldr	r2, [pc, #132]	; (80015d0 <HAL_ADC_ConfigChannel+0x238>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d109      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1cc>
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b12      	cmp	r3, #18
 8001556:	d105      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a19      	ldr	r2, [pc, #100]	; (80015d0 <HAL_ADC_ConfigChannel+0x238>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d123      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b10      	cmp	r3, #16
 8001574:	d003      	beq.n	800157e <HAL_ADC_ConfigChannel+0x1e6>
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b11      	cmp	r3, #17
 800157c:	d11b      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b10      	cmp	r3, #16
 8001590:	d111      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <HAL_ADC_ConfigChannel+0x23c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a10      	ldr	r2, [pc, #64]	; (80015d8 <HAL_ADC_ConfigChannel+0x240>)
 8001598:	fba2 2303 	umull	r2, r3, r2, r3
 800159c:	0c9a      	lsrs	r2, r3, #18
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015a8:	e002      	b.n	80015b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f9      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	40012300 	.word	0x40012300
 80015d0:	40012000 	.word	0x40012000
 80015d4:	20000080 	.word	0x20000080
 80015d8:	431bde83 	.word	0x431bde83

080015dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015e4:	4b79      	ldr	r3, [pc, #484]	; (80017cc <ADC_Init+0x1f0>)
 80015e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	431a      	orrs	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001610:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6859      	ldr	r1, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	021a      	lsls	r2, r3, #8
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001634:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6859      	ldr	r1, [r3, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001656:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6899      	ldr	r1, [r3, #8]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166e:	4a58      	ldr	r2, [pc, #352]	; (80017d0 <ADC_Init+0x1f4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d022      	beq.n	80016ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001682:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6899      	ldr	r1, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6899      	ldr	r1, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	e00f      	b.n	80016da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0202 	bic.w	r2, r2, #2
 80016e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6899      	ldr	r1, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	7e1b      	ldrb	r3, [r3, #24]
 80016f4:	005a      	lsls	r2, r3, #1
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d01b      	beq.n	8001740 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001716:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001726:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6859      	ldr	r1, [r3, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	3b01      	subs	r3, #1
 8001734:	035a      	lsls	r2, r3, #13
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	e007      	b.n	8001750 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800174e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800175e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	3b01      	subs	r3, #1
 800176c:	051a      	lsls	r2, r3, #20
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001784:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6899      	ldr	r1, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001792:	025a      	lsls	r2, r3, #9
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6899      	ldr	r1, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	029a      	lsls	r2, r3, #10
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	609a      	str	r2, [r3, #8]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	40012300 	.word	0x40012300
 80017d0:	0f000001 	.word	0x0f000001

080017d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001806:	4a04      	ldr	r2, [pc, #16]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	60d3      	str	r3, [r2, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <__NVIC_GetPriorityGrouping+0x18>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 0307 	and.w	r3, r3, #7
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	2b00      	cmp	r3, #0
 8001848:	db0b      	blt.n	8001862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f003 021f 	and.w	r2, r3, #31
 8001850:	4907      	ldr	r1, [pc, #28]	; (8001870 <__NVIC_EnableIRQ+0x38>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	2001      	movs	r0, #1
 800185a:	fa00 f202 	lsl.w	r2, r0, r2
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000e100 	.word	0xe000e100

08001874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	6039      	str	r1, [r7, #0]
 800187e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	2b00      	cmp	r3, #0
 8001886:	db0a      	blt.n	800189e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	490c      	ldr	r1, [pc, #48]	; (80018c0 <__NVIC_SetPriority+0x4c>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	440b      	add	r3, r1
 8001898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800189c:	e00a      	b.n	80018b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4908      	ldr	r1, [pc, #32]	; (80018c4 <__NVIC_SetPriority+0x50>)
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	3b04      	subs	r3, #4
 80018ac:	0112      	lsls	r2, r2, #4
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	440b      	add	r3, r1
 80018b2:	761a      	strb	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000e100 	.word	0xe000e100
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f1c3 0307 	rsb	r3, r3, #7
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	bf28      	it	cs
 80018e6:	2304      	movcs	r3, #4
 80018e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3304      	adds	r3, #4
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d902      	bls.n	80018f8 <NVIC_EncodePriority+0x30>
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3b03      	subs	r3, #3
 80018f6:	e000      	b.n	80018fa <NVIC_EncodePriority+0x32>
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	401a      	ands	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	43d9      	mvns	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	4313      	orrs	r3, r2
         );
}
 8001922:	4618      	mov	r0, r3
 8001924:	3724      	adds	r7, #36	; 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001940:	d301      	bcc.n	8001946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001942:	2301      	movs	r3, #1
 8001944:	e00f      	b.n	8001966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <SysTick_Config+0x40>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194e:	210f      	movs	r1, #15
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f7ff ff8e 	bl	8001874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <SysTick_Config+0x40>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195e:	4b04      	ldr	r3, [pc, #16]	; (8001970 <SysTick_Config+0x40>)
 8001960:	2207      	movs	r2, #7
 8001962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	e000e010 	.word	0xe000e010

08001974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff29 	bl	80017d4 <__NVIC_SetPriorityGrouping>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800199c:	f7ff ff3e 	bl	800181c <__NVIC_GetPriorityGrouping>
 80019a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	6978      	ldr	r0, [r7, #20]
 80019a8:	f7ff ff8e 	bl	80018c8 <NVIC_EncodePriority>
 80019ac:	4602      	mov	r2, r0
 80019ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff5d 	bl	8001874 <__NVIC_SetPriority>
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff31 	bl	8001838 <__NVIC_EnableIRQ>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ffa2 	bl	8001930 <SysTick_Config>
 80019ec:	4603      	mov	r3, r0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a0a:	4b23      	ldr	r3, [pc, #140]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a0c:	7e1b      	ldrb	r3, [r3, #24]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_FLASH_Program+0x1e>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e03b      	b.n	8001a8e <HAL_FLASH_Program+0x96>
 8001a16:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a20:	f000 f870 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001a24:	4603      	mov	r3, r0
 8001a26:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d12b      	bne.n	8001a86 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d105      	bne.n	8001a40 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001a34:	783b      	ldrb	r3, [r7, #0]
 8001a36:	4619      	mov	r1, r3
 8001a38:	68b8      	ldr	r0, [r7, #8]
 8001a3a:	f000 f917 	bl	8001c6c <FLASH_Program_Byte>
 8001a3e:	e016      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d105      	bne.n	8001a52 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001a46:	883b      	ldrh	r3, [r7, #0]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	68b8      	ldr	r0, [r7, #8]
 8001a4c:	f000 f8ea 	bl	8001c24 <FLASH_Program_HalfWord>
 8001a50:	e00d      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d105      	bne.n	8001a64 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	68b8      	ldr	r0, [r7, #8]
 8001a5e:	f000 f8bf 	bl	8001be0 <FLASH_Program_Word>
 8001a62:	e004      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001a64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a68:	68b8      	ldr	r0, [r7, #8]
 8001a6a:	f000 f88b 	bl	8001b84 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a6e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a72:	f000 f847 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001a76:	4603      	mov	r3, r0
 8001a78:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_FLASH_Program+0xa4>)
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	4a07      	ldr	r2, [pc, #28]	; (8001a9c <HAL_FLASH_Program+0xa4>)
 8001a80:	f023 0301 	bic.w	r3, r3, #1
 8001a84:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a86:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000124 	.word	0x20000124
 8001a9c:	40023c00 	.word	0x40023c00

08001aa0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	da0b      	bge.n	8001aca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001ab4:	4a09      	ldr	r2, [pc, #36]	; (8001adc <HAL_FLASH_Unlock+0x3c>)
 8001ab6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001ab8:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001aba:	4a09      	ldr	r2, [pc, #36]	; (8001ae0 <HAL_FLASH_Unlock+0x40>)
 8001abc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	da01      	bge.n	8001aca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001aca:	79fb      	ldrb	r3, [r7, #7]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	40023c00 	.word	0x40023c00
 8001adc:	45670123 	.word	0x45670123
 8001ae0:	cdef89ab 	.word	0xcdef89ab

08001ae4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_FLASH_Lock+0x1c>)
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <HAL_FLASH_Lock+0x1c>)
 8001aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001af2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	40023c00 	.word	0x40023c00

08001b04 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b10:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <FLASH_WaitForLastOperation+0x78>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b16:	f7ff fa75 	bl	8001004 <HAL_GetTick>
 8001b1a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b1c:	e010      	b.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b24:	d00c      	beq.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d007      	beq.n	8001b3c <FLASH_WaitForLastOperation+0x38>
 8001b2c:	f7ff fa6a 	bl	8001004 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d201      	bcs.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e019      	b.n	8001b74 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1e8      	bne.n	8001b1e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001b6a:	f000 f8a1 	bl	8001cb0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
  
}  
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000124 	.word	0x20000124
 8001b80:	40023c00 	.word	0x40023c00

08001b84 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001b84:	b490      	push	{r4, r7}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	4a11      	ldr	r2, [pc, #68]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001ba2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001ba6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001bba:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	f04f 0400 	mov.w	r4, #0
 8001bc6:	0013      	movs	r3, r2
 8001bc8:	2400      	movs	r4, #0
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	3204      	adds	r2, #4
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc90      	pop	{r4, r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40023c00 	.word	0x40023c00

08001be0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	4a0c      	ldr	r2, [pc, #48]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bf4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	4a09      	ldr	r2, [pc, #36]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	4a06      	ldr	r2, [pc, #24]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	601a      	str	r2, [r3, #0]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	40023c00 	.word	0x40023c00

08001c24 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	4a0c      	ldr	r2, [pc, #48]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	4a09      	ldr	r2, [pc, #36]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c48:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	4a06      	ldr	r2, [pc, #24]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	887a      	ldrh	r2, [r7, #2]
 8001c58:	801a      	strh	r2, [r3, #0]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40023c00 	.word	0x40023c00

08001c6c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c8c:	4b07      	ldr	r3, [pc, #28]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	4a06      	ldr	r2, [pc, #24]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	78fa      	ldrb	r2, [r7, #3]
 8001c9c:	701a      	strb	r2, [r3, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40023c00 	.word	0x40023c00

08001cb0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001cb4:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f003 0310 	and.w	r3, r3, #16
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d008      	beq.n	8001cd2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001cc0:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	f043 0310 	orr.w	r3, r3, #16
 8001cc8:	4a23      	ldr	r2, [pc, #140]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cca:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001ccc:	4b21      	ldr	r3, [pc, #132]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cce:	2210      	movs	r2, #16
 8001cd0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f003 0320 	and.w	r3, r3, #32
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d008      	beq.n	8001cf0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001cde:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f043 0308 	orr.w	r3, r3, #8
 8001ce6:	4a1c      	ldr	r2, [pc, #112]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001ce8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001cea:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cec:	2220      	movs	r2, #32
 8001cee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001cf0:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d008      	beq.n	8001d0e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001cfc:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	4a14      	ldr	r2, [pc, #80]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d06:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d0a:	2240      	movs	r2, #64	; 0x40
 8001d0c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d008      	beq.n	8001d2c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f043 0302 	orr.w	r3, r3, #2
 8001d22:	4a0d      	ldr	r2, [pc, #52]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d24:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001d26:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d28:	2280      	movs	r2, #128	; 0x80
 8001d2a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	f043 0320 	orr.w	r3, r3, #32
 8001d40:	4a05      	ldr	r2, [pc, #20]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d42:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001d44:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d46:	2202      	movs	r2, #2
 8001d48:	60da      	str	r2, [r3, #12]
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	40023c00 	.word	0x40023c00
 8001d58:	20000124 	.word	0x20000124

08001d5c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d6e:	4b31      	ldr	r3, [pc, #196]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001d70:	7e1b      	ldrb	r3, [r3, #24]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_FLASHEx_Erase+0x1e>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e058      	b.n	8001e2c <HAL_FLASHEx_Erase+0xd0>
 8001d7a:	4b2e      	ldr	r3, [pc, #184]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d84:	f7ff febe 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d148      	bne.n	8001e24 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	f04f 32ff 	mov.w	r2, #4294967295
 8001d98:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d115      	bne.n	8001dce <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	4619      	mov	r1, r3
 8001dae:	4610      	mov	r0, r2
 8001db0:	f000 f844 	bl	8001e3c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001db4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001db8:	f7ff fea4 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	4a1c      	ldr	r2, [pc, #112]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001dc6:	f023 0304 	bic.w	r3, r3, #4
 8001dca:	6113      	str	r3, [r2, #16]
 8001dcc:	e028      	b.n	8001e20 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	e01c      	b.n	8001e10 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	4619      	mov	r1, r3
 8001dde:	68b8      	ldr	r0, [r7, #8]
 8001de0:	f000 f850 	bl	8001e84 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001de4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001de8:	f7ff fe8c 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001dec:	4603      	mov	r3, r0
 8001dee:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	4a10      	ldr	r2, [pc, #64]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001df6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001dfa:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	601a      	str	r2, [r3, #0]
          break;
 8001e08:	e00a      	b.n	8001e20 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4413      	add	r3, r2
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d3da      	bcc.n	8001dd6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8001e20:	f000 f878 	bl	8001f14 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	761a      	strb	r2, [r3, #24]

  return status;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000124 	.word	0x20000124
 8001e38:	40023c00 	.word	0x40023c00

08001e3c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e48:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	4a0c      	ldr	r2, [pc, #48]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001e54:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	4a09      	ldr	r2, [pc, #36]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e5a:	f043 0304 	orr.w	r3, r3, #4
 8001e5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e70:	6113      	str	r3, [r2, #16]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40023c00 	.word	0x40023c00

08001e84 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d102      	bne.n	8001ea0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	e010      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d103      	bne.n	8001eae <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001ea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	e009      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d103      	bne.n	8001ebc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	e002      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001ebc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ec0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ec2:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	4a12      	ldr	r2, [pc, #72]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ecc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ed0:	691a      	ldr	r2, [r3, #16]
 8001ed2:	490f      	ldr	r1, [pc, #60]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001eda:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	4a0c      	ldr	r2, [pc, #48]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ee0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ee4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ee8:	691a      	ldr	r2, [r3, #16]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ef2:	f043 0302 	orr.w	r3, r3, #2
 8001ef6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f02:	6113      	str	r3, [r2, #16]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	40023c00 	.word	0x40023c00

08001f14 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8001f18:	4b20      	ldr	r3, [pc, #128]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d017      	beq.n	8001f54 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a1c      	ldr	r2, [pc, #112]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f2a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f2e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f46:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a13      	ldr	r2, [pc, #76]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f52:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d017      	beq.n	8001f90 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001f60:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f6a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f82:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f8e:	6013      	str	r3, [r2, #0]
  }
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40023c00 	.word	0x40023c00

08001fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	e16b      	b.n	8002294 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	f040 815a 	bne.w	800228e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_Init+0x4a>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b12      	cmp	r3, #18
 8001fe8:	d123      	bne.n	8002032 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	08da      	lsrs	r2, r3, #3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3208      	adds	r2, #8
 8001ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	220f      	movs	r2, #15
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	691a      	ldr	r2, [r3, #16]
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	08da      	lsrs	r2, r3, #3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3208      	adds	r2, #8
 800202c:	69b9      	ldr	r1, [r7, #24]
 800202e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	2203      	movs	r2, #3
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 0203 	and.w	r2, r3, #3
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d00b      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d007      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800207a:	2b11      	cmp	r3, #17
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b12      	cmp	r3, #18
 8002084:	d130      	bne.n	80020e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	2203      	movs	r2, #3
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020bc:	2201      	movs	r2, #1
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	091b      	lsrs	r3, r3, #4
 80020d2:	f003 0201 	and.w	r2, r3, #1
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	2203      	movs	r2, #3
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80b4 	beq.w	800228e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	4b5f      	ldr	r3, [pc, #380]	; (80022a8 <HAL_GPIO_Init+0x308>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	4a5e      	ldr	r2, [pc, #376]	; (80022a8 <HAL_GPIO_Init+0x308>)
 8002130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002134:	6453      	str	r3, [r2, #68]	; 0x44
 8002136:	4b5c      	ldr	r3, [pc, #368]	; (80022a8 <HAL_GPIO_Init+0x308>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002142:	4a5a      	ldr	r2, [pc, #360]	; (80022ac <HAL_GPIO_Init+0x30c>)
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	3302      	adds	r3, #2
 800214a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	220f      	movs	r2, #15
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a51      	ldr	r2, [pc, #324]	; (80022b0 <HAL_GPIO_Init+0x310>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d02b      	beq.n	80021c6 <HAL_GPIO_Init+0x226>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a50      	ldr	r2, [pc, #320]	; (80022b4 <HAL_GPIO_Init+0x314>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d025      	beq.n	80021c2 <HAL_GPIO_Init+0x222>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a4f      	ldr	r2, [pc, #316]	; (80022b8 <HAL_GPIO_Init+0x318>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d01f      	beq.n	80021be <HAL_GPIO_Init+0x21e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4e      	ldr	r2, [pc, #312]	; (80022bc <HAL_GPIO_Init+0x31c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d019      	beq.n	80021ba <HAL_GPIO_Init+0x21a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a4d      	ldr	r2, [pc, #308]	; (80022c0 <HAL_GPIO_Init+0x320>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d013      	beq.n	80021b6 <HAL_GPIO_Init+0x216>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4c      	ldr	r2, [pc, #304]	; (80022c4 <HAL_GPIO_Init+0x324>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d00d      	beq.n	80021b2 <HAL_GPIO_Init+0x212>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a4b      	ldr	r2, [pc, #300]	; (80022c8 <HAL_GPIO_Init+0x328>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d007      	beq.n	80021ae <HAL_GPIO_Init+0x20e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a4a      	ldr	r2, [pc, #296]	; (80022cc <HAL_GPIO_Init+0x32c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d101      	bne.n	80021aa <HAL_GPIO_Init+0x20a>
 80021a6:	2307      	movs	r3, #7
 80021a8:	e00e      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021aa:	2308      	movs	r3, #8
 80021ac:	e00c      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021ae:	2306      	movs	r3, #6
 80021b0:	e00a      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021b2:	2305      	movs	r3, #5
 80021b4:	e008      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021b6:	2304      	movs	r3, #4
 80021b8:	e006      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021ba:	2303      	movs	r3, #3
 80021bc:	e004      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021be:	2302      	movs	r3, #2
 80021c0:	e002      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021c6:	2300      	movs	r3, #0
 80021c8:	69fa      	ldr	r2, [r7, #28]
 80021ca:	f002 0203 	and.w	r2, r2, #3
 80021ce:	0092      	lsls	r2, r2, #2
 80021d0:	4093      	lsls	r3, r2
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021d8:	4934      	ldr	r1, [pc, #208]	; (80022ac <HAL_GPIO_Init+0x30c>)
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	089b      	lsrs	r3, r3, #2
 80021de:	3302      	adds	r3, #2
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021e6:	4b3a      	ldr	r3, [pc, #232]	; (80022d0 <HAL_GPIO_Init+0x330>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800220a:	4a31      	ldr	r2, [pc, #196]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002210:	4b2f      	ldr	r3, [pc, #188]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002234:	4a26      	ldr	r2, [pc, #152]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223a:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800225e:	4a1c      	ldr	r2, [pc, #112]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002288:	4a11      	ldr	r2, [pc, #68]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3301      	adds	r3, #1
 8002292:	61fb      	str	r3, [r7, #28]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	2b0f      	cmp	r3, #15
 8002298:	f67f ae90 	bls.w	8001fbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800229c:	bf00      	nop
 800229e:	3724      	adds	r7, #36	; 0x24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40013800 	.word	0x40013800
 80022b0:	40020000 	.word	0x40020000
 80022b4:	40020400 	.word	0x40020400
 80022b8:	40020800 	.word	0x40020800
 80022bc:	40020c00 	.word	0x40020c00
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40021400 	.word	0x40021400
 80022c8:	40021800 	.word	0x40021800
 80022cc:	40021c00 	.word	0x40021c00
 80022d0:	40013c00 	.word	0x40013c00

080022d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	887b      	ldrh	r3, [r7, #2]
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
 80022f0:	e001      	b.n	80022f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	807b      	strh	r3, [r7, #2]
 8002310:	4613      	mov	r3, r2
 8002312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002314:	787b      	ldrb	r3, [r7, #1]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800231a:	887a      	ldrh	r2, [r7, #2]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002320:	e003      	b.n	800232a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002322:	887b      	ldrh	r3, [r7, #2]
 8002324:	041a      	lsls	r2, r3, #16
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	619a      	str	r2, [r3, #24]
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e22d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d075      	beq.n	8002442 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002356:	4ba3      	ldr	r3, [pc, #652]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b04      	cmp	r3, #4
 8002360:	d00c      	beq.n	800237c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002362:	4ba0      	ldr	r3, [pc, #640]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800236a:	2b08      	cmp	r3, #8
 800236c:	d112      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800236e:	4b9d      	ldr	r3, [pc, #628]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002376:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800237a:	d10b      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	4b99      	ldr	r3, [pc, #612]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d05b      	beq.n	8002440 <HAL_RCC_OscConfig+0x108>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d157      	bne.n	8002440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e208      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239c:	d106      	bne.n	80023ac <HAL_RCC_OscConfig+0x74>
 800239e:	4b91      	ldr	r3, [pc, #580]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a90      	ldr	r2, [pc, #576]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	e01d      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x98>
 80023b6:	4b8b      	ldr	r3, [pc, #556]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a8a      	ldr	r2, [pc, #552]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	4b88      	ldr	r3, [pc, #544]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a87      	ldr	r2, [pc, #540]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e00b      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023d0:	4b84      	ldr	r3, [pc, #528]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a83      	ldr	r2, [pc, #524]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	4b81      	ldr	r3, [pc, #516]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a80      	ldr	r2, [pc, #512]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d013      	beq.n	8002418 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7fe fe08 	bl	8001004 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f8:	f7fe fe04 	bl	8001004 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	; 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e1cd      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240a:	4b76      	ldr	r3, [pc, #472]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0xc0>
 8002416:	e014      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7fe fdf4 	bl	8001004 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002420:	f7fe fdf0 	bl	8001004 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	; 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e1b9      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002432:	4b6c      	ldr	r3, [pc, #432]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0xe8>
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d063      	beq.n	8002516 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800244e:	4b65      	ldr	r3, [pc, #404]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00b      	beq.n	8002472 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800245a:	4b62      	ldr	r3, [pc, #392]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002462:	2b08      	cmp	r3, #8
 8002464:	d11c      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002466:	4b5f      	ldr	r3, [pc, #380]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d116      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002472:	4b5c      	ldr	r3, [pc, #368]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d005      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d001      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e18d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248a:	4b56      	ldr	r3, [pc, #344]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4952      	ldr	r1, [pc, #328]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249e:	e03a      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d020      	beq.n	80024ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a8:	4b4f      	ldr	r3, [pc, #316]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ae:	f7fe fda9 	bl	8001004 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b6:	f7fe fda5 	bl	8001004 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e16e      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c8:	4b46      	ldr	r3, [pc, #280]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d4:	4b43      	ldr	r3, [pc, #268]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4940      	ldr	r1, [pc, #256]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	600b      	str	r3, [r1, #0]
 80024e8:	e015      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ea:	4b3f      	ldr	r3, [pc, #252]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7fe fd88 	bl	8001004 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f8:	f7fe fd84 	bl	8001004 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e14d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250a:	4b36      	ldr	r3, [pc, #216]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d030      	beq.n	8002584 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d016      	beq.n	8002558 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800252a:	4b30      	ldr	r3, [pc, #192]	; (80025ec <HAL_RCC_OscConfig+0x2b4>)
 800252c:	2201      	movs	r2, #1
 800252e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002530:	f7fe fd68 	bl	8001004 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002538:	f7fe fd64 	bl	8001004 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e12d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254a:	4b26      	ldr	r3, [pc, #152]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800254c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x200>
 8002556:	e015      	b.n	8002584 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002558:	4b24      	ldr	r3, [pc, #144]	; (80025ec <HAL_RCC_OscConfig+0x2b4>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7fe fd51 	bl	8001004 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002566:	f7fe fd4d 	bl	8001004 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e116      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002578:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800257a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f0      	bne.n	8002566 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80a0 	beq.w	80026d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002592:	2300      	movs	r3, #0
 8002594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10f      	bne.n	80025c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	4a0e      	ldr	r2, [pc, #56]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b0:	6413      	str	r3, [r2, #64]	; 0x40
 80025b2:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025be:	2301      	movs	r3, #1
 80025c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d121      	bne.n	8002612 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a07      	ldr	r2, [pc, #28]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025da:	f7fe fd13 	bl	8001004 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e0:	e011      	b.n	8002606 <HAL_RCC_OscConfig+0x2ce>
 80025e2:	bf00      	nop
 80025e4:	40023800 	.word	0x40023800
 80025e8:	42470000 	.word	0x42470000
 80025ec:	42470e80 	.word	0x42470e80
 80025f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f4:	f7fe fd06 	bl	8001004 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e0cf      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002606:	4b6a      	ldr	r3, [pc, #424]	; (80027b0 <HAL_RCC_OscConfig+0x478>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d106      	bne.n	8002628 <HAL_RCC_OscConfig+0x2f0>
 800261a:	4b66      	ldr	r3, [pc, #408]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261e:	4a65      	ldr	r2, [pc, #404]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6713      	str	r3, [r2, #112]	; 0x70
 8002626:	e01c      	b.n	8002662 <HAL_RCC_OscConfig+0x32a>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b05      	cmp	r3, #5
 800262e:	d10c      	bne.n	800264a <HAL_RCC_OscConfig+0x312>
 8002630:	4b60      	ldr	r3, [pc, #384]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	4a5f      	ldr	r2, [pc, #380]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002636:	f043 0304 	orr.w	r3, r3, #4
 800263a:	6713      	str	r3, [r2, #112]	; 0x70
 800263c:	4b5d      	ldr	r3, [pc, #372]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	4a5c      	ldr	r2, [pc, #368]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6713      	str	r3, [r2, #112]	; 0x70
 8002648:	e00b      	b.n	8002662 <HAL_RCC_OscConfig+0x32a>
 800264a:	4b5a      	ldr	r3, [pc, #360]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	4a59      	ldr	r2, [pc, #356]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	6713      	str	r3, [r2, #112]	; 0x70
 8002656:	4b57      	ldr	r3, [pc, #348]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	4a56      	ldr	r2, [pc, #344]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800265c:	f023 0304 	bic.w	r3, r3, #4
 8002660:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d015      	beq.n	8002696 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266a:	f7fe fccb 	bl	8001004 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7fe fcc7 	bl	8001004 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002680:	4293      	cmp	r3, r2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e08e      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002688:	4b4a      	ldr	r3, [pc, #296]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0ee      	beq.n	8002672 <HAL_RCC_OscConfig+0x33a>
 8002694:	e014      	b.n	80026c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002696:	f7fe fcb5 	bl	8001004 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269c:	e00a      	b.n	80026b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f7fe fcb1 	bl	8001004 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e078      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b4:	4b3f      	ldr	r3, [pc, #252]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ee      	bne.n	800269e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d105      	bne.n	80026d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c6:	4b3b      	ldr	r3, [pc, #236]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	4a3a      	ldr	r2, [pc, #232]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d064      	beq.n	80027a4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026da:	4b36      	ldr	r3, [pc, #216]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d05c      	beq.n	80027a0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d141      	bne.n	8002772 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ee:	4b32      	ldr	r3, [pc, #200]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7fe fc86 	bl	8001004 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fc:	f7fe fc82 	bl	8001004 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e04b      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270e:	4b29      	ldr	r3, [pc, #164]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69da      	ldr	r2, [r3, #28]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	019b      	lsls	r3, r3, #6
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	085b      	lsrs	r3, r3, #1
 8002732:	3b01      	subs	r3, #1
 8002734:	041b      	lsls	r3, r3, #16
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	061b      	lsls	r3, r3, #24
 800273e:	491d      	ldr	r1, [pc, #116]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002740:	4313      	orrs	r3, r2
 8002742:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002744:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 8002746:	2201      	movs	r2, #1
 8002748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7fe fc5b 	bl	8001004 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002752:	f7fe fc57 	bl	8001004 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e020      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x41a>
 8002770:	e018      	b.n	80027a4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002772:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002778:	f7fe fc44 	bl	8001004 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002780:	f7fe fc40 	bl	8001004 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e009      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002792:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x448>
 800279e:	e001      	b.n	80027a4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40007000 	.word	0x40007000
 80027b4:	40023800 	.word	0x40023800
 80027b8:	42470060 	.word	0x42470060

080027bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0ca      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027d0:	4b67      	ldr	r3, [pc, #412]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d90c      	bls.n	80027f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027de:	4b64      	ldr	r3, [pc, #400]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b62      	ldr	r3, [pc, #392]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0b6      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d020      	beq.n	8002846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002810:	4b58      	ldr	r3, [pc, #352]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	4a57      	ldr	r2, [pc, #348]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002816:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800281a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002828:	4b52      	ldr	r3, [pc, #328]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a51      	ldr	r2, [pc, #324]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800282e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002834:	4b4f      	ldr	r3, [pc, #316]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	494c      	ldr	r1, [pc, #304]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002842:	4313      	orrs	r3, r2
 8002844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d044      	beq.n	80028dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d107      	bne.n	800286a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285a:	4b46      	ldr	r3, [pc, #280]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d119      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e07d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d003      	beq.n	800287a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002876:	2b03      	cmp	r3, #3
 8002878:	d107      	bne.n	800288a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287a:	4b3e      	ldr	r3, [pc, #248]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e06d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288a:	4b3a      	ldr	r3, [pc, #232]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e065      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800289a:	4b36      	ldr	r3, [pc, #216]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f023 0203 	bic.w	r2, r3, #3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4933      	ldr	r1, [pc, #204]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028ac:	f7fe fbaa 	bl	8001004 <HAL_GetTick>
 80028b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b2:	e00a      	b.n	80028ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b4:	f7fe fba6 	bl	8001004 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e04d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ca:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 020c 	and.w	r2, r3, #12
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	429a      	cmp	r2, r3
 80028da:	d1eb      	bne.n	80028b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028dc:	4b24      	ldr	r3, [pc, #144]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d20c      	bcs.n	8002904 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ea:	4b21      	ldr	r3, [pc, #132]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f2:	4b1f      	ldr	r3, [pc, #124]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e030      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d008      	beq.n	8002922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002910:	4b18      	ldr	r3, [pc, #96]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4915      	ldr	r1, [pc, #84]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800291e:	4313      	orrs	r3, r2
 8002920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d009      	beq.n	8002942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800292e:	4b11      	ldr	r3, [pc, #68]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	490d      	ldr	r1, [pc, #52]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800293e:	4313      	orrs	r3, r2
 8002940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002942:	f000 f81d 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 8002946:	4601      	mov	r1, r0
 8002948:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	091b      	lsrs	r3, r3, #4
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	4a09      	ldr	r2, [pc, #36]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	5cd3      	ldrb	r3, [r2, r3]
 8002956:	fa21 f303 	lsr.w	r3, r1, r3
 800295a:	4a08      	ldr	r2, [pc, #32]	; (800297c <HAL_RCC_ClockConfig+0x1c0>)
 800295c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800295e:	2000      	movs	r0, #0
 8002960:	f7fe fb0c 	bl	8000f7c <HAL_InitTick>

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023c00 	.word	0x40023c00
 8002974:	40023800 	.word	0x40023800
 8002978:	08014594 	.word	0x08014594
 800297c:	20000080 	.word	0x20000080

08002980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	607b      	str	r3, [r7, #4]
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	2300      	movs	r3, #0
 8002990:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002992:	2300      	movs	r3, #0
 8002994:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002996:	4b50      	ldr	r3, [pc, #320]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d007      	beq.n	80029b2 <HAL_RCC_GetSysClockFreq+0x32>
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d008      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0x38>
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f040 808d 	bne.w	8002ac6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029ac:	4b4b      	ldr	r3, [pc, #300]	; (8002adc <HAL_RCC_GetSysClockFreq+0x15c>)
 80029ae:	60bb      	str	r3, [r7, #8]
       break;
 80029b0:	e08c      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029b2:	4b4b      	ldr	r3, [pc, #300]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029b4:	60bb      	str	r3, [r7, #8]
      break;
 80029b6:	e089      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029b8:	4b47      	ldr	r3, [pc, #284]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029c2:	4b45      	ldr	r3, [pc, #276]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d023      	beq.n	8002a16 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ce:	4b42      	ldr	r3, [pc, #264]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	099b      	lsrs	r3, r3, #6
 80029d4:	f04f 0400 	mov.w	r4, #0
 80029d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	ea03 0501 	and.w	r5, r3, r1
 80029e4:	ea04 0602 	and.w	r6, r4, r2
 80029e8:	4a3d      	ldr	r2, [pc, #244]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029ea:	fb02 f106 	mul.w	r1, r2, r6
 80029ee:	2200      	movs	r2, #0
 80029f0:	fb02 f205 	mul.w	r2, r2, r5
 80029f4:	440a      	add	r2, r1
 80029f6:	493a      	ldr	r1, [pc, #232]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029f8:	fba5 0101 	umull	r0, r1, r5, r1
 80029fc:	1853      	adds	r3, r2, r1
 80029fe:	4619      	mov	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f04f 0400 	mov.w	r4, #0
 8002a06:	461a      	mov	r2, r3
 8002a08:	4623      	mov	r3, r4
 8002a0a:	f7fe f915 	bl	8000c38 <__aeabi_uldivmod>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	460c      	mov	r4, r1
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	e049      	b.n	8002aaa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a16:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	099b      	lsrs	r3, r3, #6
 8002a1c:	f04f 0400 	mov.w	r4, #0
 8002a20:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	ea03 0501 	and.w	r5, r3, r1
 8002a2c:	ea04 0602 	and.w	r6, r4, r2
 8002a30:	4629      	mov	r1, r5
 8002a32:	4632      	mov	r2, r6
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	f04f 0400 	mov.w	r4, #0
 8002a3c:	0154      	lsls	r4, r2, #5
 8002a3e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a42:	014b      	lsls	r3, r1, #5
 8002a44:	4619      	mov	r1, r3
 8002a46:	4622      	mov	r2, r4
 8002a48:	1b49      	subs	r1, r1, r5
 8002a4a:	eb62 0206 	sbc.w	r2, r2, r6
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	f04f 0400 	mov.w	r4, #0
 8002a56:	0194      	lsls	r4, r2, #6
 8002a58:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a5c:	018b      	lsls	r3, r1, #6
 8002a5e:	1a5b      	subs	r3, r3, r1
 8002a60:	eb64 0402 	sbc.w	r4, r4, r2
 8002a64:	f04f 0100 	mov.w	r1, #0
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	00e2      	lsls	r2, r4, #3
 8002a6e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a72:	00d9      	lsls	r1, r3, #3
 8002a74:	460b      	mov	r3, r1
 8002a76:	4614      	mov	r4, r2
 8002a78:	195b      	adds	r3, r3, r5
 8002a7a:	eb44 0406 	adc.w	r4, r4, r6
 8002a7e:	f04f 0100 	mov.w	r1, #0
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	02a2      	lsls	r2, r4, #10
 8002a88:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a8c:	0299      	lsls	r1, r3, #10
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4614      	mov	r4, r2
 8002a92:	4618      	mov	r0, r3
 8002a94:	4621      	mov	r1, r4
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f04f 0400 	mov.w	r4, #0
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4623      	mov	r3, r4
 8002aa0:	f7fe f8ca 	bl	8000c38 <__aeabi_uldivmod>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	460c      	mov	r4, r1
 8002aa8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	0c1b      	lsrs	r3, r3, #16
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac2:	60bb      	str	r3, [r7, #8]
      break;
 8002ac4:	e002      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ac6:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_RCC_GetSysClockFreq+0x15c>)
 8002ac8:	60bb      	str	r3, [r7, #8]
      break;
 8002aca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002acc:	68bb      	ldr	r3, [r7, #8]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	00f42400 	.word	0x00f42400
 8002ae0:	017d7840 	.word	0x017d7840

08002ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20000080 	.word	0x20000080

08002afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b00:	f7ff fff0 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b04:	4601      	mov	r1, r0
 8002b06:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	0a9b      	lsrs	r3, r3, #10
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	4a03      	ldr	r2, [pc, #12]	; (8002b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b12:	5cd3      	ldrb	r3, [r2, r3]
 8002b14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	080145a4 	.word	0x080145a4

08002b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b28:	f7ff ffdc 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b2c:	4601      	mov	r1, r0
 8002b2e:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	0b5b      	lsrs	r3, r3, #13
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	4a03      	ldr	r2, [pc, #12]	; (8002b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b3a:	5cd3      	ldrb	r3, [r2, r3]
 8002b3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40023800 	.word	0x40023800
 8002b48:	080145a4 	.word	0x080145a4

08002b4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e056      	b.n	8002c0c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d106      	bne.n	8002b7e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f00f fda3 	bl	80126c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2202      	movs	r2, #2
 8002b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b94:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	ea42 0103 	orr.w	r1, r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	0c1b      	lsrs	r3, r3, #16
 8002bdc:	f003 0104 	and.w	r1, r3, #4
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69da      	ldr	r2, [r3, #28]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bfa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	4613      	mov	r3, r2
 8002c22:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_SPI_Transmit+0x22>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e11e      	b.n	8002e74 <HAL_SPI_Transmit+0x260>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c3e:	f7fe f9e1 	bl	8001004 <HAL_GetTick>
 8002c42:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d002      	beq.n	8002c5a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c54:	2302      	movs	r3, #2
 8002c56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c58:	e103      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <HAL_SPI_Transmit+0x52>
 8002c60:	88fb      	ldrh	r3, [r7, #6]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d102      	bne.n	8002c6c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c6a:	e0fa      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2203      	movs	r2, #3
 8002c70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	88fa      	ldrh	r2, [r7, #6]
 8002c84:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	88fa      	ldrh	r2, [r7, #6]
 8002c8a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cb2:	d107      	bne.n	8002cc4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cc2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cce:	2b40      	cmp	r3, #64	; 0x40
 8002cd0:	d007      	beq.n	8002ce2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ce0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cea:	d14b      	bne.n	8002d84 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <HAL_SPI_Transmit+0xe6>
 8002cf4:	8afb      	ldrh	r3, [r7, #22]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d13e      	bne.n	8002d78 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	881a      	ldrh	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	1c9a      	adds	r2, r3, #2
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d1e:	e02b      	b.n	8002d78 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d112      	bne.n	8002d54 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	881a      	ldrh	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	1c9a      	adds	r2, r3, #2
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d52:	e011      	b.n	8002d78 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d54:	f7fe f956 	bl	8001004 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d803      	bhi.n	8002d6c <HAL_SPI_Transmit+0x158>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6a:	d102      	bne.n	8002d72 <HAL_SPI_Transmit+0x15e>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d102      	bne.n	8002d78 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d76:	e074      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1ce      	bne.n	8002d20 <HAL_SPI_Transmit+0x10c>
 8002d82:	e04c      	b.n	8002e1e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <HAL_SPI_Transmit+0x17e>
 8002d8c:	8afb      	ldrh	r3, [r7, #22]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d140      	bne.n	8002e14 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	330c      	adds	r3, #12
 8002d9c:	7812      	ldrb	r2, [r2, #0]
 8002d9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002db8:	e02c      	b.n	8002e14 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d113      	bne.n	8002df0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	330c      	adds	r3, #12
 8002dd2:	7812      	ldrb	r2, [r2, #0]
 8002dd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	86da      	strh	r2, [r3, #54]	; 0x36
 8002dee:	e011      	b.n	8002e14 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002df0:	f7fe f908 	bl	8001004 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d803      	bhi.n	8002e08 <HAL_SPI_Transmit+0x1f4>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e06:	d102      	bne.n	8002e0e <HAL_SPI_Transmit+0x1fa>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d102      	bne.n	8002e14 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e12:	e026      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1cd      	bne.n	8002dba <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	6839      	ldr	r1, [r7, #0]
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 fba4 	bl	8003570 <SPI_EndRxTxTransaction>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2220      	movs	r2, #32
 8002e32:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10a      	bne.n	8002e52 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	77fb      	strb	r3, [r7, #31]
 8002e5e:	e000      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002e60:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e72:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3720      	adds	r7, #32
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e98:	d112      	bne.n	8002ec0 <HAL_SPI_Receive+0x44>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10e      	bne.n	8002ec0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002eaa:	88fa      	ldrh	r2, [r7, #6]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f8e9 	bl	800308e <HAL_SPI_TransmitReceive>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	e0e2      	b.n	8003086 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_SPI_Receive+0x52>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e0db      	b.n	8003086 <HAL_SPI_Receive+0x20a>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ed6:	f7fe f895 	bl	8001004 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d002      	beq.n	8002eee <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002eec:	e0c2      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <HAL_SPI_Receive+0x7e>
 8002ef4:	88fb      	ldrh	r3, [r7, #6]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d102      	bne.n	8002f00 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002efe:	e0b9      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2204      	movs	r2, #4
 8002f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	88fa      	ldrh	r2, [r7, #6]
 8002f18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	88fa      	ldrh	r2, [r7, #6]
 8002f1e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f46:	d107      	bne.n	8002f58 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f56:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f62:	2b40      	cmp	r3, #64	; 0x40
 8002f64:	d007      	beq.n	8002f76 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f74:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d162      	bne.n	8003044 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f7e:	e02e      	b.n	8002fde <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d115      	bne.n	8002fba <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f103 020c 	add.w	r2, r3, #12
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9a:	7812      	ldrb	r2, [r2, #0]
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fb8:	e011      	b.n	8002fde <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fba:	f7fe f823 	bl	8001004 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d803      	bhi.n	8002fd2 <HAL_SPI_Receive+0x156>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd0:	d102      	bne.n	8002fd8 <HAL_SPI_Receive+0x15c>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d102      	bne.n	8002fde <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002fdc:	e04a      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1cb      	bne.n	8002f80 <HAL_SPI_Receive+0x104>
 8002fe8:	e031      	b.n	800304e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d113      	bne.n	8003020 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003002:	b292      	uxth	r2, r2
 8003004:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	1c9a      	adds	r2, r3, #2
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800301e:	e011      	b.n	8003044 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003020:	f7fd fff0 	bl	8001004 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d803      	bhi.n	8003038 <HAL_SPI_Receive+0x1bc>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003036:	d102      	bne.n	800303e <HAL_SPI_Receive+0x1c2>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d102      	bne.n	8003044 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003042:	e017      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003048:	b29b      	uxth	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1cd      	bne.n	8002fea <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	6839      	ldr	r1, [r7, #0]
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 fa27 	bl	80034a6 <SPI_EndRxTransaction>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	75fb      	strb	r3, [r7, #23]
 8003070:	e000      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003072:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003084:	7dfb      	ldrb	r3, [r7, #23]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b08c      	sub	sp, #48	; 0x30
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800309c:	2301      	movs	r3, #1
 800309e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_SPI_TransmitReceive+0x26>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e18a      	b.n	80033ca <HAL_SPI_TransmitReceive+0x33c>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030bc:	f7fd ffa2 	bl	8001004 <HAL_GetTick>
 80030c0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80030d2:	887b      	ldrh	r3, [r7, #2]
 80030d4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d00f      	beq.n	80030fe <HAL_SPI_TransmitReceive+0x70>
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030e4:	d107      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d103      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x68>
 80030ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d003      	beq.n	80030fe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80030f6:	2302      	movs	r3, #2
 80030f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030fc:	e15b      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x82>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x82>
 800310a:	887b      	ldrh	r3, [r7, #2]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d103      	bne.n	8003118 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003116:	e14e      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b04      	cmp	r3, #4
 8003122:	d003      	beq.n	800312c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2205      	movs	r2, #5
 8003128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	887a      	ldrh	r2, [r7, #2]
 800313c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	887a      	ldrh	r2, [r7, #2]
 8003142:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	887a      	ldrh	r2, [r7, #2]
 800314e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	887a      	ldrh	r2, [r7, #2]
 8003154:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316c:	2b40      	cmp	r3, #64	; 0x40
 800316e:	d007      	beq.n	8003180 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800317e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003188:	d178      	bne.n	800327c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <HAL_SPI_TransmitReceive+0x10a>
 8003192:	8b7b      	ldrh	r3, [r7, #26]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d166      	bne.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	881a      	ldrh	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	1c9a      	adds	r2, r3, #2
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031bc:	e053      	b.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d11b      	bne.n	8003204 <HAL_SPI_TransmitReceive+0x176>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d016      	beq.n	8003204 <HAL_SPI_TransmitReceive+0x176>
 80031d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d113      	bne.n	8003204 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	881a      	ldrh	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	1c9a      	adds	r2, r3, #2
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b01      	cmp	r3, #1
 8003210:	d119      	bne.n	8003246 <HAL_SPI_TransmitReceive+0x1b8>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d014      	beq.n	8003246 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	b292      	uxth	r2, r2
 8003228:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	1c9a      	adds	r2, r3, #2
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003238:	b29b      	uxth	r3, r3
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003242:	2301      	movs	r3, #1
 8003244:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003246:	f7fd fedd 	bl	8001004 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003252:	429a      	cmp	r2, r3
 8003254:	d807      	bhi.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
 8003256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325c:	d003      	beq.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003264:	e0a7      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800326a:	b29b      	uxth	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1a6      	bne.n	80031be <HAL_SPI_TransmitReceive+0x130>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1a1      	bne.n	80031be <HAL_SPI_TransmitReceive+0x130>
 800327a:	e07c      	b.n	8003376 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <HAL_SPI_TransmitReceive+0x1fc>
 8003284:	8b7b      	ldrh	r3, [r7, #26]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d16b      	bne.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	330c      	adds	r3, #12
 8003294:	7812      	ldrb	r2, [r2, #0]
 8003296:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032b0:	e057      	b.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d11c      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d017      	beq.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
 80032ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d114      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	330c      	adds	r3, #12
 80032da:	7812      	ldrb	r2, [r2, #0]
 80032dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b01      	cmp	r3, #1
 8003306:	d119      	bne.n	800333c <HAL_SPI_TransmitReceive+0x2ae>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d014      	beq.n	800333c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003338:	2301      	movs	r3, #1
 800333a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800333c:	f7fd fe62 	bl	8001004 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003348:	429a      	cmp	r2, r3
 800334a:	d803      	bhi.n	8003354 <HAL_SPI_TransmitReceive+0x2c6>
 800334c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003352:	d102      	bne.n	800335a <HAL_SPI_TransmitReceive+0x2cc>
 8003354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003356:	2b00      	cmp	r3, #0
 8003358:	d103      	bne.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003360:	e029      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1a2      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x224>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d19d      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003378:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 f8f8 	bl	8003570 <SPI_EndRxTxTransaction>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d006      	beq.n	8003394 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003392:	e010      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10b      	bne.n	80033b4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	e000      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80033b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3730      	adds	r7, #48	; 0x30
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	4613      	mov	r3, r2
 80033e0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033e2:	e04c      	b.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ea:	d048      	beq.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80033ec:	f7fd fe0a 	bl	8001004 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d902      	bls.n	8003402 <SPI_WaitFlagStateUntilTimeout+0x30>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d13d      	bne.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003410:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800341a:	d111      	bne.n	8003440 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003424:	d004      	beq.n	8003430 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342e:	d107      	bne.n	8003440 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800343e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003448:	d10f      	bne.n	800346a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003468:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e00f      	b.n	800349e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4013      	ands	r3, r2
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	429a      	cmp	r2, r3
 800348c:	bf0c      	ite	eq
 800348e:	2301      	moveq	r3, #1
 8003490:	2300      	movne	r3, #0
 8003492:	b2db      	uxtb	r3, r3
 8003494:	461a      	mov	r2, r3
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	429a      	cmp	r2, r3
 800349a:	d1a3      	bne.n	80033e4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b086      	sub	sp, #24
 80034aa:	af02      	add	r7, sp, #8
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ba:	d111      	bne.n	80034e0 <SPI_EndRxTransaction+0x3a>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c4:	d004      	beq.n	80034d0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ce:	d107      	bne.n	80034e0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034de:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034e8:	d12a      	bne.n	8003540 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f2:	d012      	beq.n	800351a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2200      	movs	r2, #0
 80034fc:	2180      	movs	r1, #128	; 0x80
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f7ff ff67 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d02d      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350e:	f043 0220 	orr.w	r2, r3, #32
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e026      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2200      	movs	r2, #0
 8003522:	2101      	movs	r1, #1
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f7ff ff54 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01a      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003534:	f043 0220 	orr.w	r2, r3, #32
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e013      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2200      	movs	r2, #0
 8003548:	2101      	movs	r1, #1
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f7ff ff41 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d007      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355a:	f043 0220 	orr.w	r2, r3, #32
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e000      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800357c:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <SPI_EndRxTxTransaction+0x7c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1b      	ldr	r2, [pc, #108]	; (80035f0 <SPI_EndRxTxTransaction+0x80>)
 8003582:	fba2 2303 	umull	r2, r3, r2, r3
 8003586:	0d5b      	lsrs	r3, r3, #21
 8003588:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800358c:	fb02 f303 	mul.w	r3, r2, r3
 8003590:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800359a:	d112      	bne.n	80035c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2200      	movs	r2, #0
 80035a4:	2180      	movs	r1, #128	; 0x80
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f7ff ff13 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d016      	beq.n	80035e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	f043 0220 	orr.w	r2, r3, #32
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e00f      	b.n	80035e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d8:	2b80      	cmp	r3, #128	; 0x80
 80035da:	d0f2      	beq.n	80035c2 <SPI_EndRxTxTransaction+0x52>
 80035dc:	e000      	b.n	80035e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80035de:	bf00      	nop
  }

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20000080 	.word	0x20000080
 80035f0:	165e9f81 	.word	0x165e9f81

080035f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e01d      	b.n	8003642 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d106      	bne.n	8003620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f00f f89a 	bl	8012754 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3304      	adds	r3, #4
 8003630:	4619      	mov	r1, r3
 8003632:	4610      	mov	r0, r2
 8003634:	f000 fc66 	bl	8003f04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800364a:	b480      	push	{r7}
 800364c:	b085      	sub	sp, #20
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0201 	orr.w	r2, r2, #1
 8003660:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2b06      	cmp	r3, #6
 8003672:	d007      	beq.n	8003684 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0201 	orr.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e01d      	b.n	80036e0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d106      	bne.n	80036be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f00f f8b5 	bl	8012828 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2202      	movs	r2, #2
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3304      	adds	r3, #4
 80036ce:	4619      	mov	r1, r3
 80036d0:	4610      	mov	r0, r2
 80036d2:	f000 fc17 	bl	8003f04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2201      	movs	r2, #1
 80036f8:	6839      	ldr	r1, [r7, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 feec 	bl	80044d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a15      	ldr	r2, [pc, #84]	; (800375c <HAL_TIM_PWM_Start+0x74>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d004      	beq.n	8003714 <HAL_TIM_PWM_Start+0x2c>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a14      	ldr	r2, [pc, #80]	; (8003760 <HAL_TIM_PWM_Start+0x78>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d101      	bne.n	8003718 <HAL_TIM_PWM_Start+0x30>
 8003714:	2301      	movs	r3, #1
 8003716:	e000      	b.n	800371a <HAL_TIM_PWM_Start+0x32>
 8003718:	2300      	movs	r3, #0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d007      	beq.n	800372e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800372c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2b06      	cmp	r3, #6
 800373e:	d007      	beq.n	8003750 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	40010000 	.word	0x40010000
 8003760:	40010400 	.word	0x40010400

08003764 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2200      	movs	r2, #0
 8003774:	6839      	ldr	r1, [r7, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f000 feae 	bl	80044d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a22      	ldr	r2, [pc, #136]	; (800380c <HAL_TIM_PWM_Stop+0xa8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d004      	beq.n	8003790 <HAL_TIM_PWM_Stop+0x2c>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a21      	ldr	r2, [pc, #132]	; (8003810 <HAL_TIM_PWM_Stop+0xac>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d101      	bne.n	8003794 <HAL_TIM_PWM_Stop+0x30>
 8003790:	2301      	movs	r3, #1
 8003792:	e000      	b.n	8003796 <HAL_TIM_PWM_Stop+0x32>
 8003794:	2300      	movs	r3, #0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d017      	beq.n	80037ca <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6a1a      	ldr	r2, [r3, #32]
 80037a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80037a4:	4013      	ands	r3, r2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10f      	bne.n	80037ca <HAL_TIM_PWM_Stop+0x66>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6a1a      	ldr	r2, [r3, #32]
 80037b0:	f240 4344 	movw	r3, #1092	; 0x444
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d107      	bne.n	80037ca <HAL_TIM_PWM_Stop+0x66>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6a1a      	ldr	r2, [r3, #32]
 80037d0:	f241 1311 	movw	r3, #4369	; 0x1111
 80037d4:	4013      	ands	r3, r2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10f      	bne.n	80037fa <HAL_TIM_PWM_Stop+0x96>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6a1a      	ldr	r2, [r3, #32]
 80037e0:	f240 4344 	movw	r3, #1092	; 0x444
 80037e4:	4013      	ands	r3, r2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d107      	bne.n	80037fa <HAL_TIM_PWM_Stop+0x96>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0201 	bic.w	r2, r2, #1
 80037f8:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40010000 	.word	0x40010000
 8003810:	40010400 	.word	0x40010400

08003814 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e083      	b.n	8003930 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b00      	cmp	r3, #0
 8003832:	d106      	bne.n	8003842 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f00f f815 	bl	801286c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2202      	movs	r2, #2
 8003846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6812      	ldr	r2, [r2, #0]
 8003854:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003858:	f023 0307 	bic.w	r3, r3, #7
 800385c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	3304      	adds	r3, #4
 8003866:	4619      	mov	r1, r3
 8003868:	4610      	mov	r0, r2
 800386a:	f000 fb4b 	bl	8003f04 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	4313      	orrs	r3, r2
 800388e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003896:	f023 0303 	bic.w	r3, r3, #3
 800389a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	021b      	lsls	r3, r3, #8
 80038a6:	4313      	orrs	r3, r2
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80038b4:	f023 030c 	bic.w	r3, r3, #12
 80038b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	021b      	lsls	r3, r3, #8
 80038d0:	4313      	orrs	r3, r2
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	011a      	lsls	r2, r3, #4
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	031b      	lsls	r3, r3, #12
 80038e4:	4313      	orrs	r3, r2
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80038f2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80038fa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	011b      	lsls	r3, r3, #4
 8003906:	4313      	orrs	r3, r2
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <HAL_TIM_Encoder_Start+0x16>
 8003948:	2b04      	cmp	r3, #4
 800394a:	d008      	beq.n	800395e <HAL_TIM_Encoder_Start+0x26>
 800394c:	e00f      	b.n	800396e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2201      	movs	r2, #1
 8003954:	2100      	movs	r1, #0
 8003956:	4618      	mov	r0, r3
 8003958:	f000 fdbe 	bl	80044d8 <TIM_CCxChannelCmd>
      break;
 800395c:	e016      	b.n	800398c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2201      	movs	r2, #1
 8003964:	2104      	movs	r1, #4
 8003966:	4618      	mov	r0, r3
 8003968:	f000 fdb6 	bl	80044d8 <TIM_CCxChannelCmd>
      break;
 800396c:	e00e      	b.n	800398c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2201      	movs	r2, #1
 8003974:	2100      	movs	r1, #0
 8003976:	4618      	mov	r0, r3
 8003978:	f000 fdae 	bl	80044d8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2201      	movs	r2, #1
 8003982:	2104      	movs	r1, #4
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fda7 	bl	80044d8 <TIM_CCxChannelCmd>
      break;
 800398a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f042 0201 	orr.w	r2, r2, #1
 800399a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b082      	sub	sp, #8
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d122      	bne.n	8003a02 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d11b      	bne.n	8003a02 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f06f 0202 	mvn.w	r2, #2
 80039d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	f003 0303 	and.w	r3, r3, #3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 fa6c 	bl	8003ec6 <HAL_TIM_IC_CaptureCallback>
 80039ee:	e005      	b.n	80039fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 fa5e 	bl	8003eb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 fa6f 	bl	8003eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b04      	cmp	r3, #4
 8003a0e:	d122      	bne.n	8003a56 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d11b      	bne.n	8003a56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f06f 0204 	mvn.w	r2, #4
 8003a26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 fa42 	bl	8003ec6 <HAL_TIM_IC_CaptureCallback>
 8003a42:	e005      	b.n	8003a50 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 fa34 	bl	8003eb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 fa45 	bl	8003eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	f003 0308 	and.w	r3, r3, #8
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d122      	bne.n	8003aaa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	2b08      	cmp	r3, #8
 8003a70:	d11b      	bne.n	8003aaa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f06f 0208 	mvn.w	r2, #8
 8003a7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2204      	movs	r2, #4
 8003a80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	f003 0303 	and.w	r3, r3, #3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 fa18 	bl	8003ec6 <HAL_TIM_IC_CaptureCallback>
 8003a96:	e005      	b.n	8003aa4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 fa0a 	bl	8003eb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 fa1b 	bl	8003eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	f003 0310 	and.w	r3, r3, #16
 8003ab4:	2b10      	cmp	r3, #16
 8003ab6:	d122      	bne.n	8003afe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f003 0310 	and.w	r3, r3, #16
 8003ac2:	2b10      	cmp	r3, #16
 8003ac4:	d11b      	bne.n	8003afe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f06f 0210 	mvn.w	r2, #16
 8003ace:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2208      	movs	r2, #8
 8003ad4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 f9ee 	bl	8003ec6 <HAL_TIM_IC_CaptureCallback>
 8003aea:	e005      	b.n	8003af8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f9e0 	bl	8003eb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f9f1 	bl	8003eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d10e      	bne.n	8003b2a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d107      	bne.n	8003b2a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f06f 0201 	mvn.w	r2, #1
 8003b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f009 f9ef 	bl	800cf08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b34:	2b80      	cmp	r3, #128	; 0x80
 8003b36:	d10e      	bne.n	8003b56 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b42:	2b80      	cmp	r3, #128	; 0x80
 8003b44:	d107      	bne.n	8003b56 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 fd35 	bl	80045c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b60:	2b40      	cmp	r3, #64	; 0x40
 8003b62:	d10e      	bne.n	8003b82 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6e:	2b40      	cmp	r3, #64	; 0x40
 8003b70:	d107      	bne.n	8003b82 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f9b6 	bl	8003eee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	f003 0320 	and.w	r3, r3, #32
 8003b8c:	2b20      	cmp	r3, #32
 8003b8e:	d10e      	bne.n	8003bae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	f003 0320 	and.w	r3, r3, #32
 8003b9a:	2b20      	cmp	r3, #32
 8003b9c:	d107      	bne.n	8003bae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f06f 0220 	mvn.w	r2, #32
 8003ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 fcff 	bl	80045ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bae:	bf00      	nop
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
	...

08003bb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e0b4      	b.n	8003d3c <HAL_TIM_PWM_ConfigChannel+0x184>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2202      	movs	r2, #2
 8003bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b0c      	cmp	r3, #12
 8003be6:	f200 809f 	bhi.w	8003d28 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003bea:	a201      	add	r2, pc, #4	; (adr r2, 8003bf0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf0:	08003c25 	.word	0x08003c25
 8003bf4:	08003d29 	.word	0x08003d29
 8003bf8:	08003d29 	.word	0x08003d29
 8003bfc:	08003d29 	.word	0x08003d29
 8003c00:	08003c65 	.word	0x08003c65
 8003c04:	08003d29 	.word	0x08003d29
 8003c08:	08003d29 	.word	0x08003d29
 8003c0c:	08003d29 	.word	0x08003d29
 8003c10:	08003ca7 	.word	0x08003ca7
 8003c14:	08003d29 	.word	0x08003d29
 8003c18:	08003d29 	.word	0x08003d29
 8003c1c:	08003d29 	.word	0x08003d29
 8003c20:	08003ce7 	.word	0x08003ce7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68b9      	ldr	r1, [r7, #8]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 fa0a 	bl	8004044 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	699a      	ldr	r2, [r3, #24]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0208 	orr.w	r2, r2, #8
 8003c3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699a      	ldr	r2, [r3, #24]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 0204 	bic.w	r2, r2, #4
 8003c4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6999      	ldr	r1, [r3, #24]
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	691a      	ldr	r2, [r3, #16]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	619a      	str	r2, [r3, #24]
      break;
 8003c62:	e062      	b.n	8003d2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68b9      	ldr	r1, [r7, #8]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 fa5a 	bl	8004124 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	699a      	ldr	r2, [r3, #24]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699a      	ldr	r2, [r3, #24]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6999      	ldr	r1, [r3, #24]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	021a      	lsls	r2, r3, #8
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	619a      	str	r2, [r3, #24]
      break;
 8003ca4:	e041      	b.n	8003d2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68b9      	ldr	r1, [r7, #8]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 faaf 	bl	8004210 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	69da      	ldr	r2, [r3, #28]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f042 0208 	orr.w	r2, r2, #8
 8003cc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	69da      	ldr	r2, [r3, #28]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0204 	bic.w	r2, r2, #4
 8003cd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	69d9      	ldr	r1, [r3, #28]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	691a      	ldr	r2, [r3, #16]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	61da      	str	r2, [r3, #28]
      break;
 8003ce4:	e021      	b.n	8003d2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68b9      	ldr	r1, [r7, #8]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 fb03 	bl	80042f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69da      	ldr	r2, [r3, #28]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	69da      	ldr	r2, [r3, #28]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69d9      	ldr	r1, [r3, #28]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	021a      	lsls	r2, r3, #8
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	61da      	str	r2, [r3, #28]
      break;
 8003d26:	e000      	b.n	8003d2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003d28:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <HAL_TIM_ConfigClockSource+0x18>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e0a6      	b.n	8003eaa <HAL_TIM_ConfigClockSource+0x166>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2202      	movs	r2, #2
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b40      	cmp	r3, #64	; 0x40
 8003d92:	d067      	beq.n	8003e64 <HAL_TIM_ConfigClockSource+0x120>
 8003d94:	2b40      	cmp	r3, #64	; 0x40
 8003d96:	d80b      	bhi.n	8003db0 <HAL_TIM_ConfigClockSource+0x6c>
 8003d98:	2b10      	cmp	r3, #16
 8003d9a:	d073      	beq.n	8003e84 <HAL_TIM_ConfigClockSource+0x140>
 8003d9c:	2b10      	cmp	r3, #16
 8003d9e:	d802      	bhi.n	8003da6 <HAL_TIM_ConfigClockSource+0x62>
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d06f      	beq.n	8003e84 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003da4:	e078      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003da6:	2b20      	cmp	r3, #32
 8003da8:	d06c      	beq.n	8003e84 <HAL_TIM_ConfigClockSource+0x140>
 8003daa:	2b30      	cmp	r3, #48	; 0x30
 8003dac:	d06a      	beq.n	8003e84 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003dae:	e073      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003db0:	2b70      	cmp	r3, #112	; 0x70
 8003db2:	d00d      	beq.n	8003dd0 <HAL_TIM_ConfigClockSource+0x8c>
 8003db4:	2b70      	cmp	r3, #112	; 0x70
 8003db6:	d804      	bhi.n	8003dc2 <HAL_TIM_ConfigClockSource+0x7e>
 8003db8:	2b50      	cmp	r3, #80	; 0x50
 8003dba:	d033      	beq.n	8003e24 <HAL_TIM_ConfigClockSource+0xe0>
 8003dbc:	2b60      	cmp	r3, #96	; 0x60
 8003dbe:	d041      	beq.n	8003e44 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003dc0:	e06a      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc6:	d066      	beq.n	8003e96 <HAL_TIM_ConfigClockSource+0x152>
 8003dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dcc:	d017      	beq.n	8003dfe <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003dce:	e063      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6818      	ldr	r0, [r3, #0]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	6899      	ldr	r1, [r3, #8]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f000 fb5a 	bl	8004498 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003df2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	609a      	str	r2, [r3, #8]
      break;
 8003dfc:	e04c      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6818      	ldr	r0, [r3, #0]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	6899      	ldr	r1, [r3, #8]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	f000 fb43 	bl	8004498 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e20:	609a      	str	r2, [r3, #8]
      break;
 8003e22:	e039      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6818      	ldr	r0, [r3, #0]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	6859      	ldr	r1, [r3, #4]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	461a      	mov	r2, r3
 8003e32:	f000 fab7 	bl	80043a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2150      	movs	r1, #80	; 0x50
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 fb10 	bl	8004462 <TIM_ITRx_SetConfig>
      break;
 8003e42:	e029      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6818      	ldr	r0, [r3, #0]
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	6859      	ldr	r1, [r3, #4]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	461a      	mov	r2, r3
 8003e52:	f000 fad6 	bl	8004402 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2160      	movs	r1, #96	; 0x60
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 fb00 	bl	8004462 <TIM_ITRx_SetConfig>
      break;
 8003e62:	e019      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6818      	ldr	r0, [r3, #0]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	6859      	ldr	r1, [r3, #4]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	461a      	mov	r2, r3
 8003e72:	f000 fa97 	bl	80043a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2140      	movs	r1, #64	; 0x40
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 faf0 	bl	8004462 <TIM_ITRx_SetConfig>
      break;
 8003e82:	e009      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4610      	mov	r0, r2
 8003e90:	f000 fae7 	bl	8004462 <TIM_ITRx_SetConfig>
      break;
 8003e94:	e000      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003e96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
	...

08003f04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a40      	ldr	r2, [pc, #256]	; (8004018 <TIM_Base_SetConfig+0x114>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d013      	beq.n	8003f44 <TIM_Base_SetConfig+0x40>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f22:	d00f      	beq.n	8003f44 <TIM_Base_SetConfig+0x40>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a3d      	ldr	r2, [pc, #244]	; (800401c <TIM_Base_SetConfig+0x118>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d00b      	beq.n	8003f44 <TIM_Base_SetConfig+0x40>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a3c      	ldr	r2, [pc, #240]	; (8004020 <TIM_Base_SetConfig+0x11c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d007      	beq.n	8003f44 <TIM_Base_SetConfig+0x40>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a3b      	ldr	r2, [pc, #236]	; (8004024 <TIM_Base_SetConfig+0x120>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d003      	beq.n	8003f44 <TIM_Base_SetConfig+0x40>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a3a      	ldr	r2, [pc, #232]	; (8004028 <TIM_Base_SetConfig+0x124>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d108      	bne.n	8003f56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a2f      	ldr	r2, [pc, #188]	; (8004018 <TIM_Base_SetConfig+0x114>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d02b      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f64:	d027      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a2c      	ldr	r2, [pc, #176]	; (800401c <TIM_Base_SetConfig+0x118>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d023      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a2b      	ldr	r2, [pc, #172]	; (8004020 <TIM_Base_SetConfig+0x11c>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d01f      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a2a      	ldr	r2, [pc, #168]	; (8004024 <TIM_Base_SetConfig+0x120>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d01b      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a29      	ldr	r2, [pc, #164]	; (8004028 <TIM_Base_SetConfig+0x124>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d017      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a28      	ldr	r2, [pc, #160]	; (800402c <TIM_Base_SetConfig+0x128>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d013      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a27      	ldr	r2, [pc, #156]	; (8004030 <TIM_Base_SetConfig+0x12c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d00f      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a26      	ldr	r2, [pc, #152]	; (8004034 <TIM_Base_SetConfig+0x130>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d00b      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a25      	ldr	r2, [pc, #148]	; (8004038 <TIM_Base_SetConfig+0x134>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d007      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a24      	ldr	r2, [pc, #144]	; (800403c <TIM_Base_SetConfig+0x138>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d003      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a23      	ldr	r2, [pc, #140]	; (8004040 <TIM_Base_SetConfig+0x13c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d108      	bne.n	8003fc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a0a      	ldr	r2, [pc, #40]	; (8004018 <TIM_Base_SetConfig+0x114>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d003      	beq.n	8003ffc <TIM_Base_SetConfig+0xf8>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a0c      	ldr	r2, [pc, #48]	; (8004028 <TIM_Base_SetConfig+0x124>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d103      	bne.n	8004004 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	615a      	str	r2, [r3, #20]
}
 800400a:	bf00      	nop
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	40010000 	.word	0x40010000
 800401c:	40000400 	.word	0x40000400
 8004020:	40000800 	.word	0x40000800
 8004024:	40000c00 	.word	0x40000c00
 8004028:	40010400 	.word	0x40010400
 800402c:	40014000 	.word	0x40014000
 8004030:	40014400 	.word	0x40014400
 8004034:	40014800 	.word	0x40014800
 8004038:	40001800 	.word	0x40001800
 800403c:	40001c00 	.word	0x40001c00
 8004040:	40002000 	.word	0x40002000

08004044 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004044:	b480      	push	{r7}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	f023 0201 	bic.w	r2, r3, #1
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f023 0303 	bic.w	r3, r3, #3
 800407a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	4313      	orrs	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f023 0302 	bic.w	r3, r3, #2
 800408c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4313      	orrs	r3, r2
 8004096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a20      	ldr	r2, [pc, #128]	; (800411c <TIM_OC1_SetConfig+0xd8>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d003      	beq.n	80040a8 <TIM_OC1_SetConfig+0x64>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a1f      	ldr	r2, [pc, #124]	; (8004120 <TIM_OC1_SetConfig+0xdc>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d10c      	bne.n	80040c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f023 0308 	bic.w	r3, r3, #8
 80040ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f023 0304 	bic.w	r3, r3, #4
 80040c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a15      	ldr	r2, [pc, #84]	; (800411c <TIM_OC1_SetConfig+0xd8>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d003      	beq.n	80040d2 <TIM_OC1_SetConfig+0x8e>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a14      	ldr	r2, [pc, #80]	; (8004120 <TIM_OC1_SetConfig+0xdc>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d111      	bne.n	80040f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	621a      	str	r2, [r3, #32]
}
 8004110:	bf00      	nop
 8004112:	371c      	adds	r7, #28
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	40010000 	.word	0x40010000
 8004120:	40010400 	.word	0x40010400

08004124 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004124:	b480      	push	{r7}
 8004126:	b087      	sub	sp, #28
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	f023 0210 	bic.w	r2, r3, #16
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800415a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	021b      	lsls	r3, r3, #8
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	4313      	orrs	r3, r2
 8004166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f023 0320 	bic.w	r3, r3, #32
 800416e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	4313      	orrs	r3, r2
 800417a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a22      	ldr	r2, [pc, #136]	; (8004208 <TIM_OC2_SetConfig+0xe4>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d003      	beq.n	800418c <TIM_OC2_SetConfig+0x68>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a21      	ldr	r2, [pc, #132]	; (800420c <TIM_OC2_SetConfig+0xe8>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d10d      	bne.n	80041a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	011b      	lsls	r3, r3, #4
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4313      	orrs	r3, r2
 800419e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a17      	ldr	r2, [pc, #92]	; (8004208 <TIM_OC2_SetConfig+0xe4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d003      	beq.n	80041b8 <TIM_OC2_SetConfig+0x94>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a16      	ldr	r2, [pc, #88]	; (800420c <TIM_OC2_SetConfig+0xe8>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d113      	bne.n	80041e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	4313      	orrs	r3, r2
 80041de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	621a      	str	r2, [r3, #32]
}
 80041fa:	bf00      	nop
 80041fc:	371c      	adds	r7, #28
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	40010000 	.word	0x40010000
 800420c:	40010400 	.word	0x40010400

08004210 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f023 0303 	bic.w	r3, r3, #3
 8004246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	4313      	orrs	r3, r2
 8004250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004258:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	021b      	lsls	r3, r3, #8
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	4313      	orrs	r3, r2
 8004264:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a21      	ldr	r2, [pc, #132]	; (80042f0 <TIM_OC3_SetConfig+0xe0>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d003      	beq.n	8004276 <TIM_OC3_SetConfig+0x66>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a20      	ldr	r2, [pc, #128]	; (80042f4 <TIM_OC3_SetConfig+0xe4>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d10d      	bne.n	8004292 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800427c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	4313      	orrs	r3, r2
 8004288:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004290:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a16      	ldr	r2, [pc, #88]	; (80042f0 <TIM_OC3_SetConfig+0xe0>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d003      	beq.n	80042a2 <TIM_OC3_SetConfig+0x92>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a15      	ldr	r2, [pc, #84]	; (80042f4 <TIM_OC3_SetConfig+0xe4>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d113      	bne.n	80042ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	011b      	lsls	r3, r3, #4
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	011b      	lsls	r3, r3, #4
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	621a      	str	r2, [r3, #32]
}
 80042e4:	bf00      	nop
 80042e6:	371c      	adds	r7, #28
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	40010000 	.word	0x40010000
 80042f4:	40010400 	.word	0x40010400

080042f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b087      	sub	sp, #28
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800432e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	021b      	lsls	r3, r3, #8
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	4313      	orrs	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004342:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	031b      	lsls	r3, r3, #12
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	4313      	orrs	r3, r2
 800434e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a12      	ldr	r2, [pc, #72]	; (800439c <TIM_OC4_SetConfig+0xa4>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d003      	beq.n	8004360 <TIM_OC4_SetConfig+0x68>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a11      	ldr	r2, [pc, #68]	; (80043a0 <TIM_OC4_SetConfig+0xa8>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d109      	bne.n	8004374 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004366:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	019b      	lsls	r3, r3, #6
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	4313      	orrs	r3, r2
 8004372:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	621a      	str	r2, [r3, #32]
}
 800438e:	bf00      	nop
 8004390:	371c      	adds	r7, #28
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	40010000 	.word	0x40010000
 80043a0:	40010400 	.word	0x40010400

080043a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	f023 0201 	bic.w	r2, r3, #1
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f023 030a 	bic.w	r3, r3, #10
 80043e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	621a      	str	r2, [r3, #32]
}
 80043f6:	bf00      	nop
 80043f8:	371c      	adds	r7, #28
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004402:	b480      	push	{r7}
 8004404:	b087      	sub	sp, #28
 8004406:	af00      	add	r7, sp, #0
 8004408:	60f8      	str	r0, [r7, #12]
 800440a:	60b9      	str	r1, [r7, #8]
 800440c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	f023 0210 	bic.w	r2, r3, #16
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800442c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	031b      	lsls	r3, r3, #12
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	4313      	orrs	r3, r2
 8004436:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800443e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	4313      	orrs	r3, r2
 8004448:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	621a      	str	r2, [r3, #32]
}
 8004456:	bf00      	nop
 8004458:	371c      	adds	r7, #28
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004462:	b480      	push	{r7}
 8004464:	b085      	sub	sp, #20
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
 800446a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004478:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4313      	orrs	r3, r2
 8004480:	f043 0307 	orr.w	r3, r3, #7
 8004484:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	609a      	str	r2, [r3, #8]
}
 800448c:	bf00      	nop
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
 80044a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	021a      	lsls	r2, r3, #8
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	431a      	orrs	r2, r3
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	4313      	orrs	r3, r2
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	609a      	str	r2, [r3, #8]
}
 80044cc:	bf00      	nop
 80044ce:	371c      	adds	r7, #28
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044d8:	b480      	push	{r7}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f003 031f 	and.w	r3, r3, #31
 80044ea:	2201      	movs	r2, #1
 80044ec:	fa02 f303 	lsl.w	r3, r2, r3
 80044f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6a1a      	ldr	r2, [r3, #32]
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	43db      	mvns	r3, r3
 80044fa:	401a      	ands	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6a1a      	ldr	r2, [r3, #32]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f003 031f 	and.w	r3, r3, #31
 800450a:	6879      	ldr	r1, [r7, #4]
 800450c:	fa01 f303 	lsl.w	r3, r1, r3
 8004510:	431a      	orrs	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	621a      	str	r2, [r3, #32]
}
 8004516:	bf00      	nop
 8004518:	371c      	adds	r7, #28
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004522:	b480      	push	{r7}
 8004524:	b085      	sub	sp, #20
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
 800452a:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004532:	2b01      	cmp	r3, #1
 8004534:	d101      	bne.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004536:	2302      	movs	r3, #2
 8004538:	e032      	b.n	80045a0 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2202      	movs	r2, #2
 8004546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004560:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	4313      	orrs	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004572:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	4313      	orrs	r3, r2
 800457c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e03f      	b.n	8004666 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d106      	bne.n	8004600 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f00e fa62 	bl	8012ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2224      	movs	r2, #36	; 0x24
 8004604:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004616:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 f90b 	bl	8004834 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	691a      	ldr	r2, [r3, #16]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800462c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	695a      	ldr	r2, [r3, #20]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800463c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68da      	ldr	r2, [r3, #12]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800464c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2220      	movs	r2, #32
 8004658:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2220      	movs	r2, #32
 8004660:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b088      	sub	sp, #32
 8004672:	af02      	add	r7, sp, #8
 8004674:	60f8      	str	r0, [r7, #12]
 8004676:	60b9      	str	r1, [r7, #8]
 8004678:	603b      	str	r3, [r7, #0]
 800467a:	4613      	mov	r3, r2
 800467c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800467e:	2300      	movs	r3, #0
 8004680:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b20      	cmp	r3, #32
 800468c:	f040 8083 	bne.w	8004796 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <HAL_UART_Transmit+0x2e>
 8004696:	88fb      	ldrh	r3, [r7, #6]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e07b      	b.n	8004798 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d101      	bne.n	80046ae <HAL_UART_Transmit+0x40>
 80046aa:	2302      	movs	r3, #2
 80046ac:	e074      	b.n	8004798 <HAL_UART_Transmit+0x12a>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2221      	movs	r2, #33	; 0x21
 80046c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80046c4:	f7fc fc9e 	bl	8001004 <HAL_GetTick>
 80046c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	88fa      	ldrh	r2, [r7, #6]
 80046ce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	88fa      	ldrh	r2, [r7, #6]
 80046d4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046d6:	e042      	b.n	800475e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046dc:	b29b      	uxth	r3, r3
 80046de:	3b01      	subs	r3, #1
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ee:	d122      	bne.n	8004736 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	9300      	str	r3, [sp, #0]
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	2200      	movs	r2, #0
 80046f8:	2180      	movs	r1, #128	; 0x80
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 f850 	bl	80047a0 <UART_WaitOnFlagUntilTimeout>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e046      	b.n	8004798 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	461a      	mov	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800471c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d103      	bne.n	800472e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	3302      	adds	r3, #2
 800472a:	60bb      	str	r3, [r7, #8]
 800472c:	e017      	b.n	800475e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	3301      	adds	r3, #1
 8004732:	60bb      	str	r3, [r7, #8]
 8004734:	e013      	b.n	800475e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	2200      	movs	r2, #0
 800473e:	2180      	movs	r1, #128	; 0x80
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 f82d 	bl	80047a0 <UART_WaitOnFlagUntilTimeout>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e023      	b.n	8004798 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	1c5a      	adds	r2, r3, #1
 8004754:	60ba      	str	r2, [r7, #8]
 8004756:	781a      	ldrb	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004762:	b29b      	uxth	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1b7      	bne.n	80046d8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	2200      	movs	r2, #0
 8004770:	2140      	movs	r1, #64	; 0x40
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 f814 	bl	80047a0 <UART_WaitOnFlagUntilTimeout>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e00a      	b.n	8004798 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2220      	movs	r2, #32
 8004786:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004792:	2300      	movs	r3, #0
 8004794:	e000      	b.n	8004798 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004796:	2302      	movs	r3, #2
  }
}
 8004798:	4618      	mov	r0, r3
 800479a:	3718      	adds	r7, #24
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	603b      	str	r3, [r7, #0]
 80047ac:	4613      	mov	r3, r2
 80047ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047b0:	e02c      	b.n	800480c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b8:	d028      	beq.n	800480c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d007      	beq.n	80047d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80047c0:	f7fc fc20 	bl	8001004 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d21d      	bcs.n	800480c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68da      	ldr	r2, [r3, #12]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047de:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695a      	ldr	r2, [r3, #20]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 0201 	bic.w	r2, r2, #1
 80047ee:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2220      	movs	r2, #32
 80047f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2220      	movs	r2, #32
 80047fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e00f      	b.n	800482c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	4013      	ands	r3, r2
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	429a      	cmp	r2, r3
 800481a:	bf0c      	ite	eq
 800481c:	2301      	moveq	r3, #1
 800481e:	2300      	movne	r3, #0
 8004820:	b2db      	uxtb	r3, r3
 8004822:	461a      	mov	r2, r3
 8004824:	79fb      	ldrb	r3, [r7, #7]
 8004826:	429a      	cmp	r2, r3
 8004828:	d0c3      	beq.n	80047b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004834:	b5b0      	push	{r4, r5, r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689a      	ldr	r2, [r3, #8]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	431a      	orrs	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	4313      	orrs	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004874:	f023 030c 	bic.w	r3, r3, #12
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6812      	ldr	r2, [r2, #0]
 800487c:	68f9      	ldr	r1, [r7, #12]
 800487e:	430b      	orrs	r3, r1
 8004880:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	699a      	ldr	r2, [r3, #24]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	69db      	ldr	r3, [r3, #28]
 800489c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048a0:	f040 80e4 	bne.w	8004a6c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4aab      	ldr	r2, [pc, #684]	; (8004b58 <UART_SetConfig+0x324>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d004      	beq.n	80048b8 <UART_SetConfig+0x84>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4aaa      	ldr	r2, [pc, #680]	; (8004b5c <UART_SetConfig+0x328>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d16c      	bne.n	8004992 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80048b8:	f7fe f934 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 80048bc:	4602      	mov	r2, r0
 80048be:	4613      	mov	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	009a      	lsls	r2, r3, #2
 80048c6:	441a      	add	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d2:	4aa3      	ldr	r2, [pc, #652]	; (8004b60 <UART_SetConfig+0x32c>)
 80048d4:	fba2 2303 	umull	r2, r3, r2, r3
 80048d8:	095b      	lsrs	r3, r3, #5
 80048da:	011c      	lsls	r4, r3, #4
 80048dc:	f7fe f922 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 80048e0:	4602      	mov	r2, r0
 80048e2:	4613      	mov	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	009a      	lsls	r2, r3, #2
 80048ea:	441a      	add	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	fbb2 f5f3 	udiv	r5, r2, r3
 80048f6:	f7fe f915 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 80048fa:	4602      	mov	r2, r0
 80048fc:	4613      	mov	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	009a      	lsls	r2, r3, #2
 8004904:	441a      	add	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004910:	4a93      	ldr	r2, [pc, #588]	; (8004b60 <UART_SetConfig+0x32c>)
 8004912:	fba2 2303 	umull	r2, r3, r2, r3
 8004916:	095b      	lsrs	r3, r3, #5
 8004918:	2264      	movs	r2, #100	; 0x64
 800491a:	fb02 f303 	mul.w	r3, r2, r3
 800491e:	1aeb      	subs	r3, r5, r3
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	3332      	adds	r3, #50	; 0x32
 8004924:	4a8e      	ldr	r2, [pc, #568]	; (8004b60 <UART_SetConfig+0x32c>)
 8004926:	fba2 2303 	umull	r2, r3, r2, r3
 800492a:	095b      	lsrs	r3, r3, #5
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004932:	441c      	add	r4, r3
 8004934:	f7fe f8f6 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004938:	4602      	mov	r2, r0
 800493a:	4613      	mov	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	009a      	lsls	r2, r3, #2
 8004942:	441a      	add	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	fbb2 f5f3 	udiv	r5, r2, r3
 800494e:	f7fe f8e9 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004952:	4602      	mov	r2, r0
 8004954:	4613      	mov	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	009a      	lsls	r2, r3, #2
 800495c:	441a      	add	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	fbb2 f3f3 	udiv	r3, r2, r3
 8004968:	4a7d      	ldr	r2, [pc, #500]	; (8004b60 <UART_SetConfig+0x32c>)
 800496a:	fba2 2303 	umull	r2, r3, r2, r3
 800496e:	095b      	lsrs	r3, r3, #5
 8004970:	2264      	movs	r2, #100	; 0x64
 8004972:	fb02 f303 	mul.w	r3, r2, r3
 8004976:	1aeb      	subs	r3, r5, r3
 8004978:	00db      	lsls	r3, r3, #3
 800497a:	3332      	adds	r3, #50	; 0x32
 800497c:	4a78      	ldr	r2, [pc, #480]	; (8004b60 <UART_SetConfig+0x32c>)
 800497e:	fba2 2303 	umull	r2, r3, r2, r3
 8004982:	095b      	lsrs	r3, r3, #5
 8004984:	f003 0207 	and.w	r2, r3, #7
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4422      	add	r2, r4
 800498e:	609a      	str	r2, [r3, #8]
 8004990:	e154      	b.n	8004c3c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004992:	f7fe f8b3 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004996:	4602      	mov	r2, r0
 8004998:	4613      	mov	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	009a      	lsls	r2, r3, #2
 80049a0:	441a      	add	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	005b      	lsls	r3, r3, #1
 80049a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ac:	4a6c      	ldr	r2, [pc, #432]	; (8004b60 <UART_SetConfig+0x32c>)
 80049ae:	fba2 2303 	umull	r2, r3, r2, r3
 80049b2:	095b      	lsrs	r3, r3, #5
 80049b4:	011c      	lsls	r4, r3, #4
 80049b6:	f7fe f8a1 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049ba:	4602      	mov	r2, r0
 80049bc:	4613      	mov	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	009a      	lsls	r2, r3, #2
 80049c4:	441a      	add	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	fbb2 f5f3 	udiv	r5, r2, r3
 80049d0:	f7fe f894 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049d4:	4602      	mov	r2, r0
 80049d6:	4613      	mov	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	009a      	lsls	r2, r3, #2
 80049de:	441a      	add	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	005b      	lsls	r3, r3, #1
 80049e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ea:	4a5d      	ldr	r2, [pc, #372]	; (8004b60 <UART_SetConfig+0x32c>)
 80049ec:	fba2 2303 	umull	r2, r3, r2, r3
 80049f0:	095b      	lsrs	r3, r3, #5
 80049f2:	2264      	movs	r2, #100	; 0x64
 80049f4:	fb02 f303 	mul.w	r3, r2, r3
 80049f8:	1aeb      	subs	r3, r5, r3
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	3332      	adds	r3, #50	; 0x32
 80049fe:	4a58      	ldr	r2, [pc, #352]	; (8004b60 <UART_SetConfig+0x32c>)
 8004a00:	fba2 2303 	umull	r2, r3, r2, r3
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a0c:	441c      	add	r4, r3
 8004a0e:	f7fe f875 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004a12:	4602      	mov	r2, r0
 8004a14:	4613      	mov	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	009a      	lsls	r2, r3, #2
 8004a1c:	441a      	add	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	fbb2 f5f3 	udiv	r5, r2, r3
 8004a28:	f7fe f868 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	4613      	mov	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	009a      	lsls	r2, r3, #2
 8004a36:	441a      	add	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a42:	4a47      	ldr	r2, [pc, #284]	; (8004b60 <UART_SetConfig+0x32c>)
 8004a44:	fba2 2303 	umull	r2, r3, r2, r3
 8004a48:	095b      	lsrs	r3, r3, #5
 8004a4a:	2264      	movs	r2, #100	; 0x64
 8004a4c:	fb02 f303 	mul.w	r3, r2, r3
 8004a50:	1aeb      	subs	r3, r5, r3
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	3332      	adds	r3, #50	; 0x32
 8004a56:	4a42      	ldr	r2, [pc, #264]	; (8004b60 <UART_SetConfig+0x32c>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	f003 0207 	and.w	r2, r3, #7
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4422      	add	r2, r4
 8004a68:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004a6a:	e0e7      	b.n	8004c3c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a39      	ldr	r2, [pc, #228]	; (8004b58 <UART_SetConfig+0x324>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d004      	beq.n	8004a80 <UART_SetConfig+0x24c>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a38      	ldr	r2, [pc, #224]	; (8004b5c <UART_SetConfig+0x328>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d171      	bne.n	8004b64 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004a80:	f7fe f850 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004a84:	4602      	mov	r2, r0
 8004a86:	4613      	mov	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	009a      	lsls	r2, r3, #2
 8004a8e:	441a      	add	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9a:	4a31      	ldr	r2, [pc, #196]	; (8004b60 <UART_SetConfig+0x32c>)
 8004a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa0:	095b      	lsrs	r3, r3, #5
 8004aa2:	011c      	lsls	r4, r3, #4
 8004aa4:	f7fe f83e 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	4613      	mov	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	009a      	lsls	r2, r3, #2
 8004ab2:	441a      	add	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	fbb2 f5f3 	udiv	r5, r2, r3
 8004abe:	f7fe f831 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	009a      	lsls	r2, r3, #2
 8004acc:	441a      	add	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad8:	4a21      	ldr	r2, [pc, #132]	; (8004b60 <UART_SetConfig+0x32c>)
 8004ada:	fba2 2303 	umull	r2, r3, r2, r3
 8004ade:	095b      	lsrs	r3, r3, #5
 8004ae0:	2264      	movs	r2, #100	; 0x64
 8004ae2:	fb02 f303 	mul.w	r3, r2, r3
 8004ae6:	1aeb      	subs	r3, r5, r3
 8004ae8:	011b      	lsls	r3, r3, #4
 8004aea:	3332      	adds	r3, #50	; 0x32
 8004aec:	4a1c      	ldr	r2, [pc, #112]	; (8004b60 <UART_SetConfig+0x32c>)
 8004aee:	fba2 2303 	umull	r2, r3, r2, r3
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004af8:	441c      	add	r4, r3
 8004afa:	f7fe f813 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004afe:	4602      	mov	r2, r0
 8004b00:	4613      	mov	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	009a      	lsls	r2, r3, #2
 8004b08:	441a      	add	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	fbb2 f5f3 	udiv	r5, r2, r3
 8004b14:	f7fe f806 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	009a      	lsls	r2, r3, #2
 8004b22:	441a      	add	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2e:	4a0c      	ldr	r2, [pc, #48]	; (8004b60 <UART_SetConfig+0x32c>)
 8004b30:	fba2 2303 	umull	r2, r3, r2, r3
 8004b34:	095b      	lsrs	r3, r3, #5
 8004b36:	2264      	movs	r2, #100	; 0x64
 8004b38:	fb02 f303 	mul.w	r3, r2, r3
 8004b3c:	1aeb      	subs	r3, r5, r3
 8004b3e:	011b      	lsls	r3, r3, #4
 8004b40:	3332      	adds	r3, #50	; 0x32
 8004b42:	4a07      	ldr	r2, [pc, #28]	; (8004b60 <UART_SetConfig+0x32c>)
 8004b44:	fba2 2303 	umull	r2, r3, r2, r3
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	f003 020f 	and.w	r2, r3, #15
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4422      	add	r2, r4
 8004b54:	609a      	str	r2, [r3, #8]
 8004b56:	e071      	b.n	8004c3c <UART_SetConfig+0x408>
 8004b58:	40011000 	.word	0x40011000
 8004b5c:	40011400 	.word	0x40011400
 8004b60:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004b64:	f7fd ffca 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4413      	add	r3, r2
 8004b70:	009a      	lsls	r2, r3, #2
 8004b72:	441a      	add	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7e:	4a31      	ldr	r2, [pc, #196]	; (8004c44 <UART_SetConfig+0x410>)
 8004b80:	fba2 2303 	umull	r2, r3, r2, r3
 8004b84:	095b      	lsrs	r3, r3, #5
 8004b86:	011c      	lsls	r4, r3, #4
 8004b88:	f7fd ffb8 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	4613      	mov	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	009a      	lsls	r2, r3, #2
 8004b96:	441a      	add	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004ba2:	f7fd ffab 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	009a      	lsls	r2, r3, #2
 8004bb0:	441a      	add	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bbc:	4a21      	ldr	r2, [pc, #132]	; (8004c44 <UART_SetConfig+0x410>)
 8004bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc2:	095b      	lsrs	r3, r3, #5
 8004bc4:	2264      	movs	r2, #100	; 0x64
 8004bc6:	fb02 f303 	mul.w	r3, r2, r3
 8004bca:	1aeb      	subs	r3, r5, r3
 8004bcc:	011b      	lsls	r3, r3, #4
 8004bce:	3332      	adds	r3, #50	; 0x32
 8004bd0:	4a1c      	ldr	r2, [pc, #112]	; (8004c44 <UART_SetConfig+0x410>)
 8004bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bdc:	441c      	add	r4, r3
 8004bde:	f7fd ff8d 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004be2:	4602      	mov	r2, r0
 8004be4:	4613      	mov	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	009a      	lsls	r2, r3, #2
 8004bec:	441a      	add	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	fbb2 f5f3 	udiv	r5, r2, r3
 8004bf8:	f7fd ff80 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	4613      	mov	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4413      	add	r3, r2
 8004c04:	009a      	lsls	r2, r3, #2
 8004c06:	441a      	add	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c12:	4a0c      	ldr	r2, [pc, #48]	; (8004c44 <UART_SetConfig+0x410>)
 8004c14:	fba2 2303 	umull	r2, r3, r2, r3
 8004c18:	095b      	lsrs	r3, r3, #5
 8004c1a:	2264      	movs	r2, #100	; 0x64
 8004c1c:	fb02 f303 	mul.w	r3, r2, r3
 8004c20:	1aeb      	subs	r3, r5, r3
 8004c22:	011b      	lsls	r3, r3, #4
 8004c24:	3332      	adds	r3, #50	; 0x32
 8004c26:	4a07      	ldr	r2, [pc, #28]	; (8004c44 <UART_SetConfig+0x410>)
 8004c28:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2c:	095b      	lsrs	r3, r3, #5
 8004c2e:	f003 020f 	and.w	r2, r3, #15
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4422      	add	r2, r4
 8004c38:	609a      	str	r2, [r3, #8]
}
 8004c3a:	e7ff      	b.n	8004c3c <UART_SetConfig+0x408>
 8004c3c:	bf00      	nop
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bdb0      	pop	{r4, r5, r7, pc}
 8004c44:	51eb851f 	.word	0x51eb851f

08004c48 <drive_init>:
//drive_init
// a走行系の変数の初期化
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_init(void){
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0
	MF.FLAGS = 0;
 8004c4c:	4b05      	ldr	r3, [pc, #20]	; (8004c64 <drive_init+0x1c>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	801a      	strh	r2, [r3, #0]
	MF2.FLAGS2 = 0;
 8004c52:	4b05      	ldr	r3, [pc, #20]	; (8004c68 <drive_init+0x20>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	801a      	strh	r2, [r3, #0]
}
 8004c58:	bf00      	nop
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	20000fa8 	.word	0x20000fa8
 8004c68:	20000fa4 	.word	0x20000fa4

08004c6c <drive_ready>:
//drive_ready
// a走行前のLED点滅&ジャイロのドリフト計算
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_ready(void){
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
	  while(ad_fl <= WALL_BASE_FL && ad_fr <= WALL_BASE_FR){
 8004c70:	e00f      	b.n	8004c92 <drive_ready+0x26>
		  led_write(1, 1, 1);
 8004c72:	2201      	movs	r2, #1
 8004c74:	2101      	movs	r1, #1
 8004c76:	2001      	movs	r0, #1
 8004c78:	f00d fa1c 	bl	80120b4 <led_write>
		  HAL_Delay(200);
 8004c7c:	20c8      	movs	r0, #200	; 0xc8
 8004c7e:	f7fc f9cd 	bl	800101c <HAL_Delay>
		  led_write(0, 0, 0);
 8004c82:	2200      	movs	r2, #0
 8004c84:	2100      	movs	r1, #0
 8004c86:	2000      	movs	r0, #0
 8004c88:	f00d fa14 	bl	80120b4 <led_write>
		  HAL_Delay(200);
 8004c8c:	20c8      	movs	r0, #200	; 0xc8
 8004c8e:	f7fc f9c5 	bl	800101c <HAL_Delay>
	  while(ad_fl <= WALL_BASE_FL && ad_fr <= WALL_BASE_FR){
 8004c92:	4b0b      	ldr	r3, [pc, #44]	; (8004cc0 <drive_ready+0x54>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2bc8      	cmp	r3, #200	; 0xc8
 8004c98:	d803      	bhi.n	8004ca2 <drive_ready+0x36>
 8004c9a:	4b0a      	ldr	r3, [pc, #40]	; (8004cc4 <drive_ready+0x58>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2b78      	cmp	r3, #120	; 0x78
 8004ca0:	d9e7      	bls.n	8004c72 <drive_ready+0x6>
	  }
	  MF2.FLAG.GDRIFT = 1;
 8004ca2:	4a09      	ldr	r2, [pc, #36]	; (8004cc8 <drive_ready+0x5c>)
 8004ca4:	8813      	ldrh	r3, [r2, #0]
 8004ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004caa:	8013      	strh	r3, [r2, #0]
	  HAL_Delay(2000);
 8004cac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004cb0:	f7fc f9b4 	bl	800101c <HAL_Delay>
	  degree_z = 0;
 8004cb4:	4b05      	ldr	r3, [pc, #20]	; (8004ccc <drive_ready+0x60>)
 8004cb6:	f04f 0200 	mov.w	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]
}
 8004cbc:	bf00      	nop
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	20000d94 	.word	0x20000d94
 8004cc4:	20000c80 	.word	0x20000c80
 8004cc8:	20000fa4 	.word	0x20000fa4
 8004ccc:	20000b9c 	.word	0x20000b9c

08004cd0 <drive_start>:
//drive_start
// a走行開始前に走行距離と機体角度を初期化
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_start(void){
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//a走行距離の初期化
 8004cd4:	f04f 0300 	mov.w	r3, #0
 8004cd8:	4a0f      	ldr	r2, [pc, #60]	; (8004d18 <drive_start+0x48>)
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	4a0f      	ldr	r2, [pc, #60]	; (8004d1c <drive_start+0x4c>)
 8004cde:	6013      	str	r3, [r2, #0]
	if(!MF2.FLAG.HACCEL) target_speed_l = target_speed_r = 0;		//aモータ出力の初期化
 8004ce0:	4b0f      	ldr	r3, [pc, #60]	; (8004d20 <drive_start+0x50>)
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d105      	bne.n	8004cfa <drive_start+0x2a>
 8004cee:	f04f 0300 	mov.w	r3, #0
 8004cf2:	4a0c      	ldr	r2, [pc, #48]	; (8004d24 <drive_start+0x54>)
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	4a0c      	ldr	r2, [pc, #48]	; (8004d28 <drive_start+0x58>)
 8004cf8:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 8004cfa:	4a0c      	ldr	r2, [pc, #48]	; (8004d2c <drive_start+0x5c>)
 8004cfc:	8813      	ldrh	r3, [r2, #0]
 8004cfe:	f043 0302 	orr.w	r3, r3, #2
 8004d02:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8004d04:	4a09      	ldr	r2, [pc, #36]	; (8004d2c <drive_start+0x5c>)
 8004d06:	8813      	ldrh	r3, [r2, #0]
 8004d08:	f043 0304 	orr.w	r3, r3, #4
 8004d0c:	8013      	strh	r3, [r2, #0]
}
 8004d0e:	bf00      	nop
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	20000b2c 	.word	0x20000b2c
 8004d1c:	20001648 	.word	0x20001648
 8004d20:	20000fa4 	.word	0x20000fa4
 8004d24:	200001a0 	.word	0x200001a0
 8004d28:	20000c7c 	.word	0x20000c7c
 8004d2c:	20000fa8 	.word	0x20000fa8

08004d30 <drive_stop>:
//drive_stop
// a走行を終了する
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_stop(void){
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//a走行距離の初期化
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	4a0c      	ldr	r2, [pc, #48]	; (8004d6c <drive_stop+0x3c>)
 8004d3a:	6013      	str	r3, [r2, #0]
 8004d3c:	4a0c      	ldr	r2, [pc, #48]	; (8004d70 <drive_stop+0x40>)
 8004d3e:	6013      	str	r3, [r2, #0]
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 8004d40:	f04f 0300 	mov.w	r3, #0
 8004d44:	4a0b      	ldr	r2, [pc, #44]	; (8004d74 <drive_stop+0x44>)
 8004d46:	6013      	str	r3, [r2, #0]
 8004d48:	4a0b      	ldr	r2, [pc, #44]	; (8004d78 <drive_stop+0x48>)
 8004d4a:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 0;
 8004d4c:	4a0b      	ldr	r2, [pc, #44]	; (8004d7c <drive_stop+0x4c>)
 8004d4e:	8813      	ldrh	r3, [r2, #0]
 8004d50:	f36f 0341 	bfc	r3, #1, #1
 8004d54:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 0;
 8004d56:	4a09      	ldr	r2, [pc, #36]	; (8004d7c <drive_stop+0x4c>)
 8004d58:	8813      	ldrh	r3, [r2, #0]
 8004d5a:	f36f 0382 	bfc	r3, #2, #1
 8004d5e:	8013      	strh	r3, [r2, #0]
}
 8004d60:	bf00      	nop
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	20000b2c 	.word	0x20000b2c
 8004d70:	20001648 	.word	0x20001648
 8004d74:	20000780 	.word	0x20000780
 8004d78:	20000c28 	.word	0x20000c28
 8004d7c:	20000fa8 	.word	0x20000fa8

08004d80 <drive_break>:
//drive_break
// a走行中に急停止する
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_break(void){
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0
	target_speed_l = target_speed_r = 0;		//a目標速度の初期化
 8004d84:	f04f 0300 	mov.w	r3, #0
 8004d88:	4a18      	ldr	r2, [pc, #96]	; (8004dec <drive_break+0x6c>)
 8004d8a:	6013      	str	r3, [r2, #0]
 8004d8c:	4a18      	ldr	r2, [pc, #96]	; (8004df0 <drive_break+0x70>)
 8004d8e:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;		//a加速度の初期化
 8004d90:	f04f 0300 	mov.w	r3, #0
 8004d94:	4a17      	ldr	r2, [pc, #92]	; (8004df4 <drive_break+0x74>)
 8004d96:	6013      	str	r3, [r2, #0]
 8004d98:	4a17      	ldr	r2, [pc, #92]	; (8004df8 <drive_break+0x78>)
 8004d9a:	6013      	str	r3, [r2, #0]
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 8004d9c:	f04f 0300 	mov.w	r3, #0
 8004da0:	4a16      	ldr	r2, [pc, #88]	; (8004dfc <drive_break+0x7c>)
 8004da2:	6013      	str	r3, [r2, #0]
 8004da4:	4a16      	ldr	r2, [pc, #88]	; (8004e00 <drive_break+0x80>)
 8004da6:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 8004da8:	4a16      	ldr	r2, [pc, #88]	; (8004e04 <drive_break+0x84>)
 8004daa:	8813      	ldrh	r3, [r2, #0]
 8004dac:	f043 0302 	orr.w	r3, r3, #2
 8004db0:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8004db2:	4a14      	ldr	r2, [pc, #80]	; (8004e04 <drive_break+0x84>)
 8004db4:	8813      	ldrh	r3, [r2, #0]
 8004db6:	f043 0304 	orr.w	r3, r3, #4
 8004dba:	8013      	strh	r3, [r2, #0]
	control_stop();
 8004dbc:	f000 f84c 	bl	8004e58 <control_stop>
	full_led_write1(RED);
 8004dc0:	2001      	movs	r0, #1
 8004dc2:	f00d f9b1 	bl	8012128 <full_led_write1>
	HAL_Delay(100);
 8004dc6:	2064      	movs	r0, #100	; 0x64
 8004dc8:	f7fc f928 	bl	800101c <HAL_Delay>
	MF.FLAG.DRV = 0;
 8004dcc:	4a0d      	ldr	r2, [pc, #52]	; (8004e04 <drive_break+0x84>)
 8004dce:	8813      	ldrh	r3, [r2, #0]
 8004dd0:	f36f 0341 	bfc	r3, #1, #1
 8004dd4:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 0;
 8004dd6:	4a0b      	ldr	r2, [pc, #44]	; (8004e04 <drive_break+0x84>)
 8004dd8:	8813      	ldrh	r3, [r2, #0]
 8004dda:	f36f 0382 	bfc	r3, #2, #1
 8004dde:	8013      	strh	r3, [r2, #0]
	full_led_write1(BLUE);
 8004de0:	2003      	movs	r0, #3
 8004de2:	f00d f9a1 	bl	8012128 <full_led_write1>
}
 8004de6:	bf00      	nop
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	200001a0 	.word	0x200001a0
 8004df0:	20000c7c 	.word	0x20000c7c
 8004df4:	20000b24 	.word	0x20000b24
 8004df8:	20000d98 	.word	0x20000d98
 8004dfc:	20000780 	.word	0x20000780
 8004e00:	20000c28 	.word	0x20000c28
 8004e04:	20000fa8 	.word	0x20000fa8

08004e08 <control_start>:
//control_start
// wallとgyroの姿勢制御を開始する
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void control_start(){
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0
	MF.FLAG.WCTRL = 1;										//wall制御を有効にする
 8004e0c:	4a0f      	ldr	r2, [pc, #60]	; (8004e4c <control_start+0x44>)
 8004e0e:	8813      	ldrh	r3, [r2, #0]
 8004e10:	f043 0308 	orr.w	r3, r3, #8
 8004e14:	8013      	strh	r3, [r2, #0]
	if(run_mode == 5 && MF2.FLAG.TEMP)MF.FLAG.WCTRL = 0;	//a高速走行時に壁制御を無効化し、ジャイロ制御のみに切り替え
 8004e16:	4b0e      	ldr	r3, [pc, #56]	; (8004e50 <control_start+0x48>)
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b05      	cmp	r3, #5
 8004e1e:	d10b      	bne.n	8004e38 <control_start+0x30>
 8004e20:	4b0c      	ldr	r3, [pc, #48]	; (8004e54 <control_start+0x4c>)
 8004e22:	881b      	ldrh	r3, [r3, #0]
 8004e24:	f3c3 2340 	ubfx	r3, r3, #9, #1
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d004      	beq.n	8004e38 <control_start+0x30>
 8004e2e:	4a07      	ldr	r2, [pc, #28]	; (8004e4c <control_start+0x44>)
 8004e30:	8813      	ldrh	r3, [r2, #0]
 8004e32:	f36f 03c3 	bfc	r3, #3, #1
 8004e36:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 1;										//gyro制御を有効にする
 8004e38:	4a04      	ldr	r2, [pc, #16]	; (8004e4c <control_start+0x44>)
 8004e3a:	8813      	ldrh	r3, [r2, #0]
 8004e3c:	f043 0310 	orr.w	r3, r3, #16
 8004e40:	8013      	strh	r3, [r2, #0]
}
 8004e42:	bf00      	nop
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	20000fa8 	.word	0x20000fa8
 8004e50:	20000456 	.word	0x20000456
 8004e54:	20000fa4 	.word	0x20000fa4

08004e58 <control_stop>:
//control_stop
// wallとgyroの姿勢制御を停止する
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void control_stop(){
 8004e58:	b480      	push	{r7}
 8004e5a:	af00      	add	r7, sp, #0
	MF.FLAG.WCTRL = 0;										//wall制御を無効にする
 8004e5c:	4a07      	ldr	r2, [pc, #28]	; (8004e7c <control_stop+0x24>)
 8004e5e:	8813      	ldrh	r3, [r2, #0]
 8004e60:	f36f 03c3 	bfc	r3, #3, #1
 8004e64:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 0;										//gyro制御を無効にする
 8004e66:	4a05      	ldr	r2, [pc, #20]	; (8004e7c <control_stop+0x24>)
 8004e68:	8813      	ldrh	r3, [r2, #0]
 8004e6a:	f36f 1304 	bfc	r3, #4, #1
 8004e6e:	8013      	strh	r3, [r2, #0]
}
 8004e70:	bf00      	nop
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	20000fa8 	.word	0x20000fa8

08004e80 <drive_dir>:
//drive_dir
// wheel turn dir for each wheel
// a引数:1車輪選択(0=>L, 1=>R), 2回転方向選択(0=>CW, 1=>CWW, 2=>ShortBrake, 3=>free)
// a戻り値: なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_dir(uint8_t wheel, uint8_t dir){
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	4603      	mov	r3, r0
 8004e88:	460a      	mov	r2, r1
 8004e8a:	71fb      	strb	r3, [r7, #7]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	71bb      	strb	r3, [r7, #6]
	if(wheel == 0){
 8004e90:	79fb      	ldrb	r3, [r7, #7]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d145      	bne.n	8004f22 <drive_dir+0xa2>
		if(dir == 0){
 8004e96:	79bb      	ldrb	r3, [r7, #6]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d111      	bne.n	8004ec0 <drive_dir+0x40>
		    HAL_GPIO_WritePin(MOTOR_L_CW_GPIO_Port, MOTOR_L_CW_Pin, GPIO_PIN_SET);				//L_CW
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ea2:	4846      	ldr	r0, [pc, #280]	; (8004fbc <drive_dir+0x13c>)
 8004ea4:	f7fd fa2e 	bl	8002304 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(MOTOR_L_CCW_GPIO_Port, MOTOR_L_CCW_Pin, GPIO_PIN_RESET);			//L_CCW
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	2102      	movs	r1, #2
 8004eac:	4843      	ldr	r0, [pc, #268]	; (8004fbc <drive_dir+0x13c>)
 8004eae:	f7fd fa29 	bl	8002304 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(MOTOR_L_R_STBY_GPIO_Port, MOTOR_L_R_STBY_Pin, GPIO_PIN_SET);		//STBY
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004eb8:	4840      	ldr	r0, [pc, #256]	; (8004fbc <drive_dir+0x13c>)
 8004eba:	f7fd fa23 	bl	8002304 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(MOTOR_L_R_STBY_GPIO_Port, MOTOR_L_R_STBY_Pin, GPIO_PIN_SET);		//STBY
		}else{
		    HAL_GPIO_WritePin(MOTOR_L_R_STBY_GPIO_Port, MOTOR_L_R_STBY_Pin, GPIO_PIN_SET);		//STBY
		}
	}
}
 8004ebe:	e078      	b.n	8004fb2 <drive_dir+0x132>
		}else if(dir == 1){
 8004ec0:	79bb      	ldrb	r3, [r7, #6]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d111      	bne.n	8004eea <drive_dir+0x6a>
		    HAL_GPIO_WritePin(MOTOR_L_CW_GPIO_Port, MOTOR_L_CW_Pin, GPIO_PIN_RESET);			//L_CW
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ecc:	483b      	ldr	r0, [pc, #236]	; (8004fbc <drive_dir+0x13c>)
 8004ece:	f7fd fa19 	bl	8002304 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(MOTOR_L_CCW_GPIO_Port, MOTOR_L_CCW_Pin, GPIO_PIN_SET);			//L_CCW
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	2102      	movs	r1, #2
 8004ed6:	4839      	ldr	r0, [pc, #228]	; (8004fbc <drive_dir+0x13c>)
 8004ed8:	f7fd fa14 	bl	8002304 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(MOTOR_L_R_STBY_GPIO_Port, MOTOR_L_R_STBY_Pin, GPIO_PIN_SET);		//STBY
 8004edc:	2201      	movs	r2, #1
 8004ede:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ee2:	4836      	ldr	r0, [pc, #216]	; (8004fbc <drive_dir+0x13c>)
 8004ee4:	f7fd fa0e 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004ee8:	e063      	b.n	8004fb2 <drive_dir+0x132>
		}else if(dir == 2){
 8004eea:	79bb      	ldrb	r3, [r7, #6]
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d111      	bne.n	8004f14 <drive_dir+0x94>
		    HAL_GPIO_WritePin(MOTOR_L_CW_GPIO_Port, MOTOR_L_CW_Pin, GPIO_PIN_SET);				//L_CW
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ef6:	4831      	ldr	r0, [pc, #196]	; (8004fbc <drive_dir+0x13c>)
 8004ef8:	f7fd fa04 	bl	8002304 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(MOTOR_L_CCW_GPIO_Port, MOTOR_L_CCW_Pin, GPIO_PIN_SET);			//L_CCW
 8004efc:	2201      	movs	r2, #1
 8004efe:	2102      	movs	r1, #2
 8004f00:	482e      	ldr	r0, [pc, #184]	; (8004fbc <drive_dir+0x13c>)
 8004f02:	f7fd f9ff 	bl	8002304 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(MOTOR_L_R_STBY_GPIO_Port, MOTOR_L_R_STBY_Pin, GPIO_PIN_SET);		//STBY
 8004f06:	2201      	movs	r2, #1
 8004f08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f0c:	482b      	ldr	r0, [pc, #172]	; (8004fbc <drive_dir+0x13c>)
 8004f0e:	f7fd f9f9 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004f12:	e04e      	b.n	8004fb2 <drive_dir+0x132>
		    HAL_GPIO_WritePin(MOTOR_L_R_STBY_GPIO_Port, MOTOR_L_R_STBY_Pin, GPIO_PIN_SET);		//STBY
 8004f14:	2201      	movs	r2, #1
 8004f16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f1a:	4828      	ldr	r0, [pc, #160]	; (8004fbc <drive_dir+0x13c>)
 8004f1c:	f7fd f9f2 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004f20:	e047      	b.n	8004fb2 <drive_dir+0x132>
		if(dir == 0){
 8004f22:	79bb      	ldrb	r3, [r7, #6]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d112      	bne.n	8004f4e <drive_dir+0xce>
		    HAL_GPIO_WritePin(MOTOR_R_CW_GPIO_Port, MOTOR_R_CW_Pin, GPIO_PIN_SET);				//R_CW
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f2e:	4823      	ldr	r0, [pc, #140]	; (8004fbc <drive_dir+0x13c>)
 8004f30:	f7fd f9e8 	bl	8002304 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(MOTOR_R_CCW_GPIO_Port, MOTOR_R_CCW_Pin, GPIO_PIN_RESET);			//R_CCW
 8004f34:	2200      	movs	r2, #0
 8004f36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f3a:	4820      	ldr	r0, [pc, #128]	; (8004fbc <drive_dir+0x13c>)
 8004f3c:	f7fd f9e2 	bl	8002304 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(MOTOR_L_R_STBY_GPIO_Port, MOTOR_L_R_STBY_Pin, GPIO_PIN_SET);		//STBY
 8004f40:	2201      	movs	r2, #1
 8004f42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f46:	481d      	ldr	r0, [pc, #116]	; (8004fbc <drive_dir+0x13c>)
 8004f48:	f7fd f9dc 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004f4c:	e031      	b.n	8004fb2 <drive_dir+0x132>
		}else if(dir == 1){
 8004f4e:	79bb      	ldrb	r3, [r7, #6]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d112      	bne.n	8004f7a <drive_dir+0xfa>
		    HAL_GPIO_WritePin(MOTOR_R_CW_GPIO_Port, MOTOR_R_CW_Pin, GPIO_PIN_RESET);			//R_CW
 8004f54:	2200      	movs	r2, #0
 8004f56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f5a:	4818      	ldr	r0, [pc, #96]	; (8004fbc <drive_dir+0x13c>)
 8004f5c:	f7fd f9d2 	bl	8002304 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(MOTOR_R_CCW_GPIO_Port, MOTOR_R_CCW_Pin, GPIO_PIN_SET);			//R_CCW
 8004f60:	2201      	movs	r2, #1
 8004f62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f66:	4815      	ldr	r0, [pc, #84]	; (8004fbc <drive_dir+0x13c>)
 8004f68:	f7fd f9cc 	bl	8002304 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(MOTOR_L_R_STBY_GPIO_Port, MOTOR_L_R_STBY_Pin, GPIO_PIN_SET);		//STBY
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f72:	4812      	ldr	r0, [pc, #72]	; (8004fbc <drive_dir+0x13c>)
 8004f74:	f7fd f9c6 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004f78:	e01b      	b.n	8004fb2 <drive_dir+0x132>
		}else if(dir == 2){
 8004f7a:	79bb      	ldrb	r3, [r7, #6]
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d112      	bne.n	8004fa6 <drive_dir+0x126>
		    HAL_GPIO_WritePin(MOTOR_R_CW_GPIO_Port, MOTOR_R_CW_Pin, GPIO_PIN_SET);				//R_CW
 8004f80:	2201      	movs	r2, #1
 8004f82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f86:	480d      	ldr	r0, [pc, #52]	; (8004fbc <drive_dir+0x13c>)
 8004f88:	f7fd f9bc 	bl	8002304 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(MOTOR_R_CCW_GPIO_Port, MOTOR_R_CCW_Pin, GPIO_PIN_SET);			//R_CCW
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f92:	480a      	ldr	r0, [pc, #40]	; (8004fbc <drive_dir+0x13c>)
 8004f94:	f7fd f9b6 	bl	8002304 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(MOTOR_L_R_STBY_GPIO_Port, MOTOR_L_R_STBY_Pin, GPIO_PIN_SET);		//STBY
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f9e:	4807      	ldr	r0, [pc, #28]	; (8004fbc <drive_dir+0x13c>)
 8004fa0:	f7fd f9b0 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004fa4:	e005      	b.n	8004fb2 <drive_dir+0x132>
		    HAL_GPIO_WritePin(MOTOR_L_R_STBY_GPIO_Port, MOTOR_L_R_STBY_Pin, GPIO_PIN_SET);		//STBY
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004fac:	4803      	ldr	r0, [pc, #12]	; (8004fbc <drive_dir+0x13c>)
 8004fae:	f7fd f9a9 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004fb2:	bf00      	nop
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	40020400 	.word	0x40020400

08004fc0 <run_select>:
//run_select
// a走行速度を選択する
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void run_select(){
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
	full_led_write1(YELLOW);
 8004fc6:	2006      	movs	r0, #6
 8004fc8:	f00d f8ae 	bl	8012128 <full_led_write1>
	int mode = 0;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	607b      	str	r3, [r7, #4]

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	b2d8      	uxtb	r0, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	b2d9      	uxtb	r1, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	461a      	mov	r2, r3
 8004ff0:	f00d f860 	bl	80120b4 <led_write>
		if(dist_r >= 20){
 8004ff4:	4b23      	ldr	r3, [pc, #140]	; (8005084 <run_select+0xc4>)
 8004ff6:	edd3 7a00 	vldr	s15, [r3]
 8004ffa:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004ffe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005006:	db0f      	blt.n	8005028 <run_select+0x68>
			  mode++;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3301      	adds	r3, #1
 800500c:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800500e:	4b1d      	ldr	r3, [pc, #116]	; (8005084 <run_select+0xc4>)
 8005010:	f04f 0200 	mov.w	r2, #0
 8005014:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b07      	cmp	r3, #7
 800501a:	dd01      	ble.n	8005020 <run_select+0x60>
				  mode = 0;
 800501c:	2300      	movs	r3, #0
 800501e:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8005020:	6879      	ldr	r1, [r7, #4]
 8005022:	4819      	ldr	r0, [pc, #100]	; (8005088 <run_select+0xc8>)
 8005024:	f00d fefa 	bl	8012e1c <iprintf>
		}
		if(dist_r <= -20){
 8005028:	4b16      	ldr	r3, [pc, #88]	; (8005084 <run_select+0xc4>)
 800502a:	edd3 7a00 	vldr	s15, [r3]
 800502e:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8005032:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800503a:	d80f      	bhi.n	800505c <run_select+0x9c>
			  mode--;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3b01      	subs	r3, #1
 8005040:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8005042:	4b10      	ldr	r3, [pc, #64]	; (8005084 <run_select+0xc4>)
 8005044:	f04f 0200 	mov.w	r2, #0
 8005048:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	da01      	bge.n	8005054 <run_select+0x94>
				  mode = 7;
 8005050:	2307      	movs	r3, #7
 8005052:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8005054:	6879      	ldr	r1, [r7, #4]
 8005056:	480c      	ldr	r0, [pc, #48]	; (8005088 <run_select+0xc8>)
 8005058:	f00d fee0 	bl	8012e1c <iprintf>
		}
		if(ad_fl >= WALL_BASE_FL && ad_fr >= WALL_BASE_FR){
 800505c:	4b0b      	ldr	r3, [pc, #44]	; (800508c <run_select+0xcc>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2bc7      	cmp	r3, #199	; 0xc7
 8005062:	d9b5      	bls.n	8004fd0 <run_select+0x10>
 8005064:	4b0a      	ldr	r3, [pc, #40]	; (8005090 <run_select+0xd0>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b77      	cmp	r3, #119	; 0x77
 800506a:	d9b1      	bls.n	8004fd0 <run_select+0x10>
			  run_mode = mode;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	b2da      	uxtb	r2, r3
 8005070:	4b08      	ldr	r3, [pc, #32]	; (8005094 <run_select+0xd4>)
 8005072:	701a      	strb	r2, [r3, #0]
			  full_led_write1(BLUEGREEN);
 8005074:	2004      	movs	r0, #4
 8005076:	f00d f857 	bl	8012128 <full_led_write1>
			  break;
 800507a:	bf00      	nop
		}
	}
}
 800507c:	bf00      	nop
 800507e:	3708      	adds	r7, #8
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	20000b2c 	.word	0x20000b2c
 8005088:	08014058 	.word	0x08014058
 800508c:	20000d94 	.word	0x20000d94
 8005090:	20000c80 	.word	0x20000c80
 8005094:	20000456 	.word	0x20000456

08005098 <driveA>:
//driveA
// a指定距離、指定加速度で加速走行する
// a引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveA(uint16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 8005098:	b590      	push	{r4, r7, lr}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	4604      	mov	r4, r0
 80050a0:	4608      	mov	r0, r1
 80050a2:	4611      	mov	r1, r2
 80050a4:	461a      	mov	r2, r3
 80050a6:	4623      	mov	r3, r4
 80050a8:	80fb      	strh	r3, [r7, #6]
 80050aa:	4603      	mov	r3, r0
 80050ac:	80bb      	strh	r3, [r7, #4]
 80050ae:	460b      	mov	r3, r1
 80050b0:	807b      	strh	r3, [r7, #2]
 80050b2:	4613      	mov	r3, r2
 80050b4:	803b      	strh	r3, [r7, #0]

	speed_min_l = speed_min_r = speed_min_p;
 80050b6:	88bb      	ldrh	r3, [r7, #4]
 80050b8:	ee07 3a90 	vmov	s15, r3
 80050bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050c0:	4b27      	ldr	r3, [pc, #156]	; (8005160 <driveA+0xc8>)
 80050c2:	edc3 7a00 	vstr	s15, [r3]
 80050c6:	4b27      	ldr	r3, [pc, #156]	; (8005164 <driveA+0xcc>)
 80050c8:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 80050cc:	887b      	ldrh	r3, [r7, #2]
 80050ce:	ee07 3a90 	vmov	s15, r3
 80050d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d6:	4b24      	ldr	r3, [pc, #144]	; (8005168 <driveA+0xd0>)
 80050d8:	edc3 7a00 	vstr	s15, [r3]
 80050dc:	4b23      	ldr	r3, [pc, #140]	; (800516c <driveA+0xd4>)
 80050de:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;							//a引数の各パラメータをグローバル変数化
 80050e2:	88fb      	ldrh	r3, [r7, #6]
 80050e4:	ee07 3a90 	vmov	s15, r3
 80050e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ec:	4b20      	ldr	r3, [pc, #128]	; (8005170 <driveA+0xd8>)
 80050ee:	edc3 7a00 	vstr	s15, [r3]
 80050f2:	4b20      	ldr	r3, [pc, #128]	; (8005174 <driveA+0xdc>)
 80050f4:	edc3 7a00 	vstr	s15, [r3]
	if(MF2.FLAG.HACCEL)target_speed_l = target_speed_r = speed_min_p;
 80050f8:	4b1f      	ldr	r3, [pc, #124]	; (8005178 <driveA+0xe0>)
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00a      	beq.n	800511c <driveA+0x84>
 8005106:	88bb      	ldrh	r3, [r7, #4]
 8005108:	ee07 3a90 	vmov	s15, r3
 800510c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005110:	4b1a      	ldr	r3, [pc, #104]	; (800517c <driveA+0xe4>)
 8005112:	edc3 7a00 	vstr	s15, [r3]
 8005116:	4b1a      	ldr	r3, [pc, #104]	; (8005180 <driveA+0xe8>)
 8005118:	edc3 7a00 	vstr	s15, [r3]

	drive_start();											//a走行開始
 800511c:	f7ff fdd8 	bl	8004cd0 <drive_start>

	//----a走行----
	while((dist_l < dist) || (dist_r < dist));				//a左右のモータが指定距離以上進むまで待機
 8005120:	bf00      	nop
 8005122:	883b      	ldrh	r3, [r7, #0]
 8005124:	ee07 3a90 	vmov	s15, r3
 8005128:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800512c:	4b15      	ldr	r3, [pc, #84]	; (8005184 <driveA+0xec>)
 800512e:	edd3 7a00 	vldr	s15, [r3]
 8005132:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800513a:	dcf2      	bgt.n	8005122 <driveA+0x8a>
 800513c:	883b      	ldrh	r3, [r7, #0]
 800513e:	ee07 3a90 	vmov	s15, r3
 8005142:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005146:	4b10      	ldr	r3, [pc, #64]	; (8005188 <driveA+0xf0>)
 8005148:	edd3 7a00 	vldr	s15, [r3]
 800514c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005154:	dce5      	bgt.n	8005122 <driveA+0x8a>
}
 8005156:	bf00      	nop
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	bd90      	pop	{r4, r7, pc}
 800515e:	bf00      	nop
 8005160:	20000fec 	.word	0x20000fec
 8005164:	20000b94 	.word	0x20000b94
 8005168:	200001a4 	.word	0x200001a4
 800516c:	2000077c 	.word	0x2000077c
 8005170:	20000b24 	.word	0x20000b24
 8005174:	20000d98 	.word	0x20000d98
 8005178:	20000fa4 	.word	0x20000fa4
 800517c:	200001a0 	.word	0x200001a0
 8005180:	20000c7c 	.word	0x20000c7c
 8005184:	20001648 	.word	0x20001648
 8005188:	20000b2c 	.word	0x20000b2c

0800518c <driveD>:
//driveD
// a指定距離、指定減速度で減速走行する
// a引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveD(int16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 800518c:	b590      	push	{r4, r7, lr}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	4604      	mov	r4, r0
 8005194:	4608      	mov	r0, r1
 8005196:	4611      	mov	r1, r2
 8005198:	461a      	mov	r2, r3
 800519a:	4623      	mov	r3, r4
 800519c:	80fb      	strh	r3, [r7, #6]
 800519e:	4603      	mov	r3, r0
 80051a0:	80bb      	strh	r3, [r7, #4]
 80051a2:	460b      	mov	r3, r1
 80051a4:	807b      	strh	r3, [r7, #2]
 80051a6:	4613      	mov	r3, r2
 80051a8:	803b      	strh	r3, [r7, #0]

	float speed_0 = (target_speed_l + target_speed_r) / 2;					//a等速走行距離を計算するためにmain.cより参照
 80051aa:	4b5a      	ldr	r3, [pc, #360]	; (8005314 <driveD+0x188>)
 80051ac:	ed93 7a00 	vldr	s14, [r3]
 80051b0:	4b59      	ldr	r3, [pc, #356]	; (8005318 <driveD+0x18c>)
 80051b2:	edd3 7a00 	vldr	s15, [r3]
 80051b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80051ba:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80051be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80051c2:	edc7 7a03 	vstr	s15, [r7, #12]
	speed_min_l = speed_min_r = speed_min_p;
 80051c6:	88bb      	ldrh	r3, [r7, #4]
 80051c8:	ee07 3a90 	vmov	s15, r3
 80051cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d0:	4b52      	ldr	r3, [pc, #328]	; (800531c <driveD+0x190>)
 80051d2:	edc3 7a00 	vstr	s15, [r3]
 80051d6:	4b52      	ldr	r3, [pc, #328]	; (8005320 <driveD+0x194>)
 80051d8:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 80051dc:	887b      	ldrh	r3, [r7, #2]
 80051de:	ee07 3a90 	vmov	s15, r3
 80051e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e6:	4b4f      	ldr	r3, [pc, #316]	; (8005324 <driveD+0x198>)
 80051e8:	edc3 7a00 	vstr	s15, [r3]
 80051ec:	4b4e      	ldr	r3, [pc, #312]	; (8005328 <driveD+0x19c>)
 80051ee:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;											//a引数の各パラメータをグローバル変数化
 80051f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051f6:	ee07 3a90 	vmov	s15, r3
 80051fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051fe:	4b4b      	ldr	r3, [pc, #300]	; (800532c <driveD+0x1a0>)
 8005200:	edc3 7a00 	vstr	s15, [r3]
 8005204:	4b4a      	ldr	r3, [pc, #296]	; (8005330 <driveD+0x1a4>)
 8005206:	edc3 7a00 	vstr	s15, [r3]

	int16_t c_dist = dist - (speed_min_l*speed_min_l  - speed_0*speed_0)/(2*accel_l);			//a等速走行距離 = 総距離 - 減速に必要な距離
 800520a:	883b      	ldrh	r3, [r7, #0]
 800520c:	ee07 3a90 	vmov	s15, r3
 8005210:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005214:	4b42      	ldr	r3, [pc, #264]	; (8005320 <driveD+0x194>)
 8005216:	edd3 6a00 	vldr	s13, [r3]
 800521a:	4b41      	ldr	r3, [pc, #260]	; (8005320 <driveD+0x194>)
 800521c:	edd3 7a00 	vldr	s15, [r3]
 8005220:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005224:	ed97 6a03 	vldr	s12, [r7, #12]
 8005228:	edd7 7a03 	vldr	s15, [r7, #12]
 800522c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005230:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8005234:	4b3e      	ldr	r3, [pc, #248]	; (8005330 <driveD+0x1a4>)
 8005236:	edd3 7a00 	vldr	s15, [r3]
 800523a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800523e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005242:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005246:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800524a:	ee17 3a90 	vmov	r3, s15
 800524e:	817b      	strh	r3, [r7, #10]

	accel_l = accel_r = 0;
 8005250:	f04f 0300 	mov.w	r3, #0
 8005254:	4a35      	ldr	r2, [pc, #212]	; (800532c <driveD+0x1a0>)
 8005256:	6013      	str	r3, [r2, #0]
 8005258:	4a35      	ldr	r2, [pc, #212]	; (8005330 <driveD+0x1a4>)
 800525a:	6013      	str	r3, [r2, #0]
	dist_l = dist_r = 0;
 800525c:	f04f 0300 	mov.w	r3, #0
 8005260:	4a34      	ldr	r2, [pc, #208]	; (8005334 <driveD+0x1a8>)
 8005262:	6013      	str	r3, [r2, #0]
 8005264:	4a34      	ldr	r2, [pc, #208]	; (8005338 <driveD+0x1ac>)
 8005266:	6013      	str	r3, [r2, #0]
	if(c_dist > 0){
 8005268:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800526c:	2b00      	cmp	r3, #0
 800526e:	dd1c      	ble.n	80052aa <driveD+0x11e>
		//----a等速走行----
		while((dist_l < c_dist) || (dist_r < c_dist));						//a左右のモータが等速分の距離以上進むまで待機
 8005270:	bf00      	nop
 8005272:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005276:	ee07 3a90 	vmov	s15, r3
 800527a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800527e:	4b2e      	ldr	r3, [pc, #184]	; (8005338 <driveD+0x1ac>)
 8005280:	edd3 7a00 	vldr	s15, [r3]
 8005284:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800528c:	dcf1      	bgt.n	8005272 <driveD+0xe6>
 800528e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005292:	ee07 3a90 	vmov	s15, r3
 8005296:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800529a:	4b26      	ldr	r3, [pc, #152]	; (8005334 <driveD+0x1a8>)
 800529c:	edd3 7a00 	vldr	s15, [r3]
 80052a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052a8:	dce3      	bgt.n	8005272 <driveD+0xe6>
	}
	accel_l = accel_r = accel_p;
 80052aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052ae:	ee07 3a90 	vmov	s15, r3
 80052b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052b6:	4b1d      	ldr	r3, [pc, #116]	; (800532c <driveD+0x1a0>)
 80052b8:	edc3 7a00 	vstr	s15, [r3]
 80052bc:	4b1c      	ldr	r3, [pc, #112]	; (8005330 <driveD+0x1a4>)
 80052be:	edc3 7a00 	vstr	s15, [r3]
	//----a減速走行----
	while((dist_l < dist) && (dist_r < dist));								//a左右のモータが減速分の距離以上進むまで待機
 80052c2:	bf00      	nop
 80052c4:	883b      	ldrh	r3, [r7, #0]
 80052c6:	ee07 3a90 	vmov	s15, r3
 80052ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052ce:	4b1a      	ldr	r3, [pc, #104]	; (8005338 <driveD+0x1ac>)
 80052d0:	edd3 7a00 	vldr	s15, [r3]
 80052d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052dc:	dd0c      	ble.n	80052f8 <driveD+0x16c>
 80052de:	883b      	ldrh	r3, [r7, #0]
 80052e0:	ee07 3a90 	vmov	s15, r3
 80052e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052e8:	4b12      	ldr	r3, [pc, #72]	; (8005334 <driveD+0x1a8>)
 80052ea:	edd3 7a00 	vldr	s15, [r3]
 80052ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052f6:	dce5      	bgt.n	80052c4 <driveD+0x138>

	if(!MF2.FLAG.HACCEL)drive_stop();										//a走行停止
 80052f8:	4b10      	ldr	r3, [pc, #64]	; (800533c <driveD+0x1b0>)
 80052fa:	881b      	ldrh	r3, [r3, #0]
 80052fc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <driveD+0x17e>
 8005306:	f7ff fd13 	bl	8004d30 <drive_stop>
}
 800530a:	bf00      	nop
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	bd90      	pop	{r4, r7, pc}
 8005312:	bf00      	nop
 8005314:	20000c7c 	.word	0x20000c7c
 8005318:	200001a0 	.word	0x200001a0
 800531c:	20000fec 	.word	0x20000fec
 8005320:	20000b94 	.word	0x20000b94
 8005324:	200001a4 	.word	0x200001a4
 8005328:	2000077c 	.word	0x2000077c
 800532c:	20000b24 	.word	0x20000b24
 8005330:	20000d98 	.word	0x20000d98
 8005334:	20000b2c 	.word	0x20000b2c
 8005338:	20001648 	.word	0x20001648
 800533c:	20000fa4 	.word	0x20000fa4

08005340 <driveU>:
//driveU
// a指定距離分等速走行して停止する
// a引数1：dist …… 走行距離
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveU(uint16_t dist){
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	4603      	mov	r3, r0
 8005348:	80fb      	strh	r3, [r7, #6]

	accel_l = accel_r = 0;									//a等速走行のため加速度は0
 800534a:	f04f 0300 	mov.w	r3, #0
 800534e:	4a28      	ldr	r2, [pc, #160]	; (80053f0 <driveU+0xb0>)
 8005350:	6013      	str	r3, [r2, #0]
 8005352:	4a28      	ldr	r2, [pc, #160]	; (80053f4 <driveU+0xb4>)
 8005354:	6013      	str	r3, [r2, #0]
	dist_l = dist_r = 0;
 8005356:	f04f 0300 	mov.w	r3, #0
 800535a:	4a27      	ldr	r2, [pc, #156]	; (80053f8 <driveU+0xb8>)
 800535c:	6013      	str	r3, [r2, #0]
 800535e:	4a27      	ldr	r2, [pc, #156]	; (80053fc <driveU+0xbc>)
 8005360:	6013      	str	r3, [r2, #0]

	//----a走行----
	while((dist_l < dist) || (dist_r < dist)){				//a左右のモータが指定パルス以上進むまで待機
 8005362:	e025      	b.n	80053b0 <driveU+0x70>
		if(MF.FLAG.WEDGE){
 8005364:	4b26      	ldr	r3, [pc, #152]	; (8005400 <driveU+0xc0>)
 8005366:	881b      	ldrh	r3, [r3, #0]
 8005368:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d01e      	beq.n	80053b0 <driveU+0x70>
			if(ad_l < WALL_BASE_L-40 || ad_r < WALL_BASE_R-40){
 8005372:	4b24      	ldr	r3, [pc, #144]	; (8005404 <driveU+0xc4>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2b8b      	cmp	r3, #139	; 0x8b
 8005378:	d904      	bls.n	8005384 <driveU+0x44>
 800537a:	4b23      	ldr	r3, [pc, #140]	; (8005408 <driveU+0xc8>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005382:	d215      	bcs.n	80053b0 <driveU+0x70>
				while((dist_l < W_DIST) || (dist_r < W_DIST));	//a左右のモータが壁切れ用指定距離以上進むまで待機
 8005384:	bf00      	nop
 8005386:	4b1d      	ldr	r3, [pc, #116]	; (80053fc <driveU+0xbc>)
 8005388:	edd3 7a00 	vldr	s15, [r3]
 800538c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800540c <driveU+0xcc>
 8005390:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005398:	d4f5      	bmi.n	8005386 <driveU+0x46>
 800539a:	4b17      	ldr	r3, [pc, #92]	; (80053f8 <driveU+0xb8>)
 800539c:	edd3 7a00 	vldr	s15, [r3]
 80053a0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800540c <driveU+0xcc>
 80053a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ac:	d4eb      	bmi.n	8005386 <driveU+0x46>
			break;
 80053ae:	e019      	b.n	80053e4 <driveU+0xa4>
	while((dist_l < dist) || (dist_r < dist)){				//a左右のモータが指定パルス以上進むまで待機
 80053b0:	88fb      	ldrh	r3, [r7, #6]
 80053b2:	ee07 3a90 	vmov	s15, r3
 80053b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053ba:	4b10      	ldr	r3, [pc, #64]	; (80053fc <driveU+0xbc>)
 80053bc:	edd3 7a00 	vldr	s15, [r3]
 80053c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80053c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053c8:	dccc      	bgt.n	8005364 <driveU+0x24>
 80053ca:	88fb      	ldrh	r3, [r7, #6]
 80053cc:	ee07 3a90 	vmov	s15, r3
 80053d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053d4:	4b08      	ldr	r3, [pc, #32]	; (80053f8 <driveU+0xb8>)
 80053d6:	edd3 7a00 	vldr	s15, [r3]
 80053da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80053de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053e2:	dcbf      	bgt.n	8005364 <driveU+0x24>
			}
		}
	}
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	20000b24 	.word	0x20000b24
 80053f4:	20000d98 	.word	0x20000d98
 80053f8:	20000b2c 	.word	0x20000b2c
 80053fc:	20001648 	.word	0x20001648
 8005400:	20000fa8 	.word	0x20000fa8
 8005404:	20000b3c 	.word	0x20000b3c
 8005408:	20000fa0 	.word	0x20000fa0
 800540c:	428c0000 	.word	0x428c0000

08005410 <driveC>:
//driveC
// a指定距離分デフォルト速度で走行して停止する
// a引数1：dist …… 走行距離
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC(uint16_t dist){
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	4603      	mov	r3, r0
 8005418:	80fb      	strh	r3, [r7, #6]

	speed_min_l = speed_min_r = 150;
 800541a:	4b19      	ldr	r3, [pc, #100]	; (8005480 <driveC+0x70>)
 800541c:	4a19      	ldr	r2, [pc, #100]	; (8005484 <driveC+0x74>)
 800541e:	6013      	str	r3, [r2, #0]
 8005420:	4a19      	ldr	r2, [pc, #100]	; (8005488 <driveC+0x78>)
 8005422:	6013      	str	r3, [r2, #0]
	speed_max_l = speed_max_r = 150;
 8005424:	4b16      	ldr	r3, [pc, #88]	; (8005480 <driveC+0x70>)
 8005426:	4a19      	ldr	r2, [pc, #100]	; (800548c <driveC+0x7c>)
 8005428:	6013      	str	r3, [r2, #0]
 800542a:	4a19      	ldr	r2, [pc, #100]	; (8005490 <driveC+0x80>)
 800542c:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;									//a等速走行のため加速度は0
 800542e:	f04f 0300 	mov.w	r3, #0
 8005432:	4a18      	ldr	r2, [pc, #96]	; (8005494 <driveC+0x84>)
 8005434:	6013      	str	r3, [r2, #0]
 8005436:	4a18      	ldr	r2, [pc, #96]	; (8005498 <driveC+0x88>)
 8005438:	6013      	str	r3, [r2, #0]

	drive_start();											//a走行開始
 800543a:	f7ff fc49 	bl	8004cd0 <drive_start>
	//====a回転====
	while((dist_l < dist) || (dist_r < dist));				//a左右のモータが定速分の距離以上進むまで待機
 800543e:	bf00      	nop
 8005440:	88fb      	ldrh	r3, [r7, #6]
 8005442:	ee07 3a90 	vmov	s15, r3
 8005446:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800544a:	4b14      	ldr	r3, [pc, #80]	; (800549c <driveC+0x8c>)
 800544c:	edd3 7a00 	vldr	s15, [r3]
 8005450:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005458:	dcf2      	bgt.n	8005440 <driveC+0x30>
 800545a:	88fb      	ldrh	r3, [r7, #6]
 800545c:	ee07 3a90 	vmov	s15, r3
 8005460:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005464:	4b0e      	ldr	r3, [pc, #56]	; (80054a0 <driveC+0x90>)
 8005466:	edd3 7a00 	vldr	s15, [r3]
 800546a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800546e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005472:	dce5      	bgt.n	8005440 <driveC+0x30>

	drive_stop();											//a走行停止
 8005474:	f7ff fc5c 	bl	8004d30 <drive_stop>
}
 8005478:	bf00      	nop
 800547a:	3708      	adds	r7, #8
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	43160000 	.word	0x43160000
 8005484:	20000fec 	.word	0x20000fec
 8005488:	20000b94 	.word	0x20000b94
 800548c:	200001a4 	.word	0x200001a4
 8005490:	2000077c 	.word	0x2000077c
 8005494:	20000b24 	.word	0x20000b24
 8005498:	20000d98 	.word	0x20000d98
 800549c:	20001648 	.word	0x20001648
 80054a0:	20000b2c 	.word	0x20000b2c

080054a4 <driveC2>:
//driveC2
//a指定距離分デフォルト逆回転速度で走行して停止する
//a引数1：dist …… 走行距離
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC2(uint16_t dist){
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	4603      	mov	r3, r0
 80054ac:	80fb      	strh	r3, [r7, #6]

	speed_min_l = speed_min_r = -250;
 80054ae:	4b1a      	ldr	r3, [pc, #104]	; (8005518 <driveC2+0x74>)
 80054b0:	4a1a      	ldr	r2, [pc, #104]	; (800551c <driveC2+0x78>)
 80054b2:	6013      	str	r3, [r2, #0]
 80054b4:	4a1a      	ldr	r2, [pc, #104]	; (8005520 <driveC2+0x7c>)
 80054b6:	6013      	str	r3, [r2, #0]
	speed_max_l = speed_max_r = -250;
 80054b8:	4b17      	ldr	r3, [pc, #92]	; (8005518 <driveC2+0x74>)
 80054ba:	4a1a      	ldr	r2, [pc, #104]	; (8005524 <driveC2+0x80>)
 80054bc:	6013      	str	r3, [r2, #0]
 80054be:	4a1a      	ldr	r2, [pc, #104]	; (8005528 <driveC2+0x84>)
 80054c0:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;									//a等速走行のため加速度は0
 80054c2:	f04f 0300 	mov.w	r3, #0
 80054c6:	4a19      	ldr	r2, [pc, #100]	; (800552c <driveC2+0x88>)
 80054c8:	6013      	str	r3, [r2, #0]
 80054ca:	4a19      	ldr	r2, [pc, #100]	; (8005530 <driveC2+0x8c>)
 80054cc:	6013      	str	r3, [r2, #0]

	drive_start();											//a走行開始
 80054ce:	f7ff fbff 	bl	8004cd0 <drive_start>
	//====a回転====
	while((dist_l > (-1*dist)) || (dist_r > (-1*dist)));	//a左右のモータが定速分の逆走距離以上進むまで待機
 80054d2:	bf00      	nop
 80054d4:	88fb      	ldrh	r3, [r7, #6]
 80054d6:	425b      	negs	r3, r3
 80054d8:	ee07 3a90 	vmov	s15, r3
 80054dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054e0:	4b14      	ldr	r3, [pc, #80]	; (8005534 <driveC2+0x90>)
 80054e2:	edd3 7a00 	vldr	s15, [r3]
 80054e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ee:	d4f1      	bmi.n	80054d4 <driveC2+0x30>
 80054f0:	88fb      	ldrh	r3, [r7, #6]
 80054f2:	425b      	negs	r3, r3
 80054f4:	ee07 3a90 	vmov	s15, r3
 80054f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054fc:	4b0e      	ldr	r3, [pc, #56]	; (8005538 <driveC2+0x94>)
 80054fe:	edd3 7a00 	vldr	s15, [r3]
 8005502:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800550a:	d4e3      	bmi.n	80054d4 <driveC2+0x30>

	drive_stop();											//a走行停止
 800550c:	f7ff fc10 	bl	8004d30 <drive_stop>
}
 8005510:	bf00      	nop
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	c37a0000 	.word	0xc37a0000
 800551c:	20000fec 	.word	0x20000fec
 8005520:	20000b94 	.word	0x20000b94
 8005524:	200001a4 	.word	0x200001a4
 8005528:	2000077c 	.word	0x2000077c
 800552c:	20000b24 	.word	0x20000b24
 8005530:	20000d98 	.word	0x20000d98
 8005534:	20001648 	.word	0x20001648
 8005538:	20000b2c 	.word	0x20000b2c

0800553c <slalomF>:
//slalomF
//aスラロームの前オフセット部分
//a引数1：
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalomF(int16_t accel_p, int16_t speed_p, uint8_t dist_p, uint16_t wall_fl, uint16_t wall_fr){
 800553c:	b590      	push	{r4, r7, lr}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	4604      	mov	r4, r0
 8005544:	4608      	mov	r0, r1
 8005546:	4611      	mov	r1, r2
 8005548:	461a      	mov	r2, r3
 800554a:	4623      	mov	r3, r4
 800554c:	80fb      	strh	r3, [r7, #6]
 800554e:	4603      	mov	r3, r0
 8005550:	80bb      	strh	r3, [r7, #4]
 8005552:	460b      	mov	r3, r1
 8005554:	70fb      	strb	r3, [r7, #3]
 8005556:	4613      	mov	r3, r2
 8005558:	803b      	strh	r3, [r7, #0]
	MF.FLAG.GYRO = 0;
 800555a:	4a2b      	ldr	r2, [pc, #172]	; (8005608 <slalomF+0xcc>)
 800555c:	8813      	ldrh	r3, [r2, #0]
 800555e:	f36f 2308 	bfc	r3, #8, #1
 8005562:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8005564:	4a28      	ldr	r2, [pc, #160]	; (8005608 <slalomF+0xcc>)
 8005566:	8813      	ldrh	r3, [r2, #0]
 8005568:	f043 0304 	orr.w	r3, r3, #4
 800556c:	8013      	strh	r3, [r2, #0]

	accel_l = accel_r = accel_p;
 800556e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005572:	ee07 3a90 	vmov	s15, r3
 8005576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800557a:	4b24      	ldr	r3, [pc, #144]	; (800560c <slalomF+0xd0>)
 800557c:	edc3 7a00 	vstr	s15, [r3]
 8005580:	4b23      	ldr	r3, [pc, #140]	; (8005610 <slalomF+0xd4>)
 8005582:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_p;
 8005586:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800558a:	ee07 3a90 	vmov	s15, r3
 800558e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005592:	4b20      	ldr	r3, [pc, #128]	; (8005614 <slalomF+0xd8>)
 8005594:	edc3 7a00 	vstr	s15, [r3]
 8005598:	4b1f      	ldr	r3, [pc, #124]	; (8005618 <slalomF+0xdc>)
 800559a:	edc3 7a00 	vstr	s15, [r3]

	control_start();
 800559e:	f7ff fc33 	bl	8004e08 <control_start>
	dist_l = dist_r = 0;
 80055a2:	f04f 0300 	mov.w	r3, #0
 80055a6:	4a1d      	ldr	r2, [pc, #116]	; (800561c <slalomF+0xe0>)
 80055a8:	6013      	str	r3, [r2, #0]
 80055aa:	4a1d      	ldr	r2, [pc, #116]	; (8005620 <slalomF+0xe4>)
 80055ac:	6013      	str	r3, [r2, #0]
	while((dist_l+dist_r)/2 < dist_p){
 80055ae:	e00d      	b.n	80055cc <slalomF+0x90>
		if(ad_fl > wall_fl || ad_fr > wall_fr){
 80055b0:	883a      	ldrh	r2, [r7, #0]
 80055b2:	4b1c      	ldr	r3, [pc, #112]	; (8005624 <slalomF+0xe8>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d304      	bcc.n	80055c4 <slalomF+0x88>
 80055ba:	8b3a      	ldrh	r2, [r7, #24]
 80055bc:	4b1a      	ldr	r3, [pc, #104]	; (8005628 <slalomF+0xec>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d203      	bcs.n	80055cc <slalomF+0x90>
			full_led_write2(RED);
 80055c4:	2001      	movs	r0, #1
 80055c6:	f00c fe51 	bl	801226c <full_led_write2>
			break;
 80055ca:	e015      	b.n	80055f8 <slalomF+0xbc>
	while((dist_l+dist_r)/2 < dist_p){
 80055cc:	4b14      	ldr	r3, [pc, #80]	; (8005620 <slalomF+0xe4>)
 80055ce:	ed93 7a00 	vldr	s14, [r3]
 80055d2:	4b12      	ldr	r3, [pc, #72]	; (800561c <slalomF+0xe0>)
 80055d4:	edd3 7a00 	vldr	s15, [r3]
 80055d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055dc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80055e0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80055e4:	78fb      	ldrb	r3, [r7, #3]
 80055e6:	ee07 3a90 	vmov	s15, r3
 80055ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055f6:	d4db      	bmi.n	80055b0 <slalomF+0x74>
		}
	}
	drive_stop();
 80055f8:	f7ff fb9a 	bl	8004d30 <drive_stop>
	control_stop();
 80055fc:	f7ff fc2c 	bl	8004e58 <control_stop>
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	bd90      	pop	{r4, r7, pc}
 8005608:	20000fa8 	.word	0x20000fa8
 800560c:	20000b24 	.word	0x20000b24
 8005610:	20000d98 	.word	0x20000d98
 8005614:	200001a4 	.word	0x200001a4
 8005618:	2000077c 	.word	0x2000077c
 800561c:	20000b2c 	.word	0x20000b2c
 8005620:	20001648 	.word	0x20001648
 8005624:	20000d94 	.word	0x20000d94
 8005628:	20000c80 	.word	0x20000c80

0800562c <slalomR>:
//slalomR
//aスラロームの旋回部分
//a引数1：
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalomR(int32_t degaccel_p, int16_t omega_p, int16_t degree_p, int16_t speed_p){
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	4608      	mov	r0, r1
 8005636:	4611      	mov	r1, r2
 8005638:	461a      	mov	r2, r3
 800563a:	4603      	mov	r3, r0
 800563c:	817b      	strh	r3, [r7, #10]
 800563e:	460b      	mov	r3, r1
 8005640:	813b      	strh	r3, [r7, #8]
 8005642:	4613      	mov	r3, r2
 8005644:	80fb      	strh	r3, [r7, #6]
	MF.FLAG.GYRO = 1;
 8005646:	4a9d      	ldr	r2, [pc, #628]	; (80058bc <slalomR+0x290>)
 8005648:	8813      	ldrh	r3, [r2, #0]
 800564a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800564e:	8013      	strh	r3, [r2, #0]
	full_led_write2(YELLOW);
 8005650:	2006      	movs	r0, #6
 8005652:	f00c fe0b 	bl	801226c <full_led_write2>
	target_degaccel_z = degaccel_p;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	ee07 3a90 	vmov	s15, r3
 800565c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005660:	4b97      	ldr	r3, [pc, #604]	; (80058c0 <slalomR+0x294>)
 8005662:	edc3 7a00 	vstr	s15, [r3]
	target_omega_z = 0;
 8005666:	4b97      	ldr	r3, [pc, #604]	; (80058c4 <slalomR+0x298>)
 8005668:	f04f 0200 	mov.w	r2, #0
 800566c:	601a      	str	r2, [r3, #0]
	speed_G = speed_p;
 800566e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005672:	ee07 3a90 	vmov	s15, r3
 8005676:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800567a:	4b93      	ldr	r3, [pc, #588]	; (80058c8 <slalomR+0x29c>)
 800567c:	edc3 7a00 	vstr	s15, [r3]

	int16_t c_degree;

	if(omega_p < 0){
 8005680:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005684:	2b00      	cmp	r3, #0
 8005686:	da1f      	bge.n	80056c8 <slalomR+0x9c>
		omega_min = omega_p;
 8005688:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800568c:	ee07 3a90 	vmov	s15, r3
 8005690:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005694:	4b8d      	ldr	r3, [pc, #564]	; (80058cc <slalomR+0x2a0>)
 8005696:	edc3 7a00 	vstr	s15, [r3]
		c_degree =  omega_min * omega_min / target_degaccel_z / 2;
 800569a:	4b8c      	ldr	r3, [pc, #560]	; (80058cc <slalomR+0x2a0>)
 800569c:	ed93 7a00 	vldr	s14, [r3]
 80056a0:	4b8a      	ldr	r3, [pc, #552]	; (80058cc <slalomR+0x2a0>)
 80056a2:	edd3 7a00 	vldr	s15, [r3]
 80056a6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80056aa:	4b85      	ldr	r3, [pc, #532]	; (80058c0 <slalomR+0x294>)
 80056ac:	edd3 7a00 	vldr	s15, [r3]
 80056b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056b4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80056b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80056bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056c0:	ee17 3a90 	vmov	r3, s15
 80056c4:	82fb      	strh	r3, [r7, #22]
 80056c6:	e01e      	b.n	8005706 <slalomR+0xda>
	}else{
		omega_max = omega_p;
 80056c8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80056cc:	ee07 3a90 	vmov	s15, r3
 80056d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056d4:	4b7e      	ldr	r3, [pc, #504]	; (80058d0 <slalomR+0x2a4>)
 80056d6:	edc3 7a00 	vstr	s15, [r3]
		c_degree =  omega_max * omega_max / target_degaccel_z / 2;
 80056da:	4b7d      	ldr	r3, [pc, #500]	; (80058d0 <slalomR+0x2a4>)
 80056dc:	ed93 7a00 	vldr	s14, [r3]
 80056e0:	4b7b      	ldr	r3, [pc, #492]	; (80058d0 <slalomR+0x2a4>)
 80056e2:	edd3 7a00 	vldr	s15, [r3]
 80056e6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80056ea:	4b75      	ldr	r3, [pc, #468]	; (80058c0 <slalomR+0x294>)
 80056ec:	edd3 7a00 	vldr	s15, [r3]
 80056f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056f4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80056f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80056fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005700:	ee17 3a90 	vmov	r3, s15
 8005704:	82fb      	strh	r3, [r7, #22]
	}

	MF.FLAG.DRV = 1;
 8005706:	4a6d      	ldr	r2, [pc, #436]	; (80058bc <slalomR+0x290>)
 8005708:	8813      	ldrh	r3, [r2, #0]
 800570a:	f043 0302 	orr.w	r3, r3, #2
 800570e:	8013      	strh	r3, [r2, #0]
	if(omega_p < 0){
 8005710:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005714:	2b00      	cmp	r3, #0
 8005716:	da14      	bge.n	8005742 <slalomR+0x116>
		while(degree_z > target_degree_z+c_degree);
 8005718:	bf00      	nop
 800571a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800571e:	ee07 3a90 	vmov	s15, r3
 8005722:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005726:	4b6b      	ldr	r3, [pc, #428]	; (80058d4 <slalomR+0x2a8>)
 8005728:	edd3 7a00 	vldr	s15, [r3]
 800572c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005730:	4b69      	ldr	r3, [pc, #420]	; (80058d8 <slalomR+0x2ac>)
 8005732:	edd3 7a00 	vldr	s15, [r3]
 8005736:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800573a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800573e:	d4ec      	bmi.n	800571a <slalomR+0xee>
 8005740:	e013      	b.n	800576a <slalomR+0x13e>
	}else{
		while(degree_z < target_degree_z+c_degree);
 8005742:	bf00      	nop
 8005744:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005748:	ee07 3a90 	vmov	s15, r3
 800574c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005750:	4b60      	ldr	r3, [pc, #384]	; (80058d4 <slalomR+0x2a8>)
 8005752:	edd3 7a00 	vldr	s15, [r3]
 8005756:	ee37 7a27 	vadd.f32	s14, s14, s15
 800575a:	4b5f      	ldr	r3, [pc, #380]	; (80058d8 <slalomR+0x2ac>)
 800575c:	edd3 7a00 	vldr	s15, [r3]
 8005760:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005768:	dcec      	bgt.n	8005744 <slalomR+0x118>
	}

	target_degaccel_z = 0;
 800576a:	4b55      	ldr	r3, [pc, #340]	; (80058c0 <slalomR+0x294>)
 800576c:	f04f 0200 	mov.w	r2, #0
 8005770:	601a      	str	r2, [r3, #0]

	if(MF2.FLAG.TEMP){
 8005772:	4b5a      	ldr	r3, [pc, #360]	; (80058dc <slalomR+0x2b0>)
 8005774:	881b      	ldrh	r3, [r3, #0]
 8005776:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	d02d      	beq.n	80057dc <slalomR+0x1b0>
		if(omega_p < 0){
 8005780:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005784:	2b00      	cmp	r3, #0
 8005786:	da14      	bge.n	80057b2 <slalomR+0x186>
			while(degree_z > target_degree_z+degree_p);
 8005788:	bf00      	nop
 800578a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800578e:	ee07 3a90 	vmov	s15, r3
 8005792:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005796:	4b4f      	ldr	r3, [pc, #316]	; (80058d4 <slalomR+0x2a8>)
 8005798:	edd3 7a00 	vldr	s15, [r3]
 800579c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057a0:	4b4d      	ldr	r3, [pc, #308]	; (80058d8 <slalomR+0x2ac>)
 80057a2:	edd3 7a00 	vldr	s15, [r3]
 80057a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80057aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ae:	d4ec      	bmi.n	800578a <slalomR+0x15e>
		}else{
			while(degree_z < target_degree_z+degree_p);
		}
	}

}
 80057b0:	e07f      	b.n	80058b2 <slalomR+0x286>
			while(degree_z < target_degree_z+degree_p);
 80057b2:	bf00      	nop
 80057b4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80057b8:	ee07 3a90 	vmov	s15, r3
 80057bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057c0:	4b44      	ldr	r3, [pc, #272]	; (80058d4 <slalomR+0x2a8>)
 80057c2:	edd3 7a00 	vldr	s15, [r3]
 80057c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057ca:	4b43      	ldr	r3, [pc, #268]	; (80058d8 <slalomR+0x2ac>)
 80057cc:	edd3 7a00 	vldr	s15, [r3]
 80057d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80057d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057d8:	dcec      	bgt.n	80057b4 <slalomR+0x188>
}
 80057da:	e06a      	b.n	80058b2 <slalomR+0x286>
		if(omega_p < 0){
 80057dc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	da18      	bge.n	8005816 <slalomR+0x1ea>
			while(degree_z > target_degree_z+(degree_p-c_degree-4));
 80057e4:	bf00      	nop
 80057e6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80057ea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	3b04      	subs	r3, #4
 80057f2:	ee07 3a90 	vmov	s15, r3
 80057f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057fa:	4b36      	ldr	r3, [pc, #216]	; (80058d4 <slalomR+0x2a8>)
 80057fc:	edd3 7a00 	vldr	s15, [r3]
 8005800:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005804:	4b34      	ldr	r3, [pc, #208]	; (80058d8 <slalomR+0x2ac>)
 8005806:	edd3 7a00 	vldr	s15, [r3]
 800580a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800580e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005812:	d4e8      	bmi.n	80057e6 <slalomR+0x1ba>
 8005814:	e017      	b.n	8005846 <slalomR+0x21a>
			while(degree_z < target_degree_z+(degree_p-c_degree+4));
 8005816:	bf00      	nop
 8005818:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800581c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	3304      	adds	r3, #4
 8005824:	ee07 3a90 	vmov	s15, r3
 8005828:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800582c:	4b29      	ldr	r3, [pc, #164]	; (80058d4 <slalomR+0x2a8>)
 800582e:	edd3 7a00 	vldr	s15, [r3]
 8005832:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005836:	4b28      	ldr	r3, [pc, #160]	; (80058d8 <slalomR+0x2ac>)
 8005838:	edd3 7a00 	vldr	s15, [r3]
 800583c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005844:	dce8      	bgt.n	8005818 <slalomR+0x1ec>
		target_degaccel_z = -degaccel_p;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	425b      	negs	r3, r3
 800584a:	ee07 3a90 	vmov	s15, r3
 800584e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005852:	4b1b      	ldr	r3, [pc, #108]	; (80058c0 <slalomR+0x294>)
 8005854:	edc3 7a00 	vstr	s15, [r3]
		if(omega_p < 0){
 8005858:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800585c:	2b00      	cmp	r3, #0
 800585e:	da14      	bge.n	800588a <slalomR+0x25e>
			while(degree_z > target_degree_z+degree_p);
 8005860:	bf00      	nop
 8005862:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005866:	ee07 3a90 	vmov	s15, r3
 800586a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800586e:	4b19      	ldr	r3, [pc, #100]	; (80058d4 <slalomR+0x2a8>)
 8005870:	edd3 7a00 	vldr	s15, [r3]
 8005874:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005878:	4b17      	ldr	r3, [pc, #92]	; (80058d8 <slalomR+0x2ac>)
 800587a:	edd3 7a00 	vldr	s15, [r3]
 800587e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005886:	d4ec      	bmi.n	8005862 <slalomR+0x236>
}
 8005888:	e013      	b.n	80058b2 <slalomR+0x286>
			while(degree_z < target_degree_z+degree_p);
 800588a:	bf00      	nop
 800588c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005890:	ee07 3a90 	vmov	s15, r3
 8005894:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005898:	4b0e      	ldr	r3, [pc, #56]	; (80058d4 <slalomR+0x2a8>)
 800589a:	edd3 7a00 	vldr	s15, [r3]
 800589e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058a2:	4b0d      	ldr	r3, [pc, #52]	; (80058d8 <slalomR+0x2ac>)
 80058a4:	edd3 7a00 	vldr	s15, [r3]
 80058a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80058ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058b0:	dcec      	bgt.n	800588c <slalomR+0x260>
}
 80058b2:	bf00      	nop
 80058b4:	3718      	adds	r7, #24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	20000fa8 	.word	0x20000fa8
 80058c0:	20000b98 	.word	0x20000b98
 80058c4:	200001a8 	.word	0x200001a8
 80058c8:	20000b34 	.word	0x20000b34
 80058cc:	200002b8 	.word	0x200002b8
 80058d0:	20000b28 	.word	0x20000b28
 80058d4:	20000c78 	.word	0x20000c78
 80058d8:	20000b9c 	.word	0x20000b9c
 80058dc:	20000fa4 	.word	0x20000fa4

080058e0 <slalomB>:
//slalomB
//aスラロームの後オフセット部分
//a引数1：
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalomB(int16_t accel_p, int16_t speed_p, uint8_t dist_p){
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	4603      	mov	r3, r0
 80058e8:	80fb      	strh	r3, [r7, #6]
 80058ea:	460b      	mov	r3, r1
 80058ec:	80bb      	strh	r3, [r7, #4]
 80058ee:	4613      	mov	r3, r2
 80058f0:	70fb      	strb	r3, [r7, #3]
	full_led_write2(BLUEGREEN);
 80058f2:	2004      	movs	r0, #4
 80058f4:	f00c fcba 	bl	801226c <full_led_write2>
	MF.FLAG.GYRO = 0;
 80058f8:	4a22      	ldr	r2, [pc, #136]	; (8005984 <slalomB+0xa4>)
 80058fa:	8813      	ldrh	r3, [r2, #0]
 80058fc:	f36f 2308 	bfc	r3, #8, #1
 8005900:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8005902:	4a20      	ldr	r2, [pc, #128]	; (8005984 <slalomB+0xa4>)
 8005904:	8813      	ldrh	r3, [r2, #0]
 8005906:	f043 0304 	orr.w	r3, r3, #4
 800590a:	8013      	strh	r3, [r2, #0]

	accel_l = accel_r = accel_p;
 800590c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005910:	ee07 3a90 	vmov	s15, r3
 8005914:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005918:	4b1b      	ldr	r3, [pc, #108]	; (8005988 <slalomB+0xa8>)
 800591a:	edc3 7a00 	vstr	s15, [r3]
 800591e:	4b1b      	ldr	r3, [pc, #108]	; (800598c <slalomB+0xac>)
 8005920:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_p;
 8005924:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005928:	ee07 3a90 	vmov	s15, r3
 800592c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005930:	4b17      	ldr	r3, [pc, #92]	; (8005990 <slalomB+0xb0>)
 8005932:	edc3 7a00 	vstr	s15, [r3]
 8005936:	4b17      	ldr	r3, [pc, #92]	; (8005994 <slalomB+0xb4>)
 8005938:	edc3 7a00 	vstr	s15, [r3]

	control_start();
 800593c:	f7ff fa64 	bl	8004e08 <control_start>
	dist_l = dist_r = 0;
 8005940:	f04f 0300 	mov.w	r3, #0
 8005944:	4a14      	ldr	r2, [pc, #80]	; (8005998 <slalomB+0xb8>)
 8005946:	6013      	str	r3, [r2, #0]
 8005948:	4a14      	ldr	r2, [pc, #80]	; (800599c <slalomB+0xbc>)
 800594a:	6013      	str	r3, [r2, #0]
	while((dist_l+dist_r)/2 < dist_p);
 800594c:	bf00      	nop
 800594e:	4b13      	ldr	r3, [pc, #76]	; (800599c <slalomB+0xbc>)
 8005950:	ed93 7a00 	vldr	s14, [r3]
 8005954:	4b10      	ldr	r3, [pc, #64]	; (8005998 <slalomB+0xb8>)
 8005956:	edd3 7a00 	vldr	s15, [r3]
 800595a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800595e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005962:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005966:	78fb      	ldrb	r3, [r7, #3]
 8005968:	ee07 3a90 	vmov	s15, r3
 800596c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005970:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005978:	d4e9      	bmi.n	800594e <slalomB+0x6e>
}
 800597a:	bf00      	nop
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	20000fa8 	.word	0x20000fa8
 8005988:	20000b24 	.word	0x20000b24
 800598c:	20000d98 	.word	0x20000d98
 8005990:	200001a4 	.word	0x200001a4
 8005994:	2000077c 	.word	0x2000077c
 8005998:	20000b2c 	.word	0x20000b2c
 800599c:	20001648 	.word	0x20001648

080059a0 <set_position>:
//set_position
//a機体の尻を壁に当てて場所を区画中央に合わせる
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void set_position(){
 80059a0:	b580      	push	{r7, lr}
 80059a2:	af00      	add	r7, sp, #0

  driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 80059a4:	2064      	movs	r0, #100	; 0x64
 80059a6:	f7ff fd7d 	bl	80054a4 <driveC2>
  degree_z = target_degree_z;
 80059aa:	4b05      	ldr	r3, [pc, #20]	; (80059c0 <set_position+0x20>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a05      	ldr	r2, [pc, #20]	; (80059c4 <set_position+0x24>)
 80059b0:	6013      	str	r3, [r2, #0]
  start_mode = 0;
 80059b2:	4b05      	ldr	r3, [pc, #20]	; (80059c8 <set_position+0x28>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	701a      	strb	r2, [r3, #0]
  start_sectionA();
 80059b8:	f000 f826 	bl	8005a08 <start_sectionA>
}
 80059bc:	bf00      	nop
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	20000c78 	.word	0x20000c78
 80059c4:	20000b9c 	.word	0x20000b9c
 80059c8:	2000164c 	.word	0x2000164c

080059cc <set_positionF>:
//set_positionF
//a前壁との距離を測定し、場所を区画中央に合わせる
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void set_positionF(){
 80059cc:	b580      	push	{r7, lr}
 80059ce:	af00      	add	r7, sp, #0

	full_led_write1(RED);
 80059d0:	2001      	movs	r0, #1
 80059d2:	f00c fba9 	bl	8012128 <full_led_write1>
	HAL_Delay(100);
 80059d6:	2064      	movs	r0, #100	; 0x64
 80059d8:	f7fb fb20 	bl	800101c <HAL_Delay>

	MF.FLAG.DRV = 1;
 80059dc:	4a09      	ldr	r2, [pc, #36]	; (8005a04 <set_positionF+0x38>)
 80059de:	8813      	ldrh	r3, [r2, #0]
 80059e0:	f043 0302 	orr.w	r3, r3, #2
 80059e4:	8013      	strh	r3, [r2, #0]
//	MF.FLAG.FWALL = 1;
	MF.FLAG.GCTRL = 1;
 80059e6:	4a07      	ldr	r2, [pc, #28]	; (8005a04 <set_positionF+0x38>)
 80059e8:	8813      	ldrh	r3, [r2, #0]
 80059ea:	f043 0310 	orr.w	r3, r3, #16
 80059ee:	8013      	strh	r3, [r2, #0]
//	while(MF.FLAG.FWALL);

	MF.FLAG.GCTRL = 0;
 80059f0:	4a04      	ldr	r2, [pc, #16]	; (8005a04 <set_positionF+0x38>)
 80059f2:	8813      	ldrh	r3, [r2, #0]
 80059f4:	f36f 1304 	bfc	r3, #4, #1
 80059f8:	8013      	strh	r3, [r2, #0]
	drive_stop();
 80059fa:	f7ff f999 	bl	8004d30 <drive_stop>
}
 80059fe:	bf00      	nop
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	20000fa8 	.word	0x20000fa8

08005a08 <start_sectionA>:
//start_sectionA
// スタート区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void start_sectionA(void){
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	af00      	add	r7, sp, #0

	control_start();
 8005a0c:	f7ff f9fc 	bl	8004e08 <control_start>
	if(run_mode == 1){
 8005a10:	4b93      	ldr	r3, [pc, #588]	; (8005c60 <start_sectionA+0x258>)
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d127      	bne.n	8005a6a <start_sectionA+0x62>
		if(start_mode == 0){
 8005a1a:	4b92      	ldr	r3, [pc, #584]	; (8005c64 <start_sectionA+0x25c>)
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d107      	bne.n	8005a34 <start_sectionA+0x2c>
			driveA(2000, SPEED_MIN, SPEED_1, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 8005a24:	2387      	movs	r3, #135	; 0x87
 8005a26:	22c8      	movs	r2, #200	; 0xc8
 8005a28:	210a      	movs	r1, #10
 8005a2a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005a2e:	f7ff fb33 	bl	8005098 <driveA>
 8005a32:	e106      	b.n	8005c42 <start_sectionA+0x23a>
		}else if(start_mode == 1){
 8005a34:	4b8b      	ldr	r3, [pc, #556]	; (8005c64 <start_sectionA+0x25c>)
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d107      	bne.n	8005a4e <start_sectionA+0x46>
			driveA(2000, SPEED_MIN, SPEED_1, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 8005a3e:	235a      	movs	r3, #90	; 0x5a
 8005a40:	22c8      	movs	r2, #200	; 0xc8
 8005a42:	210a      	movs	r1, #10
 8005a44:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005a48:	f7ff fb26 	bl	8005098 <driveA>
 8005a4c:	e0f9      	b.n	8005c42 <start_sectionA+0x23a>
		}else if(start_mode == 2){
 8005a4e:	4b85      	ldr	r3, [pc, #532]	; (8005c64 <start_sectionA+0x25c>)
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	f040 80f4 	bne.w	8005c42 <start_sectionA+0x23a>
			driveA(2000, SPEED_MIN, SPEED_1, SEC_START_HALF);				//aスタート半区画分加速しながら走行。走行後は停止しない
 8005a5a:	232d      	movs	r3, #45	; 0x2d
 8005a5c:	22c8      	movs	r2, #200	; 0xc8
 8005a5e:	210a      	movs	r1, #10
 8005a60:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005a64:	f7ff fb18 	bl	8005098 <driveA>
 8005a68:	e0eb      	b.n	8005c42 <start_sectionA+0x23a>
		}
	}else if(run_mode == 2){
 8005a6a:	4b7d      	ldr	r3, [pc, #500]	; (8005c60 <start_sectionA+0x258>)
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d12a      	bne.n	8005aca <start_sectionA+0xc2>
		if(start_mode == 0){
 8005a74:	4b7b      	ldr	r3, [pc, #492]	; (8005c64 <start_sectionA+0x25c>)
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d108      	bne.n	8005a90 <start_sectionA+0x88>
			driveA(4000, SPEED_MIN, SPEED_2, SEC_START);				//aスタート区画分加速しながら走行。走行後は停止しない
 8005a7e:	2387      	movs	r3, #135	; 0x87
 8005a80:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005a84:	210a      	movs	r1, #10
 8005a86:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005a8a:	f7ff fb05 	bl	8005098 <driveA>
 8005a8e:	e0d8      	b.n	8005c42 <start_sectionA+0x23a>
		}else if(start_mode == 1){
 8005a90:	4b74      	ldr	r3, [pc, #464]	; (8005c64 <start_sectionA+0x25c>)
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d108      	bne.n	8005aac <start_sectionA+0xa4>
			driveA(4000, SPEED_MIN, SPEED_2, SEC_HALF);				//a半区画分加速しながら走行。走行後は停止しない
 8005a9a:	235a      	movs	r3, #90	; 0x5a
 8005a9c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005aa0:	210a      	movs	r1, #10
 8005aa2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005aa6:	f7ff faf7 	bl	8005098 <driveA>
 8005aaa:	e0ca      	b.n	8005c42 <start_sectionA+0x23a>
		}else if(start_mode == 2){
 8005aac:	4b6d      	ldr	r3, [pc, #436]	; (8005c64 <start_sectionA+0x25c>)
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	f040 80c5 	bne.w	8005c42 <start_sectionA+0x23a>
			driveA(4000, SPEED_MIN, SPEED_2, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 8005ab8:	232d      	movs	r3, #45	; 0x2d
 8005aba:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005abe:	210a      	movs	r1, #10
 8005ac0:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005ac4:	f7ff fae8 	bl	8005098 <driveA>
 8005ac8:	e0bb      	b.n	8005c42 <start_sectionA+0x23a>
		}
	}else if(run_mode == 3){
 8005aca:	4b65      	ldr	r3, [pc, #404]	; (8005c60 <start_sectionA+0x258>)
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d12a      	bne.n	8005b2a <start_sectionA+0x122>
		if(start_mode == 0){
 8005ad4:	4b63      	ldr	r3, [pc, #396]	; (8005c64 <start_sectionA+0x25c>)
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d108      	bne.n	8005af0 <start_sectionA+0xe8>
			driveA(6000, SPEED_MIN, SPEED_3, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 8005ade:	2387      	movs	r3, #135	; 0x87
 8005ae0:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005ae4:	210a      	movs	r1, #10
 8005ae6:	f241 7070 	movw	r0, #6000	; 0x1770
 8005aea:	f7ff fad5 	bl	8005098 <driveA>
 8005aee:	e0a8      	b.n	8005c42 <start_sectionA+0x23a>
		}else if(start_mode == 1){
 8005af0:	4b5c      	ldr	r3, [pc, #368]	; (8005c64 <start_sectionA+0x25c>)
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d108      	bne.n	8005b0c <start_sectionA+0x104>
			driveA(6000, SPEED_MIN, SPEED_3, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 8005afa:	235a      	movs	r3, #90	; 0x5a
 8005afc:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005b00:	210a      	movs	r1, #10
 8005b02:	f241 7070 	movw	r0, #6000	; 0x1770
 8005b06:	f7ff fac7 	bl	8005098 <driveA>
 8005b0a:	e09a      	b.n	8005c42 <start_sectionA+0x23a>
		}else if(start_mode == 2){
 8005b0c:	4b55      	ldr	r3, [pc, #340]	; (8005c64 <start_sectionA+0x25c>)
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	f040 8095 	bne.w	8005c42 <start_sectionA+0x23a>
			driveA(6000, SPEED_MIN, SPEED_3, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 8005b18:	232d      	movs	r3, #45	; 0x2d
 8005b1a:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005b1e:	210a      	movs	r1, #10
 8005b20:	f241 7070 	movw	r0, #6000	; 0x1770
 8005b24:	f7ff fab8 	bl	8005098 <driveA>
 8005b28:	e08b      	b.n	8005c42 <start_sectionA+0x23a>
		}
	}else if(run_mode == 4){
 8005b2a:	4b4d      	ldr	r3, [pc, #308]	; (8005c60 <start_sectionA+0x258>)
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	2b04      	cmp	r3, #4
 8005b32:	d129      	bne.n	8005b88 <start_sectionA+0x180>
		if(start_mode == 0){
 8005b34:	4b4b      	ldr	r3, [pc, #300]	; (8005c64 <start_sectionA+0x25c>)
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d108      	bne.n	8005b50 <start_sectionA+0x148>
			driveA(8000, SPEED_MIN, SPEED_4, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 8005b3e:	2387      	movs	r3, #135	; 0x87
 8005b40:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005b44:	210a      	movs	r1, #10
 8005b46:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005b4a:	f7ff faa5 	bl	8005098 <driveA>
 8005b4e:	e078      	b.n	8005c42 <start_sectionA+0x23a>
		}else if(start_mode == 1){
 8005b50:	4b44      	ldr	r3, [pc, #272]	; (8005c64 <start_sectionA+0x25c>)
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d108      	bne.n	8005b6c <start_sectionA+0x164>
			driveA(8000, SPEED_MIN, SPEED_4, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 8005b5a:	235a      	movs	r3, #90	; 0x5a
 8005b5c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005b60:	210a      	movs	r1, #10
 8005b62:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005b66:	f7ff fa97 	bl	8005098 <driveA>
 8005b6a:	e06a      	b.n	8005c42 <start_sectionA+0x23a>
		}else if(start_mode == 2){
 8005b6c:	4b3d      	ldr	r3, [pc, #244]	; (8005c64 <start_sectionA+0x25c>)
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d165      	bne.n	8005c42 <start_sectionA+0x23a>
			driveA(10000, SPEED_MIN, SPEED_4, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 8005b76:	232d      	movs	r3, #45	; 0x2d
 8005b78:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005b7c:	210a      	movs	r1, #10
 8005b7e:	f242 7010 	movw	r0, #10000	; 0x2710
 8005b82:	f7ff fa89 	bl	8005098 <driveA>
 8005b86:	e05c      	b.n	8005c42 <start_sectionA+0x23a>
		}
	}else if(run_mode == 5){
 8005b88:	4b35      	ldr	r3, [pc, #212]	; (8005c60 <start_sectionA+0x258>)
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b05      	cmp	r3, #5
 8005b90:	d129      	bne.n	8005be6 <start_sectionA+0x1de>
		if(start_mode == 0){
 8005b92:	4b34      	ldr	r3, [pc, #208]	; (8005c64 <start_sectionA+0x25c>)
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d108      	bne.n	8005bae <start_sectionA+0x1a6>
			driveA(10000, SPEED_MIN, SPEED_5, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 8005b9c:	2387      	movs	r3, #135	; 0x87
 8005b9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ba2:	210a      	movs	r1, #10
 8005ba4:	f242 7010 	movw	r0, #10000	; 0x2710
 8005ba8:	f7ff fa76 	bl	8005098 <driveA>
 8005bac:	e049      	b.n	8005c42 <start_sectionA+0x23a>
		}else if(start_mode == 1){
 8005bae:	4b2d      	ldr	r3, [pc, #180]	; (8005c64 <start_sectionA+0x25c>)
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d108      	bne.n	8005bca <start_sectionA+0x1c2>
			driveA(10000, SPEED_MIN, SPEED_5, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 8005bb8:	235a      	movs	r3, #90	; 0x5a
 8005bba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005bbe:	210a      	movs	r1, #10
 8005bc0:	f242 7010 	movw	r0, #10000	; 0x2710
 8005bc4:	f7ff fa68 	bl	8005098 <driveA>
 8005bc8:	e03b      	b.n	8005c42 <start_sectionA+0x23a>
		}else if(start_mode == 2){
 8005bca:	4b26      	ldr	r3, [pc, #152]	; (8005c64 <start_sectionA+0x25c>)
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d136      	bne.n	8005c42 <start_sectionA+0x23a>
			driveA(15000, SPEED_MIN, SPEED_5, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 8005bd4:	232d      	movs	r3, #45	; 0x2d
 8005bd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005bda:	210a      	movs	r1, #10
 8005bdc:	f643 2098 	movw	r0, #15000	; 0x3a98
 8005be0:	f7ff fa5a 	bl	8005098 <driveA>
 8005be4:	e02d      	b.n	8005c42 <start_sectionA+0x23a>
		}
	}else if(run_mode == 6){
 8005be6:	4b1e      	ldr	r3, [pc, #120]	; (8005c60 <start_sectionA+0x258>)
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	2b06      	cmp	r3, #6
 8005bee:	d128      	bne.n	8005c42 <start_sectionA+0x23a>
		if(start_mode == 0){
 8005bf0:	4b1c      	ldr	r3, [pc, #112]	; (8005c64 <start_sectionA+0x25c>)
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d108      	bne.n	8005c0c <start_sectionA+0x204>
			driveA(10000, SPEED_MIN, SPEED_5, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 8005bfa:	2387      	movs	r3, #135	; 0x87
 8005bfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c00:	210a      	movs	r1, #10
 8005c02:	f242 7010 	movw	r0, #10000	; 0x2710
 8005c06:	f7ff fa47 	bl	8005098 <driveA>
 8005c0a:	e01a      	b.n	8005c42 <start_sectionA+0x23a>
		}else if(start_mode == 1){
 8005c0c:	4b15      	ldr	r3, [pc, #84]	; (8005c64 <start_sectionA+0x25c>)
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d108      	bne.n	8005c28 <start_sectionA+0x220>
			driveA(10000, SPEED_MIN, SPEED_5, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 8005c16:	235a      	movs	r3, #90	; 0x5a
 8005c18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c1c:	210a      	movs	r1, #10
 8005c1e:	f242 7010 	movw	r0, #10000	; 0x2710
 8005c22:	f7ff fa39 	bl	8005098 <driveA>
 8005c26:	e00c      	b.n	8005c42 <start_sectionA+0x23a>
		}else if(start_mode == 2){
 8005c28:	4b0e      	ldr	r3, [pc, #56]	; (8005c64 <start_sectionA+0x25c>)
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d107      	bne.n	8005c42 <start_sectionA+0x23a>
			driveA(25000, SPEED_MIN, SPEED_5, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 8005c32:	232d      	movs	r3, #45	; 0x2d
 8005c34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c38:	210a      	movs	r1, #10
 8005c3a:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8005c3e:	f7ff fa2b 	bl	8005098 <driveA>
		}
	}
	start_mode = 1;
 8005c42:	4b08      	ldr	r3, [pc, #32]	; (8005c64 <start_sectionA+0x25c>)
 8005c44:	2201      	movs	r2, #1
 8005c46:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005c48:	4b07      	ldr	r3, [pc, #28]	; (8005c68 <start_sectionA+0x260>)
 8005c4a:	881b      	ldrh	r3, [r3, #0]
 8005c4c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d101      	bne.n	8005c5a <start_sectionA+0x252>
 8005c56:	f00c f9f3 	bl	8012040 <get_wall_info>
}
 8005c5a:	bf00      	nop
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	20000456 	.word	0x20000456
 8005c64:	2000164c 	.word	0x2000164c
 8005c68:	20000fa8 	.word	0x20000fa8

08005c6c <half_sectionA>:
//half_sectionA
// a半区画分加速しながら走行する
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionA(void){
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	af00      	add	r7, sp, #0

	control_start();
 8005c70:	f7ff f8ca 	bl	8004e08 <control_start>
	if(run_mode == 1){
 8005c74:	4b2e      	ldr	r3, [pc, #184]	; (8005d30 <half_sectionA+0xc4>)
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d107      	bne.n	8005c8e <half_sectionA+0x22>
		driveA(4000, SPEED_MIN, SPEED_1, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005c7e:	235a      	movs	r3, #90	; 0x5a
 8005c80:	22c8      	movs	r2, #200	; 0xc8
 8005c82:	210a      	movs	r1, #10
 8005c84:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005c88:	f7ff fa06 	bl	8005098 <driveA>
 8005c8c:	e044      	b.n	8005d18 <half_sectionA+0xac>
	}else if(run_mode == 2){
 8005c8e:	4b28      	ldr	r3, [pc, #160]	; (8005d30 <half_sectionA+0xc4>)
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d108      	bne.n	8005caa <half_sectionA+0x3e>
		driveA(4000, SPEED_MIN, SPEED_2, SEC_HALF);					//半区画分加速しながら走行。走行後は停止しない
 8005c98:	235a      	movs	r3, #90	; 0x5a
 8005c9a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005c9e:	210a      	movs	r1, #10
 8005ca0:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005ca4:	f7ff f9f8 	bl	8005098 <driveA>
 8005ca8:	e036      	b.n	8005d18 <half_sectionA+0xac>
	}else if(run_mode == 3){
 8005caa:	4b21      	ldr	r3, [pc, #132]	; (8005d30 <half_sectionA+0xc4>)
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b03      	cmp	r3, #3
 8005cb2:	d108      	bne.n	8005cc6 <half_sectionA+0x5a>
		driveA(6000, SPEED_MIN, SPEED_3, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005cb4:	235a      	movs	r3, #90	; 0x5a
 8005cb6:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005cba:	210a      	movs	r1, #10
 8005cbc:	f241 7070 	movw	r0, #6000	; 0x1770
 8005cc0:	f7ff f9ea 	bl	8005098 <driveA>
 8005cc4:	e028      	b.n	8005d18 <half_sectionA+0xac>
	}else if(run_mode == 4){
 8005cc6:	4b1a      	ldr	r3, [pc, #104]	; (8005d30 <half_sectionA+0xc4>)
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b04      	cmp	r3, #4
 8005cce:	d108      	bne.n	8005ce2 <half_sectionA+0x76>
		driveA(8000, SPEED_MIN, SPEED_4, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005cd0:	235a      	movs	r3, #90	; 0x5a
 8005cd2:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005cd6:	210a      	movs	r1, #10
 8005cd8:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005cdc:	f7ff f9dc 	bl	8005098 <driveA>
 8005ce0:	e01a      	b.n	8005d18 <half_sectionA+0xac>
	}else if(run_mode == 5){
 8005ce2:	4b13      	ldr	r3, [pc, #76]	; (8005d30 <half_sectionA+0xc4>)
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b05      	cmp	r3, #5
 8005cea:	d108      	bne.n	8005cfe <half_sectionA+0x92>
		driveA(10000, SPEED_MIN, SPEED_5, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005cec:	235a      	movs	r3, #90	; 0x5a
 8005cee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005cf2:	210a      	movs	r1, #10
 8005cf4:	f242 7010 	movw	r0, #10000	; 0x2710
 8005cf8:	f7ff f9ce 	bl	8005098 <driveA>
 8005cfc:	e00c      	b.n	8005d18 <half_sectionA+0xac>
	}else if(run_mode == 6){
 8005cfe:	4b0c      	ldr	r3, [pc, #48]	; (8005d30 <half_sectionA+0xc4>)
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b06      	cmp	r3, #6
 8005d06:	d107      	bne.n	8005d18 <half_sectionA+0xac>
		driveA(10000, SPEED_MIN, SPEED_6, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005d08:	235a      	movs	r3, #90	; 0x5a
 8005d0a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005d0e:	210a      	movs	r1, #10
 8005d10:	f242 7010 	movw	r0, #10000	; 0x2710
 8005d14:	f7ff f9c0 	bl	8005098 <driveA>
	}
	if(!MF.FLAG.SCND)get_wall_info();										//壁情報を取得，片壁制御の有効・無効の判断
 8005d18:	4b06      	ldr	r3, [pc, #24]	; (8005d34 <half_sectionA+0xc8>)
 8005d1a:	881b      	ldrh	r3, [r3, #0]
 8005d1c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d101      	bne.n	8005d2a <half_sectionA+0xbe>
 8005d26:	f00c f98b 	bl	8012040 <get_wall_info>
}
 8005d2a:	bf00      	nop
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	20000456 	.word	0x20000456
 8005d34:	20000fa8 	.word	0x20000fa8

08005d38 <half_sectionD>:
//half_sectionD
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionD(void){
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	af00      	add	r7, sp, #0
	full_led_write1(BLUE);
 8005d3c:	2003      	movs	r0, #3
 8005d3e:	f00c f9f3 	bl	8012128 <full_led_write1>

	control_start();
 8005d42:	f7ff f861 	bl	8004e08 <control_start>
	if(run_mode == 1){
 8005d46:	4b27      	ldr	r3, [pc, #156]	; (8005de4 <half_sectionD+0xac>)
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d106      	bne.n	8005d5e <half_sectionD+0x26>
		driveD(-4000, SPEED_MIN, SPEED_1, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 8005d50:	235a      	movs	r3, #90	; 0x5a
 8005d52:	22c8      	movs	r2, #200	; 0xc8
 8005d54:	210a      	movs	r1, #10
 8005d56:	4824      	ldr	r0, [pc, #144]	; (8005de8 <half_sectionD+0xb0>)
 8005d58:	f7ff fa18 	bl	800518c <driveD>
	}else if(run_mode == 5){
		driveD(-10000, SPEED_MIN, SPEED_5, SEC_HALF);				//半区画分指定減速度で減速走行。走行後は停止する
	}else if(run_mode == 6){
		driveD(-10000, SPEED_MIN, SPEED_6, SEC_HALF);				//半区画分指定減速度で減速走行。走行後は停止する
	}
}
 8005d5c:	e03f      	b.n	8005dde <half_sectionD+0xa6>
	}else if(run_mode == 2){
 8005d5e:	4b21      	ldr	r3, [pc, #132]	; (8005de4 <half_sectionD+0xac>)
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d107      	bne.n	8005d78 <half_sectionD+0x40>
		driveD(-4000, SPEED_MIN, SPEED_2, SEC_HALF);					//半区画分指定減速度で減速走行。走行後は停止する
 8005d68:	235a      	movs	r3, #90	; 0x5a
 8005d6a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005d6e:	210a      	movs	r1, #10
 8005d70:	481d      	ldr	r0, [pc, #116]	; (8005de8 <half_sectionD+0xb0>)
 8005d72:	f7ff fa0b 	bl	800518c <driveD>
}
 8005d76:	e032      	b.n	8005dde <half_sectionD+0xa6>
	}else if(run_mode == 3){
 8005d78:	4b1a      	ldr	r3, [pc, #104]	; (8005de4 <half_sectionD+0xac>)
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	2b03      	cmp	r3, #3
 8005d80:	d107      	bne.n	8005d92 <half_sectionD+0x5a>
		driveD(-6000, SPEED_MIN, SPEED_3, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 8005d82:	235a      	movs	r3, #90	; 0x5a
 8005d84:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005d88:	210a      	movs	r1, #10
 8005d8a:	4818      	ldr	r0, [pc, #96]	; (8005dec <half_sectionD+0xb4>)
 8005d8c:	f7ff f9fe 	bl	800518c <driveD>
}
 8005d90:	e025      	b.n	8005dde <half_sectionD+0xa6>
	}else if(run_mode == 4){
 8005d92:	4b14      	ldr	r3, [pc, #80]	; (8005de4 <half_sectionD+0xac>)
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b04      	cmp	r3, #4
 8005d9a:	d107      	bne.n	8005dac <half_sectionD+0x74>
		driveD(-8000, SPEED_MIN, SPEED_4, SEC_HALF);				//半区画分指定減速度で減速走行。走行後は停止する
 8005d9c:	235a      	movs	r3, #90	; 0x5a
 8005d9e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005da2:	210a      	movs	r1, #10
 8005da4:	4812      	ldr	r0, [pc, #72]	; (8005df0 <half_sectionD+0xb8>)
 8005da6:	f7ff f9f1 	bl	800518c <driveD>
}
 8005daa:	e018      	b.n	8005dde <half_sectionD+0xa6>
	}else if(run_mode == 5){
 8005dac:	4b0d      	ldr	r3, [pc, #52]	; (8005de4 <half_sectionD+0xac>)
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b05      	cmp	r3, #5
 8005db4:	d107      	bne.n	8005dc6 <half_sectionD+0x8e>
		driveD(-10000, SPEED_MIN, SPEED_5, SEC_HALF);				//半区画分指定減速度で減速走行。走行後は停止する
 8005db6:	235a      	movs	r3, #90	; 0x5a
 8005db8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005dbc:	210a      	movs	r1, #10
 8005dbe:	480d      	ldr	r0, [pc, #52]	; (8005df4 <half_sectionD+0xbc>)
 8005dc0:	f7ff f9e4 	bl	800518c <driveD>
}
 8005dc4:	e00b      	b.n	8005dde <half_sectionD+0xa6>
	}else if(run_mode == 6){
 8005dc6:	4b07      	ldr	r3, [pc, #28]	; (8005de4 <half_sectionD+0xac>)
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b06      	cmp	r3, #6
 8005dce:	d106      	bne.n	8005dde <half_sectionD+0xa6>
		driveD(-10000, SPEED_MIN, SPEED_6, SEC_HALF);				//半区画分指定減速度で減速走行。走行後は停止する
 8005dd0:	235a      	movs	r3, #90	; 0x5a
 8005dd2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005dd6:	210a      	movs	r1, #10
 8005dd8:	4806      	ldr	r0, [pc, #24]	; (8005df4 <half_sectionD+0xbc>)
 8005dda:	f7ff f9d7 	bl	800518c <driveD>
}
 8005dde:	bf00      	nop
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	20000456 	.word	0x20000456
 8005de8:	fffff060 	.word	0xfffff060
 8005dec:	ffffe890 	.word	0xffffe890
 8005df0:	ffffe0c0 	.word	0xffffe0c0
 8005df4:	ffffd8f0 	.word	0xffffd8f0

08005df8 <half_sectionVA>:
//half_sectionVA
// 半区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionVA(void){
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	af00      	add	r7, sp, #0

	control_start();
 8005dfc:	f7ff f804 	bl	8004e08 <control_start>
	if(run_mode == 1){
 8005e00:	4b29      	ldr	r3, [pc, #164]	; (8005ea8 <half_sectionVA+0xb0>)
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d107      	bne.n	8005e1a <half_sectionVA+0x22>
		driveA(4000, SPEED_MIN, SPEED_1, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
 8005e0a:	2382      	movs	r3, #130	; 0x82
 8005e0c:	22c8      	movs	r2, #200	; 0xc8
 8005e0e:	210a      	movs	r1, #10
 8005e10:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005e14:	f7ff f940 	bl	8005098 <driveA>
	}else if(run_mode == 5){
		driveA(10000, SPEED_MIN, SPEED_5, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
	}else if(run_mode == 6){
		driveA(10000, SPEED_MIN, SPEED_6, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
	}
}
 8005e18:	e044      	b.n	8005ea4 <half_sectionVA+0xac>
	}else if(run_mode == 2){
 8005e1a:	4b23      	ldr	r3, [pc, #140]	; (8005ea8 <half_sectionVA+0xb0>)
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d108      	bne.n	8005e36 <half_sectionVA+0x3e>
		driveA(4000, SPEED_MIN, SPEED_2, SEC_HALF_V);					//半区画分加速しながら走行。走行後は停止しない
 8005e24:	2382      	movs	r3, #130	; 0x82
 8005e26:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005e2a:	210a      	movs	r1, #10
 8005e2c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005e30:	f7ff f932 	bl	8005098 <driveA>
}
 8005e34:	e036      	b.n	8005ea4 <half_sectionVA+0xac>
	}else if(run_mode == 3){
 8005e36:	4b1c      	ldr	r3, [pc, #112]	; (8005ea8 <half_sectionVA+0xb0>)
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b03      	cmp	r3, #3
 8005e3e:	d108      	bne.n	8005e52 <half_sectionVA+0x5a>
		driveA(6000, SPEED_MIN, SPEED_3, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
 8005e40:	2382      	movs	r3, #130	; 0x82
 8005e42:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005e46:	210a      	movs	r1, #10
 8005e48:	f241 7070 	movw	r0, #6000	; 0x1770
 8005e4c:	f7ff f924 	bl	8005098 <driveA>
}
 8005e50:	e028      	b.n	8005ea4 <half_sectionVA+0xac>
	}else if(run_mode == 4){
 8005e52:	4b15      	ldr	r3, [pc, #84]	; (8005ea8 <half_sectionVA+0xb0>)
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b04      	cmp	r3, #4
 8005e5a:	d108      	bne.n	8005e6e <half_sectionVA+0x76>
		driveA(8000, SPEED_MIN, SPEED_4, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
 8005e5c:	2382      	movs	r3, #130	; 0x82
 8005e5e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005e62:	210a      	movs	r1, #10
 8005e64:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005e68:	f7ff f916 	bl	8005098 <driveA>
}
 8005e6c:	e01a      	b.n	8005ea4 <half_sectionVA+0xac>
	}else if(run_mode == 5){
 8005e6e:	4b0e      	ldr	r3, [pc, #56]	; (8005ea8 <half_sectionVA+0xb0>)
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2b05      	cmp	r3, #5
 8005e76:	d108      	bne.n	8005e8a <half_sectionVA+0x92>
		driveA(10000, SPEED_MIN, SPEED_5, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
 8005e78:	2382      	movs	r3, #130	; 0x82
 8005e7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e7e:	210a      	movs	r1, #10
 8005e80:	f242 7010 	movw	r0, #10000	; 0x2710
 8005e84:	f7ff f908 	bl	8005098 <driveA>
}
 8005e88:	e00c      	b.n	8005ea4 <half_sectionVA+0xac>
	}else if(run_mode == 6){
 8005e8a:	4b07      	ldr	r3, [pc, #28]	; (8005ea8 <half_sectionVA+0xb0>)
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b06      	cmp	r3, #6
 8005e92:	d107      	bne.n	8005ea4 <half_sectionVA+0xac>
		driveA(10000, SPEED_MIN, SPEED_6, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
 8005e94:	2382      	movs	r3, #130	; 0x82
 8005e96:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005e9a:	210a      	movs	r1, #10
 8005e9c:	f242 7010 	movw	r0, #10000	; 0x2710
 8005ea0:	f7ff f8fa 	bl	8005098 <driveA>
}
 8005ea4:	bf00      	nop
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	20000456 	.word	0x20000456

08005eac <half_sectionVD>:
//half_sectionVD
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionVD(void){
 8005eac:	b580      	push	{r7, lr}
 8005eae:	af00      	add	r7, sp, #0
	full_led_write1(BLUE);
 8005eb0:	2003      	movs	r0, #3
 8005eb2:	f00c f939 	bl	8012128 <full_led_write1>

	control_start();
 8005eb6:	f7fe ffa7 	bl	8004e08 <control_start>
	if(run_mode == 1){
 8005eba:	4b27      	ldr	r3, [pc, #156]	; (8005f58 <half_sectionVD+0xac>)
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d106      	bne.n	8005ed2 <half_sectionVD+0x26>
		driveD(-4000, SPEED_MIN, SPEED_1, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
 8005ec4:	2382      	movs	r3, #130	; 0x82
 8005ec6:	22c8      	movs	r2, #200	; 0xc8
 8005ec8:	210a      	movs	r1, #10
 8005eca:	4824      	ldr	r0, [pc, #144]	; (8005f5c <half_sectionVD+0xb0>)
 8005ecc:	f7ff f95e 	bl	800518c <driveD>
	}else if(run_mode == 5){
		driveD(-10000, SPEED_MIN, SPEED_5, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
	}else if(run_mode == 6){
		driveD(-10000, SPEED_MIN, SPEED_6, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
	}
}
 8005ed0:	e03f      	b.n	8005f52 <half_sectionVD+0xa6>
	}else if(run_mode == 2){
 8005ed2:	4b21      	ldr	r3, [pc, #132]	; (8005f58 <half_sectionVD+0xac>)
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d107      	bne.n	8005eec <half_sectionVD+0x40>
		driveD(-4000, SPEED_MIN, SPEED_2, SEC_HALF_V);					//半区画分指定減速度で減速走行。走行後は停止する
 8005edc:	2382      	movs	r3, #130	; 0x82
 8005ede:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005ee2:	210a      	movs	r1, #10
 8005ee4:	481d      	ldr	r0, [pc, #116]	; (8005f5c <half_sectionVD+0xb0>)
 8005ee6:	f7ff f951 	bl	800518c <driveD>
}
 8005eea:	e032      	b.n	8005f52 <half_sectionVD+0xa6>
	}else if(run_mode == 3){
 8005eec:	4b1a      	ldr	r3, [pc, #104]	; (8005f58 <half_sectionVD+0xac>)
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b03      	cmp	r3, #3
 8005ef4:	d107      	bne.n	8005f06 <half_sectionVD+0x5a>
		driveD(-6000, SPEED_MIN, SPEED_3, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
 8005ef6:	2382      	movs	r3, #130	; 0x82
 8005ef8:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005efc:	210a      	movs	r1, #10
 8005efe:	4818      	ldr	r0, [pc, #96]	; (8005f60 <half_sectionVD+0xb4>)
 8005f00:	f7ff f944 	bl	800518c <driveD>
}
 8005f04:	e025      	b.n	8005f52 <half_sectionVD+0xa6>
	}else if(run_mode == 4){
 8005f06:	4b14      	ldr	r3, [pc, #80]	; (8005f58 <half_sectionVD+0xac>)
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b04      	cmp	r3, #4
 8005f0e:	d107      	bne.n	8005f20 <half_sectionVD+0x74>
		driveD(-8000, SPEED_MIN, SPEED_4, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
 8005f10:	2382      	movs	r3, #130	; 0x82
 8005f12:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005f16:	210a      	movs	r1, #10
 8005f18:	4812      	ldr	r0, [pc, #72]	; (8005f64 <half_sectionVD+0xb8>)
 8005f1a:	f7ff f937 	bl	800518c <driveD>
}
 8005f1e:	e018      	b.n	8005f52 <half_sectionVD+0xa6>
	}else if(run_mode == 5){
 8005f20:	4b0d      	ldr	r3, [pc, #52]	; (8005f58 <half_sectionVD+0xac>)
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b05      	cmp	r3, #5
 8005f28:	d107      	bne.n	8005f3a <half_sectionVD+0x8e>
		driveD(-10000, SPEED_MIN, SPEED_5, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
 8005f2a:	2382      	movs	r3, #130	; 0x82
 8005f2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f30:	210a      	movs	r1, #10
 8005f32:	480d      	ldr	r0, [pc, #52]	; (8005f68 <half_sectionVD+0xbc>)
 8005f34:	f7ff f92a 	bl	800518c <driveD>
}
 8005f38:	e00b      	b.n	8005f52 <half_sectionVD+0xa6>
	}else if(run_mode == 6){
 8005f3a:	4b07      	ldr	r3, [pc, #28]	; (8005f58 <half_sectionVD+0xac>)
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b06      	cmp	r3, #6
 8005f42:	d106      	bne.n	8005f52 <half_sectionVD+0xa6>
		driveD(-10000, SPEED_MIN, SPEED_6, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
 8005f44:	2382      	movs	r3, #130	; 0x82
 8005f46:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005f4a:	210a      	movs	r1, #10
 8005f4c:	4806      	ldr	r0, [pc, #24]	; (8005f68 <half_sectionVD+0xbc>)
 8005f4e:	f7ff f91d 	bl	800518c <driveD>
}
 8005f52:	bf00      	nop
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	20000456 	.word	0x20000456
 8005f5c:	fffff060 	.word	0xfffff060
 8005f60:	ffffe890 	.word	0xffffe890
 8005f64:	ffffe0c0 	.word	0xffffe0c0
 8005f68:	ffffd8f0 	.word	0xffffd8f0

08005f6c <half_sectionU>:
//half_sectionU
// 等速で半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionU(void){
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	af00      	add	r7, sp, #0
	full_led_write1(WHITE);
 8005f70:	2007      	movs	r0, #7
 8005f72:	f00c f8d9 	bl	8012128 <full_led_write1>
	control_start();
 8005f76:	f7fe ff47 	bl	8004e08 <control_start>
	driveU(SEC_HALF);													//半区画分等速走行。走行後は停止しない
 8005f7a:	205a      	movs	r0, #90	; 0x5a
 8005f7c:	f7ff f9e0 	bl	8005340 <driveU>
}
 8005f80:	bf00      	nop
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <half_sectionV>:
//half_sectionV
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionV(void){
 8005f84:	b580      	push	{r7, lr}
 8005f86:	af00      	add	r7, sp, #0
	full_led_write1(WHITE);
 8005f88:	2007      	movs	r0, #7
 8005f8a:	f00c f8cd 	bl	8012128 <full_led_write1>
	control_start();
 8005f8e:	f7fe ff3b 	bl	8004e08 <control_start>
	driveU(SEC_HALF_V);													//半区画分等速走行。走行後は停止しない
 8005f92:	2082      	movs	r0, #130	; 0x82
 8005f94:	f7ff f9d4 	bl	8005340 <driveU>
}
 8005f98:	bf00      	nop
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <one_section>:
//one_section
// 1区画分進んで停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_section(void){
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	af00      	add	r7, sp, #0

	half_sectionA();													//半区画分加速走行
 8005fa0:	f7ff fe64 	bl	8005c6c <half_sectionA>
	half_sectionD();													//半区画分減速走行のち停止
 8005fa4:	f7ff fec8 	bl	8005d38 <half_sectionD>
}
 8005fa8:	bf00      	nop
 8005faa:	bd80      	pop	{r7, pc}

08005fac <one_sectionA>:
//one_sectionA
// 1区画分加速する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionA(void){
 8005fac:	b580      	push	{r7, lr}
 8005fae:	af00      	add	r7, sp, #0
	full_led_write1(BLUEGREEN);
 8005fb0:	2004      	movs	r0, #4
 8005fb2:	f00c f8b9 	bl	8012128 <full_led_write1>
	control_start();
 8005fb6:	f7fe ff27 	bl	8004e08 <control_start>
	if(run_mode == 1){
 8005fba:	4b3d      	ldr	r3, [pc, #244]	; (80060b0 <one_sectionA+0x104>)
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d10c      	bne.n	8005fde <one_sectionA+0x32>
		driveA(accel_hs, SPEED_1, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005fc4:	4b3b      	ldr	r3, [pc, #236]	; (80060b4 <one_sectionA+0x108>)
 8005fc6:	881b      	ldrh	r3, [r3, #0]
 8005fc8:	b21b      	sxth	r3, r3
 8005fca:	b298      	uxth	r0, r3
 8005fcc:	4b3a      	ldr	r3, [pc, #232]	; (80060b8 <one_sectionA+0x10c>)
 8005fce:	881b      	ldrh	r3, [r3, #0]
 8005fd0:	b21b      	sxth	r3, r3
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	23b4      	movs	r3, #180	; 0xb4
 8005fd6:	21c8      	movs	r1, #200	; 0xc8
 8005fd8:	f7ff f85e 	bl	8005098 <driveA>
 8005fdc:	e05d      	b.n	800609a <one_sectionA+0xee>
	}else if(run_mode == 2){
 8005fde:	4b34      	ldr	r3, [pc, #208]	; (80060b0 <one_sectionA+0x104>)
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d10d      	bne.n	8006004 <one_sectionA+0x58>
		driveA(accel_hs, SPEED_2, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005fe8:	4b32      	ldr	r3, [pc, #200]	; (80060b4 <one_sectionA+0x108>)
 8005fea:	881b      	ldrh	r3, [r3, #0]
 8005fec:	b21b      	sxth	r3, r3
 8005fee:	b298      	uxth	r0, r3
 8005ff0:	4b31      	ldr	r3, [pc, #196]	; (80060b8 <one_sectionA+0x10c>)
 8005ff2:	881b      	ldrh	r3, [r3, #0]
 8005ff4:	b21b      	sxth	r3, r3
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	23b4      	movs	r3, #180	; 0xb4
 8005ffa:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005ffe:	f7ff f84b 	bl	8005098 <driveA>
 8006002:	e04a      	b.n	800609a <one_sectionA+0xee>
	}else if(run_mode == 3){
 8006004:	4b2a      	ldr	r3, [pc, #168]	; (80060b0 <one_sectionA+0x104>)
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b03      	cmp	r3, #3
 800600c:	d10d      	bne.n	800602a <one_sectionA+0x7e>
		driveA(accel_hs, SPEED_3, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 800600e:	4b29      	ldr	r3, [pc, #164]	; (80060b4 <one_sectionA+0x108>)
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	b21b      	sxth	r3, r3
 8006014:	b298      	uxth	r0, r3
 8006016:	4b28      	ldr	r3, [pc, #160]	; (80060b8 <one_sectionA+0x10c>)
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	b21b      	sxth	r3, r3
 800601c:	b29a      	uxth	r2, r3
 800601e:	23b4      	movs	r3, #180	; 0xb4
 8006020:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006024:	f7ff f838 	bl	8005098 <driveA>
 8006028:	e037      	b.n	800609a <one_sectionA+0xee>
	}else if(run_mode == 4){
 800602a:	4b21      	ldr	r3, [pc, #132]	; (80060b0 <one_sectionA+0x104>)
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	b2db      	uxtb	r3, r3
 8006030:	2b04      	cmp	r3, #4
 8006032:	d10d      	bne.n	8006050 <one_sectionA+0xa4>
		driveA(accel_hs, SPEED_4, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8006034:	4b1f      	ldr	r3, [pc, #124]	; (80060b4 <one_sectionA+0x108>)
 8006036:	881b      	ldrh	r3, [r3, #0]
 8006038:	b21b      	sxth	r3, r3
 800603a:	b298      	uxth	r0, r3
 800603c:	4b1e      	ldr	r3, [pc, #120]	; (80060b8 <one_sectionA+0x10c>)
 800603e:	881b      	ldrh	r3, [r3, #0]
 8006040:	b21b      	sxth	r3, r3
 8006042:	b29a      	uxth	r2, r3
 8006044:	23b4      	movs	r3, #180	; 0xb4
 8006046:	f44f 7148 	mov.w	r1, #800	; 0x320
 800604a:	f7ff f825 	bl	8005098 <driveA>
 800604e:	e024      	b.n	800609a <one_sectionA+0xee>
	}else if(run_mode == 5){
 8006050:	4b17      	ldr	r3, [pc, #92]	; (80060b0 <one_sectionA+0x104>)
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b05      	cmp	r3, #5
 8006058:	d10d      	bne.n	8006076 <one_sectionA+0xca>
		driveA(accel_hs, SPEED_5, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 800605a:	4b16      	ldr	r3, [pc, #88]	; (80060b4 <one_sectionA+0x108>)
 800605c:	881b      	ldrh	r3, [r3, #0]
 800605e:	b21b      	sxth	r3, r3
 8006060:	b298      	uxth	r0, r3
 8006062:	4b15      	ldr	r3, [pc, #84]	; (80060b8 <one_sectionA+0x10c>)
 8006064:	881b      	ldrh	r3, [r3, #0]
 8006066:	b21b      	sxth	r3, r3
 8006068:	b29a      	uxth	r2, r3
 800606a:	23b4      	movs	r3, #180	; 0xb4
 800606c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006070:	f7ff f812 	bl	8005098 <driveA>
 8006074:	e011      	b.n	800609a <one_sectionA+0xee>
	}else if(run_mode == 6){
 8006076:	4b0e      	ldr	r3, [pc, #56]	; (80060b0 <one_sectionA+0x104>)
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b06      	cmp	r3, #6
 800607e:	d10c      	bne.n	800609a <one_sectionA+0xee>
		driveA(accel_hs, SPEED_6, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8006080:	4b0c      	ldr	r3, [pc, #48]	; (80060b4 <one_sectionA+0x108>)
 8006082:	881b      	ldrh	r3, [r3, #0]
 8006084:	b21b      	sxth	r3, r3
 8006086:	b298      	uxth	r0, r3
 8006088:	4b0b      	ldr	r3, [pc, #44]	; (80060b8 <one_sectionA+0x10c>)
 800608a:	881b      	ldrh	r3, [r3, #0]
 800608c:	b21b      	sxth	r3, r3
 800608e:	b29a      	uxth	r2, r3
 8006090:	23b4      	movs	r3, #180	; 0xb4
 8006092:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006096:	f7fe ffff 	bl	8005098 <driveA>
	}
	if(!MF.FLAG.SCND)get_wall_info();										//a壁情報を取得，片壁制御の有効・無効の判断
 800609a:	4b08      	ldr	r3, [pc, #32]	; (80060bc <one_sectionA+0x110>)
 800609c:	881b      	ldrh	r3, [r3, #0]
 800609e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d101      	bne.n	80060ac <one_sectionA+0x100>
 80060a8:	f00b ffca 	bl	8012040 <get_wall_info>
}
 80060ac:	bf00      	nop
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	20000456 	.word	0x20000456
 80060b4:	20000454 	.word	0x20000454
 80060b8:	20000ffc 	.word	0x20000ffc
 80060bc:	20000fa8 	.word	0x20000fa8

080060c0 <one_sectionD>:
//one_sectionD
// 1区画分減速する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionD(void){
 80060c0:	b580      	push	{r7, lr}
 80060c2:	af00      	add	r7, sp, #0
	full_led_write1(BLUE);
 80060c4:	2003      	movs	r0, #3
 80060c6:	f00c f82f 	bl	8012128 <full_led_write1>
	control_start();
 80060ca:	f7fe fe9d 	bl	8004e08 <control_start>
	if(run_mode == 1){
 80060ce:	4b46      	ldr	r3, [pc, #280]	; (80061e8 <one_sectionD+0x128>)
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d10f      	bne.n	80060f8 <one_sectionD+0x38>
		driveD(-accel_hs, SPEED_1, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 80060d8:	4b44      	ldr	r3, [pc, #272]	; (80061ec <one_sectionD+0x12c>)
 80060da:	881b      	ldrh	r3, [r3, #0]
 80060dc:	b21b      	sxth	r3, r3
 80060de:	b29b      	uxth	r3, r3
 80060e0:	425b      	negs	r3, r3
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	b218      	sxth	r0, r3
 80060e6:	4b42      	ldr	r3, [pc, #264]	; (80061f0 <one_sectionD+0x130>)
 80060e8:	881b      	ldrh	r3, [r3, #0]
 80060ea:	b21b      	sxth	r3, r3
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	23b4      	movs	r3, #180	; 0xb4
 80060f0:	21c8      	movs	r1, #200	; 0xc8
 80060f2:	f7ff f84b 	bl	800518c <driveD>
 80060f6:	e06c      	b.n	80061d2 <one_sectionD+0x112>
	}else if(run_mode == 2){
 80060f8:	4b3b      	ldr	r3, [pc, #236]	; (80061e8 <one_sectionD+0x128>)
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d110      	bne.n	8006124 <one_sectionD+0x64>
		driveD(-accel_hs, SPEED_2, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 8006102:	4b3a      	ldr	r3, [pc, #232]	; (80061ec <one_sectionD+0x12c>)
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	b21b      	sxth	r3, r3
 8006108:	b29b      	uxth	r3, r3
 800610a:	425b      	negs	r3, r3
 800610c:	b29b      	uxth	r3, r3
 800610e:	b218      	sxth	r0, r3
 8006110:	4b37      	ldr	r3, [pc, #220]	; (80061f0 <one_sectionD+0x130>)
 8006112:	881b      	ldrh	r3, [r3, #0]
 8006114:	b21b      	sxth	r3, r3
 8006116:	b29a      	uxth	r2, r3
 8006118:	23b4      	movs	r3, #180	; 0xb4
 800611a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800611e:	f7ff f835 	bl	800518c <driveD>
 8006122:	e056      	b.n	80061d2 <one_sectionD+0x112>
	}else if(run_mode == 3){
 8006124:	4b30      	ldr	r3, [pc, #192]	; (80061e8 <one_sectionD+0x128>)
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b03      	cmp	r3, #3
 800612c:	d110      	bne.n	8006150 <one_sectionD+0x90>
		driveD(-accel_hs, SPEED_3, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 800612e:	4b2f      	ldr	r3, [pc, #188]	; (80061ec <one_sectionD+0x12c>)
 8006130:	881b      	ldrh	r3, [r3, #0]
 8006132:	b21b      	sxth	r3, r3
 8006134:	b29b      	uxth	r3, r3
 8006136:	425b      	negs	r3, r3
 8006138:	b29b      	uxth	r3, r3
 800613a:	b218      	sxth	r0, r3
 800613c:	4b2c      	ldr	r3, [pc, #176]	; (80061f0 <one_sectionD+0x130>)
 800613e:	881b      	ldrh	r3, [r3, #0]
 8006140:	b21b      	sxth	r3, r3
 8006142:	b29a      	uxth	r2, r3
 8006144:	23b4      	movs	r3, #180	; 0xb4
 8006146:	f44f 7116 	mov.w	r1, #600	; 0x258
 800614a:	f7ff f81f 	bl	800518c <driveD>
 800614e:	e040      	b.n	80061d2 <one_sectionD+0x112>
	}else if(run_mode == 4){
 8006150:	4b25      	ldr	r3, [pc, #148]	; (80061e8 <one_sectionD+0x128>)
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b04      	cmp	r3, #4
 8006158:	d110      	bne.n	800617c <one_sectionD+0xbc>
		driveD(-accel_hs, SPEED_4, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 800615a:	4b24      	ldr	r3, [pc, #144]	; (80061ec <one_sectionD+0x12c>)
 800615c:	881b      	ldrh	r3, [r3, #0]
 800615e:	b21b      	sxth	r3, r3
 8006160:	b29b      	uxth	r3, r3
 8006162:	425b      	negs	r3, r3
 8006164:	b29b      	uxth	r3, r3
 8006166:	b218      	sxth	r0, r3
 8006168:	4b21      	ldr	r3, [pc, #132]	; (80061f0 <one_sectionD+0x130>)
 800616a:	881b      	ldrh	r3, [r3, #0]
 800616c:	b21b      	sxth	r3, r3
 800616e:	b29a      	uxth	r2, r3
 8006170:	23b4      	movs	r3, #180	; 0xb4
 8006172:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006176:	f7ff f809 	bl	800518c <driveD>
 800617a:	e02a      	b.n	80061d2 <one_sectionD+0x112>
	}else if(run_mode == 5){
 800617c:	4b1a      	ldr	r3, [pc, #104]	; (80061e8 <one_sectionD+0x128>)
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b05      	cmp	r3, #5
 8006184:	d110      	bne.n	80061a8 <one_sectionD+0xe8>
		driveD(-accel_hs, SPEED_5, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 8006186:	4b19      	ldr	r3, [pc, #100]	; (80061ec <one_sectionD+0x12c>)
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	b21b      	sxth	r3, r3
 800618c:	b29b      	uxth	r3, r3
 800618e:	425b      	negs	r3, r3
 8006190:	b29b      	uxth	r3, r3
 8006192:	b218      	sxth	r0, r3
 8006194:	4b16      	ldr	r3, [pc, #88]	; (80061f0 <one_sectionD+0x130>)
 8006196:	881b      	ldrh	r3, [r3, #0]
 8006198:	b21b      	sxth	r3, r3
 800619a:	b29a      	uxth	r2, r3
 800619c:	23b4      	movs	r3, #180	; 0xb4
 800619e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80061a2:	f7fe fff3 	bl	800518c <driveD>
 80061a6:	e014      	b.n	80061d2 <one_sectionD+0x112>
	}else if(run_mode == 6){
 80061a8:	4b0f      	ldr	r3, [pc, #60]	; (80061e8 <one_sectionD+0x128>)
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b06      	cmp	r3, #6
 80061b0:	d10f      	bne.n	80061d2 <one_sectionD+0x112>
		driveD(-accel_hs, SPEED_6, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 80061b2:	4b0e      	ldr	r3, [pc, #56]	; (80061ec <one_sectionD+0x12c>)
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	b21b      	sxth	r3, r3
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	425b      	negs	r3, r3
 80061bc:	b29b      	uxth	r3, r3
 80061be:	b218      	sxth	r0, r3
 80061c0:	4b0b      	ldr	r3, [pc, #44]	; (80061f0 <one_sectionD+0x130>)
 80061c2:	881b      	ldrh	r3, [r3, #0]
 80061c4:	b21b      	sxth	r3, r3
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	23b4      	movs	r3, #180	; 0xb4
 80061ca:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80061ce:	f7fe ffdd 	bl	800518c <driveD>
	}
	if(!MF.FLAG.SCND)get_wall_info();									//a壁情報を取得，片壁制御の有効・無効の判断
 80061d2:	4b08      	ldr	r3, [pc, #32]	; (80061f4 <one_sectionD+0x134>)
 80061d4:	881b      	ldrh	r3, [r3, #0]
 80061d6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d101      	bne.n	80061e4 <one_sectionD+0x124>
 80061e0:	f00b ff2e 	bl	8012040 <get_wall_info>
}
 80061e4:	bf00      	nop
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	20000456 	.word	0x20000456
 80061ec:	20000454 	.word	0x20000454
 80061f0:	20000ffc 	.word	0x20000ffc
 80061f4:	20000fa8 	.word	0x20000fa8

080061f8 <one_sectionVA>:
//one_sectionVA
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionVA(void){
 80061f8:	b580      	push	{r7, lr}
 80061fa:	af00      	add	r7, sp, #0
	full_led_write1(BLUEGREEN);
 80061fc:	2004      	movs	r0, #4
 80061fe:	f00b ff93 	bl	8012128 <full_led_write1>
	control_start();
 8006202:	f7fe fe01 	bl	8004e08 <control_start>
	if(run_mode == 1){
 8006206:	4b3c      	ldr	r3, [pc, #240]	; (80062f8 <one_sectionVA+0x100>)
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b01      	cmp	r3, #1
 800620e:	d10d      	bne.n	800622c <one_sectionVA+0x34>
		driveA(accel_hs, SPEED_1, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 8006210:	4b3a      	ldr	r3, [pc, #232]	; (80062fc <one_sectionVA+0x104>)
 8006212:	881b      	ldrh	r3, [r3, #0]
 8006214:	b21b      	sxth	r3, r3
 8006216:	b298      	uxth	r0, r3
 8006218:	4b39      	ldr	r3, [pc, #228]	; (8006300 <one_sectionVA+0x108>)
 800621a:	881b      	ldrh	r3, [r3, #0]
 800621c:	b21b      	sxth	r3, r3
 800621e:	b29a      	uxth	r2, r3
 8006220:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006224:	21c8      	movs	r1, #200	; 0xc8
 8006226:	f7fe ff37 	bl	8005098 <driveA>
	}else if(run_mode == 5){
		driveA(accel_hs, SPEED_5, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
	}else if(run_mode == 6){
		driveA(accel_hs, SPEED_6, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
	}
}
 800622a:	e062      	b.n	80062f2 <one_sectionVA+0xfa>
	}else if(run_mode == 2){
 800622c:	4b32      	ldr	r3, [pc, #200]	; (80062f8 <one_sectionVA+0x100>)
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b02      	cmp	r3, #2
 8006234:	d10e      	bne.n	8006254 <one_sectionVA+0x5c>
		driveA(accel_hs, SPEED_2, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 8006236:	4b31      	ldr	r3, [pc, #196]	; (80062fc <one_sectionVA+0x104>)
 8006238:	881b      	ldrh	r3, [r3, #0]
 800623a:	b21b      	sxth	r3, r3
 800623c:	b298      	uxth	r0, r3
 800623e:	4b30      	ldr	r3, [pc, #192]	; (8006300 <one_sectionVA+0x108>)
 8006240:	881b      	ldrh	r3, [r3, #0]
 8006242:	b21b      	sxth	r3, r3
 8006244:	b29a      	uxth	r2, r3
 8006246:	f44f 7382 	mov.w	r3, #260	; 0x104
 800624a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800624e:	f7fe ff23 	bl	8005098 <driveA>
}
 8006252:	e04e      	b.n	80062f2 <one_sectionVA+0xfa>
	}else if(run_mode == 3){
 8006254:	4b28      	ldr	r3, [pc, #160]	; (80062f8 <one_sectionVA+0x100>)
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b03      	cmp	r3, #3
 800625c:	d10e      	bne.n	800627c <one_sectionVA+0x84>
		driveA(accel_hs, SPEED_3, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 800625e:	4b27      	ldr	r3, [pc, #156]	; (80062fc <one_sectionVA+0x104>)
 8006260:	881b      	ldrh	r3, [r3, #0]
 8006262:	b21b      	sxth	r3, r3
 8006264:	b298      	uxth	r0, r3
 8006266:	4b26      	ldr	r3, [pc, #152]	; (8006300 <one_sectionVA+0x108>)
 8006268:	881b      	ldrh	r3, [r3, #0]
 800626a:	b21b      	sxth	r3, r3
 800626c:	b29a      	uxth	r2, r3
 800626e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006272:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006276:	f7fe ff0f 	bl	8005098 <driveA>
}
 800627a:	e03a      	b.n	80062f2 <one_sectionVA+0xfa>
	}else if(run_mode == 4){
 800627c:	4b1e      	ldr	r3, [pc, #120]	; (80062f8 <one_sectionVA+0x100>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b04      	cmp	r3, #4
 8006284:	d10e      	bne.n	80062a4 <one_sectionVA+0xac>
		driveA(accel_hs, SPEED_4, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 8006286:	4b1d      	ldr	r3, [pc, #116]	; (80062fc <one_sectionVA+0x104>)
 8006288:	881b      	ldrh	r3, [r3, #0]
 800628a:	b21b      	sxth	r3, r3
 800628c:	b298      	uxth	r0, r3
 800628e:	4b1c      	ldr	r3, [pc, #112]	; (8006300 <one_sectionVA+0x108>)
 8006290:	881b      	ldrh	r3, [r3, #0]
 8006292:	b21b      	sxth	r3, r3
 8006294:	b29a      	uxth	r2, r3
 8006296:	f44f 7382 	mov.w	r3, #260	; 0x104
 800629a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800629e:	f7fe fefb 	bl	8005098 <driveA>
}
 80062a2:	e026      	b.n	80062f2 <one_sectionVA+0xfa>
	}else if(run_mode == 5){
 80062a4:	4b14      	ldr	r3, [pc, #80]	; (80062f8 <one_sectionVA+0x100>)
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b05      	cmp	r3, #5
 80062ac:	d10e      	bne.n	80062cc <one_sectionVA+0xd4>
		driveA(accel_hs, SPEED_5, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 80062ae:	4b13      	ldr	r3, [pc, #76]	; (80062fc <one_sectionVA+0x104>)
 80062b0:	881b      	ldrh	r3, [r3, #0]
 80062b2:	b21b      	sxth	r3, r3
 80062b4:	b298      	uxth	r0, r3
 80062b6:	4b12      	ldr	r3, [pc, #72]	; (8006300 <one_sectionVA+0x108>)
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	b21b      	sxth	r3, r3
 80062bc:	b29a      	uxth	r2, r3
 80062be:	f44f 7382 	mov.w	r3, #260	; 0x104
 80062c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80062c6:	f7fe fee7 	bl	8005098 <driveA>
}
 80062ca:	e012      	b.n	80062f2 <one_sectionVA+0xfa>
	}else if(run_mode == 6){
 80062cc:	4b0a      	ldr	r3, [pc, #40]	; (80062f8 <one_sectionVA+0x100>)
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b06      	cmp	r3, #6
 80062d4:	d10d      	bne.n	80062f2 <one_sectionVA+0xfa>
		driveA(accel_hs, SPEED_6, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 80062d6:	4b09      	ldr	r3, [pc, #36]	; (80062fc <one_sectionVA+0x104>)
 80062d8:	881b      	ldrh	r3, [r3, #0]
 80062da:	b21b      	sxth	r3, r3
 80062dc:	b298      	uxth	r0, r3
 80062de:	4b08      	ldr	r3, [pc, #32]	; (8006300 <one_sectionVA+0x108>)
 80062e0:	881b      	ldrh	r3, [r3, #0]
 80062e2:	b21b      	sxth	r3, r3
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80062ea:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80062ee:	f7fe fed3 	bl	8005098 <driveA>
}
 80062f2:	bf00      	nop
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	20000456 	.word	0x20000456
 80062fc:	20000454 	.word	0x20000454
 8006300:	20000ffc 	.word	0x20000ffc

08006304 <one_sectionVD>:
//one_sectionVD
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionVD(void){
 8006304:	b580      	push	{r7, lr}
 8006306:	af00      	add	r7, sp, #0
	full_led_write1(BLUE);
 8006308:	2003      	movs	r0, #3
 800630a:	f00b ff0d 	bl	8012128 <full_led_write1>
	control_start();
 800630e:	f7fe fd7b 	bl	8004e08 <control_start>
	if(run_mode == 1){
 8006312:	4b45      	ldr	r3, [pc, #276]	; (8006428 <one_sectionVD+0x124>)
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	b2db      	uxtb	r3, r3
 8006318:	2b01      	cmp	r3, #1
 800631a:	d110      	bne.n	800633e <one_sectionVD+0x3a>
		driveD(-accel_hs, SPEED_1, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 800631c:	4b43      	ldr	r3, [pc, #268]	; (800642c <one_sectionVD+0x128>)
 800631e:	881b      	ldrh	r3, [r3, #0]
 8006320:	b21b      	sxth	r3, r3
 8006322:	b29b      	uxth	r3, r3
 8006324:	425b      	negs	r3, r3
 8006326:	b29b      	uxth	r3, r3
 8006328:	b218      	sxth	r0, r3
 800632a:	4b41      	ldr	r3, [pc, #260]	; (8006430 <one_sectionVD+0x12c>)
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	b21b      	sxth	r3, r3
 8006330:	b29a      	uxth	r2, r3
 8006332:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006336:	21c8      	movs	r1, #200	; 0xc8
 8006338:	f7fe ff28 	bl	800518c <driveD>
	}else if(run_mode == 5){
		driveD(-accel_hs, SPEED_5, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
	}else if(run_mode == 6){
		driveD(-accel_hs, SPEED_6, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
	}
}
 800633c:	e071      	b.n	8006422 <one_sectionVD+0x11e>
	}else if(run_mode == 2){
 800633e:	4b3a      	ldr	r3, [pc, #232]	; (8006428 <one_sectionVD+0x124>)
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	b2db      	uxtb	r3, r3
 8006344:	2b02      	cmp	r3, #2
 8006346:	d111      	bne.n	800636c <one_sectionVD+0x68>
		driveD(-accel_hs, SPEED_2, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 8006348:	4b38      	ldr	r3, [pc, #224]	; (800642c <one_sectionVD+0x128>)
 800634a:	881b      	ldrh	r3, [r3, #0]
 800634c:	b21b      	sxth	r3, r3
 800634e:	b29b      	uxth	r3, r3
 8006350:	425b      	negs	r3, r3
 8006352:	b29b      	uxth	r3, r3
 8006354:	b218      	sxth	r0, r3
 8006356:	4b36      	ldr	r3, [pc, #216]	; (8006430 <one_sectionVD+0x12c>)
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	b21b      	sxth	r3, r3
 800635c:	b29a      	uxth	r2, r3
 800635e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006362:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006366:	f7fe ff11 	bl	800518c <driveD>
}
 800636a:	e05a      	b.n	8006422 <one_sectionVD+0x11e>
	}else if(run_mode == 3){
 800636c:	4b2e      	ldr	r3, [pc, #184]	; (8006428 <one_sectionVD+0x124>)
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b03      	cmp	r3, #3
 8006374:	d111      	bne.n	800639a <one_sectionVD+0x96>
		driveD(-accel_hs, SPEED_3, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 8006376:	4b2d      	ldr	r3, [pc, #180]	; (800642c <one_sectionVD+0x128>)
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	b21b      	sxth	r3, r3
 800637c:	b29b      	uxth	r3, r3
 800637e:	425b      	negs	r3, r3
 8006380:	b29b      	uxth	r3, r3
 8006382:	b218      	sxth	r0, r3
 8006384:	4b2a      	ldr	r3, [pc, #168]	; (8006430 <one_sectionVD+0x12c>)
 8006386:	881b      	ldrh	r3, [r3, #0]
 8006388:	b21b      	sxth	r3, r3
 800638a:	b29a      	uxth	r2, r3
 800638c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006390:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006394:	f7fe fefa 	bl	800518c <driveD>
}
 8006398:	e043      	b.n	8006422 <one_sectionVD+0x11e>
	}else if(run_mode == 4){
 800639a:	4b23      	ldr	r3, [pc, #140]	; (8006428 <one_sectionVD+0x124>)
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	2b04      	cmp	r3, #4
 80063a2:	d111      	bne.n	80063c8 <one_sectionVD+0xc4>
		driveD(-accel_hs, SPEED_4, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 80063a4:	4b21      	ldr	r3, [pc, #132]	; (800642c <one_sectionVD+0x128>)
 80063a6:	881b      	ldrh	r3, [r3, #0]
 80063a8:	b21b      	sxth	r3, r3
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	425b      	negs	r3, r3
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	b218      	sxth	r0, r3
 80063b2:	4b1f      	ldr	r3, [pc, #124]	; (8006430 <one_sectionVD+0x12c>)
 80063b4:	881b      	ldrh	r3, [r3, #0]
 80063b6:	b21b      	sxth	r3, r3
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	f44f 7382 	mov.w	r3, #260	; 0x104
 80063be:	f44f 7148 	mov.w	r1, #800	; 0x320
 80063c2:	f7fe fee3 	bl	800518c <driveD>
}
 80063c6:	e02c      	b.n	8006422 <one_sectionVD+0x11e>
	}else if(run_mode == 5){
 80063c8:	4b17      	ldr	r3, [pc, #92]	; (8006428 <one_sectionVD+0x124>)
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b05      	cmp	r3, #5
 80063d0:	d111      	bne.n	80063f6 <one_sectionVD+0xf2>
		driveD(-accel_hs, SPEED_5, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 80063d2:	4b16      	ldr	r3, [pc, #88]	; (800642c <one_sectionVD+0x128>)
 80063d4:	881b      	ldrh	r3, [r3, #0]
 80063d6:	b21b      	sxth	r3, r3
 80063d8:	b29b      	uxth	r3, r3
 80063da:	425b      	negs	r3, r3
 80063dc:	b29b      	uxth	r3, r3
 80063de:	b218      	sxth	r0, r3
 80063e0:	4b13      	ldr	r3, [pc, #76]	; (8006430 <one_sectionVD+0x12c>)
 80063e2:	881b      	ldrh	r3, [r3, #0]
 80063e4:	b21b      	sxth	r3, r3
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80063ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80063f0:	f7fe fecc 	bl	800518c <driveD>
}
 80063f4:	e015      	b.n	8006422 <one_sectionVD+0x11e>
	}else if(run_mode == 6){
 80063f6:	4b0c      	ldr	r3, [pc, #48]	; (8006428 <one_sectionVD+0x124>)
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b06      	cmp	r3, #6
 80063fe:	d110      	bne.n	8006422 <one_sectionVD+0x11e>
		driveD(-accel_hs, SPEED_6, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 8006400:	4b0a      	ldr	r3, [pc, #40]	; (800642c <one_sectionVD+0x128>)
 8006402:	881b      	ldrh	r3, [r3, #0]
 8006404:	b21b      	sxth	r3, r3
 8006406:	b29b      	uxth	r3, r3
 8006408:	425b      	negs	r3, r3
 800640a:	b29b      	uxth	r3, r3
 800640c:	b218      	sxth	r0, r3
 800640e:	4b08      	ldr	r3, [pc, #32]	; (8006430 <one_sectionVD+0x12c>)
 8006410:	881b      	ldrh	r3, [r3, #0]
 8006412:	b21b      	sxth	r3, r3
 8006414:	b29a      	uxth	r2, r3
 8006416:	f44f 7382 	mov.w	r3, #260	; 0x104
 800641a:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800641e:	f7fe feb5 	bl	800518c <driveD>
}
 8006422:	bf00      	nop
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	20000456 	.word	0x20000456
 800642c:	20000454 	.word	0x20000454
 8006430:	20000ffc 	.word	0x20000ffc

08006434 <one_sectionU>:
//one_sectionU
// 等速で1区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionU(void){
 8006434:	b580      	push	{r7, lr}
 8006436:	af00      	add	r7, sp, #0
	full_led_write1(WHITE);
 8006438:	2007      	movs	r0, #7
 800643a:	f00b fe75 	bl	8012128 <full_led_write1>
	control_start();
 800643e:	f7fe fce3 	bl	8004e08 <control_start>
	driveU(SEC_HALF*2);													//1区画分等速走行。走行後は停止しない
 8006442:	20b4      	movs	r0, #180	; 0xb4
 8006444:	f7fe ff7c 	bl	8005340 <driveU>
	if(!MF.FLAG.SCND)get_wall_info();									//a壁情報を取得
 8006448:	4b05      	ldr	r3, [pc, #20]	; (8006460 <one_sectionU+0x2c>)
 800644a:	881b      	ldrh	r3, [r3, #0]
 800644c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d101      	bne.n	800645a <one_sectionU+0x26>
 8006456:	f00b fdf3 	bl	8012040 <get_wall_info>
}
 800645a:	bf00      	nop
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	20000fa8 	.word	0x20000fa8
 8006464:	00000000 	.word	0x00000000

08006468 <rotate_R90>:
//rotate_R90
// 右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_R90(void){
 8006468:	b598      	push	{r3, r4, r7, lr}
 800646a:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 800646c:	4b56      	ldr	r3, [pc, #344]	; (80065c8 <rotate_R90+0x160>)
 800646e:	4a57      	ldr	r2, [pc, #348]	; (80065cc <rotate_R90+0x164>)
 8006470:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 8006472:	4b57      	ldr	r3, [pc, #348]	; (80065d0 <rotate_R90+0x168>)
 8006474:	4a57      	ldr	r2, [pc, #348]	; (80065d4 <rotate_R90+0x16c>)
 8006476:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 8006478:	4b57      	ldr	r3, [pc, #348]	; (80065d8 <rotate_R90+0x170>)
 800647a:	4a58      	ldr	r2, [pc, #352]	; (80065dc <rotate_R90+0x174>)
 800647c:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 800647e:	4b52      	ldr	r3, [pc, #328]	; (80065c8 <rotate_R90+0x160>)
 8006480:	edd3 7a00 	vldr	s15, [r3]
 8006484:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80065e0 <rotate_R90+0x178>
 8006488:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800648c:	ee16 0a90 	vmov	r0, s13
 8006490:	f7fa f852 	bl	8000538 <__aeabi_f2d>
 8006494:	a34a      	add	r3, pc, #296	; (adr r3, 80065c0 <rotate_R90+0x158>)
 8006496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649a:	f7fa f8a5 	bl	80005e8 <__aeabi_dmul>
 800649e:	4603      	mov	r3, r0
 80064a0:	460c      	mov	r4, r1
 80064a2:	4618      	mov	r0, r3
 80064a4:	4621      	mov	r1, r4
 80064a6:	f04f 0200 	mov.w	r2, #0
 80064aa:	4b4e      	ldr	r3, [pc, #312]	; (80065e4 <rotate_R90+0x17c>)
 80064ac:	f7fa f89c 	bl	80005e8 <__aeabi_dmul>
 80064b0:	4603      	mov	r3, r0
 80064b2:	460c      	mov	r4, r1
 80064b4:	4618      	mov	r0, r3
 80064b6:	4621      	mov	r1, r4
 80064b8:	f04f 0200 	mov.w	r2, #0
 80064bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80064c0:	f7fa f9bc 	bl	800083c <__aeabi_ddiv>
 80064c4:	4603      	mov	r3, r0
 80064c6:	460c      	mov	r4, r1
 80064c8:	4618      	mov	r0, r3
 80064ca:	4621      	mov	r1, r4
 80064cc:	f7fa fb64 	bl	8000b98 <__aeabi_d2f>
 80064d0:	4602      	mov	r2, r0
 80064d2:	4b45      	ldr	r3, [pc, #276]	; (80065e8 <rotate_R90+0x180>)
 80064d4:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 80064d6:	4b3c      	ldr	r3, [pc, #240]	; (80065c8 <rotate_R90+0x160>)
 80064d8:	edd3 7a00 	vldr	s15, [r3]
 80064dc:	eef1 7a67 	vneg.f32	s15, s15
 80064e0:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80065e0 <rotate_R90+0x178>
 80064e4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80064e8:	ee16 0a90 	vmov	r0, s13
 80064ec:	f7fa f824 	bl	8000538 <__aeabi_f2d>
 80064f0:	a333      	add	r3, pc, #204	; (adr r3, 80065c0 <rotate_R90+0x158>)
 80064f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f6:	f7fa f877 	bl	80005e8 <__aeabi_dmul>
 80064fa:	4603      	mov	r3, r0
 80064fc:	460c      	mov	r4, r1
 80064fe:	4618      	mov	r0, r3
 8006500:	4621      	mov	r1, r4
 8006502:	f04f 0200 	mov.w	r2, #0
 8006506:	4b37      	ldr	r3, [pc, #220]	; (80065e4 <rotate_R90+0x17c>)
 8006508:	f7fa f86e 	bl	80005e8 <__aeabi_dmul>
 800650c:	4603      	mov	r3, r0
 800650e:	460c      	mov	r4, r1
 8006510:	4618      	mov	r0, r3
 8006512:	4621      	mov	r1, r4
 8006514:	f04f 0200 	mov.w	r2, #0
 8006518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800651c:	f7fa f98e 	bl	800083c <__aeabi_ddiv>
 8006520:	4603      	mov	r3, r0
 8006522:	460c      	mov	r4, r1
 8006524:	4618      	mov	r0, r3
 8006526:	4621      	mov	r1, r4
 8006528:	f7fa fb36 	bl	8000b98 <__aeabi_d2f>
 800652c:	4602      	mov	r2, r0
 800652e:	4b2f      	ldr	r3, [pc, #188]	; (80065ec <rotate_R90+0x184>)
 8006530:	601a      	str	r2, [r3, #0]

	drive_start();														//a走行開始
 8006532:	f7fe fbcd 	bl	8004cd0 <drive_start>
	control_stop();
 8006536:	f7fe fc8f 	bl	8004e58 <control_stop>
	while(degree_z > target_degree_z-80);
 800653a:	bf00      	nop
 800653c:	4b2c      	ldr	r3, [pc, #176]	; (80065f0 <rotate_R90+0x188>)
 800653e:	edd3 7a00 	vldr	s15, [r3]
 8006542:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80065f4 <rotate_R90+0x18c>
 8006546:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800654a:	4b2b      	ldr	r3, [pc, #172]	; (80065f8 <rotate_R90+0x190>)
 800654c:	edd3 7a00 	vldr	s15, [r3]
 8006550:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006558:	d4f0      	bmi.n	800653c <rotate_R90+0xd4>

	accel_l = -10000;
 800655a:	4b1d      	ldr	r3, [pc, #116]	; (80065d0 <rotate_R90+0x168>)
 800655c:	4a27      	ldr	r2, [pc, #156]	; (80065fc <rotate_R90+0x194>)
 800655e:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8006560:	4b1d      	ldr	r3, [pc, #116]	; (80065d8 <rotate_R90+0x170>)
 8006562:	4a27      	ldr	r2, [pc, #156]	; (8006600 <rotate_R90+0x198>)
 8006564:	601a      	str	r2, [r3, #0]
	speed_min_l = 100;
 8006566:	4b27      	ldr	r3, [pc, #156]	; (8006604 <rotate_R90+0x19c>)
 8006568:	4a27      	ldr	r2, [pc, #156]	; (8006608 <rotate_R90+0x1a0>)
 800656a:	601a      	str	r2, [r3, #0]
	speed_max_r = -100;
 800656c:	4b27      	ldr	r3, [pc, #156]	; (800660c <rotate_R90+0x1a4>)
 800656e:	4a28      	ldr	r2, [pc, #160]	; (8006610 <rotate_R90+0x1a8>)
 8006570:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-90);
 8006572:	bf00      	nop
 8006574:	4b1e      	ldr	r3, [pc, #120]	; (80065f0 <rotate_R90+0x188>)
 8006576:	edd3 7a00 	vldr	s15, [r3]
 800657a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8006614 <rotate_R90+0x1ac>
 800657e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006582:	4b1d      	ldr	r3, [pc, #116]	; (80065f8 <rotate_R90+0x190>)
 8006584:	edd3 7a00 	vldr	s15, [r3]
 8006588:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800658c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006590:	d4f0      	bmi.n	8006574 <rotate_R90+0x10c>

	if(!MF.FLAG.XDIR){
 8006592:	4b21      	ldr	r3, [pc, #132]	; (8006618 <rotate_R90+0x1b0>)
 8006594:	881b      	ldrh	r3, [r3, #0]
 8006596:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800659a:	b2db      	uxtb	r3, r3
 800659c:	2b00      	cmp	r3, #0
 800659e:	d104      	bne.n	80065aa <rotate_R90+0x142>
		turn_dir(DIR_TURN_R90, 1);										//aマイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80065a0:	2101      	movs	r1, #1
 80065a2:	2001      	movs	r0, #1
 80065a4:	f009 ff2c 	bl	8010400 <turn_dir>
 80065a8:	e003      	b.n	80065b2 <rotate_R90+0x14a>
	}else{
		turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80065aa:	2103      	movs	r1, #3
 80065ac:	2002      	movs	r0, #2
 80065ae:	f009 ff27 	bl	8010400 <turn_dir>
	}
	drive_stop();
 80065b2:	f7fe fbbd 	bl	8004d30 <drive_stop>
}
 80065b6:	bf00      	nop
 80065b8:	bd98      	pop	{r3, r4, r7, pc}
 80065ba:	bf00      	nop
 80065bc:	f3af 8000 	nop.w
 80065c0:	54442d18 	.word	0x54442d18
 80065c4:	400921fb 	.word	0x400921fb
 80065c8:	200001a8 	.word	0x200001a8
 80065cc:	44480000 	.word	0x44480000
 80065d0:	20000d98 	.word	0x20000d98
 80065d4:	453b8000 	.word	0x453b8000
 80065d8:	20000b24 	.word	0x20000b24
 80065dc:	c53b8000 	.word	0xc53b8000
 80065e0:	43340000 	.word	0x43340000
 80065e4:	40508000 	.word	0x40508000
 80065e8:	2000077c 	.word	0x2000077c
 80065ec:	20000fec 	.word	0x20000fec
 80065f0:	20000c78 	.word	0x20000c78
 80065f4:	42a00000 	.word	0x42a00000
 80065f8:	20000b9c 	.word	0x20000b9c
 80065fc:	c61c4000 	.word	0xc61c4000
 8006600:	461c4000 	.word	0x461c4000
 8006604:	20000b94 	.word	0x20000b94
 8006608:	42c80000 	.word	0x42c80000
 800660c:	200001a4 	.word	0x200001a4
 8006610:	c2c80000 	.word	0xc2c80000
 8006614:	42b40000 	.word	0x42b40000
 8006618:	20000fa8 	.word	0x20000fa8
 800661c:	00000000 	.word	0x00000000

08006620 <rotate_L90>:
//rotate_L90
// 左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_L90(void){
 8006620:	b598      	push	{r3, r4, r7, lr}
 8006622:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 8006624:	4b56      	ldr	r3, [pc, #344]	; (8006780 <rotate_L90+0x160>)
 8006626:	4a57      	ldr	r2, [pc, #348]	; (8006784 <rotate_L90+0x164>)
 8006628:	601a      	str	r2, [r3, #0]
	accel_l = -3000;
 800662a:	4b57      	ldr	r3, [pc, #348]	; (8006788 <rotate_L90+0x168>)
 800662c:	4a57      	ldr	r2, [pc, #348]	; (800678c <rotate_L90+0x16c>)
 800662e:	601a      	str	r2, [r3, #0]
	accel_r = 3000;
 8006630:	4b57      	ldr	r3, [pc, #348]	; (8006790 <rotate_L90+0x170>)
 8006632:	4a58      	ldr	r2, [pc, #352]	; (8006794 <rotate_L90+0x174>)
 8006634:	601a      	str	r2, [r3, #0]
	speed_min_l = -1*target_omega_z/180*M_PI * TREAD/2;
 8006636:	4b52      	ldr	r3, [pc, #328]	; (8006780 <rotate_L90+0x160>)
 8006638:	edd3 7a00 	vldr	s15, [r3]
 800663c:	eef1 7a67 	vneg.f32	s15, s15
 8006640:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8006798 <rotate_L90+0x178>
 8006644:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006648:	ee16 0a90 	vmov	r0, s13
 800664c:	f7f9 ff74 	bl	8000538 <__aeabi_f2d>
 8006650:	a349      	add	r3, pc, #292	; (adr r3, 8006778 <rotate_L90+0x158>)
 8006652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006656:	f7f9 ffc7 	bl	80005e8 <__aeabi_dmul>
 800665a:	4603      	mov	r3, r0
 800665c:	460c      	mov	r4, r1
 800665e:	4618      	mov	r0, r3
 8006660:	4621      	mov	r1, r4
 8006662:	f04f 0200 	mov.w	r2, #0
 8006666:	4b4d      	ldr	r3, [pc, #308]	; (800679c <rotate_L90+0x17c>)
 8006668:	f7f9 ffbe 	bl	80005e8 <__aeabi_dmul>
 800666c:	4603      	mov	r3, r0
 800666e:	460c      	mov	r4, r1
 8006670:	4618      	mov	r0, r3
 8006672:	4621      	mov	r1, r4
 8006674:	f04f 0200 	mov.w	r2, #0
 8006678:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800667c:	f7fa f8de 	bl	800083c <__aeabi_ddiv>
 8006680:	4603      	mov	r3, r0
 8006682:	460c      	mov	r4, r1
 8006684:	4618      	mov	r0, r3
 8006686:	4621      	mov	r1, r4
 8006688:	f7fa fa86 	bl	8000b98 <__aeabi_d2f>
 800668c:	4602      	mov	r2, r0
 800668e:	4b44      	ldr	r3, [pc, #272]	; (80067a0 <rotate_L90+0x180>)
 8006690:	601a      	str	r2, [r3, #0]
	speed_max_r = target_omega_z/180*M_PI * TREAD/2;
 8006692:	4b3b      	ldr	r3, [pc, #236]	; (8006780 <rotate_L90+0x160>)
 8006694:	edd3 7a00 	vldr	s15, [r3]
 8006698:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8006798 <rotate_L90+0x178>
 800669c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80066a0:	ee16 0a90 	vmov	r0, s13
 80066a4:	f7f9 ff48 	bl	8000538 <__aeabi_f2d>
 80066a8:	a333      	add	r3, pc, #204	; (adr r3, 8006778 <rotate_L90+0x158>)
 80066aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ae:	f7f9 ff9b 	bl	80005e8 <__aeabi_dmul>
 80066b2:	4603      	mov	r3, r0
 80066b4:	460c      	mov	r4, r1
 80066b6:	4618      	mov	r0, r3
 80066b8:	4621      	mov	r1, r4
 80066ba:	f04f 0200 	mov.w	r2, #0
 80066be:	4b37      	ldr	r3, [pc, #220]	; (800679c <rotate_L90+0x17c>)
 80066c0:	f7f9 ff92 	bl	80005e8 <__aeabi_dmul>
 80066c4:	4603      	mov	r3, r0
 80066c6:	460c      	mov	r4, r1
 80066c8:	4618      	mov	r0, r3
 80066ca:	4621      	mov	r1, r4
 80066cc:	f04f 0200 	mov.w	r2, #0
 80066d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80066d4:	f7fa f8b2 	bl	800083c <__aeabi_ddiv>
 80066d8:	4603      	mov	r3, r0
 80066da:	460c      	mov	r4, r1
 80066dc:	4618      	mov	r0, r3
 80066de:	4621      	mov	r1, r4
 80066e0:	f7fa fa5a 	bl	8000b98 <__aeabi_d2f>
 80066e4:	4602      	mov	r2, r0
 80066e6:	4b2f      	ldr	r3, [pc, #188]	; (80067a4 <rotate_L90+0x184>)
 80066e8:	601a      	str	r2, [r3, #0]

	drive_start();														//a走行開始
 80066ea:	f7fe faf1 	bl	8004cd0 <drive_start>
	control_stop();
 80066ee:	f7fe fbb3 	bl	8004e58 <control_stop>
	while(degree_z < target_degree_z+80);
 80066f2:	bf00      	nop
 80066f4:	4b2c      	ldr	r3, [pc, #176]	; (80067a8 <rotate_L90+0x188>)
 80066f6:	edd3 7a00 	vldr	s15, [r3]
 80066fa:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80067ac <rotate_L90+0x18c>
 80066fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006702:	4b2b      	ldr	r3, [pc, #172]	; (80067b0 <rotate_L90+0x190>)
 8006704:	edd3 7a00 	vldr	s15, [r3]
 8006708:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800670c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006710:	dcf0      	bgt.n	80066f4 <rotate_L90+0xd4>

	accel_l = 10000;
 8006712:	4b1d      	ldr	r3, [pc, #116]	; (8006788 <rotate_L90+0x168>)
 8006714:	4a27      	ldr	r2, [pc, #156]	; (80067b4 <rotate_L90+0x194>)
 8006716:	601a      	str	r2, [r3, #0]
	accel_r = -10000;
 8006718:	4b1d      	ldr	r3, [pc, #116]	; (8006790 <rotate_L90+0x170>)
 800671a:	4a27      	ldr	r2, [pc, #156]	; (80067b8 <rotate_L90+0x198>)
 800671c:	601a      	str	r2, [r3, #0]
	speed_max_l = -100;
 800671e:	4b27      	ldr	r3, [pc, #156]	; (80067bc <rotate_L90+0x19c>)
 8006720:	4a27      	ldr	r2, [pc, #156]	; (80067c0 <rotate_L90+0x1a0>)
 8006722:	601a      	str	r2, [r3, #0]
	speed_min_r = 100;
 8006724:	4b27      	ldr	r3, [pc, #156]	; (80067c4 <rotate_L90+0x1a4>)
 8006726:	4a28      	ldr	r2, [pc, #160]	; (80067c8 <rotate_L90+0x1a8>)
 8006728:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+90);
 800672a:	bf00      	nop
 800672c:	4b1e      	ldr	r3, [pc, #120]	; (80067a8 <rotate_L90+0x188>)
 800672e:	edd3 7a00 	vldr	s15, [r3]
 8006732:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80067cc <rotate_L90+0x1ac>
 8006736:	ee37 7a87 	vadd.f32	s14, s15, s14
 800673a:	4b1d      	ldr	r3, [pc, #116]	; (80067b0 <rotate_L90+0x190>)
 800673c:	edd3 7a00 	vldr	s15, [r3]
 8006740:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006748:	dcf0      	bgt.n	800672c <rotate_L90+0x10c>

	if(!MF.FLAG.XDIR){
 800674a:	4b21      	ldr	r3, [pc, #132]	; (80067d0 <rotate_L90+0x1b0>)
 800674c:	881b      	ldrh	r3, [r3, #0]
 800674e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b00      	cmp	r3, #0
 8006756:	d104      	bne.n	8006762 <rotate_L90+0x142>
		turn_dir(DIR_TURN_L90, 1);										//aマイクロマウス内部位置情報でも右回転処理&目標角度右90度
 8006758:	2101      	movs	r1, #1
 800675a:	20ff      	movs	r0, #255	; 0xff
 800675c:	f009 fe50 	bl	8010400 <turn_dir>
 8006760:	e003      	b.n	800676a <rotate_L90+0x14a>
	}else{
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも右回転処理&目標角度右90度
 8006762:	2103      	movs	r1, #3
 8006764:	20fe      	movs	r0, #254	; 0xfe
 8006766:	f009 fe4b 	bl	8010400 <turn_dir>
	}
	drive_stop();
 800676a:	f7fe fae1 	bl	8004d30 <drive_stop>
}
 800676e:	bf00      	nop
 8006770:	bd98      	pop	{r3, r4, r7, pc}
 8006772:	bf00      	nop
 8006774:	f3af 8000 	nop.w
 8006778:	54442d18 	.word	0x54442d18
 800677c:	400921fb 	.word	0x400921fb
 8006780:	200001a8 	.word	0x200001a8
 8006784:	44480000 	.word	0x44480000
 8006788:	20000d98 	.word	0x20000d98
 800678c:	c53b8000 	.word	0xc53b8000
 8006790:	20000b24 	.word	0x20000b24
 8006794:	453b8000 	.word	0x453b8000
 8006798:	43340000 	.word	0x43340000
 800679c:	40508000 	.word	0x40508000
 80067a0:	20000b94 	.word	0x20000b94
 80067a4:	200001a4 	.word	0x200001a4
 80067a8:	20000c78 	.word	0x20000c78
 80067ac:	42a00000 	.word	0x42a00000
 80067b0:	20000b9c 	.word	0x20000b9c
 80067b4:	461c4000 	.word	0x461c4000
 80067b8:	c61c4000 	.word	0xc61c4000
 80067bc:	2000077c 	.word	0x2000077c
 80067c0:	c2c80000 	.word	0xc2c80000
 80067c4:	20000fec 	.word	0x20000fec
 80067c8:	42c80000 	.word	0x42c80000
 80067cc:	42b40000 	.word	0x42b40000
 80067d0:	20000fa8 	.word	0x20000fa8
 80067d4:	00000000 	.word	0x00000000

080067d8 <rotate_180>:
//rotate_180
// 180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_180(void){
 80067d8:	b598      	push	{r3, r4, r7, lr}
 80067da:	af00      	add	r7, sp, #0

	full_led_write1(GREEN);
 80067dc:	2002      	movs	r0, #2
 80067de:	f00b fca3 	bl	8012128 <full_led_write1>
	target_omega_z = 800;
 80067e2:	4b55      	ldr	r3, [pc, #340]	; (8006938 <rotate_180+0x160>)
 80067e4:	4a55      	ldr	r2, [pc, #340]	; (800693c <rotate_180+0x164>)
 80067e6:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 80067e8:	4b55      	ldr	r3, [pc, #340]	; (8006940 <rotate_180+0x168>)
 80067ea:	4a56      	ldr	r2, [pc, #344]	; (8006944 <rotate_180+0x16c>)
 80067ec:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 80067ee:	4b56      	ldr	r3, [pc, #344]	; (8006948 <rotate_180+0x170>)
 80067f0:	4a56      	ldr	r2, [pc, #344]	; (800694c <rotate_180+0x174>)
 80067f2:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 80067f4:	4b50      	ldr	r3, [pc, #320]	; (8006938 <rotate_180+0x160>)
 80067f6:	edd3 7a00 	vldr	s15, [r3]
 80067fa:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8006950 <rotate_180+0x178>
 80067fe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006802:	ee16 0a90 	vmov	r0, s13
 8006806:	f7f9 fe97 	bl	8000538 <__aeabi_f2d>
 800680a:	a349      	add	r3, pc, #292	; (adr r3, 8006930 <rotate_180+0x158>)
 800680c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006810:	f7f9 feea 	bl	80005e8 <__aeabi_dmul>
 8006814:	4603      	mov	r3, r0
 8006816:	460c      	mov	r4, r1
 8006818:	4618      	mov	r0, r3
 800681a:	4621      	mov	r1, r4
 800681c:	f04f 0200 	mov.w	r2, #0
 8006820:	4b4c      	ldr	r3, [pc, #304]	; (8006954 <rotate_180+0x17c>)
 8006822:	f7f9 fee1 	bl	80005e8 <__aeabi_dmul>
 8006826:	4603      	mov	r3, r0
 8006828:	460c      	mov	r4, r1
 800682a:	4618      	mov	r0, r3
 800682c:	4621      	mov	r1, r4
 800682e:	f04f 0200 	mov.w	r2, #0
 8006832:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006836:	f7fa f801 	bl	800083c <__aeabi_ddiv>
 800683a:	4603      	mov	r3, r0
 800683c:	460c      	mov	r4, r1
 800683e:	4618      	mov	r0, r3
 8006840:	4621      	mov	r1, r4
 8006842:	f7fa f9a9 	bl	8000b98 <__aeabi_d2f>
 8006846:	4602      	mov	r2, r0
 8006848:	4b43      	ldr	r3, [pc, #268]	; (8006958 <rotate_180+0x180>)
 800684a:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 800684c:	4b3a      	ldr	r3, [pc, #232]	; (8006938 <rotate_180+0x160>)
 800684e:	edd3 7a00 	vldr	s15, [r3]
 8006852:	eef1 7a67 	vneg.f32	s15, s15
 8006856:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8006950 <rotate_180+0x178>
 800685a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800685e:	ee16 0a90 	vmov	r0, s13
 8006862:	f7f9 fe69 	bl	8000538 <__aeabi_f2d>
 8006866:	a332      	add	r3, pc, #200	; (adr r3, 8006930 <rotate_180+0x158>)
 8006868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686c:	f7f9 febc 	bl	80005e8 <__aeabi_dmul>
 8006870:	4603      	mov	r3, r0
 8006872:	460c      	mov	r4, r1
 8006874:	4618      	mov	r0, r3
 8006876:	4621      	mov	r1, r4
 8006878:	f04f 0200 	mov.w	r2, #0
 800687c:	4b35      	ldr	r3, [pc, #212]	; (8006954 <rotate_180+0x17c>)
 800687e:	f7f9 feb3 	bl	80005e8 <__aeabi_dmul>
 8006882:	4603      	mov	r3, r0
 8006884:	460c      	mov	r4, r1
 8006886:	4618      	mov	r0, r3
 8006888:	4621      	mov	r1, r4
 800688a:	f04f 0200 	mov.w	r2, #0
 800688e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006892:	f7f9 ffd3 	bl	800083c <__aeabi_ddiv>
 8006896:	4603      	mov	r3, r0
 8006898:	460c      	mov	r4, r1
 800689a:	4618      	mov	r0, r3
 800689c:	4621      	mov	r1, r4
 800689e:	f7fa f97b 	bl	8000b98 <__aeabi_d2f>
 80068a2:	4602      	mov	r2, r0
 80068a4:	4b2d      	ldr	r3, [pc, #180]	; (800695c <rotate_180+0x184>)
 80068a6:	601a      	str	r2, [r3, #0]

	drive_start();														//a走行開始
 80068a8:	f7fe fa12 	bl	8004cd0 <drive_start>
	control_stop();
 80068ac:	f7fe fad4 	bl	8004e58 <control_stop>
	while(degree_z > target_degree_z-160);
 80068b0:	bf00      	nop
 80068b2:	4b2b      	ldr	r3, [pc, #172]	; (8006960 <rotate_180+0x188>)
 80068b4:	edd3 7a00 	vldr	s15, [r3]
 80068b8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8006964 <rotate_180+0x18c>
 80068bc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80068c0:	4b29      	ldr	r3, [pc, #164]	; (8006968 <rotate_180+0x190>)
 80068c2:	edd3 7a00 	vldr	s15, [r3]
 80068c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80068ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068ce:	d4f0      	bmi.n	80068b2 <rotate_180+0xda>

	accel_l = -10000;
 80068d0:	4b1b      	ldr	r3, [pc, #108]	; (8006940 <rotate_180+0x168>)
 80068d2:	4a26      	ldr	r2, [pc, #152]	; (800696c <rotate_180+0x194>)
 80068d4:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80068d6:	4b1c      	ldr	r3, [pc, #112]	; (8006948 <rotate_180+0x170>)
 80068d8:	4a25      	ldr	r2, [pc, #148]	; (8006970 <rotate_180+0x198>)
 80068da:	601a      	str	r2, [r3, #0]
	speed_min_l = 100;
 80068dc:	4b25      	ldr	r3, [pc, #148]	; (8006974 <rotate_180+0x19c>)
 80068de:	4a26      	ldr	r2, [pc, #152]	; (8006978 <rotate_180+0x1a0>)
 80068e0:	601a      	str	r2, [r3, #0]
	speed_max_r = -100;
 80068e2:	4b26      	ldr	r3, [pc, #152]	; (800697c <rotate_180+0x1a4>)
 80068e4:	4a26      	ldr	r2, [pc, #152]	; (8006980 <rotate_180+0x1a8>)
 80068e6:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-180);
 80068e8:	bf00      	nop
 80068ea:	4b1d      	ldr	r3, [pc, #116]	; (8006960 <rotate_180+0x188>)
 80068ec:	edd3 7a00 	vldr	s15, [r3]
 80068f0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006950 <rotate_180+0x178>
 80068f4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80068f8:	4b1b      	ldr	r3, [pc, #108]	; (8006968 <rotate_180+0x190>)
 80068fa:	edd3 7a00 	vldr	s15, [r3]
 80068fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006906:	d4f0      	bmi.n	80068ea <rotate_180+0x112>

	if(!MF.FLAG.XDIR){
 8006908:	4b1e      	ldr	r3, [pc, #120]	; (8006984 <rotate_180+0x1ac>)
 800690a:	881b      	ldrh	r3, [r3, #0]
 800690c:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006910:	b2db      	uxtb	r3, r3
 8006912:	2b00      	cmp	r3, #0
 8006914:	d104      	bne.n	8006920 <rotate_180+0x148>
		turn_dir(DIR_TURN_180, 1);										//aマイクロマウス内部位置情報でも180度回転処理&目標角度左180度
 8006916:	2101      	movs	r1, #1
 8006918:	2002      	movs	r0, #2
 800691a:	f009 fd71 	bl	8010400 <turn_dir>
 800691e:	e003      	b.n	8006928 <rotate_180+0x150>
	}else{
		turn_dir(DIR_TURN_R180_8, 3);									//aマイクロマウス内部位置情報でも180度回転処理&目標角度左180度
 8006920:	2103      	movs	r1, #3
 8006922:	2004      	movs	r0, #4
 8006924:	f009 fd6c 	bl	8010400 <turn_dir>
	}
	drive_stop();
 8006928:	f7fe fa02 	bl	8004d30 <drive_stop>

}
 800692c:	bf00      	nop
 800692e:	bd98      	pop	{r3, r4, r7, pc}
 8006930:	54442d18 	.word	0x54442d18
 8006934:	400921fb 	.word	0x400921fb
 8006938:	200001a8 	.word	0x200001a8
 800693c:	44480000 	.word	0x44480000
 8006940:	20000d98 	.word	0x20000d98
 8006944:	453b8000 	.word	0x453b8000
 8006948:	20000b24 	.word	0x20000b24
 800694c:	c53b8000 	.word	0xc53b8000
 8006950:	43340000 	.word	0x43340000
 8006954:	40508000 	.word	0x40508000
 8006958:	2000077c 	.word	0x2000077c
 800695c:	20000fec 	.word	0x20000fec
 8006960:	20000c78 	.word	0x20000c78
 8006964:	43200000 	.word	0x43200000
 8006968:	20000b9c 	.word	0x20000b9c
 800696c:	c61c4000 	.word	0xc61c4000
 8006970:	461c4000 	.word	0x461c4000
 8006974:	20000b94 	.word	0x20000b94
 8006978:	42c80000 	.word	0x42c80000
 800697c:	200001a4 	.word	0x200001a4
 8006980:	c2c80000 	.word	0xc2c80000
 8006984:	20000fa8 	.word	0x20000fa8

08006988 <slalom_R90>:
//slalom_R90
// スラロームで左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_R90(void){
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af02      	add	r7, sp, #8
	full_led_write1(PURPLE);
 800698e:	2005      	movs	r0, #5
 8006990:	f00b fbca 	bl	8012128 <full_led_write1>
	if(run_mode == 1){
 8006994:	4ba2      	ldr	r3, [pc, #648]	; (8006c20 <slalom_R90+0x298>)
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	b2db      	uxtb	r3, r3
 800699a:	2b01      	cmp	r3, #1
 800699c:	d127      	bne.n	80069ee <slalom_R90+0x66>
		slalomF(10000, SPEED_1, SLALOM_OFFSET_F, SLALOM_WALL_FL, SLALOM_WALL_FR);
 800699e:	23fa      	movs	r3, #250	; 0xfa
 80069a0:	9300      	str	r3, [sp, #0]
 80069a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80069a6:	2212      	movs	r2, #18
 80069a8:	21c8      	movs	r1, #200	; 0xc8
 80069aa:	f242 7010 	movw	r0, #10000	; 0x2710
 80069ae:	f7fe fdc5 	bl	800553c <slalomF>
		slalomR(-SLALOM_DEGACCEL, -SLALOM_OMEGA, -90, SPEED_1);
 80069b2:	23c8      	movs	r3, #200	; 0xc8
 80069b4:	f06f 0259 	mvn.w	r2, #89	; 0x59
 80069b8:	499a      	ldr	r1, [pc, #616]	; (8006c24 <slalom_R90+0x29c>)
 80069ba:	489b      	ldr	r0, [pc, #620]	; (8006c28 <slalom_R90+0x2a0>)
 80069bc:	f7fe fe36 	bl	800562c <slalomR>

		if(!MF.FLAG.XDIR){
 80069c0:	4b9a      	ldr	r3, [pc, #616]	; (8006c2c <slalom_R90+0x2a4>)
 80069c2:	881b      	ldrh	r3, [r3, #0]
 80069c4:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d104      	bne.n	80069d8 <slalom_R90+0x50>
			turn_dir(DIR_TURN_R90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80069ce:	2101      	movs	r1, #1
 80069d0:	2001      	movs	r0, #1
 80069d2:	f009 fd15 	bl	8010400 <turn_dir>
 80069d6:	e003      	b.n	80069e0 <slalom_R90+0x58>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80069d8:	2103      	movs	r1, #3
 80069da:	2002      	movs	r0, #2
 80069dc:	f009 fd10 	bl	8010400 <turn_dir>
		}
		slalomB(10000, SPEED_1, SLALOM_OFFSET_B);
 80069e0:	2219      	movs	r2, #25
 80069e2:	21c8      	movs	r1, #200	; 0xc8
 80069e4:	f242 7010 	movw	r0, #10000	; 0x2710
 80069e8:	f7fe ff7a 	bl	80058e0 <slalomB>
 80069ec:	e10c      	b.n	8006c08 <slalom_R90+0x280>
	}else if(run_mode == 2){
 80069ee:	4b8c      	ldr	r3, [pc, #560]	; (8006c20 <slalom_R90+0x298>)
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d12a      	bne.n	8006a4e <slalom_R90+0xc6>
		slalomF(10000, SPEED_2, SLALOM_2_OFFSET_F, SLALOM_2_WALL_FL, SLALOM_2_WALL_FR);
 80069f8:	23fa      	movs	r3, #250	; 0xfa
 80069fa:	9300      	str	r3, [sp, #0]
 80069fc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006a00:	2208      	movs	r2, #8
 8006a02:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006a06:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a0a:	f7fe fd97 	bl	800553c <slalomF>
		slalomR(-SLALOM_2_DEGACCEL, -SLALOM_2_OMEGA, -90, SPEED_2);
 8006a0e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006a12:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8006a16:	4983      	ldr	r1, [pc, #524]	; (8006c24 <slalom_R90+0x29c>)
 8006a18:	4883      	ldr	r0, [pc, #524]	; (8006c28 <slalom_R90+0x2a0>)
 8006a1a:	f7fe fe07 	bl	800562c <slalomR>

		if(!MF.FLAG.XDIR){
 8006a1e:	4b83      	ldr	r3, [pc, #524]	; (8006c2c <slalom_R90+0x2a4>)
 8006a20:	881b      	ldrh	r3, [r3, #0]
 8006a22:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d104      	bne.n	8006a36 <slalom_R90+0xae>
			turn_dir(DIR_TURN_R90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006a2c:	2101      	movs	r1, #1
 8006a2e:	2001      	movs	r0, #1
 8006a30:	f009 fce6 	bl	8010400 <turn_dir>
 8006a34:	e003      	b.n	8006a3e <slalom_R90+0xb6>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006a36:	2103      	movs	r1, #3
 8006a38:	2002      	movs	r0, #2
 8006a3a:	f009 fce1 	bl	8010400 <turn_dir>
		}
		slalomB(10000, SPEED_2, SLALOM_2_OFFSET_B-10);					//B-10
 8006a3e:	221b      	movs	r2, #27
 8006a40:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006a44:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a48:	f7fe ff4a 	bl	80058e0 <slalomB>
 8006a4c:	e0dc      	b.n	8006c08 <slalom_R90+0x280>
	}else if(run_mode == 3){
 8006a4e:	4b74      	ldr	r3, [pc, #464]	; (8006c20 <slalom_R90+0x298>)
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b03      	cmp	r3, #3
 8006a56:	d12a      	bne.n	8006aae <slalom_R90+0x126>
		slalomF(10000, SPEED_3, SLALOM_3_OFFSET_F, SLALOM_3_WALL_FL, SLALOM_3_WALL_FR);
 8006a58:	23f0      	movs	r3, #240	; 0xf0
 8006a5a:	9300      	str	r3, [sp, #0]
 8006a5c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006a60:	220a      	movs	r2, #10
 8006a62:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006a66:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a6a:	f7fe fd67 	bl	800553c <slalomF>
		slalomR(-SLALOM_3_DEGACCEL, -SLALOM_3_OMEGA, -80, SPEED_3);
 8006a6e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006a72:	f06f 024f 	mvn.w	r2, #79	; 0x4f
 8006a76:	496e      	ldr	r1, [pc, #440]	; (8006c30 <slalom_R90+0x2a8>)
 8006a78:	486e      	ldr	r0, [pc, #440]	; (8006c34 <slalom_R90+0x2ac>)
 8006a7a:	f7fe fdd7 	bl	800562c <slalomR>

		if(!MF.FLAG.XDIR){
 8006a7e:	4b6b      	ldr	r3, [pc, #428]	; (8006c2c <slalom_R90+0x2a4>)
 8006a80:	881b      	ldrh	r3, [r3, #0]
 8006a82:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d104      	bne.n	8006a96 <slalom_R90+0x10e>
			turn_dir(DIR_TURN_R90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006a8c:	2101      	movs	r1, #1
 8006a8e:	2001      	movs	r0, #1
 8006a90:	f009 fcb6 	bl	8010400 <turn_dir>
 8006a94:	e003      	b.n	8006a9e <slalom_R90+0x116>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006a96:	2103      	movs	r1, #3
 8006a98:	2002      	movs	r0, #2
 8006a9a:	f009 fcb1 	bl	8010400 <turn_dir>
		}
		slalomB(10000, SPEED_3, SLALOM_3_OFFSET_B);
 8006a9e:	223c      	movs	r2, #60	; 0x3c
 8006aa0:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006aa4:	f242 7010 	movw	r0, #10000	; 0x2710
 8006aa8:	f7fe ff1a 	bl	80058e0 <slalomB>
 8006aac:	e0ac      	b.n	8006c08 <slalom_R90+0x280>
	}else if(run_mode == 4){
 8006aae:	4b5c      	ldr	r3, [pc, #368]	; (8006c20 <slalom_R90+0x298>)
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	2b04      	cmp	r3, #4
 8006ab6:	d12a      	bne.n	8006b0e <slalom_R90+0x186>
		slalomF(10000, SPEED_4, SLALOM_4_OFFSET_F, SLALOM_4_WALL_FL, SLALOM_4_WALL_FR);
 8006ab8:	23be      	movs	r3, #190	; 0xbe
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	f44f 73be 	mov.w	r3, #380	; 0x17c
 8006ac0:	2205      	movs	r2, #5
 8006ac2:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006ac6:	f242 7010 	movw	r0, #10000	; 0x2710
 8006aca:	f7fe fd37 	bl	800553c <slalomF>
		slalomR(-SLALOM_4_DEGACCEL, -SLALOM_4_OMEGA, -60, SPEED_4);
 8006ace:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006ad2:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 8006ad6:	4958      	ldr	r1, [pc, #352]	; (8006c38 <slalom_R90+0x2b0>)
 8006ad8:	4858      	ldr	r0, [pc, #352]	; (8006c3c <slalom_R90+0x2b4>)
 8006ada:	f7fe fda7 	bl	800562c <slalomR>

		if(!MF.FLAG.XDIR){
 8006ade:	4b53      	ldr	r3, [pc, #332]	; (8006c2c <slalom_R90+0x2a4>)
 8006ae0:	881b      	ldrh	r3, [r3, #0]
 8006ae2:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d104      	bne.n	8006af6 <slalom_R90+0x16e>
			turn_dir(DIR_TURN_R90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006aec:	2101      	movs	r1, #1
 8006aee:	2001      	movs	r0, #1
 8006af0:	f009 fc86 	bl	8010400 <turn_dir>
 8006af4:	e003      	b.n	8006afe <slalom_R90+0x176>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006af6:	2103      	movs	r1, #3
 8006af8:	2002      	movs	r0, #2
 8006afa:	f009 fc81 	bl	8010400 <turn_dir>
		}
		slalomB(10000, SPEED_4, SLALOM_4_OFFSET_B);
 8006afe:	225a      	movs	r2, #90	; 0x5a
 8006b00:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006b04:	f242 7010 	movw	r0, #10000	; 0x2710
 8006b08:	f7fe feea 	bl	80058e0 <slalomB>
 8006b0c:	e07c      	b.n	8006c08 <slalom_R90+0x280>
	}else if(run_mode == 5){
 8006b0e:	4b44      	ldr	r3, [pc, #272]	; (8006c20 <slalom_R90+0x298>)
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b05      	cmp	r3, #5
 8006b16:	d134      	bne.n	8006b82 <slalom_R90+0x1fa>
		MF2.FLAG.TEMP = 1;
 8006b18:	4a49      	ldr	r2, [pc, #292]	; (8006c40 <slalom_R90+0x2b8>)
 8006b1a:	8813      	ldrh	r3, [r2, #0]
 8006b1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b20:	8013      	strh	r3, [r2, #0]
		slalomF(10000, SPEED_5, SLALOM_5_OFFSET_F, SLALOM_5_WALL_FL, SLALOM_5_WALL_FR);
 8006b22:	23a0      	movs	r3, #160	; 0xa0
 8006b24:	9300      	str	r3, [sp, #0]
 8006b26:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006b2a:	2203      	movs	r2, #3
 8006b2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006b30:	f242 7010 	movw	r0, #10000	; 0x2710
 8006b34:	f7fe fd02 	bl	800553c <slalomF>
		slalomR(-SLALOM_5_DEGACCEL, -SLALOM_5_OMEGA, -20, SPEED_5);
 8006b38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006b3c:	f06f 0213 	mvn.w	r2, #19
 8006b40:	4940      	ldr	r1, [pc, #256]	; (8006c44 <slalom_R90+0x2bc>)
 8006b42:	4841      	ldr	r0, [pc, #260]	; (8006c48 <slalom_R90+0x2c0>)
 8006b44:	f7fe fd72 	bl	800562c <slalomR>

		if(!MF.FLAG.XDIR){
 8006b48:	4b38      	ldr	r3, [pc, #224]	; (8006c2c <slalom_R90+0x2a4>)
 8006b4a:	881b      	ldrh	r3, [r3, #0]
 8006b4c:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d104      	bne.n	8006b60 <slalom_R90+0x1d8>
			turn_dir(DIR_TURN_R90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006b56:	2101      	movs	r1, #1
 8006b58:	2001      	movs	r0, #1
 8006b5a:	f009 fc51 	bl	8010400 <turn_dir>
 8006b5e:	e003      	b.n	8006b68 <slalom_R90+0x1e0>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006b60:	2103      	movs	r1, #3
 8006b62:	2002      	movs	r0, #2
 8006b64:	f009 fc4c 	bl	8010400 <turn_dir>
		}
		slalomB(10000, SPEED_5, SLALOM_5_OFFSET_B);
 8006b68:	226e      	movs	r2, #110	; 0x6e
 8006b6a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006b6e:	f242 7010 	movw	r0, #10000	; 0x2710
 8006b72:	f7fe feb5 	bl	80058e0 <slalomB>
		MF2.FLAG.TEMP = 0;
 8006b76:	4a32      	ldr	r2, [pc, #200]	; (8006c40 <slalom_R90+0x2b8>)
 8006b78:	8813      	ldrh	r3, [r2, #0]
 8006b7a:	f36f 2349 	bfc	r3, #9, #1
 8006b7e:	8013      	strh	r3, [r2, #0]
 8006b80:	e042      	b.n	8006c08 <slalom_R90+0x280>
	}else if(run_mode == 6){
 8006b82:	4b27      	ldr	r3, [pc, #156]	; (8006c20 <slalom_R90+0x298>)
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b06      	cmp	r3, #6
 8006b8a:	d13d      	bne.n	8006c08 <slalom_R90+0x280>
		MF2.FLAG.TEMP = 1;
 8006b8c:	4a2c      	ldr	r2, [pc, #176]	; (8006c40 <slalom_R90+0x2b8>)
 8006b8e:	8813      	ldrh	r3, [r2, #0]
 8006b90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b94:	8013      	strh	r3, [r2, #0]
		slalomF(10000, SPEED_5, SLALOM_5_OFFSET_F, SLALOM_5_WALL_FL, SLALOM_5_WALL_FR);
 8006b96:	23a0      	movs	r3, #160	; 0xa0
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006b9e:	2203      	movs	r2, #3
 8006ba0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006ba4:	f242 7010 	movw	r0, #10000	; 0x2710
 8006ba8:	f7fe fcc8 	bl	800553c <slalomF>
		MF2.FLAG.TEMP = 0;
 8006bac:	4a24      	ldr	r2, [pc, #144]	; (8006c40 <slalom_R90+0x2b8>)
 8006bae:	8813      	ldrh	r3, [r2, #0]
 8006bb0:	f36f 2349 	bfc	r3, #9, #1
 8006bb4:	8013      	strh	r3, [r2, #0]
		slalomR(-SLALOM_5_DEGACCEL, -SLALOM_5_OMEGA, -20, SPEED_5);
 8006bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006bba:	f06f 0213 	mvn.w	r2, #19
 8006bbe:	4921      	ldr	r1, [pc, #132]	; (8006c44 <slalom_R90+0x2bc>)
 8006bc0:	4821      	ldr	r0, [pc, #132]	; (8006c48 <slalom_R90+0x2c0>)
 8006bc2:	f7fe fd33 	bl	800562c <slalomR>

		if(!MF.FLAG.XDIR){
 8006bc6:	4b19      	ldr	r3, [pc, #100]	; (8006c2c <slalom_R90+0x2a4>)
 8006bc8:	881b      	ldrh	r3, [r3, #0]
 8006bca:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d104      	bne.n	8006bde <slalom_R90+0x256>
			turn_dir(DIR_TURN_R90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006bd4:	2101      	movs	r1, #1
 8006bd6:	2001      	movs	r0, #1
 8006bd8:	f009 fc12 	bl	8010400 <turn_dir>
 8006bdc:	e003      	b.n	8006be6 <slalom_R90+0x25e>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006bde:	2103      	movs	r1, #3
 8006be0:	2002      	movs	r0, #2
 8006be2:	f009 fc0d 	bl	8010400 <turn_dir>
		}
		MF2.FLAG.TEMP = 1;
 8006be6:	4a16      	ldr	r2, [pc, #88]	; (8006c40 <slalom_R90+0x2b8>)
 8006be8:	8813      	ldrh	r3, [r2, #0]
 8006bea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006bee:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, SLALOM_5_OFFSET_B);
 8006bf0:	226e      	movs	r2, #110	; 0x6e
 8006bf2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006bf6:	f242 7010 	movw	r0, #10000	; 0x2710
 8006bfa:	f7fe fe71 	bl	80058e0 <slalomB>
		MF2.FLAG.TEMP = 0;
 8006bfe:	4a10      	ldr	r2, [pc, #64]	; (8006c40 <slalom_R90+0x2b8>)
 8006c00:	8813      	ldrh	r3, [r2, #0]
 8006c02:	f36f 2349 	bfc	r3, #9, #1
 8006c06:	8013      	strh	r3, [r2, #0]
	}
	if(!MF.FLAG.SCND)get_wall_info();									//a壁情報を取得，片壁制御の有効・無効の判断
 8006c08:	4b08      	ldr	r3, [pc, #32]	; (8006c2c <slalom_R90+0x2a4>)
 8006c0a:	881b      	ldrh	r3, [r3, #0]
 8006c0c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <slalom_R90+0x292>
 8006c16:	f00b fa13 	bl	8012040 <get_wall_info>
}
 8006c1a:	bf00      	nop
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	20000456 	.word	0x20000456
 8006c24:	fffffdda 	.word	0xfffffdda
 8006c28:	fffff060 	.word	0xfffff060
 8006c2c:	20000fa8 	.word	0x20000fa8
 8006c30:	fffffc7c 	.word	0xfffffc7c
 8006c34:	ffffd120 	.word	0xffffd120
 8006c38:	fffffb50 	.word	0xfffffb50
 8006c3c:	ffffa240 	.word	0xffffa240
 8006c40:	20000fa4 	.word	0x20000fa4
 8006c44:	fffffc18 	.word	0xfffffc18
 8006c48:	ffff3cb0 	.word	0xffff3cb0

08006c4c <slalom_L90>:
//slalom_L90
// スラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_L90(void){
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af02      	add	r7, sp, #8
	full_led_write1(YELLOW);
 8006c52:	2006      	movs	r0, #6
 8006c54:	f00b fa68 	bl	8012128 <full_led_write1>
	if(run_mode == 1){
 8006c58:	4ba5      	ldr	r3, [pc, #660]	; (8006ef0 <slalom_L90+0x2a4>)
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d128      	bne.n	8006cb4 <slalom_L90+0x68>
		slalomF(10000, SPEED_1, SLALOM_OFFSET_F, SLALOM_WALL_FL, SLALOM_WALL_FR);
 8006c62:	23fa      	movs	r3, #250	; 0xfa
 8006c64:	9300      	str	r3, [sp, #0]
 8006c66:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006c6a:	2212      	movs	r2, #18
 8006c6c:	21c8      	movs	r1, #200	; 0xc8
 8006c6e:	f242 7010 	movw	r0, #10000	; 0x2710
 8006c72:	f7fe fc63 	bl	800553c <slalomF>
		slalomR(SLALOM_DEGACCEL, SLALOM_OMEGA, 90, SPEED_1);
 8006c76:	23c8      	movs	r3, #200	; 0xc8
 8006c78:	225a      	movs	r2, #90	; 0x5a
 8006c7a:	f240 2126 	movw	r1, #550	; 0x226
 8006c7e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8006c82:	f7fe fcd3 	bl	800562c <slalomR>

		if(!MF.FLAG.XDIR){
 8006c86:	4b9b      	ldr	r3, [pc, #620]	; (8006ef4 <slalom_L90+0x2a8>)
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d104      	bne.n	8006c9e <slalom_L90+0x52>
			turn_dir(DIR_TURN_L90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006c94:	2101      	movs	r1, #1
 8006c96:	20ff      	movs	r0, #255	; 0xff
 8006c98:	f009 fbb2 	bl	8010400 <turn_dir>
 8006c9c:	e003      	b.n	8006ca6 <slalom_L90+0x5a>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006c9e:	2103      	movs	r1, #3
 8006ca0:	20fe      	movs	r0, #254	; 0xfe
 8006ca2:	f009 fbad 	bl	8010400 <turn_dir>
		}
		slalomB(10000, SPEED_1, SLALOM_OFFSET_B);
 8006ca6:	2219      	movs	r2, #25
 8006ca8:	21c8      	movs	r1, #200	; 0xc8
 8006caa:	f242 7010 	movw	r0, #10000	; 0x2710
 8006cae:	f7fe fe17 	bl	80058e0 <slalomB>
 8006cb2:	e111      	b.n	8006ed8 <slalom_L90+0x28c>
	}else if(run_mode == 2){
 8006cb4:	4b8e      	ldr	r3, [pc, #568]	; (8006ef0 <slalom_L90+0x2a4>)
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d12b      	bne.n	8006d16 <slalom_L90+0xca>
		slalomF(10000, SPEED_2, SLALOM_2_OFFSET_F, SLALOM_2_WALL_FL, SLALOM_2_WALL_FR);
 8006cbe:	23fa      	movs	r3, #250	; 0xfa
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006cc6:	2208      	movs	r2, #8
 8006cc8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006ccc:	f242 7010 	movw	r0, #10000	; 0x2710
 8006cd0:	f7fe fc34 	bl	800553c <slalomF>
		slalomR(SLALOM_2_DEGACCEL, SLALOM_2_OMEGA, 90, SPEED_2);
 8006cd4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006cd8:	225a      	movs	r2, #90	; 0x5a
 8006cda:	f240 2126 	movw	r1, #550	; 0x226
 8006cde:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8006ce2:	f7fe fca3 	bl	800562c <slalomR>

		if(!MF.FLAG.XDIR){
 8006ce6:	4b83      	ldr	r3, [pc, #524]	; (8006ef4 <slalom_L90+0x2a8>)
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d104      	bne.n	8006cfe <slalom_L90+0xb2>
			turn_dir(DIR_TURN_L90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006cf4:	2101      	movs	r1, #1
 8006cf6:	20ff      	movs	r0, #255	; 0xff
 8006cf8:	f009 fb82 	bl	8010400 <turn_dir>
 8006cfc:	e003      	b.n	8006d06 <slalom_L90+0xba>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006cfe:	2103      	movs	r1, #3
 8006d00:	20fe      	movs	r0, #254	; 0xfe
 8006d02:	f009 fb7d 	bl	8010400 <turn_dir>
		}
		slalomB(10000, SPEED_2, SLALOM_2_OFFSET_B);
 8006d06:	2225      	movs	r2, #37	; 0x25
 8006d08:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006d0c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d10:	f7fe fde6 	bl	80058e0 <slalomB>
 8006d14:	e0e0      	b.n	8006ed8 <slalom_L90+0x28c>
	}else if(run_mode == 3){
 8006d16:	4b76      	ldr	r3, [pc, #472]	; (8006ef0 <slalom_L90+0x2a4>)
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b03      	cmp	r3, #3
 8006d1e:	d12b      	bne.n	8006d78 <slalom_L90+0x12c>
		slalomF(10000, SPEED_3, SLALOM_3_OFFSET_F, SLALOM_3_WALL_FL, SLALOM_3_WALL_FR);
 8006d20:	23f0      	movs	r3, #240	; 0xf0
 8006d22:	9300      	str	r3, [sp, #0]
 8006d24:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006d28:	220a      	movs	r2, #10
 8006d2a:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006d2e:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d32:	f7fe fc03 	bl	800553c <slalomF>
		slalomR(SLALOM_3_DEGACCEL, SLALOM_3_OMEGA, 80, SPEED_3);
 8006d36:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006d3a:	2250      	movs	r2, #80	; 0x50
 8006d3c:	f44f 7161 	mov.w	r1, #900	; 0x384
 8006d40:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 8006d44:	f7fe fc72 	bl	800562c <slalomR>

		if(!MF.FLAG.XDIR){
 8006d48:	4b6a      	ldr	r3, [pc, #424]	; (8006ef4 <slalom_L90+0x2a8>)
 8006d4a:	881b      	ldrh	r3, [r3, #0]
 8006d4c:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d104      	bne.n	8006d60 <slalom_L90+0x114>
			turn_dir(DIR_TURN_L90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006d56:	2101      	movs	r1, #1
 8006d58:	20ff      	movs	r0, #255	; 0xff
 8006d5a:	f009 fb51 	bl	8010400 <turn_dir>
 8006d5e:	e003      	b.n	8006d68 <slalom_L90+0x11c>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006d60:	2103      	movs	r1, #3
 8006d62:	20fe      	movs	r0, #254	; 0xfe
 8006d64:	f009 fb4c 	bl	8010400 <turn_dir>
		}
		slalomB(10000, SPEED_3, SLALOM_3_OFFSET_B);
 8006d68:	223c      	movs	r2, #60	; 0x3c
 8006d6a:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006d6e:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d72:	f7fe fdb5 	bl	80058e0 <slalomB>
 8006d76:	e0af      	b.n	8006ed8 <slalom_L90+0x28c>
	}else if(run_mode == 4){
 8006d78:	4b5d      	ldr	r3, [pc, #372]	; (8006ef0 <slalom_L90+0x2a4>)
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	2b04      	cmp	r3, #4
 8006d80:	d12b      	bne.n	8006dda <slalom_L90+0x18e>
		slalomF(10000, SPEED_4, SLALOM_4_OFFSET_F, SLALOM_4_WALL_FL, SLALOM_4_WALL_FR);
 8006d82:	23be      	movs	r3, #190	; 0xbe
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	f44f 73be 	mov.w	r3, #380	; 0x17c
 8006d8a:	2205      	movs	r2, #5
 8006d8c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006d90:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d94:	f7fe fbd2 	bl	800553c <slalomF>
		slalomR(SLALOM_4_DEGACCEL, SLALOM_4_OMEGA, 60, SPEED_4);
 8006d98:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006d9c:	223c      	movs	r2, #60	; 0x3c
 8006d9e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006da2:	f645 50c0 	movw	r0, #24000	; 0x5dc0
 8006da6:	f7fe fc41 	bl	800562c <slalomR>

		if(!MF.FLAG.XDIR){
 8006daa:	4b52      	ldr	r3, [pc, #328]	; (8006ef4 <slalom_L90+0x2a8>)
 8006dac:	881b      	ldrh	r3, [r3, #0]
 8006dae:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d104      	bne.n	8006dc2 <slalom_L90+0x176>
			turn_dir(DIR_TURN_L90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006db8:	2101      	movs	r1, #1
 8006dba:	20ff      	movs	r0, #255	; 0xff
 8006dbc:	f009 fb20 	bl	8010400 <turn_dir>
 8006dc0:	e003      	b.n	8006dca <slalom_L90+0x17e>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006dc2:	2103      	movs	r1, #3
 8006dc4:	20fe      	movs	r0, #254	; 0xfe
 8006dc6:	f009 fb1b 	bl	8010400 <turn_dir>
		}
		slalomB(10000, SPEED_4, SLALOM_4_OFFSET_B);
 8006dca:	225a      	movs	r2, #90	; 0x5a
 8006dcc:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006dd0:	f242 7010 	movw	r0, #10000	; 0x2710
 8006dd4:	f7fe fd84 	bl	80058e0 <slalomB>
 8006dd8:	e07e      	b.n	8006ed8 <slalom_L90+0x28c>
	}else if(run_mode == 5){
 8006dda:	4b45      	ldr	r3, [pc, #276]	; (8006ef0 <slalom_L90+0x2a4>)
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b05      	cmp	r3, #5
 8006de2:	d135      	bne.n	8006e50 <slalom_L90+0x204>
		MF2.FLAG.TEMP = 1;
 8006de4:	4a44      	ldr	r2, [pc, #272]	; (8006ef8 <slalom_L90+0x2ac>)
 8006de6:	8813      	ldrh	r3, [r2, #0]
 8006de8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006dec:	8013      	strh	r3, [r2, #0]
		slalomF(10000, SPEED_5, SLALOM_5_OFFSET_F, SLALOM_5_WALL_FL, SLALOM_5_WALL_FR);
 8006dee:	23a0      	movs	r3, #160	; 0xa0
 8006df0:	9300      	str	r3, [sp, #0]
 8006df2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006df6:	2203      	movs	r2, #3
 8006df8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006dfc:	f242 7010 	movw	r0, #10000	; 0x2710
 8006e00:	f7fe fb9c 	bl	800553c <slalomF>
		slalomR(SLALOM_5_DEGACCEL, SLALOM_5_OMEGA, 20, SPEED_5);
 8006e04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006e08:	2214      	movs	r2, #20
 8006e0a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006e0e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006e12:	f7fe fc0b 	bl	800562c <slalomR>

		if(!MF.FLAG.XDIR){
 8006e16:	4b37      	ldr	r3, [pc, #220]	; (8006ef4 <slalom_L90+0x2a8>)
 8006e18:	881b      	ldrh	r3, [r3, #0]
 8006e1a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d104      	bne.n	8006e2e <slalom_L90+0x1e2>
			turn_dir(DIR_TURN_L90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006e24:	2101      	movs	r1, #1
 8006e26:	20ff      	movs	r0, #255	; 0xff
 8006e28:	f009 faea 	bl	8010400 <turn_dir>
 8006e2c:	e003      	b.n	8006e36 <slalom_L90+0x1ea>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006e2e:	2103      	movs	r1, #3
 8006e30:	20fe      	movs	r0, #254	; 0xfe
 8006e32:	f009 fae5 	bl	8010400 <turn_dir>
		}
		slalomB(10000, SPEED_5, SLALOM_5_OFFSET_B);
 8006e36:	226e      	movs	r2, #110	; 0x6e
 8006e38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006e3c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006e40:	f7fe fd4e 	bl	80058e0 <slalomB>
		MF2.FLAG.TEMP = 0;
 8006e44:	4a2c      	ldr	r2, [pc, #176]	; (8006ef8 <slalom_L90+0x2ac>)
 8006e46:	8813      	ldrh	r3, [r2, #0]
 8006e48:	f36f 2349 	bfc	r3, #9, #1
 8006e4c:	8013      	strh	r3, [r2, #0]
 8006e4e:	e043      	b.n	8006ed8 <slalom_L90+0x28c>
	}else if(run_mode == 6){
 8006e50:	4b27      	ldr	r3, [pc, #156]	; (8006ef0 <slalom_L90+0x2a4>)
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2b06      	cmp	r3, #6
 8006e58:	d13e      	bne.n	8006ed8 <slalom_L90+0x28c>
		MF2.FLAG.TEMP = 1;
 8006e5a:	4a27      	ldr	r2, [pc, #156]	; (8006ef8 <slalom_L90+0x2ac>)
 8006e5c:	8813      	ldrh	r3, [r2, #0]
 8006e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e62:	8013      	strh	r3, [r2, #0]
		slalomF(10000, SPEED_5, SLALOM_5_OFFSET_F, SLALOM_5_WALL_FL, SLALOM_5_WALL_FR);
 8006e64:	23a0      	movs	r3, #160	; 0xa0
 8006e66:	9300      	str	r3, [sp, #0]
 8006e68:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006e6c:	2203      	movs	r2, #3
 8006e6e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006e72:	f242 7010 	movw	r0, #10000	; 0x2710
 8006e76:	f7fe fb61 	bl	800553c <slalomF>
		MF2.FLAG.TEMP = 0;
 8006e7a:	4a1f      	ldr	r2, [pc, #124]	; (8006ef8 <slalom_L90+0x2ac>)
 8006e7c:	8813      	ldrh	r3, [r2, #0]
 8006e7e:	f36f 2349 	bfc	r3, #9, #1
 8006e82:	8013      	strh	r3, [r2, #0]
		slalomR(SLALOM_5_DEGACCEL, SLALOM_5_OMEGA, 20, SPEED_5);
 8006e84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006e88:	2214      	movs	r2, #20
 8006e8a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006e8e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006e92:	f7fe fbcb 	bl	800562c <slalomR>

		if(!MF.FLAG.XDIR){
 8006e96:	4b17      	ldr	r3, [pc, #92]	; (8006ef4 <slalom_L90+0x2a8>)
 8006e98:	881b      	ldrh	r3, [r3, #0]
 8006e9a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d104      	bne.n	8006eae <slalom_L90+0x262>
			turn_dir(DIR_TURN_L90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006ea4:	2101      	movs	r1, #1
 8006ea6:	20ff      	movs	r0, #255	; 0xff
 8006ea8:	f009 faaa 	bl	8010400 <turn_dir>
 8006eac:	e003      	b.n	8006eb6 <slalom_L90+0x26a>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006eae:	2103      	movs	r1, #3
 8006eb0:	20fe      	movs	r0, #254	; 0xfe
 8006eb2:	f009 faa5 	bl	8010400 <turn_dir>
		}
		MF2.FLAG.TEMP = 1;
 8006eb6:	4a10      	ldr	r2, [pc, #64]	; (8006ef8 <slalom_L90+0x2ac>)
 8006eb8:	8813      	ldrh	r3, [r2, #0]
 8006eba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ebe:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, SLALOM_5_OFFSET_B);
 8006ec0:	226e      	movs	r2, #110	; 0x6e
 8006ec2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006ec6:	f242 7010 	movw	r0, #10000	; 0x2710
 8006eca:	f7fe fd09 	bl	80058e0 <slalomB>
		MF2.FLAG.TEMP = 0;
 8006ece:	4a0a      	ldr	r2, [pc, #40]	; (8006ef8 <slalom_L90+0x2ac>)
 8006ed0:	8813      	ldrh	r3, [r2, #0]
 8006ed2:	f36f 2349 	bfc	r3, #9, #1
 8006ed6:	8013      	strh	r3, [r2, #0]
	}
	if(!MF.FLAG.SCND)get_wall_info();									//a壁情報を取得，片壁制御の有効・無効の判断
 8006ed8:	4b06      	ldr	r3, [pc, #24]	; (8006ef4 <slalom_L90+0x2a8>)
 8006eda:	881b      	ldrh	r3, [r3, #0]
 8006edc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d101      	bne.n	8006eea <slalom_L90+0x29e>
 8006ee6:	f00b f8ab 	bl	8012040 <get_wall_info>
}
 8006eea:	bf00      	nop
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	20000456 	.word	0x20000456
 8006ef4:	20000fa8 	.word	0x20000fa8
 8006ef8:	20000fa4 	.word	0x20000fa4

08006efc <Lslalom_R90>:
//Lslalom_R90
// スラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R90(void){
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af02      	add	r7, sp, #8
	full_led_write1(PURPLE);
 8006f02:	2005      	movs	r0, #5
 8006f04:	f00b f910 	bl	8012128 <full_led_write1>
	if(run_mode == 1){
 8006f08:	4b8e      	ldr	r3, [pc, #568]	; (8007144 <Lslalom_R90+0x248>)
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d127      	bne.n	8006f62 <Lslalom_R90+0x66>
		slalomF(10000, SPEED_1, LSLALOM_OFFSET_F, LSLALOM_WALL_FL, LSLALOM_WALL_FR);
 8006f12:	2364      	movs	r3, #100	; 0x64
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	23c8      	movs	r3, #200	; 0xc8
 8006f18:	222d      	movs	r2, #45	; 0x2d
 8006f1a:	21c8      	movs	r1, #200	; 0xc8
 8006f1c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f20:	f7fe fb0c 	bl	800553c <slalomF>
		slalomR(-LSLALOM_DEGACCEL, -LSLALOM_OMEGA, -90, SPEED_1);
 8006f24:	23c8      	movs	r3, #200	; 0xc8
 8006f26:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8006f2a:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 8006f2e:	4886      	ldr	r0, [pc, #536]	; (8007148 <Lslalom_R90+0x24c>)
 8006f30:	f7fe fb7c 	bl	800562c <slalomR>

		if(!MF.FLAG.XDIR){
 8006f34:	4b85      	ldr	r3, [pc, #532]	; (800714c <Lslalom_R90+0x250>)
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d104      	bne.n	8006f4c <Lslalom_R90+0x50>
			turn_dir(DIR_TURN_R90, 1);										//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006f42:	2101      	movs	r1, #1
 8006f44:	2001      	movs	r0, #1
 8006f46:	f009 fa5b 	bl	8010400 <turn_dir>
 8006f4a:	e003      	b.n	8006f54 <Lslalom_R90+0x58>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006f4c:	2103      	movs	r1, #3
 8006f4e:	2002      	movs	r0, #2
 8006f50:	f009 fa56 	bl	8010400 <turn_dir>
		}
		slalomB(10000, SPEED_1, LSLALOM_OFFSET_B);
 8006f54:	2235      	movs	r2, #53	; 0x35
 8006f56:	21c8      	movs	r1, #200	; 0xc8
 8006f58:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f5c:	f7fe fcc0 	bl	80058e0 <slalomB>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_6, LSLALOM_6_OFFSET_B);
	}
}
 8006f60:	e0ec      	b.n	800713c <Lslalom_R90+0x240>
	}else if(run_mode == 2){
 8006f62:	4b78      	ldr	r3, [pc, #480]	; (8007144 <Lslalom_R90+0x248>)
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	d12a      	bne.n	8006fc2 <Lslalom_R90+0xc6>
		slalomF(10000, SPEED_2, LSLALOM_2_OFFSET_F, LSLALOM_2_WALL_FL, LSLALOM_2_WALL_FR);
 8006f6c:	2364      	movs	r3, #100	; 0x64
 8006f6e:	9300      	str	r3, [sp, #0]
 8006f70:	23c8      	movs	r3, #200	; 0xc8
 8006f72:	222d      	movs	r2, #45	; 0x2d
 8006f74:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006f78:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f7c:	f7fe fade 	bl	800553c <slalomF>
		slalomR(-LSLALOM_2_DEGACCEL, -LSLALOM_2_OMEGA, -90, SPEED_2);
 8006f80:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006f84:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8006f88:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 8006f8c:	486e      	ldr	r0, [pc, #440]	; (8007148 <Lslalom_R90+0x24c>)
 8006f8e:	f7fe fb4d 	bl	800562c <slalomR>
		if(!MF.FLAG.XDIR){
 8006f92:	4b6e      	ldr	r3, [pc, #440]	; (800714c <Lslalom_R90+0x250>)
 8006f94:	881b      	ldrh	r3, [r3, #0]
 8006f96:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d104      	bne.n	8006faa <Lslalom_R90+0xae>
			turn_dir(DIR_TURN_R90, 1);										//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	2001      	movs	r0, #1
 8006fa4:	f009 fa2c 	bl	8010400 <turn_dir>
 8006fa8:	e003      	b.n	8006fb2 <Lslalom_R90+0xb6>
			turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006faa:	2103      	movs	r1, #3
 8006fac:	2002      	movs	r0, #2
 8006fae:	f009 fa27 	bl	8010400 <turn_dir>
		slalomB(10000, SPEED_2, LSLALOM_2_OFFSET_B);
 8006fb2:	2235      	movs	r2, #53	; 0x35
 8006fb4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006fb8:	f242 7010 	movw	r0, #10000	; 0x2710
 8006fbc:	f7fe fc90 	bl	80058e0 <slalomB>
}
 8006fc0:	e0bc      	b.n	800713c <Lslalom_R90+0x240>
	}else if(run_mode == 3){
 8006fc2:	4b60      	ldr	r3, [pc, #384]	; (8007144 <Lslalom_R90+0x248>)
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b03      	cmp	r3, #3
 8006fca:	d129      	bne.n	8007020 <Lslalom_R90+0x124>
		slalomF(10000, SPEED_3, LSLALOM_3_OFFSET_F, LSLALOM_3_WALL_FL, LSLALOM_3_WALL_FR);
 8006fcc:	2378      	movs	r3, #120	; 0x78
 8006fce:	9300      	str	r3, [sp, #0]
 8006fd0:	23f0      	movs	r3, #240	; 0xf0
 8006fd2:	223c      	movs	r2, #60	; 0x3c
 8006fd4:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006fd8:	f242 7010 	movw	r0, #10000	; 0x2710
 8006fdc:	f7fe faae 	bl	800553c <slalomF>
		slalomR(-LSLALOM_3_DEGACCEL, -LSLALOM_3_OMEGA, -90, SPEED_3);
 8006fe0:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006fe4:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8006fe8:	4959      	ldr	r1, [pc, #356]	; (8007150 <Lslalom_R90+0x254>)
 8006fea:	485a      	ldr	r0, [pc, #360]	; (8007154 <Lslalom_R90+0x258>)
 8006fec:	f7fe fb1e 	bl	800562c <slalomR>
		if(!MF.FLAG.XDIR){
 8006ff0:	4b56      	ldr	r3, [pc, #344]	; (800714c <Lslalom_R90+0x250>)
 8006ff2:	881b      	ldrh	r3, [r3, #0]
 8006ff4:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d104      	bne.n	8007008 <Lslalom_R90+0x10c>
			turn_dir(DIR_TURN_R90, 1);										//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006ffe:	2101      	movs	r1, #1
 8007000:	2001      	movs	r0, #1
 8007002:	f009 f9fd 	bl	8010400 <turn_dir>
 8007006:	e003      	b.n	8007010 <Lslalom_R90+0x114>
			turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007008:	2103      	movs	r1, #3
 800700a:	2002      	movs	r0, #2
 800700c:	f009 f9f8 	bl	8010400 <turn_dir>
		slalomB(10000, SPEED_3, LSLALOM_3_OFFSET_B);
 8007010:	2258      	movs	r2, #88	; 0x58
 8007012:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007016:	f242 7010 	movw	r0, #10000	; 0x2710
 800701a:	f7fe fc61 	bl	80058e0 <slalomB>
}
 800701e:	e08d      	b.n	800713c <Lslalom_R90+0x240>
	}else if(run_mode == 4){
 8007020:	4b48      	ldr	r3, [pc, #288]	; (8007144 <Lslalom_R90+0x248>)
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	b2db      	uxtb	r3, r3
 8007026:	2b04      	cmp	r3, #4
 8007028:	d12a      	bne.n	8007080 <Lslalom_R90+0x184>
		slalomF(10000, SPEED_4, LSLALOM_4_OFFSET_F, LSLALOM_4_WALL_FL, LSLALOM_4_WALL_FR);
 800702a:	2382      	movs	r3, #130	; 0x82
 800702c:	9300      	str	r3, [sp, #0]
 800702e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007032:	222b      	movs	r2, #43	; 0x2b
 8007034:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007038:	f242 7010 	movw	r0, #10000	; 0x2710
 800703c:	f7fe fa7e 	bl	800553c <slalomF>
		slalomR(-LSLALOM_4_DEGACCEL, -LSLALOM_4_OMEGA, -85, SPEED_4);
 8007040:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007044:	f06f 0254 	mvn.w	r2, #84	; 0x54
 8007048:	4943      	ldr	r1, [pc, #268]	; (8007158 <Lslalom_R90+0x25c>)
 800704a:	4844      	ldr	r0, [pc, #272]	; (800715c <Lslalom_R90+0x260>)
 800704c:	f7fe faee 	bl	800562c <slalomR>
		if(!MF.FLAG.XDIR){
 8007050:	4b3e      	ldr	r3, [pc, #248]	; (800714c <Lslalom_R90+0x250>)
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007058:	b2db      	uxtb	r3, r3
 800705a:	2b00      	cmp	r3, #0
 800705c:	d104      	bne.n	8007068 <Lslalom_R90+0x16c>
			turn_dir(DIR_TURN_R90, 1);										//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800705e:	2101      	movs	r1, #1
 8007060:	2001      	movs	r0, #1
 8007062:	f009 f9cd 	bl	8010400 <turn_dir>
 8007066:	e003      	b.n	8007070 <Lslalom_R90+0x174>
			turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007068:	2103      	movs	r1, #3
 800706a:	2002      	movs	r0, #2
 800706c:	f009 f9c8 	bl	8010400 <turn_dir>
		slalomB(10000, SPEED_4, LSLALOM_4_OFFSET_B);
 8007070:	225a      	movs	r2, #90	; 0x5a
 8007072:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007076:	f242 7010 	movw	r0, #10000	; 0x2710
 800707a:	f7fe fc31 	bl	80058e0 <slalomB>
}
 800707e:	e05d      	b.n	800713c <Lslalom_R90+0x240>
	}else if(run_mode == 5){
 8007080:	4b30      	ldr	r3, [pc, #192]	; (8007144 <Lslalom_R90+0x248>)
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b05      	cmp	r3, #5
 8007088:	d12a      	bne.n	80070e0 <Lslalom_R90+0x1e4>
		slalomF(10000, SPEED_5, LSLALOM_5_OFFSET_F, LSLALOM_5_WALL_FL, LSLALOM_5_WALL_FR);
 800708a:	2396      	movs	r3, #150	; 0x96
 800708c:	9300      	str	r3, [sp, #0]
 800708e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8007092:	2232      	movs	r2, #50	; 0x32
 8007094:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007098:	f242 7010 	movw	r0, #10000	; 0x2710
 800709c:	f7fe fa4e 	bl	800553c <slalomF>
		slalomR(-LSLALOM_5_DEGACCEL, -LSLALOM_5_OMEGA, -80, SPEED_5);
 80070a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80070a4:	f06f 024f 	mvn.w	r2, #79	; 0x4f
 80070a8:	492d      	ldr	r1, [pc, #180]	; (8007160 <Lslalom_R90+0x264>)
 80070aa:	482e      	ldr	r0, [pc, #184]	; (8007164 <Lslalom_R90+0x268>)
 80070ac:	f7fe fabe 	bl	800562c <slalomR>
		if(!MF.FLAG.XDIR){
 80070b0:	4b26      	ldr	r3, [pc, #152]	; (800714c <Lslalom_R90+0x250>)
 80070b2:	881b      	ldrh	r3, [r3, #0]
 80070b4:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d104      	bne.n	80070c8 <Lslalom_R90+0x1cc>
			turn_dir(DIR_TURN_R90, 1);										//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80070be:	2101      	movs	r1, #1
 80070c0:	2001      	movs	r0, #1
 80070c2:	f009 f99d 	bl	8010400 <turn_dir>
 80070c6:	e003      	b.n	80070d0 <Lslalom_R90+0x1d4>
			turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80070c8:	2103      	movs	r1, #3
 80070ca:	2002      	movs	r0, #2
 80070cc:	f009 f998 	bl	8010400 <turn_dir>
		slalomB(10000, SPEED_5, LSLALOM_5_OFFSET_B);
 80070d0:	226e      	movs	r2, #110	; 0x6e
 80070d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80070d6:	f242 7010 	movw	r0, #10000	; 0x2710
 80070da:	f7fe fc01 	bl	80058e0 <slalomB>
}
 80070de:	e02d      	b.n	800713c <Lslalom_R90+0x240>
	}else if(run_mode == 6){
 80070e0:	4b18      	ldr	r3, [pc, #96]	; (8007144 <Lslalom_R90+0x248>)
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b06      	cmp	r3, #6
 80070e8:	d128      	bne.n	800713c <Lslalom_R90+0x240>
		slalomF(10000, SPEED_6, LSLALOM_6_OFFSET_F, LSLALOM_6_WALL_FL, LSLALOM_6_WALL_FR);
 80070ea:	2382      	movs	r3, #130	; 0x82
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	23fa      	movs	r3, #250	; 0xfa
 80070f0:	2211      	movs	r2, #17
 80070f2:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80070f6:	f242 7010 	movw	r0, #10000	; 0x2710
 80070fa:	f7fe fa1f 	bl	800553c <slalomF>
		slalomR(-LSLALOM_6_DEGACCEL, -LSLALOM_6_OMEGA, -70, SPEED_6);
 80070fe:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8007102:	f06f 0245 	mvn.w	r2, #69	; 0x45
 8007106:	4916      	ldr	r1, [pc, #88]	; (8007160 <Lslalom_R90+0x264>)
 8007108:	4816      	ldr	r0, [pc, #88]	; (8007164 <Lslalom_R90+0x268>)
 800710a:	f7fe fa8f 	bl	800562c <slalomR>
		if(!MF.FLAG.XDIR){
 800710e:	4b0f      	ldr	r3, [pc, #60]	; (800714c <Lslalom_R90+0x250>)
 8007110:	881b      	ldrh	r3, [r3, #0]
 8007112:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007116:	b2db      	uxtb	r3, r3
 8007118:	2b00      	cmp	r3, #0
 800711a:	d104      	bne.n	8007126 <Lslalom_R90+0x22a>
			turn_dir(DIR_TURN_R90, 1);										//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800711c:	2101      	movs	r1, #1
 800711e:	2001      	movs	r0, #1
 8007120:	f009 f96e 	bl	8010400 <turn_dir>
 8007124:	e003      	b.n	800712e <Lslalom_R90+0x232>
			turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007126:	2103      	movs	r1, #3
 8007128:	2002      	movs	r0, #2
 800712a:	f009 f969 	bl	8010400 <turn_dir>
		slalomB(10000, SPEED_6, LSLALOM_6_OFFSET_B);
 800712e:	2278      	movs	r2, #120	; 0x78
 8007130:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007134:	f242 7010 	movw	r0, #10000	; 0x2710
 8007138:	f7fe fbd2 	bl	80058e0 <slalomB>
}
 800713c:	bf00      	nop
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	20000456 	.word	0x20000456
 8007148:	fffff830 	.word	0xfffff830
 800714c:	20000fa8 	.word	0x20000fa8
 8007150:	fffffe70 	.word	0xfffffe70
 8007154:	fffff060 	.word	0xfffff060
 8007158:	fffffda8 	.word	0xfffffda8
 800715c:	ffffee6c 	.word	0xffffee6c
 8007160:	fffffce0 	.word	0xfffffce0
 8007164:	ffffe0c0 	.word	0xffffe0c0

08007168 <Lslalom_L90>:
//Lslalom_L90
// 大回りスラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L90(void){
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af02      	add	r7, sp, #8
	full_led_write1(YELLOW);
 800716e:	2006      	movs	r0, #6
 8007170:	f00a ffda 	bl	8012128 <full_led_write1>
	if(run_mode == 1){
 8007174:	4b8f      	ldr	r3, [pc, #572]	; (80073b4 <Lslalom_L90+0x24c>)
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b01      	cmp	r3, #1
 800717c:	d126      	bne.n	80071cc <Lslalom_L90+0x64>
		slalomF(10000, SPEED_1, LSLALOM_OFFSET_F, LSLALOM_WALL_FL, LSLALOM_WALL_FR);
 800717e:	2364      	movs	r3, #100	; 0x64
 8007180:	9300      	str	r3, [sp, #0]
 8007182:	23c8      	movs	r3, #200	; 0xc8
 8007184:	222d      	movs	r2, #45	; 0x2d
 8007186:	21c8      	movs	r1, #200	; 0xc8
 8007188:	f242 7010 	movw	r0, #10000	; 0x2710
 800718c:	f7fe f9d6 	bl	800553c <slalomF>
		slalomR(LSLALOM_DEGACCEL, LSLALOM_OMEGA, 90, SPEED_1);
 8007190:	23c8      	movs	r3, #200	; 0xc8
 8007192:	225a      	movs	r2, #90	; 0x5a
 8007194:	21c8      	movs	r1, #200	; 0xc8
 8007196:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800719a:	f7fe fa47 	bl	800562c <slalomR>

		if(!MF.FLAG.XDIR){
 800719e:	4b86      	ldr	r3, [pc, #536]	; (80073b8 <Lslalom_L90+0x250>)
 80071a0:	881b      	ldrh	r3, [r3, #0]
 80071a2:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d104      	bne.n	80071b6 <Lslalom_L90+0x4e>
			turn_dir(DIR_TURN_L90, 1);										//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80071ac:	2101      	movs	r1, #1
 80071ae:	20ff      	movs	r0, #255	; 0xff
 80071b0:	f009 f926 	bl	8010400 <turn_dir>
 80071b4:	e003      	b.n	80071be <Lslalom_L90+0x56>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80071b6:	2103      	movs	r1, #3
 80071b8:	20fe      	movs	r0, #254	; 0xfe
 80071ba:	f009 f921 	bl	8010400 <turn_dir>
		}
		slalomB(10000, SPEED_1, LSLALOM_OFFSET_B);
 80071be:	2235      	movs	r2, #53	; 0x35
 80071c0:	21c8      	movs	r1, #200	; 0xc8
 80071c2:	f242 7010 	movw	r0, #10000	; 0x2710
 80071c6:	f7fe fb8b 	bl	80058e0 <slalomB>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_6, LSLALOM_6_OFFSET_B);
	}
}
 80071ca:	e0ef      	b.n	80073ac <Lslalom_L90+0x244>
	}else if(run_mode == 2){
 80071cc:	4b79      	ldr	r3, [pc, #484]	; (80073b4 <Lslalom_L90+0x24c>)
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d129      	bne.n	800722a <Lslalom_L90+0xc2>
		slalomF(10000, SPEED_2, LSLALOM_2_OFFSET_F, LSLALOM_2_WALL_FL, LSLALOM_2_WALL_FR);
 80071d6:	2364      	movs	r3, #100	; 0x64
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	23c8      	movs	r3, #200	; 0xc8
 80071dc:	222d      	movs	r2, #45	; 0x2d
 80071de:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80071e2:	f242 7010 	movw	r0, #10000	; 0x2710
 80071e6:	f7fe f9a9 	bl	800553c <slalomF>
		slalomR(LSLALOM_2_DEGACCEL, LSLALOM_2_OMEGA, 90, SPEED_2);
 80071ea:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80071ee:	225a      	movs	r2, #90	; 0x5a
 80071f0:	21c8      	movs	r1, #200	; 0xc8
 80071f2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80071f6:	f7fe fa19 	bl	800562c <slalomR>
		if(!MF.FLAG.XDIR){
 80071fa:	4b6f      	ldr	r3, [pc, #444]	; (80073b8 <Lslalom_L90+0x250>)
 80071fc:	881b      	ldrh	r3, [r3, #0]
 80071fe:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007202:	b2db      	uxtb	r3, r3
 8007204:	2b00      	cmp	r3, #0
 8007206:	d104      	bne.n	8007212 <Lslalom_L90+0xaa>
			turn_dir(DIR_TURN_L90, 1);										//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007208:	2101      	movs	r1, #1
 800720a:	20ff      	movs	r0, #255	; 0xff
 800720c:	f009 f8f8 	bl	8010400 <turn_dir>
 8007210:	e003      	b.n	800721a <Lslalom_L90+0xb2>
			turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007212:	2103      	movs	r1, #3
 8007214:	20fe      	movs	r0, #254	; 0xfe
 8007216:	f009 f8f3 	bl	8010400 <turn_dir>
		slalomB(10000, SPEED_2, LSLALOM_2_OFFSET_B);
 800721a:	2235      	movs	r2, #53	; 0x35
 800721c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007220:	f242 7010 	movw	r0, #10000	; 0x2710
 8007224:	f7fe fb5c 	bl	80058e0 <slalomB>
}
 8007228:	e0c0      	b.n	80073ac <Lslalom_L90+0x244>
	}else if(run_mode == 3){
 800722a:	4b62      	ldr	r3, [pc, #392]	; (80073b4 <Lslalom_L90+0x24c>)
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	b2db      	uxtb	r3, r3
 8007230:	2b03      	cmp	r3, #3
 8007232:	d12a      	bne.n	800728a <Lslalom_L90+0x122>
		slalomF(10000, SPEED_3, LSLALOM_3_OFFSET_F, LSLALOM_3_WALL_FL, LSLALOM_3_WALL_FR);
 8007234:	2378      	movs	r3, #120	; 0x78
 8007236:	9300      	str	r3, [sp, #0]
 8007238:	23f0      	movs	r3, #240	; 0xf0
 800723a:	223c      	movs	r2, #60	; 0x3c
 800723c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007240:	f242 7010 	movw	r0, #10000	; 0x2710
 8007244:	f7fe f97a 	bl	800553c <slalomF>
		slalomR(LSLALOM_3_DEGACCEL, LSLALOM_3_OMEGA, 90, SPEED_3);
 8007248:	f44f 7316 	mov.w	r3, #600	; 0x258
 800724c:	225a      	movs	r2, #90	; 0x5a
 800724e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007252:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8007256:	f7fe f9e9 	bl	800562c <slalomR>
		if(!MF.FLAG.XDIR){
 800725a:	4b57      	ldr	r3, [pc, #348]	; (80073b8 <Lslalom_L90+0x250>)
 800725c:	881b      	ldrh	r3, [r3, #0]
 800725e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007262:	b2db      	uxtb	r3, r3
 8007264:	2b00      	cmp	r3, #0
 8007266:	d104      	bne.n	8007272 <Lslalom_L90+0x10a>
			turn_dir(DIR_TURN_L90, 1);										//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007268:	2101      	movs	r1, #1
 800726a:	20ff      	movs	r0, #255	; 0xff
 800726c:	f009 f8c8 	bl	8010400 <turn_dir>
 8007270:	e003      	b.n	800727a <Lslalom_L90+0x112>
			turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007272:	2103      	movs	r1, #3
 8007274:	20fe      	movs	r0, #254	; 0xfe
 8007276:	f009 f8c3 	bl	8010400 <turn_dir>
		slalomB(10000, SPEED_3, LSLALOM_3_OFFSET_B);
 800727a:	2258      	movs	r2, #88	; 0x58
 800727c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007280:	f242 7010 	movw	r0, #10000	; 0x2710
 8007284:	f7fe fb2c 	bl	80058e0 <slalomB>
}
 8007288:	e090      	b.n	80073ac <Lslalom_L90+0x244>
	}else if(run_mode == 4){
 800728a:	4b4a      	ldr	r3, [pc, #296]	; (80073b4 <Lslalom_L90+0x24c>)
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	b2db      	uxtb	r3, r3
 8007290:	2b04      	cmp	r3, #4
 8007292:	d12b      	bne.n	80072ec <Lslalom_L90+0x184>
		slalomF(10000, SPEED_4, LSLALOM_4_OFFSET_F, LSLALOM_4_WALL_FL, LSLALOM_4_WALL_FR);
 8007294:	2382      	movs	r3, #130	; 0x82
 8007296:	9300      	str	r3, [sp, #0]
 8007298:	f44f 7382 	mov.w	r3, #260	; 0x104
 800729c:	222b      	movs	r2, #43	; 0x2b
 800729e:	f44f 7148 	mov.w	r1, #800	; 0x320
 80072a2:	f242 7010 	movw	r0, #10000	; 0x2710
 80072a6:	f7fe f949 	bl	800553c <slalomF>
		slalomR(LSLALOM_4_DEGACCEL, LSLALOM_4_OMEGA, 85, SPEED_4);
 80072aa:	f44f 7348 	mov.w	r3, #800	; 0x320
 80072ae:	2255      	movs	r2, #85	; 0x55
 80072b0:	f44f 7116 	mov.w	r1, #600	; 0x258
 80072b4:	f241 1094 	movw	r0, #4500	; 0x1194
 80072b8:	f7fe f9b8 	bl	800562c <slalomR>
		if(!MF.FLAG.XDIR){
 80072bc:	4b3e      	ldr	r3, [pc, #248]	; (80073b8 <Lslalom_L90+0x250>)
 80072be:	881b      	ldrh	r3, [r3, #0]
 80072c0:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d104      	bne.n	80072d4 <Lslalom_L90+0x16c>
			turn_dir(DIR_TURN_L90, 1);										//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80072ca:	2101      	movs	r1, #1
 80072cc:	20ff      	movs	r0, #255	; 0xff
 80072ce:	f009 f897 	bl	8010400 <turn_dir>
 80072d2:	e003      	b.n	80072dc <Lslalom_L90+0x174>
			turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80072d4:	2103      	movs	r1, #3
 80072d6:	20fe      	movs	r0, #254	; 0xfe
 80072d8:	f009 f892 	bl	8010400 <turn_dir>
		slalomB(10000, SPEED_4, LSLALOM_4_OFFSET_B);
 80072dc:	225a      	movs	r2, #90	; 0x5a
 80072de:	f44f 7148 	mov.w	r1, #800	; 0x320
 80072e2:	f242 7010 	movw	r0, #10000	; 0x2710
 80072e6:	f7fe fafb 	bl	80058e0 <slalomB>
}
 80072ea:	e05f      	b.n	80073ac <Lslalom_L90+0x244>
	}else if(run_mode == 5){
 80072ec:	4b31      	ldr	r3, [pc, #196]	; (80073b4 <Lslalom_L90+0x24c>)
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b05      	cmp	r3, #5
 80072f4:	d12b      	bne.n	800734e <Lslalom_L90+0x1e6>
		slalomF(10000, SPEED_5, LSLALOM_5_OFFSET_F, LSLALOM_5_WALL_FL, LSLALOM_5_WALL_FR);
 80072f6:	2396      	movs	r3, #150	; 0x96
 80072f8:	9300      	str	r3, [sp, #0]
 80072fa:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80072fe:	2232      	movs	r2, #50	; 0x32
 8007300:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007304:	f242 7010 	movw	r0, #10000	; 0x2710
 8007308:	f7fe f918 	bl	800553c <slalomF>
		slalomR(LSLALOM_5_DEGACCEL, LSLALOM_5_OMEGA, 80, SPEED_5);
 800730c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007310:	2250      	movs	r2, #80	; 0x50
 8007312:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007316:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800731a:	f7fe f987 	bl	800562c <slalomR>
		if(!MF.FLAG.XDIR){
 800731e:	4b26      	ldr	r3, [pc, #152]	; (80073b8 <Lslalom_L90+0x250>)
 8007320:	881b      	ldrh	r3, [r3, #0]
 8007322:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007326:	b2db      	uxtb	r3, r3
 8007328:	2b00      	cmp	r3, #0
 800732a:	d104      	bne.n	8007336 <Lslalom_L90+0x1ce>
			turn_dir(DIR_TURN_L90, 1);										//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800732c:	2101      	movs	r1, #1
 800732e:	20ff      	movs	r0, #255	; 0xff
 8007330:	f009 f866 	bl	8010400 <turn_dir>
 8007334:	e003      	b.n	800733e <Lslalom_L90+0x1d6>
			turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007336:	2103      	movs	r1, #3
 8007338:	20fe      	movs	r0, #254	; 0xfe
 800733a:	f009 f861 	bl	8010400 <turn_dir>
		slalomB(10000, SPEED_5, LSLALOM_5_OFFSET_B);
 800733e:	226e      	movs	r2, #110	; 0x6e
 8007340:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007344:	f242 7010 	movw	r0, #10000	; 0x2710
 8007348:	f7fe faca 	bl	80058e0 <slalomB>
}
 800734c:	e02e      	b.n	80073ac <Lslalom_L90+0x244>
	}else if(run_mode == 6){
 800734e:	4b19      	ldr	r3, [pc, #100]	; (80073b4 <Lslalom_L90+0x24c>)
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	b2db      	uxtb	r3, r3
 8007354:	2b06      	cmp	r3, #6
 8007356:	d129      	bne.n	80073ac <Lslalom_L90+0x244>
		slalomF(10000, SPEED_6, LSLALOM_6_OFFSET_F, LSLALOM_6_WALL_FL, LSLALOM_6_WALL_FR);
 8007358:	2382      	movs	r3, #130	; 0x82
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	23fa      	movs	r3, #250	; 0xfa
 800735e:	2211      	movs	r2, #17
 8007360:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007364:	f242 7010 	movw	r0, #10000	; 0x2710
 8007368:	f7fe f8e8 	bl	800553c <slalomF>
		slalomR(LSLALOM_6_DEGACCEL, LSLALOM_6_OMEGA, 70, SPEED_6);
 800736c:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8007370:	2246      	movs	r2, #70	; 0x46
 8007372:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007376:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800737a:	f7fe f957 	bl	800562c <slalomR>
		if(!MF.FLAG.XDIR){
 800737e:	4b0e      	ldr	r3, [pc, #56]	; (80073b8 <Lslalom_L90+0x250>)
 8007380:	881b      	ldrh	r3, [r3, #0]
 8007382:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007386:	b2db      	uxtb	r3, r3
 8007388:	2b00      	cmp	r3, #0
 800738a:	d104      	bne.n	8007396 <Lslalom_L90+0x22e>
			turn_dir(DIR_TURN_L90, 1);										//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800738c:	2101      	movs	r1, #1
 800738e:	20ff      	movs	r0, #255	; 0xff
 8007390:	f009 f836 	bl	8010400 <turn_dir>
 8007394:	e003      	b.n	800739e <Lslalom_L90+0x236>
			turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007396:	2103      	movs	r1, #3
 8007398:	20fe      	movs	r0, #254	; 0xfe
 800739a:	f009 f831 	bl	8010400 <turn_dir>
		slalomB(10000, SPEED_6, LSLALOM_6_OFFSET_B);
 800739e:	2278      	movs	r2, #120	; 0x78
 80073a0:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80073a4:	f242 7010 	movw	r0, #10000	; 0x2710
 80073a8:	f7fe fa9a 	bl	80058e0 <slalomB>
}
 80073ac:	bf00      	nop
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	20000456 	.word	0x20000456
 80073b8:	20000fa8 	.word	0x20000fa8

080073bc <Lslalom_R180>:
//Lslalom_R180
// スラロームで右に180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R180(void){
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af02      	add	r7, sp, #8
	full_led_write1(GREEN);
 80073c2:	2002      	movs	r0, #2
 80073c4:	f00a feb0 	bl	8012128 <full_led_write1>
	if(run_mode == 1){
 80073c8:	4b98      	ldr	r3, [pc, #608]	; (800762c <Lslalom_R180+0x270>)
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d12a      	bne.n	8007428 <Lslalom_R180+0x6c>
		slalomF(10000, SPEED_1, LROTATE_OFFSET_F, LROTATE_WALL_FL, LROTATE_WALL_FR);
 80073d2:	2364      	movs	r3, #100	; 0x64
 80073d4:	9300      	str	r3, [sp, #0]
 80073d6:	23c8      	movs	r3, #200	; 0xc8
 80073d8:	223c      	movs	r2, #60	; 0x3c
 80073da:	21c8      	movs	r1, #200	; 0xc8
 80073dc:	f242 7010 	movw	r0, #10000	; 0x2710
 80073e0:	f7fe f8ac 	bl	800553c <slalomF>
		slalomR(-LROTATE_DEGACCEL, -LROTATE_OMEGA, -180, SPEED_1);
 80073e4:	23c8      	movs	r3, #200	; 0xc8
 80073e6:	f06f 02b3 	mvn.w	r2, #179	; 0xb3
 80073ea:	4991      	ldr	r1, [pc, #580]	; (8007630 <Lslalom_R180+0x274>)
 80073ec:	4891      	ldr	r0, [pc, #580]	; (8007634 <Lslalom_R180+0x278>)
 80073ee:	f7fe f91d 	bl	800562c <slalomR>

		if(!MF.FLAG.XDIR){
 80073f2:	4b91      	ldr	r3, [pc, #580]	; (8007638 <Lslalom_R180+0x27c>)
 80073f4:	881b      	ldrh	r3, [r3, #0]
 80073f6:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d108      	bne.n	8007412 <Lslalom_R180+0x56>
			turn_dir(DIR_TURN_R90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007400:	2101      	movs	r1, #1
 8007402:	2001      	movs	r0, #1
 8007404:	f008 fffc 	bl	8010400 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007408:	2101      	movs	r1, #1
 800740a:	2001      	movs	r0, #1
 800740c:	f008 fff8 	bl	8010400 <turn_dir>
 8007410:	e003      	b.n	800741a <Lslalom_R180+0x5e>
		}else{
			turn_dir(DIR_TURN_R180_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007412:	2103      	movs	r1, #3
 8007414:	2004      	movs	r0, #4
 8007416:	f008 fff3 	bl	8010400 <turn_dir>
		}
		slalomB(10000, SPEED_1, LROTATE_OFFSET_B);
 800741a:	2250      	movs	r2, #80	; 0x50
 800741c:	21c8      	movs	r1, #200	; 0xc8
 800741e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007422:	f7fe fa5d 	bl	80058e0 <slalomB>
		}else{
			turn_dir(DIR_TURN_R180_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_6, LROTATE_6_OFFSET_B);
	}
}
 8007426:	e0fd      	b.n	8007624 <Lslalom_R180+0x268>
	}else if(run_mode == 2){
 8007428:	4b80      	ldr	r3, [pc, #512]	; (800762c <Lslalom_R180+0x270>)
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	b2db      	uxtb	r3, r3
 800742e:	2b02      	cmp	r3, #2
 8007430:	d12d      	bne.n	800748e <Lslalom_R180+0xd2>
		slalomF(10000, SPEED_2, LROTATE_2_OFFSET_F, LROTATE_2_WALL_FL, LROTATE_2_WALL_FR);
 8007432:	2364      	movs	r3, #100	; 0x64
 8007434:	9300      	str	r3, [sp, #0]
 8007436:	23c8      	movs	r3, #200	; 0xc8
 8007438:	223c      	movs	r2, #60	; 0x3c
 800743a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800743e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007442:	f7fe f87b 	bl	800553c <slalomF>
		slalomR(-LROTATE_2_DEGACCEL, -LROTATE_2_OMEGA, -180, SPEED_2);
 8007446:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800744a:	f06f 02b3 	mvn.w	r2, #179	; 0xb3
 800744e:	4978      	ldr	r1, [pc, #480]	; (8007630 <Lslalom_R180+0x274>)
 8007450:	4878      	ldr	r0, [pc, #480]	; (8007634 <Lslalom_R180+0x278>)
 8007452:	f7fe f8eb 	bl	800562c <slalomR>
		if(!MF.FLAG.XDIR){
 8007456:	4b78      	ldr	r3, [pc, #480]	; (8007638 <Lslalom_R180+0x27c>)
 8007458:	881b      	ldrh	r3, [r3, #0]
 800745a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b00      	cmp	r3, #0
 8007462:	d108      	bne.n	8007476 <Lslalom_R180+0xba>
			turn_dir(DIR_TURN_R90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007464:	2101      	movs	r1, #1
 8007466:	2001      	movs	r0, #1
 8007468:	f008 ffca 	bl	8010400 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800746c:	2101      	movs	r1, #1
 800746e:	2001      	movs	r0, #1
 8007470:	f008 ffc6 	bl	8010400 <turn_dir>
 8007474:	e003      	b.n	800747e <Lslalom_R180+0xc2>
			turn_dir(DIR_TURN_R180_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007476:	2103      	movs	r1, #3
 8007478:	2004      	movs	r0, #4
 800747a:	f008 ffc1 	bl	8010400 <turn_dir>
		slalomB(10000, SPEED_2, LROTATE_2_OFFSET_B);
 800747e:	2250      	movs	r2, #80	; 0x50
 8007480:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007484:	f242 7010 	movw	r0, #10000	; 0x2710
 8007488:	f7fe fa2a 	bl	80058e0 <slalomB>
}
 800748c:	e0ca      	b.n	8007624 <Lslalom_R180+0x268>
	}else if(run_mode == 3){
 800748e:	4b67      	ldr	r3, [pc, #412]	; (800762c <Lslalom_R180+0x270>)
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	b2db      	uxtb	r3, r3
 8007494:	2b03      	cmp	r3, #3
 8007496:	d12d      	bne.n	80074f4 <Lslalom_R180+0x138>
		slalomF(10000, SPEED_3, LROTATE_3_OFFSET_F, LROTATE_3_WALL_FL, LROTATE_3_WALL_FR);
 8007498:	2364      	movs	r3, #100	; 0x64
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	23c8      	movs	r3, #200	; 0xc8
 800749e:	2232      	movs	r2, #50	; 0x32
 80074a0:	f44f 7116 	mov.w	r1, #600	; 0x258
 80074a4:	f242 7010 	movw	r0, #10000	; 0x2710
 80074a8:	f7fe f848 	bl	800553c <slalomF>
		slalomR(-LROTATE_3_DEGACCEL, -LROTATE_3_OMEGA, -170, SPEED_3);
 80074ac:	f44f 7316 	mov.w	r3, #600	; 0x258
 80074b0:	f06f 02a9 	mvn.w	r2, #169	; 0xa9
 80074b4:	4961      	ldr	r1, [pc, #388]	; (800763c <Lslalom_R180+0x280>)
 80074b6:	4862      	ldr	r0, [pc, #392]	; (8007640 <Lslalom_R180+0x284>)
 80074b8:	f7fe f8b8 	bl	800562c <slalomR>
		if(!MF.FLAG.XDIR){
 80074bc:	4b5e      	ldr	r3, [pc, #376]	; (8007638 <Lslalom_R180+0x27c>)
 80074be:	881b      	ldrh	r3, [r3, #0]
 80074c0:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d108      	bne.n	80074dc <Lslalom_R180+0x120>
			turn_dir(DIR_TURN_R90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80074ca:	2101      	movs	r1, #1
 80074cc:	2001      	movs	r0, #1
 80074ce:	f008 ff97 	bl	8010400 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80074d2:	2101      	movs	r1, #1
 80074d4:	2001      	movs	r0, #1
 80074d6:	f008 ff93 	bl	8010400 <turn_dir>
 80074da:	e003      	b.n	80074e4 <Lslalom_R180+0x128>
			turn_dir(DIR_TURN_R180_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80074dc:	2103      	movs	r1, #3
 80074de:	2004      	movs	r0, #4
 80074e0:	f008 ff8e 	bl	8010400 <turn_dir>
		slalomB(10000, SPEED_3, LROTATE_3_OFFSET_B);
 80074e4:	224e      	movs	r2, #78	; 0x4e
 80074e6:	f44f 7116 	mov.w	r1, #600	; 0x258
 80074ea:	f242 7010 	movw	r0, #10000	; 0x2710
 80074ee:	f7fe f9f7 	bl	80058e0 <slalomB>
}
 80074f2:	e097      	b.n	8007624 <Lslalom_R180+0x268>
	}else if(run_mode == 4){
 80074f4:	4b4d      	ldr	r3, [pc, #308]	; (800762c <Lslalom_R180+0x270>)
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b04      	cmp	r3, #4
 80074fc:	d12d      	bne.n	800755a <Lslalom_R180+0x19e>
		slalomF(10000, SPEED_4, LROTATE_4_OFFSET_F, LROTATE_4_WALL_FL, LROTATE_4_WALL_FR);
 80074fe:	2364      	movs	r3, #100	; 0x64
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	23c8      	movs	r3, #200	; 0xc8
 8007504:	221c      	movs	r2, #28
 8007506:	f44f 7148 	mov.w	r1, #800	; 0x320
 800750a:	f242 7010 	movw	r0, #10000	; 0x2710
 800750e:	f7fe f815 	bl	800553c <slalomF>
		slalomR(-LROTATE_4_DEGACCEL, -LROTATE_4_OMEGA, -170, SPEED_4);
 8007512:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007516:	f06f 02a9 	mvn.w	r2, #169	; 0xa9
 800751a:	494a      	ldr	r1, [pc, #296]	; (8007644 <Lslalom_R180+0x288>)
 800751c:	4848      	ldr	r0, [pc, #288]	; (8007640 <Lslalom_R180+0x284>)
 800751e:	f7fe f885 	bl	800562c <slalomR>
		if(!MF.FLAG.XDIR){
 8007522:	4b45      	ldr	r3, [pc, #276]	; (8007638 <Lslalom_R180+0x27c>)
 8007524:	881b      	ldrh	r3, [r3, #0]
 8007526:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800752a:	b2db      	uxtb	r3, r3
 800752c:	2b00      	cmp	r3, #0
 800752e:	d108      	bne.n	8007542 <Lslalom_R180+0x186>
			turn_dir(DIR_TURN_R90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007530:	2101      	movs	r1, #1
 8007532:	2001      	movs	r0, #1
 8007534:	f008 ff64 	bl	8010400 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007538:	2101      	movs	r1, #1
 800753a:	2001      	movs	r0, #1
 800753c:	f008 ff60 	bl	8010400 <turn_dir>
 8007540:	e003      	b.n	800754a <Lslalom_R180+0x18e>
			turn_dir(DIR_TURN_R180_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007542:	2103      	movs	r1, #3
 8007544:	2004      	movs	r0, #4
 8007546:	f008 ff5b 	bl	8010400 <turn_dir>
		slalomB(10000, SPEED_4, LROTATE_4_OFFSET_B);
 800754a:	225f      	movs	r2, #95	; 0x5f
 800754c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007550:	f242 7010 	movw	r0, #10000	; 0x2710
 8007554:	f7fe f9c4 	bl	80058e0 <slalomB>
}
 8007558:	e064      	b.n	8007624 <Lslalom_R180+0x268>
	}else if(run_mode == 5){
 800755a:	4b34      	ldr	r3, [pc, #208]	; (800762c <Lslalom_R180+0x270>)
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	b2db      	uxtb	r3, r3
 8007560:	2b05      	cmp	r3, #5
 8007562:	d12d      	bne.n	80075c0 <Lslalom_R180+0x204>
		slalomF(10000, SPEED_5, LROTATE_5_OFFSET_F, LROTATE_5_WALL_FL, LROTATE_5_WALL_FR);
 8007564:	236e      	movs	r3, #110	; 0x6e
 8007566:	9300      	str	r3, [sp, #0]
 8007568:	23dc      	movs	r3, #220	; 0xdc
 800756a:	2232      	movs	r2, #50	; 0x32
 800756c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007570:	f242 7010 	movw	r0, #10000	; 0x2710
 8007574:	f7fd ffe2 	bl	800553c <slalomF>
		slalomR(-LROTATE_5_DEGACCEL, -LROTATE_5_OMEGA, -170, SPEED_5);
 8007578:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800757c:	f06f 02a9 	mvn.w	r2, #169	; 0xa9
 8007580:	4931      	ldr	r1, [pc, #196]	; (8007648 <Lslalom_R180+0x28c>)
 8007582:	4832      	ldr	r0, [pc, #200]	; (800764c <Lslalom_R180+0x290>)
 8007584:	f7fe f852 	bl	800562c <slalomR>
		if(!MF.FLAG.XDIR){
 8007588:	4b2b      	ldr	r3, [pc, #172]	; (8007638 <Lslalom_R180+0x27c>)
 800758a:	881b      	ldrh	r3, [r3, #0]
 800758c:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2b00      	cmp	r3, #0
 8007594:	d108      	bne.n	80075a8 <Lslalom_R180+0x1ec>
			turn_dir(DIR_TURN_R90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007596:	2101      	movs	r1, #1
 8007598:	2001      	movs	r0, #1
 800759a:	f008 ff31 	bl	8010400 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800759e:	2101      	movs	r1, #1
 80075a0:	2001      	movs	r0, #1
 80075a2:	f008 ff2d 	bl	8010400 <turn_dir>
 80075a6:	e003      	b.n	80075b0 <Lslalom_R180+0x1f4>
			turn_dir(DIR_TURN_R180_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80075a8:	2103      	movs	r1, #3
 80075aa:	2004      	movs	r0, #4
 80075ac:	f008 ff28 	bl	8010400 <turn_dir>
		slalomB(10000, SPEED_5, LROTATE_5_OFFSET_B);
 80075b0:	2282      	movs	r2, #130	; 0x82
 80075b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80075b6:	f242 7010 	movw	r0, #10000	; 0x2710
 80075ba:	f7fe f991 	bl	80058e0 <slalomB>
}
 80075be:	e031      	b.n	8007624 <Lslalom_R180+0x268>
	}else if(run_mode == 6){
 80075c0:	4b1a      	ldr	r3, [pc, #104]	; (800762c <Lslalom_R180+0x270>)
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b06      	cmp	r3, #6
 80075c8:	d12c      	bne.n	8007624 <Lslalom_R180+0x268>
		slalomF(10000, SPEED_6, LROTATE_6_OFFSET_F, LROTATE_6_WALL_FL, LROTATE_6_WALL_FR);
 80075ca:	236e      	movs	r3, #110	; 0x6e
 80075cc:	9300      	str	r3, [sp, #0]
 80075ce:	23dc      	movs	r3, #220	; 0xdc
 80075d0:	221e      	movs	r2, #30
 80075d2:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80075d6:	f242 7010 	movw	r0, #10000	; 0x2710
 80075da:	f7fd ffaf 	bl	800553c <slalomF>
		slalomR(-LROTATE_6_DEGACCEL, -LROTATE_6_OMEGA, -160, SPEED_6);
 80075de:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80075e2:	f06f 029f 	mvn.w	r2, #159	; 0x9f
 80075e6:	491a      	ldr	r1, [pc, #104]	; (8007650 <Lslalom_R180+0x294>)
 80075e8:	4818      	ldr	r0, [pc, #96]	; (800764c <Lslalom_R180+0x290>)
 80075ea:	f7fe f81f 	bl	800562c <slalomR>
		if(!MF.FLAG.XDIR){
 80075ee:	4b12      	ldr	r3, [pc, #72]	; (8007638 <Lslalom_R180+0x27c>)
 80075f0:	881b      	ldrh	r3, [r3, #0]
 80075f2:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d108      	bne.n	800760e <Lslalom_R180+0x252>
			turn_dir(DIR_TURN_R90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80075fc:	2101      	movs	r1, #1
 80075fe:	2001      	movs	r0, #1
 8007600:	f008 fefe 	bl	8010400 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007604:	2101      	movs	r1, #1
 8007606:	2001      	movs	r0, #1
 8007608:	f008 fefa 	bl	8010400 <turn_dir>
 800760c:	e003      	b.n	8007616 <Lslalom_R180+0x25a>
			turn_dir(DIR_TURN_R180_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800760e:	2103      	movs	r1, #3
 8007610:	2004      	movs	r0, #4
 8007612:	f008 fef5 	bl	8010400 <turn_dir>
		slalomB(10000, SPEED_6, LROTATE_6_OFFSET_B);
 8007616:	229b      	movs	r2, #155	; 0x9b
 8007618:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800761c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007620:	f7fe f95e 	bl	80058e0 <slalomB>
}
 8007624:	bf00      	nop
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	20000456 	.word	0x20000456
 8007630:	fffffefc 	.word	0xfffffefc
 8007634:	fffff830 	.word	0xfffff830
 8007638:	20000fa8 	.word	0x20000fa8
 800763c:	fffffe74 	.word	0xfffffe74
 8007640:	fffff448 	.word	0xfffff448
 8007644:	fffffdc6 	.word	0xfffffdc6
 8007648:	fffffd94 	.word	0xfffffd94
 800764c:	ffffe0c0 	.word	0xffffe0c0
 8007650:	fffffd08 	.word	0xfffffd08

08007654 <Lslalom_L180>:
//Lslalom_L180
// 大回りスラロームで右に180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L180(void){
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af02      	add	r7, sp, #8
	full_led_write1(GREEN);
 800765a:	2002      	movs	r0, #2
 800765c:	f00a fd64 	bl	8012128 <full_led_write1>
	if(run_mode == 1){
 8007660:	4b9b      	ldr	r3, [pc, #620]	; (80078d0 <Lslalom_L180+0x27c>)
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b01      	cmp	r3, #1
 8007668:	d12b      	bne.n	80076c2 <Lslalom_L180+0x6e>
		slalomF(10000, SPEED_1, LROTATE_OFFSET_F, LROTATE_WALL_FL, LROTATE_WALL_FR);
 800766a:	2364      	movs	r3, #100	; 0x64
 800766c:	9300      	str	r3, [sp, #0]
 800766e:	23c8      	movs	r3, #200	; 0xc8
 8007670:	223c      	movs	r2, #60	; 0x3c
 8007672:	21c8      	movs	r1, #200	; 0xc8
 8007674:	f242 7010 	movw	r0, #10000	; 0x2710
 8007678:	f7fd ff60 	bl	800553c <slalomF>
		slalomR(LROTATE_DEGACCEL, LROTATE_OMEGA, 180, SPEED_1);
 800767c:	23c8      	movs	r3, #200	; 0xc8
 800767e:	22b4      	movs	r2, #180	; 0xb4
 8007680:	f44f 7182 	mov.w	r1, #260	; 0x104
 8007684:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007688:	f7fd ffd0 	bl	800562c <slalomR>

		if(!MF.FLAG.XDIR){
 800768c:	4b91      	ldr	r3, [pc, #580]	; (80078d4 <Lslalom_L180+0x280>)
 800768e:	881b      	ldrh	r3, [r3, #0]
 8007690:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007694:	b2db      	uxtb	r3, r3
 8007696:	2b00      	cmp	r3, #0
 8007698:	d108      	bne.n	80076ac <Lslalom_L180+0x58>
			turn_dir(DIR_TURN_L90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800769a:	2101      	movs	r1, #1
 800769c:	20ff      	movs	r0, #255	; 0xff
 800769e:	f008 feaf 	bl	8010400 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80076a2:	2101      	movs	r1, #1
 80076a4:	20ff      	movs	r0, #255	; 0xff
 80076a6:	f008 feab 	bl	8010400 <turn_dir>
 80076aa:	e003      	b.n	80076b4 <Lslalom_L180+0x60>
		}else{
			turn_dir(DIR_TURN_L180_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80076ac:	2103      	movs	r1, #3
 80076ae:	20fc      	movs	r0, #252	; 0xfc
 80076b0:	f008 fea6 	bl	8010400 <turn_dir>
		}
		slalomB(10000, SPEED_1, LROTATE_OFFSET_B);
 80076b4:	2250      	movs	r2, #80	; 0x50
 80076b6:	21c8      	movs	r1, #200	; 0xc8
 80076b8:	f242 7010 	movw	r0, #10000	; 0x2710
 80076bc:	f7fe f910 	bl	80058e0 <slalomB>
		}else{
			turn_dir(DIR_TURN_L180_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_6, LROTATE_6_OFFSET_B);
	}
}
 80076c0:	e102      	b.n	80078c8 <Lslalom_L180+0x274>
	}else if(run_mode == 2){
 80076c2:	4b83      	ldr	r3, [pc, #524]	; (80078d0 <Lslalom_L180+0x27c>)
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d12e      	bne.n	800772a <Lslalom_L180+0xd6>
		slalomF(10000, SPEED_2, LROTATE_2_OFFSET_F, LROTATE_2_WALL_FL, LROTATE_2_WALL_FR);
 80076cc:	2364      	movs	r3, #100	; 0x64
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	23c8      	movs	r3, #200	; 0xc8
 80076d2:	223c      	movs	r2, #60	; 0x3c
 80076d4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80076d8:	f242 7010 	movw	r0, #10000	; 0x2710
 80076dc:	f7fd ff2e 	bl	800553c <slalomF>
		slalomR(LROTATE_2_DEGACCEL, LROTATE_2_OMEGA, 180, SPEED_2);
 80076e0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80076e4:	22b4      	movs	r2, #180	; 0xb4
 80076e6:	f44f 7182 	mov.w	r1, #260	; 0x104
 80076ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80076ee:	f7fd ff9d 	bl	800562c <slalomR>
		if(!MF.FLAG.XDIR){
 80076f2:	4b78      	ldr	r3, [pc, #480]	; (80078d4 <Lslalom_L180+0x280>)
 80076f4:	881b      	ldrh	r3, [r3, #0]
 80076f6:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d108      	bne.n	8007712 <Lslalom_L180+0xbe>
			turn_dir(DIR_TURN_L90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007700:	2101      	movs	r1, #1
 8007702:	20ff      	movs	r0, #255	; 0xff
 8007704:	f008 fe7c 	bl	8010400 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007708:	2101      	movs	r1, #1
 800770a:	20ff      	movs	r0, #255	; 0xff
 800770c:	f008 fe78 	bl	8010400 <turn_dir>
 8007710:	e003      	b.n	800771a <Lslalom_L180+0xc6>
			turn_dir(DIR_TURN_L180_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007712:	2103      	movs	r1, #3
 8007714:	20fc      	movs	r0, #252	; 0xfc
 8007716:	f008 fe73 	bl	8010400 <turn_dir>
		slalomB(10000, SPEED_2, LROTATE_2_OFFSET_B);
 800771a:	2250      	movs	r2, #80	; 0x50
 800771c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007720:	f242 7010 	movw	r0, #10000	; 0x2710
 8007724:	f7fe f8dc 	bl	80058e0 <slalomB>
}
 8007728:	e0ce      	b.n	80078c8 <Lslalom_L180+0x274>
	}else if(run_mode == 3){
 800772a:	4b69      	ldr	r3, [pc, #420]	; (80078d0 <Lslalom_L180+0x27c>)
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	b2db      	uxtb	r3, r3
 8007730:	2b03      	cmp	r3, #3
 8007732:	d12e      	bne.n	8007792 <Lslalom_L180+0x13e>
		slalomF(10000, SPEED_3, LROTATE_3_OFFSET_F, LROTATE_3_WALL_FL, LROTATE_3_WALL_FR);
 8007734:	2364      	movs	r3, #100	; 0x64
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	23c8      	movs	r3, #200	; 0xc8
 800773a:	2232      	movs	r2, #50	; 0x32
 800773c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007740:	f242 7010 	movw	r0, #10000	; 0x2710
 8007744:	f7fd fefa 	bl	800553c <slalomF>
		slalomR(LROTATE_3_DEGACCEL, LROTATE_3_OMEGA, 170, SPEED_3);
 8007748:	f44f 7316 	mov.w	r3, #600	; 0x258
 800774c:	22aa      	movs	r2, #170	; 0xaa
 800774e:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8007752:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007756:	f7fd ff69 	bl	800562c <slalomR>
		if(!MF.FLAG.XDIR){
 800775a:	4b5e      	ldr	r3, [pc, #376]	; (80078d4 <Lslalom_L180+0x280>)
 800775c:	881b      	ldrh	r3, [r3, #0]
 800775e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007762:	b2db      	uxtb	r3, r3
 8007764:	2b00      	cmp	r3, #0
 8007766:	d108      	bne.n	800777a <Lslalom_L180+0x126>
			turn_dir(DIR_TURN_L90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007768:	2101      	movs	r1, #1
 800776a:	20ff      	movs	r0, #255	; 0xff
 800776c:	f008 fe48 	bl	8010400 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007770:	2101      	movs	r1, #1
 8007772:	20ff      	movs	r0, #255	; 0xff
 8007774:	f008 fe44 	bl	8010400 <turn_dir>
 8007778:	e003      	b.n	8007782 <Lslalom_L180+0x12e>
			turn_dir(DIR_TURN_L180_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800777a:	2103      	movs	r1, #3
 800777c:	20fc      	movs	r0, #252	; 0xfc
 800777e:	f008 fe3f 	bl	8010400 <turn_dir>
		slalomB(10000, SPEED_3, LROTATE_3_OFFSET_B);
 8007782:	224e      	movs	r2, #78	; 0x4e
 8007784:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007788:	f242 7010 	movw	r0, #10000	; 0x2710
 800778c:	f7fe f8a8 	bl	80058e0 <slalomB>
}
 8007790:	e09a      	b.n	80078c8 <Lslalom_L180+0x274>
	}else if(run_mode == 4){
 8007792:	4b4f      	ldr	r3, [pc, #316]	; (80078d0 <Lslalom_L180+0x27c>)
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	b2db      	uxtb	r3, r3
 8007798:	2b04      	cmp	r3, #4
 800779a:	d12e      	bne.n	80077fa <Lslalom_L180+0x1a6>
		slalomF(10000, SPEED_4, LROTATE_4_OFFSET_F, LROTATE_4_WALL_FL, LROTATE_4_WALL_FR);
 800779c:	2364      	movs	r3, #100	; 0x64
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	23c8      	movs	r3, #200	; 0xc8
 80077a2:	221c      	movs	r2, #28
 80077a4:	f44f 7148 	mov.w	r1, #800	; 0x320
 80077a8:	f242 7010 	movw	r0, #10000	; 0x2710
 80077ac:	f7fd fec6 	bl	800553c <slalomF>
		slalomR(LROTATE_4_DEGACCEL, LROTATE_4_OMEGA, 170, SPEED_4);
 80077b0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80077b4:	22aa      	movs	r2, #170	; 0xaa
 80077b6:	f240 213a 	movw	r1, #570	; 0x23a
 80077ba:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80077be:	f7fd ff35 	bl	800562c <slalomR>
		if(!MF.FLAG.XDIR){
 80077c2:	4b44      	ldr	r3, [pc, #272]	; (80078d4 <Lslalom_L180+0x280>)
 80077c4:	881b      	ldrh	r3, [r3, #0]
 80077c6:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d108      	bne.n	80077e2 <Lslalom_L180+0x18e>
			turn_dir(DIR_TURN_L90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80077d0:	2101      	movs	r1, #1
 80077d2:	20ff      	movs	r0, #255	; 0xff
 80077d4:	f008 fe14 	bl	8010400 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80077d8:	2101      	movs	r1, #1
 80077da:	20ff      	movs	r0, #255	; 0xff
 80077dc:	f008 fe10 	bl	8010400 <turn_dir>
 80077e0:	e003      	b.n	80077ea <Lslalom_L180+0x196>
			turn_dir(DIR_TURN_L180_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80077e2:	2103      	movs	r1, #3
 80077e4:	20fc      	movs	r0, #252	; 0xfc
 80077e6:	f008 fe0b 	bl	8010400 <turn_dir>
		slalomB(10000, SPEED_4, LROTATE_4_OFFSET_B);
 80077ea:	225f      	movs	r2, #95	; 0x5f
 80077ec:	f44f 7148 	mov.w	r1, #800	; 0x320
 80077f0:	f242 7010 	movw	r0, #10000	; 0x2710
 80077f4:	f7fe f874 	bl	80058e0 <slalomB>
}
 80077f8:	e066      	b.n	80078c8 <Lslalom_L180+0x274>
	}else if(run_mode == 5){
 80077fa:	4b35      	ldr	r3, [pc, #212]	; (80078d0 <Lslalom_L180+0x27c>)
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	2b05      	cmp	r3, #5
 8007802:	d12e      	bne.n	8007862 <Lslalom_L180+0x20e>
		slalomF(10000, SPEED_5, LROTATE_5_OFFSET_F, LROTATE_5_WALL_FL, LROTATE_5_WALL_FR);
 8007804:	236e      	movs	r3, #110	; 0x6e
 8007806:	9300      	str	r3, [sp, #0]
 8007808:	23dc      	movs	r3, #220	; 0xdc
 800780a:	2232      	movs	r2, #50	; 0x32
 800780c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007810:	f242 7010 	movw	r0, #10000	; 0x2710
 8007814:	f7fd fe92 	bl	800553c <slalomF>
		slalomR(LROTATE_5_DEGACCEL, LROTATE_5_OMEGA, 170, SPEED_5);
 8007818:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800781c:	22aa      	movs	r2, #170	; 0xaa
 800781e:	f44f 711b 	mov.w	r1, #620	; 0x26c
 8007822:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007826:	f7fd ff01 	bl	800562c <slalomR>
		if(!MF.FLAG.XDIR){
 800782a:	4b2a      	ldr	r3, [pc, #168]	; (80078d4 <Lslalom_L180+0x280>)
 800782c:	881b      	ldrh	r3, [r3, #0]
 800782e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007832:	b2db      	uxtb	r3, r3
 8007834:	2b00      	cmp	r3, #0
 8007836:	d108      	bne.n	800784a <Lslalom_L180+0x1f6>
			turn_dir(DIR_TURN_L90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007838:	2101      	movs	r1, #1
 800783a:	20ff      	movs	r0, #255	; 0xff
 800783c:	f008 fde0 	bl	8010400 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007840:	2101      	movs	r1, #1
 8007842:	20ff      	movs	r0, #255	; 0xff
 8007844:	f008 fddc 	bl	8010400 <turn_dir>
 8007848:	e003      	b.n	8007852 <Lslalom_L180+0x1fe>
			turn_dir(DIR_TURN_L180_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800784a:	2103      	movs	r1, #3
 800784c:	20fc      	movs	r0, #252	; 0xfc
 800784e:	f008 fdd7 	bl	8010400 <turn_dir>
		slalomB(10000, SPEED_5, LROTATE_5_OFFSET_B);
 8007852:	2282      	movs	r2, #130	; 0x82
 8007854:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007858:	f242 7010 	movw	r0, #10000	; 0x2710
 800785c:	f7fe f840 	bl	80058e0 <slalomB>
}
 8007860:	e032      	b.n	80078c8 <Lslalom_L180+0x274>
	}else if(run_mode == 6){
 8007862:	4b1b      	ldr	r3, [pc, #108]	; (80078d0 <Lslalom_L180+0x27c>)
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	b2db      	uxtb	r3, r3
 8007868:	2b06      	cmp	r3, #6
 800786a:	d12d      	bne.n	80078c8 <Lslalom_L180+0x274>
		slalomF(10000, SPEED_6, LROTATE_6_OFFSET_F, LROTATE_6_WALL_FL, LROTATE_6_WALL_FR);
 800786c:	236e      	movs	r3, #110	; 0x6e
 800786e:	9300      	str	r3, [sp, #0]
 8007870:	23dc      	movs	r3, #220	; 0xdc
 8007872:	221e      	movs	r2, #30
 8007874:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007878:	f242 7010 	movw	r0, #10000	; 0x2710
 800787c:	f7fd fe5e 	bl	800553c <slalomF>
		slalomR(LROTATE_6_DEGACCEL, LROTATE_6_OMEGA, 160, SPEED_6);
 8007880:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8007884:	22a0      	movs	r2, #160	; 0xa0
 8007886:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 800788a:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800788e:	f7fd fecd 	bl	800562c <slalomR>
		if(!MF.FLAG.XDIR){
 8007892:	4b10      	ldr	r3, [pc, #64]	; (80078d4 <Lslalom_L180+0x280>)
 8007894:	881b      	ldrh	r3, [r3, #0]
 8007896:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800789a:	b2db      	uxtb	r3, r3
 800789c:	2b00      	cmp	r3, #0
 800789e:	d108      	bne.n	80078b2 <Lslalom_L180+0x25e>
			turn_dir(DIR_TURN_L90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80078a0:	2101      	movs	r1, #1
 80078a2:	20ff      	movs	r0, #255	; 0xff
 80078a4:	f008 fdac 	bl	8010400 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80078a8:	2101      	movs	r1, #1
 80078aa:	20ff      	movs	r0, #255	; 0xff
 80078ac:	f008 fda8 	bl	8010400 <turn_dir>
 80078b0:	e003      	b.n	80078ba <Lslalom_L180+0x266>
			turn_dir(DIR_TURN_L180_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80078b2:	2103      	movs	r1, #3
 80078b4:	20fc      	movs	r0, #252	; 0xfc
 80078b6:	f008 fda3 	bl	8010400 <turn_dir>
		slalomB(10000, SPEED_6, LROTATE_6_OFFSET_B);
 80078ba:	229b      	movs	r2, #155	; 0x9b
 80078bc:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80078c0:	f242 7010 	movw	r0, #10000	; 0x2710
 80078c4:	f7fe f80c 	bl	80058e0 <slalomB>
}
 80078c8:	bf00      	nop
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	20000456 	.word	0x20000456
 80078d4:	20000fa8 	.word	0x20000fa8

080078d8 <v_R45>:
//v_R45
// 区画中心から右に45度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R45(void){
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af02      	add	r7, sp, #8
	full_led_write1(PURPLE);
 80078de:	2005      	movs	r0, #5
 80078e0:	f00a fc22 	bl	8012128 <full_led_write1>
	if(run_mode == 1){
 80078e4:	4bbf      	ldr	r3, [pc, #764]	; (8007be4 <v_R45+0x30c>)
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d150      	bne.n	8007990 <v_R45+0xb8>
		if(!MF2.FLAG.V){
 80078ee:	4bbe      	ldr	r3, [pc, #760]	; (8007be8 <v_R45+0x310>)
 80078f0:	881b      	ldrh	r3, [r3, #0]
 80078f2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d10b      	bne.n	8007914 <v_R45+0x3c>
			slalomF(10000, SPEED_1, V45_OFFSET_F, NO_WALL, NO_WALL);
 80078fc:	f241 3388 	movw	r3, #5000	; 0x1388
 8007900:	9300      	str	r3, [sp, #0]
 8007902:	f241 3388 	movw	r3, #5000	; 0x1388
 8007906:	2228      	movs	r2, #40	; 0x28
 8007908:	21c8      	movs	r1, #200	; 0xc8
 800790a:	f242 7010 	movw	r0, #10000	; 0x2710
 800790e:	f7fd fe15 	bl	800553c <slalomF>
 8007912:	e00a      	b.n	800792a <v_R45+0x52>
		}else{
			slalomF(10000, SPEED_1, V45_OFFSET_VF, NO_WALL, NO_WALL);
 8007914:	f241 3388 	movw	r3, #5000	; 0x1388
 8007918:	9300      	str	r3, [sp, #0]
 800791a:	f241 3388 	movw	r3, #5000	; 0x1388
 800791e:	2255      	movs	r2, #85	; 0x55
 8007920:	21c8      	movs	r1, #200	; 0xc8
 8007922:	f242 7010 	movw	r0, #10000	; 0x2710
 8007926:	f7fd fe09 	bl	800553c <slalomF>
		}
		slalomR(-V45_DEGACCEL, -V45_OMEGA, -45, SPEED_1);
 800792a:	23c8      	movs	r3, #200	; 0xc8
 800792c:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007930:	49ae      	ldr	r1, [pc, #696]	; (8007bec <v_R45+0x314>)
 8007932:	48af      	ldr	r0, [pc, #700]	; (8007bf0 <v_R45+0x318>)
 8007934:	f7fd fe7a 	bl	800562c <slalomR>

		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007938:	2103      	movs	r1, #3
 800793a:	2001      	movs	r0, #1
 800793c:	f008 fd60 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007940:	4ba9      	ldr	r3, [pc, #676]	; (8007be8 <v_R45+0x310>)
 8007942:	881b      	ldrh	r3, [r3, #0]
 8007944:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007948:	b2db      	uxtb	r3, r3
 800794a:	3301      	adds	r3, #1
 800794c:	2b00      	cmp	r3, #0
 800794e:	f003 0301 	and.w	r3, r3, #1
 8007952:	bfb8      	it	lt
 8007954:	425b      	neglt	r3, r3
 8007956:	f003 0301 	and.w	r3, r3, #1
 800795a:	b2d9      	uxtb	r1, r3
 800795c:	4aa2      	ldr	r2, [pc, #648]	; (8007be8 <v_R45+0x310>)
 800795e:	8813      	ldrh	r3, [r2, #0]
 8007960:	f361 03c3 	bfi	r3, r1, #3, #1
 8007964:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 8007966:	4ba0      	ldr	r3, [pc, #640]	; (8007be8 <v_R45+0x310>)
 8007968:	881b      	ldrh	r3, [r3, #0]
 800796a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800796e:	b2db      	uxtb	r3, r3
 8007970:	2b00      	cmp	r3, #0
 8007972:	d106      	bne.n	8007982 <v_R45+0xaa>
			slalomB(10000, SPEED_1, V45_OFFSET_VB);
 8007974:	2228      	movs	r2, #40	; 0x28
 8007976:	21c8      	movs	r1, #200	; 0xc8
 8007978:	f242 7010 	movw	r0, #10000	; 0x2710
 800797c:	f7fd ffb0 	bl	80058e0 <slalomB>
			slalomB(10000, SPEED_5, V45_5_OFFSET_VB);
		}else{
			slalomB(10000, SPEED_5, V45_5_OFFSET_B);
		}
	}
}
 8007980:	e1d8      	b.n	8007d34 <v_R45+0x45c>
			slalomB(10000, SPEED_1, V45_OFFSET_B);
 8007982:	2255      	movs	r2, #85	; 0x55
 8007984:	21c8      	movs	r1, #200	; 0xc8
 8007986:	f242 7010 	movw	r0, #10000	; 0x2710
 800798a:	f7fd ffa9 	bl	80058e0 <slalomB>
}
 800798e:	e1d1      	b.n	8007d34 <v_R45+0x45c>
	}else if(run_mode == 2){
 8007990:	4b94      	ldr	r3, [pc, #592]	; (8007be4 <v_R45+0x30c>)
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b02      	cmp	r3, #2
 8007998:	d155      	bne.n	8007a46 <v_R45+0x16e>
		if(!MF2.FLAG.V){
 800799a:	4b93      	ldr	r3, [pc, #588]	; (8007be8 <v_R45+0x310>)
 800799c:	881b      	ldrh	r3, [r3, #0]
 800799e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10c      	bne.n	80079c2 <v_R45+0xea>
			slalomF(10000, SPEED_2, V45_2_OFFSET_F, NO_WALL, NO_WALL);
 80079a8:	f241 3388 	movw	r3, #5000	; 0x1388
 80079ac:	9300      	str	r3, [sp, #0]
 80079ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80079b2:	2228      	movs	r2, #40	; 0x28
 80079b4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80079b8:	f242 7010 	movw	r0, #10000	; 0x2710
 80079bc:	f7fd fdbe 	bl	800553c <slalomF>
 80079c0:	e00b      	b.n	80079da <v_R45+0x102>
			slalomF(10000, SPEED_2, V45_2_OFFSET_VF, NO_WALL, NO_WALL);
 80079c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80079c6:	9300      	str	r3, [sp, #0]
 80079c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80079cc:	2255      	movs	r2, #85	; 0x55
 80079ce:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80079d2:	f242 7010 	movw	r0, #10000	; 0x2710
 80079d6:	f7fd fdb1 	bl	800553c <slalomF>
		slalomR(-V45_2_DEGACCEL, -V45_2_OMEGA, -45, SPEED_2);
 80079da:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80079de:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 80079e2:	4982      	ldr	r1, [pc, #520]	; (8007bec <v_R45+0x314>)
 80079e4:	4882      	ldr	r0, [pc, #520]	; (8007bf0 <v_R45+0x318>)
 80079e6:	f7fd fe21 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80079ea:	2103      	movs	r1, #3
 80079ec:	2001      	movs	r0, #1
 80079ee:	f008 fd07 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80079f2:	4b7d      	ldr	r3, [pc, #500]	; (8007be8 <v_R45+0x310>)
 80079f4:	881b      	ldrh	r3, [r3, #0]
 80079f6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	3301      	adds	r3, #1
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f003 0301 	and.w	r3, r3, #1
 8007a04:	bfb8      	it	lt
 8007a06:	425b      	neglt	r3, r3
 8007a08:	f003 0301 	and.w	r3, r3, #1
 8007a0c:	b2d9      	uxtb	r1, r3
 8007a0e:	4a76      	ldr	r2, [pc, #472]	; (8007be8 <v_R45+0x310>)
 8007a10:	8813      	ldrh	r3, [r2, #0]
 8007a12:	f361 03c3 	bfi	r3, r1, #3, #1
 8007a16:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007a18:	4b73      	ldr	r3, [pc, #460]	; (8007be8 <v_R45+0x310>)
 8007a1a:	881b      	ldrh	r3, [r3, #0]
 8007a1c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d107      	bne.n	8007a36 <v_R45+0x15e>
			slalomB(10000, SPEED_2, V45_2_OFFSET_VB);
 8007a26:	2228      	movs	r2, #40	; 0x28
 8007a28:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007a2c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007a30:	f7fd ff56 	bl	80058e0 <slalomB>
}
 8007a34:	e17e      	b.n	8007d34 <v_R45+0x45c>
			slalomB(10000, SPEED_2, V45_2_OFFSET_B);
 8007a36:	2255      	movs	r2, #85	; 0x55
 8007a38:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007a3c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007a40:	f7fd ff4e 	bl	80058e0 <slalomB>
}
 8007a44:	e176      	b.n	8007d34 <v_R45+0x45c>
	}else if(run_mode == 3){
 8007a46:	4b67      	ldr	r3, [pc, #412]	; (8007be4 <v_R45+0x30c>)
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	2b03      	cmp	r3, #3
 8007a4e:	d155      	bne.n	8007afc <v_R45+0x224>
		if(!MF2.FLAG.V){
 8007a50:	4b65      	ldr	r3, [pc, #404]	; (8007be8 <v_R45+0x310>)
 8007a52:	881b      	ldrh	r3, [r3, #0]
 8007a54:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d10c      	bne.n	8007a78 <v_R45+0x1a0>
			slalomF(10000, SPEED_3, V45_3_OFFSET_F, NO_WALL, NO_WALL);
 8007a5e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a62:	9300      	str	r3, [sp, #0]
 8007a64:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a68:	2228      	movs	r2, #40	; 0x28
 8007a6a:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007a6e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007a72:	f7fd fd63 	bl	800553c <slalomF>
 8007a76:	e00b      	b.n	8007a90 <v_R45+0x1b8>
			slalomF(10000, SPEED_3, V45_3_OFFSET_VF, NO_WALL, NO_WALL);
 8007a78:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a82:	2249      	movs	r2, #73	; 0x49
 8007a84:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007a88:	f242 7010 	movw	r0, #10000	; 0x2710
 8007a8c:	f7fd fd56 	bl	800553c <slalomF>
		slalomR(-V45_3_DEGACCEL, -V45_3_OMEGA, -45, SPEED_3);
 8007a90:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007a94:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007a98:	4956      	ldr	r1, [pc, #344]	; (8007bf4 <v_R45+0x31c>)
 8007a9a:	4857      	ldr	r0, [pc, #348]	; (8007bf8 <v_R45+0x320>)
 8007a9c:	f7fd fdc6 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007aa0:	2103      	movs	r1, #3
 8007aa2:	2001      	movs	r0, #1
 8007aa4:	f008 fcac 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007aa8:	4b4f      	ldr	r3, [pc, #316]	; (8007be8 <v_R45+0x310>)
 8007aaa:	881b      	ldrh	r3, [r3, #0]
 8007aac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f003 0301 	and.w	r3, r3, #1
 8007aba:	bfb8      	it	lt
 8007abc:	425b      	neglt	r3, r3
 8007abe:	f003 0301 	and.w	r3, r3, #1
 8007ac2:	b2d9      	uxtb	r1, r3
 8007ac4:	4a48      	ldr	r2, [pc, #288]	; (8007be8 <v_R45+0x310>)
 8007ac6:	8813      	ldrh	r3, [r2, #0]
 8007ac8:	f361 03c3 	bfi	r3, r1, #3, #1
 8007acc:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007ace:	4b46      	ldr	r3, [pc, #280]	; (8007be8 <v_R45+0x310>)
 8007ad0:	881b      	ldrh	r3, [r3, #0]
 8007ad2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d107      	bne.n	8007aec <v_R45+0x214>
			slalomB(10000, SPEED_3, V45_3_OFFSET_VB);
 8007adc:	2237      	movs	r2, #55	; 0x37
 8007ade:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007ae2:	f242 7010 	movw	r0, #10000	; 0x2710
 8007ae6:	f7fd fefb 	bl	80058e0 <slalomB>
}
 8007aea:	e123      	b.n	8007d34 <v_R45+0x45c>
			slalomB(10000, SPEED_3, V45_3_OFFSET_B);
 8007aec:	225d      	movs	r2, #93	; 0x5d
 8007aee:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007af2:	f242 7010 	movw	r0, #10000	; 0x2710
 8007af6:	f7fd fef3 	bl	80058e0 <slalomB>
}
 8007afa:	e11b      	b.n	8007d34 <v_R45+0x45c>
	}else if(run_mode == 4){
 8007afc:	4b39      	ldr	r3, [pc, #228]	; (8007be4 <v_R45+0x30c>)
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	2b04      	cmp	r3, #4
 8007b04:	d155      	bne.n	8007bb2 <v_R45+0x2da>
		if(!MF2.FLAG.V){
 8007b06:	4b38      	ldr	r3, [pc, #224]	; (8007be8 <v_R45+0x310>)
 8007b08:	881b      	ldrh	r3, [r3, #0]
 8007b0a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d10c      	bne.n	8007b2e <v_R45+0x256>
			slalomF(10000, SPEED_4, V45_4_OFFSET_F, NO_WALL, NO_WALL);
 8007b14:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b18:	9300      	str	r3, [sp, #0]
 8007b1a:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b1e:	2217      	movs	r2, #23
 8007b20:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007b24:	f242 7010 	movw	r0, #10000	; 0x2710
 8007b28:	f7fd fd08 	bl	800553c <slalomF>
 8007b2c:	e00b      	b.n	8007b46 <v_R45+0x26e>
			slalomF(10000, SPEED_4, V45_4_OFFSET_VF, NO_WALL, NO_WALL);
 8007b2e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b32:	9300      	str	r3, [sp, #0]
 8007b34:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b38:	2237      	movs	r2, #55	; 0x37
 8007b3a:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007b3e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007b42:	f7fd fcfb 	bl	800553c <slalomF>
		slalomR(-V45_4_DEGACCEL, -V45_4_OMEGA, -45, SPEED_4);
 8007b46:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007b4a:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007b4e:	4929      	ldr	r1, [pc, #164]	; (8007bf4 <v_R45+0x31c>)
 8007b50:	4829      	ldr	r0, [pc, #164]	; (8007bf8 <v_R45+0x320>)
 8007b52:	f7fd fd6b 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007b56:	2103      	movs	r1, #3
 8007b58:	2001      	movs	r0, #1
 8007b5a:	f008 fc51 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007b5e:	4b22      	ldr	r3, [pc, #136]	; (8007be8 <v_R45+0x310>)
 8007b60:	881b      	ldrh	r3, [r3, #0]
 8007b62:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	3301      	adds	r3, #1
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f003 0301 	and.w	r3, r3, #1
 8007b70:	bfb8      	it	lt
 8007b72:	425b      	neglt	r3, r3
 8007b74:	f003 0301 	and.w	r3, r3, #1
 8007b78:	b2d9      	uxtb	r1, r3
 8007b7a:	4a1b      	ldr	r2, [pc, #108]	; (8007be8 <v_R45+0x310>)
 8007b7c:	8813      	ldrh	r3, [r2, #0]
 8007b7e:	f361 03c3 	bfi	r3, r1, #3, #1
 8007b82:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007b84:	4b18      	ldr	r3, [pc, #96]	; (8007be8 <v_R45+0x310>)
 8007b86:	881b      	ldrh	r3, [r3, #0]
 8007b88:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d107      	bne.n	8007ba2 <v_R45+0x2ca>
			slalomB(10000, SPEED_4, V45_4_OFFSET_VB);
 8007b92:	2233      	movs	r2, #51	; 0x33
 8007b94:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007b98:	f242 7010 	movw	r0, #10000	; 0x2710
 8007b9c:	f7fd fea0 	bl	80058e0 <slalomB>
}
 8007ba0:	e0c8      	b.n	8007d34 <v_R45+0x45c>
			slalomB(10000, SPEED_4, V45_4_OFFSET_B);
 8007ba2:	224b      	movs	r2, #75	; 0x4b
 8007ba4:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007ba8:	f242 7010 	movw	r0, #10000	; 0x2710
 8007bac:	f7fd fe98 	bl	80058e0 <slalomB>
}
 8007bb0:	e0c0      	b.n	8007d34 <v_R45+0x45c>
	}else if(run_mode == 5){
 8007bb2:	4b0c      	ldr	r3, [pc, #48]	; (8007be4 <v_R45+0x30c>)
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	2b05      	cmp	r3, #5
 8007bba:	d161      	bne.n	8007c80 <v_R45+0x3a8>
		if(!MF2.FLAG.V){
 8007bbc:	4b0a      	ldr	r3, [pc, #40]	; (8007be8 <v_R45+0x310>)
 8007bbe:	881b      	ldrh	r3, [r3, #0]
 8007bc0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d118      	bne.n	8007bfc <v_R45+0x324>
			slalomF(10000, SPEED_5, V45_5_OFFSET_F, NO_WALL, NO_WALL);
 8007bca:	f241 3388 	movw	r3, #5000	; 0x1388
 8007bce:	9300      	str	r3, [sp, #0]
 8007bd0:	f241 3388 	movw	r3, #5000	; 0x1388
 8007bd4:	2214      	movs	r2, #20
 8007bd6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007bda:	f242 7010 	movw	r0, #10000	; 0x2710
 8007bde:	f7fd fcad 	bl	800553c <slalomF>
 8007be2:	e017      	b.n	8007c14 <v_R45+0x33c>
 8007be4:	20000456 	.word	0x20000456
 8007be8:	20000fa4 	.word	0x20000fa4
 8007bec:	fffffed4 	.word	0xfffffed4
 8007bf0:	fffff448 	.word	0xfffff448
 8007bf4:	fffffe70 	.word	0xfffffe70
 8007bf8:	ffffe0c0 	.word	0xffffe0c0
			slalomF(10000, SPEED_5, V45_5_OFFSET_VF, NO_WALL, NO_WALL);
 8007bfc:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c00:	9300      	str	r3, [sp, #0]
 8007c02:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c06:	2214      	movs	r2, #20
 8007c08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007c0c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007c10:	f7fd fc94 	bl	800553c <slalomF>
		slalomR(-V45_5_DEGACCEL, -V45_5_OMEGA, -45, SPEED_5);
 8007c14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c18:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007c1c:	4947      	ldr	r1, [pc, #284]	; (8007d3c <v_R45+0x464>)
 8007c1e:	4848      	ldr	r0, [pc, #288]	; (8007d40 <v_R45+0x468>)
 8007c20:	f7fd fd04 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007c24:	2103      	movs	r1, #3
 8007c26:	2001      	movs	r0, #1
 8007c28:	f008 fbea 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007c2c:	4b45      	ldr	r3, [pc, #276]	; (8007d44 <v_R45+0x46c>)
 8007c2e:	881b      	ldrh	r3, [r3, #0]
 8007c30:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	3301      	adds	r3, #1
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f003 0301 	and.w	r3, r3, #1
 8007c3e:	bfb8      	it	lt
 8007c40:	425b      	neglt	r3, r3
 8007c42:	f003 0301 	and.w	r3, r3, #1
 8007c46:	b2d9      	uxtb	r1, r3
 8007c48:	4a3e      	ldr	r2, [pc, #248]	; (8007d44 <v_R45+0x46c>)
 8007c4a:	8813      	ldrh	r3, [r2, #0]
 8007c4c:	f361 03c3 	bfi	r3, r1, #3, #1
 8007c50:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007c52:	4b3c      	ldr	r3, [pc, #240]	; (8007d44 <v_R45+0x46c>)
 8007c54:	881b      	ldrh	r3, [r3, #0]
 8007c56:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d107      	bne.n	8007c70 <v_R45+0x398>
			slalomB(10000, SPEED_5, V45_5_OFFSET_VB);
 8007c60:	223a      	movs	r2, #58	; 0x3a
 8007c62:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007c66:	f242 7010 	movw	r0, #10000	; 0x2710
 8007c6a:	f7fd fe39 	bl	80058e0 <slalomB>
}
 8007c6e:	e061      	b.n	8007d34 <v_R45+0x45c>
			slalomB(10000, SPEED_5, V45_5_OFFSET_B);
 8007c70:	223a      	movs	r2, #58	; 0x3a
 8007c72:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007c76:	f242 7010 	movw	r0, #10000	; 0x2710
 8007c7a:	f7fd fe31 	bl	80058e0 <slalomB>
}
 8007c7e:	e059      	b.n	8007d34 <v_R45+0x45c>
	}else if(run_mode == 6){
 8007c80:	4b31      	ldr	r3, [pc, #196]	; (8007d48 <v_R45+0x470>)
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	2b06      	cmp	r3, #6
 8007c88:	d154      	bne.n	8007d34 <v_R45+0x45c>
		if(!MF2.FLAG.V){
 8007c8a:	4b2e      	ldr	r3, [pc, #184]	; (8007d44 <v_R45+0x46c>)
 8007c8c:	881b      	ldrh	r3, [r3, #0]
 8007c8e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d10c      	bne.n	8007cb2 <v_R45+0x3da>
			slalomF(10000, SPEED_5, V45_5_OFFSET_F, NO_WALL, NO_WALL);
 8007c98:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c9c:	9300      	str	r3, [sp, #0]
 8007c9e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ca2:	2214      	movs	r2, #20
 8007ca4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007ca8:	f242 7010 	movw	r0, #10000	; 0x2710
 8007cac:	f7fd fc46 	bl	800553c <slalomF>
 8007cb0:	e00b      	b.n	8007cca <v_R45+0x3f2>
			slalomF(10000, SPEED_5, V45_5_OFFSET_VF, NO_WALL, NO_WALL);
 8007cb2:	f241 3388 	movw	r3, #5000	; 0x1388
 8007cb6:	9300      	str	r3, [sp, #0]
 8007cb8:	f241 3388 	movw	r3, #5000	; 0x1388
 8007cbc:	2214      	movs	r2, #20
 8007cbe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007cc2:	f242 7010 	movw	r0, #10000	; 0x2710
 8007cc6:	f7fd fc39 	bl	800553c <slalomF>
		slalomR(-V45_5_DEGACCEL, -V45_5_OMEGA, -45, SPEED_5);
 8007cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007cce:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007cd2:	491a      	ldr	r1, [pc, #104]	; (8007d3c <v_R45+0x464>)
 8007cd4:	481a      	ldr	r0, [pc, #104]	; (8007d40 <v_R45+0x468>)
 8007cd6:	f7fd fca9 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007cda:	2103      	movs	r1, #3
 8007cdc:	2001      	movs	r0, #1
 8007cde:	f008 fb8f 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007ce2:	4b18      	ldr	r3, [pc, #96]	; (8007d44 <v_R45+0x46c>)
 8007ce4:	881b      	ldrh	r3, [r3, #0]
 8007ce6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	3301      	adds	r3, #1
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f003 0301 	and.w	r3, r3, #1
 8007cf4:	bfb8      	it	lt
 8007cf6:	425b      	neglt	r3, r3
 8007cf8:	f003 0301 	and.w	r3, r3, #1
 8007cfc:	b2d9      	uxtb	r1, r3
 8007cfe:	4a11      	ldr	r2, [pc, #68]	; (8007d44 <v_R45+0x46c>)
 8007d00:	8813      	ldrh	r3, [r2, #0]
 8007d02:	f361 03c3 	bfi	r3, r1, #3, #1
 8007d06:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007d08:	4b0e      	ldr	r3, [pc, #56]	; (8007d44 <v_R45+0x46c>)
 8007d0a:	881b      	ldrh	r3, [r3, #0]
 8007d0c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d107      	bne.n	8007d26 <v_R45+0x44e>
			slalomB(10000, SPEED_5, V45_5_OFFSET_VB);
 8007d16:	223a      	movs	r2, #58	; 0x3a
 8007d18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007d1c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d20:	f7fd fdde 	bl	80058e0 <slalomB>
}
 8007d24:	e006      	b.n	8007d34 <v_R45+0x45c>
			slalomB(10000, SPEED_5, V45_5_OFFSET_B);
 8007d26:	223a      	movs	r2, #58	; 0x3a
 8007d28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007d2c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d30:	f7fd fdd6 	bl	80058e0 <slalomB>
}
 8007d34:	bf00      	nop
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	fffffda8 	.word	0xfffffda8
 8007d40:	ffffd8f0 	.word	0xffffd8f0
 8007d44:	20000fa4 	.word	0x20000fa4
 8007d48:	20000456 	.word	0x20000456

08007d4c <v_L45>:
//v_L45
// 区画中心から左に45度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L45(void){
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af02      	add	r7, sp, #8
	full_led_write1(YELLOW);
 8007d52:	2006      	movs	r0, #6
 8007d54:	f00a f9e8 	bl	8012128 <full_led_write1>
	if(run_mode == 1){
 8007d58:	4bc1      	ldr	r3, [pc, #772]	; (8008060 <v_L45+0x314>)
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d151      	bne.n	8007e06 <v_L45+0xba>
		if(!MF2.FLAG.V){
 8007d62:	4bc0      	ldr	r3, [pc, #768]	; (8008064 <v_L45+0x318>)
 8007d64:	881b      	ldrh	r3, [r3, #0]
 8007d66:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d10b      	bne.n	8007d88 <v_L45+0x3c>
			slalomF(10000, SPEED_1, V45_OFFSET_F, NO_WALL, NO_WALL);
 8007d70:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d74:	9300      	str	r3, [sp, #0]
 8007d76:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d7a:	2228      	movs	r2, #40	; 0x28
 8007d7c:	21c8      	movs	r1, #200	; 0xc8
 8007d7e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d82:	f7fd fbdb 	bl	800553c <slalomF>
 8007d86:	e00a      	b.n	8007d9e <v_L45+0x52>
		}else{
			slalomF(10000, SPEED_1, V45_OFFSET_VF, NO_WALL, NO_WALL);
 8007d88:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d8c:	9300      	str	r3, [sp, #0]
 8007d8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d92:	2255      	movs	r2, #85	; 0x55
 8007d94:	21c8      	movs	r1, #200	; 0xc8
 8007d96:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d9a:	f7fd fbcf 	bl	800553c <slalomF>
		}
		slalomR(V45_DEGACCEL, V45_OMEGA, 45, SPEED_1);
 8007d9e:	23c8      	movs	r3, #200	; 0xc8
 8007da0:	222d      	movs	r2, #45	; 0x2d
 8007da2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007da6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007daa:	f7fd fc3f 	bl	800562c <slalomR>

		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007dae:	2103      	movs	r1, #3
 8007db0:	20ff      	movs	r0, #255	; 0xff
 8007db2:	f008 fb25 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007db6:	4bab      	ldr	r3, [pc, #684]	; (8008064 <v_L45+0x318>)
 8007db8:	881b      	ldrh	r3, [r3, #0]
 8007dba:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	f003 0301 	and.w	r3, r3, #1
 8007dc8:	bfb8      	it	lt
 8007dca:	425b      	neglt	r3, r3
 8007dcc:	f003 0301 	and.w	r3, r3, #1
 8007dd0:	b2d9      	uxtb	r1, r3
 8007dd2:	4aa4      	ldr	r2, [pc, #656]	; (8008064 <v_L45+0x318>)
 8007dd4:	8813      	ldrh	r3, [r2, #0]
 8007dd6:	f361 03c3 	bfi	r3, r1, #3, #1
 8007dda:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 8007ddc:	4ba1      	ldr	r3, [pc, #644]	; (8008064 <v_L45+0x318>)
 8007dde:	881b      	ldrh	r3, [r3, #0]
 8007de0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d106      	bne.n	8007df8 <v_L45+0xac>
			slalomB(10000, SPEED_1, V45_OFFSET_VB);
 8007dea:	2228      	movs	r2, #40	; 0x28
 8007dec:	21c8      	movs	r1, #200	; 0xc8
 8007dee:	f242 7010 	movw	r0, #10000	; 0x2710
 8007df2:	f7fd fd75 	bl	80058e0 <slalomB>
			slalomB(10000, SPEED_5, V45_5_OFFSET_VB);
		}else{
			slalomB(10000, SPEED_5, V45_5_OFFSET_B);
		}
	}
}
 8007df6:	e1d5      	b.n	80081a4 <v_L45+0x458>
			slalomB(10000, SPEED_1, V45_OFFSET_B);
 8007df8:	2255      	movs	r2, #85	; 0x55
 8007dfa:	21c8      	movs	r1, #200	; 0xc8
 8007dfc:	f242 7010 	movw	r0, #10000	; 0x2710
 8007e00:	f7fd fd6e 	bl	80058e0 <slalomB>
}
 8007e04:	e1ce      	b.n	80081a4 <v_L45+0x458>
	}else if(run_mode == 2){
 8007e06:	4b96      	ldr	r3, [pc, #600]	; (8008060 <v_L45+0x314>)
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	2b02      	cmp	r3, #2
 8007e0e:	d156      	bne.n	8007ebe <v_L45+0x172>
		if(!MF2.FLAG.V){
 8007e10:	4b94      	ldr	r3, [pc, #592]	; (8008064 <v_L45+0x318>)
 8007e12:	881b      	ldrh	r3, [r3, #0]
 8007e14:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10c      	bne.n	8007e38 <v_L45+0xec>
			slalomF(10000, SPEED_2, V45_2_OFFSET_F, NO_WALL, NO_WALL);
 8007e1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e22:	9300      	str	r3, [sp, #0]
 8007e24:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e28:	2228      	movs	r2, #40	; 0x28
 8007e2a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007e2e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007e32:	f7fd fb83 	bl	800553c <slalomF>
 8007e36:	e00b      	b.n	8007e50 <v_L45+0x104>
			slalomF(10000, SPEED_2, V45_2_OFFSET_VF, NO_WALL, NO_WALL);
 8007e38:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e3c:	9300      	str	r3, [sp, #0]
 8007e3e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e42:	2255      	movs	r2, #85	; 0x55
 8007e44:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007e48:	f242 7010 	movw	r0, #10000	; 0x2710
 8007e4c:	f7fd fb76 	bl	800553c <slalomF>
		slalomR(V45_2_DEGACCEL, V45_2_OMEGA, 45, SPEED_2);
 8007e50:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007e54:	222d      	movs	r2, #45	; 0x2d
 8007e56:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007e5a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007e5e:	f7fd fbe5 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007e62:	2103      	movs	r1, #3
 8007e64:	20ff      	movs	r0, #255	; 0xff
 8007e66:	f008 facb 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007e6a:	4b7e      	ldr	r3, [pc, #504]	; (8008064 <v_L45+0x318>)
 8007e6c:	881b      	ldrh	r3, [r3, #0]
 8007e6e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	3301      	adds	r3, #1
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f003 0301 	and.w	r3, r3, #1
 8007e7c:	bfb8      	it	lt
 8007e7e:	425b      	neglt	r3, r3
 8007e80:	f003 0301 	and.w	r3, r3, #1
 8007e84:	b2d9      	uxtb	r1, r3
 8007e86:	4a77      	ldr	r2, [pc, #476]	; (8008064 <v_L45+0x318>)
 8007e88:	8813      	ldrh	r3, [r2, #0]
 8007e8a:	f361 03c3 	bfi	r3, r1, #3, #1
 8007e8e:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007e90:	4b74      	ldr	r3, [pc, #464]	; (8008064 <v_L45+0x318>)
 8007e92:	881b      	ldrh	r3, [r3, #0]
 8007e94:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d107      	bne.n	8007eae <v_L45+0x162>
			slalomB(10000, SPEED_2, V45_2_OFFSET_VB);
 8007e9e:	2228      	movs	r2, #40	; 0x28
 8007ea0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007ea4:	f242 7010 	movw	r0, #10000	; 0x2710
 8007ea8:	f7fd fd1a 	bl	80058e0 <slalomB>
}
 8007eac:	e17a      	b.n	80081a4 <v_L45+0x458>
			slalomB(10000, SPEED_2, V45_2_OFFSET_B);
 8007eae:	2255      	movs	r2, #85	; 0x55
 8007eb0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007eb4:	f242 7010 	movw	r0, #10000	; 0x2710
 8007eb8:	f7fd fd12 	bl	80058e0 <slalomB>
}
 8007ebc:	e172      	b.n	80081a4 <v_L45+0x458>
	}else if(run_mode == 3){
 8007ebe:	4b68      	ldr	r3, [pc, #416]	; (8008060 <v_L45+0x314>)
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	2b03      	cmp	r3, #3
 8007ec6:	d156      	bne.n	8007f76 <v_L45+0x22a>
		if(!MF2.FLAG.V){
 8007ec8:	4b66      	ldr	r3, [pc, #408]	; (8008064 <v_L45+0x318>)
 8007eca:	881b      	ldrh	r3, [r3, #0]
 8007ecc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d10c      	bne.n	8007ef0 <v_L45+0x1a4>
			slalomF(10000, SPEED_3, V45_3_OFFSET_F+5, NO_WALL, NO_WALL);
 8007ed6:	f241 3388 	movw	r3, #5000	; 0x1388
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ee0:	222d      	movs	r2, #45	; 0x2d
 8007ee2:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007ee6:	f242 7010 	movw	r0, #10000	; 0x2710
 8007eea:	f7fd fb27 	bl	800553c <slalomF>
 8007eee:	e00b      	b.n	8007f08 <v_L45+0x1bc>
			slalomF(10000, SPEED_3, V45_3_OFFSET_VF, NO_WALL, NO_WALL);
 8007ef0:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ef4:	9300      	str	r3, [sp, #0]
 8007ef6:	f241 3388 	movw	r3, #5000	; 0x1388
 8007efa:	2249      	movs	r2, #73	; 0x49
 8007efc:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007f00:	f242 7010 	movw	r0, #10000	; 0x2710
 8007f04:	f7fd fb1a 	bl	800553c <slalomF>
		slalomR(V45_3_DEGACCEL, V45_3_OMEGA, 45, SPEED_3);
 8007f08:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007f0c:	222d      	movs	r2, #45	; 0x2d
 8007f0e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007f12:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007f16:	f7fd fb89 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007f1a:	2103      	movs	r1, #3
 8007f1c:	20ff      	movs	r0, #255	; 0xff
 8007f1e:	f008 fa6f 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007f22:	4b50      	ldr	r3, [pc, #320]	; (8008064 <v_L45+0x318>)
 8007f24:	881b      	ldrh	r3, [r3, #0]
 8007f26:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f003 0301 	and.w	r3, r3, #1
 8007f34:	bfb8      	it	lt
 8007f36:	425b      	neglt	r3, r3
 8007f38:	f003 0301 	and.w	r3, r3, #1
 8007f3c:	b2d9      	uxtb	r1, r3
 8007f3e:	4a49      	ldr	r2, [pc, #292]	; (8008064 <v_L45+0x318>)
 8007f40:	8813      	ldrh	r3, [r2, #0]
 8007f42:	f361 03c3 	bfi	r3, r1, #3, #1
 8007f46:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007f48:	4b46      	ldr	r3, [pc, #280]	; (8008064 <v_L45+0x318>)
 8007f4a:	881b      	ldrh	r3, [r3, #0]
 8007f4c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d107      	bne.n	8007f66 <v_L45+0x21a>
			slalomB(10000, SPEED_3, V45_3_OFFSET_VB);
 8007f56:	2237      	movs	r2, #55	; 0x37
 8007f58:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007f5c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007f60:	f7fd fcbe 	bl	80058e0 <slalomB>
}
 8007f64:	e11e      	b.n	80081a4 <v_L45+0x458>
			slalomB(10000, SPEED_3, V45_3_OFFSET_B);
 8007f66:	225d      	movs	r2, #93	; 0x5d
 8007f68:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007f6c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007f70:	f7fd fcb6 	bl	80058e0 <slalomB>
}
 8007f74:	e116      	b.n	80081a4 <v_L45+0x458>
	}else if(run_mode == 4){
 8007f76:	4b3a      	ldr	r3, [pc, #232]	; (8008060 <v_L45+0x314>)
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	2b04      	cmp	r3, #4
 8007f7e:	d156      	bne.n	800802e <v_L45+0x2e2>
		if(!MF2.FLAG.V){
 8007f80:	4b38      	ldr	r3, [pc, #224]	; (8008064 <v_L45+0x318>)
 8007f82:	881b      	ldrh	r3, [r3, #0]
 8007f84:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10c      	bne.n	8007fa8 <v_L45+0x25c>
			slalomF(10000, SPEED_4, V45_4_OFFSET_F, NO_WALL, NO_WALL);
 8007f8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f98:	2217      	movs	r2, #23
 8007f9a:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007f9e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007fa2:	f7fd facb 	bl	800553c <slalomF>
 8007fa6:	e00b      	b.n	8007fc0 <v_L45+0x274>
			slalomF(10000, SPEED_4, V45_4_OFFSET_VF, NO_WALL, NO_WALL);
 8007fa8:	f241 3388 	movw	r3, #5000	; 0x1388
 8007fac:	9300      	str	r3, [sp, #0]
 8007fae:	f241 3388 	movw	r3, #5000	; 0x1388
 8007fb2:	2237      	movs	r2, #55	; 0x37
 8007fb4:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007fb8:	f242 7010 	movw	r0, #10000	; 0x2710
 8007fbc:	f7fd fabe 	bl	800553c <slalomF>
		slalomR(V45_4_DEGACCEL, V45_4_OMEGA, 45, SPEED_4);
 8007fc0:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007fc4:	222d      	movs	r2, #45	; 0x2d
 8007fc6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007fca:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007fce:	f7fd fb2d 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007fd2:	2103      	movs	r1, #3
 8007fd4:	20ff      	movs	r0, #255	; 0xff
 8007fd6:	f008 fa13 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007fda:	4b22      	ldr	r3, [pc, #136]	; (8008064 <v_L45+0x318>)
 8007fdc:	881b      	ldrh	r3, [r3, #0]
 8007fde:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	f003 0301 	and.w	r3, r3, #1
 8007fec:	bfb8      	it	lt
 8007fee:	425b      	neglt	r3, r3
 8007ff0:	f003 0301 	and.w	r3, r3, #1
 8007ff4:	b2d9      	uxtb	r1, r3
 8007ff6:	4a1b      	ldr	r2, [pc, #108]	; (8008064 <v_L45+0x318>)
 8007ff8:	8813      	ldrh	r3, [r2, #0]
 8007ffa:	f361 03c3 	bfi	r3, r1, #3, #1
 8007ffe:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008000:	4b18      	ldr	r3, [pc, #96]	; (8008064 <v_L45+0x318>)
 8008002:	881b      	ldrh	r3, [r3, #0]
 8008004:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b00      	cmp	r3, #0
 800800c:	d107      	bne.n	800801e <v_L45+0x2d2>
			slalomB(10000, SPEED_4, V45_4_OFFSET_VB);
 800800e:	2233      	movs	r2, #51	; 0x33
 8008010:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008014:	f242 7010 	movw	r0, #10000	; 0x2710
 8008018:	f7fd fc62 	bl	80058e0 <slalomB>
}
 800801c:	e0c2      	b.n	80081a4 <v_L45+0x458>
			slalomB(10000, SPEED_4, V45_4_OFFSET_B);
 800801e:	224b      	movs	r2, #75	; 0x4b
 8008020:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008024:	f242 7010 	movw	r0, #10000	; 0x2710
 8008028:	f7fd fc5a 	bl	80058e0 <slalomB>
}
 800802c:	e0ba      	b.n	80081a4 <v_L45+0x458>
	}else if(run_mode == 5){
 800802e:	4b0c      	ldr	r3, [pc, #48]	; (8008060 <v_L45+0x314>)
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	b2db      	uxtb	r3, r3
 8008034:	2b05      	cmp	r3, #5
 8008036:	d15a      	bne.n	80080ee <v_L45+0x3a2>
		if(!MF2.FLAG.V){
 8008038:	4b0a      	ldr	r3, [pc, #40]	; (8008064 <v_L45+0x318>)
 800803a:	881b      	ldrh	r3, [r3, #0]
 800803c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008040:	b2db      	uxtb	r3, r3
 8008042:	2b00      	cmp	r3, #0
 8008044:	d110      	bne.n	8008068 <v_L45+0x31c>
			slalomF(10000, SPEED_5, V45_5_OFFSET_F, NO_WALL, NO_WALL);
 8008046:	f241 3388 	movw	r3, #5000	; 0x1388
 800804a:	9300      	str	r3, [sp, #0]
 800804c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008050:	2214      	movs	r2, #20
 8008052:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008056:	f242 7010 	movw	r0, #10000	; 0x2710
 800805a:	f7fd fa6f 	bl	800553c <slalomF>
 800805e:	e00f      	b.n	8008080 <v_L45+0x334>
 8008060:	20000456 	.word	0x20000456
 8008064:	20000fa4 	.word	0x20000fa4
			slalomF(10000, SPEED_5, V45_5_OFFSET_VF, NO_WALL, NO_WALL);
 8008068:	f241 3388 	movw	r3, #5000	; 0x1388
 800806c:	9300      	str	r3, [sp, #0]
 800806e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008072:	2214      	movs	r2, #20
 8008074:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008078:	f242 7010 	movw	r0, #10000	; 0x2710
 800807c:	f7fd fa5e 	bl	800553c <slalomF>
		slalomR(V45_5_DEGACCEL, V45_5_OMEGA, 45, SPEED_5);
 8008080:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008084:	222d      	movs	r2, #45	; 0x2d
 8008086:	f44f 7116 	mov.w	r1, #600	; 0x258
 800808a:	f242 7010 	movw	r0, #10000	; 0x2710
 800808e:	f7fd facd 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008092:	2103      	movs	r1, #3
 8008094:	20ff      	movs	r0, #255	; 0xff
 8008096:	f008 f9b3 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800809a:	4b44      	ldr	r3, [pc, #272]	; (80081ac <v_L45+0x460>)
 800809c:	881b      	ldrh	r3, [r3, #0]
 800809e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	3301      	adds	r3, #1
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	f003 0301 	and.w	r3, r3, #1
 80080ac:	bfb8      	it	lt
 80080ae:	425b      	neglt	r3, r3
 80080b0:	f003 0301 	and.w	r3, r3, #1
 80080b4:	b2d9      	uxtb	r1, r3
 80080b6:	4a3d      	ldr	r2, [pc, #244]	; (80081ac <v_L45+0x460>)
 80080b8:	8813      	ldrh	r3, [r2, #0]
 80080ba:	f361 03c3 	bfi	r3, r1, #3, #1
 80080be:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 80080c0:	4b3a      	ldr	r3, [pc, #232]	; (80081ac <v_L45+0x460>)
 80080c2:	881b      	ldrh	r3, [r3, #0]
 80080c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d107      	bne.n	80080de <v_L45+0x392>
			slalomB(10000, SPEED_5, V45_5_OFFSET_VB);
 80080ce:	223a      	movs	r2, #58	; 0x3a
 80080d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80080d4:	f242 7010 	movw	r0, #10000	; 0x2710
 80080d8:	f7fd fc02 	bl	80058e0 <slalomB>
}
 80080dc:	e062      	b.n	80081a4 <v_L45+0x458>
			slalomB(10000, SPEED_5, V45_5_OFFSET_B);
 80080de:	223a      	movs	r2, #58	; 0x3a
 80080e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80080e4:	f242 7010 	movw	r0, #10000	; 0x2710
 80080e8:	f7fd fbfa 	bl	80058e0 <slalomB>
}
 80080ec:	e05a      	b.n	80081a4 <v_L45+0x458>
	}else if(run_mode == 6){
 80080ee:	4b30      	ldr	r3, [pc, #192]	; (80081b0 <v_L45+0x464>)
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	2b06      	cmp	r3, #6
 80080f6:	d155      	bne.n	80081a4 <v_L45+0x458>
		if(!MF2.FLAG.V){
 80080f8:	4b2c      	ldr	r3, [pc, #176]	; (80081ac <v_L45+0x460>)
 80080fa:	881b      	ldrh	r3, [r3, #0]
 80080fc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008100:	b2db      	uxtb	r3, r3
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10c      	bne.n	8008120 <v_L45+0x3d4>
			slalomF(10000, SPEED_5, V45_5_OFFSET_F, NO_WALL, NO_WALL);
 8008106:	f241 3388 	movw	r3, #5000	; 0x1388
 800810a:	9300      	str	r3, [sp, #0]
 800810c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008110:	2214      	movs	r2, #20
 8008112:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008116:	f242 7010 	movw	r0, #10000	; 0x2710
 800811a:	f7fd fa0f 	bl	800553c <slalomF>
 800811e:	e00b      	b.n	8008138 <v_L45+0x3ec>
			slalomF(10000, SPEED_5, V45_5_OFFSET_VF, NO_WALL, NO_WALL);
 8008120:	f241 3388 	movw	r3, #5000	; 0x1388
 8008124:	9300      	str	r3, [sp, #0]
 8008126:	f241 3388 	movw	r3, #5000	; 0x1388
 800812a:	2214      	movs	r2, #20
 800812c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008130:	f242 7010 	movw	r0, #10000	; 0x2710
 8008134:	f7fd fa02 	bl	800553c <slalomF>
		slalomR(V45_5_DEGACCEL, V45_5_OMEGA, 45, SPEED_5);
 8008138:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800813c:	222d      	movs	r2, #45	; 0x2d
 800813e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008142:	f242 7010 	movw	r0, #10000	; 0x2710
 8008146:	f7fd fa71 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800814a:	2103      	movs	r1, #3
 800814c:	20ff      	movs	r0, #255	; 0xff
 800814e:	f008 f957 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008152:	4b16      	ldr	r3, [pc, #88]	; (80081ac <v_L45+0x460>)
 8008154:	881b      	ldrh	r3, [r3, #0]
 8008156:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800815a:	b2db      	uxtb	r3, r3
 800815c:	3301      	adds	r3, #1
 800815e:	2b00      	cmp	r3, #0
 8008160:	f003 0301 	and.w	r3, r3, #1
 8008164:	bfb8      	it	lt
 8008166:	425b      	neglt	r3, r3
 8008168:	f003 0301 	and.w	r3, r3, #1
 800816c:	b2d9      	uxtb	r1, r3
 800816e:	4a0f      	ldr	r2, [pc, #60]	; (80081ac <v_L45+0x460>)
 8008170:	8813      	ldrh	r3, [r2, #0]
 8008172:	f361 03c3 	bfi	r3, r1, #3, #1
 8008176:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008178:	4b0c      	ldr	r3, [pc, #48]	; (80081ac <v_L45+0x460>)
 800817a:	881b      	ldrh	r3, [r3, #0]
 800817c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008180:	b2db      	uxtb	r3, r3
 8008182:	2b00      	cmp	r3, #0
 8008184:	d107      	bne.n	8008196 <v_L45+0x44a>
			slalomB(10000, SPEED_5, V45_5_OFFSET_VB);
 8008186:	223a      	movs	r2, #58	; 0x3a
 8008188:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800818c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008190:	f7fd fba6 	bl	80058e0 <slalomB>
}
 8008194:	e006      	b.n	80081a4 <v_L45+0x458>
			slalomB(10000, SPEED_5, V45_5_OFFSET_B);
 8008196:	223a      	movs	r2, #58	; 0x3a
 8008198:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800819c:	f242 7010 	movw	r0, #10000	; 0x2710
 80081a0:	f7fd fb9e 	bl	80058e0 <slalomB>
}
 80081a4:	bf00      	nop
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	20000fa4 	.word	0x20000fa4
 80081b0:	20000456 	.word	0x20000456

080081b4 <v_R45D>:
//v_R45D
//a区画中心から右に45度回転する　ゴール用
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R45D(void){
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af02      	add	r7, sp, #8
	full_led_write1(PURPLE);
 80081ba:	2005      	movs	r0, #5
 80081bc:	f009 ffb4 	bl	8012128 <full_led_write1>
	if(run_mode == 1){
 80081c0:	4bbb      	ldr	r3, [pc, #748]	; (80084b0 <v_R45D+0x2fc>)
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d135      	bne.n	8008236 <v_R45D+0x82>
		slalomF(10000, SPEED_1, V45_OFFSET_VF, NO_WALL, NO_WALL);
 80081ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80081ce:	9300      	str	r3, [sp, #0]
 80081d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80081d4:	2255      	movs	r2, #85	; 0x55
 80081d6:	21c8      	movs	r1, #200	; 0xc8
 80081d8:	f242 7010 	movw	r0, #10000	; 0x2710
 80081dc:	f7fd f9ae 	bl	800553c <slalomF>
		slalomR(-V45_DEGACCEL, -V45_OMEGA, -45, SPEED_1);
 80081e0:	23c8      	movs	r3, #200	; 0xc8
 80081e2:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 80081e6:	49b3      	ldr	r1, [pc, #716]	; (80084b4 <v_R45D+0x300>)
 80081e8:	48b3      	ldr	r0, [pc, #716]	; (80084b8 <v_R45D+0x304>)
 80081ea:	f7fd fa1f 	bl	800562c <slalomR>

		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80081ee:	2103      	movs	r1, #3
 80081f0:	2001      	movs	r0, #1
 80081f2:	f008 f905 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80081f6:	4bb1      	ldr	r3, [pc, #708]	; (80084bc <v_R45D+0x308>)
 80081f8:	881b      	ldrh	r3, [r3, #0]
 80081fa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	3301      	adds	r3, #1
 8008202:	2b00      	cmp	r3, #0
 8008204:	f003 0301 	and.w	r3, r3, #1
 8008208:	bfb8      	it	lt
 800820a:	425b      	neglt	r3, r3
 800820c:	f003 0301 	and.w	r3, r3, #1
 8008210:	b2d9      	uxtb	r1, r3
 8008212:	4aaa      	ldr	r2, [pc, #680]	; (80084bc <v_R45D+0x308>)
 8008214:	8813      	ldrh	r3, [r2, #0]
 8008216:	f361 03c3 	bfi	r3, r1, #3, #1
 800821a:	8013      	strh	r3, [r2, #0]

		slalomB(10000, SPEED_1, V45_OFFSET_VB-30);
 800821c:	220a      	movs	r2, #10
 800821e:	21c8      	movs	r1, #200	; 0xc8
 8008220:	f242 7010 	movw	r0, #10000	; 0x2710
 8008224:	f7fd fb5c 	bl	80058e0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_1, 30);
 8008228:	231e      	movs	r3, #30
 800822a:	22c8      	movs	r2, #200	; 0xc8
 800822c:	210a      	movs	r1, #10
 800822e:	48a4      	ldr	r0, [pc, #656]	; (80084c0 <v_R45D+0x30c>)
 8008230:	f7fc ffac 	bl	800518c <driveD>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;

		slalomB(10000, SPEED_5, V45_5_OFFSET_VB-30);
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
	}
}
 8008234:	e139      	b.n	80084aa <v_R45D+0x2f6>
	}else if(run_mode == 2){
 8008236:	4b9e      	ldr	r3, [pc, #632]	; (80084b0 <v_R45D+0x2fc>)
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	b2db      	uxtb	r3, r3
 800823c:	2b02      	cmp	r3, #2
 800823e:	d139      	bne.n	80082b4 <v_R45D+0x100>
		slalomF(10000, SPEED_2, V45_2_OFFSET_VF, NO_WALL, NO_WALL);
 8008240:	f241 3388 	movw	r3, #5000	; 0x1388
 8008244:	9300      	str	r3, [sp, #0]
 8008246:	f241 3388 	movw	r3, #5000	; 0x1388
 800824a:	2255      	movs	r2, #85	; 0x55
 800824c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008250:	f242 7010 	movw	r0, #10000	; 0x2710
 8008254:	f7fd f972 	bl	800553c <slalomF>
		slalomR(-V45_2_DEGACCEL, -V45_2_OMEGA, -45, SPEED_2);
 8008258:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800825c:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8008260:	4994      	ldr	r1, [pc, #592]	; (80084b4 <v_R45D+0x300>)
 8008262:	4895      	ldr	r0, [pc, #596]	; (80084b8 <v_R45D+0x304>)
 8008264:	f7fd f9e2 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008268:	2103      	movs	r1, #3
 800826a:	2001      	movs	r0, #1
 800826c:	f008 f8c8 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008270:	4b92      	ldr	r3, [pc, #584]	; (80084bc <v_R45D+0x308>)
 8008272:	881b      	ldrh	r3, [r3, #0]
 8008274:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008278:	b2db      	uxtb	r3, r3
 800827a:	3301      	adds	r3, #1
 800827c:	2b00      	cmp	r3, #0
 800827e:	f003 0301 	and.w	r3, r3, #1
 8008282:	bfb8      	it	lt
 8008284:	425b      	neglt	r3, r3
 8008286:	f003 0301 	and.w	r3, r3, #1
 800828a:	b2d9      	uxtb	r1, r3
 800828c:	4a8b      	ldr	r2, [pc, #556]	; (80084bc <v_R45D+0x308>)
 800828e:	8813      	ldrh	r3, [r2, #0]
 8008290:	f361 03c3 	bfi	r3, r1, #3, #1
 8008294:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_2, V45_2_OFFSET_VB-30);
 8008296:	220a      	movs	r2, #10
 8008298:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800829c:	f242 7010 	movw	r0, #10000	; 0x2710
 80082a0:	f7fd fb1e 	bl	80058e0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_2, 30);
 80082a4:	231e      	movs	r3, #30
 80082a6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80082aa:	210a      	movs	r1, #10
 80082ac:	4884      	ldr	r0, [pc, #528]	; (80084c0 <v_R45D+0x30c>)
 80082ae:	f7fc ff6d 	bl	800518c <driveD>
}
 80082b2:	e0fa      	b.n	80084aa <v_R45D+0x2f6>
	}else if(run_mode == 3){
 80082b4:	4b7e      	ldr	r3, [pc, #504]	; (80084b0 <v_R45D+0x2fc>)
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	d139      	bne.n	8008332 <v_R45D+0x17e>
		slalomF(10000, SPEED_3, V45_3_OFFSET_VF, NO_WALL, NO_WALL);
 80082be:	f241 3388 	movw	r3, #5000	; 0x1388
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80082c8:	2249      	movs	r2, #73	; 0x49
 80082ca:	f44f 7116 	mov.w	r1, #600	; 0x258
 80082ce:	f242 7010 	movw	r0, #10000	; 0x2710
 80082d2:	f7fd f933 	bl	800553c <slalomF>
		slalomR(-V45_3_DEGACCEL, -V45_3_OMEGA, -45, SPEED_3);
 80082d6:	f44f 7316 	mov.w	r3, #600	; 0x258
 80082da:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 80082de:	4979      	ldr	r1, [pc, #484]	; (80084c4 <v_R45D+0x310>)
 80082e0:	4879      	ldr	r0, [pc, #484]	; (80084c8 <v_R45D+0x314>)
 80082e2:	f7fd f9a3 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80082e6:	2103      	movs	r1, #3
 80082e8:	2001      	movs	r0, #1
 80082ea:	f008 f889 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80082ee:	4b73      	ldr	r3, [pc, #460]	; (80084bc <v_R45D+0x308>)
 80082f0:	881b      	ldrh	r3, [r3, #0]
 80082f2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	3301      	adds	r3, #1
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	f003 0301 	and.w	r3, r3, #1
 8008300:	bfb8      	it	lt
 8008302:	425b      	neglt	r3, r3
 8008304:	f003 0301 	and.w	r3, r3, #1
 8008308:	b2d9      	uxtb	r1, r3
 800830a:	4a6c      	ldr	r2, [pc, #432]	; (80084bc <v_R45D+0x308>)
 800830c:	8813      	ldrh	r3, [r2, #0]
 800830e:	f361 03c3 	bfi	r3, r1, #3, #1
 8008312:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_3, V45_3_OFFSET_VB-30);
 8008314:	2219      	movs	r2, #25
 8008316:	f44f 7116 	mov.w	r1, #600	; 0x258
 800831a:	f242 7010 	movw	r0, #10000	; 0x2710
 800831e:	f7fd fadf 	bl	80058e0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_3, 30);
 8008322:	231e      	movs	r3, #30
 8008324:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008328:	210a      	movs	r1, #10
 800832a:	4865      	ldr	r0, [pc, #404]	; (80084c0 <v_R45D+0x30c>)
 800832c:	f7fc ff2e 	bl	800518c <driveD>
}
 8008330:	e0bb      	b.n	80084aa <v_R45D+0x2f6>
	}else if(run_mode == 4){
 8008332:	4b5f      	ldr	r3, [pc, #380]	; (80084b0 <v_R45D+0x2fc>)
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	b2db      	uxtb	r3, r3
 8008338:	2b04      	cmp	r3, #4
 800833a:	d139      	bne.n	80083b0 <v_R45D+0x1fc>
		slalomF(10000, SPEED_4, V45_4_OFFSET_VF, NO_WALL, NO_WALL);
 800833c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008340:	9300      	str	r3, [sp, #0]
 8008342:	f241 3388 	movw	r3, #5000	; 0x1388
 8008346:	2237      	movs	r2, #55	; 0x37
 8008348:	f44f 7148 	mov.w	r1, #800	; 0x320
 800834c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008350:	f7fd f8f4 	bl	800553c <slalomF>
		slalomR(-V45_4_DEGACCEL, -V45_4_OMEGA, -45, SPEED_4);
 8008354:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008358:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 800835c:	4959      	ldr	r1, [pc, #356]	; (80084c4 <v_R45D+0x310>)
 800835e:	485a      	ldr	r0, [pc, #360]	; (80084c8 <v_R45D+0x314>)
 8008360:	f7fd f964 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008364:	2103      	movs	r1, #3
 8008366:	2001      	movs	r0, #1
 8008368:	f008 f84a 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800836c:	4b53      	ldr	r3, [pc, #332]	; (80084bc <v_R45D+0x308>)
 800836e:	881b      	ldrh	r3, [r3, #0]
 8008370:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008374:	b2db      	uxtb	r3, r3
 8008376:	3301      	adds	r3, #1
 8008378:	2b00      	cmp	r3, #0
 800837a:	f003 0301 	and.w	r3, r3, #1
 800837e:	bfb8      	it	lt
 8008380:	425b      	neglt	r3, r3
 8008382:	f003 0301 	and.w	r3, r3, #1
 8008386:	b2d9      	uxtb	r1, r3
 8008388:	4a4c      	ldr	r2, [pc, #304]	; (80084bc <v_R45D+0x308>)
 800838a:	8813      	ldrh	r3, [r2, #0]
 800838c:	f361 03c3 	bfi	r3, r1, #3, #1
 8008390:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_4, V45_4_OFFSET_VB-30);
 8008392:	2215      	movs	r2, #21
 8008394:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008398:	f242 7010 	movw	r0, #10000	; 0x2710
 800839c:	f7fd faa0 	bl	80058e0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_4, 30);
 80083a0:	231e      	movs	r3, #30
 80083a2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80083a6:	210a      	movs	r1, #10
 80083a8:	4845      	ldr	r0, [pc, #276]	; (80084c0 <v_R45D+0x30c>)
 80083aa:	f7fc feef 	bl	800518c <driveD>
}
 80083ae:	e07c      	b.n	80084aa <v_R45D+0x2f6>
	}else if(run_mode == 5){
 80083b0:	4b3f      	ldr	r3, [pc, #252]	; (80084b0 <v_R45D+0x2fc>)
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	2b05      	cmp	r3, #5
 80083b8:	d139      	bne.n	800842e <v_R45D+0x27a>
		slalomF(10000, SPEED_5, V45_5_OFFSET_VF, NO_WALL, NO_WALL);
 80083ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80083be:	9300      	str	r3, [sp, #0]
 80083c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80083c4:	2214      	movs	r2, #20
 80083c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80083ca:	f242 7010 	movw	r0, #10000	; 0x2710
 80083ce:	f7fd f8b5 	bl	800553c <slalomF>
		slalomR(-V45_5_DEGACCEL, -V45_5_OMEGA, -45, SPEED_5);
 80083d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80083d6:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 80083da:	493c      	ldr	r1, [pc, #240]	; (80084cc <v_R45D+0x318>)
 80083dc:	483c      	ldr	r0, [pc, #240]	; (80084d0 <v_R45D+0x31c>)
 80083de:	f7fd f925 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80083e2:	2103      	movs	r1, #3
 80083e4:	2001      	movs	r0, #1
 80083e6:	f008 f80b 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80083ea:	4b34      	ldr	r3, [pc, #208]	; (80084bc <v_R45D+0x308>)
 80083ec:	881b      	ldrh	r3, [r3, #0]
 80083ee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	3301      	adds	r3, #1
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f003 0301 	and.w	r3, r3, #1
 80083fc:	bfb8      	it	lt
 80083fe:	425b      	neglt	r3, r3
 8008400:	f003 0301 	and.w	r3, r3, #1
 8008404:	b2d9      	uxtb	r1, r3
 8008406:	4a2d      	ldr	r2, [pc, #180]	; (80084bc <v_R45D+0x308>)
 8008408:	8813      	ldrh	r3, [r2, #0]
 800840a:	f361 03c3 	bfi	r3, r1, #3, #1
 800840e:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, V45_5_OFFSET_VB-30);
 8008410:	221c      	movs	r2, #28
 8008412:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008416:	f242 7010 	movw	r0, #10000	; 0x2710
 800841a:	f7fd fa61 	bl	80058e0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
 800841e:	231e      	movs	r3, #30
 8008420:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008424:	210a      	movs	r1, #10
 8008426:	4826      	ldr	r0, [pc, #152]	; (80084c0 <v_R45D+0x30c>)
 8008428:	f7fc feb0 	bl	800518c <driveD>
}
 800842c:	e03d      	b.n	80084aa <v_R45D+0x2f6>
	}else if(run_mode == 6){
 800842e:	4b20      	ldr	r3, [pc, #128]	; (80084b0 <v_R45D+0x2fc>)
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	b2db      	uxtb	r3, r3
 8008434:	2b06      	cmp	r3, #6
 8008436:	d138      	bne.n	80084aa <v_R45D+0x2f6>
		slalomF(10000, SPEED_5, V45_5_OFFSET_VF, NO_WALL, NO_WALL);
 8008438:	f241 3388 	movw	r3, #5000	; 0x1388
 800843c:	9300      	str	r3, [sp, #0]
 800843e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008442:	2214      	movs	r2, #20
 8008444:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008448:	f242 7010 	movw	r0, #10000	; 0x2710
 800844c:	f7fd f876 	bl	800553c <slalomF>
		slalomR(-V45_5_DEGACCEL, -V45_5_OMEGA, -45, SPEED_5);
 8008450:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008454:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8008458:	491c      	ldr	r1, [pc, #112]	; (80084cc <v_R45D+0x318>)
 800845a:	481d      	ldr	r0, [pc, #116]	; (80084d0 <v_R45D+0x31c>)
 800845c:	f7fd f8e6 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008460:	2103      	movs	r1, #3
 8008462:	2001      	movs	r0, #1
 8008464:	f007 ffcc 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008468:	4b14      	ldr	r3, [pc, #80]	; (80084bc <v_R45D+0x308>)
 800846a:	881b      	ldrh	r3, [r3, #0]
 800846c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008470:	b2db      	uxtb	r3, r3
 8008472:	3301      	adds	r3, #1
 8008474:	2b00      	cmp	r3, #0
 8008476:	f003 0301 	and.w	r3, r3, #1
 800847a:	bfb8      	it	lt
 800847c:	425b      	neglt	r3, r3
 800847e:	f003 0301 	and.w	r3, r3, #1
 8008482:	b2d9      	uxtb	r1, r3
 8008484:	4a0d      	ldr	r2, [pc, #52]	; (80084bc <v_R45D+0x308>)
 8008486:	8813      	ldrh	r3, [r2, #0]
 8008488:	f361 03c3 	bfi	r3, r1, #3, #1
 800848c:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, V45_5_OFFSET_VB-30);
 800848e:	221c      	movs	r2, #28
 8008490:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008494:	f242 7010 	movw	r0, #10000	; 0x2710
 8008498:	f7fd fa22 	bl	80058e0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
 800849c:	231e      	movs	r3, #30
 800849e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80084a2:	210a      	movs	r1, #10
 80084a4:	4806      	ldr	r0, [pc, #24]	; (80084c0 <v_R45D+0x30c>)
 80084a6:	f7fc fe71 	bl	800518c <driveD>
}
 80084aa:	bf00      	nop
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	20000456 	.word	0x20000456
 80084b4:	fffffed4 	.word	0xfffffed4
 80084b8:	fffff448 	.word	0xfffff448
 80084bc:	20000fa4 	.word	0x20000fa4
 80084c0:	ffff8ad0 	.word	0xffff8ad0
 80084c4:	fffffe70 	.word	0xfffffe70
 80084c8:	ffffe0c0 	.word	0xffffe0c0
 80084cc:	fffffda8 	.word	0xfffffda8
 80084d0:	ffffd8f0 	.word	0xffffd8f0

080084d4 <v_L45D>:
//v_L45D
//a区画中心から左に45度回転する　ゴール用
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L45D(void){
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af02      	add	r7, sp, #8
	full_led_write1(YELLOW);
 80084da:	2006      	movs	r0, #6
 80084dc:	f009 fe24 	bl	8012128 <full_led_write1>
	if(run_mode == 1){
 80084e0:	4bbe      	ldr	r3, [pc, #760]	; (80087dc <v_L45D+0x308>)
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d136      	bne.n	8008558 <v_L45D+0x84>
		slalomF(10000, SPEED_1, V45_OFFSET_VF, NO_WALL, NO_WALL);
 80084ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80084ee:	9300      	str	r3, [sp, #0]
 80084f0:	f241 3388 	movw	r3, #5000	; 0x1388
 80084f4:	2255      	movs	r2, #85	; 0x55
 80084f6:	21c8      	movs	r1, #200	; 0xc8
 80084f8:	f242 7010 	movw	r0, #10000	; 0x2710
 80084fc:	f7fd f81e 	bl	800553c <slalomF>
		slalomR(V45_DEGACCEL, V45_OMEGA, 55, SPEED_1);
 8008500:	23c8      	movs	r3, #200	; 0xc8
 8008502:	2237      	movs	r2, #55	; 0x37
 8008504:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8008508:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800850c:	f7fd f88e 	bl	800562c <slalomR>

		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008510:	2103      	movs	r1, #3
 8008512:	20ff      	movs	r0, #255	; 0xff
 8008514:	f007 ff74 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008518:	4bb1      	ldr	r3, [pc, #708]	; (80087e0 <v_L45D+0x30c>)
 800851a:	881b      	ldrh	r3, [r3, #0]
 800851c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008520:	b2db      	uxtb	r3, r3
 8008522:	3301      	adds	r3, #1
 8008524:	2b00      	cmp	r3, #0
 8008526:	f003 0301 	and.w	r3, r3, #1
 800852a:	bfb8      	it	lt
 800852c:	425b      	neglt	r3, r3
 800852e:	f003 0301 	and.w	r3, r3, #1
 8008532:	b2d9      	uxtb	r1, r3
 8008534:	4aaa      	ldr	r2, [pc, #680]	; (80087e0 <v_L45D+0x30c>)
 8008536:	8813      	ldrh	r3, [r2, #0]
 8008538:	f361 03c3 	bfi	r3, r1, #3, #1
 800853c:	8013      	strh	r3, [r2, #0]

		slalomB(10000, SPEED_1, V45_OFFSET_VB-30);
 800853e:	220a      	movs	r2, #10
 8008540:	21c8      	movs	r1, #200	; 0xc8
 8008542:	f242 7010 	movw	r0, #10000	; 0x2710
 8008546:	f7fd f9cb 	bl	80058e0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_1, 30);
 800854a:	231e      	movs	r3, #30
 800854c:	22c8      	movs	r2, #200	; 0xc8
 800854e:	210a      	movs	r1, #10
 8008550:	48a4      	ldr	r0, [pc, #656]	; (80087e4 <v_L45D+0x310>)
 8008552:	f7fc fe1b 	bl	800518c <driveD>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;

		slalomB(10000, SPEED_5, V45_5_OFFSET_VB-30);
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
	}
}
 8008556:	e13e      	b.n	80087d6 <v_L45D+0x302>
	}else if(run_mode == 2){
 8008558:	4ba0      	ldr	r3, [pc, #640]	; (80087dc <v_L45D+0x308>)
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	b2db      	uxtb	r3, r3
 800855e:	2b02      	cmp	r3, #2
 8008560:	d13a      	bne.n	80085d8 <v_L45D+0x104>
		slalomF(10000, SPEED_2, V45_2_OFFSET_VF, NO_WALL, NO_WALL);
 8008562:	f241 3388 	movw	r3, #5000	; 0x1388
 8008566:	9300      	str	r3, [sp, #0]
 8008568:	f241 3388 	movw	r3, #5000	; 0x1388
 800856c:	2255      	movs	r2, #85	; 0x55
 800856e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008572:	f242 7010 	movw	r0, #10000	; 0x2710
 8008576:	f7fc ffe1 	bl	800553c <slalomF>
		slalomR(V45_2_DEGACCEL, V45_2_OMEGA, 45, SPEED_2);
 800857a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800857e:	222d      	movs	r2, #45	; 0x2d
 8008580:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8008584:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008588:	f7fd f850 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800858c:	2103      	movs	r1, #3
 800858e:	20ff      	movs	r0, #255	; 0xff
 8008590:	f007 ff36 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008594:	4b92      	ldr	r3, [pc, #584]	; (80087e0 <v_L45D+0x30c>)
 8008596:	881b      	ldrh	r3, [r3, #0]
 8008598:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800859c:	b2db      	uxtb	r3, r3
 800859e:	3301      	adds	r3, #1
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f003 0301 	and.w	r3, r3, #1
 80085a6:	bfb8      	it	lt
 80085a8:	425b      	neglt	r3, r3
 80085aa:	f003 0301 	and.w	r3, r3, #1
 80085ae:	b2d9      	uxtb	r1, r3
 80085b0:	4a8b      	ldr	r2, [pc, #556]	; (80087e0 <v_L45D+0x30c>)
 80085b2:	8813      	ldrh	r3, [r2, #0]
 80085b4:	f361 03c3 	bfi	r3, r1, #3, #1
 80085b8:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_2, V45_2_OFFSET_VB-30);
 80085ba:	220a      	movs	r2, #10
 80085bc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80085c0:	f242 7010 	movw	r0, #10000	; 0x2710
 80085c4:	f7fd f98c 	bl	80058e0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_2, 30);
 80085c8:	231e      	movs	r3, #30
 80085ca:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80085ce:	210a      	movs	r1, #10
 80085d0:	4884      	ldr	r0, [pc, #528]	; (80087e4 <v_L45D+0x310>)
 80085d2:	f7fc fddb 	bl	800518c <driveD>
}
 80085d6:	e0fe      	b.n	80087d6 <v_L45D+0x302>
	}else if(run_mode == 3){
 80085d8:	4b80      	ldr	r3, [pc, #512]	; (80087dc <v_L45D+0x308>)
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	2b03      	cmp	r3, #3
 80085e0:	d13a      	bne.n	8008658 <v_L45D+0x184>
		slalomF(10000, SPEED_3, V45_3_OFFSET_VF, NO_WALL, NO_WALL);
 80085e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80085e6:	9300      	str	r3, [sp, #0]
 80085e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80085ec:	2249      	movs	r2, #73	; 0x49
 80085ee:	f44f 7116 	mov.w	r1, #600	; 0x258
 80085f2:	f242 7010 	movw	r0, #10000	; 0x2710
 80085f6:	f7fc ffa1 	bl	800553c <slalomF>
		slalomR(V45_3_DEGACCEL, V45_3_OMEGA, 45, SPEED_3);
 80085fa:	f44f 7316 	mov.w	r3, #600	; 0x258
 80085fe:	222d      	movs	r2, #45	; 0x2d
 8008600:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008604:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8008608:	f7fd f810 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800860c:	2103      	movs	r1, #3
 800860e:	20ff      	movs	r0, #255	; 0xff
 8008610:	f007 fef6 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008614:	4b72      	ldr	r3, [pc, #456]	; (80087e0 <v_L45D+0x30c>)
 8008616:	881b      	ldrh	r3, [r3, #0]
 8008618:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800861c:	b2db      	uxtb	r3, r3
 800861e:	3301      	adds	r3, #1
 8008620:	2b00      	cmp	r3, #0
 8008622:	f003 0301 	and.w	r3, r3, #1
 8008626:	bfb8      	it	lt
 8008628:	425b      	neglt	r3, r3
 800862a:	f003 0301 	and.w	r3, r3, #1
 800862e:	b2d9      	uxtb	r1, r3
 8008630:	4a6b      	ldr	r2, [pc, #428]	; (80087e0 <v_L45D+0x30c>)
 8008632:	8813      	ldrh	r3, [r2, #0]
 8008634:	f361 03c3 	bfi	r3, r1, #3, #1
 8008638:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_3, V45_3_OFFSET_VB-30);
 800863a:	2219      	movs	r2, #25
 800863c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008640:	f242 7010 	movw	r0, #10000	; 0x2710
 8008644:	f7fd f94c 	bl	80058e0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_3, 30);
 8008648:	231e      	movs	r3, #30
 800864a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800864e:	210a      	movs	r1, #10
 8008650:	4864      	ldr	r0, [pc, #400]	; (80087e4 <v_L45D+0x310>)
 8008652:	f7fc fd9b 	bl	800518c <driveD>
}
 8008656:	e0be      	b.n	80087d6 <v_L45D+0x302>
	}else if(run_mode == 4){
 8008658:	4b60      	ldr	r3, [pc, #384]	; (80087dc <v_L45D+0x308>)
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	b2db      	uxtb	r3, r3
 800865e:	2b04      	cmp	r3, #4
 8008660:	d13a      	bne.n	80086d8 <v_L45D+0x204>
		slalomF(10000, SPEED_4, V45_4_OFFSET_VF, NO_WALL, NO_WALL);
 8008662:	f241 3388 	movw	r3, #5000	; 0x1388
 8008666:	9300      	str	r3, [sp, #0]
 8008668:	f241 3388 	movw	r3, #5000	; 0x1388
 800866c:	2237      	movs	r2, #55	; 0x37
 800866e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008672:	f242 7010 	movw	r0, #10000	; 0x2710
 8008676:	f7fc ff61 	bl	800553c <slalomF>
		slalomR(V45_4_DEGACCEL, V45_4_OMEGA, 45, SPEED_4);
 800867a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800867e:	222d      	movs	r2, #45	; 0x2d
 8008680:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008684:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8008688:	f7fc ffd0 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800868c:	2103      	movs	r1, #3
 800868e:	20ff      	movs	r0, #255	; 0xff
 8008690:	f007 feb6 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008694:	4b52      	ldr	r3, [pc, #328]	; (80087e0 <v_L45D+0x30c>)
 8008696:	881b      	ldrh	r3, [r3, #0]
 8008698:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800869c:	b2db      	uxtb	r3, r3
 800869e:	3301      	adds	r3, #1
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f003 0301 	and.w	r3, r3, #1
 80086a6:	bfb8      	it	lt
 80086a8:	425b      	neglt	r3, r3
 80086aa:	f003 0301 	and.w	r3, r3, #1
 80086ae:	b2d9      	uxtb	r1, r3
 80086b0:	4a4b      	ldr	r2, [pc, #300]	; (80087e0 <v_L45D+0x30c>)
 80086b2:	8813      	ldrh	r3, [r2, #0]
 80086b4:	f361 03c3 	bfi	r3, r1, #3, #1
 80086b8:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_4, V45_4_OFFSET_VB-30);
 80086ba:	2215      	movs	r2, #21
 80086bc:	f44f 7148 	mov.w	r1, #800	; 0x320
 80086c0:	f242 7010 	movw	r0, #10000	; 0x2710
 80086c4:	f7fd f90c 	bl	80058e0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_4, 30);
 80086c8:	231e      	movs	r3, #30
 80086ca:	f44f 7248 	mov.w	r2, #800	; 0x320
 80086ce:	210a      	movs	r1, #10
 80086d0:	4844      	ldr	r0, [pc, #272]	; (80087e4 <v_L45D+0x310>)
 80086d2:	f7fc fd5b 	bl	800518c <driveD>
}
 80086d6:	e07e      	b.n	80087d6 <v_L45D+0x302>
	}else if(run_mode == 5){
 80086d8:	4b40      	ldr	r3, [pc, #256]	; (80087dc <v_L45D+0x308>)
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	2b05      	cmp	r3, #5
 80086e0:	d13a      	bne.n	8008758 <v_L45D+0x284>
		slalomF(10000, SPEED_5, V45_5_OFFSET_VF, NO_WALL, NO_WALL);
 80086e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80086e6:	9300      	str	r3, [sp, #0]
 80086e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80086ec:	2214      	movs	r2, #20
 80086ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80086f2:	f242 7010 	movw	r0, #10000	; 0x2710
 80086f6:	f7fc ff21 	bl	800553c <slalomF>
		slalomR(V45_5_DEGACCEL, V45_5_OMEGA, 45, SPEED_5);
 80086fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80086fe:	222d      	movs	r2, #45	; 0x2d
 8008700:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008704:	f242 7010 	movw	r0, #10000	; 0x2710
 8008708:	f7fc ff90 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800870c:	2103      	movs	r1, #3
 800870e:	20ff      	movs	r0, #255	; 0xff
 8008710:	f007 fe76 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008714:	4b32      	ldr	r3, [pc, #200]	; (80087e0 <v_L45D+0x30c>)
 8008716:	881b      	ldrh	r3, [r3, #0]
 8008718:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800871c:	b2db      	uxtb	r3, r3
 800871e:	3301      	adds	r3, #1
 8008720:	2b00      	cmp	r3, #0
 8008722:	f003 0301 	and.w	r3, r3, #1
 8008726:	bfb8      	it	lt
 8008728:	425b      	neglt	r3, r3
 800872a:	f003 0301 	and.w	r3, r3, #1
 800872e:	b2d9      	uxtb	r1, r3
 8008730:	4a2b      	ldr	r2, [pc, #172]	; (80087e0 <v_L45D+0x30c>)
 8008732:	8813      	ldrh	r3, [r2, #0]
 8008734:	f361 03c3 	bfi	r3, r1, #3, #1
 8008738:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, V45_5_OFFSET_VB-30);
 800873a:	221c      	movs	r2, #28
 800873c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008740:	f242 7010 	movw	r0, #10000	; 0x2710
 8008744:	f7fd f8cc 	bl	80058e0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
 8008748:	231e      	movs	r3, #30
 800874a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800874e:	210a      	movs	r1, #10
 8008750:	4824      	ldr	r0, [pc, #144]	; (80087e4 <v_L45D+0x310>)
 8008752:	f7fc fd1b 	bl	800518c <driveD>
}
 8008756:	e03e      	b.n	80087d6 <v_L45D+0x302>
	}else if(run_mode == 6){
 8008758:	4b20      	ldr	r3, [pc, #128]	; (80087dc <v_L45D+0x308>)
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	b2db      	uxtb	r3, r3
 800875e:	2b06      	cmp	r3, #6
 8008760:	d139      	bne.n	80087d6 <v_L45D+0x302>
		slalomF(10000, SPEED_5, V45_5_OFFSET_VF, NO_WALL, NO_WALL);
 8008762:	f241 3388 	movw	r3, #5000	; 0x1388
 8008766:	9300      	str	r3, [sp, #0]
 8008768:	f241 3388 	movw	r3, #5000	; 0x1388
 800876c:	2214      	movs	r2, #20
 800876e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008772:	f242 7010 	movw	r0, #10000	; 0x2710
 8008776:	f7fc fee1 	bl	800553c <slalomF>
		slalomR(V45_5_DEGACCEL, V45_5_OMEGA, 45, SPEED_5);
 800877a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800877e:	222d      	movs	r2, #45	; 0x2d
 8008780:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008784:	f242 7010 	movw	r0, #10000	; 0x2710
 8008788:	f7fc ff50 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800878c:	2103      	movs	r1, #3
 800878e:	20ff      	movs	r0, #255	; 0xff
 8008790:	f007 fe36 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008794:	4b12      	ldr	r3, [pc, #72]	; (80087e0 <v_L45D+0x30c>)
 8008796:	881b      	ldrh	r3, [r3, #0]
 8008798:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800879c:	b2db      	uxtb	r3, r3
 800879e:	3301      	adds	r3, #1
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f003 0301 	and.w	r3, r3, #1
 80087a6:	bfb8      	it	lt
 80087a8:	425b      	neglt	r3, r3
 80087aa:	f003 0301 	and.w	r3, r3, #1
 80087ae:	b2d9      	uxtb	r1, r3
 80087b0:	4a0b      	ldr	r2, [pc, #44]	; (80087e0 <v_L45D+0x30c>)
 80087b2:	8813      	ldrh	r3, [r2, #0]
 80087b4:	f361 03c3 	bfi	r3, r1, #3, #1
 80087b8:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, V45_5_OFFSET_VB-30);
 80087ba:	221c      	movs	r2, #28
 80087bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80087c0:	f242 7010 	movw	r0, #10000	; 0x2710
 80087c4:	f7fd f88c 	bl	80058e0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
 80087c8:	231e      	movs	r3, #30
 80087ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80087ce:	210a      	movs	r1, #10
 80087d0:	4804      	ldr	r0, [pc, #16]	; (80087e4 <v_L45D+0x310>)
 80087d2:	f7fc fcdb 	bl	800518c <driveD>
}
 80087d6:	bf00      	nop
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	20000456 	.word	0x20000456
 80087e0:	20000fa4 	.word	0x20000fa4
 80087e4:	ffff8ad0 	.word	0xffff8ad0

080087e8 <v_R90>:
//v_R90
// 柱中心から右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R90(void){
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af02      	add	r7, sp, #8
	full_led_write1(YELLOW);
 80087ee:	2006      	movs	r0, #6
 80087f0:	f009 fc9a 	bl	8012128 <full_led_write1>
	if(run_mode == 1){
 80087f4:	4b6e      	ldr	r3, [pc, #440]	; (80089b0 <v_R90+0x1c8>)
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d11c      	bne.n	8008838 <v_R90+0x50>
		slalomF(10000, SPEED_1, V90_OFFSET_F, NO_WALL, NO_WALL);
 80087fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8008802:	9300      	str	r3, [sp, #0]
 8008804:	f241 3388 	movw	r3, #5000	; 0x1388
 8008808:	222d      	movs	r2, #45	; 0x2d
 800880a:	21c8      	movs	r1, #200	; 0xc8
 800880c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008810:	f7fc fe94 	bl	800553c <slalomF>
		slalomR(-V90_DEGACCEL, -V90_OMEGA, -90, SPEED_1);
 8008814:	23c8      	movs	r3, #200	; 0xc8
 8008816:	f06f 0259 	mvn.w	r2, #89	; 0x59
 800881a:	4966      	ldr	r1, [pc, #408]	; (80089b4 <v_R90+0x1cc>)
 800881c:	4866      	ldr	r0, [pc, #408]	; (80089b8 <v_R90+0x1d0>)
 800881e:	f7fc ff05 	bl	800562c <slalomR>

		turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008822:	2103      	movs	r1, #3
 8008824:	2002      	movs	r0, #2
 8008826:	f007 fdeb 	bl	8010400 <turn_dir>

		slalomB(10000, SPEED_1, V90_OFFSET_B);
 800882a:	222d      	movs	r2, #45	; 0x2d
 800882c:	21c8      	movs	r1, #200	; 0xc8
 800882e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008832:	f7fd f855 	bl	80058e0 <slalomB>

		turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理

		slalomB(10000, SPEED_5, V90_5_OFFSET_B);
	}
}
 8008836:	e0b7      	b.n	80089a8 <v_R90+0x1c0>
	}else if(run_mode == 2){
 8008838:	4b5d      	ldr	r3, [pc, #372]	; (80089b0 <v_R90+0x1c8>)
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	b2db      	uxtb	r3, r3
 800883e:	2b02      	cmp	r3, #2
 8008840:	d11f      	bne.n	8008882 <v_R90+0x9a>
		slalomF(10000, SPEED_2, V90_2_OFFSET_F, NO_WALL, NO_WALL);
 8008842:	f241 3388 	movw	r3, #5000	; 0x1388
 8008846:	9300      	str	r3, [sp, #0]
 8008848:	f241 3388 	movw	r3, #5000	; 0x1388
 800884c:	222d      	movs	r2, #45	; 0x2d
 800884e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008852:	f242 7010 	movw	r0, #10000	; 0x2710
 8008856:	f7fc fe71 	bl	800553c <slalomF>
		slalomR(-V90_2_DEGACCEL, -V90_2_OMEGA, -90, SPEED_2);
 800885a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800885e:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8008862:	4954      	ldr	r1, [pc, #336]	; (80089b4 <v_R90+0x1cc>)
 8008864:	4854      	ldr	r0, [pc, #336]	; (80089b8 <v_R90+0x1d0>)
 8008866:	f7fc fee1 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800886a:	2103      	movs	r1, #3
 800886c:	2002      	movs	r0, #2
 800886e:	f007 fdc7 	bl	8010400 <turn_dir>
		slalomB(10000, SPEED_2, V90_2_OFFSET_B);
 8008872:	222d      	movs	r2, #45	; 0x2d
 8008874:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008878:	f242 7010 	movw	r0, #10000	; 0x2710
 800887c:	f7fd f830 	bl	80058e0 <slalomB>
}
 8008880:	e092      	b.n	80089a8 <v_R90+0x1c0>
	}else if(run_mode == 3){
 8008882:	4b4b      	ldr	r3, [pc, #300]	; (80089b0 <v_R90+0x1c8>)
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	b2db      	uxtb	r3, r3
 8008888:	2b03      	cmp	r3, #3
 800888a:	d11f      	bne.n	80088cc <v_R90+0xe4>
		slalomF(10000, SPEED_3, V90_3_OFFSET_F, NO_WALL, NO_WALL);
 800888c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008890:	9300      	str	r3, [sp, #0]
 8008892:	f241 3388 	movw	r3, #5000	; 0x1388
 8008896:	223a      	movs	r2, #58	; 0x3a
 8008898:	f44f 7116 	mov.w	r1, #600	; 0x258
 800889c:	f242 7010 	movw	r0, #10000	; 0x2710
 80088a0:	f7fc fe4c 	bl	800553c <slalomF>
		slalomR(-V90_3_DEGACCEL, -V90_3_OMEGA, -90, SPEED_3);
 80088a4:	f44f 7316 	mov.w	r3, #600	; 0x258
 80088a8:	f06f 0259 	mvn.w	r2, #89	; 0x59
 80088ac:	4943      	ldr	r1, [pc, #268]	; (80089bc <v_R90+0x1d4>)
 80088ae:	4844      	ldr	r0, [pc, #272]	; (80089c0 <v_R90+0x1d8>)
 80088b0:	f7fc febc 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80088b4:	2103      	movs	r1, #3
 80088b6:	2002      	movs	r0, #2
 80088b8:	f007 fda2 	bl	8010400 <turn_dir>
		slalomB(10000, SPEED_3, V90_3_OFFSET_B);
 80088bc:	2252      	movs	r2, #82	; 0x52
 80088be:	f44f 7116 	mov.w	r1, #600	; 0x258
 80088c2:	f242 7010 	movw	r0, #10000	; 0x2710
 80088c6:	f7fd f80b 	bl	80058e0 <slalomB>
}
 80088ca:	e06d      	b.n	80089a8 <v_R90+0x1c0>
	}else if(run_mode == 4){
 80088cc:	4b38      	ldr	r3, [pc, #224]	; (80089b0 <v_R90+0x1c8>)
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	2b04      	cmp	r3, #4
 80088d4:	d11f      	bne.n	8008916 <v_R90+0x12e>
		slalomF(10000, SPEED_4, V90_4_OFFSET_F, NO_WALL, NO_WALL);
 80088d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80088da:	9300      	str	r3, [sp, #0]
 80088dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80088e0:	2223      	movs	r2, #35	; 0x23
 80088e2:	f44f 7148 	mov.w	r1, #800	; 0x320
 80088e6:	f242 7010 	movw	r0, #10000	; 0x2710
 80088ea:	f7fc fe27 	bl	800553c <slalomF>
		slalomR(-V90_4_DEGACCEL, -V90_4_OMEGA, -90, SPEED_4);
 80088ee:	f44f 7348 	mov.w	r3, #800	; 0x320
 80088f2:	f06f 0259 	mvn.w	r2, #89	; 0x59
 80088f6:	4931      	ldr	r1, [pc, #196]	; (80089bc <v_R90+0x1d4>)
 80088f8:	4831      	ldr	r0, [pc, #196]	; (80089c0 <v_R90+0x1d8>)
 80088fa:	f7fc fe97 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80088fe:	2103      	movs	r1, #3
 8008900:	2002      	movs	r0, #2
 8008902:	f007 fd7d 	bl	8010400 <turn_dir>
		slalomB(10000, SPEED_4, V90_4_OFFSET_B);
 8008906:	2241      	movs	r2, #65	; 0x41
 8008908:	f44f 7148 	mov.w	r1, #800	; 0x320
 800890c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008910:	f7fc ffe6 	bl	80058e0 <slalomB>
}
 8008914:	e048      	b.n	80089a8 <v_R90+0x1c0>
	}else if(run_mode == 5){
 8008916:	4b26      	ldr	r3, [pc, #152]	; (80089b0 <v_R90+0x1c8>)
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	b2db      	uxtb	r3, r3
 800891c:	2b05      	cmp	r3, #5
 800891e:	d11f      	bne.n	8008960 <v_R90+0x178>
		slalomF(10000, SPEED_5, V90_5_OFFSET_F, NO_WALL, NO_WALL);
 8008920:	f241 3388 	movw	r3, #5000	; 0x1388
 8008924:	9300      	str	r3, [sp, #0]
 8008926:	f241 3388 	movw	r3, #5000	; 0x1388
 800892a:	221e      	movs	r2, #30
 800892c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008930:	f242 7010 	movw	r0, #10000	; 0x2710
 8008934:	f7fc fe02 	bl	800553c <slalomF>
		slalomR(-V90_5_DEGACCEL, -V90_5_OMEGA, -90, SPEED_5);
 8008938:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800893c:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8008940:	491e      	ldr	r1, [pc, #120]	; (80089bc <v_R90+0x1d4>)
 8008942:	4820      	ldr	r0, [pc, #128]	; (80089c4 <v_R90+0x1dc>)
 8008944:	f7fc fe72 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008948:	2103      	movs	r1, #3
 800894a:	2002      	movs	r0, #2
 800894c:	f007 fd58 	bl	8010400 <turn_dir>
		slalomB(10000, SPEED_5, V90_5_OFFSET_B);
 8008950:	221e      	movs	r2, #30
 8008952:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008956:	f242 7010 	movw	r0, #10000	; 0x2710
 800895a:	f7fc ffc1 	bl	80058e0 <slalomB>
}
 800895e:	e023      	b.n	80089a8 <v_R90+0x1c0>
	}else if(run_mode == 6){
 8008960:	4b13      	ldr	r3, [pc, #76]	; (80089b0 <v_R90+0x1c8>)
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	b2db      	uxtb	r3, r3
 8008966:	2b06      	cmp	r3, #6
 8008968:	d11e      	bne.n	80089a8 <v_R90+0x1c0>
		slalomF(10000, SPEED_5, V90_5_OFFSET_F, NO_WALL, NO_WALL);
 800896a:	f241 3388 	movw	r3, #5000	; 0x1388
 800896e:	9300      	str	r3, [sp, #0]
 8008970:	f241 3388 	movw	r3, #5000	; 0x1388
 8008974:	221e      	movs	r2, #30
 8008976:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800897a:	f242 7010 	movw	r0, #10000	; 0x2710
 800897e:	f7fc fddd 	bl	800553c <slalomF>
		slalomR(-V90_5_DEGACCEL, -V90_5_OMEGA, -90, SPEED_5);
 8008982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008986:	f06f 0259 	mvn.w	r2, #89	; 0x59
 800898a:	490c      	ldr	r1, [pc, #48]	; (80089bc <v_R90+0x1d4>)
 800898c:	480d      	ldr	r0, [pc, #52]	; (80089c4 <v_R90+0x1dc>)
 800898e:	f7fc fe4d 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008992:	2103      	movs	r1, #3
 8008994:	2002      	movs	r0, #2
 8008996:	f007 fd33 	bl	8010400 <turn_dir>
		slalomB(10000, SPEED_5, V90_5_OFFSET_B);
 800899a:	221e      	movs	r2, #30
 800899c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80089a0:	f242 7010 	movw	r0, #10000	; 0x2710
 80089a4:	f7fc ff9c 	bl	80058e0 <slalomB>
}
 80089a8:	bf00      	nop
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	20000456 	.word	0x20000456
 80089b4:	fffffea2 	.word	0xfffffea2
 80089b8:	fffff254 	.word	0xfffff254
 80089bc:	fffffce0 	.word	0xfffffce0
 80089c0:	ffffd8f0 	.word	0xffffd8f0
 80089c4:	ffffc180 	.word	0xffffc180

080089c8 <v_L90>:
//v_L90
// 柱中心から左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L90(void){
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af02      	add	r7, sp, #8
	full_led_write1(PURPLE);
 80089ce:	2005      	movs	r0, #5
 80089d0:	f009 fbaa 	bl	8012128 <full_led_write1>
	if(run_mode == 1){
 80089d4:	4b71      	ldr	r3, [pc, #452]	; (8008b9c <v_L90+0x1d4>)
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d11d      	bne.n	8008a1a <v_L90+0x52>
		slalomF(10000, SPEED_1, V90_OFFSET_F, NO_WALL, NO_WALL);
 80089de:	f241 3388 	movw	r3, #5000	; 0x1388
 80089e2:	9300      	str	r3, [sp, #0]
 80089e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80089e8:	222d      	movs	r2, #45	; 0x2d
 80089ea:	21c8      	movs	r1, #200	; 0xc8
 80089ec:	f242 7010 	movw	r0, #10000	; 0x2710
 80089f0:	f7fc fda4 	bl	800553c <slalomF>
		slalomR(V90_DEGACCEL, V90_OMEGA, 90, SPEED_1);
 80089f4:	23c8      	movs	r3, #200	; 0xc8
 80089f6:	225a      	movs	r2, #90	; 0x5a
 80089f8:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80089fc:	f640 50ac 	movw	r0, #3500	; 0xdac
 8008a00:	f7fc fe14 	bl	800562c <slalomR>

		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008a04:	2103      	movs	r1, #3
 8008a06:	20fe      	movs	r0, #254	; 0xfe
 8008a08:	f007 fcfa 	bl	8010400 <turn_dir>

		slalomB(10000, SPEED_1, V90_OFFSET_B);
 8008a0c:	222d      	movs	r2, #45	; 0x2d
 8008a0e:	21c8      	movs	r1, #200	; 0xc8
 8008a10:	f242 7010 	movw	r0, #10000	; 0x2710
 8008a14:	f7fc ff64 	bl	80058e0 <slalomB>

		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理

		slalomB(10000, SPEED_5, V90_5_OFFSET_B);
	}
}
 8008a18:	e0bc      	b.n	8008b94 <v_L90+0x1cc>
	}else if(run_mode == 2){
 8008a1a:	4b60      	ldr	r3, [pc, #384]	; (8008b9c <v_L90+0x1d4>)
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	d120      	bne.n	8008a66 <v_L90+0x9e>
		slalomF(10000, SPEED_2, V90_2_OFFSET_F, NO_WALL, NO_WALL);
 8008a24:	f241 3388 	movw	r3, #5000	; 0x1388
 8008a28:	9300      	str	r3, [sp, #0]
 8008a2a:	f241 3388 	movw	r3, #5000	; 0x1388
 8008a2e:	222d      	movs	r2, #45	; 0x2d
 8008a30:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008a34:	f242 7010 	movw	r0, #10000	; 0x2710
 8008a38:	f7fc fd80 	bl	800553c <slalomF>
		slalomR(V90_2_DEGACCEL, V90_2_OMEGA, 90, SPEED_2);
 8008a3c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008a40:	225a      	movs	r2, #90	; 0x5a
 8008a42:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8008a46:	f640 50ac 	movw	r0, #3500	; 0xdac
 8008a4a:	f7fc fdef 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008a4e:	2103      	movs	r1, #3
 8008a50:	20fe      	movs	r0, #254	; 0xfe
 8008a52:	f007 fcd5 	bl	8010400 <turn_dir>
		slalomB(10000, SPEED_2, V90_2_OFFSET_B);
 8008a56:	222d      	movs	r2, #45	; 0x2d
 8008a58:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008a5c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008a60:	f7fc ff3e 	bl	80058e0 <slalomB>
}
 8008a64:	e096      	b.n	8008b94 <v_L90+0x1cc>
	}else if(run_mode == 3){
 8008a66:	4b4d      	ldr	r3, [pc, #308]	; (8008b9c <v_L90+0x1d4>)
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	2b03      	cmp	r3, #3
 8008a6e:	d120      	bne.n	8008ab2 <v_L90+0xea>
		slalomF(10000, SPEED_3, V90_3_OFFSET_F, NO_WALL, NO_WALL);
 8008a70:	f241 3388 	movw	r3, #5000	; 0x1388
 8008a74:	9300      	str	r3, [sp, #0]
 8008a76:	f241 3388 	movw	r3, #5000	; 0x1388
 8008a7a:	223a      	movs	r2, #58	; 0x3a
 8008a7c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008a80:	f242 7010 	movw	r0, #10000	; 0x2710
 8008a84:	f7fc fd5a 	bl	800553c <slalomF>
		slalomR(V90_3_DEGACCEL, V90_3_OMEGA, 90, SPEED_3);
 8008a88:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008a8c:	225a      	movs	r2, #90	; 0x5a
 8008a8e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008a92:	f242 7010 	movw	r0, #10000	; 0x2710
 8008a96:	f7fc fdc9 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008a9a:	2103      	movs	r1, #3
 8008a9c:	20fe      	movs	r0, #254	; 0xfe
 8008a9e:	f007 fcaf 	bl	8010400 <turn_dir>
		slalomB(10000, SPEED_3, V90_3_OFFSET_B);
 8008aa2:	2252      	movs	r2, #82	; 0x52
 8008aa4:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008aa8:	f242 7010 	movw	r0, #10000	; 0x2710
 8008aac:	f7fc ff18 	bl	80058e0 <slalomB>
}
 8008ab0:	e070      	b.n	8008b94 <v_L90+0x1cc>
	}else if(run_mode == 4){
 8008ab2:	4b3a      	ldr	r3, [pc, #232]	; (8008b9c <v_L90+0x1d4>)
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	2b04      	cmp	r3, #4
 8008aba:	d120      	bne.n	8008afe <v_L90+0x136>
		slalomF(10000, SPEED_4, V90_4_OFFSET_F, NO_WALL, NO_WALL);
 8008abc:	f241 3388 	movw	r3, #5000	; 0x1388
 8008ac0:	9300      	str	r3, [sp, #0]
 8008ac2:	f241 3388 	movw	r3, #5000	; 0x1388
 8008ac6:	2223      	movs	r2, #35	; 0x23
 8008ac8:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008acc:	f242 7010 	movw	r0, #10000	; 0x2710
 8008ad0:	f7fc fd34 	bl	800553c <slalomF>
		slalomR(V90_4_DEGACCEL, V90_4_OMEGA, 90, SPEED_4);
 8008ad4:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008ad8:	225a      	movs	r2, #90	; 0x5a
 8008ada:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008ade:	f242 7010 	movw	r0, #10000	; 0x2710
 8008ae2:	f7fc fda3 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008ae6:	2103      	movs	r1, #3
 8008ae8:	20fe      	movs	r0, #254	; 0xfe
 8008aea:	f007 fc89 	bl	8010400 <turn_dir>
		slalomB(10000, SPEED_4, V90_4_OFFSET_B);
 8008aee:	2241      	movs	r2, #65	; 0x41
 8008af0:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008af4:	f242 7010 	movw	r0, #10000	; 0x2710
 8008af8:	f7fc fef2 	bl	80058e0 <slalomB>
}
 8008afc:	e04a      	b.n	8008b94 <v_L90+0x1cc>
	}else if(run_mode == 5){
 8008afe:	4b27      	ldr	r3, [pc, #156]	; (8008b9c <v_L90+0x1d4>)
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	2b05      	cmp	r3, #5
 8008b06:	d120      	bne.n	8008b4a <v_L90+0x182>
		slalomF(10000, SPEED_5, V90_5_OFFSET_F, NO_WALL, NO_WALL);
 8008b08:	f241 3388 	movw	r3, #5000	; 0x1388
 8008b0c:	9300      	str	r3, [sp, #0]
 8008b0e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008b12:	221e      	movs	r2, #30
 8008b14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008b18:	f242 7010 	movw	r0, #10000	; 0x2710
 8008b1c:	f7fc fd0e 	bl	800553c <slalomF>
		slalomR(V90_5_DEGACCEL, V90_5_OMEGA, 90, SPEED_5);
 8008b20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008b24:	225a      	movs	r2, #90	; 0x5a
 8008b26:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008b2a:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8008b2e:	f7fc fd7d 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008b32:	2103      	movs	r1, #3
 8008b34:	20fe      	movs	r0, #254	; 0xfe
 8008b36:	f007 fc63 	bl	8010400 <turn_dir>
		slalomB(10000, SPEED_5, V90_5_OFFSET_B);
 8008b3a:	221e      	movs	r2, #30
 8008b3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008b40:	f242 7010 	movw	r0, #10000	; 0x2710
 8008b44:	f7fc fecc 	bl	80058e0 <slalomB>
}
 8008b48:	e024      	b.n	8008b94 <v_L90+0x1cc>
	}else if(run_mode == 6){
 8008b4a:	4b14      	ldr	r3, [pc, #80]	; (8008b9c <v_L90+0x1d4>)
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	2b06      	cmp	r3, #6
 8008b52:	d11f      	bne.n	8008b94 <v_L90+0x1cc>
		slalomF(10000, SPEED_5, V90_5_OFFSET_F, NO_WALL, NO_WALL);
 8008b54:	f241 3388 	movw	r3, #5000	; 0x1388
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	f241 3388 	movw	r3, #5000	; 0x1388
 8008b5e:	221e      	movs	r2, #30
 8008b60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008b64:	f242 7010 	movw	r0, #10000	; 0x2710
 8008b68:	f7fc fce8 	bl	800553c <slalomF>
		slalomR(V90_5_DEGACCEL, V90_5_OMEGA, 90, SPEED_5);
 8008b6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008b70:	225a      	movs	r2, #90	; 0x5a
 8008b72:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008b76:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8008b7a:	f7fc fd57 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008b7e:	2103      	movs	r1, #3
 8008b80:	20fe      	movs	r0, #254	; 0xfe
 8008b82:	f007 fc3d 	bl	8010400 <turn_dir>
		slalomB(10000, SPEED_5, V90_5_OFFSET_B);
 8008b86:	221e      	movs	r2, #30
 8008b88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008b8c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008b90:	f7fc fea6 	bl	80058e0 <slalomB>
}
 8008b94:	bf00      	nop
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	20000456 	.word	0x20000456

08008ba0 <v_R135>:
//v_R135
// 区画中心から右に135度回転する　ゴール用
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R135(void){
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b082      	sub	sp, #8
 8008ba4:	af02      	add	r7, sp, #8
	full_led_write1(YELLOW);
 8008ba6:	2006      	movs	r0, #6
 8008ba8:	f009 fabe 	bl	8012128 <full_led_write1>
	if(run_mode == 1){
 8008bac:	4bbf      	ldr	r3, [pc, #764]	; (8008eac <v_R135+0x30c>)
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d150      	bne.n	8008c58 <v_R135+0xb8>
		if(!MF2.FLAG.V){
 8008bb6:	4bbe      	ldr	r3, [pc, #760]	; (8008eb0 <v_R135+0x310>)
 8008bb8:	881b      	ldrh	r3, [r3, #0]
 8008bba:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d10b      	bne.n	8008bdc <v_R135+0x3c>
			slalomF(10000, SPEED_1, V135_OFFSET_F, NO_WALL, NO_WALL);
 8008bc4:	f241 3388 	movw	r3, #5000	; 0x1388
 8008bc8:	9300      	str	r3, [sp, #0]
 8008bca:	f241 3388 	movw	r3, #5000	; 0x1388
 8008bce:	2244      	movs	r2, #68	; 0x44
 8008bd0:	21c8      	movs	r1, #200	; 0xc8
 8008bd2:	f242 7010 	movw	r0, #10000	; 0x2710
 8008bd6:	f7fc fcb1 	bl	800553c <slalomF>
 8008bda:	e00a      	b.n	8008bf2 <v_R135+0x52>
		}else{
			slalomF(10000, SPEED_1, V135_OFFSET_VF, NO_WALL, NO_WALL);
 8008bdc:	f241 3388 	movw	r3, #5000	; 0x1388
 8008be0:	9300      	str	r3, [sp, #0]
 8008be2:	f241 3388 	movw	r3, #5000	; 0x1388
 8008be6:	223a      	movs	r2, #58	; 0x3a
 8008be8:	21c8      	movs	r1, #200	; 0xc8
 8008bea:	f242 7010 	movw	r0, #10000	; 0x2710
 8008bee:	f7fc fca5 	bl	800553c <slalomF>
		}
		slalomR(-V135_DEGACCEL, -V135_OMEGA, -135, SPEED_1);
 8008bf2:	23c8      	movs	r3, #200	; 0xc8
 8008bf4:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008bf8:	49ae      	ldr	r1, [pc, #696]	; (8008eb4 <v_R135+0x314>)
 8008bfa:	48af      	ldr	r0, [pc, #700]	; (8008eb8 <v_R135+0x318>)
 8008bfc:	f7fc fd16 	bl	800562c <slalomR>

		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008c00:	2103      	movs	r1, #3
 8008c02:	2003      	movs	r0, #3
 8008c04:	f007 fbfc 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008c08:	4ba9      	ldr	r3, [pc, #676]	; (8008eb0 <v_R135+0x310>)
 8008c0a:	881b      	ldrh	r3, [r3, #0]
 8008c0c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	3301      	adds	r3, #1
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	f003 0301 	and.w	r3, r3, #1
 8008c1a:	bfb8      	it	lt
 8008c1c:	425b      	neglt	r3, r3
 8008c1e:	f003 0301 	and.w	r3, r3, #1
 8008c22:	b2d9      	uxtb	r1, r3
 8008c24:	4aa2      	ldr	r2, [pc, #648]	; (8008eb0 <v_R135+0x310>)
 8008c26:	8813      	ldrh	r3, [r2, #0]
 8008c28:	f361 03c3 	bfi	r3, r1, #3, #1
 8008c2c:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 8008c2e:	4ba0      	ldr	r3, [pc, #640]	; (8008eb0 <v_R135+0x310>)
 8008c30:	881b      	ldrh	r3, [r3, #0]
 8008c32:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d106      	bne.n	8008c4a <v_R135+0xaa>
			slalomB(10000, SPEED_1, V135_OFFSET_VB);
 8008c3c:	2244      	movs	r2, #68	; 0x44
 8008c3e:	21c8      	movs	r1, #200	; 0xc8
 8008c40:	f242 7010 	movw	r0, #10000	; 0x2710
 8008c44:	f7fc fe4c 	bl	80058e0 <slalomB>
			slalomB(10000, SPEED_5, V135_5_OFFSET_VB);
		}else{
			slalomB(10000, SPEED_5, V135_5_OFFSET_B);
		}
	}
}
 8008c48:	e1dc      	b.n	8009004 <v_R135+0x464>
			slalomB(10000, SPEED_1, V135_OFFSET_B);
 8008c4a:	223a      	movs	r2, #58	; 0x3a
 8008c4c:	21c8      	movs	r1, #200	; 0xc8
 8008c4e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008c52:	f7fc fe45 	bl	80058e0 <slalomB>
}
 8008c56:	e1d5      	b.n	8009004 <v_R135+0x464>
	}else if(run_mode == 2){
 8008c58:	4b94      	ldr	r3, [pc, #592]	; (8008eac <v_R135+0x30c>)
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	2b02      	cmp	r3, #2
 8008c60:	d155      	bne.n	8008d0e <v_R135+0x16e>
		if(!MF2.FLAG.V){
 8008c62:	4b93      	ldr	r3, [pc, #588]	; (8008eb0 <v_R135+0x310>)
 8008c64:	881b      	ldrh	r3, [r3, #0]
 8008c66:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d10c      	bne.n	8008c8a <v_R135+0xea>
			slalomF(10000, SPEED_2, V135_2_OFFSET_F, NO_WALL, NO_WALL);
 8008c70:	f241 3388 	movw	r3, #5000	; 0x1388
 8008c74:	9300      	str	r3, [sp, #0]
 8008c76:	f241 3388 	movw	r3, #5000	; 0x1388
 8008c7a:	2244      	movs	r2, #68	; 0x44
 8008c7c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008c80:	f242 7010 	movw	r0, #10000	; 0x2710
 8008c84:	f7fc fc5a 	bl	800553c <slalomF>
 8008c88:	e00b      	b.n	8008ca2 <v_R135+0x102>
			slalomF(10000, SPEED_2, V135_2_OFFSET_VF, NO_WALL, NO_WALL);
 8008c8a:	f241 3388 	movw	r3, #5000	; 0x1388
 8008c8e:	9300      	str	r3, [sp, #0]
 8008c90:	f241 3388 	movw	r3, #5000	; 0x1388
 8008c94:	223a      	movs	r2, #58	; 0x3a
 8008c96:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008c9a:	f242 7010 	movw	r0, #10000	; 0x2710
 8008c9e:	f7fc fc4d 	bl	800553c <slalomF>
		slalomR(-V135_2_DEGACCEL, -V135_2_OMEGA, -135, SPEED_2);
 8008ca2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008ca6:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008caa:	4982      	ldr	r1, [pc, #520]	; (8008eb4 <v_R135+0x314>)
 8008cac:	4882      	ldr	r0, [pc, #520]	; (8008eb8 <v_R135+0x318>)
 8008cae:	f7fc fcbd 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008cb2:	2103      	movs	r1, #3
 8008cb4:	2003      	movs	r0, #3
 8008cb6:	f007 fba3 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008cba:	4b7d      	ldr	r3, [pc, #500]	; (8008eb0 <v_R135+0x310>)
 8008cbc:	881b      	ldrh	r3, [r3, #0]
 8008cbe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	f003 0301 	and.w	r3, r3, #1
 8008ccc:	bfb8      	it	lt
 8008cce:	425b      	neglt	r3, r3
 8008cd0:	f003 0301 	and.w	r3, r3, #1
 8008cd4:	b2d9      	uxtb	r1, r3
 8008cd6:	4a76      	ldr	r2, [pc, #472]	; (8008eb0 <v_R135+0x310>)
 8008cd8:	8813      	ldrh	r3, [r2, #0]
 8008cda:	f361 03c3 	bfi	r3, r1, #3, #1
 8008cde:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008ce0:	4b73      	ldr	r3, [pc, #460]	; (8008eb0 <v_R135+0x310>)
 8008ce2:	881b      	ldrh	r3, [r3, #0]
 8008ce4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d107      	bne.n	8008cfe <v_R135+0x15e>
			slalomB(10000, SPEED_2, V135_2_OFFSET_VB);
 8008cee:	2244      	movs	r2, #68	; 0x44
 8008cf0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008cf4:	f242 7010 	movw	r0, #10000	; 0x2710
 8008cf8:	f7fc fdf2 	bl	80058e0 <slalomB>
}
 8008cfc:	e182      	b.n	8009004 <v_R135+0x464>
			slalomB(10000, SPEED_2, V135_2_OFFSET_B);
 8008cfe:	223a      	movs	r2, #58	; 0x3a
 8008d00:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008d04:	f242 7010 	movw	r0, #10000	; 0x2710
 8008d08:	f7fc fdea 	bl	80058e0 <slalomB>
}
 8008d0c:	e17a      	b.n	8009004 <v_R135+0x464>
	}else if(run_mode == 3){
 8008d0e:	4b67      	ldr	r3, [pc, #412]	; (8008eac <v_R135+0x30c>)
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	2b03      	cmp	r3, #3
 8008d16:	d155      	bne.n	8008dc4 <v_R135+0x224>
		if(!MF2.FLAG.V){
 8008d18:	4b65      	ldr	r3, [pc, #404]	; (8008eb0 <v_R135+0x310>)
 8008d1a:	881b      	ldrh	r3, [r3, #0]
 8008d1c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d10c      	bne.n	8008d40 <v_R135+0x1a0>
			slalomF(10000, SPEED_3, V135_3_OFFSET_F, NO_WALL, NO_WALL);
 8008d26:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d30:	2246      	movs	r2, #70	; 0x46
 8008d32:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008d36:	f242 7010 	movw	r0, #10000	; 0x2710
 8008d3a:	f7fc fbff 	bl	800553c <slalomF>
 8008d3e:	e00b      	b.n	8008d58 <v_R135+0x1b8>
			slalomF(10000, SPEED_3, V135_3_OFFSET_VF, NO_WALL, NO_WALL);
 8008d40:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d44:	9300      	str	r3, [sp, #0]
 8008d46:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d4a:	2237      	movs	r2, #55	; 0x37
 8008d4c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008d50:	f242 7010 	movw	r0, #10000	; 0x2710
 8008d54:	f7fc fbf2 	bl	800553c <slalomF>
		slalomR(-V135_3_DEGACCEL, -V135_3_OMEGA, -135, SPEED_3);
 8008d58:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008d5c:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008d60:	4956      	ldr	r1, [pc, #344]	; (8008ebc <v_R135+0x31c>)
 8008d62:	4857      	ldr	r0, [pc, #348]	; (8008ec0 <v_R135+0x320>)
 8008d64:	f7fc fc62 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008d68:	2103      	movs	r1, #3
 8008d6a:	2003      	movs	r0, #3
 8008d6c:	f007 fb48 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008d70:	4b4f      	ldr	r3, [pc, #316]	; (8008eb0 <v_R135+0x310>)
 8008d72:	881b      	ldrh	r3, [r3, #0]
 8008d74:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f003 0301 	and.w	r3, r3, #1
 8008d82:	bfb8      	it	lt
 8008d84:	425b      	neglt	r3, r3
 8008d86:	f003 0301 	and.w	r3, r3, #1
 8008d8a:	b2d9      	uxtb	r1, r3
 8008d8c:	4a48      	ldr	r2, [pc, #288]	; (8008eb0 <v_R135+0x310>)
 8008d8e:	8813      	ldrh	r3, [r2, #0]
 8008d90:	f361 03c3 	bfi	r3, r1, #3, #1
 8008d94:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008d96:	4b46      	ldr	r3, [pc, #280]	; (8008eb0 <v_R135+0x310>)
 8008d98:	881b      	ldrh	r3, [r3, #0]
 8008d9a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d107      	bne.n	8008db4 <v_R135+0x214>
			slalomB(10000, SPEED_3, V135_3_OFFSET_VB);
 8008da4:	225f      	movs	r2, #95	; 0x5f
 8008da6:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008daa:	f242 7010 	movw	r0, #10000	; 0x2710
 8008dae:	f7fc fd97 	bl	80058e0 <slalomB>
}
 8008db2:	e127      	b.n	8009004 <v_R135+0x464>
			slalomB(10000, SPEED_3, V135_3_OFFSET_B);
 8008db4:	2250      	movs	r2, #80	; 0x50
 8008db6:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008dba:	f242 7010 	movw	r0, #10000	; 0x2710
 8008dbe:	f7fc fd8f 	bl	80058e0 <slalomB>
}
 8008dc2:	e11f      	b.n	8009004 <v_R135+0x464>
	}else if(run_mode == 4){
 8008dc4:	4b39      	ldr	r3, [pc, #228]	; (8008eac <v_R135+0x30c>)
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	2b04      	cmp	r3, #4
 8008dcc:	d155      	bne.n	8008e7a <v_R135+0x2da>
		if(!MF2.FLAG.V){
 8008dce:	4b38      	ldr	r3, [pc, #224]	; (8008eb0 <v_R135+0x310>)
 8008dd0:	881b      	ldrh	r3, [r3, #0]
 8008dd2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d10c      	bne.n	8008df6 <v_R135+0x256>
			slalomF(10000, SPEED_4, V135_4_OFFSET_F, NO_WALL, NO_WALL);
 8008ddc:	f241 3388 	movw	r3, #5000	; 0x1388
 8008de0:	9300      	str	r3, [sp, #0]
 8008de2:	f241 3388 	movw	r3, #5000	; 0x1388
 8008de6:	2255      	movs	r2, #85	; 0x55
 8008de8:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008dec:	f242 7010 	movw	r0, #10000	; 0x2710
 8008df0:	f7fc fba4 	bl	800553c <slalomF>
 8008df4:	e00b      	b.n	8008e0e <v_R135+0x26e>
			slalomF(10000, SPEED_4, V135_4_OFFSET_VF, NO_WALL, NO_WALL);
 8008df6:	f241 3388 	movw	r3, #5000	; 0x1388
 8008dfa:	9300      	str	r3, [sp, #0]
 8008dfc:	f241 3388 	movw	r3, #5000	; 0x1388
 8008e00:	224b      	movs	r2, #75	; 0x4b
 8008e02:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008e06:	f242 7010 	movw	r0, #10000	; 0x2710
 8008e0a:	f7fc fb97 	bl	800553c <slalomF>
		slalomR(-V135_4_DEGACCEL, -V135_4_OMEGA, -135, SPEED_4);
 8008e0e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008e12:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008e16:	492b      	ldr	r1, [pc, #172]	; (8008ec4 <v_R135+0x324>)
 8008e18:	482b      	ldr	r0, [pc, #172]	; (8008ec8 <v_R135+0x328>)
 8008e1a:	f7fc fc07 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008e1e:	2103      	movs	r1, #3
 8008e20:	2003      	movs	r0, #3
 8008e22:	f007 faed 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008e26:	4b22      	ldr	r3, [pc, #136]	; (8008eb0 <v_R135+0x310>)
 8008e28:	881b      	ldrh	r3, [r3, #0]
 8008e2a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	3301      	adds	r3, #1
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	f003 0301 	and.w	r3, r3, #1
 8008e38:	bfb8      	it	lt
 8008e3a:	425b      	neglt	r3, r3
 8008e3c:	f003 0301 	and.w	r3, r3, #1
 8008e40:	b2d9      	uxtb	r1, r3
 8008e42:	4a1b      	ldr	r2, [pc, #108]	; (8008eb0 <v_R135+0x310>)
 8008e44:	8813      	ldrh	r3, [r2, #0]
 8008e46:	f361 03c3 	bfi	r3, r1, #3, #1
 8008e4a:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008e4c:	4b18      	ldr	r3, [pc, #96]	; (8008eb0 <v_R135+0x310>)
 8008e4e:	881b      	ldrh	r3, [r3, #0]
 8008e50:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d107      	bne.n	8008e6a <v_R135+0x2ca>
			slalomB(10000, SPEED_4, V135_4_OFFSET_VB);
 8008e5a:	2282      	movs	r2, #130	; 0x82
 8008e5c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008e60:	f242 7010 	movw	r0, #10000	; 0x2710
 8008e64:	f7fc fd3c 	bl	80058e0 <slalomB>
}
 8008e68:	e0cc      	b.n	8009004 <v_R135+0x464>
			slalomB(10000, SPEED_4, V135_4_OFFSET_B);
 8008e6a:	2269      	movs	r2, #105	; 0x69
 8008e6c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008e70:	f242 7010 	movw	r0, #10000	; 0x2710
 8008e74:	f7fc fd34 	bl	80058e0 <slalomB>
}
 8008e78:	e0c4      	b.n	8009004 <v_R135+0x464>
	}else if(run_mode == 5){
 8008e7a:	4b0c      	ldr	r3, [pc, #48]	; (8008eac <v_R135+0x30c>)
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	2b05      	cmp	r3, #5
 8008e82:	d165      	bne.n	8008f50 <v_R135+0x3b0>
		if(!MF2.FLAG.V){
 8008e84:	4b0a      	ldr	r3, [pc, #40]	; (8008eb0 <v_R135+0x310>)
 8008e86:	881b      	ldrh	r3, [r3, #0]
 8008e88:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d11c      	bne.n	8008ecc <v_R135+0x32c>
			slalomF(10000, SPEED_5, V135_5_OFFSET_F, NO_WALL, NO_WALL);
 8008e92:	f241 3388 	movw	r3, #5000	; 0x1388
 8008e96:	9300      	str	r3, [sp, #0]
 8008e98:	f241 3388 	movw	r3, #5000	; 0x1388
 8008e9c:	2243      	movs	r2, #67	; 0x43
 8008e9e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008ea2:	f242 7010 	movw	r0, #10000	; 0x2710
 8008ea6:	f7fc fb49 	bl	800553c <slalomF>
 8008eaa:	e01b      	b.n	8008ee4 <v_R135+0x344>
 8008eac:	20000456 	.word	0x20000456
 8008eb0:	20000fa4 	.word	0x20000fa4
 8008eb4:	fffffed4 	.word	0xfffffed4
 8008eb8:	fffff448 	.word	0xfffff448
 8008ebc:	fffffe0c 	.word	0xfffffe0c
 8008ec0:	ffffec78 	.word	0xffffec78
 8008ec4:	fffffce0 	.word	0xfffffce0
 8008ec8:	ffffe0c0 	.word	0xffffe0c0
			slalomF(10000, SPEED_5, V135_5_OFFSET_VF, NO_WALL, NO_WALL);
 8008ecc:	f241 3388 	movw	r3, #5000	; 0x1388
 8008ed0:	9300      	str	r3, [sp, #0]
 8008ed2:	f241 3388 	movw	r3, #5000	; 0x1388
 8008ed6:	2243      	movs	r2, #67	; 0x43
 8008ed8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008edc:	f242 7010 	movw	r0, #10000	; 0x2710
 8008ee0:	f7fc fb2c 	bl	800553c <slalomF>
		slalomR(-V135_5_DEGACCEL, -V135_5_OMEGA, -135, SPEED_5);
 8008ee4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008ee8:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008eec:	4947      	ldr	r1, [pc, #284]	; (800900c <v_R135+0x46c>)
 8008eee:	4848      	ldr	r0, [pc, #288]	; (8009010 <v_R135+0x470>)
 8008ef0:	f7fc fb9c 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008ef4:	2103      	movs	r1, #3
 8008ef6:	2003      	movs	r0, #3
 8008ef8:	f007 fa82 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008efc:	4b45      	ldr	r3, [pc, #276]	; (8009014 <v_R135+0x474>)
 8008efe:	881b      	ldrh	r3, [r3, #0]
 8008f00:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	3301      	adds	r3, #1
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	f003 0301 	and.w	r3, r3, #1
 8008f0e:	bfb8      	it	lt
 8008f10:	425b      	neglt	r3, r3
 8008f12:	f003 0301 	and.w	r3, r3, #1
 8008f16:	b2d9      	uxtb	r1, r3
 8008f18:	4a3e      	ldr	r2, [pc, #248]	; (8009014 <v_R135+0x474>)
 8008f1a:	8813      	ldrh	r3, [r2, #0]
 8008f1c:	f361 03c3 	bfi	r3, r1, #3, #1
 8008f20:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008f22:	4b3c      	ldr	r3, [pc, #240]	; (8009014 <v_R135+0x474>)
 8008f24:	881b      	ldrh	r3, [r3, #0]
 8008f26:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d107      	bne.n	8008f40 <v_R135+0x3a0>
			slalomB(10000, SPEED_5, V135_5_OFFSET_VB);
 8008f30:	2232      	movs	r2, #50	; 0x32
 8008f32:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008f36:	f242 7010 	movw	r0, #10000	; 0x2710
 8008f3a:	f7fc fcd1 	bl	80058e0 <slalomB>
}
 8008f3e:	e061      	b.n	8009004 <v_R135+0x464>
			slalomB(10000, SPEED_5, V135_5_OFFSET_B);
 8008f40:	2232      	movs	r2, #50	; 0x32
 8008f42:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008f46:	f242 7010 	movw	r0, #10000	; 0x2710
 8008f4a:	f7fc fcc9 	bl	80058e0 <slalomB>
}
 8008f4e:	e059      	b.n	8009004 <v_R135+0x464>
	}else if(run_mode == 6){
 8008f50:	4b31      	ldr	r3, [pc, #196]	; (8009018 <v_R135+0x478>)
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	2b06      	cmp	r3, #6
 8008f58:	d154      	bne.n	8009004 <v_R135+0x464>
		if(!MF2.FLAG.V){
 8008f5a:	4b2e      	ldr	r3, [pc, #184]	; (8009014 <v_R135+0x474>)
 8008f5c:	881b      	ldrh	r3, [r3, #0]
 8008f5e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d10c      	bne.n	8008f82 <v_R135+0x3e2>
			slalomF(10000, SPEED_5, V135_5_OFFSET_F, NO_WALL, NO_WALL);
 8008f68:	f241 3388 	movw	r3, #5000	; 0x1388
 8008f6c:	9300      	str	r3, [sp, #0]
 8008f6e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008f72:	2243      	movs	r2, #67	; 0x43
 8008f74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008f78:	f242 7010 	movw	r0, #10000	; 0x2710
 8008f7c:	f7fc fade 	bl	800553c <slalomF>
 8008f80:	e00b      	b.n	8008f9a <v_R135+0x3fa>
			slalomF(10000, SPEED_5, V135_5_OFFSET_VF, NO_WALL, NO_WALL);
 8008f82:	f241 3388 	movw	r3, #5000	; 0x1388
 8008f86:	9300      	str	r3, [sp, #0]
 8008f88:	f241 3388 	movw	r3, #5000	; 0x1388
 8008f8c:	2243      	movs	r2, #67	; 0x43
 8008f8e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008f92:	f242 7010 	movw	r0, #10000	; 0x2710
 8008f96:	f7fc fad1 	bl	800553c <slalomF>
		slalomR(-V135_5_DEGACCEL, -V135_5_OMEGA, -135, SPEED_5);
 8008f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008f9e:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008fa2:	491a      	ldr	r1, [pc, #104]	; (800900c <v_R135+0x46c>)
 8008fa4:	481a      	ldr	r0, [pc, #104]	; (8009010 <v_R135+0x470>)
 8008fa6:	f7fc fb41 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008faa:	2103      	movs	r1, #3
 8008fac:	2003      	movs	r0, #3
 8008fae:	f007 fa27 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008fb2:	4b18      	ldr	r3, [pc, #96]	; (8009014 <v_R135+0x474>)
 8008fb4:	881b      	ldrh	r3, [r3, #0]
 8008fb6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	f003 0301 	and.w	r3, r3, #1
 8008fc4:	bfb8      	it	lt
 8008fc6:	425b      	neglt	r3, r3
 8008fc8:	f003 0301 	and.w	r3, r3, #1
 8008fcc:	b2d9      	uxtb	r1, r3
 8008fce:	4a11      	ldr	r2, [pc, #68]	; (8009014 <v_R135+0x474>)
 8008fd0:	8813      	ldrh	r3, [r2, #0]
 8008fd2:	f361 03c3 	bfi	r3, r1, #3, #1
 8008fd6:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008fd8:	4b0e      	ldr	r3, [pc, #56]	; (8009014 <v_R135+0x474>)
 8008fda:	881b      	ldrh	r3, [r3, #0]
 8008fdc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d107      	bne.n	8008ff6 <v_R135+0x456>
			slalomB(10000, SPEED_5, V135_5_OFFSET_VB);
 8008fe6:	2232      	movs	r2, #50	; 0x32
 8008fe8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008fec:	f242 7010 	movw	r0, #10000	; 0x2710
 8008ff0:	f7fc fc76 	bl	80058e0 <slalomB>
}
 8008ff4:	e006      	b.n	8009004 <v_R135+0x464>
			slalomB(10000, SPEED_5, V135_5_OFFSET_B);
 8008ff6:	2232      	movs	r2, #50	; 0x32
 8008ff8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008ffc:	f242 7010 	movw	r0, #10000	; 0x2710
 8009000:	f7fc fc6e 	bl	80058e0 <slalomB>
}
 8009004:	bf00      	nop
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	fffffc18 	.word	0xfffffc18
 8009010:	ffffd8f0 	.word	0xffffd8f0
 8009014:	20000fa4 	.word	0x20000fa4
 8009018:	20000456 	.word	0x20000456

0800901c <v_L135>:
//v_L135
// 区画中心から左に135度回転する　ゴール用
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L135(void){
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af02      	add	r7, sp, #8
	full_led_write1(PURPLE);
 8009022:	2005      	movs	r0, #5
 8009024:	f009 f880 	bl	8012128 <full_led_write1>
	if(run_mode == 1){
 8009028:	4bc1      	ldr	r3, [pc, #772]	; (8009330 <v_L135+0x314>)
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	b2db      	uxtb	r3, r3
 800902e:	2b01      	cmp	r3, #1
 8009030:	d151      	bne.n	80090d6 <v_L135+0xba>
		if(!MF2.FLAG.V){
 8009032:	4bc0      	ldr	r3, [pc, #768]	; (8009334 <v_L135+0x318>)
 8009034:	881b      	ldrh	r3, [r3, #0]
 8009036:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800903a:	b2db      	uxtb	r3, r3
 800903c:	2b00      	cmp	r3, #0
 800903e:	d10b      	bne.n	8009058 <v_L135+0x3c>
			slalomF(10000, SPEED_1, V135_OFFSET_F, NO_WALL, NO_WALL);
 8009040:	f241 3388 	movw	r3, #5000	; 0x1388
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	f241 3388 	movw	r3, #5000	; 0x1388
 800904a:	2244      	movs	r2, #68	; 0x44
 800904c:	21c8      	movs	r1, #200	; 0xc8
 800904e:	f242 7010 	movw	r0, #10000	; 0x2710
 8009052:	f7fc fa73 	bl	800553c <slalomF>
 8009056:	e00a      	b.n	800906e <v_L135+0x52>
		}else{
			slalomF(10000, SPEED_1, V135_OFFSET_VF, NO_WALL, NO_WALL);
 8009058:	f241 3388 	movw	r3, #5000	; 0x1388
 800905c:	9300      	str	r3, [sp, #0]
 800905e:	f241 3388 	movw	r3, #5000	; 0x1388
 8009062:	223a      	movs	r2, #58	; 0x3a
 8009064:	21c8      	movs	r1, #200	; 0xc8
 8009066:	f242 7010 	movw	r0, #10000	; 0x2710
 800906a:	f7fc fa67 	bl	800553c <slalomF>
		}
		slalomR(V135_DEGACCEL, V135_OMEGA, 135, SPEED_1);
 800906e:	23c8      	movs	r3, #200	; 0xc8
 8009070:	2287      	movs	r2, #135	; 0x87
 8009072:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8009076:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800907a:	f7fc fad7 	bl	800562c <slalomR>

		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800907e:	2103      	movs	r1, #3
 8009080:	20fd      	movs	r0, #253	; 0xfd
 8009082:	f007 f9bd 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8009086:	4bab      	ldr	r3, [pc, #684]	; (8009334 <v_L135+0x318>)
 8009088:	881b      	ldrh	r3, [r3, #0]
 800908a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800908e:	b2db      	uxtb	r3, r3
 8009090:	3301      	adds	r3, #1
 8009092:	2b00      	cmp	r3, #0
 8009094:	f003 0301 	and.w	r3, r3, #1
 8009098:	bfb8      	it	lt
 800909a:	425b      	neglt	r3, r3
 800909c:	f003 0301 	and.w	r3, r3, #1
 80090a0:	b2d9      	uxtb	r1, r3
 80090a2:	4aa4      	ldr	r2, [pc, #656]	; (8009334 <v_L135+0x318>)
 80090a4:	8813      	ldrh	r3, [r2, #0]
 80090a6:	f361 03c3 	bfi	r3, r1, #3, #1
 80090aa:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 80090ac:	4ba1      	ldr	r3, [pc, #644]	; (8009334 <v_L135+0x318>)
 80090ae:	881b      	ldrh	r3, [r3, #0]
 80090b0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d106      	bne.n	80090c8 <v_L135+0xac>
			slalomB(10000, SPEED_1, V135_OFFSET_VB);
 80090ba:	2244      	movs	r2, #68	; 0x44
 80090bc:	21c8      	movs	r1, #200	; 0xc8
 80090be:	f242 7010 	movw	r0, #10000	; 0x2710
 80090c2:	f7fc fc0d 	bl	80058e0 <slalomB>
			slalomB(10000, SPEED_5, V135_5_OFFSET_VB);
		}else{
			slalomB(10000, SPEED_5, V135_5_OFFSET_B);
		}
	}
}
 80090c6:	e1d5      	b.n	8009474 <v_L135+0x458>
			slalomB(10000, SPEED_1, V135_OFFSET_B);
 80090c8:	223a      	movs	r2, #58	; 0x3a
 80090ca:	21c8      	movs	r1, #200	; 0xc8
 80090cc:	f242 7010 	movw	r0, #10000	; 0x2710
 80090d0:	f7fc fc06 	bl	80058e0 <slalomB>
}
 80090d4:	e1ce      	b.n	8009474 <v_L135+0x458>
	}else if(run_mode == 2){
 80090d6:	4b96      	ldr	r3, [pc, #600]	; (8009330 <v_L135+0x314>)
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	2b02      	cmp	r3, #2
 80090de:	d156      	bne.n	800918e <v_L135+0x172>
		if(!MF2.FLAG.V){
 80090e0:	4b94      	ldr	r3, [pc, #592]	; (8009334 <v_L135+0x318>)
 80090e2:	881b      	ldrh	r3, [r3, #0]
 80090e4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d10c      	bne.n	8009108 <v_L135+0xec>
			slalomF(10000, SPEED_2, V135_2_OFFSET_F, NO_WALL, NO_WALL);
 80090ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80090f2:	9300      	str	r3, [sp, #0]
 80090f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80090f8:	2244      	movs	r2, #68	; 0x44
 80090fa:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80090fe:	f242 7010 	movw	r0, #10000	; 0x2710
 8009102:	f7fc fa1b 	bl	800553c <slalomF>
 8009106:	e00b      	b.n	8009120 <v_L135+0x104>
			slalomF(10000, SPEED_2, V135_2_OFFSET_VF, NO_WALL, NO_WALL);
 8009108:	f241 3388 	movw	r3, #5000	; 0x1388
 800910c:	9300      	str	r3, [sp, #0]
 800910e:	f241 3388 	movw	r3, #5000	; 0x1388
 8009112:	223a      	movs	r2, #58	; 0x3a
 8009114:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009118:	f242 7010 	movw	r0, #10000	; 0x2710
 800911c:	f7fc fa0e 	bl	800553c <slalomF>
		slalomR(V135_2_DEGACCEL, V135_2_OMEGA, 135, SPEED_2);
 8009120:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009124:	2287      	movs	r2, #135	; 0x87
 8009126:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800912a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800912e:	f7fc fa7d 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8009132:	2103      	movs	r1, #3
 8009134:	20fd      	movs	r0, #253	; 0xfd
 8009136:	f007 f963 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800913a:	4b7e      	ldr	r3, [pc, #504]	; (8009334 <v_L135+0x318>)
 800913c:	881b      	ldrh	r3, [r3, #0]
 800913e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009142:	b2db      	uxtb	r3, r3
 8009144:	3301      	adds	r3, #1
 8009146:	2b00      	cmp	r3, #0
 8009148:	f003 0301 	and.w	r3, r3, #1
 800914c:	bfb8      	it	lt
 800914e:	425b      	neglt	r3, r3
 8009150:	f003 0301 	and.w	r3, r3, #1
 8009154:	b2d9      	uxtb	r1, r3
 8009156:	4a77      	ldr	r2, [pc, #476]	; (8009334 <v_L135+0x318>)
 8009158:	8813      	ldrh	r3, [r2, #0]
 800915a:	f361 03c3 	bfi	r3, r1, #3, #1
 800915e:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8009160:	4b74      	ldr	r3, [pc, #464]	; (8009334 <v_L135+0x318>)
 8009162:	881b      	ldrh	r3, [r3, #0]
 8009164:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009168:	b2db      	uxtb	r3, r3
 800916a:	2b00      	cmp	r3, #0
 800916c:	d107      	bne.n	800917e <v_L135+0x162>
			slalomB(10000, SPEED_2, V135_2_OFFSET_VB);
 800916e:	2244      	movs	r2, #68	; 0x44
 8009170:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009174:	f242 7010 	movw	r0, #10000	; 0x2710
 8009178:	f7fc fbb2 	bl	80058e0 <slalomB>
}
 800917c:	e17a      	b.n	8009474 <v_L135+0x458>
			slalomB(10000, SPEED_2, V135_2_OFFSET_B);
 800917e:	223a      	movs	r2, #58	; 0x3a
 8009180:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009184:	f242 7010 	movw	r0, #10000	; 0x2710
 8009188:	f7fc fbaa 	bl	80058e0 <slalomB>
}
 800918c:	e172      	b.n	8009474 <v_L135+0x458>
	}else if(run_mode == 3){
 800918e:	4b68      	ldr	r3, [pc, #416]	; (8009330 <v_L135+0x314>)
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	b2db      	uxtb	r3, r3
 8009194:	2b03      	cmp	r3, #3
 8009196:	d156      	bne.n	8009246 <v_L135+0x22a>
		if(!MF2.FLAG.V){
 8009198:	4b66      	ldr	r3, [pc, #408]	; (8009334 <v_L135+0x318>)
 800919a:	881b      	ldrh	r3, [r3, #0]
 800919c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d10c      	bne.n	80091c0 <v_L135+0x1a4>
			slalomF(10000, SPEED_3, V135_3_OFFSET_F, NO_WALL, NO_WALL);
 80091a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80091aa:	9300      	str	r3, [sp, #0]
 80091ac:	f241 3388 	movw	r3, #5000	; 0x1388
 80091b0:	2246      	movs	r2, #70	; 0x46
 80091b2:	f44f 7116 	mov.w	r1, #600	; 0x258
 80091b6:	f242 7010 	movw	r0, #10000	; 0x2710
 80091ba:	f7fc f9bf 	bl	800553c <slalomF>
 80091be:	e00b      	b.n	80091d8 <v_L135+0x1bc>
			slalomF(10000, SPEED_3, V135_3_OFFSET_VF, NO_WALL, NO_WALL);
 80091c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80091c4:	9300      	str	r3, [sp, #0]
 80091c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80091ca:	2237      	movs	r2, #55	; 0x37
 80091cc:	f44f 7116 	mov.w	r1, #600	; 0x258
 80091d0:	f242 7010 	movw	r0, #10000	; 0x2710
 80091d4:	f7fc f9b2 	bl	800553c <slalomF>
		slalomR(V135_3_DEGACCEL, V135_3_OMEGA, 135, SPEED_3);
 80091d8:	f44f 7316 	mov.w	r3, #600	; 0x258
 80091dc:	2287      	movs	r2, #135	; 0x87
 80091de:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80091e2:	f241 3088 	movw	r0, #5000	; 0x1388
 80091e6:	f7fc fa21 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80091ea:	2103      	movs	r1, #3
 80091ec:	20fd      	movs	r0, #253	; 0xfd
 80091ee:	f007 f907 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80091f2:	4b50      	ldr	r3, [pc, #320]	; (8009334 <v_L135+0x318>)
 80091f4:	881b      	ldrh	r3, [r3, #0]
 80091f6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	3301      	adds	r3, #1
 80091fe:	2b00      	cmp	r3, #0
 8009200:	f003 0301 	and.w	r3, r3, #1
 8009204:	bfb8      	it	lt
 8009206:	425b      	neglt	r3, r3
 8009208:	f003 0301 	and.w	r3, r3, #1
 800920c:	b2d9      	uxtb	r1, r3
 800920e:	4a49      	ldr	r2, [pc, #292]	; (8009334 <v_L135+0x318>)
 8009210:	8813      	ldrh	r3, [r2, #0]
 8009212:	f361 03c3 	bfi	r3, r1, #3, #1
 8009216:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8009218:	4b46      	ldr	r3, [pc, #280]	; (8009334 <v_L135+0x318>)
 800921a:	881b      	ldrh	r3, [r3, #0]
 800921c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009220:	b2db      	uxtb	r3, r3
 8009222:	2b00      	cmp	r3, #0
 8009224:	d107      	bne.n	8009236 <v_L135+0x21a>
			slalomB(10000, SPEED_3, V135_3_OFFSET_VB);
 8009226:	225f      	movs	r2, #95	; 0x5f
 8009228:	f44f 7116 	mov.w	r1, #600	; 0x258
 800922c:	f242 7010 	movw	r0, #10000	; 0x2710
 8009230:	f7fc fb56 	bl	80058e0 <slalomB>
}
 8009234:	e11e      	b.n	8009474 <v_L135+0x458>
			slalomB(10000, SPEED_3, V135_3_OFFSET_B);
 8009236:	2250      	movs	r2, #80	; 0x50
 8009238:	f44f 7116 	mov.w	r1, #600	; 0x258
 800923c:	f242 7010 	movw	r0, #10000	; 0x2710
 8009240:	f7fc fb4e 	bl	80058e0 <slalomB>
}
 8009244:	e116      	b.n	8009474 <v_L135+0x458>
	}else if(run_mode == 4){
 8009246:	4b3a      	ldr	r3, [pc, #232]	; (8009330 <v_L135+0x314>)
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	b2db      	uxtb	r3, r3
 800924c:	2b04      	cmp	r3, #4
 800924e:	d156      	bne.n	80092fe <v_L135+0x2e2>
		if(!MF2.FLAG.V){
 8009250:	4b38      	ldr	r3, [pc, #224]	; (8009334 <v_L135+0x318>)
 8009252:	881b      	ldrh	r3, [r3, #0]
 8009254:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009258:	b2db      	uxtb	r3, r3
 800925a:	2b00      	cmp	r3, #0
 800925c:	d10c      	bne.n	8009278 <v_L135+0x25c>
			slalomF(10000, SPEED_4, V135_4_OFFSET_F, NO_WALL, NO_WALL);
 800925e:	f241 3388 	movw	r3, #5000	; 0x1388
 8009262:	9300      	str	r3, [sp, #0]
 8009264:	f241 3388 	movw	r3, #5000	; 0x1388
 8009268:	2255      	movs	r2, #85	; 0x55
 800926a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800926e:	f242 7010 	movw	r0, #10000	; 0x2710
 8009272:	f7fc f963 	bl	800553c <slalomF>
 8009276:	e00b      	b.n	8009290 <v_L135+0x274>
			slalomF(10000, SPEED_4, V135_4_OFFSET_VF, NO_WALL, NO_WALL);
 8009278:	f241 3388 	movw	r3, #5000	; 0x1388
 800927c:	9300      	str	r3, [sp, #0]
 800927e:	f241 3388 	movw	r3, #5000	; 0x1388
 8009282:	224b      	movs	r2, #75	; 0x4b
 8009284:	f44f 7148 	mov.w	r1, #800	; 0x320
 8009288:	f242 7010 	movw	r0, #10000	; 0x2710
 800928c:	f7fc f956 	bl	800553c <slalomF>
		slalomR(V135_4_DEGACCEL, V135_4_OMEGA, 135, SPEED_4);
 8009290:	f44f 7348 	mov.w	r3, #800	; 0x320
 8009294:	2287      	movs	r2, #135	; 0x87
 8009296:	f44f 7148 	mov.w	r1, #800	; 0x320
 800929a:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800929e:	f7fc f9c5 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80092a2:	2103      	movs	r1, #3
 80092a4:	20fd      	movs	r0, #253	; 0xfd
 80092a6:	f007 f8ab 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80092aa:	4b22      	ldr	r3, [pc, #136]	; (8009334 <v_L135+0x318>)
 80092ac:	881b      	ldrh	r3, [r3, #0]
 80092ae:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	3301      	adds	r3, #1
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	f003 0301 	and.w	r3, r3, #1
 80092bc:	bfb8      	it	lt
 80092be:	425b      	neglt	r3, r3
 80092c0:	f003 0301 	and.w	r3, r3, #1
 80092c4:	b2d9      	uxtb	r1, r3
 80092c6:	4a1b      	ldr	r2, [pc, #108]	; (8009334 <v_L135+0x318>)
 80092c8:	8813      	ldrh	r3, [r2, #0]
 80092ca:	f361 03c3 	bfi	r3, r1, #3, #1
 80092ce:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 80092d0:	4b18      	ldr	r3, [pc, #96]	; (8009334 <v_L135+0x318>)
 80092d2:	881b      	ldrh	r3, [r3, #0]
 80092d4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d107      	bne.n	80092ee <v_L135+0x2d2>
			slalomB(10000, SPEED_4, V135_4_OFFSET_VB);
 80092de:	2282      	movs	r2, #130	; 0x82
 80092e0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80092e4:	f242 7010 	movw	r0, #10000	; 0x2710
 80092e8:	f7fc fafa 	bl	80058e0 <slalomB>
}
 80092ec:	e0c2      	b.n	8009474 <v_L135+0x458>
			slalomB(10000, SPEED_4, V135_4_OFFSET_B);
 80092ee:	2269      	movs	r2, #105	; 0x69
 80092f0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80092f4:	f242 7010 	movw	r0, #10000	; 0x2710
 80092f8:	f7fc faf2 	bl	80058e0 <slalomB>
}
 80092fc:	e0ba      	b.n	8009474 <v_L135+0x458>
	}else if(run_mode == 5){
 80092fe:	4b0c      	ldr	r3, [pc, #48]	; (8009330 <v_L135+0x314>)
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	b2db      	uxtb	r3, r3
 8009304:	2b05      	cmp	r3, #5
 8009306:	d15a      	bne.n	80093be <v_L135+0x3a2>
		if(!MF2.FLAG.V){
 8009308:	4b0a      	ldr	r3, [pc, #40]	; (8009334 <v_L135+0x318>)
 800930a:	881b      	ldrh	r3, [r3, #0]
 800930c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009310:	b2db      	uxtb	r3, r3
 8009312:	2b00      	cmp	r3, #0
 8009314:	d110      	bne.n	8009338 <v_L135+0x31c>
			slalomF(10000, SPEED_5, V135_5_OFFSET_F, NO_WALL, NO_WALL);
 8009316:	f241 3388 	movw	r3, #5000	; 0x1388
 800931a:	9300      	str	r3, [sp, #0]
 800931c:	f241 3388 	movw	r3, #5000	; 0x1388
 8009320:	2243      	movs	r2, #67	; 0x43
 8009322:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009326:	f242 7010 	movw	r0, #10000	; 0x2710
 800932a:	f7fc f907 	bl	800553c <slalomF>
 800932e:	e00f      	b.n	8009350 <v_L135+0x334>
 8009330:	20000456 	.word	0x20000456
 8009334:	20000fa4 	.word	0x20000fa4
			slalomF(10000, SPEED_5, V135_5_OFFSET_VF, NO_WALL, NO_WALL);
 8009338:	f241 3388 	movw	r3, #5000	; 0x1388
 800933c:	9300      	str	r3, [sp, #0]
 800933e:	f241 3388 	movw	r3, #5000	; 0x1388
 8009342:	2243      	movs	r2, #67	; 0x43
 8009344:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009348:	f242 7010 	movw	r0, #10000	; 0x2710
 800934c:	f7fc f8f6 	bl	800553c <slalomF>
		slalomR(V135_5_DEGACCEL, V135_5_OMEGA, 135, SPEED_5);
 8009350:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009354:	2287      	movs	r2, #135	; 0x87
 8009356:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800935a:	f242 7010 	movw	r0, #10000	; 0x2710
 800935e:	f7fc f965 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8009362:	2103      	movs	r1, #3
 8009364:	20fd      	movs	r0, #253	; 0xfd
 8009366:	f007 f84b 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800936a:	4b44      	ldr	r3, [pc, #272]	; (800947c <v_L135+0x460>)
 800936c:	881b      	ldrh	r3, [r3, #0]
 800936e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009372:	b2db      	uxtb	r3, r3
 8009374:	3301      	adds	r3, #1
 8009376:	2b00      	cmp	r3, #0
 8009378:	f003 0301 	and.w	r3, r3, #1
 800937c:	bfb8      	it	lt
 800937e:	425b      	neglt	r3, r3
 8009380:	f003 0301 	and.w	r3, r3, #1
 8009384:	b2d9      	uxtb	r1, r3
 8009386:	4a3d      	ldr	r2, [pc, #244]	; (800947c <v_L135+0x460>)
 8009388:	8813      	ldrh	r3, [r2, #0]
 800938a:	f361 03c3 	bfi	r3, r1, #3, #1
 800938e:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8009390:	4b3a      	ldr	r3, [pc, #232]	; (800947c <v_L135+0x460>)
 8009392:	881b      	ldrh	r3, [r3, #0]
 8009394:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009398:	b2db      	uxtb	r3, r3
 800939a:	2b00      	cmp	r3, #0
 800939c:	d107      	bne.n	80093ae <v_L135+0x392>
			slalomB(10000, SPEED_5, V135_5_OFFSET_VB);
 800939e:	2232      	movs	r2, #50	; 0x32
 80093a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80093a4:	f242 7010 	movw	r0, #10000	; 0x2710
 80093a8:	f7fc fa9a 	bl	80058e0 <slalomB>
}
 80093ac:	e062      	b.n	8009474 <v_L135+0x458>
			slalomB(10000, SPEED_5, V135_5_OFFSET_B);
 80093ae:	2232      	movs	r2, #50	; 0x32
 80093b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80093b4:	f242 7010 	movw	r0, #10000	; 0x2710
 80093b8:	f7fc fa92 	bl	80058e0 <slalomB>
}
 80093bc:	e05a      	b.n	8009474 <v_L135+0x458>
	}else if(run_mode == 6){
 80093be:	4b30      	ldr	r3, [pc, #192]	; (8009480 <v_L135+0x464>)
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	2b06      	cmp	r3, #6
 80093c6:	d155      	bne.n	8009474 <v_L135+0x458>
		if(!MF2.FLAG.V){
 80093c8:	4b2c      	ldr	r3, [pc, #176]	; (800947c <v_L135+0x460>)
 80093ca:	881b      	ldrh	r3, [r3, #0]
 80093cc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d10c      	bne.n	80093f0 <v_L135+0x3d4>
			slalomF(10000, SPEED_5, V135_5_OFFSET_F, NO_WALL, NO_WALL);
 80093d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80093da:	9300      	str	r3, [sp, #0]
 80093dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80093e0:	2243      	movs	r2, #67	; 0x43
 80093e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80093e6:	f242 7010 	movw	r0, #10000	; 0x2710
 80093ea:	f7fc f8a7 	bl	800553c <slalomF>
 80093ee:	e00b      	b.n	8009408 <v_L135+0x3ec>
			slalomF(10000, SPEED_5, V135_5_OFFSET_VF, NO_WALL, NO_WALL);
 80093f0:	f241 3388 	movw	r3, #5000	; 0x1388
 80093f4:	9300      	str	r3, [sp, #0]
 80093f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80093fa:	2243      	movs	r2, #67	; 0x43
 80093fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009400:	f242 7010 	movw	r0, #10000	; 0x2710
 8009404:	f7fc f89a 	bl	800553c <slalomF>
		slalomR(V135_5_DEGACCEL, V135_5_OMEGA, 135, SPEED_5);
 8009408:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800940c:	2287      	movs	r2, #135	; 0x87
 800940e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009412:	f242 7010 	movw	r0, #10000	; 0x2710
 8009416:	f7fc f909 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800941a:	2103      	movs	r1, #3
 800941c:	20fd      	movs	r0, #253	; 0xfd
 800941e:	f006 ffef 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8009422:	4b16      	ldr	r3, [pc, #88]	; (800947c <v_L135+0x460>)
 8009424:	881b      	ldrh	r3, [r3, #0]
 8009426:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800942a:	b2db      	uxtb	r3, r3
 800942c:	3301      	adds	r3, #1
 800942e:	2b00      	cmp	r3, #0
 8009430:	f003 0301 	and.w	r3, r3, #1
 8009434:	bfb8      	it	lt
 8009436:	425b      	neglt	r3, r3
 8009438:	f003 0301 	and.w	r3, r3, #1
 800943c:	b2d9      	uxtb	r1, r3
 800943e:	4a0f      	ldr	r2, [pc, #60]	; (800947c <v_L135+0x460>)
 8009440:	8813      	ldrh	r3, [r2, #0]
 8009442:	f361 03c3 	bfi	r3, r1, #3, #1
 8009446:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8009448:	4b0c      	ldr	r3, [pc, #48]	; (800947c <v_L135+0x460>)
 800944a:	881b      	ldrh	r3, [r3, #0]
 800944c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009450:	b2db      	uxtb	r3, r3
 8009452:	2b00      	cmp	r3, #0
 8009454:	d107      	bne.n	8009466 <v_L135+0x44a>
			slalomB(10000, SPEED_5, V135_5_OFFSET_VB);
 8009456:	2232      	movs	r2, #50	; 0x32
 8009458:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800945c:	f242 7010 	movw	r0, #10000	; 0x2710
 8009460:	f7fc fa3e 	bl	80058e0 <slalomB>
}
 8009464:	e006      	b.n	8009474 <v_L135+0x458>
			slalomB(10000, SPEED_5, V135_5_OFFSET_B);
 8009466:	2232      	movs	r2, #50	; 0x32
 8009468:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800946c:	f242 7010 	movw	r0, #10000	; 0x2710
 8009470:	f7fc fa36 	bl	80058e0 <slalomB>
}
 8009474:	bf00      	nop
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	20000fa4 	.word	0x20000fa4
 8009480:	20000456 	.word	0x20000456

08009484 <v_R135D>:
//v_R135D
// 区画中心から右に135度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R135D(void){
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af02      	add	r7, sp, #8
	full_led_write1(YELLOW);
 800948a:	2006      	movs	r0, #6
 800948c:	f008 fe4c 	bl	8012128 <full_led_write1>
	if(run_mode == 1){
 8009490:	4bbb      	ldr	r3, [pc, #748]	; (8009780 <v_R135D+0x2fc>)
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	b2db      	uxtb	r3, r3
 8009496:	2b01      	cmp	r3, #1
 8009498:	d135      	bne.n	8009506 <v_R135D+0x82>
		slalomF(10000, SPEED_1, V135_OFFSET_VF, NO_WALL, NO_WALL);
 800949a:	f241 3388 	movw	r3, #5000	; 0x1388
 800949e:	9300      	str	r3, [sp, #0]
 80094a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80094a4:	223a      	movs	r2, #58	; 0x3a
 80094a6:	21c8      	movs	r1, #200	; 0xc8
 80094a8:	f242 7010 	movw	r0, #10000	; 0x2710
 80094ac:	f7fc f846 	bl	800553c <slalomF>
		slalomR(-V135_DEGACCEL, -V135_OMEGA, -135, SPEED_1);
 80094b0:	23c8      	movs	r3, #200	; 0xc8
 80094b2:	f06f 0286 	mvn.w	r2, #134	; 0x86
 80094b6:	49b3      	ldr	r1, [pc, #716]	; (8009784 <v_R135D+0x300>)
 80094b8:	48b3      	ldr	r0, [pc, #716]	; (8009788 <v_R135D+0x304>)
 80094ba:	f7fc f8b7 	bl	800562c <slalomR>

		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80094be:	2103      	movs	r1, #3
 80094c0:	2003      	movs	r0, #3
 80094c2:	f006 ff9d 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80094c6:	4bb1      	ldr	r3, [pc, #708]	; (800978c <v_R135D+0x308>)
 80094c8:	881b      	ldrh	r3, [r3, #0]
 80094ca:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	3301      	adds	r3, #1
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	f003 0301 	and.w	r3, r3, #1
 80094d8:	bfb8      	it	lt
 80094da:	425b      	neglt	r3, r3
 80094dc:	f003 0301 	and.w	r3, r3, #1
 80094e0:	b2d9      	uxtb	r1, r3
 80094e2:	4aaa      	ldr	r2, [pc, #680]	; (800978c <v_R135D+0x308>)
 80094e4:	8813      	ldrh	r3, [r2, #0]
 80094e6:	f361 03c3 	bfi	r3, r1, #3, #1
 80094ea:	8013      	strh	r3, [r2, #0]

		slalomB(10000, SPEED_1, V135_OFFSET_VB-30);
 80094ec:	2226      	movs	r2, #38	; 0x26
 80094ee:	21c8      	movs	r1, #200	; 0xc8
 80094f0:	f242 7010 	movw	r0, #10000	; 0x2710
 80094f4:	f7fc f9f4 	bl	80058e0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_1, 30);
 80094f8:	231e      	movs	r3, #30
 80094fa:	22c8      	movs	r2, #200	; 0xc8
 80094fc:	210a      	movs	r1, #10
 80094fe:	48a4      	ldr	r0, [pc, #656]	; (8009790 <v_R135D+0x30c>)
 8009500:	f7fb fe44 	bl	800518c <driveD>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;

		slalomB(10000, SPEED_5, V135_5_OFFSET_VB-30);
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
	}
}
 8009504:	e139      	b.n	800977a <v_R135D+0x2f6>
	}else if(run_mode == 2){
 8009506:	4b9e      	ldr	r3, [pc, #632]	; (8009780 <v_R135D+0x2fc>)
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	b2db      	uxtb	r3, r3
 800950c:	2b02      	cmp	r3, #2
 800950e:	d139      	bne.n	8009584 <v_R135D+0x100>
		slalomF(10000, SPEED_2, V135_2_OFFSET_VF, NO_WALL, NO_WALL);
 8009510:	f241 3388 	movw	r3, #5000	; 0x1388
 8009514:	9300      	str	r3, [sp, #0]
 8009516:	f241 3388 	movw	r3, #5000	; 0x1388
 800951a:	223a      	movs	r2, #58	; 0x3a
 800951c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009520:	f242 7010 	movw	r0, #10000	; 0x2710
 8009524:	f7fc f80a 	bl	800553c <slalomF>
		slalomR(-V135_2_DEGACCEL, -V135_2_OMEGA, -135, SPEED_2);
 8009528:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800952c:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8009530:	4994      	ldr	r1, [pc, #592]	; (8009784 <v_R135D+0x300>)
 8009532:	4895      	ldr	r0, [pc, #596]	; (8009788 <v_R135D+0x304>)
 8009534:	f7fc f87a 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8009538:	2103      	movs	r1, #3
 800953a:	2003      	movs	r0, #3
 800953c:	f006 ff60 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8009540:	4b92      	ldr	r3, [pc, #584]	; (800978c <v_R135D+0x308>)
 8009542:	881b      	ldrh	r3, [r3, #0]
 8009544:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009548:	b2db      	uxtb	r3, r3
 800954a:	3301      	adds	r3, #1
 800954c:	2b00      	cmp	r3, #0
 800954e:	f003 0301 	and.w	r3, r3, #1
 8009552:	bfb8      	it	lt
 8009554:	425b      	neglt	r3, r3
 8009556:	f003 0301 	and.w	r3, r3, #1
 800955a:	b2d9      	uxtb	r1, r3
 800955c:	4a8b      	ldr	r2, [pc, #556]	; (800978c <v_R135D+0x308>)
 800955e:	8813      	ldrh	r3, [r2, #0]
 8009560:	f361 03c3 	bfi	r3, r1, #3, #1
 8009564:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_2, V135_2_OFFSET_VB-30);
 8009566:	2226      	movs	r2, #38	; 0x26
 8009568:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800956c:	f242 7010 	movw	r0, #10000	; 0x2710
 8009570:	f7fc f9b6 	bl	80058e0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_2, 30);
 8009574:	231e      	movs	r3, #30
 8009576:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800957a:	210a      	movs	r1, #10
 800957c:	4884      	ldr	r0, [pc, #528]	; (8009790 <v_R135D+0x30c>)
 800957e:	f7fb fe05 	bl	800518c <driveD>
}
 8009582:	e0fa      	b.n	800977a <v_R135D+0x2f6>
	}else if(run_mode == 3){
 8009584:	4b7e      	ldr	r3, [pc, #504]	; (8009780 <v_R135D+0x2fc>)
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	b2db      	uxtb	r3, r3
 800958a:	2b03      	cmp	r3, #3
 800958c:	d139      	bne.n	8009602 <v_R135D+0x17e>
		slalomF(10000, SPEED_3, V135_3_OFFSET_VF, NO_WALL, NO_WALL);
 800958e:	f241 3388 	movw	r3, #5000	; 0x1388
 8009592:	9300      	str	r3, [sp, #0]
 8009594:	f241 3388 	movw	r3, #5000	; 0x1388
 8009598:	2237      	movs	r2, #55	; 0x37
 800959a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800959e:	f242 7010 	movw	r0, #10000	; 0x2710
 80095a2:	f7fb ffcb 	bl	800553c <slalomF>
		slalomR(-V135_3_DEGACCEL, -V135_3_OMEGA, -135, SPEED_3);
 80095a6:	f44f 7316 	mov.w	r3, #600	; 0x258
 80095aa:	f06f 0286 	mvn.w	r2, #134	; 0x86
 80095ae:	4979      	ldr	r1, [pc, #484]	; (8009794 <v_R135D+0x310>)
 80095b0:	4879      	ldr	r0, [pc, #484]	; (8009798 <v_R135D+0x314>)
 80095b2:	f7fc f83b 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80095b6:	2103      	movs	r1, #3
 80095b8:	2003      	movs	r0, #3
 80095ba:	f006 ff21 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80095be:	4b73      	ldr	r3, [pc, #460]	; (800978c <v_R135D+0x308>)
 80095c0:	881b      	ldrh	r3, [r3, #0]
 80095c2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	3301      	adds	r3, #1
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f003 0301 	and.w	r3, r3, #1
 80095d0:	bfb8      	it	lt
 80095d2:	425b      	neglt	r3, r3
 80095d4:	f003 0301 	and.w	r3, r3, #1
 80095d8:	b2d9      	uxtb	r1, r3
 80095da:	4a6c      	ldr	r2, [pc, #432]	; (800978c <v_R135D+0x308>)
 80095dc:	8813      	ldrh	r3, [r2, #0]
 80095de:	f361 03c3 	bfi	r3, r1, #3, #1
 80095e2:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_3, V135_3_OFFSET_VB-30);
 80095e4:	2241      	movs	r2, #65	; 0x41
 80095e6:	f44f 7116 	mov.w	r1, #600	; 0x258
 80095ea:	f242 7010 	movw	r0, #10000	; 0x2710
 80095ee:	f7fc f977 	bl	80058e0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_3, 30);
 80095f2:	231e      	movs	r3, #30
 80095f4:	f44f 7216 	mov.w	r2, #600	; 0x258
 80095f8:	210a      	movs	r1, #10
 80095fa:	4865      	ldr	r0, [pc, #404]	; (8009790 <v_R135D+0x30c>)
 80095fc:	f7fb fdc6 	bl	800518c <driveD>
}
 8009600:	e0bb      	b.n	800977a <v_R135D+0x2f6>
	}else if(run_mode == 4){
 8009602:	4b5f      	ldr	r3, [pc, #380]	; (8009780 <v_R135D+0x2fc>)
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	b2db      	uxtb	r3, r3
 8009608:	2b04      	cmp	r3, #4
 800960a:	d139      	bne.n	8009680 <v_R135D+0x1fc>
		slalomF(10000, SPEED_4, V135_4_OFFSET_VF, NO_WALL, NO_WALL);
 800960c:	f241 3388 	movw	r3, #5000	; 0x1388
 8009610:	9300      	str	r3, [sp, #0]
 8009612:	f241 3388 	movw	r3, #5000	; 0x1388
 8009616:	224b      	movs	r2, #75	; 0x4b
 8009618:	f44f 7148 	mov.w	r1, #800	; 0x320
 800961c:	f242 7010 	movw	r0, #10000	; 0x2710
 8009620:	f7fb ff8c 	bl	800553c <slalomF>
		slalomR(-V135_4_DEGACCEL, -V135_4_OMEGA, -135, SPEED_3);
 8009624:	f44f 7316 	mov.w	r3, #600	; 0x258
 8009628:	f06f 0286 	mvn.w	r2, #134	; 0x86
 800962c:	495b      	ldr	r1, [pc, #364]	; (800979c <v_R135D+0x318>)
 800962e:	485c      	ldr	r0, [pc, #368]	; (80097a0 <v_R135D+0x31c>)
 8009630:	f7fb fffc 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8009634:	2103      	movs	r1, #3
 8009636:	2003      	movs	r0, #3
 8009638:	f006 fee2 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800963c:	4b53      	ldr	r3, [pc, #332]	; (800978c <v_R135D+0x308>)
 800963e:	881b      	ldrh	r3, [r3, #0]
 8009640:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009644:	b2db      	uxtb	r3, r3
 8009646:	3301      	adds	r3, #1
 8009648:	2b00      	cmp	r3, #0
 800964a:	f003 0301 	and.w	r3, r3, #1
 800964e:	bfb8      	it	lt
 8009650:	425b      	neglt	r3, r3
 8009652:	f003 0301 	and.w	r3, r3, #1
 8009656:	b2d9      	uxtb	r1, r3
 8009658:	4a4c      	ldr	r2, [pc, #304]	; (800978c <v_R135D+0x308>)
 800965a:	8813      	ldrh	r3, [r2, #0]
 800965c:	f361 03c3 	bfi	r3, r1, #3, #1
 8009660:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_4, V135_4_OFFSET_VB-30);
 8009662:	2264      	movs	r2, #100	; 0x64
 8009664:	f44f 7148 	mov.w	r1, #800	; 0x320
 8009668:	f242 7010 	movw	r0, #10000	; 0x2710
 800966c:	f7fc f938 	bl	80058e0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_4, 30);
 8009670:	231e      	movs	r3, #30
 8009672:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009676:	210a      	movs	r1, #10
 8009678:	4845      	ldr	r0, [pc, #276]	; (8009790 <v_R135D+0x30c>)
 800967a:	f7fb fd87 	bl	800518c <driveD>
}
 800967e:	e07c      	b.n	800977a <v_R135D+0x2f6>
	}else if(run_mode == 5){
 8009680:	4b3f      	ldr	r3, [pc, #252]	; (8009780 <v_R135D+0x2fc>)
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	b2db      	uxtb	r3, r3
 8009686:	2b05      	cmp	r3, #5
 8009688:	d139      	bne.n	80096fe <v_R135D+0x27a>
		slalomF(10000, SPEED_5, V135_5_OFFSET_VF, NO_WALL, NO_WALL);
 800968a:	f241 3388 	movw	r3, #5000	; 0x1388
 800968e:	9300      	str	r3, [sp, #0]
 8009690:	f241 3388 	movw	r3, #5000	; 0x1388
 8009694:	2243      	movs	r2, #67	; 0x43
 8009696:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800969a:	f242 7010 	movw	r0, #10000	; 0x2710
 800969e:	f7fb ff4d 	bl	800553c <slalomF>
		slalomR(-V135_5_DEGACCEL, -V135_5_OMEGA, -135, SPEED_5);
 80096a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80096a6:	f06f 0286 	mvn.w	r2, #134	; 0x86
 80096aa:	493e      	ldr	r1, [pc, #248]	; (80097a4 <v_R135D+0x320>)
 80096ac:	483e      	ldr	r0, [pc, #248]	; (80097a8 <v_R135D+0x324>)
 80096ae:	f7fb ffbd 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80096b2:	2103      	movs	r1, #3
 80096b4:	2003      	movs	r0, #3
 80096b6:	f006 fea3 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80096ba:	4b34      	ldr	r3, [pc, #208]	; (800978c <v_R135D+0x308>)
 80096bc:	881b      	ldrh	r3, [r3, #0]
 80096be:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	3301      	adds	r3, #1
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	f003 0301 	and.w	r3, r3, #1
 80096cc:	bfb8      	it	lt
 80096ce:	425b      	neglt	r3, r3
 80096d0:	f003 0301 	and.w	r3, r3, #1
 80096d4:	b2d9      	uxtb	r1, r3
 80096d6:	4a2d      	ldr	r2, [pc, #180]	; (800978c <v_R135D+0x308>)
 80096d8:	8813      	ldrh	r3, [r2, #0]
 80096da:	f361 03c3 	bfi	r3, r1, #3, #1
 80096de:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, V135_5_OFFSET_VB-30);
 80096e0:	2214      	movs	r2, #20
 80096e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80096e6:	f242 7010 	movw	r0, #10000	; 0x2710
 80096ea:	f7fc f8f9 	bl	80058e0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
 80096ee:	231e      	movs	r3, #30
 80096f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80096f4:	210a      	movs	r1, #10
 80096f6:	4826      	ldr	r0, [pc, #152]	; (8009790 <v_R135D+0x30c>)
 80096f8:	f7fb fd48 	bl	800518c <driveD>
}
 80096fc:	e03d      	b.n	800977a <v_R135D+0x2f6>
	}else if(run_mode == 6){
 80096fe:	4b20      	ldr	r3, [pc, #128]	; (8009780 <v_R135D+0x2fc>)
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	b2db      	uxtb	r3, r3
 8009704:	2b06      	cmp	r3, #6
 8009706:	d138      	bne.n	800977a <v_R135D+0x2f6>
		slalomF(10000, SPEED_5, V135_5_OFFSET_VF, NO_WALL, NO_WALL);
 8009708:	f241 3388 	movw	r3, #5000	; 0x1388
 800970c:	9300      	str	r3, [sp, #0]
 800970e:	f241 3388 	movw	r3, #5000	; 0x1388
 8009712:	2243      	movs	r2, #67	; 0x43
 8009714:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009718:	f242 7010 	movw	r0, #10000	; 0x2710
 800971c:	f7fb ff0e 	bl	800553c <slalomF>
		slalomR(-V135_5_DEGACCEL, -V135_5_OMEGA, -135, SPEED_5);
 8009720:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009724:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8009728:	491e      	ldr	r1, [pc, #120]	; (80097a4 <v_R135D+0x320>)
 800972a:	481f      	ldr	r0, [pc, #124]	; (80097a8 <v_R135D+0x324>)
 800972c:	f7fb ff7e 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8009730:	2103      	movs	r1, #3
 8009732:	2003      	movs	r0, #3
 8009734:	f006 fe64 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8009738:	4b14      	ldr	r3, [pc, #80]	; (800978c <v_R135D+0x308>)
 800973a:	881b      	ldrh	r3, [r3, #0]
 800973c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009740:	b2db      	uxtb	r3, r3
 8009742:	3301      	adds	r3, #1
 8009744:	2b00      	cmp	r3, #0
 8009746:	f003 0301 	and.w	r3, r3, #1
 800974a:	bfb8      	it	lt
 800974c:	425b      	neglt	r3, r3
 800974e:	f003 0301 	and.w	r3, r3, #1
 8009752:	b2d9      	uxtb	r1, r3
 8009754:	4a0d      	ldr	r2, [pc, #52]	; (800978c <v_R135D+0x308>)
 8009756:	8813      	ldrh	r3, [r2, #0]
 8009758:	f361 03c3 	bfi	r3, r1, #3, #1
 800975c:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, V135_5_OFFSET_VB-30);
 800975e:	2214      	movs	r2, #20
 8009760:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009764:	f242 7010 	movw	r0, #10000	; 0x2710
 8009768:	f7fc f8ba 	bl	80058e0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
 800976c:	231e      	movs	r3, #30
 800976e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009772:	210a      	movs	r1, #10
 8009774:	4806      	ldr	r0, [pc, #24]	; (8009790 <v_R135D+0x30c>)
 8009776:	f7fb fd09 	bl	800518c <driveD>
}
 800977a:	bf00      	nop
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}
 8009780:	20000456 	.word	0x20000456
 8009784:	fffffed4 	.word	0xfffffed4
 8009788:	fffff448 	.word	0xfffff448
 800978c:	20000fa4 	.word	0x20000fa4
 8009790:	ffff8ad0 	.word	0xffff8ad0
 8009794:	fffffe0c 	.word	0xfffffe0c
 8009798:	ffffec78 	.word	0xffffec78
 800979c:	fffffce0 	.word	0xfffffce0
 80097a0:	ffffe0c0 	.word	0xffffe0c0
 80097a4:	fffffc18 	.word	0xfffffc18
 80097a8:	ffffd8f0 	.word	0xffffd8f0

080097ac <v_L135D>:
//v_L135D
// 区画中心から左に135度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L135D(void){
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af02      	add	r7, sp, #8
	full_led_write1(PURPLE);
 80097b2:	2005      	movs	r0, #5
 80097b4:	f008 fcb8 	bl	8012128 <full_led_write1>
	if(run_mode == 1){
 80097b8:	4bbe      	ldr	r3, [pc, #760]	; (8009ab4 <v_L135D+0x308>)
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d136      	bne.n	8009830 <v_L135D+0x84>
		slalomF(10000, SPEED_1, V135_OFFSET_VF, NO_WALL, NO_WALL);
 80097c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80097c6:	9300      	str	r3, [sp, #0]
 80097c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80097cc:	223a      	movs	r2, #58	; 0x3a
 80097ce:	21c8      	movs	r1, #200	; 0xc8
 80097d0:	f242 7010 	movw	r0, #10000	; 0x2710
 80097d4:	f7fb feb2 	bl	800553c <slalomF>
		slalomR(V135_DEGACCEL, V135_OMEGA, 135, SPEED_1);
 80097d8:	23c8      	movs	r3, #200	; 0xc8
 80097da:	2287      	movs	r2, #135	; 0x87
 80097dc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80097e0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80097e4:	f7fb ff22 	bl	800562c <slalomR>

		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80097e8:	2103      	movs	r1, #3
 80097ea:	20fd      	movs	r0, #253	; 0xfd
 80097ec:	f006 fe08 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80097f0:	4bb1      	ldr	r3, [pc, #708]	; (8009ab8 <v_L135D+0x30c>)
 80097f2:	881b      	ldrh	r3, [r3, #0]
 80097f4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80097f8:	b2db      	uxtb	r3, r3
 80097fa:	3301      	adds	r3, #1
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f003 0301 	and.w	r3, r3, #1
 8009802:	bfb8      	it	lt
 8009804:	425b      	neglt	r3, r3
 8009806:	f003 0301 	and.w	r3, r3, #1
 800980a:	b2d9      	uxtb	r1, r3
 800980c:	4aaa      	ldr	r2, [pc, #680]	; (8009ab8 <v_L135D+0x30c>)
 800980e:	8813      	ldrh	r3, [r2, #0]
 8009810:	f361 03c3 	bfi	r3, r1, #3, #1
 8009814:	8013      	strh	r3, [r2, #0]

		slalomB(10000, SPEED_1, V135_OFFSET_VB-30);
 8009816:	2226      	movs	r2, #38	; 0x26
 8009818:	21c8      	movs	r1, #200	; 0xc8
 800981a:	f242 7010 	movw	r0, #10000	; 0x2710
 800981e:	f7fc f85f 	bl	80058e0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_1, 30);
 8009822:	231e      	movs	r3, #30
 8009824:	22c8      	movs	r2, #200	; 0xc8
 8009826:	210a      	movs	r1, #10
 8009828:	48a4      	ldr	r0, [pc, #656]	; (8009abc <v_L135D+0x310>)
 800982a:	f7fb fcaf 	bl	800518c <driveD>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;

		slalomB(10000, SPEED_5, V135_5_OFFSET_VB-30);
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
	}
}
 800982e:	e13e      	b.n	8009aae <v_L135D+0x302>
	}else if(run_mode == 2){
 8009830:	4ba0      	ldr	r3, [pc, #640]	; (8009ab4 <v_L135D+0x308>)
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	b2db      	uxtb	r3, r3
 8009836:	2b02      	cmp	r3, #2
 8009838:	d13a      	bne.n	80098b0 <v_L135D+0x104>
		slalomF(10000, SPEED_2, V135_2_OFFSET_VF, NO_WALL, NO_WALL);
 800983a:	f241 3388 	movw	r3, #5000	; 0x1388
 800983e:	9300      	str	r3, [sp, #0]
 8009840:	f241 3388 	movw	r3, #5000	; 0x1388
 8009844:	223a      	movs	r2, #58	; 0x3a
 8009846:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800984a:	f242 7010 	movw	r0, #10000	; 0x2710
 800984e:	f7fb fe75 	bl	800553c <slalomF>
		slalomR(V135_2_DEGACCEL, V135_2_OMEGA, 135, SPEED_2);
 8009852:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009856:	2287      	movs	r2, #135	; 0x87
 8009858:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800985c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009860:	f7fb fee4 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8009864:	2103      	movs	r1, #3
 8009866:	20fd      	movs	r0, #253	; 0xfd
 8009868:	f006 fdca 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800986c:	4b92      	ldr	r3, [pc, #584]	; (8009ab8 <v_L135D+0x30c>)
 800986e:	881b      	ldrh	r3, [r3, #0]
 8009870:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009874:	b2db      	uxtb	r3, r3
 8009876:	3301      	adds	r3, #1
 8009878:	2b00      	cmp	r3, #0
 800987a:	f003 0301 	and.w	r3, r3, #1
 800987e:	bfb8      	it	lt
 8009880:	425b      	neglt	r3, r3
 8009882:	f003 0301 	and.w	r3, r3, #1
 8009886:	b2d9      	uxtb	r1, r3
 8009888:	4a8b      	ldr	r2, [pc, #556]	; (8009ab8 <v_L135D+0x30c>)
 800988a:	8813      	ldrh	r3, [r2, #0]
 800988c:	f361 03c3 	bfi	r3, r1, #3, #1
 8009890:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_2, V135_2_OFFSET_VB-30);
 8009892:	2226      	movs	r2, #38	; 0x26
 8009894:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009898:	f242 7010 	movw	r0, #10000	; 0x2710
 800989c:	f7fc f820 	bl	80058e0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_2, 30);
 80098a0:	231e      	movs	r3, #30
 80098a2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80098a6:	210a      	movs	r1, #10
 80098a8:	4884      	ldr	r0, [pc, #528]	; (8009abc <v_L135D+0x310>)
 80098aa:	f7fb fc6f 	bl	800518c <driveD>
}
 80098ae:	e0fe      	b.n	8009aae <v_L135D+0x302>
	}else if(run_mode == 3){
 80098b0:	4b80      	ldr	r3, [pc, #512]	; (8009ab4 <v_L135D+0x308>)
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	2b03      	cmp	r3, #3
 80098b8:	d13a      	bne.n	8009930 <v_L135D+0x184>
		slalomF(10000, SPEED_3, V135_3_OFFSET_VF, NO_WALL, NO_WALL);
 80098ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80098be:	9300      	str	r3, [sp, #0]
 80098c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80098c4:	2237      	movs	r2, #55	; 0x37
 80098c6:	f44f 7116 	mov.w	r1, #600	; 0x258
 80098ca:	f242 7010 	movw	r0, #10000	; 0x2710
 80098ce:	f7fb fe35 	bl	800553c <slalomF>
		slalomR(V135_3_DEGACCEL, V135_3_OMEGA, 135, SPEED_3);
 80098d2:	f44f 7316 	mov.w	r3, #600	; 0x258
 80098d6:	2287      	movs	r2, #135	; 0x87
 80098d8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80098dc:	f241 3088 	movw	r0, #5000	; 0x1388
 80098e0:	f7fb fea4 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80098e4:	2103      	movs	r1, #3
 80098e6:	20fd      	movs	r0, #253	; 0xfd
 80098e8:	f006 fd8a 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80098ec:	4b72      	ldr	r3, [pc, #456]	; (8009ab8 <v_L135D+0x30c>)
 80098ee:	881b      	ldrh	r3, [r3, #0]
 80098f0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	3301      	adds	r3, #1
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f003 0301 	and.w	r3, r3, #1
 80098fe:	bfb8      	it	lt
 8009900:	425b      	neglt	r3, r3
 8009902:	f003 0301 	and.w	r3, r3, #1
 8009906:	b2d9      	uxtb	r1, r3
 8009908:	4a6b      	ldr	r2, [pc, #428]	; (8009ab8 <v_L135D+0x30c>)
 800990a:	8813      	ldrh	r3, [r2, #0]
 800990c:	f361 03c3 	bfi	r3, r1, #3, #1
 8009910:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_3, V135_3_OFFSET_VB-30);
 8009912:	2241      	movs	r2, #65	; 0x41
 8009914:	f44f 7116 	mov.w	r1, #600	; 0x258
 8009918:	f242 7010 	movw	r0, #10000	; 0x2710
 800991c:	f7fb ffe0 	bl	80058e0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_3, 30);
 8009920:	231e      	movs	r3, #30
 8009922:	f44f 7216 	mov.w	r2, #600	; 0x258
 8009926:	210a      	movs	r1, #10
 8009928:	4864      	ldr	r0, [pc, #400]	; (8009abc <v_L135D+0x310>)
 800992a:	f7fb fc2f 	bl	800518c <driveD>
}
 800992e:	e0be      	b.n	8009aae <v_L135D+0x302>
	}else if(run_mode == 4){
 8009930:	4b60      	ldr	r3, [pc, #384]	; (8009ab4 <v_L135D+0x308>)
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	b2db      	uxtb	r3, r3
 8009936:	2b04      	cmp	r3, #4
 8009938:	d13a      	bne.n	80099b0 <v_L135D+0x204>
		slalomF(10000, SPEED_4, V135_4_OFFSET_VF, NO_WALL, NO_WALL);
 800993a:	f241 3388 	movw	r3, #5000	; 0x1388
 800993e:	9300      	str	r3, [sp, #0]
 8009940:	f241 3388 	movw	r3, #5000	; 0x1388
 8009944:	224b      	movs	r2, #75	; 0x4b
 8009946:	f44f 7148 	mov.w	r1, #800	; 0x320
 800994a:	f242 7010 	movw	r0, #10000	; 0x2710
 800994e:	f7fb fdf5 	bl	800553c <slalomF>
		slalomR(V135_4_DEGACCEL, V135_4_OMEGA, 135, SPEED_4);
 8009952:	f44f 7348 	mov.w	r3, #800	; 0x320
 8009956:	2287      	movs	r2, #135	; 0x87
 8009958:	f44f 7148 	mov.w	r1, #800	; 0x320
 800995c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8009960:	f7fb fe64 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8009964:	2103      	movs	r1, #3
 8009966:	20fd      	movs	r0, #253	; 0xfd
 8009968:	f006 fd4a 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800996c:	4b52      	ldr	r3, [pc, #328]	; (8009ab8 <v_L135D+0x30c>)
 800996e:	881b      	ldrh	r3, [r3, #0]
 8009970:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009974:	b2db      	uxtb	r3, r3
 8009976:	3301      	adds	r3, #1
 8009978:	2b00      	cmp	r3, #0
 800997a:	f003 0301 	and.w	r3, r3, #1
 800997e:	bfb8      	it	lt
 8009980:	425b      	neglt	r3, r3
 8009982:	f003 0301 	and.w	r3, r3, #1
 8009986:	b2d9      	uxtb	r1, r3
 8009988:	4a4b      	ldr	r2, [pc, #300]	; (8009ab8 <v_L135D+0x30c>)
 800998a:	8813      	ldrh	r3, [r2, #0]
 800998c:	f361 03c3 	bfi	r3, r1, #3, #1
 8009990:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_4, V135_4_OFFSET_VB-30);
 8009992:	2264      	movs	r2, #100	; 0x64
 8009994:	f44f 7148 	mov.w	r1, #800	; 0x320
 8009998:	f242 7010 	movw	r0, #10000	; 0x2710
 800999c:	f7fb ffa0 	bl	80058e0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_3, 30);
 80099a0:	231e      	movs	r3, #30
 80099a2:	f44f 7216 	mov.w	r2, #600	; 0x258
 80099a6:	210a      	movs	r1, #10
 80099a8:	4844      	ldr	r0, [pc, #272]	; (8009abc <v_L135D+0x310>)
 80099aa:	f7fb fbef 	bl	800518c <driveD>
}
 80099ae:	e07e      	b.n	8009aae <v_L135D+0x302>
	}else if(run_mode == 5){
 80099b0:	4b40      	ldr	r3, [pc, #256]	; (8009ab4 <v_L135D+0x308>)
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	2b05      	cmp	r3, #5
 80099b8:	d13a      	bne.n	8009a30 <v_L135D+0x284>
		slalomF(10000, SPEED_5, V135_5_OFFSET_VF, NO_WALL, NO_WALL);
 80099ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80099be:	9300      	str	r3, [sp, #0]
 80099c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80099c4:	2243      	movs	r2, #67	; 0x43
 80099c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80099ca:	f242 7010 	movw	r0, #10000	; 0x2710
 80099ce:	f7fb fdb5 	bl	800553c <slalomF>
		slalomR(V135_5_DEGACCEL, V135_5_OMEGA, 135, SPEED_5);
 80099d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80099d6:	2287      	movs	r2, #135	; 0x87
 80099d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80099dc:	f242 7010 	movw	r0, #10000	; 0x2710
 80099e0:	f7fb fe24 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80099e4:	2103      	movs	r1, #3
 80099e6:	20fd      	movs	r0, #253	; 0xfd
 80099e8:	f006 fd0a 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80099ec:	4b32      	ldr	r3, [pc, #200]	; (8009ab8 <v_L135D+0x30c>)
 80099ee:	881b      	ldrh	r3, [r3, #0]
 80099f0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	3301      	adds	r3, #1
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	f003 0301 	and.w	r3, r3, #1
 80099fe:	bfb8      	it	lt
 8009a00:	425b      	neglt	r3, r3
 8009a02:	f003 0301 	and.w	r3, r3, #1
 8009a06:	b2d9      	uxtb	r1, r3
 8009a08:	4a2b      	ldr	r2, [pc, #172]	; (8009ab8 <v_L135D+0x30c>)
 8009a0a:	8813      	ldrh	r3, [r2, #0]
 8009a0c:	f361 03c3 	bfi	r3, r1, #3, #1
 8009a10:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, V135_5_OFFSET_VB-30);
 8009a12:	2214      	movs	r2, #20
 8009a14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009a18:	f242 7010 	movw	r0, #10000	; 0x2710
 8009a1c:	f7fb ff60 	bl	80058e0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
 8009a20:	231e      	movs	r3, #30
 8009a22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009a26:	210a      	movs	r1, #10
 8009a28:	4824      	ldr	r0, [pc, #144]	; (8009abc <v_L135D+0x310>)
 8009a2a:	f7fb fbaf 	bl	800518c <driveD>
}
 8009a2e:	e03e      	b.n	8009aae <v_L135D+0x302>
	}else if(run_mode == 6){
 8009a30:	4b20      	ldr	r3, [pc, #128]	; (8009ab4 <v_L135D+0x308>)
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	2b06      	cmp	r3, #6
 8009a38:	d139      	bne.n	8009aae <v_L135D+0x302>
		slalomF(10000, SPEED_5, V135_5_OFFSET_VF, NO_WALL, NO_WALL);
 8009a3a:	f241 3388 	movw	r3, #5000	; 0x1388
 8009a3e:	9300      	str	r3, [sp, #0]
 8009a40:	f241 3388 	movw	r3, #5000	; 0x1388
 8009a44:	2243      	movs	r2, #67	; 0x43
 8009a46:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009a4a:	f242 7010 	movw	r0, #10000	; 0x2710
 8009a4e:	f7fb fd75 	bl	800553c <slalomF>
		slalomR(V135_5_DEGACCEL, V135_5_OMEGA, 135, SPEED_5);
 8009a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009a56:	2287      	movs	r2, #135	; 0x87
 8009a58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009a5c:	f242 7010 	movw	r0, #10000	; 0x2710
 8009a60:	f7fb fde4 	bl	800562c <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8009a64:	2103      	movs	r1, #3
 8009a66:	20fd      	movs	r0, #253	; 0xfd
 8009a68:	f006 fcca 	bl	8010400 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8009a6c:	4b12      	ldr	r3, [pc, #72]	; (8009ab8 <v_L135D+0x30c>)
 8009a6e:	881b      	ldrh	r3, [r3, #0]
 8009a70:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	3301      	adds	r3, #1
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	f003 0301 	and.w	r3, r3, #1
 8009a7e:	bfb8      	it	lt
 8009a80:	425b      	neglt	r3, r3
 8009a82:	f003 0301 	and.w	r3, r3, #1
 8009a86:	b2d9      	uxtb	r1, r3
 8009a88:	4a0b      	ldr	r2, [pc, #44]	; (8009ab8 <v_L135D+0x30c>)
 8009a8a:	8813      	ldrh	r3, [r2, #0]
 8009a8c:	f361 03c3 	bfi	r3, r1, #3, #1
 8009a90:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, V135_5_OFFSET_VB-30);
 8009a92:	2214      	movs	r2, #20
 8009a94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009a98:	f242 7010 	movw	r0, #10000	; 0x2710
 8009a9c:	f7fb ff20 	bl	80058e0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
 8009aa0:	231e      	movs	r3, #30
 8009aa2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009aa6:	210a      	movs	r1, #10
 8009aa8:	4804      	ldr	r0, [pc, #16]	; (8009abc <v_L135D+0x310>)
 8009aaa:	f7fb fb6f 	bl	800518c <driveD>
}
 8009aae:	bf00      	nop
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	20000456 	.word	0x20000456
 8009ab8:	20000fa4 	.word	0x20000fa4
 8009abc:	ffff8ad0 	.word	0xffff8ad0

08009ac0 <test_select>:
//test_select
// a走行系テスト選択
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void test_select(void){
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b082      	sub	sp, #8
 8009ac4:	af00      	add	r7, sp, #0
	int mode = 0;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	607b      	str	r3, [r7, #4]
	printf("Test Select, Mode : %d\n", mode);
 8009aca:	6879      	ldr	r1, [r7, #4]
 8009acc:	483c      	ldr	r0, [pc, #240]	; (8009bc0 <test_select+0x100>)
 8009ace:	f009 f9a5 	bl	8012e1c <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	f003 0301 	and.w	r3, r3, #1
 8009ada:	b2d8      	uxtb	r0, r3
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	f003 0302 	and.w	r3, r3, #2
 8009ae4:	b2d9      	uxtb	r1, r3
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	f003 0304 	and.w	r3, r3, #4
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	461a      	mov	r2, r3
 8009af2:	f008 fadf 	bl	80120b4 <led_write>
		  if(dist_r >= 20){
 8009af6:	4b33      	ldr	r3, [pc, #204]	; (8009bc4 <test_select+0x104>)
 8009af8:	edd3 7a00 	vldr	s15, [r3]
 8009afc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009b00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b08:	db0f      	blt.n	8009b2a <test_select+0x6a>
			  mode++;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009b10:	4b2c      	ldr	r3, [pc, #176]	; (8009bc4 <test_select+0x104>)
 8009b12:	f04f 0200 	mov.w	r2, #0
 8009b16:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2b07      	cmp	r3, #7
 8009b1c:	dd01      	ble.n	8009b22 <test_select+0x62>
				  mode = 0;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8009b22:	6879      	ldr	r1, [r7, #4]
 8009b24:	4828      	ldr	r0, [pc, #160]	; (8009bc8 <test_select+0x108>)
 8009b26:	f009 f979 	bl	8012e1c <iprintf>
		  }
		  if(dist_r <= -20){
 8009b2a:	4b26      	ldr	r3, [pc, #152]	; (8009bc4 <test_select+0x104>)
 8009b2c:	edd3 7a00 	vldr	s15, [r3]
 8009b30:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009b34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b3c:	d80f      	bhi.n	8009b5e <test_select+0x9e>
			  mode--;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	3b01      	subs	r3, #1
 8009b42:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009b44:	4b1f      	ldr	r3, [pc, #124]	; (8009bc4 <test_select+0x104>)
 8009b46:	f04f 0200 	mov.w	r2, #0
 8009b4a:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	da01      	bge.n	8009b56 <test_select+0x96>
				  mode = 7;
 8009b52:	2307      	movs	r3, #7
 8009b54:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8009b56:	6879      	ldr	r1, [r7, #4]
 8009b58:	481b      	ldr	r0, [pc, #108]	; (8009bc8 <test_select+0x108>)
 8009b5a:	f009 f95f 	bl	8012e1c <iprintf>
		  }
		  if(dist_l <= -20){
 8009b5e:	4b1b      	ldr	r3, [pc, #108]	; (8009bcc <test_select+0x10c>)
 8009b60:	edd3 7a00 	vldr	s15, [r3]
 8009b64:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009b68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b70:	d825      	bhi.n	8009bbe <test_select+0xfe>
			  dist_l = 0;
 8009b72:	4b16      	ldr	r3, [pc, #88]	; (8009bcc <test_select+0x10c>)
 8009b74:	f04f 0200 	mov.w	r2, #0
 8009b78:	601a      	str	r2, [r3, #0]
			  switch(mode){
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	3b01      	subs	r3, #1
 8009b7e:	2b05      	cmp	r3, #5
 8009b80:	d8a7      	bhi.n	8009ad2 <test_select+0x12>
 8009b82:	a201      	add	r2, pc, #4	; (adr r2, 8009b88 <test_select+0xc8>)
 8009b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b88:	08009ba1 	.word	0x08009ba1
 8009b8c:	08009ba7 	.word	0x08009ba7
 8009b90:	08009bad 	.word	0x08009bad
 8009b94:	08009bb3 	.word	0x08009bb3
 8009b98:	08009bb7 	.word	0x08009bb7
 8009b9c:	08009bbb 	.word	0x08009bbb
				case 1:
					init_test();
 8009ba0:	f000 f816 	bl	8009bd0 <init_test>
					break;
 8009ba4:	e00b      	b.n	8009bbe <test_select+0xfe>

				case 2:
					slalom_test();
 8009ba6:	f000 f923 	bl	8009df0 <slalom_test>
					break;
 8009baa:	e008      	b.n	8009bbe <test_select+0xfe>

				case 3:
					v_test();
 8009bac:	f000 faec 	bl	800a188 <v_test>
					break;
 8009bb0:	e005      	b.n	8009bbe <test_select+0xfe>

				case 4:
					pass_test();
 8009bb2:	f000 fd1d 	bl	800a5f0 <pass_test>

				case 5:
					goal_test();
 8009bb6:	f000 ffb3 	bl	800ab20 <goal_test>

				case 6:
					sample_course_run();
 8009bba:	f001 fa93 	bl	800b0e4 <sample_course_run>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009bbe:	e788      	b.n	8009ad2 <test_select+0x12>
 8009bc0:	08014064 	.word	0x08014064
 8009bc4:	20000b2c 	.word	0x20000b2c
 8009bc8:	08014058 	.word	0x08014058
 8009bcc:	20001648 	.word	0x20001648

08009bd0 <init_test>:
//init_test
// a初期基幹関数走行テスト
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void init_test(void){
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b086      	sub	sp, #24
 8009bd4:	af00      	add	r7, sp, #0

	int mode = 0;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	617b      	str	r3, [r7, #20]
	printf("Test Init Run, Mode : %d\n", mode);
 8009bda:	6979      	ldr	r1, [r7, #20]
 8009bdc:	4874      	ldr	r0, [pc, #464]	; (8009db0 <init_test+0x1e0>)
 8009bde:	f009 f91d 	bl	8012e1c <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	f003 0301 	and.w	r3, r3, #1
 8009bea:	b2d8      	uxtb	r0, r3
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	b2db      	uxtb	r3, r3
 8009bf0:	f003 0302 	and.w	r3, r3, #2
 8009bf4:	b2d9      	uxtb	r1, r3
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	f003 0304 	and.w	r3, r3, #4
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	461a      	mov	r2, r3
 8009c02:	f008 fa57 	bl	80120b4 <led_write>
		  if(dist_r >= 20){
 8009c06:	4b6b      	ldr	r3, [pc, #428]	; (8009db4 <init_test+0x1e4>)
 8009c08:	edd3 7a00 	vldr	s15, [r3]
 8009c0c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009c10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c18:	db0f      	blt.n	8009c3a <init_test+0x6a>
			  mode++;
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 8009c20:	4b64      	ldr	r3, [pc, #400]	; (8009db4 <init_test+0x1e4>)
 8009c22:	f04f 0200 	mov.w	r2, #0
 8009c26:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	2b07      	cmp	r3, #7
 8009c2c:	dd01      	ble.n	8009c32 <init_test+0x62>
				  mode = 0;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 8009c32:	6979      	ldr	r1, [r7, #20]
 8009c34:	4860      	ldr	r0, [pc, #384]	; (8009db8 <init_test+0x1e8>)
 8009c36:	f009 f8f1 	bl	8012e1c <iprintf>
		  }
		  if(dist_r <= -20){
 8009c3a:	4b5e      	ldr	r3, [pc, #376]	; (8009db4 <init_test+0x1e4>)
 8009c3c:	edd3 7a00 	vldr	s15, [r3]
 8009c40:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009c44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c4c:	d80f      	bhi.n	8009c6e <init_test+0x9e>
			  mode--;
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	3b01      	subs	r3, #1
 8009c52:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 8009c54:	4b57      	ldr	r3, [pc, #348]	; (8009db4 <init_test+0x1e4>)
 8009c56:	f04f 0200 	mov.w	r2, #0
 8009c5a:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	da01      	bge.n	8009c66 <init_test+0x96>
				  mode = 7;
 8009c62:	2307      	movs	r3, #7
 8009c64:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 8009c66:	6979      	ldr	r1, [r7, #20]
 8009c68:	4853      	ldr	r0, [pc, #332]	; (8009db8 <init_test+0x1e8>)
 8009c6a:	f009 f8d7 	bl	8012e1c <iprintf>
		  }
		  if(dist_l <= -20){
 8009c6e:	4b53      	ldr	r3, [pc, #332]	; (8009dbc <init_test+0x1ec>)
 8009c70:	edd3 7a00 	vldr	s15, [r3]
 8009c74:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009c78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c80:	f200 8094 	bhi.w	8009dac <init_test+0x1dc>
			  dist_l = 0;
 8009c84:	4b4d      	ldr	r3, [pc, #308]	; (8009dbc <init_test+0x1ec>)
 8009c86:	f04f 0200 	mov.w	r2, #0
 8009c8a:	601a      	str	r2, [r3, #0]
			  drive_ready();
 8009c8c:	f7fa ffee 	bl	8004c6c <drive_ready>
			  get_base();
 8009c90:	f008 f9b8 	bl	8012004 <get_base>

			  switch(mode){
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	2b07      	cmp	r3, #7
 8009c98:	f200 8084 	bhi.w	8009da4 <init_test+0x1d4>
 8009c9c:	a201      	add	r2, pc, #4	; (adr r2, 8009ca4 <init_test+0xd4>)
 8009c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca2:	bf00      	nop
 8009ca4:	08009cc5 	.word	0x08009cc5
 8009ca8:	08009ccb 	.word	0x08009ccb
 8009cac:	08009ceb 	.word	0x08009ceb
 8009cb0:	08009d09 	.word	0x08009d09
 8009cb4:	08009d27 	.word	0x08009d27
 8009cb8:	08009d45 	.word	0x08009d45
 8009cbc:	08009d75 	.word	0x08009d75
 8009cc0:	08009d8f 	.word	0x08009d8f
				case 0:
					get_base();
 8009cc4:	f008 f99e 	bl	8012004 <get_base>
					break;
 8009cc8:	e06c      	b.n	8009da4 <init_test+0x1d4>
				case 1:
					//----4区画等速走行----
					printf("4 Section, Forward, Constant Speed.\n");
 8009cca:	483d      	ldr	r0, [pc, #244]	; (8009dc0 <init_test+0x1f0>)
 8009ccc:	f009 f91a 	bl	8012f04 <puts>
					for(int i = 0; i < 1; i++){
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	613b      	str	r3, [r7, #16]
 8009cd4:	e005      	b.n	8009ce2 <init_test+0x112>
						driveC(SEC_HALF*2);			//a一区画のパルス分デフォルトインターバルで走行
 8009cd6:	20b4      	movs	r0, #180	; 0xb4
 8009cd8:	f7fb fb9a 	bl	8005410 <driveC>
					for(int i = 0; i < 1; i++){
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	3301      	adds	r3, #1
 8009ce0:	613b      	str	r3, [r7, #16]
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	ddf6      	ble.n	8009cd6 <init_test+0x106>
					}
					break;
 8009ce8:	e05c      	b.n	8009da4 <init_test+0x1d4>
				case 2:
					//----right90度回転----
					printf("Rotate R90.\n");
 8009cea:	4836      	ldr	r0, [pc, #216]	; (8009dc4 <init_test+0x1f4>)
 8009cec:	f009 f90a 	bl	8012f04 <puts>
					for(int i = 0; i < 8; i++){
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	60fb      	str	r3, [r7, #12]
 8009cf4:	e004      	b.n	8009d00 <init_test+0x130>
						rotate_R90();				//16回右90度回転、つまり4周回転
 8009cf6:	f7fc fbb7 	bl	8006468 <rotate_R90>
					for(int i = 0; i < 8; i++){
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	60fb      	str	r3, [r7, #12]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2b07      	cmp	r3, #7
 8009d04:	ddf7      	ble.n	8009cf6 <init_test+0x126>
					}
					break;
 8009d06:	e04d      	b.n	8009da4 <init_test+0x1d4>
				case 3:
					//----left90度回転----
					printf("Rotate L90.\n");
 8009d08:	482f      	ldr	r0, [pc, #188]	; (8009dc8 <init_test+0x1f8>)
 8009d0a:	f009 f8fb 	bl	8012f04 <puts>
					for(int i = 0; i < 8; i++){
 8009d0e:	2300      	movs	r3, #0
 8009d10:	60bb      	str	r3, [r7, #8]
 8009d12:	e004      	b.n	8009d1e <init_test+0x14e>
						rotate_L90();				//16回左90度回転、つまり4周回転
 8009d14:	f7fc fc84 	bl	8006620 <rotate_L90>
					for(int i = 0; i < 8; i++){
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	60bb      	str	r3, [r7, #8]
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	2b07      	cmp	r3, #7
 8009d22:	ddf7      	ble.n	8009d14 <init_test+0x144>
					}
					break;
 8009d24:	e03e      	b.n	8009da4 <init_test+0x1d4>
				case 4:
					//----180度回転----
					printf("Rotate 180.\n");
 8009d26:	4829      	ldr	r0, [pc, #164]	; (8009dcc <init_test+0x1fc>)
 8009d28:	f009 f8ec 	bl	8012f04 <puts>
					for(int i = 0; i < 4; i++){
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	607b      	str	r3, [r7, #4]
 8009d30:	e004      	b.n	8009d3c <init_test+0x16c>
						rotate_180();				//8回右180度回転、つまり4周回転
 8009d32:	f7fc fd51 	bl	80067d8 <rotate_180>
					for(int i = 0; i < 4; i++){
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	3301      	adds	r3, #1
 8009d3a:	607b      	str	r3, [r7, #4]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2b03      	cmp	r3, #3
 8009d40:	ddf7      	ble.n	8009d32 <init_test+0x162>
					}
					break;
 8009d42:	e02f      	b.n	8009da4 <init_test+0x1d4>
				case 5:
					//----4区画連続走行----
					printf("4 Section, Forward, Continuous.\n");
 8009d44:	4822      	ldr	r0, [pc, #136]	; (8009dd0 <init_test+0x200>)
 8009d46:	f009 f8dd 	bl	8012f04 <puts>
					get_base();
 8009d4a:	f008 f95b 	bl	8012004 <get_base>
					run_mode = 2;
 8009d4e:	4b21      	ldr	r3, [pc, #132]	; (8009dd4 <init_test+0x204>)
 8009d50:	2202      	movs	r2, #2
 8009d52:	701a      	strb	r2, [r3, #0]
					half_sectionA();				//a半区画のパルス分加速しながら走行
 8009d54:	f7fb ff8a 	bl	8005c6c <half_sectionA>
					for(int i = 0; i < 5-1; i++){
 8009d58:	2300      	movs	r3, #0
 8009d5a:	603b      	str	r3, [r7, #0]
 8009d5c:	e004      	b.n	8009d68 <init_test+0x198>
						one_sectionU();				//a一区画のパルス分等速走行
 8009d5e:	f7fc fb69 	bl	8006434 <one_sectionU>
					for(int i = 0; i < 5-1; i++){
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	3301      	adds	r3, #1
 8009d66:	603b      	str	r3, [r7, #0]
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	2b03      	cmp	r3, #3
 8009d6c:	ddf7      	ble.n	8009d5e <init_test+0x18e>
					}
					half_sectionD();				//a半区画のパルス分減速しながら走行。走行後は停止する
 8009d6e:	f7fb ffe3 	bl	8005d38 <half_sectionD>
					break;
 8009d72:	e017      	b.n	8009da4 <init_test+0x1d4>
				case 6:
					//----a宴会芸モード----
					target_degree_z = degree_z;
 8009d74:	4b18      	ldr	r3, [pc, #96]	; (8009dd8 <init_test+0x208>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a18      	ldr	r2, [pc, #96]	; (8009ddc <init_test+0x20c>)
 8009d7a:	6013      	str	r3, [r2, #0]
					accel_l = 5000;
 8009d7c:	4b18      	ldr	r3, [pc, #96]	; (8009de0 <init_test+0x210>)
 8009d7e:	4a19      	ldr	r2, [pc, #100]	; (8009de4 <init_test+0x214>)
 8009d80:	601a      	str	r2, [r3, #0]

					MF2.FLAG.ENKAI = 1;
 8009d82:	4a19      	ldr	r2, [pc, #100]	; (8009de8 <init_test+0x218>)
 8009d84:	8813      	ldrh	r3, [r2, #0]
 8009d86:	f043 0320 	orr.w	r3, r3, #32
 8009d8a:	8013      	strh	r3, [r2, #0]

					while(1);
 8009d8c:	e7fe      	b.n	8009d8c <init_test+0x1bc>
					break;
				case 7:
					//----a停止時前壁補正モード----
					MF.FLAG.FWALL = 1;
 8009d8e:	4a17      	ldr	r2, [pc, #92]	; (8009dec <init_test+0x21c>)
 8009d90:	8813      	ldrh	r3, [r2, #0]
 8009d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d96:	8013      	strh	r3, [r2, #0]
					MF.FLAG.DRV = 1;
 8009d98:	4a14      	ldr	r2, [pc, #80]	; (8009dec <init_test+0x21c>)
 8009d9a:	8813      	ldrh	r3, [r2, #0]
 8009d9c:	f043 0302 	orr.w	r3, r3, #2
 8009da0:	8013      	strh	r3, [r2, #0]
					while(1);
 8009da2:	e7fe      	b.n	8009da2 <init_test+0x1d2>
					break;
			  }
			  dist_l = 0;
 8009da4:	4b05      	ldr	r3, [pc, #20]	; (8009dbc <init_test+0x1ec>)
 8009da6:	f04f 0200 	mov.w	r2, #0
 8009daa:	601a      	str	r2, [r3, #0]
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009dac:	e719      	b.n	8009be2 <init_test+0x12>
 8009dae:	bf00      	nop
 8009db0:	0801407c 	.word	0x0801407c
 8009db4:	20000b2c 	.word	0x20000b2c
 8009db8:	08014058 	.word	0x08014058
 8009dbc:	20001648 	.word	0x20001648
 8009dc0:	08014098 	.word	0x08014098
 8009dc4:	080140bc 	.word	0x080140bc
 8009dc8:	080140c8 	.word	0x080140c8
 8009dcc:	080140d4 	.word	0x080140d4
 8009dd0:	080140e0 	.word	0x080140e0
 8009dd4:	20000456 	.word	0x20000456
 8009dd8:	20000b9c 	.word	0x20000b9c
 8009ddc:	20000c78 	.word	0x20000c78
 8009de0:	20000d98 	.word	0x20000d98
 8009de4:	459c4000 	.word	0x459c4000
 8009de8:	20000fa4 	.word	0x20000fa4
 8009dec:	20000fa8 	.word	0x20000fa8

08009df0 <slalom_test>:
//slalom_test
// aスラローム走行テスト
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_test(void){
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b08e      	sub	sp, #56	; 0x38
 8009df4:	af00      	add	r7, sp, #0

	int mode = 0;
 8009df6:	2300      	movs	r3, #0
 8009df8:	637b      	str	r3, [r7, #52]	; 0x34
	printf("Test Slalom Run, Mode : %d\n", mode);
 8009dfa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009dfc:	48b8      	ldr	r0, [pc, #736]	; (800a0e0 <slalom_test+0x2f0>)
 8009dfe:	f009 f80d 	bl	8012e1c <iprintf>

	run_select();
 8009e02:	f7fb f8dd 	bl	8004fc0 <run_select>
	dist_l = 0;
 8009e06:	4bb7      	ldr	r3, [pc, #732]	; (800a0e4 <slalom_test+0x2f4>)
 8009e08:	f04f 0200 	mov.w	r2, #0
 8009e0c:	601a      	str	r2, [r3, #0]

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	f003 0301 	and.w	r3, r3, #1
 8009e16:	b2d8      	uxtb	r0, r3
 8009e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e1a:	b2db      	uxtb	r3, r3
 8009e1c:	f003 0302 	and.w	r3, r3, #2
 8009e20:	b2d9      	uxtb	r1, r3
 8009e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	f003 0304 	and.w	r3, r3, #4
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	f008 f941 	bl	80120b4 <led_write>
		  if(dist_r >= 20){
 8009e32:	4bad      	ldr	r3, [pc, #692]	; (800a0e8 <slalom_test+0x2f8>)
 8009e34:	edd3 7a00 	vldr	s15, [r3]
 8009e38:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009e3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e44:	db20      	blt.n	8009e88 <slalom_test+0x98>
			  mode++;
 8009e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e48:	3301      	adds	r3, #1
 8009e4a:	637b      	str	r3, [r7, #52]	; 0x34
			  dist_r = 0;
 8009e4c:	4ba6      	ldr	r3, [pc, #664]	; (800a0e8 <slalom_test+0x2f8>)
 8009e4e:	f04f 0200 	mov.w	r2, #0
 8009e52:	601a      	str	r2, [r3, #0]
			  if(mode < 8){
 8009e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e56:	2b07      	cmp	r3, #7
 8009e58:	dc03      	bgt.n	8009e62 <slalom_test+0x72>
				  full_led_write1(WHITE);
 8009e5a:	2007      	movs	r0, #7
 8009e5c:	f008 f964 	bl	8012128 <full_led_write1>
 8009e60:	e009      	b.n	8009e76 <slalom_test+0x86>
			  }else if(mode < 16){
 8009e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e64:	2b0f      	cmp	r3, #15
 8009e66:	dc03      	bgt.n	8009e70 <slalom_test+0x80>
				  full_led_write1(BLUEGREEN);
 8009e68:	2004      	movs	r0, #4
 8009e6a:	f008 f95d 	bl	8012128 <full_led_write1>
 8009e6e:	e002      	b.n	8009e76 <slalom_test+0x86>
			  }else{
				  full_led_write1(PURPLE);
 8009e70:	2005      	movs	r0, #5
 8009e72:	f008 f959 	bl	8012128 <full_led_write1>
			  }
			  if(mode > 23){
 8009e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e78:	2b17      	cmp	r3, #23
 8009e7a:	dd01      	ble.n	8009e80 <slalom_test+0x90>
				  mode = 0;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	637b      	str	r3, [r7, #52]	; 0x34
			  }
			  printf("Mode : %d\n", mode);
 8009e80:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009e82:	489a      	ldr	r0, [pc, #616]	; (800a0ec <slalom_test+0x2fc>)
 8009e84:	f008 ffca 	bl	8012e1c <iprintf>
		  }
		  if(dist_r <= -20){
 8009e88:	4b97      	ldr	r3, [pc, #604]	; (800a0e8 <slalom_test+0x2f8>)
 8009e8a:	edd3 7a00 	vldr	s15, [r3]
 8009e8e:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009e92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e9a:	d820      	bhi.n	8009ede <slalom_test+0xee>
			  mode--;
 8009e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e9e:	3b01      	subs	r3, #1
 8009ea0:	637b      	str	r3, [r7, #52]	; 0x34
			  dist_r = 0;
 8009ea2:	4b91      	ldr	r3, [pc, #580]	; (800a0e8 <slalom_test+0x2f8>)
 8009ea4:	f04f 0200 	mov.w	r2, #0
 8009ea8:	601a      	str	r2, [r3, #0]
			  if(mode < 8){
 8009eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eac:	2b07      	cmp	r3, #7
 8009eae:	dc03      	bgt.n	8009eb8 <slalom_test+0xc8>
				  full_led_write1(WHITE);
 8009eb0:	2007      	movs	r0, #7
 8009eb2:	f008 f939 	bl	8012128 <full_led_write1>
 8009eb6:	e009      	b.n	8009ecc <slalom_test+0xdc>
			  }else if(mode < 16){
 8009eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eba:	2b0f      	cmp	r3, #15
 8009ebc:	dc03      	bgt.n	8009ec6 <slalom_test+0xd6>
				  full_led_write1(BLUEGREEN);
 8009ebe:	2004      	movs	r0, #4
 8009ec0:	f008 f932 	bl	8012128 <full_led_write1>
 8009ec4:	e002      	b.n	8009ecc <slalom_test+0xdc>
			  }else{
				  full_led_write1(PURPLE);
 8009ec6:	2005      	movs	r0, #5
 8009ec8:	f008 f92e 	bl	8012128 <full_led_write1>
			  }
			  if(mode < 0){
 8009ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	da01      	bge.n	8009ed6 <slalom_test+0xe6>
				  mode = 23;
 8009ed2:	2317      	movs	r3, #23
 8009ed4:	637b      	str	r3, [r7, #52]	; 0x34
			  }
			  printf("Mode : %d\n", mode);
 8009ed6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009ed8:	4884      	ldr	r0, [pc, #528]	; (800a0ec <slalom_test+0x2fc>)
 8009eda:	f008 ff9f 	bl	8012e1c <iprintf>
		  }
		  if(dist_l <= -20){
 8009ede:	4b81      	ldr	r3, [pc, #516]	; (800a0e4 <slalom_test+0x2f4>)
 8009ee0:	edd3 7a00 	vldr	s15, [r3]
 8009ee4:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009ee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ef0:	f200 8143 	bhi.w	800a17a <slalom_test+0x38a>
			  dist_l = 0;
 8009ef4:	4b7b      	ldr	r3, [pc, #492]	; (800a0e4 <slalom_test+0x2f4>)
 8009ef6:	f04f 0200 	mov.w	r2, #0
 8009efa:	601a      	str	r2, [r3, #0]
			  drive_ready();
 8009efc:	f7fa feb6 	bl	8004c6c <drive_ready>
			  get_base();
 8009f00:	f008 f880 	bl	8012004 <get_base>

			  switch(mode){
 8009f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f06:	2b10      	cmp	r3, #16
 8009f08:	f200 8131 	bhi.w	800a16e <slalom_test+0x37e>
 8009f0c:	a201      	add	r2, pc, #4	; (adr r2, 8009f14 <slalom_test+0x124>)
 8009f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f12:	bf00      	nop
 8009f14:	08009f59 	.word	0x08009f59
 8009f18:	08009f5f 	.word	0x08009f5f
 8009f1c:	08009f85 	.word	0x08009f85
 8009f20:	08009fab 	.word	0x08009fab
 8009f24:	08009fd1 	.word	0x08009fd1
 8009f28:	08009ff7 	.word	0x08009ff7
 8009f2c:	0800a01d 	.word	0x0800a01d
 8009f30:	0800a16f 	.word	0x0800a16f
 8009f34:	0800a16f 	.word	0x0800a16f
 8009f38:	0800a043 	.word	0x0800a043
 8009f3c:	0800a06d 	.word	0x0800a06d
 8009f40:	0800a0ab 	.word	0x0800a0ab
 8009f44:	0800a0d1 	.word	0x0800a0d1
 8009f48:	0800a123 	.word	0x0800a123
 8009f4c:	0800a149 	.word	0x0800a149
 8009f50:	0800a16f 	.word	0x0800a16f
 8009f54:	0800a16f 	.word	0x0800a16f
				case 0:
					get_base();
 8009f58:	f008 f854 	bl	8012004 <get_base>
					break;
 8009f5c:	e107      	b.n	800a16e <slalom_test+0x37e>
				case 1:
					//----slalom右折----
					printf("slalom turn right .\n");
 8009f5e:	4864      	ldr	r0, [pc, #400]	; (800a0f0 <slalom_test+0x300>)
 8009f60:	f008 ffd0 	bl	8012f04 <puts>
					half_sectionA();
 8009f64:	f7fb fe82 	bl	8005c6c <half_sectionA>
					for(int i = 0; i < 1; i++){
 8009f68:	2300      	movs	r3, #0
 8009f6a:	633b      	str	r3, [r7, #48]	; 0x30
 8009f6c:	e004      	b.n	8009f78 <slalom_test+0x188>
						slalom_R90();				//1回右90度回転、つまり1/4周回転
 8009f6e:	f7fc fd0b 	bl	8006988 <slalom_R90>
					for(int i = 0; i < 1; i++){
 8009f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f74:	3301      	adds	r3, #1
 8009f76:	633b      	str	r3, [r7, #48]	; 0x30
 8009f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	ddf7      	ble.n	8009f6e <slalom_test+0x17e>
					}
					half_sectionD();
 8009f7e:	f7fb fedb 	bl	8005d38 <half_sectionD>
					break;
 8009f82:	e0f4      	b.n	800a16e <slalom_test+0x37e>
				case 2:
					//----slalom左折----
					printf("slalom turn left .\n");
 8009f84:	485b      	ldr	r0, [pc, #364]	; (800a0f4 <slalom_test+0x304>)
 8009f86:	f008 ffbd 	bl	8012f04 <puts>
					half_sectionA();
 8009f8a:	f7fb fe6f 	bl	8005c6c <half_sectionA>
					for(int i = 0; i < 1; i++){
 8009f8e:	2300      	movs	r3, #0
 8009f90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f92:	e004      	b.n	8009f9e <slalom_test+0x1ae>
						slalom_L90();				//1回左90度回転、つまり1/4周回転
 8009f94:	f7fc fe5a 	bl	8006c4c <slalom_L90>
					for(int i = 0; i < 1; i++){
 8009f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	ddf7      	ble.n	8009f94 <slalom_test+0x1a4>
					}
					half_sectionD();
 8009fa4:	f7fb fec8 	bl	8005d38 <half_sectionD>
					break;
 8009fa8:	e0e1      	b.n	800a16e <slalom_test+0x37e>
				case 3:
					//----Lslalom右折----
					printf("Lslalom turn right .\n");
 8009faa:	4853      	ldr	r0, [pc, #332]	; (800a0f8 <slalom_test+0x308>)
 8009fac:	f008 ffaa 	bl	8012f04 <puts>
					half_sectionA();
 8009fb0:	f7fb fe5c 	bl	8005c6c <half_sectionA>
					for(int i = 0; i < 1; i++){
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8009fb8:	e004      	b.n	8009fc4 <slalom_test+0x1d4>
						Lslalom_R90();				//1回右90度回転、つまり1/4周回転
 8009fba:	f7fc ff9f 	bl	8006efc <Lslalom_R90>
					for(int i = 0; i < 1; i++){
 8009fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8009fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	ddf7      	ble.n	8009fba <slalom_test+0x1ca>
					}
					half_sectionD();
 8009fca:	f7fb feb5 	bl	8005d38 <half_sectionD>
					break;
 8009fce:	e0ce      	b.n	800a16e <slalom_test+0x37e>
				case 4:
					//----Lslalom左折----
					printf("Lslalom turn left .\n");
 8009fd0:	484a      	ldr	r0, [pc, #296]	; (800a0fc <slalom_test+0x30c>)
 8009fd2:	f008 ff97 	bl	8012f04 <puts>
					half_sectionA();
 8009fd6:	f7fb fe49 	bl	8005c6c <half_sectionA>
					for(int i = 0; i < 1; i++){
 8009fda:	2300      	movs	r3, #0
 8009fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8009fde:	e004      	b.n	8009fea <slalom_test+0x1fa>
						Lslalom_L90();				//1回左90度回転、つまり1/4周回転
 8009fe0:	f7fd f8c2 	bl	8007168 <Lslalom_L90>
					for(int i = 0; i < 1; i++){
 8009fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8009fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	ddf7      	ble.n	8009fe0 <slalom_test+0x1f0>
					}
					half_sectionD();
 8009ff0:	f7fb fea2 	bl	8005d38 <half_sectionD>
					break;
 8009ff4:	e0bb      	b.n	800a16e <slalom_test+0x37e>
				case 5:
					//----Lslalom右180----
					printf("Lslalom turn right & right .\n");
 8009ff6:	4842      	ldr	r0, [pc, #264]	; (800a100 <slalom_test+0x310>)
 8009ff8:	f008 ff84 	bl	8012f04 <puts>
					half_sectionA();
 8009ffc:	f7fb fe36 	bl	8005c6c <half_sectionA>
					for(int i = 0; i < 1; i++){
 800a000:	2300      	movs	r3, #0
 800a002:	623b      	str	r3, [r7, #32]
 800a004:	e004      	b.n	800a010 <slalom_test+0x220>
						Lslalom_R180();				//1回右180度回転、つまり1/2周回転
 800a006:	f7fd f9d9 	bl	80073bc <Lslalom_R180>
					for(int i = 0; i < 1; i++){
 800a00a:	6a3b      	ldr	r3, [r7, #32]
 800a00c:	3301      	adds	r3, #1
 800a00e:	623b      	str	r3, [r7, #32]
 800a010:	6a3b      	ldr	r3, [r7, #32]
 800a012:	2b00      	cmp	r3, #0
 800a014:	ddf7      	ble.n	800a006 <slalom_test+0x216>
					}
					half_sectionD();
 800a016:	f7fb fe8f 	bl	8005d38 <half_sectionD>
					break;
 800a01a:	e0a8      	b.n	800a16e <slalom_test+0x37e>
				case 6:
					//----Lslalom左180----
					printf("Lslalom turn left & left .\n");
 800a01c:	4839      	ldr	r0, [pc, #228]	; (800a104 <slalom_test+0x314>)
 800a01e:	f008 ff71 	bl	8012f04 <puts>
					half_sectionA();
 800a022:	f7fb fe23 	bl	8005c6c <half_sectionA>
					for(int i = 0; i < 1; i++){
 800a026:	2300      	movs	r3, #0
 800a028:	61fb      	str	r3, [r7, #28]
 800a02a:	e004      	b.n	800a036 <slalom_test+0x246>
						Lslalom_L180();				//1回左180度回転、つまり1/2周回転
 800a02c:	f7fd fb12 	bl	8007654 <Lslalom_L180>
					for(int i = 0; i < 1; i++){
 800a030:	69fb      	ldr	r3, [r7, #28]
 800a032:	3301      	adds	r3, #1
 800a034:	61fb      	str	r3, [r7, #28]
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	ddf7      	ble.n	800a02c <slalom_test+0x23c>
					}
					half_sectionD();
 800a03c:	f7fb fe7c 	bl	8005d38 <half_sectionD>
					break;
 800a040:	e095      	b.n	800a16e <slalom_test+0x37e>
					break;
				case 8:
					break;
				case 9:
					//----slalom右折----
					printf("slalom turn right .\n");
 800a042:	482b      	ldr	r0, [pc, #172]	; (800a0f0 <slalom_test+0x300>)
 800a044:	f008 ff5e 	bl	8012f04 <puts>
					half_sectionA();
 800a048:	f7fb fe10 	bl	8005c6c <half_sectionA>
					for(int i = 0; i < 8; i++){
 800a04c:	2300      	movs	r3, #0
 800a04e:	61bb      	str	r3, [r7, #24]
 800a050:	e006      	b.n	800a060 <slalom_test+0x270>
						slalom_R90();				//8回右90度回転、つまり2周回転
 800a052:	f7fc fc99 	bl	8006988 <slalom_R90>
						one_sectionU();
 800a056:	f7fc f9ed 	bl	8006434 <one_sectionU>
					for(int i = 0; i < 8; i++){
 800a05a:	69bb      	ldr	r3, [r7, #24]
 800a05c:	3301      	adds	r3, #1
 800a05e:	61bb      	str	r3, [r7, #24]
 800a060:	69bb      	ldr	r3, [r7, #24]
 800a062:	2b07      	cmp	r3, #7
 800a064:	ddf5      	ble.n	800a052 <slalom_test+0x262>
					}
					half_sectionD();
 800a066:	f7fb fe67 	bl	8005d38 <half_sectionD>
					break;
 800a06a:	e080      	b.n	800a16e <slalom_test+0x37e>
				case 10:
					//----slalom左折----
					printf("slalom turn left .\n");
 800a06c:	4821      	ldr	r0, [pc, #132]	; (800a0f4 <slalom_test+0x304>)
 800a06e:	f008 ff49 	bl	8012f04 <puts>
					half_sectionA();
 800a072:	f7fb fdfb 	bl	8005c6c <half_sectionA>
					MF2.FLAG.LOG = 1;
 800a076:	4a24      	ldr	r2, [pc, #144]	; (800a108 <slalom_test+0x318>)
 800a078:	8813      	ldrh	r3, [r2, #0]
 800a07a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a07e:	8013      	strh	r3, [r2, #0]
					for(int i = 0; i < 8; i++){
 800a080:	2300      	movs	r3, #0
 800a082:	617b      	str	r3, [r7, #20]
 800a084:	e006      	b.n	800a094 <slalom_test+0x2a4>
						slalom_L90();				//8回左90度回転、つまり2周回転
 800a086:	f7fc fde1 	bl	8006c4c <slalom_L90>
						one_sectionU();
 800a08a:	f7fc f9d3 	bl	8006434 <one_sectionU>
					for(int i = 0; i < 8; i++){
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	3301      	adds	r3, #1
 800a092:	617b      	str	r3, [r7, #20]
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	2b07      	cmp	r3, #7
 800a098:	ddf5      	ble.n	800a086 <slalom_test+0x296>
					}
					MF2.FLAG.LOG = 0;
 800a09a:	4a1b      	ldr	r2, [pc, #108]	; (800a108 <slalom_test+0x318>)
 800a09c:	8813      	ldrh	r3, [r2, #0]
 800a09e:	f36f 1386 	bfc	r3, #6, #1
 800a0a2:	8013      	strh	r3, [r2, #0]
					half_sectionD();
 800a0a4:	f7fb fe48 	bl	8005d38 <half_sectionD>
					printf("r start\n");
					for(int j = 0; j < log_allay; j++){
						printf("%d\n", get_speed_r[j]);
					}
					printf("r end\n");
*/					break;
 800a0a8:	e061      	b.n	800a16e <slalom_test+0x37e>
				case 11:
					//----Lslalom右折----
					printf("Lslalom turn right .\n");
 800a0aa:	4813      	ldr	r0, [pc, #76]	; (800a0f8 <slalom_test+0x308>)
 800a0ac:	f008 ff2a 	bl	8012f04 <puts>
					half_sectionA();
 800a0b0:	f7fb fddc 	bl	8005c6c <half_sectionA>
					for(int i = 0; i < 8; i++){
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	613b      	str	r3, [r7, #16]
 800a0b8:	e004      	b.n	800a0c4 <slalom_test+0x2d4>
						Lslalom_R90();				//8回右90度回転、つまり2周回転
 800a0ba:	f7fc ff1f 	bl	8006efc <Lslalom_R90>
					for(int i = 0; i < 8; i++){
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	613b      	str	r3, [r7, #16]
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	2b07      	cmp	r3, #7
 800a0c8:	ddf7      	ble.n	800a0ba <slalom_test+0x2ca>
					}
					half_sectionD();
 800a0ca:	f7fb fe35 	bl	8005d38 <half_sectionD>
					break;
 800a0ce:	e04e      	b.n	800a16e <slalom_test+0x37e>
				case 12:
					//----Lslalom左折----
					printf("Lslalom turn left .\n");
 800a0d0:	480a      	ldr	r0, [pc, #40]	; (800a0fc <slalom_test+0x30c>)
 800a0d2:	f008 ff17 	bl	8012f04 <puts>
					half_sectionA();
 800a0d6:	f7fb fdc9 	bl	8005c6c <half_sectionA>
					for(int i = 0; i < 8; i++){
 800a0da:	2300      	movs	r3, #0
 800a0dc:	60fb      	str	r3, [r7, #12]
 800a0de:	e01a      	b.n	800a116 <slalom_test+0x326>
 800a0e0:	08014100 	.word	0x08014100
 800a0e4:	20001648 	.word	0x20001648
 800a0e8:	20000b2c 	.word	0x20000b2c
 800a0ec:	08014058 	.word	0x08014058
 800a0f0:	0801411c 	.word	0x0801411c
 800a0f4:	08014130 	.word	0x08014130
 800a0f8:	08014144 	.word	0x08014144
 800a0fc:	0801415c 	.word	0x0801415c
 800a100:	08014170 	.word	0x08014170
 800a104:	08014190 	.word	0x08014190
 800a108:	20000fa4 	.word	0x20000fa4
						Lslalom_L90();				//8回左90度回転、つまり2周回転
 800a10c:	f7fd f82c 	bl	8007168 <Lslalom_L90>
					for(int i = 0; i < 8; i++){
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	3301      	adds	r3, #1
 800a114:	60fb      	str	r3, [r7, #12]
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2b07      	cmp	r3, #7
 800a11a:	ddf7      	ble.n	800a10c <slalom_test+0x31c>
					}
					half_sectionD();
 800a11c:	f7fb fe0c 	bl	8005d38 <half_sectionD>
					break;
 800a120:	e025      	b.n	800a16e <slalom_test+0x37e>
				case 13:
					//----Lslalom右180----
					printf("Lslalom turn right & right .\n");
 800a122:	4816      	ldr	r0, [pc, #88]	; (800a17c <slalom_test+0x38c>)
 800a124:	f008 feee 	bl	8012f04 <puts>
					half_sectionA();
 800a128:	f7fb fda0 	bl	8005c6c <half_sectionA>
					for(int i = 0; i < 8; i++){
 800a12c:	2300      	movs	r3, #0
 800a12e:	60bb      	str	r3, [r7, #8]
 800a130:	e004      	b.n	800a13c <slalom_test+0x34c>
						Lslalom_R180();				//8回右180度回転、つまり4周回転
 800a132:	f7fd f943 	bl	80073bc <Lslalom_R180>
					for(int i = 0; i < 8; i++){
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	3301      	adds	r3, #1
 800a13a:	60bb      	str	r3, [r7, #8]
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	2b07      	cmp	r3, #7
 800a140:	ddf7      	ble.n	800a132 <slalom_test+0x342>
					}
					half_sectionD();
 800a142:	f7fb fdf9 	bl	8005d38 <half_sectionD>
					break;
 800a146:	e012      	b.n	800a16e <slalom_test+0x37e>
				case 14:
					//----Lslalom左180----
					printf("Lslalom turn left & left .\n");
 800a148:	480d      	ldr	r0, [pc, #52]	; (800a180 <slalom_test+0x390>)
 800a14a:	f008 fedb 	bl	8012f04 <puts>
					half_sectionA();
 800a14e:	f7fb fd8d 	bl	8005c6c <half_sectionA>
					for(int i = 0; i < 8; i++){
 800a152:	2300      	movs	r3, #0
 800a154:	607b      	str	r3, [r7, #4]
 800a156:	e004      	b.n	800a162 <slalom_test+0x372>
						Lslalom_L180();				//8回左180度回転、つまり4周回転
 800a158:	f7fd fa7c 	bl	8007654 <Lslalom_L180>
					for(int i = 0; i < 8; i++){
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	3301      	adds	r3, #1
 800a160:	607b      	str	r3, [r7, #4]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2b07      	cmp	r3, #7
 800a166:	ddf7      	ble.n	800a158 <slalom_test+0x368>
					}
					half_sectionD();
 800a168:	f7fb fde6 	bl	8005d38 <half_sectionD>
					break;
 800a16c:	bf00      	nop
					break;
				case 16:
					break;

			  }
			  drive_break();
 800a16e:	f7fa fe07 	bl	8004d80 <drive_break>
			  dist_l = 0;
 800a172:	4b04      	ldr	r3, [pc, #16]	; (800a184 <slalom_test+0x394>)
 800a174:	f04f 0200 	mov.w	r2, #0
 800a178:	601a      	str	r2, [r3, #0]
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a17a:	e648      	b.n	8009e0e <slalom_test+0x1e>
 800a17c:	08014170 	.word	0x08014170
 800a180:	08014190 	.word	0x08014190
 800a184:	20001648 	.word	0x20001648

0800a188 <v_test>:
//v_test
// a斜め走行テスト
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_test(void){
 800a188:	b580      	push	{r7, lr}
 800a18a:	b092      	sub	sp, #72	; 0x48
 800a18c:	af00      	add	r7, sp, #0

	int mode = 0;
 800a18e:	2300      	movs	r3, #0
 800a190:	647b      	str	r3, [r7, #68]	; 0x44
	printf("Test V Run, Mode : %d\n", mode);
 800a192:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a194:	48b8      	ldr	r0, [pc, #736]	; (800a478 <v_test+0x2f0>)
 800a196:	f008 fe41 	bl	8012e1c <iprintf>

	run_select();
 800a19a:	f7fa ff11 	bl	8004fc0 <run_select>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a19e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	f003 0301 	and.w	r3, r3, #1
 800a1a6:	b2d8      	uxtb	r0, r3
 800a1a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1aa:	b2db      	uxtb	r3, r3
 800a1ac:	f003 0302 	and.w	r3, r3, #2
 800a1b0:	b2d9      	uxtb	r1, r3
 800a1b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1b4:	b2db      	uxtb	r3, r3
 800a1b6:	f003 0304 	and.w	r3, r3, #4
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	461a      	mov	r2, r3
 800a1be:	f007 ff79 	bl	80120b4 <led_write>
		  if(dist_r >= 20){
 800a1c2:	4bae      	ldr	r3, [pc, #696]	; (800a47c <v_test+0x2f4>)
 800a1c4:	edd3 7a00 	vldr	s15, [r3]
 800a1c8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800a1cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a1d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1d4:	db20      	blt.n	800a218 <v_test+0x90>
			  mode++;
 800a1d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1d8:	3301      	adds	r3, #1
 800a1da:	647b      	str	r3, [r7, #68]	; 0x44
			  dist_r = 0;
 800a1dc:	4ba7      	ldr	r3, [pc, #668]	; (800a47c <v_test+0x2f4>)
 800a1de:	f04f 0200 	mov.w	r2, #0
 800a1e2:	601a      	str	r2, [r3, #0]
			  if(mode > 23){
 800a1e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1e6:	2b17      	cmp	r3, #23
 800a1e8:	dd01      	ble.n	800a1ee <v_test+0x66>
				  mode = 0;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	647b      	str	r3, [r7, #68]	; 0x44
			  }
			  if(mode < 8){
 800a1ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1f0:	2b07      	cmp	r3, #7
 800a1f2:	dc03      	bgt.n	800a1fc <v_test+0x74>
				  full_led_write1(WHITE);
 800a1f4:	2007      	movs	r0, #7
 800a1f6:	f007 ff97 	bl	8012128 <full_led_write1>
 800a1fa:	e009      	b.n	800a210 <v_test+0x88>
			  }else if(mode < 16){
 800a1fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1fe:	2b0f      	cmp	r3, #15
 800a200:	dc03      	bgt.n	800a20a <v_test+0x82>
				  full_led_write1(BLUEGREEN);
 800a202:	2004      	movs	r0, #4
 800a204:	f007 ff90 	bl	8012128 <full_led_write1>
 800a208:	e002      	b.n	800a210 <v_test+0x88>
			  }else{
				  full_led_write1(PURPLE);
 800a20a:	2005      	movs	r0, #5
 800a20c:	f007 ff8c 	bl	8012128 <full_led_write1>
			  }
			  printf("Mode : %d\n", mode);
 800a210:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a212:	489b      	ldr	r0, [pc, #620]	; (800a480 <v_test+0x2f8>)
 800a214:	f008 fe02 	bl	8012e1c <iprintf>
		  }
		  if(dist_r <= -20){
 800a218:	4b98      	ldr	r3, [pc, #608]	; (800a47c <v_test+0x2f4>)
 800a21a:	edd3 7a00 	vldr	s15, [r3]
 800a21e:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800a222:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a22a:	d820      	bhi.n	800a26e <v_test+0xe6>
			  mode--;
 800a22c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a22e:	3b01      	subs	r3, #1
 800a230:	647b      	str	r3, [r7, #68]	; 0x44
			  dist_r = 0;
 800a232:	4b92      	ldr	r3, [pc, #584]	; (800a47c <v_test+0x2f4>)
 800a234:	f04f 0200 	mov.w	r2, #0
 800a238:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800a23a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	da01      	bge.n	800a244 <v_test+0xbc>
				  mode = 23;
 800a240:	2317      	movs	r3, #23
 800a242:	647b      	str	r3, [r7, #68]	; 0x44
			  }
			  if(mode < 8){
 800a244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a246:	2b07      	cmp	r3, #7
 800a248:	dc03      	bgt.n	800a252 <v_test+0xca>
				  full_led_write1(WHITE);
 800a24a:	2007      	movs	r0, #7
 800a24c:	f007 ff6c 	bl	8012128 <full_led_write1>
 800a250:	e009      	b.n	800a266 <v_test+0xde>
			  }else if(mode < 16){
 800a252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a254:	2b0f      	cmp	r3, #15
 800a256:	dc03      	bgt.n	800a260 <v_test+0xd8>
				  full_led_write1(BLUEGREEN);
 800a258:	2004      	movs	r0, #4
 800a25a:	f007 ff65 	bl	8012128 <full_led_write1>
 800a25e:	e002      	b.n	800a266 <v_test+0xde>
			  }else{
				  full_led_write1(PURPLE);
 800a260:	2005      	movs	r0, #5
 800a262:	f007 ff61 	bl	8012128 <full_led_write1>
			  }
			  printf("Mode : %d\n", mode);
 800a266:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a268:	4885      	ldr	r0, [pc, #532]	; (800a480 <v_test+0x2f8>)
 800a26a:	f008 fdd7 	bl	8012e1c <iprintf>
		  }
		  if(dist_l <= -20){
 800a26e:	4b85      	ldr	r3, [pc, #532]	; (800a484 <v_test+0x2fc>)
 800a270:	edd3 7a00 	vldr	s15, [r3]
 800a274:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800a278:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a27c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a280:	f200 81a9 	bhi.w	800a5d6 <v_test+0x44e>
			  dist_l = 0;
 800a284:	4b7f      	ldr	r3, [pc, #508]	; (800a484 <v_test+0x2fc>)
 800a286:	f04f 0200 	mov.w	r2, #0
 800a28a:	601a      	str	r2, [r3, #0]
			  drive_ready();
 800a28c:	f7fa fcee 	bl	8004c6c <drive_ready>

			  MF.FLAG.XDIR = 1;
 800a290:	4a7d      	ldr	r2, [pc, #500]	; (800a488 <v_test+0x300>)
 800a292:	8813      	ldrh	r3, [r2, #0]
 800a294:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a298:	8013      	strh	r3, [r2, #0]
			  MF2.FLAG.V = 0;
 800a29a:	4a7c      	ldr	r2, [pc, #496]	; (800a48c <v_test+0x304>)
 800a29c:	8813      	ldrh	r3, [r2, #0]
 800a29e:	f36f 03c3 	bfc	r3, #3, #1
 800a2a2:	8013      	strh	r3, [r2, #0]
			  get_base();
 800a2a4:	f007 feae 	bl	8012004 <get_base>

			  switch(mode){
 800a2a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2aa:	2b14      	cmp	r3, #20
 800a2ac:	f200 818d 	bhi.w	800a5ca <v_test+0x442>
 800a2b0:	a201      	add	r2, pc, #4	; (adr r2, 800a2b8 <v_test+0x130>)
 800a2b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b6:	bf00      	nop
 800a2b8:	0800a30d 	.word	0x0800a30d
 800a2bc:	0800a313 	.word	0x0800a313
 800a2c0:	0800a339 	.word	0x0800a339
 800a2c4:	0800a35f 	.word	0x0800a35f
 800a2c8:	0800a385 	.word	0x0800a385
 800a2cc:	0800a3ab 	.word	0x0800a3ab
 800a2d0:	0800a3d1 	.word	0x0800a3d1
 800a2d4:	0800a5cb 	.word	0x0800a5cb
 800a2d8:	0800a5cb 	.word	0x0800a5cb
 800a2dc:	0800a3f7 	.word	0x0800a3f7
 800a2e0:	0800a41d 	.word	0x0800a41d
 800a2e4:	0800a443 	.word	0x0800a443
 800a2e8:	0800a469 	.word	0x0800a469
 800a2ec:	0800a4bf 	.word	0x0800a4bf
 800a2f0:	0800a4e5 	.word	0x0800a4e5
 800a2f4:	0800a5cb 	.word	0x0800a5cb
 800a2f8:	0800a5cb 	.word	0x0800a5cb
 800a2fc:	0800a50b 	.word	0x0800a50b
 800a300:	0800a53b 	.word	0x0800a53b
 800a304:	0800a56b 	.word	0x0800a56b
 800a308:	0800a59b 	.word	0x0800a59b
				case 0:
					get_base();
 800a30c:	f007 fe7a 	bl	8012004 <get_base>
					break;
 800a310:	e15b      	b.n	800a5ca <v_test+0x442>
				case 1:
					//----V右45----
					printf("V 45 right .\n");
 800a312:	485f      	ldr	r0, [pc, #380]	; (800a490 <v_test+0x308>)
 800a314:	f008 fdf6 	bl	8012f04 <puts>
					half_sectionA();
 800a318:	f7fb fca8 	bl	8005c6c <half_sectionA>
					for(int i = 0; i < 1; i++){
 800a31c:	2300      	movs	r3, #0
 800a31e:	643b      	str	r3, [r7, #64]	; 0x40
 800a320:	e004      	b.n	800a32c <v_test+0x1a4>
						v_R45();
 800a322:	f7fd fad9 	bl	80078d8 <v_R45>
					for(int i = 0; i < 1; i++){
 800a326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a328:	3301      	adds	r3, #1
 800a32a:	643b      	str	r3, [r7, #64]	; 0x40
 800a32c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a32e:	2b00      	cmp	r3, #0
 800a330:	ddf7      	ble.n	800a322 <v_test+0x19a>
					}
					half_sectionVD();
 800a332:	f7fb fdbb 	bl	8005eac <half_sectionVD>
					break;
 800a336:	e148      	b.n	800a5ca <v_test+0x442>
				case 2:
					//----V左45----
					printf("V 45 left .\n");
 800a338:	4856      	ldr	r0, [pc, #344]	; (800a494 <v_test+0x30c>)
 800a33a:	f008 fde3 	bl	8012f04 <puts>
					half_sectionA();
 800a33e:	f7fb fc95 	bl	8005c6c <half_sectionA>
					for(int i = 0; i < 1; i++){
 800a342:	2300      	movs	r3, #0
 800a344:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a346:	e004      	b.n	800a352 <v_test+0x1ca>
						v_L45();
 800a348:	f7fd fd00 	bl	8007d4c <v_L45>
					for(int i = 0; i < 1; i++){
 800a34c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a34e:	3301      	adds	r3, #1
 800a350:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a354:	2b00      	cmp	r3, #0
 800a356:	ddf7      	ble.n	800a348 <v_test+0x1c0>
					}
					half_sectionVD();
 800a358:	f7fb fda8 	bl	8005eac <half_sectionVD>
					break;
 800a35c:	e135      	b.n	800a5ca <v_test+0x442>
				case 3:
					//----V右90----
					printf("V 90 right .\n");
 800a35e:	484e      	ldr	r0, [pc, #312]	; (800a498 <v_test+0x310>)
 800a360:	f008 fdd0 	bl	8012f04 <puts>
					half_sectionVA();
 800a364:	f7fb fd48 	bl	8005df8 <half_sectionVA>
//					v_R45();
					for(int i = 0; i < 1; i++){
 800a368:	2300      	movs	r3, #0
 800a36a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a36c:	e004      	b.n	800a378 <v_test+0x1f0>
						v_R90();
 800a36e:	f7fe fa3b 	bl	80087e8 <v_R90>
					for(int i = 0; i < 1; i++){
 800a372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a374:	3301      	adds	r3, #1
 800a376:	63bb      	str	r3, [r7, #56]	; 0x38
 800a378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	ddf7      	ble.n	800a36e <v_test+0x1e6>
					}
//					v_R45();
					half_sectionVD();
 800a37e:	f7fb fd95 	bl	8005eac <half_sectionVD>
					break;
 800a382:	e122      	b.n	800a5ca <v_test+0x442>
				case 4:
					//----V左90----
					printf("V 90 left .\n");
 800a384:	4845      	ldr	r0, [pc, #276]	; (800a49c <v_test+0x314>)
 800a386:	f008 fdbd 	bl	8012f04 <puts>
					half_sectionVA();
 800a38a:	f7fb fd35 	bl	8005df8 <half_sectionVA>
//					v_L45();
					for(int i = 0; i < 1; i++){
 800a38e:	2300      	movs	r3, #0
 800a390:	637b      	str	r3, [r7, #52]	; 0x34
 800a392:	e004      	b.n	800a39e <v_test+0x216>
						v_L90();
 800a394:	f7fe fb18 	bl	80089c8 <v_L90>
					for(int i = 0; i < 1; i++){
 800a398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a39a:	3301      	adds	r3, #1
 800a39c:	637b      	str	r3, [r7, #52]	; 0x34
 800a39e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	ddf7      	ble.n	800a394 <v_test+0x20c>
					}
//					v_L45();
					half_sectionVD();
 800a3a4:	f7fb fd82 	bl	8005eac <half_sectionVD>
					break;
 800a3a8:	e10f      	b.n	800a5ca <v_test+0x442>
				case 5:
					//----V右135----
					printf("V 135 right .\n");
 800a3aa:	483d      	ldr	r0, [pc, #244]	; (800a4a0 <v_test+0x318>)
 800a3ac:	f008 fdaa 	bl	8012f04 <puts>
					half_sectionA();
 800a3b0:	f7fb fc5c 	bl	8005c6c <half_sectionA>
//					v_R45();
					for(int i = 0; i < 1; i++){
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	633b      	str	r3, [r7, #48]	; 0x30
 800a3b8:	e004      	b.n	800a3c4 <v_test+0x23c>
						v_R135();
 800a3ba:	f7fe fbf1 	bl	8008ba0 <v_R135>
					for(int i = 0; i < 1; i++){
 800a3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	633b      	str	r3, [r7, #48]	; 0x30
 800a3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	ddf7      	ble.n	800a3ba <v_test+0x232>
					}
//					v_R45();
					half_sectionVD();
 800a3ca:	f7fb fd6f 	bl	8005eac <half_sectionVD>
					break;
 800a3ce:	e0fc      	b.n	800a5ca <v_test+0x442>
				case 6:
					//----V左135----
					printf("V 135 left .\n");
 800a3d0:	4834      	ldr	r0, [pc, #208]	; (800a4a4 <v_test+0x31c>)
 800a3d2:	f008 fd97 	bl	8012f04 <puts>
					half_sectionA();
 800a3d6:	f7fb fc49 	bl	8005c6c <half_sectionA>
//					v_L45();
					for(int i = 0; i < 1; i++){
 800a3da:	2300      	movs	r3, #0
 800a3dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3de:	e004      	b.n	800a3ea <v_test+0x262>
						v_L135();
 800a3e0:	f7fe fe1c 	bl	800901c <v_L135>
					for(int i = 0; i < 1; i++){
 800a3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	ddf7      	ble.n	800a3e0 <v_test+0x258>
					}
//					v_L45();
					half_sectionVD();
 800a3f0:	f7fb fd5c 	bl	8005eac <half_sectionVD>
					break;
 800a3f4:	e0e9      	b.n	800a5ca <v_test+0x442>
					break;
				case 8:
					break;
				case 9:
					//----V右45----
					printf("V 45 right .\n");
 800a3f6:	4826      	ldr	r0, [pc, #152]	; (800a490 <v_test+0x308>)
 800a3f8:	f008 fd84 	bl	8012f04 <puts>
					half_sectionA();
 800a3fc:	f7fb fc36 	bl	8005c6c <half_sectionA>
					for(int i = 0; i < 8; i++){
 800a400:	2300      	movs	r3, #0
 800a402:	62bb      	str	r3, [r7, #40]	; 0x28
 800a404:	e004      	b.n	800a410 <v_test+0x288>
						v_R45();
 800a406:	f7fd fa67 	bl	80078d8 <v_R45>
					for(int i = 0; i < 8; i++){
 800a40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40c:	3301      	adds	r3, #1
 800a40e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a412:	2b07      	cmp	r3, #7
 800a414:	ddf7      	ble.n	800a406 <v_test+0x27e>
					}
					half_sectionD();
 800a416:	f7fb fc8f 	bl	8005d38 <half_sectionD>
					break;
 800a41a:	e0d6      	b.n	800a5ca <v_test+0x442>
				case 10:
					//----V左45----
					printf("V 45 left .\n");
 800a41c:	481d      	ldr	r0, [pc, #116]	; (800a494 <v_test+0x30c>)
 800a41e:	f008 fd71 	bl	8012f04 <puts>
					half_sectionA();
 800a422:	f7fb fc23 	bl	8005c6c <half_sectionA>
					for(int i = 0; i < 8; i++){
 800a426:	2300      	movs	r3, #0
 800a428:	627b      	str	r3, [r7, #36]	; 0x24
 800a42a:	e004      	b.n	800a436 <v_test+0x2ae>
						v_L45();
 800a42c:	f7fd fc8e 	bl	8007d4c <v_L45>
					for(int i = 0; i < 8; i++){
 800a430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a432:	3301      	adds	r3, #1
 800a434:	627b      	str	r3, [r7, #36]	; 0x24
 800a436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a438:	2b07      	cmp	r3, #7
 800a43a:	ddf7      	ble.n	800a42c <v_test+0x2a4>
					}
					half_sectionD();
 800a43c:	f7fb fc7c 	bl	8005d38 <half_sectionD>
					break;
 800a440:	e0c3      	b.n	800a5ca <v_test+0x442>
				case 11:
					//----V右90----
					printf("V 90 right .\n");
 800a442:	4815      	ldr	r0, [pc, #84]	; (800a498 <v_test+0x310>)
 800a444:	f008 fd5e 	bl	8012f04 <puts>
					half_sectionVA();
 800a448:	f7fb fcd6 	bl	8005df8 <half_sectionVA>
//					v_R45();
					for(int i = 0; i < 8; i++){
 800a44c:	2300      	movs	r3, #0
 800a44e:	623b      	str	r3, [r7, #32]
 800a450:	e004      	b.n	800a45c <v_test+0x2d4>
						v_R90();
 800a452:	f7fe f9c9 	bl	80087e8 <v_R90>
					for(int i = 0; i < 8; i++){
 800a456:	6a3b      	ldr	r3, [r7, #32]
 800a458:	3301      	adds	r3, #1
 800a45a:	623b      	str	r3, [r7, #32]
 800a45c:	6a3b      	ldr	r3, [r7, #32]
 800a45e:	2b07      	cmp	r3, #7
 800a460:	ddf7      	ble.n	800a452 <v_test+0x2ca>
					}
//					v_R45();
					half_sectionVD();
 800a462:	f7fb fd23 	bl	8005eac <half_sectionVD>
					break;
 800a466:	e0b0      	b.n	800a5ca <v_test+0x442>
				case 12:
					//----V左90----
					printf("V 90 left .\n");
 800a468:	480c      	ldr	r0, [pc, #48]	; (800a49c <v_test+0x314>)
 800a46a:	f008 fd4b 	bl	8012f04 <puts>
					half_sectionVA();
 800a46e:	f7fb fcc3 	bl	8005df8 <half_sectionVA>
//					v_L45();
					for(int i = 0; i < 8; i++){
 800a472:	2300      	movs	r3, #0
 800a474:	61fb      	str	r3, [r7, #28]
 800a476:	e01c      	b.n	800a4b2 <v_test+0x32a>
 800a478:	080141ac 	.word	0x080141ac
 800a47c:	20000b2c 	.word	0x20000b2c
 800a480:	08014058 	.word	0x08014058
 800a484:	20001648 	.word	0x20001648
 800a488:	20000fa8 	.word	0x20000fa8
 800a48c:	20000fa4 	.word	0x20000fa4
 800a490:	080141c4 	.word	0x080141c4
 800a494:	080141d4 	.word	0x080141d4
 800a498:	080141e0 	.word	0x080141e0
 800a49c:	080141f0 	.word	0x080141f0
 800a4a0:	080141fc 	.word	0x080141fc
 800a4a4:	0801420c 	.word	0x0801420c
						v_L90();
 800a4a8:	f7fe fa8e 	bl	80089c8 <v_L90>
					for(int i = 0; i < 8; i++){
 800a4ac:	69fb      	ldr	r3, [r7, #28]
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	61fb      	str	r3, [r7, #28]
 800a4b2:	69fb      	ldr	r3, [r7, #28]
 800a4b4:	2b07      	cmp	r3, #7
 800a4b6:	ddf7      	ble.n	800a4a8 <v_test+0x320>
					}
//					v_L45();
					half_sectionVD();
 800a4b8:	f7fb fcf8 	bl	8005eac <half_sectionVD>
					break;
 800a4bc:	e085      	b.n	800a5ca <v_test+0x442>
				case 13:
					//----V右135----
					printf("V 135 right .\n");
 800a4be:	4846      	ldr	r0, [pc, #280]	; (800a5d8 <v_test+0x450>)
 800a4c0:	f008 fd20 	bl	8012f04 <puts>
					half_sectionA();
 800a4c4:	f7fb fbd2 	bl	8005c6c <half_sectionA>
//					v_R45();
					for(int i = 0; i < 4; i++){
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	61bb      	str	r3, [r7, #24]
 800a4cc:	e004      	b.n	800a4d8 <v_test+0x350>
						v_R135();
 800a4ce:	f7fe fb67 	bl	8008ba0 <v_R135>
					for(int i = 0; i < 4; i++){
 800a4d2:	69bb      	ldr	r3, [r7, #24]
 800a4d4:	3301      	adds	r3, #1
 800a4d6:	61bb      	str	r3, [r7, #24]
 800a4d8:	69bb      	ldr	r3, [r7, #24]
 800a4da:	2b03      	cmp	r3, #3
 800a4dc:	ddf7      	ble.n	800a4ce <v_test+0x346>
					}
//					v_R45();
					half_sectionD();
 800a4de:	f7fb fc2b 	bl	8005d38 <half_sectionD>
					break;
 800a4e2:	e072      	b.n	800a5ca <v_test+0x442>
				case 14:
					//----V左135----
					printf("V 135 left .\n");
 800a4e4:	483d      	ldr	r0, [pc, #244]	; (800a5dc <v_test+0x454>)
 800a4e6:	f008 fd0d 	bl	8012f04 <puts>
					half_sectionA();
 800a4ea:	f7fb fbbf 	bl	8005c6c <half_sectionA>
//					v_L45();
					for(int i = 0; i < 4; i++){
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	617b      	str	r3, [r7, #20]
 800a4f2:	e004      	b.n	800a4fe <v_test+0x376>
						v_L135();
 800a4f4:	f7fe fd92 	bl	800901c <v_L135>
					for(int i = 0; i < 4; i++){
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	617b      	str	r3, [r7, #20]
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	2b03      	cmp	r3, #3
 800a502:	ddf7      	ble.n	800a4f4 <v_test+0x36c>
					}
//					v_L45();
					half_sectionD();
 800a504:	f7fb fc18 	bl	8005d38 <half_sectionD>
					break;
 800a508:	e05f      	b.n	800a5ca <v_test+0x442>
					break;
				case 16:
					break;
				case 17:
					//----V右45D----
					printf("V 45 right .\n");
 800a50a:	4835      	ldr	r0, [pc, #212]	; (800a5e0 <v_test+0x458>)
 800a50c:	f008 fcfa 	bl	8012f04 <puts>
					MF2.FLAG.V = 1;
 800a510:	4a34      	ldr	r2, [pc, #208]	; (800a5e4 <v_test+0x45c>)
 800a512:	8813      	ldrh	r3, [r2, #0]
 800a514:	f043 0308 	orr.w	r3, r3, #8
 800a518:	8013      	strh	r3, [r2, #0]
					half_sectionVA();
 800a51a:	f7fb fc6d 	bl	8005df8 <half_sectionVA>
					for(int i = 0; i < 1; i++){
 800a51e:	2300      	movs	r3, #0
 800a520:	613b      	str	r3, [r7, #16]
 800a522:	e004      	b.n	800a52e <v_test+0x3a6>
//						v_R45D();
						v_R45();
 800a524:	f7fd f9d8 	bl	80078d8 <v_R45>
					for(int i = 0; i < 1; i++){
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	3301      	adds	r3, #1
 800a52c:	613b      	str	r3, [r7, #16]
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	2b00      	cmp	r3, #0
 800a532:	ddf7      	ble.n	800a524 <v_test+0x39c>
					}
					half_sectionD();
 800a534:	f7fb fc00 	bl	8005d38 <half_sectionD>
					break;
 800a538:	e047      	b.n	800a5ca <v_test+0x442>
				case 18:
					//----V左45D----
					printf("V 45 left .\n");
 800a53a:	482b      	ldr	r0, [pc, #172]	; (800a5e8 <v_test+0x460>)
 800a53c:	f008 fce2 	bl	8012f04 <puts>
					MF2.FLAG.V = 1;
 800a540:	4a28      	ldr	r2, [pc, #160]	; (800a5e4 <v_test+0x45c>)
 800a542:	8813      	ldrh	r3, [r2, #0]
 800a544:	f043 0308 	orr.w	r3, r3, #8
 800a548:	8013      	strh	r3, [r2, #0]
					half_sectionVA();
 800a54a:	f7fb fc55 	bl	8005df8 <half_sectionVA>
					for(int i = 0; i < 1; i++){
 800a54e:	2300      	movs	r3, #0
 800a550:	60fb      	str	r3, [r7, #12]
 800a552:	e004      	b.n	800a55e <v_test+0x3d6>
//						v_L45D();
						v_L45();
 800a554:	f7fd fbfa 	bl	8007d4c <v_L45>
					for(int i = 0; i < 1; i++){
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	3301      	adds	r3, #1
 800a55c:	60fb      	str	r3, [r7, #12]
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2b00      	cmp	r3, #0
 800a562:	ddf7      	ble.n	800a554 <v_test+0x3cc>
					}
					half_sectionD();
 800a564:	f7fb fbe8 	bl	8005d38 <half_sectionD>
					break;
 800a568:	e02f      	b.n	800a5ca <v_test+0x442>
				case 19:
					//----V右135D----
					printf("V 135 right .\n");
 800a56a:	481b      	ldr	r0, [pc, #108]	; (800a5d8 <v_test+0x450>)
 800a56c:	f008 fcca 	bl	8012f04 <puts>
					MF2.FLAG.V = 1;
 800a570:	4a1c      	ldr	r2, [pc, #112]	; (800a5e4 <v_test+0x45c>)
 800a572:	8813      	ldrh	r3, [r2, #0]
 800a574:	f043 0308 	orr.w	r3, r3, #8
 800a578:	8013      	strh	r3, [r2, #0]
					half_sectionVA();
 800a57a:	f7fb fc3d 	bl	8005df8 <half_sectionVA>
					for(int i = 0; i < 1; i++){
 800a57e:	2300      	movs	r3, #0
 800a580:	60bb      	str	r3, [r7, #8]
 800a582:	e004      	b.n	800a58e <v_test+0x406>
//						v_R135D();
						v_R135();
 800a584:	f7fe fb0c 	bl	8008ba0 <v_R135>
					for(int i = 0; i < 1; i++){
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	3301      	adds	r3, #1
 800a58c:	60bb      	str	r3, [r7, #8]
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	2b00      	cmp	r3, #0
 800a592:	ddf7      	ble.n	800a584 <v_test+0x3fc>
					}
					half_sectionD();
 800a594:	f7fb fbd0 	bl	8005d38 <half_sectionD>
					break;
 800a598:	e017      	b.n	800a5ca <v_test+0x442>
				case 20:
					//----V左135D----
					printf("V 135 left .\n");
 800a59a:	4810      	ldr	r0, [pc, #64]	; (800a5dc <v_test+0x454>)
 800a59c:	f008 fcb2 	bl	8012f04 <puts>
					MF2.FLAG.V = 1;
 800a5a0:	4a10      	ldr	r2, [pc, #64]	; (800a5e4 <v_test+0x45c>)
 800a5a2:	8813      	ldrh	r3, [r2, #0]
 800a5a4:	f043 0308 	orr.w	r3, r3, #8
 800a5a8:	8013      	strh	r3, [r2, #0]
					half_sectionVA();
 800a5aa:	f7fb fc25 	bl	8005df8 <half_sectionVA>
					for(int i = 0; i < 1; i++){
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	607b      	str	r3, [r7, #4]
 800a5b2:	e004      	b.n	800a5be <v_test+0x436>
//						v_L135D();
						v_L135();
 800a5b4:	f7fe fd32 	bl	800901c <v_L135>
					for(int i = 0; i < 1; i++){
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	607b      	str	r3, [r7, #4]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	ddf7      	ble.n	800a5b4 <v_test+0x42c>
					}
					half_sectionD();
 800a5c4:	f7fb fbb8 	bl	8005d38 <half_sectionD>
					break;
 800a5c8:	bf00      	nop
			  }
			  drive_break();
 800a5ca:	f7fa fbd9 	bl	8004d80 <drive_break>
			  dist_l = 0;
 800a5ce:	4b07      	ldr	r3, [pc, #28]	; (800a5ec <v_test+0x464>)
 800a5d0:	f04f 0200 	mov.w	r2, #0
 800a5d4:	601a      	str	r2, [r3, #0]
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a5d6:	e5e2      	b.n	800a19e <v_test+0x16>
 800a5d8:	080141fc 	.word	0x080141fc
 800a5dc:	0801420c 	.word	0x0801420c
 800a5e0:	080141c4 	.word	0x080141c4
 800a5e4:	20000fa4 	.word	0x20000fa4
 800a5e8:	080141d4 	.word	0x080141d4
 800a5ec:	20001648 	.word	0x20001648

0800a5f0 <pass_test>:
//pass_test
// pass圧縮走行テスト
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_test(void){
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b082      	sub	sp, #8
 800a5f4:	af00      	add	r7, sp, #0

	int mode = 0;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	607b      	str	r3, [r7, #4]
	printf("Test pass Run, Mode : %d\n", mode);
 800a5fa:	6879      	ldr	r1, [r7, #4]
 800a5fc:	48a0      	ldr	r0, [pc, #640]	; (800a880 <pass_test+0x290>)
 800a5fe:	f008 fc0d 	bl	8012e1c <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	b2db      	uxtb	r3, r3
 800a606:	f003 0301 	and.w	r3, r3, #1
 800a60a:	b2d8      	uxtb	r0, r3
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	f003 0302 	and.w	r3, r3, #2
 800a614:	b2d9      	uxtb	r1, r3
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	f003 0304 	and.w	r3, r3, #4
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	461a      	mov	r2, r3
 800a622:	f007 fd47 	bl	80120b4 <led_write>
		  if(dist_r >= 20){
 800a626:	4b97      	ldr	r3, [pc, #604]	; (800a884 <pass_test+0x294>)
 800a628:	edd3 7a00 	vldr	s15, [r3]
 800a62c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800a630:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a638:	db0f      	blt.n	800a65a <pass_test+0x6a>
			  mode++;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	3301      	adds	r3, #1
 800a63e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a640:	4b90      	ldr	r3, [pc, #576]	; (800a884 <pass_test+0x294>)
 800a642:	f04f 0200 	mov.w	r2, #0
 800a646:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2b07      	cmp	r3, #7
 800a64c:	dd01      	ble.n	800a652 <pass_test+0x62>
				  mode = 0;
 800a64e:	2300      	movs	r3, #0
 800a650:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a652:	6879      	ldr	r1, [r7, #4]
 800a654:	488c      	ldr	r0, [pc, #560]	; (800a888 <pass_test+0x298>)
 800a656:	f008 fbe1 	bl	8012e1c <iprintf>
		  }
		  if(dist_r <= -20){
 800a65a:	4b8a      	ldr	r3, [pc, #552]	; (800a884 <pass_test+0x294>)
 800a65c:	edd3 7a00 	vldr	s15, [r3]
 800a660:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800a664:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a66c:	d80f      	bhi.n	800a68e <pass_test+0x9e>
			  mode--;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	3b01      	subs	r3, #1
 800a672:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a674:	4b83      	ldr	r3, [pc, #524]	; (800a884 <pass_test+0x294>)
 800a676:	f04f 0200 	mov.w	r2, #0
 800a67a:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	da01      	bge.n	800a686 <pass_test+0x96>
				  mode = 7;
 800a682:	2307      	movs	r3, #7
 800a684:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a686:	6879      	ldr	r1, [r7, #4]
 800a688:	487f      	ldr	r0, [pc, #508]	; (800a888 <pass_test+0x298>)
 800a68a:	f008 fbc7 	bl	8012e1c <iprintf>
		  }
		  if(dist_l <= -20){
 800a68e:	4b7f      	ldr	r3, [pc, #508]	; (800a88c <pass_test+0x29c>)
 800a690:	edd3 7a00 	vldr	s15, [r3]
 800a694:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800a698:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a69c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6a0:	f200 8222 	bhi.w	800aae8 <pass_test+0x4f8>
			  dist_l = 0;
 800a6a4:	4b79      	ldr	r3, [pc, #484]	; (800a88c <pass_test+0x29c>)
 800a6a6:	f04f 0200 	mov.w	r2, #0
 800a6aa:	601a      	str	r2, [r3, #0]
			  drive_ready();
 800a6ac:	f7fa fade 	bl	8004c6c <drive_ready>
			  MF2.FLAG.V = 0;
 800a6b0:	4a77      	ldr	r2, [pc, #476]	; (800a890 <pass_test+0x2a0>)
 800a6b2:	8813      	ldrh	r3, [r2, #0]
 800a6b4:	f36f 03c3 	bfc	r3, #3, #1
 800a6b8:	8013      	strh	r3, [r2, #0]

			  switch(mode){
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2b07      	cmp	r3, #7
 800a6be:	f200 820f 	bhi.w	800aae0 <pass_test+0x4f0>
 800a6c2:	a201      	add	r2, pc, #4	; (adr r2, 800a6c8 <pass_test+0xd8>)
 800a6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c8:	0800a6e9 	.word	0x0800a6e9
 800a6cc:	0800a771 	.word	0x0800a771
 800a6d0:	0800a7f9 	.word	0x0800a7f9
 800a6d4:	0800a8c1 	.word	0x0800a8c1
 800a6d8:	0800a949 	.word	0x0800a949
 800a6dc:	0800a9d1 	.word	0x0800a9d1
 800a6e0:	0800aae1 	.word	0x0800aae1
 800a6e4:	0800aa59 	.word	0x0800aa59
				case 0:
					//----a一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 800a6e8:	486a      	ldr	r0, [pc, #424]	; (800a894 <pass_test+0x2a4>)
 800a6ea:	f008 fc0b 	bl	8012f04 <puts>

					MF.FLAG.SCND = 0;
 800a6ee:	4a6a      	ldr	r2, [pc, #424]	; (800a898 <pass_test+0x2a8>)
 800a6f0:	8813      	ldrh	r3, [r2, #0]
 800a6f2:	f36f 1345 	bfc	r3, #5, #1
 800a6f6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a6f8:	4a67      	ldr	r2, [pc, #412]	; (800a898 <pass_test+0x2a8>)
 800a6fa:	8813      	ldrh	r3, [r2, #0]
 800a6fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a700:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800a702:	4a65      	ldr	r2, [pc, #404]	; (800a898 <pass_test+0x2a8>)
 800a704:	8813      	ldrh	r3, [r2, #0]
 800a706:	f36f 238a 	bfc	r3, #10, #1
 800a70a:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800a70c:	4b63      	ldr	r3, [pc, #396]	; (800a89c <pass_test+0x2ac>)
 800a70e:	2202      	movs	r2, #2
 800a710:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a712:	4b63      	ldr	r3, [pc, #396]	; (800a8a0 <pass_test+0x2b0>)
 800a714:	2200      	movs	r2, #0
 800a716:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a718:	4b62      	ldr	r3, [pc, #392]	; (800a8a4 <pass_test+0x2b4>)
 800a71a:	2202      	movs	r2, #2
 800a71c:	701a      	strb	r2, [r3, #0]
					accel_hs = 4000;
 800a71e:	4b62      	ldr	r3, [pc, #392]	; (800a8a8 <pass_test+0x2b8>)
 800a720:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800a724:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800a726:	4b61      	ldr	r3, [pc, #388]	; (800a8ac <pass_test+0x2bc>)
 800a728:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a72c:	801a      	strh	r2, [r3, #0]
					start_mode = 0;
 800a72e:	4b5c      	ldr	r3, [pc, #368]	; (800a8a0 <pass_test+0x2b0>)
 800a730:	2200      	movs	r2, #0
 800a732:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800a734:	4b5e      	ldr	r3, [pc, #376]	; (800a8b0 <pass_test+0x2c0>)
 800a736:	2207      	movs	r2, #7
 800a738:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a73a:	4b5e      	ldr	r3, [pc, #376]	; (800a8b4 <pass_test+0x2c4>)
 800a73c:	2207      	movs	r2, #7
 800a73e:	701a      	strb	r2, [r3, #0]

					get_base();
 800a740:	f007 fc60 	bl	8012004 <get_base>

					searchC();
 800a744:	f004 fc88 	bl	800f058 <searchC>
					HAL_Delay(2000);
 800a748:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a74c:	f7f6 fc66 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a750:	4b58      	ldr	r3, [pc, #352]	; (800a8b4 <pass_test+0x2c4>)
 800a752:	2200      	movs	r2, #0
 800a754:	701a      	strb	r2, [r3, #0]
 800a756:	4b57      	ldr	r3, [pc, #348]	; (800a8b4 <pass_test+0x2c4>)
 800a758:	781a      	ldrb	r2, [r3, #0]
 800a75a:	4b55      	ldr	r3, [pc, #340]	; (800a8b0 <pass_test+0x2c0>)
 800a75c:	701a      	strb	r2, [r3, #0]
					searchC();
 800a75e:	f004 fc7b 	bl	800f058 <searchC>

					goal_x = GOAL_X;
 800a762:	4b53      	ldr	r3, [pc, #332]	; (800a8b0 <pass_test+0x2c0>)
 800a764:	2207      	movs	r2, #7
 800a766:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a768:	4b52      	ldr	r3, [pc, #328]	; (800a8b4 <pass_test+0x2c4>)
 800a76a:	2207      	movs	r2, #7
 800a76c:	701a      	strb	r2, [r3, #0]
					break;
 800a76e:	e1b7      	b.n	800aae0 <pass_test+0x4f0>
				case 1:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース Middle Speed----
					printf("pass press 3-2.\n");
 800a770:	4851      	ldr	r0, [pc, #324]	; (800a8b8 <pass_test+0x2c8>)
 800a772:	f008 fbc7 	bl	8012f04 <puts>
					MF.FLAG.SCND = 1;
 800a776:	4a48      	ldr	r2, [pc, #288]	; (800a898 <pass_test+0x2a8>)
 800a778:	8813      	ldrh	r3, [r2, #0]
 800a77a:	f043 0320 	orr.w	r3, r3, #32
 800a77e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a780:	4a45      	ldr	r2, [pc, #276]	; (800a898 <pass_test+0x2a8>)
 800a782:	8813      	ldrh	r3, [r2, #0]
 800a784:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a788:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a78a:	4a43      	ldr	r2, [pc, #268]	; (800a898 <pass_test+0x2a8>)
 800a78c:	8813      	ldrh	r3, [r2, #0]
 800a78e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a792:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800a794:	4b41      	ldr	r3, [pc, #260]	; (800a89c <pass_test+0x2ac>)
 800a796:	2202      	movs	r2, #2
 800a798:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a79a:	4b41      	ldr	r3, [pc, #260]	; (800a8a0 <pass_test+0x2b0>)
 800a79c:	2200      	movs	r2, #0
 800a79e:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a7a0:	4b40      	ldr	r3, [pc, #256]	; (800a8a4 <pass_test+0x2b4>)
 800a7a2:	2202      	movs	r2, #2
 800a7a4:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a7a6:	4b40      	ldr	r3, [pc, #256]	; (800a8a8 <pass_test+0x2b8>)
 800a7a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7ac:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a7ae:	4b3f      	ldr	r3, [pc, #252]	; (800a8ac <pass_test+0x2bc>)
 800a7b0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a7b4:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800a7b6:	4b41      	ldr	r3, [pc, #260]	; (800a8bc <pass_test+0x2cc>)
 800a7b8:	2203      	movs	r2, #3
 800a7ba:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800a7bc:	4b3c      	ldr	r3, [pc, #240]	; (800a8b0 <pass_test+0x2c0>)
 800a7be:	2207      	movs	r2, #7
 800a7c0:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a7c2:	4b3c      	ldr	r3, [pc, #240]	; (800a8b4 <pass_test+0x2c4>)
 800a7c4:	2207      	movs	r2, #7
 800a7c6:	701a      	strb	r2, [r3, #0]

					get_base();
 800a7c8:	f007 fc1c 	bl	8012004 <get_base>

					searchF3();
 800a7cc:	f005 f8be 	bl	800f94c <searchF3>
					HAL_Delay(2000);
 800a7d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a7d4:	f7f6 fc22 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a7d8:	4b36      	ldr	r3, [pc, #216]	; (800a8b4 <pass_test+0x2c4>)
 800a7da:	2200      	movs	r2, #0
 800a7dc:	701a      	strb	r2, [r3, #0]
 800a7de:	4b35      	ldr	r3, [pc, #212]	; (800a8b4 <pass_test+0x2c4>)
 800a7e0:	781a      	ldrb	r2, [r3, #0]
 800a7e2:	4b33      	ldr	r3, [pc, #204]	; (800a8b0 <pass_test+0x2c0>)
 800a7e4:	701a      	strb	r2, [r3, #0]
					searchF3();
 800a7e6:	f005 f8b1 	bl	800f94c <searchF3>

					goal_x = GOAL_X;
 800a7ea:	4b31      	ldr	r3, [pc, #196]	; (800a8b0 <pass_test+0x2c0>)
 800a7ec:	2207      	movs	r2, #7
 800a7ee:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a7f0:	4b30      	ldr	r3, [pc, #192]	; (800a8b4 <pass_test+0x2c4>)
 800a7f2:	2207      	movs	r2, #7
 800a7f4:	701a      	strb	r2, [r3, #0]
					break;
 800a7f6:	e173      	b.n	800aae0 <pass_test+0x4f0>
				case 2:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-2.\n");
 800a7f8:	482f      	ldr	r0, [pc, #188]	; (800a8b8 <pass_test+0x2c8>)
 800a7fa:	f008 fb83 	bl	8012f04 <puts>
					MF.FLAG.SCND = 1;
 800a7fe:	4a26      	ldr	r2, [pc, #152]	; (800a898 <pass_test+0x2a8>)
 800a800:	8813      	ldrh	r3, [r2, #0]
 800a802:	f043 0320 	orr.w	r3, r3, #32
 800a806:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a808:	4a23      	ldr	r2, [pc, #140]	; (800a898 <pass_test+0x2a8>)
 800a80a:	8813      	ldrh	r3, [r2, #0]
 800a80c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a810:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a812:	4a21      	ldr	r2, [pc, #132]	; (800a898 <pass_test+0x2a8>)
 800a814:	8813      	ldrh	r3, [r2, #0]
 800a816:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a81a:	8013      	strh	r3, [r2, #0]
					run_mode = 3;
 800a81c:	4b1f      	ldr	r3, [pc, #124]	; (800a89c <pass_test+0x2ac>)
 800a81e:	2203      	movs	r2, #3
 800a820:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a822:	4b1f      	ldr	r3, [pc, #124]	; (800a8a0 <pass_test+0x2b0>)
 800a824:	2200      	movs	r2, #0
 800a826:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a828:	4b1e      	ldr	r3, [pc, #120]	; (800a8a4 <pass_test+0x2b4>)
 800a82a:	2202      	movs	r2, #2
 800a82c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a82e:	4b1e      	ldr	r3, [pc, #120]	; (800a8a8 <pass_test+0x2b8>)
 800a830:	f241 3288 	movw	r2, #5000	; 0x1388
 800a834:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800a836:	4b1d      	ldr	r3, [pc, #116]	; (800a8ac <pass_test+0x2bc>)
 800a838:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a83c:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800a83e:	4b1f      	ldr	r3, [pc, #124]	; (800a8bc <pass_test+0x2cc>)
 800a840:	2203      	movs	r2, #3
 800a842:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800a844:	4b1a      	ldr	r3, [pc, #104]	; (800a8b0 <pass_test+0x2c0>)
 800a846:	2207      	movs	r2, #7
 800a848:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a84a:	4b1a      	ldr	r3, [pc, #104]	; (800a8b4 <pass_test+0x2c4>)
 800a84c:	2207      	movs	r2, #7
 800a84e:	701a      	strb	r2, [r3, #0]

					get_base();
 800a850:	f007 fbd8 	bl	8012004 <get_base>

					searchF3();
 800a854:	f005 f87a 	bl	800f94c <searchF3>
					HAL_Delay(2000);
 800a858:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a85c:	f7f6 fbde 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a860:	4b14      	ldr	r3, [pc, #80]	; (800a8b4 <pass_test+0x2c4>)
 800a862:	2200      	movs	r2, #0
 800a864:	701a      	strb	r2, [r3, #0]
 800a866:	4b13      	ldr	r3, [pc, #76]	; (800a8b4 <pass_test+0x2c4>)
 800a868:	781a      	ldrb	r2, [r3, #0]
 800a86a:	4b11      	ldr	r3, [pc, #68]	; (800a8b0 <pass_test+0x2c0>)
 800a86c:	701a      	strb	r2, [r3, #0]
					searchF3();
 800a86e:	f005 f86d 	bl	800f94c <searchF3>

					goal_x = GOAL_X;
 800a872:	4b0f      	ldr	r3, [pc, #60]	; (800a8b0 <pass_test+0x2c0>)
 800a874:	2207      	movs	r2, #7
 800a876:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a878:	4b0e      	ldr	r3, [pc, #56]	; (800a8b4 <pass_test+0x2c4>)
 800a87a:	2207      	movs	r2, #7
 800a87c:	701a      	strb	r2, [r3, #0]
					break;
 800a87e:	e12f      	b.n	800aae0 <pass_test+0x4f0>
 800a880:	0801421c 	.word	0x0801421c
 800a884:	20000b2c 	.word	0x20000b2c
 800a888:	08014058 	.word	0x08014058
 800a88c:	20001648 	.word	0x20001648
 800a890:	20000fa4 	.word	0x20000fa4
 800a894:	08014238 	.word	0x08014238
 800a898:	20000fa8 	.word	0x20000fa8
 800a89c:	20000456 	.word	0x20000456
 800a8a0:	2000164c 	.word	0x2000164c
 800a8a4:	20000c31 	.word	0x20000c31
 800a8a8:	20000454 	.word	0x20000454
 800a8ac:	20000ffc 	.word	0x20000ffc
 800a8b0:	20000c30 	.word	0x20000c30
 800a8b4:	20000b8c 	.word	0x20000b8c
 800a8b8:	0801424c 	.word	0x0801424c
 800a8bc:	20000457 	.word	0x20000457
				case 3:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High High Speed----
					printf("pass press 3-2.\n");
 800a8c0:	488a      	ldr	r0, [pc, #552]	; (800aaec <pass_test+0x4fc>)
 800a8c2:	f008 fb1f 	bl	8012f04 <puts>
					MF.FLAG.SCND = 1;
 800a8c6:	4a8a      	ldr	r2, [pc, #552]	; (800aaf0 <pass_test+0x500>)
 800a8c8:	8813      	ldrh	r3, [r2, #0]
 800a8ca:	f043 0320 	orr.w	r3, r3, #32
 800a8ce:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a8d0:	4a87      	ldr	r2, [pc, #540]	; (800aaf0 <pass_test+0x500>)
 800a8d2:	8813      	ldrh	r3, [r2, #0]
 800a8d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a8d8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a8da:	4a85      	ldr	r2, [pc, #532]	; (800aaf0 <pass_test+0x500>)
 800a8dc:	8813      	ldrh	r3, [r2, #0]
 800a8de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a8e2:	8013      	strh	r3, [r2, #0]
					run_mode = 4;
 800a8e4:	4b83      	ldr	r3, [pc, #524]	; (800aaf4 <pass_test+0x504>)
 800a8e6:	2204      	movs	r2, #4
 800a8e8:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a8ea:	4b83      	ldr	r3, [pc, #524]	; (800aaf8 <pass_test+0x508>)
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a8f0:	4b82      	ldr	r3, [pc, #520]	; (800aafc <pass_test+0x50c>)
 800a8f2:	2202      	movs	r2, #2
 800a8f4:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800a8f6:	4b82      	ldr	r3, [pc, #520]	; (800ab00 <pass_test+0x510>)
 800a8f8:	f242 7210 	movw	r2, #10000	; 0x2710
 800a8fc:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800a8fe:	4b81      	ldr	r3, [pc, #516]	; (800ab04 <pass_test+0x514>)
 800a900:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a904:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800a906:	4b80      	ldr	r3, [pc, #512]	; (800ab08 <pass_test+0x518>)
 800a908:	2203      	movs	r2, #3
 800a90a:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800a90c:	4b7f      	ldr	r3, [pc, #508]	; (800ab0c <pass_test+0x51c>)
 800a90e:	2207      	movs	r2, #7
 800a910:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a912:	4b7f      	ldr	r3, [pc, #508]	; (800ab10 <pass_test+0x520>)
 800a914:	2207      	movs	r2, #7
 800a916:	701a      	strb	r2, [r3, #0]

					get_base();
 800a918:	f007 fb74 	bl	8012004 <get_base>

					searchF3();
 800a91c:	f005 f816 	bl	800f94c <searchF3>
					HAL_Delay(2000);
 800a920:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a924:	f7f6 fb7a 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a928:	4b79      	ldr	r3, [pc, #484]	; (800ab10 <pass_test+0x520>)
 800a92a:	2200      	movs	r2, #0
 800a92c:	701a      	strb	r2, [r3, #0]
 800a92e:	4b78      	ldr	r3, [pc, #480]	; (800ab10 <pass_test+0x520>)
 800a930:	781a      	ldrb	r2, [r3, #0]
 800a932:	4b76      	ldr	r3, [pc, #472]	; (800ab0c <pass_test+0x51c>)
 800a934:	701a      	strb	r2, [r3, #0]
					searchF3();
 800a936:	f005 f809 	bl	800f94c <searchF3>

					goal_x = GOAL_X;
 800a93a:	4b74      	ldr	r3, [pc, #464]	; (800ab0c <pass_test+0x51c>)
 800a93c:	2207      	movs	r2, #7
 800a93e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a940:	4b73      	ldr	r3, [pc, #460]	; (800ab10 <pass_test+0x520>)
 800a942:	2207      	movs	r2, #7
 800a944:	701a      	strb	r2, [r3, #0]
					break;
 800a946:	e0cb      	b.n	800aae0 <pass_test+0x4f0>
				case 4:
					//----a直線と大回り圧縮と斜め Middle Speedｰｰｰｰ
					printf("pass press 4.\n");
 800a948:	4872      	ldr	r0, [pc, #456]	; (800ab14 <pass_test+0x524>)
 800a94a:	f008 fadb 	bl	8012f04 <puts>
					MF.FLAG.SCND = 1;
 800a94e:	4a68      	ldr	r2, [pc, #416]	; (800aaf0 <pass_test+0x500>)
 800a950:	8813      	ldrh	r3, [r2, #0]
 800a952:	f043 0320 	orr.w	r3, r3, #32
 800a956:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a958:	4a65      	ldr	r2, [pc, #404]	; (800aaf0 <pass_test+0x500>)
 800a95a:	8813      	ldrh	r3, [r2, #0]
 800a95c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a960:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a962:	4a63      	ldr	r2, [pc, #396]	; (800aaf0 <pass_test+0x500>)
 800a964:	8813      	ldrh	r3, [r2, #0]
 800a966:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a96a:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800a96c:	4b61      	ldr	r3, [pc, #388]	; (800aaf4 <pass_test+0x504>)
 800a96e:	2202      	movs	r2, #2
 800a970:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a972:	4b61      	ldr	r3, [pc, #388]	; (800aaf8 <pass_test+0x508>)
 800a974:	2200      	movs	r2, #0
 800a976:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a978:	4b60      	ldr	r3, [pc, #384]	; (800aafc <pass_test+0x50c>)
 800a97a:	2202      	movs	r2, #2
 800a97c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a97e:	4b60      	ldr	r3, [pc, #384]	; (800ab00 <pass_test+0x510>)
 800a980:	f241 3288 	movw	r2, #5000	; 0x1388
 800a984:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a986:	4b5f      	ldr	r3, [pc, #380]	; (800ab04 <pass_test+0x514>)
 800a988:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a98c:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800a98e:	4b5e      	ldr	r3, [pc, #376]	; (800ab08 <pass_test+0x518>)
 800a990:	2204      	movs	r2, #4
 800a992:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800a994:	4b5d      	ldr	r3, [pc, #372]	; (800ab0c <pass_test+0x51c>)
 800a996:	2207      	movs	r2, #7
 800a998:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a99a:	4b5d      	ldr	r3, [pc, #372]	; (800ab10 <pass_test+0x520>)
 800a99c:	2207      	movs	r2, #7
 800a99e:	701a      	strb	r2, [r3, #0]

					get_base();
 800a9a0:	f007 fb30 	bl	8012004 <get_base>

					searchF4();
 800a9a4:	f005 f8ae 	bl	800fb04 <searchF4>
					HAL_Delay(2000);
 800a9a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a9ac:	f7f6 fb36 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a9b0:	4b57      	ldr	r3, [pc, #348]	; (800ab10 <pass_test+0x520>)
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	701a      	strb	r2, [r3, #0]
 800a9b6:	4b56      	ldr	r3, [pc, #344]	; (800ab10 <pass_test+0x520>)
 800a9b8:	781a      	ldrb	r2, [r3, #0]
 800a9ba:	4b54      	ldr	r3, [pc, #336]	; (800ab0c <pass_test+0x51c>)
 800a9bc:	701a      	strb	r2, [r3, #0]
					searchF4();
 800a9be:	f005 f8a1 	bl	800fb04 <searchF4>

					goal_x = GOAL_X;
 800a9c2:	4b52      	ldr	r3, [pc, #328]	; (800ab0c <pass_test+0x51c>)
 800a9c4:	2207      	movs	r2, #7
 800a9c6:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a9c8:	4b51      	ldr	r3, [pc, #324]	; (800ab10 <pass_test+0x520>)
 800a9ca:	2207      	movs	r2, #7
 800a9cc:	701a      	strb	r2, [r3, #0]
					break;
 800a9ce:	e087      	b.n	800aae0 <pass_test+0x4f0>
				case 5:
					//----a直線と大回り圧縮と斜め High Speedｰｰｰｰ
					printf("pass press 4.\n");
 800a9d0:	4850      	ldr	r0, [pc, #320]	; (800ab14 <pass_test+0x524>)
 800a9d2:	f008 fa97 	bl	8012f04 <puts>
					MF.FLAG.SCND = 1;
 800a9d6:	4a46      	ldr	r2, [pc, #280]	; (800aaf0 <pass_test+0x500>)
 800a9d8:	8813      	ldrh	r3, [r2, #0]
 800a9da:	f043 0320 	orr.w	r3, r3, #32
 800a9de:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a9e0:	4a43      	ldr	r2, [pc, #268]	; (800aaf0 <pass_test+0x500>)
 800a9e2:	8813      	ldrh	r3, [r2, #0]
 800a9e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a9e8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a9ea:	4a41      	ldr	r2, [pc, #260]	; (800aaf0 <pass_test+0x500>)
 800a9ec:	8813      	ldrh	r3, [r2, #0]
 800a9ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a9f2:	8013      	strh	r3, [r2, #0]
					run_mode = 3;
 800a9f4:	4b3f      	ldr	r3, [pc, #252]	; (800aaf4 <pass_test+0x504>)
 800a9f6:	2203      	movs	r2, #3
 800a9f8:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a9fa:	4b3f      	ldr	r3, [pc, #252]	; (800aaf8 <pass_test+0x508>)
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800aa00:	4b3e      	ldr	r3, [pc, #248]	; (800aafc <pass_test+0x50c>)
 800aa02:	2202      	movs	r2, #2
 800aa04:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800aa06:	4b3e      	ldr	r3, [pc, #248]	; (800ab00 <pass_test+0x510>)
 800aa08:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa0c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800aa0e:	4b3d      	ldr	r3, [pc, #244]	; (800ab04 <pass_test+0x514>)
 800aa10:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800aa14:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800aa16:	4b3c      	ldr	r3, [pc, #240]	; (800ab08 <pass_test+0x518>)
 800aa18:	2204      	movs	r2, #4
 800aa1a:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800aa1c:	4b3b      	ldr	r3, [pc, #236]	; (800ab0c <pass_test+0x51c>)
 800aa1e:	2207      	movs	r2, #7
 800aa20:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800aa22:	4b3b      	ldr	r3, [pc, #236]	; (800ab10 <pass_test+0x520>)
 800aa24:	2207      	movs	r2, #7
 800aa26:	701a      	strb	r2, [r3, #0]

					get_base();
 800aa28:	f007 faec 	bl	8012004 <get_base>

					searchF4();
 800aa2c:	f005 f86a 	bl	800fb04 <searchF4>
					HAL_Delay(2000);
 800aa30:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800aa34:	f7f6 faf2 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800aa38:	4b35      	ldr	r3, [pc, #212]	; (800ab10 <pass_test+0x520>)
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	701a      	strb	r2, [r3, #0]
 800aa3e:	4b34      	ldr	r3, [pc, #208]	; (800ab10 <pass_test+0x520>)
 800aa40:	781a      	ldrb	r2, [r3, #0]
 800aa42:	4b32      	ldr	r3, [pc, #200]	; (800ab0c <pass_test+0x51c>)
 800aa44:	701a      	strb	r2, [r3, #0]
					searchF4();
 800aa46:	f005 f85d 	bl	800fb04 <searchF4>

					goal_x = GOAL_X;
 800aa4a:	4b30      	ldr	r3, [pc, #192]	; (800ab0c <pass_test+0x51c>)
 800aa4c:	2207      	movs	r2, #7
 800aa4e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800aa50:	4b2f      	ldr	r3, [pc, #188]	; (800ab10 <pass_test+0x520>)
 800aa52:	2207      	movs	r2, #7
 800aa54:	701a      	strb	r2, [r3, #0]
					break;
 800aa56:	e043      	b.n	800aae0 <pass_test+0x4f0>
				case 7:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-4.\n");
 800aa58:	482f      	ldr	r0, [pc, #188]	; (800ab18 <pass_test+0x528>)
 800aa5a:	f008 fa53 	bl	8012f04 <puts>
					MF.FLAG.SCND = 1;
 800aa5e:	4a24      	ldr	r2, [pc, #144]	; (800aaf0 <pass_test+0x500>)
 800aa60:	8813      	ldrh	r3, [r2, #0]
 800aa62:	f043 0320 	orr.w	r3, r3, #32
 800aa66:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800aa68:	4a21      	ldr	r2, [pc, #132]	; (800aaf0 <pass_test+0x500>)
 800aa6a:	8813      	ldrh	r3, [r2, #0]
 800aa6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aa70:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800aa72:	4a1f      	ldr	r2, [pc, #124]	; (800aaf0 <pass_test+0x500>)
 800aa74:	8813      	ldrh	r3, [r2, #0]
 800aa76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800aa7a:	8013      	strh	r3, [r2, #0]
					run_mode = 5;
 800aa7c:	4b1d      	ldr	r3, [pc, #116]	; (800aaf4 <pass_test+0x504>)
 800aa7e:	2205      	movs	r2, #5
 800aa80:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800aa82:	4b1d      	ldr	r3, [pc, #116]	; (800aaf8 <pass_test+0x508>)
 800aa84:	2200      	movs	r2, #0
 800aa86:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800aa88:	4b1c      	ldr	r3, [pc, #112]	; (800aafc <pass_test+0x50c>)
 800aa8a:	2202      	movs	r2, #2
 800aa8c:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800aa8e:	4b1c      	ldr	r3, [pc, #112]	; (800ab00 <pass_test+0x510>)
 800aa90:	f242 7210 	movw	r2, #10000	; 0x2710
 800aa94:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800aa96:	4b1b      	ldr	r3, [pc, #108]	; (800ab04 <pass_test+0x514>)
 800aa98:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800aa9c:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800aa9e:	4b1a      	ldr	r3, [pc, #104]	; (800ab08 <pass_test+0x518>)
 800aaa0:	2203      	movs	r2, #3
 800aaa2:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800aaa4:	4b19      	ldr	r3, [pc, #100]	; (800ab0c <pass_test+0x51c>)
 800aaa6:	2207      	movs	r2, #7
 800aaa8:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800aaaa:	4b19      	ldr	r3, [pc, #100]	; (800ab10 <pass_test+0x520>)
 800aaac:	2207      	movs	r2, #7
 800aaae:	701a      	strb	r2, [r3, #0]

					get_base();
 800aab0:	f007 faa8 	bl	8012004 <get_base>

					searchF3();
 800aab4:	f004 ff4a 	bl	800f94c <searchF3>
					HAL_Delay(2000);
 800aab8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800aabc:	f7f6 faae 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800aac0:	4b13      	ldr	r3, [pc, #76]	; (800ab10 <pass_test+0x520>)
 800aac2:	2200      	movs	r2, #0
 800aac4:	701a      	strb	r2, [r3, #0]
 800aac6:	4b12      	ldr	r3, [pc, #72]	; (800ab10 <pass_test+0x520>)
 800aac8:	781a      	ldrb	r2, [r3, #0]
 800aaca:	4b10      	ldr	r3, [pc, #64]	; (800ab0c <pass_test+0x51c>)
 800aacc:	701a      	strb	r2, [r3, #0]
					searchF3();
 800aace:	f004 ff3d 	bl	800f94c <searchF3>

					goal_x = GOAL_X;
 800aad2:	4b0e      	ldr	r3, [pc, #56]	; (800ab0c <pass_test+0x51c>)
 800aad4:	2207      	movs	r2, #7
 800aad6:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800aad8:	4b0d      	ldr	r3, [pc, #52]	; (800ab10 <pass_test+0x520>)
 800aada:	2207      	movs	r2, #7
 800aadc:	701a      	strb	r2, [r3, #0]
					break;
 800aade:	bf00      	nop
			  }
			  dist_l = 0;
 800aae0:	4b0e      	ldr	r3, [pc, #56]	; (800ab1c <pass_test+0x52c>)
 800aae2:	f04f 0200 	mov.w	r2, #0
 800aae6:	601a      	str	r2, [r3, #0]
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800aae8:	e58b      	b.n	800a602 <pass_test+0x12>
 800aaea:	bf00      	nop
 800aaec:	0801424c 	.word	0x0801424c
 800aaf0:	20000fa8 	.word	0x20000fa8
 800aaf4:	20000456 	.word	0x20000456
 800aaf8:	2000164c 	.word	0x2000164c
 800aafc:	20000c31 	.word	0x20000c31
 800ab00:	20000454 	.word	0x20000454
 800ab04:	20000ffc 	.word	0x20000ffc
 800ab08:	20000457 	.word	0x20000457
 800ab0c:	20000c30 	.word	0x20000c30
 800ab10:	20000b8c 	.word	0x20000b8c
 800ab14:	0801425c 	.word	0x0801425c
 800ab18:	0801426c 	.word	0x0801426c
 800ab1c:	20001648 	.word	0x20001648

0800ab20 <goal_test>:
//goal_test
// a複数マスgoal走行テスト
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void goal_test(void){
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b082      	sub	sp, #8
 800ab24:	af00      	add	r7, sp, #0

	int mode = 0;
 800ab26:	2300      	movs	r3, #0
 800ab28:	607b      	str	r3, [r7, #4]
	printf("Test goal Run, Mode : %d\n", mode);
 800ab2a:	6879      	ldr	r1, [r7, #4]
 800ab2c:	48a8      	ldr	r0, [pc, #672]	; (800add0 <goal_test+0x2b0>)
 800ab2e:	f008 f975 	bl	8012e1c <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	b2db      	uxtb	r3, r3
 800ab36:	f003 0301 	and.w	r3, r3, #1
 800ab3a:	b2d8      	uxtb	r0, r3
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	b2db      	uxtb	r3, r3
 800ab40:	f003 0302 	and.w	r3, r3, #2
 800ab44:	b2d9      	uxtb	r1, r3
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	b2db      	uxtb	r3, r3
 800ab4a:	f003 0304 	and.w	r3, r3, #4
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	461a      	mov	r2, r3
 800ab52:	f007 faaf 	bl	80120b4 <led_write>
		  if(dist_r >= 20){
 800ab56:	4b9f      	ldr	r3, [pc, #636]	; (800add4 <goal_test+0x2b4>)
 800ab58:	edd3 7a00 	vldr	s15, [r3]
 800ab5c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800ab60:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab68:	db0f      	blt.n	800ab8a <goal_test+0x6a>
			  mode++;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	3301      	adds	r3, #1
 800ab6e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800ab70:	4b98      	ldr	r3, [pc, #608]	; (800add4 <goal_test+0x2b4>)
 800ab72:	f04f 0200 	mov.w	r2, #0
 800ab76:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2b07      	cmp	r3, #7
 800ab7c:	dd01      	ble.n	800ab82 <goal_test+0x62>
				  mode = 0;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800ab82:	6879      	ldr	r1, [r7, #4]
 800ab84:	4894      	ldr	r0, [pc, #592]	; (800add8 <goal_test+0x2b8>)
 800ab86:	f008 f949 	bl	8012e1c <iprintf>
		  }
		  if(dist_r <= -20){
 800ab8a:	4b92      	ldr	r3, [pc, #584]	; (800add4 <goal_test+0x2b4>)
 800ab8c:	edd3 7a00 	vldr	s15, [r3]
 800ab90:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800ab94:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab9c:	d80f      	bhi.n	800abbe <goal_test+0x9e>
			  mode--;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	3b01      	subs	r3, #1
 800aba2:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800aba4:	4b8b      	ldr	r3, [pc, #556]	; (800add4 <goal_test+0x2b4>)
 800aba6:	f04f 0200 	mov.w	r2, #0
 800abaa:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	da01      	bge.n	800abb6 <goal_test+0x96>
				  mode = 7;
 800abb2:	2307      	movs	r3, #7
 800abb4:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800abb6:	6879      	ldr	r1, [r7, #4]
 800abb8:	4887      	ldr	r0, [pc, #540]	; (800add8 <goal_test+0x2b8>)
 800abba:	f008 f92f 	bl	8012e1c <iprintf>
		  }
		  if(dist_l <= -20){
 800abbe:	4b87      	ldr	r3, [pc, #540]	; (800addc <goal_test+0x2bc>)
 800abc0:	edd3 7a00 	vldr	s15, [r3]
 800abc4:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800abc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800abcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abd0:	f200 826f 	bhi.w	800b0b2 <goal_test+0x592>
			  dist_l = 0;
 800abd4:	4b81      	ldr	r3, [pc, #516]	; (800addc <goal_test+0x2bc>)
 800abd6:	f04f 0200 	mov.w	r2, #0
 800abda:	601a      	str	r2, [r3, #0]
			  drive_ready();
 800abdc:	f7fa f846 	bl	8004c6c <drive_ready>
			  MF2.FLAG.V = 0;
 800abe0:	4a7f      	ldr	r2, [pc, #508]	; (800ade0 <goal_test+0x2c0>)
 800abe2:	8813      	ldrh	r3, [r2, #0]
 800abe4:	f36f 03c3 	bfc	r3, #3, #1
 800abe8:	8013      	strh	r3, [r2, #0]

			  switch(mode){
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2b07      	cmp	r3, #7
 800abee:	f200 825c 	bhi.w	800b0aa <goal_test+0x58a>
 800abf2:	a201      	add	r2, pc, #4	; (adr r2, 800abf8 <goal_test+0xd8>)
 800abf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf8:	0800ac19 	.word	0x0800ac19
 800abfc:	0800aca1 	.word	0x0800aca1
 800ac00:	0800ad4f 	.word	0x0800ad4f
 800ac04:	0800ae19 	.word	0x0800ae19
 800ac08:	0800ae9b 	.word	0x0800ae9b
 800ac0c:	0800af11 	.word	0x0800af11
 800ac10:	0800af93 	.word	0x0800af93
 800ac14:	0800b01f 	.word	0x0800b01f
				case 0:
					//----a一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 800ac18:	4872      	ldr	r0, [pc, #456]	; (800ade4 <goal_test+0x2c4>)
 800ac1a:	f008 f973 	bl	8012f04 <puts>

					MF.FLAG.SCND = 0;
 800ac1e:	4a72      	ldr	r2, [pc, #456]	; (800ade8 <goal_test+0x2c8>)
 800ac20:	8813      	ldrh	r3, [r2, #0]
 800ac22:	f36f 1345 	bfc	r3, #5, #1
 800ac26:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ac28:	4a6f      	ldr	r2, [pc, #444]	; (800ade8 <goal_test+0x2c8>)
 800ac2a:	8813      	ldrh	r3, [r2, #0]
 800ac2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ac30:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800ac32:	4a6d      	ldr	r2, [pc, #436]	; (800ade8 <goal_test+0x2c8>)
 800ac34:	8813      	ldrh	r3, [r2, #0]
 800ac36:	f36f 238a 	bfc	r3, #10, #1
 800ac3a:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800ac3c:	4b6b      	ldr	r3, [pc, #428]	; (800adec <goal_test+0x2cc>)
 800ac3e:	2202      	movs	r2, #2
 800ac40:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800ac42:	4b6b      	ldr	r3, [pc, #428]	; (800adf0 <goal_test+0x2d0>)
 800ac44:	2200      	movs	r2, #0
 800ac46:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800ac48:	4b6a      	ldr	r3, [pc, #424]	; (800adf4 <goal_test+0x2d4>)
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800ac4e:	4b6a      	ldr	r3, [pc, #424]	; (800adf8 <goal_test+0x2d8>)
 800ac50:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac54:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800ac56:	4b69      	ldr	r3, [pc, #420]	; (800adfc <goal_test+0x2dc>)
 800ac58:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ac5c:	801a      	strh	r2, [r3, #0]
					start_mode = 0;
 800ac5e:	4b64      	ldr	r3, [pc, #400]	; (800adf0 <goal_test+0x2d0>)
 800ac60:	2200      	movs	r2, #0
 800ac62:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800ac64:	4b66      	ldr	r3, [pc, #408]	; (800ae00 <goal_test+0x2e0>)
 800ac66:	2207      	movs	r2, #7
 800ac68:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ac6a:	4b66      	ldr	r3, [pc, #408]	; (800ae04 <goal_test+0x2e4>)
 800ac6c:	2207      	movs	r2, #7
 800ac6e:	701a      	strb	r2, [r3, #0]

					get_base();
 800ac70:	f007 f9c8 	bl	8012004 <get_base>

					searchC();
 800ac74:	f004 f9f0 	bl	800f058 <searchC>
					HAL_Delay(2000);
 800ac78:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ac7c:	f7f6 f9ce 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ac80:	4b60      	ldr	r3, [pc, #384]	; (800ae04 <goal_test+0x2e4>)
 800ac82:	2200      	movs	r2, #0
 800ac84:	701a      	strb	r2, [r3, #0]
 800ac86:	4b5f      	ldr	r3, [pc, #380]	; (800ae04 <goal_test+0x2e4>)
 800ac88:	781a      	ldrb	r2, [r3, #0]
 800ac8a:	4b5d      	ldr	r3, [pc, #372]	; (800ae00 <goal_test+0x2e0>)
 800ac8c:	701a      	strb	r2, [r3, #0]
					searchC();
 800ac8e:	f004 f9e3 	bl	800f058 <searchC>

					goal_x = GOAL_X;
 800ac92:	4b5b      	ldr	r3, [pc, #364]	; (800ae00 <goal_test+0x2e0>)
 800ac94:	2207      	movs	r2, #7
 800ac96:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ac98:	4b5a      	ldr	r3, [pc, #360]	; (800ae04 <goal_test+0x2e4>)
 800ac9a:	2207      	movs	r2, #7
 800ac9c:	701a      	strb	r2, [r3, #0]
					break;
 800ac9e:	e204      	b.n	800b0aa <goal_test+0x58a>
				case 1:
					//----a一次探索スラローム走行 4マスgoal----
					printf("First Run. (4 goal)\n");
 800aca0:	4859      	ldr	r0, [pc, #356]	; (800ae08 <goal_test+0x2e8>)
 800aca2:	f008 f92f 	bl	8012f04 <puts>

					MF.FLAG.SCND = 0;
 800aca6:	4a50      	ldr	r2, [pc, #320]	; (800ade8 <goal_test+0x2c8>)
 800aca8:	8813      	ldrh	r3, [r2, #0]
 800acaa:	f36f 1345 	bfc	r3, #5, #1
 800acae:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800acb0:	4a4d      	ldr	r2, [pc, #308]	; (800ade8 <goal_test+0x2c8>)
 800acb2:	8813      	ldrh	r3, [r2, #0]
 800acb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800acb8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800acba:	4a4b      	ldr	r2, [pc, #300]	; (800ade8 <goal_test+0x2c8>)
 800acbc:	8813      	ldrh	r3, [r2, #0]
 800acbe:	f36f 238a 	bfc	r3, #10, #1
 800acc2:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800acc4:	4b49      	ldr	r3, [pc, #292]	; (800adec <goal_test+0x2cc>)
 800acc6:	2202      	movs	r2, #2
 800acc8:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800acca:	4b49      	ldr	r3, [pc, #292]	; (800adf0 <goal_test+0x2d0>)
 800accc:	2200      	movs	r2, #0
 800acce:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800acd0:	4b48      	ldr	r3, [pc, #288]	; (800adf4 <goal_test+0x2d4>)
 800acd2:	2202      	movs	r2, #2
 800acd4:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800acd6:	4b48      	ldr	r3, [pc, #288]	; (800adf8 <goal_test+0x2d8>)
 800acd8:	f241 3288 	movw	r2, #5000	; 0x1388
 800acdc:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800acde:	4b47      	ldr	r3, [pc, #284]	; (800adfc <goal_test+0x2dc>)
 800ace0:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ace4:	801a      	strh	r2, [r3, #0]
					start_mode = 0;
 800ace6:	4b42      	ldr	r3, [pc, #264]	; (800adf0 <goal_test+0x2d0>)
 800ace8:	2200      	movs	r2, #0
 800acea:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800acec:	4b44      	ldr	r3, [pc, #272]	; (800ae00 <goal_test+0x2e0>)
 800acee:	2207      	movs	r2, #7
 800acf0:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800acf2:	4b44      	ldr	r3, [pc, #272]	; (800ae04 <goal_test+0x2e4>)
 800acf4:	2207      	movs	r2, #7
 800acf6:	701a      	strb	r2, [r3, #0]

					get_base();
 800acf8:	f007 f984 	bl	8012004 <get_base>

					searchC();
 800acfc:	f004 f9ac 	bl	800f058 <searchC>
					HAL_Delay(2000);
 800ad00:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ad04:	f7f6 f98a 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ad08:	4b3e      	ldr	r3, [pc, #248]	; (800ae04 <goal_test+0x2e4>)
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	701a      	strb	r2, [r3, #0]
 800ad0e:	4b3d      	ldr	r3, [pc, #244]	; (800ae04 <goal_test+0x2e4>)
 800ad10:	781a      	ldrb	r2, [r3, #0]
 800ad12:	4b3b      	ldr	r3, [pc, #236]	; (800ae00 <goal_test+0x2e0>)
 800ad14:	701a      	strb	r2, [r3, #0]
					searchC();
 800ad16:	f004 f99f 	bl	800f058 <searchC>
					while(dist_l < 30);
 800ad1a:	bf00      	nop
 800ad1c:	4b2f      	ldr	r3, [pc, #188]	; (800addc <goal_test+0x2bc>)
 800ad1e:	edd3 7a00 	vldr	s15, [r3]
 800ad22:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800ad26:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ad2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad2e:	d4f5      	bmi.n	800ad1c <goal_test+0x1fc>
					printf("x: %d, y:%d, dir:%d\n", mouse.x, mouse.y, mouse.dir);
 800ad30:	4b36      	ldr	r3, [pc, #216]	; (800ae0c <goal_test+0x2ec>)
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	b2db      	uxtb	r3, r3
 800ad36:	4619      	mov	r1, r3
 800ad38:	4b34      	ldr	r3, [pc, #208]	; (800ae0c <goal_test+0x2ec>)
 800ad3a:	785b      	ldrb	r3, [r3, #1]
 800ad3c:	b2db      	uxtb	r3, r3
 800ad3e:	461a      	mov	r2, r3
 800ad40:	4b32      	ldr	r3, [pc, #200]	; (800ae0c <goal_test+0x2ec>)
 800ad42:	789b      	ldrb	r3, [r3, #2]
 800ad44:	b2db      	uxtb	r3, r3
 800ad46:	4832      	ldr	r0, [pc, #200]	; (800ae10 <goal_test+0x2f0>)
 800ad48:	f008 f868 	bl	8012e1c <iprintf>

					break;
 800ad4c:	e1ad      	b.n	800b0aa <goal_test+0x58a>
				case 2:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース Middle Speed----
					printf("pass press 3-2.\n");
 800ad4e:	4831      	ldr	r0, [pc, #196]	; (800ae14 <goal_test+0x2f4>)
 800ad50:	f008 f8d8 	bl	8012f04 <puts>
					MF.FLAG.SCND = 1;
 800ad54:	4a24      	ldr	r2, [pc, #144]	; (800ade8 <goal_test+0x2c8>)
 800ad56:	8813      	ldrh	r3, [r2, #0]
 800ad58:	f043 0320 	orr.w	r3, r3, #32
 800ad5c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ad5e:	4a22      	ldr	r2, [pc, #136]	; (800ade8 <goal_test+0x2c8>)
 800ad60:	8813      	ldrh	r3, [r2, #0]
 800ad62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ad66:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800ad68:	4a1f      	ldr	r2, [pc, #124]	; (800ade8 <goal_test+0x2c8>)
 800ad6a:	8813      	ldrh	r3, [r2, #0]
 800ad6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ad70:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800ad72:	4b1e      	ldr	r3, [pc, #120]	; (800adec <goal_test+0x2cc>)
 800ad74:	2202      	movs	r2, #2
 800ad76:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800ad78:	4b1d      	ldr	r3, [pc, #116]	; (800adf0 <goal_test+0x2d0>)
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800ad7e:	4b1d      	ldr	r3, [pc, #116]	; (800adf4 <goal_test+0x2d4>)
 800ad80:	2201      	movs	r2, #1
 800ad82:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800ad84:	4b1c      	ldr	r3, [pc, #112]	; (800adf8 <goal_test+0x2d8>)
 800ad86:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad8a:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800ad8c:	4b1b      	ldr	r3, [pc, #108]	; (800adfc <goal_test+0x2dc>)
 800ad8e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800ad92:	801a      	strh	r2, [r3, #0]

//					pass_mode = 3;						//a半区画ベースでroute配列生成

					goal_x = GOAL_X;
 800ad94:	4b1a      	ldr	r3, [pc, #104]	; (800ae00 <goal_test+0x2e0>)
 800ad96:	2207      	movs	r2, #7
 800ad98:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ad9a:	4b1a      	ldr	r3, [pc, #104]	; (800ae04 <goal_test+0x2e4>)
 800ad9c:	2207      	movs	r2, #7
 800ad9e:	701a      	strb	r2, [r3, #0]

					get_base();
 800ada0:	f007 f930 	bl	8012004 <get_base>

					searchF3();
 800ada4:	f004 fdd2 	bl	800f94c <searchF3>
					HAL_Delay(2000);
 800ada8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800adac:	f7f6 f936 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800adb0:	4b14      	ldr	r3, [pc, #80]	; (800ae04 <goal_test+0x2e4>)
 800adb2:	2200      	movs	r2, #0
 800adb4:	701a      	strb	r2, [r3, #0]
 800adb6:	4b13      	ldr	r3, [pc, #76]	; (800ae04 <goal_test+0x2e4>)
 800adb8:	781a      	ldrb	r2, [r3, #0]
 800adba:	4b11      	ldr	r3, [pc, #68]	; (800ae00 <goal_test+0x2e0>)
 800adbc:	701a      	strb	r2, [r3, #0]
					searchF3();
 800adbe:	f004 fdc5 	bl	800f94c <searchF3>

					goal_x = GOAL_X;
 800adc2:	4b0f      	ldr	r3, [pc, #60]	; (800ae00 <goal_test+0x2e0>)
 800adc4:	2207      	movs	r2, #7
 800adc6:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800adc8:	4b0e      	ldr	r3, [pc, #56]	; (800ae04 <goal_test+0x2e4>)
 800adca:	2207      	movs	r2, #7
 800adcc:	701a      	strb	r2, [r3, #0]
					break;
 800adce:	e16c      	b.n	800b0aa <goal_test+0x58a>
 800add0:	0801427c 	.word	0x0801427c
 800add4:	20000b2c 	.word	0x20000b2c
 800add8:	08014058 	.word	0x08014058
 800addc:	20001648 	.word	0x20001648
 800ade0:	20000fa4 	.word	0x20000fa4
 800ade4:	08014238 	.word	0x08014238
 800ade8:	20000fa8 	.word	0x20000fa8
 800adec:	20000456 	.word	0x20000456
 800adf0:	2000164c 	.word	0x2000164c
 800adf4:	20000c31 	.word	0x20000c31
 800adf8:	20000454 	.word	0x20000454
 800adfc:	20000ffc 	.word	0x20000ffc
 800ae00:	20000c30 	.word	0x20000c30
 800ae04:	20000b8c 	.word	0x20000b8c
 800ae08:	08014298 	.word	0x08014298
 800ae0c:	20000c8c 	.word	0x20000c8c
 800ae10:	080142ac 	.word	0x080142ac
 800ae14:	0801424c 	.word	0x0801424c
				case 3:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース Middle Speed 4マスgoal----
					printf("pass press 3-2.\n");
 800ae18:	48a6      	ldr	r0, [pc, #664]	; (800b0b4 <goal_test+0x594>)
 800ae1a:	f008 f873 	bl	8012f04 <puts>
					MF.FLAG.SCND = 1;
 800ae1e:	4aa6      	ldr	r2, [pc, #664]	; (800b0b8 <goal_test+0x598>)
 800ae20:	8813      	ldrh	r3, [r2, #0]
 800ae22:	f043 0320 	orr.w	r3, r3, #32
 800ae26:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ae28:	4aa3      	ldr	r2, [pc, #652]	; (800b0b8 <goal_test+0x598>)
 800ae2a:	8813      	ldrh	r3, [r2, #0]
 800ae2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ae30:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800ae32:	4aa1      	ldr	r2, [pc, #644]	; (800b0b8 <goal_test+0x598>)
 800ae34:	8813      	ldrh	r3, [r2, #0]
 800ae36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ae3a:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800ae3c:	4b9f      	ldr	r3, [pc, #636]	; (800b0bc <goal_test+0x59c>)
 800ae3e:	2202      	movs	r2, #2
 800ae40:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800ae42:	4b9f      	ldr	r3, [pc, #636]	; (800b0c0 <goal_test+0x5a0>)
 800ae44:	2200      	movs	r2, #0
 800ae46:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800ae48:	4b9e      	ldr	r3, [pc, #632]	; (800b0c4 <goal_test+0x5a4>)
 800ae4a:	2202      	movs	r2, #2
 800ae4c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800ae4e:	4b9e      	ldr	r3, [pc, #632]	; (800b0c8 <goal_test+0x5a8>)
 800ae50:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae54:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800ae56:	4b9d      	ldr	r3, [pc, #628]	; (800b0cc <goal_test+0x5ac>)
 800ae58:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800ae5c:	801a      	strh	r2, [r3, #0]

//					pass_mode = 3;						//a半区画ベースでroute配列生成

					goal_x = GOAL_X;
 800ae5e:	4b9c      	ldr	r3, [pc, #624]	; (800b0d0 <goal_test+0x5b0>)
 800ae60:	2207      	movs	r2, #7
 800ae62:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ae64:	4b9b      	ldr	r3, [pc, #620]	; (800b0d4 <goal_test+0x5b4>)
 800ae66:	2207      	movs	r2, #7
 800ae68:	701a      	strb	r2, [r3, #0]

					get_base();
 800ae6a:	f007 f8cb 	bl	8012004 <get_base>

					searchF3();
 800ae6e:	f004 fd6d 	bl	800f94c <searchF3>
					HAL_Delay(2000);
 800ae72:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ae76:	f7f6 f8d1 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ae7a:	4b96      	ldr	r3, [pc, #600]	; (800b0d4 <goal_test+0x5b4>)
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	701a      	strb	r2, [r3, #0]
 800ae80:	4b94      	ldr	r3, [pc, #592]	; (800b0d4 <goal_test+0x5b4>)
 800ae82:	781a      	ldrb	r2, [r3, #0]
 800ae84:	4b92      	ldr	r3, [pc, #584]	; (800b0d0 <goal_test+0x5b0>)
 800ae86:	701a      	strb	r2, [r3, #0]
					searchF3();
 800ae88:	f004 fd60 	bl	800f94c <searchF3>

					goal_x = GOAL_X;
 800ae8c:	4b90      	ldr	r3, [pc, #576]	; (800b0d0 <goal_test+0x5b0>)
 800ae8e:	2207      	movs	r2, #7
 800ae90:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ae92:	4b90      	ldr	r3, [pc, #576]	; (800b0d4 <goal_test+0x5b4>)
 800ae94:	2207      	movs	r2, #7
 800ae96:	701a      	strb	r2, [r3, #0]
					break;
 800ae98:	e107      	b.n	800b0aa <goal_test+0x58a>
				case 4:
					//----a直線と大回り圧縮と斜め Middle Speedｰｰｰｰ
					printf("pass press 4.\n");
 800ae9a:	488f      	ldr	r0, [pc, #572]	; (800b0d8 <goal_test+0x5b8>)
 800ae9c:	f008 f832 	bl	8012f04 <puts>
					MF.FLAG.SCND = 1;
 800aea0:	4a85      	ldr	r2, [pc, #532]	; (800b0b8 <goal_test+0x598>)
 800aea2:	8813      	ldrh	r3, [r2, #0]
 800aea4:	f043 0320 	orr.w	r3, r3, #32
 800aea8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800aeaa:	4a83      	ldr	r2, [pc, #524]	; (800b0b8 <goal_test+0x598>)
 800aeac:	8813      	ldrh	r3, [r2, #0]
 800aeae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aeb2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800aeb4:	4a80      	ldr	r2, [pc, #512]	; (800b0b8 <goal_test+0x598>)
 800aeb6:	8813      	ldrh	r3, [r2, #0]
 800aeb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800aebc:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800aebe:	4b7f      	ldr	r3, [pc, #508]	; (800b0bc <goal_test+0x59c>)
 800aec0:	2202      	movs	r2, #2
 800aec2:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800aec4:	4b7e      	ldr	r3, [pc, #504]	; (800b0c0 <goal_test+0x5a0>)
 800aec6:	2200      	movs	r2, #0
 800aec8:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800aeca:	4b7e      	ldr	r3, [pc, #504]	; (800b0c4 <goal_test+0x5a4>)
 800aecc:	2201      	movs	r2, #1
 800aece:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800aed0:	4b7d      	ldr	r3, [pc, #500]	; (800b0c8 <goal_test+0x5a8>)
 800aed2:	f241 3288 	movw	r2, #5000	; 0x1388
 800aed6:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800aed8:	4b7c      	ldr	r3, [pc, #496]	; (800b0cc <goal_test+0x5ac>)
 800aeda:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800aede:	801a      	strh	r2, [r3, #0]

//					pass_mode = 4;

					goal_x = GOAL_X;
 800aee0:	4b7b      	ldr	r3, [pc, #492]	; (800b0d0 <goal_test+0x5b0>)
 800aee2:	2207      	movs	r2, #7
 800aee4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800aee6:	4b7b      	ldr	r3, [pc, #492]	; (800b0d4 <goal_test+0x5b4>)
 800aee8:	2207      	movs	r2, #7
 800aeea:	701a      	strb	r2, [r3, #0]

					get_base();
 800aeec:	f007 f88a 	bl	8012004 <get_base>

					searchF4();
 800aef0:	f004 fe08 	bl	800fb04 <searchF4>
					HAL_Delay(2000);
 800aef4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800aef8:	f7f6 f890 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800aefc:	4b75      	ldr	r3, [pc, #468]	; (800b0d4 <goal_test+0x5b4>)
 800aefe:	2200      	movs	r2, #0
 800af00:	701a      	strb	r2, [r3, #0]
 800af02:	4b74      	ldr	r3, [pc, #464]	; (800b0d4 <goal_test+0x5b4>)
 800af04:	781a      	ldrb	r2, [r3, #0]
 800af06:	4b72      	ldr	r3, [pc, #456]	; (800b0d0 <goal_test+0x5b0>)
 800af08:	701a      	strb	r2, [r3, #0]
					searchF4();
 800af0a:	f004 fdfb 	bl	800fb04 <searchF4>
					break;
 800af0e:	e0cc      	b.n	800b0aa <goal_test+0x58a>
				case 5:
					//----a直線と大回り圧縮と斜め Middle Speed 4マスgoalｰｰｰｰ
					printf("pass press 4.\n");
 800af10:	4871      	ldr	r0, [pc, #452]	; (800b0d8 <goal_test+0x5b8>)
 800af12:	f007 fff7 	bl	8012f04 <puts>
					MF.FLAG.SCND = 1;
 800af16:	4a68      	ldr	r2, [pc, #416]	; (800b0b8 <goal_test+0x598>)
 800af18:	8813      	ldrh	r3, [r2, #0]
 800af1a:	f043 0320 	orr.w	r3, r3, #32
 800af1e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800af20:	4a65      	ldr	r2, [pc, #404]	; (800b0b8 <goal_test+0x598>)
 800af22:	8813      	ldrh	r3, [r2, #0]
 800af24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800af28:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800af2a:	4a63      	ldr	r2, [pc, #396]	; (800b0b8 <goal_test+0x598>)
 800af2c:	8813      	ldrh	r3, [r2, #0]
 800af2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800af32:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800af34:	4b61      	ldr	r3, [pc, #388]	; (800b0bc <goal_test+0x59c>)
 800af36:	2202      	movs	r2, #2
 800af38:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800af3a:	4b61      	ldr	r3, [pc, #388]	; (800b0c0 <goal_test+0x5a0>)
 800af3c:	2200      	movs	r2, #0
 800af3e:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800af40:	4b60      	ldr	r3, [pc, #384]	; (800b0c4 <goal_test+0x5a4>)
 800af42:	2202      	movs	r2, #2
 800af44:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800af46:	4b60      	ldr	r3, [pc, #384]	; (800b0c8 <goal_test+0x5a8>)
 800af48:	f241 3288 	movw	r2, #5000	; 0x1388
 800af4c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800af4e:	4b5f      	ldr	r3, [pc, #380]	; (800b0cc <goal_test+0x5ac>)
 800af50:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800af54:	801a      	strh	r2, [r3, #0]

//					pass_mode = 4;

					goal_x = GOAL_X;
 800af56:	4b5e      	ldr	r3, [pc, #376]	; (800b0d0 <goal_test+0x5b0>)
 800af58:	2207      	movs	r2, #7
 800af5a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800af5c:	4b5d      	ldr	r3, [pc, #372]	; (800b0d4 <goal_test+0x5b4>)
 800af5e:	2207      	movs	r2, #7
 800af60:	701a      	strb	r2, [r3, #0]

					get_base();
 800af62:	f007 f84f 	bl	8012004 <get_base>

					searchF4();
 800af66:	f004 fdcd 	bl	800fb04 <searchF4>
					HAL_Delay(2000);
 800af6a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800af6e:	f7f6 f855 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800af72:	4b58      	ldr	r3, [pc, #352]	; (800b0d4 <goal_test+0x5b4>)
 800af74:	2200      	movs	r2, #0
 800af76:	701a      	strb	r2, [r3, #0]
 800af78:	4b56      	ldr	r3, [pc, #344]	; (800b0d4 <goal_test+0x5b4>)
 800af7a:	781a      	ldrb	r2, [r3, #0]
 800af7c:	4b54      	ldr	r3, [pc, #336]	; (800b0d0 <goal_test+0x5b0>)
 800af7e:	701a      	strb	r2, [r3, #0]
					searchF4();
 800af80:	f004 fdc0 	bl	800fb04 <searchF4>

					goal_x = GOAL_X;
 800af84:	4b52      	ldr	r3, [pc, #328]	; (800b0d0 <goal_test+0x5b0>)
 800af86:	2207      	movs	r2, #7
 800af88:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800af8a:	4b52      	ldr	r3, [pc, #328]	; (800b0d4 <goal_test+0x5b4>)
 800af8c:	2207      	movs	r2, #7
 800af8e:	701a      	strb	r2, [r3, #0]
					break;
 800af90:	e08b      	b.n	800b0aa <goal_test+0x58a>
				case 6:
					//----a一次探索スラローム走行　重ね探索----
					printf("First Run. (Slalom)\n");
 800af92:	4852      	ldr	r0, [pc, #328]	; (800b0dc <goal_test+0x5bc>)
 800af94:	f007 ffb6 	bl	8012f04 <puts>

					MF.FLAG.SCND = 0;
 800af98:	4a47      	ldr	r2, [pc, #284]	; (800b0b8 <goal_test+0x598>)
 800af9a:	8813      	ldrh	r3, [r2, #0]
 800af9c:	f36f 1345 	bfc	r3, #5, #1
 800afa0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.SRC2 = 1;
 800afa2:	4a45      	ldr	r2, [pc, #276]	; (800b0b8 <goal_test+0x598>)
 800afa4:	8813      	ldrh	r3, [r2, #0]
 800afa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afaa:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800afac:	4a42      	ldr	r2, [pc, #264]	; (800b0b8 <goal_test+0x598>)
 800afae:	8813      	ldrh	r3, [r2, #0]
 800afb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800afb4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800afb6:	4a40      	ldr	r2, [pc, #256]	; (800b0b8 <goal_test+0x598>)
 800afb8:	8813      	ldrh	r3, [r2, #0]
 800afba:	f36f 238a 	bfc	r3, #10, #1
 800afbe:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800afc0:	4b3e      	ldr	r3, [pc, #248]	; (800b0bc <goal_test+0x59c>)
 800afc2:	2202      	movs	r2, #2
 800afc4:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800afc6:	4b3e      	ldr	r3, [pc, #248]	; (800b0c0 <goal_test+0x5a0>)
 800afc8:	2200      	movs	r2, #0
 800afca:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800afcc:	4b3d      	ldr	r3, [pc, #244]	; (800b0c4 <goal_test+0x5a4>)
 800afce:	2201      	movs	r2, #1
 800afd0:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800afd2:	4b3d      	ldr	r3, [pc, #244]	; (800b0c8 <goal_test+0x5a8>)
 800afd4:	f241 3288 	movw	r2, #5000	; 0x1388
 800afd8:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800afda:	4b3c      	ldr	r3, [pc, #240]	; (800b0cc <goal_test+0x5ac>)
 800afdc:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800afe0:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800afe2:	4b3b      	ldr	r3, [pc, #236]	; (800b0d0 <goal_test+0x5b0>)
 800afe4:	2207      	movs	r2, #7
 800afe6:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800afe8:	4b3a      	ldr	r3, [pc, #232]	; (800b0d4 <goal_test+0x5b4>)
 800afea:	2207      	movs	r2, #7
 800afec:	701a      	strb	r2, [r3, #0]

					get_base();
 800afee:	f007 f809 	bl	8012004 <get_base>

					searchC2();
 800aff2:	f004 f9a3 	bl	800f33c <searchC2>
					HAL_Delay(2000);
 800aff6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800affa:	f7f6 f80f 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800affe:	4b35      	ldr	r3, [pc, #212]	; (800b0d4 <goal_test+0x5b4>)
 800b000:	2200      	movs	r2, #0
 800b002:	701a      	strb	r2, [r3, #0]
 800b004:	4b33      	ldr	r3, [pc, #204]	; (800b0d4 <goal_test+0x5b4>)
 800b006:	781a      	ldrb	r2, [r3, #0]
 800b008:	4b31      	ldr	r3, [pc, #196]	; (800b0d0 <goal_test+0x5b0>)
 800b00a:	701a      	strb	r2, [r3, #0]
					searchC();
 800b00c:	f004 f824 	bl	800f058 <searchC>

					goal_x = GOAL_X;
 800b010:	4b2f      	ldr	r3, [pc, #188]	; (800b0d0 <goal_test+0x5b0>)
 800b012:	2207      	movs	r2, #7
 800b014:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b016:	4b2f      	ldr	r3, [pc, #188]	; (800b0d4 <goal_test+0x5b4>)
 800b018:	2207      	movs	r2, #7
 800b01a:	701a      	strb	r2, [r3, #0]
					break;
 800b01c:	e045      	b.n	800b0aa <goal_test+0x58a>
				case 7:
					//----a一次探索スラローム走行　重ね探索 4マスgoal----
					printf("First Run. (Slalom)\n");
 800b01e:	482f      	ldr	r0, [pc, #188]	; (800b0dc <goal_test+0x5bc>)
 800b020:	f007 ff70 	bl	8012f04 <puts>

					MF.FLAG.SCND = 0;
 800b024:	4a24      	ldr	r2, [pc, #144]	; (800b0b8 <goal_test+0x598>)
 800b026:	8813      	ldrh	r3, [r2, #0]
 800b028:	f36f 1345 	bfc	r3, #5, #1
 800b02c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.SRC2 = 1;
 800b02e:	4a22      	ldr	r2, [pc, #136]	; (800b0b8 <goal_test+0x598>)
 800b030:	8813      	ldrh	r3, [r2, #0]
 800b032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b036:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b038:	4a1f      	ldr	r2, [pc, #124]	; (800b0b8 <goal_test+0x598>)
 800b03a:	8813      	ldrh	r3, [r2, #0]
 800b03c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b040:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800b042:	4a1d      	ldr	r2, [pc, #116]	; (800b0b8 <goal_test+0x598>)
 800b044:	8813      	ldrh	r3, [r2, #0]
 800b046:	f36f 238a 	bfc	r3, #10, #1
 800b04a:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800b04c:	4b1b      	ldr	r3, [pc, #108]	; (800b0bc <goal_test+0x59c>)
 800b04e:	2202      	movs	r2, #2
 800b050:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b052:	4b1b      	ldr	r3, [pc, #108]	; (800b0c0 <goal_test+0x5a0>)
 800b054:	2200      	movs	r2, #0
 800b056:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b058:	4b1a      	ldr	r3, [pc, #104]	; (800b0c4 <goal_test+0x5a4>)
 800b05a:	2202      	movs	r2, #2
 800b05c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b05e:	4b1a      	ldr	r3, [pc, #104]	; (800b0c8 <goal_test+0x5a8>)
 800b060:	f241 3288 	movw	r2, #5000	; 0x1388
 800b064:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800b066:	4b19      	ldr	r3, [pc, #100]	; (800b0cc <goal_test+0x5ac>)
 800b068:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b06c:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800b06e:	4b18      	ldr	r3, [pc, #96]	; (800b0d0 <goal_test+0x5b0>)
 800b070:	2207      	movs	r2, #7
 800b072:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b074:	4b17      	ldr	r3, [pc, #92]	; (800b0d4 <goal_test+0x5b4>)
 800b076:	2207      	movs	r2, #7
 800b078:	701a      	strb	r2, [r3, #0]

					get_base();
 800b07a:	f006 ffc3 	bl	8012004 <get_base>

					searchC2();
 800b07e:	f004 f95d 	bl	800f33c <searchC2>
					HAL_Delay(2000);
 800b082:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b086:	f7f5 ffc9 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b08a:	4b12      	ldr	r3, [pc, #72]	; (800b0d4 <goal_test+0x5b4>)
 800b08c:	2200      	movs	r2, #0
 800b08e:	701a      	strb	r2, [r3, #0]
 800b090:	4b10      	ldr	r3, [pc, #64]	; (800b0d4 <goal_test+0x5b4>)
 800b092:	781a      	ldrb	r2, [r3, #0]
 800b094:	4b0e      	ldr	r3, [pc, #56]	; (800b0d0 <goal_test+0x5b0>)
 800b096:	701a      	strb	r2, [r3, #0]
					searchC();
 800b098:	f003 ffde 	bl	800f058 <searchC>

					goal_x = GOAL_X;
 800b09c:	4b0c      	ldr	r3, [pc, #48]	; (800b0d0 <goal_test+0x5b0>)
 800b09e:	2207      	movs	r2, #7
 800b0a0:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b0a2:	4b0c      	ldr	r3, [pc, #48]	; (800b0d4 <goal_test+0x5b4>)
 800b0a4:	2207      	movs	r2, #7
 800b0a6:	701a      	strb	r2, [r3, #0]
					break;
 800b0a8:	bf00      	nop
			  }
			  dist_l = 0;
 800b0aa:	4b0d      	ldr	r3, [pc, #52]	; (800b0e0 <goal_test+0x5c0>)
 800b0ac:	f04f 0200 	mov.w	r2, #0
 800b0b0:	601a      	str	r2, [r3, #0]
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b0b2:	e53e      	b.n	800ab32 <goal_test+0x12>
 800b0b4:	0801424c 	.word	0x0801424c
 800b0b8:	20000fa8 	.word	0x20000fa8
 800b0bc:	20000456 	.word	0x20000456
 800b0c0:	2000164c 	.word	0x2000164c
 800b0c4:	20000c31 	.word	0x20000c31
 800b0c8:	20000454 	.word	0x20000454
 800b0cc:	20000ffc 	.word	0x20000ffc
 800b0d0:	20000c30 	.word	0x20000c30
 800b0d4:	20000b8c 	.word	0x20000b8c
 800b0d8:	0801425c 	.word	0x0801425c
 800b0dc:	08014238 	.word	0x08014238
 800b0e0:	20001648 	.word	0x20001648

0800b0e4 <sample_course_run>:
//sample_course_run
//a試験走行モード
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sample_course_run(void){
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	af00      	add	r7, sp, #0

	int mode = 0;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	607b      	str	r3, [r7, #4]
	printf("Sample Course Run, Mode : %d\n", mode);
 800b0ee:	6879      	ldr	r1, [r7, #4]
 800b0f0:	489a      	ldr	r0, [pc, #616]	; (800b35c <sample_course_run+0x278>)
 800b0f2:	f007 fe93 	bl	8012e1c <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	f003 0301 	and.w	r3, r3, #1
 800b0fe:	b2d8      	uxtb	r0, r3
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	b2db      	uxtb	r3, r3
 800b104:	f003 0302 	and.w	r3, r3, #2
 800b108:	b2d9      	uxtb	r1, r3
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	f003 0304 	and.w	r3, r3, #4
 800b112:	b2db      	uxtb	r3, r3
 800b114:	461a      	mov	r2, r3
 800b116:	f006 ffcd 	bl	80120b4 <led_write>
		  if(dist_r >= 20){
 800b11a:	4b91      	ldr	r3, [pc, #580]	; (800b360 <sample_course_run+0x27c>)
 800b11c:	edd3 7a00 	vldr	s15, [r3]
 800b120:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800b124:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b12c:	db0f      	blt.n	800b14e <sample_course_run+0x6a>
			  mode++;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	3301      	adds	r3, #1
 800b132:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800b134:	4b8a      	ldr	r3, [pc, #552]	; (800b360 <sample_course_run+0x27c>)
 800b136:	f04f 0200 	mov.w	r2, #0
 800b13a:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2b07      	cmp	r3, #7
 800b140:	dd01      	ble.n	800b146 <sample_course_run+0x62>
				  mode = 0;
 800b142:	2300      	movs	r3, #0
 800b144:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800b146:	6879      	ldr	r1, [r7, #4]
 800b148:	4886      	ldr	r0, [pc, #536]	; (800b364 <sample_course_run+0x280>)
 800b14a:	f007 fe67 	bl	8012e1c <iprintf>
		  }
		  if(dist_r <= -20){
 800b14e:	4b84      	ldr	r3, [pc, #528]	; (800b360 <sample_course_run+0x27c>)
 800b150:	edd3 7a00 	vldr	s15, [r3]
 800b154:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800b158:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b15c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b160:	d80f      	bhi.n	800b182 <sample_course_run+0x9e>
			  mode--;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	3b01      	subs	r3, #1
 800b166:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800b168:	4b7d      	ldr	r3, [pc, #500]	; (800b360 <sample_course_run+0x27c>)
 800b16a:	f04f 0200 	mov.w	r2, #0
 800b16e:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2b00      	cmp	r3, #0
 800b174:	da01      	bge.n	800b17a <sample_course_run+0x96>
				  mode = 7;
 800b176:	2307      	movs	r3, #7
 800b178:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800b17a:	6879      	ldr	r1, [r7, #4]
 800b17c:	4879      	ldr	r0, [pc, #484]	; (800b364 <sample_course_run+0x280>)
 800b17e:	f007 fe4d 	bl	8012e1c <iprintf>
		  }
		  if(dist_l <= -20){
 800b182:	4b79      	ldr	r3, [pc, #484]	; (800b368 <sample_course_run+0x284>)
 800b184:	edd3 7a00 	vldr	s15, [r3]
 800b188:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800b18c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b194:	f200 80e1 	bhi.w	800b35a <sample_course_run+0x276>
			  dist_l = 0;
 800b198:	4b73      	ldr	r3, [pc, #460]	; (800b368 <sample_course_run+0x284>)
 800b19a:	f04f 0200 	mov.w	r2, #0
 800b19e:	601a      	str	r2, [r3, #0]
			  drive_ready();
 800b1a0:	f7f9 fd64 	bl	8004c6c <drive_ready>

			  switch(mode){
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2b07      	cmp	r3, #7
 800b1a8:	f200 80d3 	bhi.w	800b352 <sample_course_run+0x26e>
 800b1ac:	a201      	add	r2, pc, #4	; (adr r2, 800b1b4 <sample_course_run+0xd0>)
 800b1ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1b2:	bf00      	nop
 800b1b4:	0800b1d5 	.word	0x0800b1d5
 800b1b8:	0800b1db 	.word	0x0800b1db
 800b1bc:	0800b229 	.word	0x0800b229
 800b1c0:	0800b24d 	.word	0x0800b24d
 800b1c4:	0800b353 	.word	0x0800b353
 800b1c8:	0800b25f 	.word	0x0800b25f
 800b1cc:	0800b2d9 	.word	0x0800b2d9
 800b1d0:	0800b353 	.word	0x0800b353
				case 0:
					get_base();
 800b1d4:	f006 ff16 	bl	8012004 <get_base>
					break;
 800b1d8:	e0bb      	b.n	800b352 <sample_course_run+0x26e>

				case 1:
					//----aサンプルコース1　爆速ターン連続----
					run_mode = 5;
 800b1da:	4b64      	ldr	r3, [pc, #400]	; (800b36c <sample_course_run+0x288>)
 800b1dc:	2205      	movs	r2, #5
 800b1de:	701a      	strb	r2, [r3, #0]

					half_sectionA();
 800b1e0:	f7fa fd44 	bl	8005c6c <half_sectionA>
					slalom_R90();
 800b1e4:	f7fb fbd0 	bl	8006988 <slalom_R90>
					slalom_L90();
 800b1e8:	f7fb fd30 	bl	8006c4c <slalom_L90>
					slalom_L90();
 800b1ec:	f7fb fd2e 	bl	8006c4c <slalom_L90>
					slalom_R90();
 800b1f0:	f7fb fbca 	bl	8006988 <slalom_R90>
					slalom_R90();
 800b1f4:	f7fb fbc8 	bl	8006988 <slalom_R90>
					for(int k=0; k<5; k++){
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	603b      	str	r3, [r7, #0]
 800b1fc:	e00e      	b.n	800b21c <sample_course_run+0x138>
						slalom_R90();
 800b1fe:	f7fb fbc3 	bl	8006988 <slalom_R90>
						slalom_R90();
 800b202:	f7fb fbc1 	bl	8006988 <slalom_R90>
						slalom_L90();
 800b206:	f7fb fd21 	bl	8006c4c <slalom_L90>
						slalom_L90();
 800b20a:	f7fb fd1f 	bl	8006c4c <slalom_L90>
						slalom_R90();
 800b20e:	f7fb fbbb 	bl	8006988 <slalom_R90>
						slalom_R90();
 800b212:	f7fb fbb9 	bl	8006988 <slalom_R90>
					for(int k=0; k<5; k++){
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	3301      	adds	r3, #1
 800b21a:	603b      	str	r3, [r7, #0]
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	2b04      	cmp	r3, #4
 800b220:	dded      	ble.n	800b1fe <sample_course_run+0x11a>
					}
					half_sectionD();
 800b222:	f7fa fd89 	bl	8005d38 <half_sectionD>
					break;
 800b226:	e094      	b.n	800b352 <sample_course_run+0x26e>

				case 2:
					//----aサンプルコース1　超信地----
					run_mode = 5;
 800b228:	4b50      	ldr	r3, [pc, #320]	; (800b36c <sample_course_run+0x288>)
 800b22a:	2205      	movs	r2, #5
 800b22c:	701a      	strb	r2, [r3, #0]

					half_sectionA();
 800b22e:	f7fa fd1d 	bl	8005c6c <half_sectionA>
					slalom_R90();
 800b232:	f7fb fba9 	bl	8006988 <slalom_R90>
					slalom_L90();
 800b236:	f7fb fd09 	bl	8006c4c <slalom_L90>
					slalom_R90();
 800b23a:	f7fb fba5 	bl	8006988 <slalom_R90>
					slalom_L90();
 800b23e:	f7fb fd05 	bl	8006c4c <slalom_L90>
					slalom_R90();
 800b242:	f7fb fba1 	bl	8006988 <slalom_R90>
					half_sectionD();
 800b246:	f7fa fd77 	bl	8005d38 <half_sectionD>
					break;
 800b24a:	e082      	b.n	800b352 <sample_course_run+0x26e>

				case 3:
					//---aサンプルコース2　スラローム----
					half_sectionA();
 800b24c:	f7fa fd0e 	bl	8005c6c <half_sectionA>
					slalom_R90();
 800b250:	f7fb fb9a 	bl	8006988 <slalom_R90>
					slalom_R90();
 800b254:	f7fb fb98 	bl	8006988 <slalom_R90>
					half_sectionD();
 800b258:	f7fa fd6e 	bl	8005d38 <half_sectionD>
					break;
 800b25c:	e079      	b.n	800b352 <sample_course_run+0x26e>
				case 4:
					break;

				case 5:
					//----aスラローム走行&全面探索スラローム走行----
					printf("Slalom Run & All Map Run.\n");
 800b25e:	4844      	ldr	r0, [pc, #272]	; (800b370 <sample_course_run+0x28c>)
 800b260:	f007 fe50 	bl	8012f04 <puts>

					MF.FLAG.SCND = 0;
 800b264:	4a43      	ldr	r2, [pc, #268]	; (800b374 <sample_course_run+0x290>)
 800b266:	8813      	ldrh	r3, [r2, #0]
 800b268:	f36f 1345 	bfc	r3, #5, #1
 800b26c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b26e:	4a41      	ldr	r2, [pc, #260]	; (800b374 <sample_course_run+0x290>)
 800b270:	8813      	ldrh	r3, [r2, #0]
 800b272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b276:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b278:	4a3e      	ldr	r2, [pc, #248]	; (800b374 <sample_course_run+0x290>)
 800b27a:	8813      	ldrh	r3, [r2, #0]
 800b27c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b280:	8013      	strh	r3, [r2, #0]
					start_mode = 0;
 800b282:	4b3d      	ldr	r3, [pc, #244]	; (800b378 <sample_course_run+0x294>)
 800b284:	2200      	movs	r2, #0
 800b286:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b288:	4b3c      	ldr	r3, [pc, #240]	; (800b37c <sample_course_run+0x298>)
 800b28a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b28e:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800b290:	4b3b      	ldr	r3, [pc, #236]	; (800b380 <sample_course_run+0x29c>)
 800b292:	f44f 7248 	mov.w	r2, #800	; 0x320
 800b296:	801a      	strh	r2, [r3, #0]

					goal_x = GOAL_X;
 800b298:	4b3a      	ldr	r3, [pc, #232]	; (800b384 <sample_course_run+0x2a0>)
 800b29a:	2207      	movs	r2, #7
 800b29c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b29e:	4b3a      	ldr	r3, [pc, #232]	; (800b388 <sample_course_run+0x2a4>)
 800b2a0:	2207      	movs	r2, #7
 800b2a2:	701a      	strb	r2, [r3, #0]

					get_base();
 800b2a4:	f006 feae 	bl	8012004 <get_base>

					searchC();
 800b2a8:	f003 fed6 	bl	800f058 <searchC>
					HAL_Delay(2000);
 800b2ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b2b0:	f7f5 feb4 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b2b4:	4b34      	ldr	r3, [pc, #208]	; (800b388 <sample_course_run+0x2a4>)
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	701a      	strb	r2, [r3, #0]
 800b2ba:	4b33      	ldr	r3, [pc, #204]	; (800b388 <sample_course_run+0x2a4>)
 800b2bc:	781a      	ldrb	r2, [r3, #0]
 800b2be:	4b31      	ldr	r3, [pc, #196]	; (800b384 <sample_course_run+0x2a0>)
 800b2c0:	701a      	strb	r2, [r3, #0]
					searchE();
 800b2c2:	f004 fa97 	bl	800f7f4 <searchE>

					searchC();
 800b2c6:	f003 fec7 	bl	800f058 <searchC>
					goal_x = GOAL_X;
 800b2ca:	4b2e      	ldr	r3, [pc, #184]	; (800b384 <sample_course_run+0x2a0>)
 800b2cc:	2207      	movs	r2, #7
 800b2ce:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b2d0:	4b2d      	ldr	r3, [pc, #180]	; (800b388 <sample_course_run+0x2a4>)
 800b2d2:	2207      	movs	r2, #7
 800b2d4:	701a      	strb	r2, [r3, #0]

					break;
 800b2d6:	e03c      	b.n	800b352 <sample_course_run+0x26e>

				case 6:
					//----aスラローム走行&全面探索スラローム走行----
					printf("Slalom Run & All Map Run.\n");
 800b2d8:	4825      	ldr	r0, [pc, #148]	; (800b370 <sample_course_run+0x28c>)
 800b2da:	f007 fe13 	bl	8012f04 <puts>

					MF.FLAG.SCND = 0;
 800b2de:	4a25      	ldr	r2, [pc, #148]	; (800b374 <sample_course_run+0x290>)
 800b2e0:	8813      	ldrh	r3, [r2, #0]
 800b2e2:	f36f 1345 	bfc	r3, #5, #1
 800b2e6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b2e8:	4a22      	ldr	r2, [pc, #136]	; (800b374 <sample_course_run+0x290>)
 800b2ea:	8813      	ldrh	r3, [r2, #0]
 800b2ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b2f0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b2f2:	4a20      	ldr	r2, [pc, #128]	; (800b374 <sample_course_run+0x290>)
 800b2f4:	8813      	ldrh	r3, [r2, #0]
 800b2f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b2fa:	8013      	strh	r3, [r2, #0]
					start_mode = 0;
 800b2fc:	4b1e      	ldr	r3, [pc, #120]	; (800b378 <sample_course_run+0x294>)
 800b2fe:	2200      	movs	r2, #0
 800b300:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b302:	4b1e      	ldr	r3, [pc, #120]	; (800b37c <sample_course_run+0x298>)
 800b304:	f241 3288 	movw	r2, #5000	; 0x1388
 800b308:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800b30a:	4b1d      	ldr	r3, [pc, #116]	; (800b380 <sample_course_run+0x29c>)
 800b30c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800b310:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800b312:	4b1c      	ldr	r3, [pc, #112]	; (800b384 <sample_course_run+0x2a0>)
 800b314:	2207      	movs	r2, #7
 800b316:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b318:	4b1b      	ldr	r3, [pc, #108]	; (800b388 <sample_course_run+0x2a4>)
 800b31a:	2207      	movs	r2, #7
 800b31c:	701a      	strb	r2, [r3, #0]

					get_base();
 800b31e:	f006 fe71 	bl	8012004 <get_base>

					searchC();
 800b322:	f003 fe99 	bl	800f058 <searchC>
					HAL_Delay(2000);
 800b326:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b32a:	f7f5 fe77 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b32e:	4b16      	ldr	r3, [pc, #88]	; (800b388 <sample_course_run+0x2a4>)
 800b330:	2200      	movs	r2, #0
 800b332:	701a      	strb	r2, [r3, #0]
 800b334:	4b14      	ldr	r3, [pc, #80]	; (800b388 <sample_course_run+0x2a4>)
 800b336:	781a      	ldrb	r2, [r3, #0]
 800b338:	4b12      	ldr	r3, [pc, #72]	; (800b384 <sample_course_run+0x2a0>)
 800b33a:	701a      	strb	r2, [r3, #0]
					searchE();
 800b33c:	f004 fa5a 	bl	800f7f4 <searchE>

					searchC();
 800b340:	f003 fe8a 	bl	800f058 <searchC>
					goal_x = 7;
 800b344:	4b0f      	ldr	r3, [pc, #60]	; (800b384 <sample_course_run+0x2a0>)
 800b346:	2207      	movs	r2, #7
 800b348:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b34a:	4b0f      	ldr	r3, [pc, #60]	; (800b388 <sample_course_run+0x2a4>)
 800b34c:	2207      	movs	r2, #7
 800b34e:	701a      	strb	r2, [r3, #0]

					break;
 800b350:	bf00      	nop

				case 7:
					break;

			  }
			  dist_l = 0;
 800b352:	4b05      	ldr	r3, [pc, #20]	; (800b368 <sample_course_run+0x284>)
 800b354:	f04f 0200 	mov.w	r2, #0
 800b358:	601a      	str	r2, [r3, #0]
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b35a:	e6cc      	b.n	800b0f6 <sample_course_run+0x12>
 800b35c:	080142c4 	.word	0x080142c4
 800b360:	20000b2c 	.word	0x20000b2c
 800b364:	08014058 	.word	0x08014058
 800b368:	20001648 	.word	0x20001648
 800b36c:	20000456 	.word	0x20000456
 800b370:	080142e4 	.word	0x080142e4
 800b374:	20000fa8 	.word	0x20000fa8
 800b378:	2000164c 	.word	0x2000164c
 800b37c:	20000454 	.word	0x20000454
 800b380:	20000ffc 	.word	0x20000ffc
 800b384:	20000c30 	.word	0x20000c30
 800b388:	20000b8c 	.word	0x20000b8c

0800b38c <slalom_run>:
//slalom_run
// aスラローム走行モード
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_run(void){
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0

	int mode = 0;
 800b392:	2300      	movs	r3, #0
 800b394:	607b      	str	r3, [r7, #4]
	printf("Slalom Run, Mode : %d\n", mode);
 800b396:	6879      	ldr	r1, [r7, #4]
 800b398:	48a4      	ldr	r0, [pc, #656]	; (800b62c <slalom_run+0x2a0>)
 800b39a:	f007 fd3f 	bl	8012e1c <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	f003 0301 	and.w	r3, r3, #1
 800b3a6:	b2d8      	uxtb	r0, r3
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	b2db      	uxtb	r3, r3
 800b3ac:	f003 0302 	and.w	r3, r3, #2
 800b3b0:	b2d9      	uxtb	r1, r3
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	b2db      	uxtb	r3, r3
 800b3b6:	f003 0304 	and.w	r3, r3, #4
 800b3ba:	b2db      	uxtb	r3, r3
 800b3bc:	461a      	mov	r2, r3
 800b3be:	f006 fe79 	bl	80120b4 <led_write>
		  if(dist_r >= 20){
 800b3c2:	4b9b      	ldr	r3, [pc, #620]	; (800b630 <slalom_run+0x2a4>)
 800b3c4:	edd3 7a00 	vldr	s15, [r3]
 800b3c8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800b3cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b3d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3d4:	db0f      	blt.n	800b3f6 <slalom_run+0x6a>
			  mode++;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800b3dc:	4b94      	ldr	r3, [pc, #592]	; (800b630 <slalom_run+0x2a4>)
 800b3de:	f04f 0200 	mov.w	r2, #0
 800b3e2:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2b07      	cmp	r3, #7
 800b3e8:	dd01      	ble.n	800b3ee <slalom_run+0x62>
				  mode = 0;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800b3ee:	6879      	ldr	r1, [r7, #4]
 800b3f0:	4890      	ldr	r0, [pc, #576]	; (800b634 <slalom_run+0x2a8>)
 800b3f2:	f007 fd13 	bl	8012e1c <iprintf>
		  }
		  if(dist_r <= -20){
 800b3f6:	4b8e      	ldr	r3, [pc, #568]	; (800b630 <slalom_run+0x2a4>)
 800b3f8:	edd3 7a00 	vldr	s15, [r3]
 800b3fc:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800b400:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b408:	d80f      	bhi.n	800b42a <slalom_run+0x9e>
			  mode--;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	3b01      	subs	r3, #1
 800b40e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800b410:	4b87      	ldr	r3, [pc, #540]	; (800b630 <slalom_run+0x2a4>)
 800b412:	f04f 0200 	mov.w	r2, #0
 800b416:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	da01      	bge.n	800b422 <slalom_run+0x96>
				  mode = 7;
 800b41e:	2307      	movs	r3, #7
 800b420:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800b422:	6879      	ldr	r1, [r7, #4]
 800b424:	4883      	ldr	r0, [pc, #524]	; (800b634 <slalom_run+0x2a8>)
 800b426:	f007 fcf9 	bl	8012e1c <iprintf>
		  }
		  if(dist_l <= -20){
 800b42a:	4b83      	ldr	r3, [pc, #524]	; (800b638 <slalom_run+0x2ac>)
 800b42c:	edd3 7a00 	vldr	s15, [r3]
 800b430:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800b434:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b43c:	f200 8208 	bhi.w	800b850 <slalom_run+0x4c4>
			  dist_l = 0;
 800b440:	4b7d      	ldr	r3, [pc, #500]	; (800b638 <slalom_run+0x2ac>)
 800b442:	f04f 0200 	mov.w	r2, #0
 800b446:	601a      	str	r2, [r3, #0]
			  drive_ready();
 800b448:	f7f9 fc10 	bl	8004c6c <drive_ready>

			  switch(mode){
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2b07      	cmp	r3, #7
 800b450:	f200 81fa 	bhi.w	800b848 <slalom_run+0x4bc>
 800b454:	a201      	add	r2, pc, #4	; (adr r2, 800b45c <slalom_run+0xd0>)
 800b456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b45a:	bf00      	nop
 800b45c:	0800b47d 	.word	0x0800b47d
 800b460:	0800b4ef 	.word	0x0800b4ef
 800b464:	0800b547 	.word	0x0800b547
 800b468:	0800b5b9 	.word	0x0800b5b9
 800b46c:	0800b665 	.word	0x0800b665
 800b470:	0800b6d7 	.word	0x0800b6d7
 800b474:	0800b741 	.word	0x0800b741
 800b478:	0800b7c5 	.word	0x0800b7c5

			  case 0:
					//----a一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 800b47c:	486f      	ldr	r0, [pc, #444]	; (800b63c <slalom_run+0x2b0>)
 800b47e:	f007 fd41 	bl	8012f04 <puts>

					MF.FLAG.SCND = 0;
 800b482:	4a6f      	ldr	r2, [pc, #444]	; (800b640 <slalom_run+0x2b4>)
 800b484:	8813      	ldrh	r3, [r2, #0]
 800b486:	f36f 1345 	bfc	r3, #5, #1
 800b48a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 800b48c:	4a6c      	ldr	r2, [pc, #432]	; (800b640 <slalom_run+0x2b4>)
 800b48e:	8813      	ldrh	r3, [r2, #0]
 800b490:	f36f 2349 	bfc	r3, #9, #1
 800b494:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800b496:	4b6b      	ldr	r3, [pc, #428]	; (800b644 <slalom_run+0x2b8>)
 800b498:	2202      	movs	r2, #2
 800b49a:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b49c:	4b6a      	ldr	r3, [pc, #424]	; (800b648 <slalom_run+0x2bc>)
 800b49e:	2200      	movs	r2, #0
 800b4a0:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b4a2:	4b6a      	ldr	r3, [pc, #424]	; (800b64c <slalom_run+0x2c0>)
 800b4a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4a8:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800b4aa:	4b69      	ldr	r3, [pc, #420]	; (800b650 <slalom_run+0x2c4>)
 800b4ac:	f44f 7248 	mov.w	r2, #800	; 0x320
 800b4b0:	801a      	strh	r2, [r3, #0]


					goal_x = GOAL_X;
 800b4b2:	4b68      	ldr	r3, [pc, #416]	; (800b654 <slalom_run+0x2c8>)
 800b4b4:	2207      	movs	r2, #7
 800b4b6:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b4b8:	4b67      	ldr	r3, [pc, #412]	; (800b658 <slalom_run+0x2cc>)
 800b4ba:	2207      	movs	r2, #7
 800b4bc:	701a      	strb	r2, [r3, #0]

					get_base();
 800b4be:	f006 fda1 	bl	8012004 <get_base>

					searchC();
 800b4c2:	f003 fdc9 	bl	800f058 <searchC>
					HAL_Delay(2000);
 800b4c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b4ca:	f7f5 fda7 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b4ce:	4b62      	ldr	r3, [pc, #392]	; (800b658 <slalom_run+0x2cc>)
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	701a      	strb	r2, [r3, #0]
 800b4d4:	4b60      	ldr	r3, [pc, #384]	; (800b658 <slalom_run+0x2cc>)
 800b4d6:	781a      	ldrb	r2, [r3, #0]
 800b4d8:	4b5e      	ldr	r3, [pc, #376]	; (800b654 <slalom_run+0x2c8>)
 800b4da:	701a      	strb	r2, [r3, #0]
					searchC();
 800b4dc:	f003 fdbc 	bl	800f058 <searchC>

					goal_x = GOAL_X;
 800b4e0:	4b5c      	ldr	r3, [pc, #368]	; (800b654 <slalom_run+0x2c8>)
 800b4e2:	2207      	movs	r2, #7
 800b4e4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b4e6:	4b5c      	ldr	r3, [pc, #368]	; (800b658 <slalom_run+0x2cc>)
 800b4e8:	2207      	movs	r2, #7
 800b4ea:	701a      	strb	r2, [r3, #0]
					break;
 800b4ec:	e1ac      	b.n	800b848 <slalom_run+0x4bc>

				case 1:
					//----a二次探索スラローム走行----
					printf("Second Run. (Slalom)\n");
 800b4ee:	485b      	ldr	r0, [pc, #364]	; (800b65c <slalom_run+0x2d0>)
 800b4f0:	f007 fd08 	bl	8012f04 <puts>

					MF.FLAG.SCND = 1;
 800b4f4:	4a52      	ldr	r2, [pc, #328]	; (800b640 <slalom_run+0x2b4>)
 800b4f6:	8813      	ldrh	r3, [r2, #0]
 800b4f8:	f043 0320 	orr.w	r3, r3, #32
 800b4fc:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800b4fe:	4b51      	ldr	r3, [pc, #324]	; (800b644 <slalom_run+0x2b8>)
 800b500:	2202      	movs	r2, #2
 800b502:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b504:	4b50      	ldr	r3, [pc, #320]	; (800b648 <slalom_run+0x2bc>)
 800b506:	2200      	movs	r2, #0
 800b508:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800b50a:	4b52      	ldr	r3, [pc, #328]	; (800b654 <slalom_run+0x2c8>)
 800b50c:	2207      	movs	r2, #7
 800b50e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b510:	4b51      	ldr	r3, [pc, #324]	; (800b658 <slalom_run+0x2cc>)
 800b512:	2207      	movs	r2, #7
 800b514:	701a      	strb	r2, [r3, #0]

					get_base();
 800b516:	f006 fd75 	bl	8012004 <get_base>

					searchC();
 800b51a:	f003 fd9d 	bl	800f058 <searchC>
					HAL_Delay(2000);
 800b51e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b522:	f7f5 fd7b 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b526:	4b4c      	ldr	r3, [pc, #304]	; (800b658 <slalom_run+0x2cc>)
 800b528:	2200      	movs	r2, #0
 800b52a:	701a      	strb	r2, [r3, #0]
 800b52c:	4b4a      	ldr	r3, [pc, #296]	; (800b658 <slalom_run+0x2cc>)
 800b52e:	781a      	ldrb	r2, [r3, #0]
 800b530:	4b48      	ldr	r3, [pc, #288]	; (800b654 <slalom_run+0x2c8>)
 800b532:	701a      	strb	r2, [r3, #0]
					searchC();
 800b534:	f003 fd90 	bl	800f058 <searchC>

					goal_x = GOAL_X;
 800b538:	4b46      	ldr	r3, [pc, #280]	; (800b654 <slalom_run+0x2c8>)
 800b53a:	2207      	movs	r2, #7
 800b53c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b53e:	4b46      	ldr	r3, [pc, #280]	; (800b658 <slalom_run+0x2cc>)
 800b540:	2207      	movs	r2, #7
 800b542:	701a      	strb	r2, [r3, #0]
					break;
 800b544:	e180      	b.n	800b848 <slalom_run+0x4bc>

				case 2:
					//----a二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 800b546:	4846      	ldr	r0, [pc, #280]	; (800b660 <slalom_run+0x2d4>)
 800b548:	f007 fcdc 	bl	8012f04 <puts>

					MF.FLAG.SCND = 1;
 800b54c:	4a3c      	ldr	r2, [pc, #240]	; (800b640 <slalom_run+0x2b4>)
 800b54e:	8813      	ldrh	r3, [r2, #0]
 800b550:	f043 0320 	orr.w	r3, r3, #32
 800b554:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b556:	4a3a      	ldr	r2, [pc, #232]	; (800b640 <slalom_run+0x2b4>)
 800b558:	8813      	ldrh	r3, [r2, #0]
 800b55a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b55e:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800b560:	4b38      	ldr	r3, [pc, #224]	; (800b644 <slalom_run+0x2b8>)
 800b562:	2202      	movs	r2, #2
 800b564:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b566:	4b38      	ldr	r3, [pc, #224]	; (800b648 <slalom_run+0x2bc>)
 800b568:	2200      	movs	r2, #0
 800b56a:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b56c:	4b37      	ldr	r3, [pc, #220]	; (800b64c <slalom_run+0x2c0>)
 800b56e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b572:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 600;
 800b574:	4b36      	ldr	r3, [pc, #216]	; (800b650 <slalom_run+0x2c4>)
 800b576:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b57a:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800b57c:	4b35      	ldr	r3, [pc, #212]	; (800b654 <slalom_run+0x2c8>)
 800b57e:	2207      	movs	r2, #7
 800b580:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b582:	4b35      	ldr	r3, [pc, #212]	; (800b658 <slalom_run+0x2cc>)
 800b584:	2207      	movs	r2, #7
 800b586:	701a      	strb	r2, [r3, #0]

					get_base();
 800b588:	f006 fd3c 	bl	8012004 <get_base>

					searchD();
 800b58c:	f004 f848 	bl	800f620 <searchD>
					HAL_Delay(2000);
 800b590:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b594:	f7f5 fd42 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b598:	4b2f      	ldr	r3, [pc, #188]	; (800b658 <slalom_run+0x2cc>)
 800b59a:	2200      	movs	r2, #0
 800b59c:	701a      	strb	r2, [r3, #0]
 800b59e:	4b2e      	ldr	r3, [pc, #184]	; (800b658 <slalom_run+0x2cc>)
 800b5a0:	781a      	ldrb	r2, [r3, #0]
 800b5a2:	4b2c      	ldr	r3, [pc, #176]	; (800b654 <slalom_run+0x2c8>)
 800b5a4:	701a      	strb	r2, [r3, #0]
					searchD();
 800b5a6:	f004 f83b 	bl	800f620 <searchD>

					goal_x = GOAL_X;
 800b5aa:	4b2a      	ldr	r3, [pc, #168]	; (800b654 <slalom_run+0x2c8>)
 800b5ac:	2207      	movs	r2, #7
 800b5ae:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b5b0:	4b29      	ldr	r3, [pc, #164]	; (800b658 <slalom_run+0x2cc>)
 800b5b2:	2207      	movs	r2, #7
 800b5b4:	701a      	strb	r2, [r3, #0]
					break;
 800b5b6:	e147      	b.n	800b848 <slalom_run+0x4bc>

				case 3:
					//----a二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 800b5b8:	4829      	ldr	r0, [pc, #164]	; (800b660 <slalom_run+0x2d4>)
 800b5ba:	f007 fca3 	bl	8012f04 <puts>

					MF.FLAG.SCND = 1;
 800b5be:	4a20      	ldr	r2, [pc, #128]	; (800b640 <slalom_run+0x2b4>)
 800b5c0:	8813      	ldrh	r3, [r2, #0]
 800b5c2:	f043 0320 	orr.w	r3, r3, #32
 800b5c6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b5c8:	4a1d      	ldr	r2, [pc, #116]	; (800b640 <slalom_run+0x2b4>)
 800b5ca:	8813      	ldrh	r3, [r2, #0]
 800b5cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b5d0:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800b5d2:	4b1c      	ldr	r3, [pc, #112]	; (800b644 <slalom_run+0x2b8>)
 800b5d4:	2202      	movs	r2, #2
 800b5d6:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b5d8:	4b1b      	ldr	r3, [pc, #108]	; (800b648 <slalom_run+0x2bc>)
 800b5da:	2200      	movs	r2, #0
 800b5dc:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b5de:	4b1b      	ldr	r3, [pc, #108]	; (800b64c <slalom_run+0x2c0>)
 800b5e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5e4:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800b5e6:	4b1a      	ldr	r3, [pc, #104]	; (800b650 <slalom_run+0x2c4>)
 800b5e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b5ec:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800b5ee:	4b19      	ldr	r3, [pc, #100]	; (800b654 <slalom_run+0x2c8>)
 800b5f0:	2207      	movs	r2, #7
 800b5f2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b5f4:	4b18      	ldr	r3, [pc, #96]	; (800b658 <slalom_run+0x2cc>)
 800b5f6:	2207      	movs	r2, #7
 800b5f8:	701a      	strb	r2, [r3, #0]

					get_base();
 800b5fa:	f006 fd03 	bl	8012004 <get_base>

					searchD();
 800b5fe:	f004 f80f 	bl	800f620 <searchD>
					HAL_Delay(2000);
 800b602:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b606:	f7f5 fd09 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b60a:	4b13      	ldr	r3, [pc, #76]	; (800b658 <slalom_run+0x2cc>)
 800b60c:	2200      	movs	r2, #0
 800b60e:	701a      	strb	r2, [r3, #0]
 800b610:	4b11      	ldr	r3, [pc, #68]	; (800b658 <slalom_run+0x2cc>)
 800b612:	781a      	ldrb	r2, [r3, #0]
 800b614:	4b0f      	ldr	r3, [pc, #60]	; (800b654 <slalom_run+0x2c8>)
 800b616:	701a      	strb	r2, [r3, #0]
					searchD();
 800b618:	f004 f802 	bl	800f620 <searchD>

					goal_x = GOAL_X;
 800b61c:	4b0d      	ldr	r3, [pc, #52]	; (800b654 <slalom_run+0x2c8>)
 800b61e:	2207      	movs	r2, #7
 800b620:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b622:	4b0d      	ldr	r3, [pc, #52]	; (800b658 <slalom_run+0x2cc>)
 800b624:	2207      	movs	r2, #7
 800b626:	701a      	strb	r2, [r3, #0]
					break;
 800b628:	e10e      	b.n	800b848 <slalom_run+0x4bc>
 800b62a:	bf00      	nop
 800b62c:	08014358 	.word	0x08014358
 800b630:	20000b2c 	.word	0x20000b2c
 800b634:	08014058 	.word	0x08014058
 800b638:	20001648 	.word	0x20001648
 800b63c:	08014238 	.word	0x08014238
 800b640:	20000fa8 	.word	0x20000fa8
 800b644:	20000456 	.word	0x20000456
 800b648:	2000164c 	.word	0x2000164c
 800b64c:	20000454 	.word	0x20000454
 800b650:	20000ffc 	.word	0x20000ffc
 800b654:	20000c30 	.word	0x20000c30
 800b658:	20000b8c 	.word	0x20000b8c
 800b65c:	08014370 	.word	0x08014370
 800b660:	08014388 	.word	0x08014388

				case 4:
					//----a二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 800b664:	487b      	ldr	r0, [pc, #492]	; (800b854 <slalom_run+0x4c8>)
 800b666:	f007 fc4d 	bl	8012f04 <puts>

					MF.FLAG.SCND = 1;
 800b66a:	4a7b      	ldr	r2, [pc, #492]	; (800b858 <slalom_run+0x4cc>)
 800b66c:	8813      	ldrh	r3, [r2, #0]
 800b66e:	f043 0320 	orr.w	r3, r3, #32
 800b672:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b674:	4a78      	ldr	r2, [pc, #480]	; (800b858 <slalom_run+0x4cc>)
 800b676:	8813      	ldrh	r3, [r2, #0]
 800b678:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b67c:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800b67e:	4b77      	ldr	r3, [pc, #476]	; (800b85c <slalom_run+0x4d0>)
 800b680:	2202      	movs	r2, #2
 800b682:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b684:	4b76      	ldr	r3, [pc, #472]	; (800b860 <slalom_run+0x4d4>)
 800b686:	2200      	movs	r2, #0
 800b688:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b68a:	4b76      	ldr	r3, [pc, #472]	; (800b864 <slalom_run+0x4d8>)
 800b68c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b690:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1500;
 800b692:	4b75      	ldr	r3, [pc, #468]	; (800b868 <slalom_run+0x4dc>)
 800b694:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b698:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800b69a:	4b74      	ldr	r3, [pc, #464]	; (800b86c <slalom_run+0x4e0>)
 800b69c:	2207      	movs	r2, #7
 800b69e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b6a0:	4b73      	ldr	r3, [pc, #460]	; (800b870 <slalom_run+0x4e4>)
 800b6a2:	2207      	movs	r2, #7
 800b6a4:	701a      	strb	r2, [r3, #0]

					get_base();
 800b6a6:	f006 fcad 	bl	8012004 <get_base>

					searchD();
 800b6aa:	f003 ffb9 	bl	800f620 <searchD>
					HAL_Delay(2000);
 800b6ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b6b2:	f7f5 fcb3 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b6b6:	4b6e      	ldr	r3, [pc, #440]	; (800b870 <slalom_run+0x4e4>)
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	701a      	strb	r2, [r3, #0]
 800b6bc:	4b6c      	ldr	r3, [pc, #432]	; (800b870 <slalom_run+0x4e4>)
 800b6be:	781a      	ldrb	r2, [r3, #0]
 800b6c0:	4b6a      	ldr	r3, [pc, #424]	; (800b86c <slalom_run+0x4e0>)
 800b6c2:	701a      	strb	r2, [r3, #0]
					searchD();
 800b6c4:	f003 ffac 	bl	800f620 <searchD>

					goal_x = GOAL_X;
 800b6c8:	4b68      	ldr	r3, [pc, #416]	; (800b86c <slalom_run+0x4e0>)
 800b6ca:	2207      	movs	r2, #7
 800b6cc:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b6ce:	4b68      	ldr	r3, [pc, #416]	; (800b870 <slalom_run+0x4e4>)
 800b6d0:	2207      	movs	r2, #7
 800b6d2:	701a      	strb	r2, [r3, #0]
					break;
 800b6d4:	e0b8      	b.n	800b848 <slalom_run+0x4bc>

				case 5:
					//----a二次走行スラローム+直線優先----
					printf("High Speed Run. (Slalom)\n");
 800b6d6:	4867      	ldr	r0, [pc, #412]	; (800b874 <slalom_run+0x4e8>)
 800b6d8:	f007 fc14 	bl	8012f04 <puts>

					MF.FLAG.SCND = 1;
 800b6dc:	4a5e      	ldr	r2, [pc, #376]	; (800b858 <slalom_run+0x4cc>)
 800b6de:	8813      	ldrh	r3, [r2, #0]
 800b6e0:	f043 0320 	orr.w	r3, r3, #32
 800b6e4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b6e6:	4a5c      	ldr	r2, [pc, #368]	; (800b858 <slalom_run+0x4cc>)
 800b6e8:	8813      	ldrh	r3, [r2, #0]
 800b6ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b6ee:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800b6f0:	4b5a      	ldr	r3, [pc, #360]	; (800b85c <slalom_run+0x4d0>)
 800b6f2:	2202      	movs	r2, #2
 800b6f4:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b6f6:	4b5a      	ldr	r3, [pc, #360]	; (800b860 <slalom_run+0x4d4>)
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800b6fc:	4b5b      	ldr	r3, [pc, #364]	; (800b86c <slalom_run+0x4e0>)
 800b6fe:	2207      	movs	r2, #7
 800b700:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b702:	4b5b      	ldr	r3, [pc, #364]	; (800b870 <slalom_run+0x4e4>)
 800b704:	2207      	movs	r2, #7
 800b706:	701a      	strb	r2, [r3, #0]

					get_base();
 800b708:	f006 fc7c 	bl	8012004 <get_base>

					HAL_Delay(5000);
 800b70c:	f241 3088 	movw	r0, #5000	; 0x1388
 800b710:	f7f5 fc84 	bl	800101c <HAL_Delay>
					searchC();
 800b714:	f003 fca0 	bl	800f058 <searchC>
					HAL_Delay(2000);
 800b718:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b71c:	f7f5 fc7e 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b720:	4b53      	ldr	r3, [pc, #332]	; (800b870 <slalom_run+0x4e4>)
 800b722:	2200      	movs	r2, #0
 800b724:	701a      	strb	r2, [r3, #0]
 800b726:	4b52      	ldr	r3, [pc, #328]	; (800b870 <slalom_run+0x4e4>)
 800b728:	781a      	ldrb	r2, [r3, #0]
 800b72a:	4b50      	ldr	r3, [pc, #320]	; (800b86c <slalom_run+0x4e0>)
 800b72c:	701a      	strb	r2, [r3, #0]
					searchC();
 800b72e:	f003 fc93 	bl	800f058 <searchC>

					goal_x = GOAL_X;
 800b732:	4b4e      	ldr	r3, [pc, #312]	; (800b86c <slalom_run+0x4e0>)
 800b734:	2207      	movs	r2, #7
 800b736:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b738:	4b4d      	ldr	r3, [pc, #308]	; (800b870 <slalom_run+0x4e4>)
 800b73a:	2207      	movs	r2, #7
 800b73c:	701a      	strb	r2, [r3, #0]
					break;
 800b73e:	e083      	b.n	800b848 <slalom_run+0x4bc>

				case 6:
					//----a二次走行スラロームHigh Speed+直線優先+既知区間加速----
					printf("High Speed Run. (Slalom)\n");
 800b740:	484c      	ldr	r0, [pc, #304]	; (800b874 <slalom_run+0x4e8>)
 800b742:	f007 fbdf 	bl	8012f04 <puts>

					MF.FLAG.SCND = 1;
 800b746:	4a44      	ldr	r2, [pc, #272]	; (800b858 <slalom_run+0x4cc>)
 800b748:	8813      	ldrh	r3, [r2, #0]
 800b74a:	f043 0320 	orr.w	r3, r3, #32
 800b74e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b750:	4a41      	ldr	r2, [pc, #260]	; (800b858 <slalom_run+0x4cc>)
 800b752:	8813      	ldrh	r3, [r2, #0]
 800b754:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b758:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b75a:	4a3f      	ldr	r2, [pc, #252]	; (800b858 <slalom_run+0x4cc>)
 800b75c:	8813      	ldrh	r3, [r2, #0]
 800b75e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b762:	8013      	strh	r3, [r2, #0]
					run_mode = 3;
 800b764:	4b3d      	ldr	r3, [pc, #244]	; (800b85c <slalom_run+0x4d0>)
 800b766:	2203      	movs	r2, #3
 800b768:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b76a:	4b3d      	ldr	r3, [pc, #244]	; (800b860 <slalom_run+0x4d4>)
 800b76c:	2200      	movs	r2, #0
 800b76e:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b770:	4b3c      	ldr	r3, [pc, #240]	; (800b864 <slalom_run+0x4d8>)
 800b772:	f241 3288 	movw	r2, #5000	; 0x1388
 800b776:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800b778:	4b3b      	ldr	r3, [pc, #236]	; (800b868 <slalom_run+0x4dc>)
 800b77a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b77e:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800b780:	4b3a      	ldr	r3, [pc, #232]	; (800b86c <slalom_run+0x4e0>)
 800b782:	2207      	movs	r2, #7
 800b784:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b786:	4b3a      	ldr	r3, [pc, #232]	; (800b870 <slalom_run+0x4e4>)
 800b788:	2207      	movs	r2, #7
 800b78a:	701a      	strb	r2, [r3, #0]

					get_base();
 800b78c:	f006 fc3a 	bl	8012004 <get_base>

					HAL_Delay(5000);
 800b790:	f241 3088 	movw	r0, #5000	; 0x1388
 800b794:	f7f5 fc42 	bl	800101c <HAL_Delay>
					searchD();
 800b798:	f003 ff42 	bl	800f620 <searchD>
					HAL_Delay(2000);
 800b79c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b7a0:	f7f5 fc3c 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b7a4:	4b32      	ldr	r3, [pc, #200]	; (800b870 <slalom_run+0x4e4>)
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	701a      	strb	r2, [r3, #0]
 800b7aa:	4b31      	ldr	r3, [pc, #196]	; (800b870 <slalom_run+0x4e4>)
 800b7ac:	781a      	ldrb	r2, [r3, #0]
 800b7ae:	4b2f      	ldr	r3, [pc, #188]	; (800b86c <slalom_run+0x4e0>)
 800b7b0:	701a      	strb	r2, [r3, #0]
					searchD();
 800b7b2:	f003 ff35 	bl	800f620 <searchD>

					goal_x = GOAL_X;
 800b7b6:	4b2d      	ldr	r3, [pc, #180]	; (800b86c <slalom_run+0x4e0>)
 800b7b8:	2207      	movs	r2, #7
 800b7ba:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b7bc:	4b2c      	ldr	r3, [pc, #176]	; (800b870 <slalom_run+0x4e4>)
 800b7be:	2207      	movs	r2, #7
 800b7c0:	701a      	strb	r2, [r3, #0]
					break;
 800b7c2:	e041      	b.n	800b848 <slalom_run+0x4bc>

				case 7:
					//----a二次走行スラロームHigh Speed+直線優先+既知区間加速----
					printf("High Speed Run. (Slalom)\n");
 800b7c4:	482b      	ldr	r0, [pc, #172]	; (800b874 <slalom_run+0x4e8>)
 800b7c6:	f007 fb9d 	bl	8012f04 <puts>

					MF.FLAG.SCND = 1;
 800b7ca:	4a23      	ldr	r2, [pc, #140]	; (800b858 <slalom_run+0x4cc>)
 800b7cc:	8813      	ldrh	r3, [r2, #0]
 800b7ce:	f043 0320 	orr.w	r3, r3, #32
 800b7d2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b7d4:	4a20      	ldr	r2, [pc, #128]	; (800b858 <slalom_run+0x4cc>)
 800b7d6:	8813      	ldrh	r3, [r2, #0]
 800b7d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b7dc:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b7de:	4a1e      	ldr	r2, [pc, #120]	; (800b858 <slalom_run+0x4cc>)
 800b7e0:	8813      	ldrh	r3, [r2, #0]
 800b7e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b7e6:	8013      	strh	r3, [r2, #0]
					run_mode = 3;
 800b7e8:	4b1c      	ldr	r3, [pc, #112]	; (800b85c <slalom_run+0x4d0>)
 800b7ea:	2203      	movs	r2, #3
 800b7ec:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b7ee:	4b1c      	ldr	r3, [pc, #112]	; (800b860 <slalom_run+0x4d4>)
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b7f4:	4b1b      	ldr	r3, [pc, #108]	; (800b864 <slalom_run+0x4d8>)
 800b7f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7fa:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800b7fc:	4b1a      	ldr	r3, [pc, #104]	; (800b868 <slalom_run+0x4dc>)
 800b7fe:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b802:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800b804:	4b19      	ldr	r3, [pc, #100]	; (800b86c <slalom_run+0x4e0>)
 800b806:	2207      	movs	r2, #7
 800b808:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b80a:	4b19      	ldr	r3, [pc, #100]	; (800b870 <slalom_run+0x4e4>)
 800b80c:	2207      	movs	r2, #7
 800b80e:	701a      	strb	r2, [r3, #0]

					get_base();
 800b810:	f006 fbf8 	bl	8012004 <get_base>

					HAL_Delay(5000);
 800b814:	f241 3088 	movw	r0, #5000	; 0x1388
 800b818:	f7f5 fc00 	bl	800101c <HAL_Delay>
					searchD();
 800b81c:	f003 ff00 	bl	800f620 <searchD>
					HAL_Delay(2000);
 800b820:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b824:	f7f5 fbfa 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b828:	4b11      	ldr	r3, [pc, #68]	; (800b870 <slalom_run+0x4e4>)
 800b82a:	2200      	movs	r2, #0
 800b82c:	701a      	strb	r2, [r3, #0]
 800b82e:	4b10      	ldr	r3, [pc, #64]	; (800b870 <slalom_run+0x4e4>)
 800b830:	781a      	ldrb	r2, [r3, #0]
 800b832:	4b0e      	ldr	r3, [pc, #56]	; (800b86c <slalom_run+0x4e0>)
 800b834:	701a      	strb	r2, [r3, #0]
					searchD();
 800b836:	f003 fef3 	bl	800f620 <searchD>

					goal_x = GOAL_X;
 800b83a:	4b0c      	ldr	r3, [pc, #48]	; (800b86c <slalom_run+0x4e0>)
 800b83c:	2207      	movs	r2, #7
 800b83e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b840:	4b0b      	ldr	r3, [pc, #44]	; (800b870 <slalom_run+0x4e4>)
 800b842:	2207      	movs	r2, #7
 800b844:	701a      	strb	r2, [r3, #0]
					break;
 800b846:	bf00      	nop

			  }
			  dist_l = 0;
 800b848:	4b0b      	ldr	r3, [pc, #44]	; (800b878 <slalom_run+0x4ec>)
 800b84a:	f04f 0200 	mov.w	r2, #0
 800b84e:	601a      	str	r2, [r3, #0]
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b850:	e5a5      	b.n	800b39e <slalom_run+0x12>
 800b852:	bf00      	nop
 800b854:	08014388 	.word	0x08014388
 800b858:	20000fa8 	.word	0x20000fa8
 800b85c:	20000456 	.word	0x20000456
 800b860:	2000164c 	.word	0x2000164c
 800b864:	20000454 	.word	0x20000454
 800b868:	20000ffc 	.word	0x20000ffc
 800b86c:	20000c30 	.word	0x20000c30
 800b870:	20000b8c 	.word	0x20000b8c
 800b874:	080143a4 	.word	0x080143a4
 800b878:	20001648 	.word	0x20001648

0800b87c <perfect_run>:
//perfect_run
// a本番用走行モード
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_run(void){
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b082      	sub	sp, #8
 800b880:	af00      	add	r7, sp, #0

	int mode = 0;
 800b882:	2300      	movs	r3, #0
 800b884:	607b      	str	r3, [r7, #4]
	printf("Perfect Run, Mode : %d\n", mode);
 800b886:	6879      	ldr	r1, [r7, #4]
 800b888:	48a7      	ldr	r0, [pc, #668]	; (800bb28 <perfect_run+0x2ac>)
 800b88a:	f007 fac7 	bl	8012e1c <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	b2db      	uxtb	r3, r3
 800b892:	f003 0301 	and.w	r3, r3, #1
 800b896:	b2d8      	uxtb	r0, r3
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	b2db      	uxtb	r3, r3
 800b89c:	f003 0302 	and.w	r3, r3, #2
 800b8a0:	b2d9      	uxtb	r1, r3
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	b2db      	uxtb	r3, r3
 800b8a6:	f003 0304 	and.w	r3, r3, #4
 800b8aa:	b2db      	uxtb	r3, r3
 800b8ac:	461a      	mov	r2, r3
 800b8ae:	f006 fc01 	bl	80120b4 <led_write>
		  if(dist_r >= 20){
 800b8b2:	4b9e      	ldr	r3, [pc, #632]	; (800bb2c <perfect_run+0x2b0>)
 800b8b4:	edd3 7a00 	vldr	s15, [r3]
 800b8b8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800b8bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b8c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8c4:	db0f      	blt.n	800b8e6 <perfect_run+0x6a>
			  mode++;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	3301      	adds	r3, #1
 800b8ca:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800b8cc:	4b97      	ldr	r3, [pc, #604]	; (800bb2c <perfect_run+0x2b0>)
 800b8ce:	f04f 0200 	mov.w	r2, #0
 800b8d2:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2b07      	cmp	r3, #7
 800b8d8:	dd01      	ble.n	800b8de <perfect_run+0x62>
				  mode = 0;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800b8de:	6879      	ldr	r1, [r7, #4]
 800b8e0:	4893      	ldr	r0, [pc, #588]	; (800bb30 <perfect_run+0x2b4>)
 800b8e2:	f007 fa9b 	bl	8012e1c <iprintf>
		  }
		  if(dist_r <= -20){
 800b8e6:	4b91      	ldr	r3, [pc, #580]	; (800bb2c <perfect_run+0x2b0>)
 800b8e8:	edd3 7a00 	vldr	s15, [r3]
 800b8ec:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800b8f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b8f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8f8:	d80f      	bhi.n	800b91a <perfect_run+0x9e>
			  mode--;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	3b01      	subs	r3, #1
 800b8fe:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800b900:	4b8a      	ldr	r3, [pc, #552]	; (800bb2c <perfect_run+0x2b0>)
 800b902:	f04f 0200 	mov.w	r2, #0
 800b906:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	da01      	bge.n	800b912 <perfect_run+0x96>
				  mode = 7;
 800b90e:	2307      	movs	r3, #7
 800b910:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800b912:	6879      	ldr	r1, [r7, #4]
 800b914:	4886      	ldr	r0, [pc, #536]	; (800bb30 <perfect_run+0x2b4>)
 800b916:	f007 fa81 	bl	8012e1c <iprintf>
		  }
		  if(dist_l <= -20){
 800b91a:	4b86      	ldr	r3, [pc, #536]	; (800bb34 <perfect_run+0x2b8>)
 800b91c:	edd3 7a00 	vldr	s15, [r3]
 800b920:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800b924:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b92c:	f200 8261 	bhi.w	800bdf2 <perfect_run+0x576>
			  dist_l = 0;
 800b930:	4b80      	ldr	r3, [pc, #512]	; (800bb34 <perfect_run+0x2b8>)
 800b932:	f04f 0200 	mov.w	r2, #0
 800b936:	601a      	str	r2, [r3, #0]
			  drive_ready();
 800b938:	f7f9 f998 	bl	8004c6c <drive_ready>
			  switch(mode){
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2b07      	cmp	r3, #7
 800b940:	f200 8253 	bhi.w	800bdea <perfect_run+0x56e>
 800b944:	a201      	add	r2, pc, #4	; (adr r2, 800b94c <perfect_run+0xd0>)
 800b946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b94a:	bf00      	nop
 800b94c:	0800b96d 	.word	0x0800b96d
 800b950:	0800b9ef 	.word	0x0800b9ef
 800b954:	0800baa5 	.word	0x0800baa5
 800b958:	0800bb61 	.word	0x0800bb61
 800b95c:	0800bbe3 	.word	0x0800bbe3
 800b960:	0800bc65 	.word	0x0800bc65
 800b964:	0800bce7 	.word	0x0800bce7
 800b968:	0800bd69 	.word	0x0800bd69

				case 0:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800b96c:	4872      	ldr	r0, [pc, #456]	; (800bb38 <perfect_run+0x2bc>)
 800b96e:	f007 fac9 	bl	8012f04 <puts>
					MF.FLAG.SCND = 0;
 800b972:	4a72      	ldr	r2, [pc, #456]	; (800bb3c <perfect_run+0x2c0>)
 800b974:	8813      	ldrh	r3, [r2, #0]
 800b976:	f36f 1345 	bfc	r3, #5, #1
 800b97a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b97c:	4a6f      	ldr	r2, [pc, #444]	; (800bb3c <perfect_run+0x2c0>)
 800b97e:	8813      	ldrh	r3, [r2, #0]
 800b980:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b984:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800b986:	4a6d      	ldr	r2, [pc, #436]	; (800bb3c <perfect_run+0x2c0>)
 800b988:	8813      	ldrh	r3, [r2, #0]
 800b98a:	f36f 238a 	bfc	r3, #10, #1
 800b98e:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800b990:	4b6b      	ldr	r3, [pc, #428]	; (800bb40 <perfect_run+0x2c4>)
 800b992:	2202      	movs	r2, #2
 800b994:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b996:	4b6b      	ldr	r3, [pc, #428]	; (800bb44 <perfect_run+0x2c8>)
 800b998:	2200      	movs	r2, #0
 800b99a:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b99c:	4b6a      	ldr	r3, [pc, #424]	; (800bb48 <perfect_run+0x2cc>)
 800b99e:	2202      	movs	r2, #2
 800b9a0:	701a      	strb	r2, [r3, #0]
					accel_hs = 4000;
 800b9a2:	4b6a      	ldr	r3, [pc, #424]	; (800bb4c <perfect_run+0x2d0>)
 800b9a4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800b9a8:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800b9aa:	4b69      	ldr	r3, [pc, #420]	; (800bb50 <perfect_run+0x2d4>)
 800b9ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b9b0:	801a      	strh	r2, [r3, #0]

					goal_x = GOAL_X;
 800b9b2:	4b68      	ldr	r3, [pc, #416]	; (800bb54 <perfect_run+0x2d8>)
 800b9b4:	2207      	movs	r2, #7
 800b9b6:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b9b8:	4b67      	ldr	r3, [pc, #412]	; (800bb58 <perfect_run+0x2dc>)
 800b9ba:	2207      	movs	r2, #7
 800b9bc:	701a      	strb	r2, [r3, #0]

					get_base();
 800b9be:	f006 fb21 	bl	8012004 <get_base>

					searchC();
 800b9c2:	f003 fb49 	bl	800f058 <searchC>
					HAL_Delay(2000);
 800b9c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b9ca:	f7f5 fb27 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b9ce:	4b62      	ldr	r3, [pc, #392]	; (800bb58 <perfect_run+0x2dc>)
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	701a      	strb	r2, [r3, #0]
 800b9d4:	4b60      	ldr	r3, [pc, #384]	; (800bb58 <perfect_run+0x2dc>)
 800b9d6:	781a      	ldrb	r2, [r3, #0]
 800b9d8:	4b5e      	ldr	r3, [pc, #376]	; (800bb54 <perfect_run+0x2d8>)
 800b9da:	701a      	strb	r2, [r3, #0]
					searchC();
 800b9dc:	f003 fb3c 	bl	800f058 <searchC>

					goal_x = GOAL_X;
 800b9e0:	4b5c      	ldr	r3, [pc, #368]	; (800bb54 <perfect_run+0x2d8>)
 800b9e2:	2207      	movs	r2, #7
 800b9e4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b9e6:	4b5c      	ldr	r3, [pc, #368]	; (800bb58 <perfect_run+0x2dc>)
 800b9e8:	2207      	movs	r2, #7
 800b9ea:	701a      	strb	r2, [r3, #0]
					break;
 800b9ec:	e1fd      	b.n	800bdea <perfect_run+0x56e>

				case 1:
					//----a一次重ね探索スラローム走行----
					printf("First Run.\n");
 800b9ee:	4852      	ldr	r0, [pc, #328]	; (800bb38 <perfect_run+0x2bc>)
 800b9f0:	f007 fa88 	bl	8012f04 <puts>
					MF.FLAG.SCND = 0;
 800b9f4:	4a51      	ldr	r2, [pc, #324]	; (800bb3c <perfect_run+0x2c0>)
 800b9f6:	8813      	ldrh	r3, [r2, #0]
 800b9f8:	f36f 1345 	bfc	r3, #5, #1
 800b9fc:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b9fe:	4a4f      	ldr	r2, [pc, #316]	; (800bb3c <perfect_run+0x2c0>)
 800ba00:	8813      	ldrh	r3, [r2, #0]
 800ba02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ba06:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800ba08:	4a4c      	ldr	r2, [pc, #304]	; (800bb3c <perfect_run+0x2c0>)
 800ba0a:	8813      	ldrh	r3, [r2, #0]
 800ba0c:	f36f 238a 	bfc	r3, #10, #1
 800ba10:	8013      	strh	r3, [r2, #0]
					MF.FLAG.SRC2 = 1;
 800ba12:	4a4a      	ldr	r2, [pc, #296]	; (800bb3c <perfect_run+0x2c0>)
 800ba14:	8813      	ldrh	r3, [r2, #0]
 800ba16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba1a:	8013      	strh	r3, [r2, #0]

					run_mode = 2;
 800ba1c:	4b48      	ldr	r3, [pc, #288]	; (800bb40 <perfect_run+0x2c4>)
 800ba1e:	2202      	movs	r2, #2
 800ba20:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800ba22:	4b48      	ldr	r3, [pc, #288]	; (800bb44 <perfect_run+0x2c8>)
 800ba24:	2200      	movs	r2, #0
 800ba26:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800ba28:	4b47      	ldr	r3, [pc, #284]	; (800bb48 <perfect_run+0x2cc>)
 800ba2a:	2202      	movs	r2, #2
 800ba2c:	701a      	strb	r2, [r3, #0]
					accel_hs = 4000;
 800ba2e:	4b47      	ldr	r3, [pc, #284]	; (800bb4c <perfect_run+0x2d0>)
 800ba30:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800ba34:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800ba36:	4b46      	ldr	r3, [pc, #280]	; (800bb50 <perfect_run+0x2d4>)
 800ba38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ba3c:	801a      	strh	r2, [r3, #0]

					goal_x = GOAL_X;
 800ba3e:	4b45      	ldr	r3, [pc, #276]	; (800bb54 <perfect_run+0x2d8>)
 800ba40:	2207      	movs	r2, #7
 800ba42:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ba44:	4b44      	ldr	r3, [pc, #272]	; (800bb58 <perfect_run+0x2dc>)
 800ba46:	2207      	movs	r2, #7
 800ba48:	701a      	strb	r2, [r3, #0]

					get_base();
 800ba4a:	f006 fadb 	bl	8012004 <get_base>

					searchC2();
 800ba4e:	f003 fc75 	bl	800f33c <searchC2>
					start_mode = 1;
 800ba52:	4b3c      	ldr	r3, [pc, #240]	; (800bb44 <perfect_run+0x2c8>)
 800ba54:	2201      	movs	r2, #1
 800ba56:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800ba58:	4b3b      	ldr	r3, [pc, #236]	; (800bb48 <perfect_run+0x2cc>)
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	701a      	strb	r2, [r3, #0]

					HAL_Delay(2000);
 800ba5e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ba62:	f7f5 fadb 	bl	800101c <HAL_Delay>

					rotate_180();											//180度回転
 800ba66:	f7fa feb7 	bl	80067d8 <rotate_180>
					MF.FLAG.SCND = 1;
 800ba6a:	4a34      	ldr	r2, [pc, #208]	; (800bb3c <perfect_run+0x2c0>)
 800ba6c:	8813      	ldrh	r3, [r2, #0]
 800ba6e:	f043 0320 	orr.w	r3, r3, #32
 800ba72:	8013      	strh	r3, [r2, #0]
					MF.FLAG.SRC2 = 0;
 800ba74:	4a31      	ldr	r2, [pc, #196]	; (800bb3c <perfect_run+0x2c0>)
 800ba76:	8813      	ldrh	r3, [r2, #0]
 800ba78:	f36f 1386 	bfc	r3, #6, #1
 800ba7c:	8013      	strh	r3, [r2, #0]
					goal_x = goal_y = 0;
 800ba7e:	4b36      	ldr	r3, [pc, #216]	; (800bb58 <perfect_run+0x2dc>)
 800ba80:	2200      	movs	r2, #0
 800ba82:	701a      	strb	r2, [r3, #0]
 800ba84:	4b34      	ldr	r3, [pc, #208]	; (800bb58 <perfect_run+0x2dc>)
 800ba86:	781a      	ldrb	r2, [r3, #0]
 800ba88:	4b32      	ldr	r3, [pc, #200]	; (800bb54 <perfect_run+0x2d8>)
 800ba8a:	701a      	strb	r2, [r3, #0]
					run_mode = 3;
 800ba8c:	4b2c      	ldr	r3, [pc, #176]	; (800bb40 <perfect_run+0x2c4>)
 800ba8e:	2203      	movs	r2, #3
 800ba90:	701a      	strb	r2, [r3, #0]
					searchF3();
 800ba92:	f003 ff5b 	bl	800f94c <searchF3>

					goal_x = GOAL_X;
 800ba96:	4b2f      	ldr	r3, [pc, #188]	; (800bb54 <perfect_run+0x2d8>)
 800ba98:	2207      	movs	r2, #7
 800ba9a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ba9c:	4b2e      	ldr	r3, [pc, #184]	; (800bb58 <perfect_run+0x2dc>)
 800ba9e:	2207      	movs	r2, #7
 800baa0:	701a      	strb	r2, [r3, #0]
					break;
 800baa2:	e1a2      	b.n	800bdea <perfect_run+0x56e>

				case 2:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-2.\n");
 800baa4:	482d      	ldr	r0, [pc, #180]	; (800bb5c <perfect_run+0x2e0>)
 800baa6:	f007 fa2d 	bl	8012f04 <puts>
					MF.FLAG.SCND = 1;
 800baaa:	4a24      	ldr	r2, [pc, #144]	; (800bb3c <perfect_run+0x2c0>)
 800baac:	8813      	ldrh	r3, [r2, #0]
 800baae:	f043 0320 	orr.w	r3, r3, #32
 800bab2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bab4:	4a21      	ldr	r2, [pc, #132]	; (800bb3c <perfect_run+0x2c0>)
 800bab6:	8813      	ldrh	r3, [r2, #0]
 800bab8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800babc:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800babe:	4a1f      	ldr	r2, [pc, #124]	; (800bb3c <perfect_run+0x2c0>)
 800bac0:	8813      	ldrh	r3, [r2, #0]
 800bac2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bac6:	8013      	strh	r3, [r2, #0]
					run_mode = 3;
 800bac8:	4b1d      	ldr	r3, [pc, #116]	; (800bb40 <perfect_run+0x2c4>)
 800baca:	2203      	movs	r2, #3
 800bacc:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bace:	4b1d      	ldr	r3, [pc, #116]	; (800bb44 <perfect_run+0x2c8>)
 800bad0:	2200      	movs	r2, #0
 800bad2:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bad4:	4b1c      	ldr	r3, [pc, #112]	; (800bb48 <perfect_run+0x2cc>)
 800bad6:	2202      	movs	r2, #2
 800bad8:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800bada:	4b1c      	ldr	r3, [pc, #112]	; (800bb4c <perfect_run+0x2d0>)
 800badc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bae0:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800bae2:	4b1b      	ldr	r3, [pc, #108]	; (800bb50 <perfect_run+0x2d4>)
 800bae4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bae8:	801a      	strh	r2, [r3, #0]

//					pass_mode = 3;						//a半区画ベースでroute配列生成

					goal_x = GOAL_X;
 800baea:	4b1a      	ldr	r3, [pc, #104]	; (800bb54 <perfect_run+0x2d8>)
 800baec:	2207      	movs	r2, #7
 800baee:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800baf0:	4b19      	ldr	r3, [pc, #100]	; (800bb58 <perfect_run+0x2dc>)
 800baf2:	2207      	movs	r2, #7
 800baf4:	701a      	strb	r2, [r3, #0]

					get_base();
 800baf6:	f006 fa85 	bl	8012004 <get_base>

					searchF3();
 800bafa:	f003 ff27 	bl	800f94c <searchF3>
					HAL_Delay(2000);
 800bafe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bb02:	f7f5 fa8b 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bb06:	4b14      	ldr	r3, [pc, #80]	; (800bb58 <perfect_run+0x2dc>)
 800bb08:	2200      	movs	r2, #0
 800bb0a:	701a      	strb	r2, [r3, #0]
 800bb0c:	4b12      	ldr	r3, [pc, #72]	; (800bb58 <perfect_run+0x2dc>)
 800bb0e:	781a      	ldrb	r2, [r3, #0]
 800bb10:	4b10      	ldr	r3, [pc, #64]	; (800bb54 <perfect_run+0x2d8>)
 800bb12:	701a      	strb	r2, [r3, #0]
					searchF3();
 800bb14:	f003 ff1a 	bl	800f94c <searchF3>

					goal_x = GOAL_X;
 800bb18:	4b0e      	ldr	r3, [pc, #56]	; (800bb54 <perfect_run+0x2d8>)
 800bb1a:	2207      	movs	r2, #7
 800bb1c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bb1e:	4b0e      	ldr	r3, [pc, #56]	; (800bb58 <perfect_run+0x2dc>)
 800bb20:	2207      	movs	r2, #7
 800bb22:	701a      	strb	r2, [r3, #0]
					break;
 800bb24:	e161      	b.n	800bdea <perfect_run+0x56e>
 800bb26:	bf00      	nop
 800bb28:	080143c0 	.word	0x080143c0
 800bb2c:	20000b2c 	.word	0x20000b2c
 800bb30:	08014058 	.word	0x08014058
 800bb34:	20001648 	.word	0x20001648
 800bb38:	08014318 	.word	0x08014318
 800bb3c:	20000fa8 	.word	0x20000fa8
 800bb40:	20000456 	.word	0x20000456
 800bb44:	2000164c 	.word	0x2000164c
 800bb48:	20000c31 	.word	0x20000c31
 800bb4c:	20000454 	.word	0x20000454
 800bb50:	20000ffc 	.word	0x20000ffc
 800bb54:	20000c30 	.word	0x20000c30
 800bb58:	20000b8c 	.word	0x20000b8c
 800bb5c:	0801424c 	.word	0x0801424c

				case 3:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High High Speed----
					printf("pass press 3-2.\n");
 800bb60:	48a4      	ldr	r0, [pc, #656]	; (800bdf4 <perfect_run+0x578>)
 800bb62:	f007 f9cf 	bl	8012f04 <puts>
					MF.FLAG.SCND = 1;
 800bb66:	4aa4      	ldr	r2, [pc, #656]	; (800bdf8 <perfect_run+0x57c>)
 800bb68:	8813      	ldrh	r3, [r2, #0]
 800bb6a:	f043 0320 	orr.w	r3, r3, #32
 800bb6e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bb70:	4aa1      	ldr	r2, [pc, #644]	; (800bdf8 <perfect_run+0x57c>)
 800bb72:	8813      	ldrh	r3, [r2, #0]
 800bb74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bb78:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bb7a:	4a9f      	ldr	r2, [pc, #636]	; (800bdf8 <perfect_run+0x57c>)
 800bb7c:	8813      	ldrh	r3, [r2, #0]
 800bb7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bb82:	8013      	strh	r3, [r2, #0]
					run_mode = 4;
 800bb84:	4b9d      	ldr	r3, [pc, #628]	; (800bdfc <perfect_run+0x580>)
 800bb86:	2204      	movs	r2, #4
 800bb88:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bb8a:	4b9d      	ldr	r3, [pc, #628]	; (800be00 <perfect_run+0x584>)
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bb90:	4b9c      	ldr	r3, [pc, #624]	; (800be04 <perfect_run+0x588>)
 800bb92:	2202      	movs	r2, #2
 800bb94:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800bb96:	4b9c      	ldr	r3, [pc, #624]	; (800be08 <perfect_run+0x58c>)
 800bb98:	f242 7210 	movw	r2, #10000	; 0x2710
 800bb9c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800bb9e:	4b9b      	ldr	r3, [pc, #620]	; (800be0c <perfect_run+0x590>)
 800bba0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800bba4:	801a      	strh	r2, [r3, #0]

//					pass_mode = 3;						//a半区画ベースでroute配列生成

					goal_x = GOAL_X;
 800bba6:	4b9a      	ldr	r3, [pc, #616]	; (800be10 <perfect_run+0x594>)
 800bba8:	2207      	movs	r2, #7
 800bbaa:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bbac:	4b99      	ldr	r3, [pc, #612]	; (800be14 <perfect_run+0x598>)
 800bbae:	2207      	movs	r2, #7
 800bbb0:	701a      	strb	r2, [r3, #0]

					get_base();
 800bbb2:	f006 fa27 	bl	8012004 <get_base>

					searchF3();
 800bbb6:	f003 fec9 	bl	800f94c <searchF3>
					HAL_Delay(2000);
 800bbba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bbbe:	f7f5 fa2d 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bbc2:	4b94      	ldr	r3, [pc, #592]	; (800be14 <perfect_run+0x598>)
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	701a      	strb	r2, [r3, #0]
 800bbc8:	4b92      	ldr	r3, [pc, #584]	; (800be14 <perfect_run+0x598>)
 800bbca:	781a      	ldrb	r2, [r3, #0]
 800bbcc:	4b90      	ldr	r3, [pc, #576]	; (800be10 <perfect_run+0x594>)
 800bbce:	701a      	strb	r2, [r3, #0]
					searchF3();
 800bbd0:	f003 febc 	bl	800f94c <searchF3>

					goal_x = GOAL_X;
 800bbd4:	4b8e      	ldr	r3, [pc, #568]	; (800be10 <perfect_run+0x594>)
 800bbd6:	2207      	movs	r2, #7
 800bbd8:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bbda:	4b8e      	ldr	r3, [pc, #568]	; (800be14 <perfect_run+0x598>)
 800bbdc:	2207      	movs	r2, #7
 800bbde:	701a      	strb	r2, [r3, #0]
					break;
 800bbe0:	e103      	b.n	800bdea <perfect_run+0x56e>

				case 4:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High High Speed----
					printf("pass press 3-2.\n");
 800bbe2:	4884      	ldr	r0, [pc, #528]	; (800bdf4 <perfect_run+0x578>)
 800bbe4:	f007 f98e 	bl	8012f04 <puts>
					MF.FLAG.SCND = 1;
 800bbe8:	4a83      	ldr	r2, [pc, #524]	; (800bdf8 <perfect_run+0x57c>)
 800bbea:	8813      	ldrh	r3, [r2, #0]
 800bbec:	f043 0320 	orr.w	r3, r3, #32
 800bbf0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bbf2:	4a81      	ldr	r2, [pc, #516]	; (800bdf8 <perfect_run+0x57c>)
 800bbf4:	8813      	ldrh	r3, [r2, #0]
 800bbf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bbfa:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bbfc:	4a7e      	ldr	r2, [pc, #504]	; (800bdf8 <perfect_run+0x57c>)
 800bbfe:	8813      	ldrh	r3, [r2, #0]
 800bc00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bc04:	8013      	strh	r3, [r2, #0]
					run_mode = 4;
 800bc06:	4b7d      	ldr	r3, [pc, #500]	; (800bdfc <perfect_run+0x580>)
 800bc08:	2204      	movs	r2, #4
 800bc0a:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bc0c:	4b7c      	ldr	r3, [pc, #496]	; (800be00 <perfect_run+0x584>)
 800bc0e:	2200      	movs	r2, #0
 800bc10:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bc12:	4b7c      	ldr	r3, [pc, #496]	; (800be04 <perfect_run+0x588>)
 800bc14:	2202      	movs	r2, #2
 800bc16:	701a      	strb	r2, [r3, #0]
					accel_hs = 15000;
 800bc18:	4b7b      	ldr	r3, [pc, #492]	; (800be08 <perfect_run+0x58c>)
 800bc1a:	f643 2298 	movw	r2, #15000	; 0x3a98
 800bc1e:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2500;
 800bc20:	4b7a      	ldr	r3, [pc, #488]	; (800be0c <perfect_run+0x590>)
 800bc22:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800bc26:	801a      	strh	r2, [r3, #0]

//					pass_mode = 3;						//a半区画ベースでroute配列生成

					goal_x = GOAL_X;
 800bc28:	4b79      	ldr	r3, [pc, #484]	; (800be10 <perfect_run+0x594>)
 800bc2a:	2207      	movs	r2, #7
 800bc2c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bc2e:	4b79      	ldr	r3, [pc, #484]	; (800be14 <perfect_run+0x598>)
 800bc30:	2207      	movs	r2, #7
 800bc32:	701a      	strb	r2, [r3, #0]

					get_base();
 800bc34:	f006 f9e6 	bl	8012004 <get_base>

					searchF3();
 800bc38:	f003 fe88 	bl	800f94c <searchF3>
					HAL_Delay(2000);
 800bc3c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bc40:	f7f5 f9ec 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bc44:	4b73      	ldr	r3, [pc, #460]	; (800be14 <perfect_run+0x598>)
 800bc46:	2200      	movs	r2, #0
 800bc48:	701a      	strb	r2, [r3, #0]
 800bc4a:	4b72      	ldr	r3, [pc, #456]	; (800be14 <perfect_run+0x598>)
 800bc4c:	781a      	ldrb	r2, [r3, #0]
 800bc4e:	4b70      	ldr	r3, [pc, #448]	; (800be10 <perfect_run+0x594>)
 800bc50:	701a      	strb	r2, [r3, #0]
					searchF3();
 800bc52:	f003 fe7b 	bl	800f94c <searchF3>

					goal_x = GOAL_X;
 800bc56:	4b6e      	ldr	r3, [pc, #440]	; (800be10 <perfect_run+0x594>)
 800bc58:	2207      	movs	r2, #7
 800bc5a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bc5c:	4b6d      	ldr	r3, [pc, #436]	; (800be14 <perfect_run+0x598>)
 800bc5e:	2207      	movs	r2, #7
 800bc60:	701a      	strb	r2, [r3, #0]
					break;
 800bc62:	e0c2      	b.n	800bdea <perfect_run+0x56e>

				case 5:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-4.\n");
 800bc64:	486c      	ldr	r0, [pc, #432]	; (800be18 <perfect_run+0x59c>)
 800bc66:	f007 f94d 	bl	8012f04 <puts>
					MF.FLAG.SCND = 1;
 800bc6a:	4a63      	ldr	r2, [pc, #396]	; (800bdf8 <perfect_run+0x57c>)
 800bc6c:	8813      	ldrh	r3, [r2, #0]
 800bc6e:	f043 0320 	orr.w	r3, r3, #32
 800bc72:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bc74:	4a60      	ldr	r2, [pc, #384]	; (800bdf8 <perfect_run+0x57c>)
 800bc76:	8813      	ldrh	r3, [r2, #0]
 800bc78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bc7c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bc7e:	4a5e      	ldr	r2, [pc, #376]	; (800bdf8 <perfect_run+0x57c>)
 800bc80:	8813      	ldrh	r3, [r2, #0]
 800bc82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bc86:	8013      	strh	r3, [r2, #0]
					run_mode = 5;
 800bc88:	4b5c      	ldr	r3, [pc, #368]	; (800bdfc <perfect_run+0x580>)
 800bc8a:	2205      	movs	r2, #5
 800bc8c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bc8e:	4b5c      	ldr	r3, [pc, #368]	; (800be00 <perfect_run+0x584>)
 800bc90:	2200      	movs	r2, #0
 800bc92:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bc94:	4b5b      	ldr	r3, [pc, #364]	; (800be04 <perfect_run+0x588>)
 800bc96:	2202      	movs	r2, #2
 800bc98:	701a      	strb	r2, [r3, #0]
					accel_hs = 25000;
 800bc9a:	4b5b      	ldr	r3, [pc, #364]	; (800be08 <perfect_run+0x58c>)
 800bc9c:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800bca0:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 3000;
 800bca2:	4b5a      	ldr	r3, [pc, #360]	; (800be0c <perfect_run+0x590>)
 800bca4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800bca8:	801a      	strh	r2, [r3, #0]

//					pass_mode = 3;						//a半区画ベースでroute配列生成

					goal_x = GOAL_X;
 800bcaa:	4b59      	ldr	r3, [pc, #356]	; (800be10 <perfect_run+0x594>)
 800bcac:	2207      	movs	r2, #7
 800bcae:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bcb0:	4b58      	ldr	r3, [pc, #352]	; (800be14 <perfect_run+0x598>)
 800bcb2:	2207      	movs	r2, #7
 800bcb4:	701a      	strb	r2, [r3, #0]

					get_base();
 800bcb6:	f006 f9a5 	bl	8012004 <get_base>

					searchF3();
 800bcba:	f003 fe47 	bl	800f94c <searchF3>
					HAL_Delay(2000);
 800bcbe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bcc2:	f7f5 f9ab 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bcc6:	4b53      	ldr	r3, [pc, #332]	; (800be14 <perfect_run+0x598>)
 800bcc8:	2200      	movs	r2, #0
 800bcca:	701a      	strb	r2, [r3, #0]
 800bccc:	4b51      	ldr	r3, [pc, #324]	; (800be14 <perfect_run+0x598>)
 800bcce:	781a      	ldrb	r2, [r3, #0]
 800bcd0:	4b4f      	ldr	r3, [pc, #316]	; (800be10 <perfect_run+0x594>)
 800bcd2:	701a      	strb	r2, [r3, #0]
					searchF3();
 800bcd4:	f003 fe3a 	bl	800f94c <searchF3>

					goal_x = GOAL_X;
 800bcd8:	4b4d      	ldr	r3, [pc, #308]	; (800be10 <perfect_run+0x594>)
 800bcda:	2207      	movs	r2, #7
 800bcdc:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bcde:	4b4d      	ldr	r3, [pc, #308]	; (800be14 <perfect_run+0x598>)
 800bce0:	2207      	movs	r2, #7
 800bce2:	701a      	strb	r2, [r3, #0]
					break;
 800bce4:	e081      	b.n	800bdea <perfect_run+0x56e>

				case 6:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-4.\n");
 800bce6:	484c      	ldr	r0, [pc, #304]	; (800be18 <perfect_run+0x59c>)
 800bce8:	f007 f90c 	bl	8012f04 <puts>
					MF.FLAG.SCND = 1;
 800bcec:	4a42      	ldr	r2, [pc, #264]	; (800bdf8 <perfect_run+0x57c>)
 800bcee:	8813      	ldrh	r3, [r2, #0]
 800bcf0:	f043 0320 	orr.w	r3, r3, #32
 800bcf4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bcf6:	4a40      	ldr	r2, [pc, #256]	; (800bdf8 <perfect_run+0x57c>)
 800bcf8:	8813      	ldrh	r3, [r2, #0]
 800bcfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bcfe:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bd00:	4a3d      	ldr	r2, [pc, #244]	; (800bdf8 <perfect_run+0x57c>)
 800bd02:	8813      	ldrh	r3, [r2, #0]
 800bd04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bd08:	8013      	strh	r3, [r2, #0]
					run_mode = 5;
 800bd0a:	4b3c      	ldr	r3, [pc, #240]	; (800bdfc <perfect_run+0x580>)
 800bd0c:	2205      	movs	r2, #5
 800bd0e:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bd10:	4b3b      	ldr	r3, [pc, #236]	; (800be00 <perfect_run+0x584>)
 800bd12:	2200      	movs	r2, #0
 800bd14:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bd16:	4b3b      	ldr	r3, [pc, #236]	; (800be04 <perfect_run+0x588>)
 800bd18:	2202      	movs	r2, #2
 800bd1a:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800bd1c:	4b3a      	ldr	r3, [pc, #232]	; (800be08 <perfect_run+0x58c>)
 800bd1e:	f242 7210 	movw	r2, #10000	; 0x2710
 800bd22:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800bd24:	4b39      	ldr	r3, [pc, #228]	; (800be0c <perfect_run+0x590>)
 800bd26:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800bd2a:	801a      	strh	r2, [r3, #0]

//					pass_mode = 3;						//a半区画ベースでroute配列生成

					goal_x = GOAL_X;
 800bd2c:	4b38      	ldr	r3, [pc, #224]	; (800be10 <perfect_run+0x594>)
 800bd2e:	2207      	movs	r2, #7
 800bd30:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bd32:	4b38      	ldr	r3, [pc, #224]	; (800be14 <perfect_run+0x598>)
 800bd34:	2207      	movs	r2, #7
 800bd36:	701a      	strb	r2, [r3, #0]

					get_base();
 800bd38:	f006 f964 	bl	8012004 <get_base>

					searchF3();
 800bd3c:	f003 fe06 	bl	800f94c <searchF3>
					HAL_Delay(2000);
 800bd40:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bd44:	f7f5 f96a 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bd48:	4b32      	ldr	r3, [pc, #200]	; (800be14 <perfect_run+0x598>)
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	701a      	strb	r2, [r3, #0]
 800bd4e:	4b31      	ldr	r3, [pc, #196]	; (800be14 <perfect_run+0x598>)
 800bd50:	781a      	ldrb	r2, [r3, #0]
 800bd52:	4b2f      	ldr	r3, [pc, #188]	; (800be10 <perfect_run+0x594>)
 800bd54:	701a      	strb	r2, [r3, #0]
					searchF3();
 800bd56:	f003 fdf9 	bl	800f94c <searchF3>

					goal_x = GOAL_X;
 800bd5a:	4b2d      	ldr	r3, [pc, #180]	; (800be10 <perfect_run+0x594>)
 800bd5c:	2207      	movs	r2, #7
 800bd5e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bd60:	4b2c      	ldr	r3, [pc, #176]	; (800be14 <perfect_run+0x598>)
 800bd62:	2207      	movs	r2, #7
 800bd64:	701a      	strb	r2, [r3, #0]
					break;
 800bd66:	e040      	b.n	800bdea <perfect_run+0x56e>

				case 7:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-4.\n");
 800bd68:	482b      	ldr	r0, [pc, #172]	; (800be18 <perfect_run+0x59c>)
 800bd6a:	f007 f8cb 	bl	8012f04 <puts>
					MF.FLAG.SCND = 1;
 800bd6e:	4a22      	ldr	r2, [pc, #136]	; (800bdf8 <perfect_run+0x57c>)
 800bd70:	8813      	ldrh	r3, [r2, #0]
 800bd72:	f043 0320 	orr.w	r3, r3, #32
 800bd76:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bd78:	4a1f      	ldr	r2, [pc, #124]	; (800bdf8 <perfect_run+0x57c>)
 800bd7a:	8813      	ldrh	r3, [r2, #0]
 800bd7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bd80:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bd82:	4a1d      	ldr	r2, [pc, #116]	; (800bdf8 <perfect_run+0x57c>)
 800bd84:	8813      	ldrh	r3, [r2, #0]
 800bd86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bd8a:	8013      	strh	r3, [r2, #0]
					run_mode = 5;
 800bd8c:	4b1b      	ldr	r3, [pc, #108]	; (800bdfc <perfect_run+0x580>)
 800bd8e:	2205      	movs	r2, #5
 800bd90:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bd92:	4b1b      	ldr	r3, [pc, #108]	; (800be00 <perfect_run+0x584>)
 800bd94:	2200      	movs	r2, #0
 800bd96:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bd98:	4b1a      	ldr	r3, [pc, #104]	; (800be04 <perfect_run+0x588>)
 800bd9a:	2202      	movs	r2, #2
 800bd9c:	701a      	strb	r2, [r3, #0]
					accel_hs = 22000;
 800bd9e:	4b1a      	ldr	r3, [pc, #104]	; (800be08 <perfect_run+0x58c>)
 800bda0:	f245 52f0 	movw	r2, #22000	; 0x55f0
 800bda4:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 3000;
 800bda6:	4b19      	ldr	r3, [pc, #100]	; (800be0c <perfect_run+0x590>)
 800bda8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800bdac:	801a      	strh	r2, [r3, #0]

//					pass_mode = 3;						//a半区画ベースでroute配列生成

					goal_x = GOAL_X;
 800bdae:	4b18      	ldr	r3, [pc, #96]	; (800be10 <perfect_run+0x594>)
 800bdb0:	2207      	movs	r2, #7
 800bdb2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bdb4:	4b17      	ldr	r3, [pc, #92]	; (800be14 <perfect_run+0x598>)
 800bdb6:	2207      	movs	r2, #7
 800bdb8:	701a      	strb	r2, [r3, #0]

					get_base();
 800bdba:	f006 f923 	bl	8012004 <get_base>

					searchF3();
 800bdbe:	f003 fdc5 	bl	800f94c <searchF3>
					HAL_Delay(2000);
 800bdc2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bdc6:	f7f5 f929 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bdca:	4b12      	ldr	r3, [pc, #72]	; (800be14 <perfect_run+0x598>)
 800bdcc:	2200      	movs	r2, #0
 800bdce:	701a      	strb	r2, [r3, #0]
 800bdd0:	4b10      	ldr	r3, [pc, #64]	; (800be14 <perfect_run+0x598>)
 800bdd2:	781a      	ldrb	r2, [r3, #0]
 800bdd4:	4b0e      	ldr	r3, [pc, #56]	; (800be10 <perfect_run+0x594>)
 800bdd6:	701a      	strb	r2, [r3, #0]
					searchF3();
 800bdd8:	f003 fdb8 	bl	800f94c <searchF3>

					goal_x = GOAL_X;
 800bddc:	4b0c      	ldr	r3, [pc, #48]	; (800be10 <perfect_run+0x594>)
 800bdde:	2207      	movs	r2, #7
 800bde0:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bde2:	4b0c      	ldr	r3, [pc, #48]	; (800be14 <perfect_run+0x598>)
 800bde4:	2207      	movs	r2, #7
 800bde6:	701a      	strb	r2, [r3, #0]
					break;
 800bde8:	bf00      	nop
			  }
			  dist_l = 0;
 800bdea:	4b0c      	ldr	r3, [pc, #48]	; (800be1c <perfect_run+0x5a0>)
 800bdec:	f04f 0200 	mov.w	r2, #0
 800bdf0:	601a      	str	r2, [r3, #0]
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800bdf2:	e54c      	b.n	800b88e <perfect_run+0x12>
 800bdf4:	0801424c 	.word	0x0801424c
 800bdf8:	20000fa8 	.word	0x20000fa8
 800bdfc:	20000456 	.word	0x20000456
 800be00:	2000164c 	.word	0x2000164c
 800be04:	20000c31 	.word	0x20000c31
 800be08:	20000454 	.word	0x20000454
 800be0c:	20000ffc 	.word	0x20000ffc
 800be10:	20000c30 	.word	0x20000c30
 800be14:	20000b8c 	.word	0x20000b8c
 800be18:	0801426c 	.word	0x0801426c
 800be1c:	20001648 	.word	0x20001648

0800be20 <perfect_slalom>:
//perfect_slalom
// a本番用スラローム走行モード
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_slalom(void){
 800be20:	b580      	push	{r7, lr}
 800be22:	b082      	sub	sp, #8
 800be24:	af00      	add	r7, sp, #0

	int mode = 0;
 800be26:	2300      	movs	r3, #0
 800be28:	607b      	str	r3, [r7, #4]
	printf("Perfect Slalom, Mode : %d\n", mode);
 800be2a:	6879      	ldr	r1, [r7, #4]
 800be2c:	48b6      	ldr	r0, [pc, #728]	; (800c108 <perfect_slalom+0x2e8>)
 800be2e:	f006 fff5 	bl	8012e1c <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	b2db      	uxtb	r3, r3
 800be36:	f003 0301 	and.w	r3, r3, #1
 800be3a:	b2d8      	uxtb	r0, r3
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	b2db      	uxtb	r3, r3
 800be40:	f003 0302 	and.w	r3, r3, #2
 800be44:	b2d9      	uxtb	r1, r3
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	b2db      	uxtb	r3, r3
 800be4a:	f003 0304 	and.w	r3, r3, #4
 800be4e:	b2db      	uxtb	r3, r3
 800be50:	461a      	mov	r2, r3
 800be52:	f006 f92f 	bl	80120b4 <led_write>
		  if(dist_r >= 20){
 800be56:	4bad      	ldr	r3, [pc, #692]	; (800c10c <perfect_slalom+0x2ec>)
 800be58:	edd3 7a00 	vldr	s15, [r3]
 800be5c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800be60:	eef4 7ac7 	vcmpe.f32	s15, s14
 800be64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be68:	db0f      	blt.n	800be8a <perfect_slalom+0x6a>
			  mode++;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	3301      	adds	r3, #1
 800be6e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800be70:	4ba6      	ldr	r3, [pc, #664]	; (800c10c <perfect_slalom+0x2ec>)
 800be72:	f04f 0200 	mov.w	r2, #0
 800be76:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2b07      	cmp	r3, #7
 800be7c:	dd01      	ble.n	800be82 <perfect_slalom+0x62>
				  mode = 0;
 800be7e:	2300      	movs	r3, #0
 800be80:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800be82:	6879      	ldr	r1, [r7, #4]
 800be84:	48a2      	ldr	r0, [pc, #648]	; (800c110 <perfect_slalom+0x2f0>)
 800be86:	f006 ffc9 	bl	8012e1c <iprintf>
		  }
		  if(dist_r <= -20){
 800be8a:	4ba0      	ldr	r3, [pc, #640]	; (800c10c <perfect_slalom+0x2ec>)
 800be8c:	edd3 7a00 	vldr	s15, [r3]
 800be90:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800be94:	eef4 7ac7 	vcmpe.f32	s15, s14
 800be98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be9c:	d80f      	bhi.n	800bebe <perfect_slalom+0x9e>
			  mode--;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	3b01      	subs	r3, #1
 800bea2:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800bea4:	4b99      	ldr	r3, [pc, #612]	; (800c10c <perfect_slalom+0x2ec>)
 800bea6:	f04f 0200 	mov.w	r2, #0
 800beaa:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	da01      	bge.n	800beb6 <perfect_slalom+0x96>
				  mode = 7;
 800beb2:	2307      	movs	r3, #7
 800beb4:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800beb6:	6879      	ldr	r1, [r7, #4]
 800beb8:	4895      	ldr	r0, [pc, #596]	; (800c110 <perfect_slalom+0x2f0>)
 800beba:	f006 ffaf 	bl	8012e1c <iprintf>
		  }
		  if(dist_l <= -20){
 800bebe:	4b95      	ldr	r3, [pc, #596]	; (800c114 <perfect_slalom+0x2f4>)
 800bec0:	edd3 7a00 	vldr	s15, [r3]
 800bec4:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800bec8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800becc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bed0:	f200 81c1 	bhi.w	800c256 <perfect_slalom+0x436>
			  dist_l = 0;
 800bed4:	4b8f      	ldr	r3, [pc, #572]	; (800c114 <perfect_slalom+0x2f4>)
 800bed6:	f04f 0200 	mov.w	r2, #0
 800beda:	601a      	str	r2, [r3, #0]
			  drive_ready();
 800bedc:	f7f8 fec6 	bl	8004c6c <drive_ready>

			  switch(mode){
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2b07      	cmp	r3, #7
 800bee4:	f200 81b3 	bhi.w	800c24e <perfect_slalom+0x42e>
 800bee8:	a201      	add	r2, pc, #4	; (adr r2, 800bef0 <perfect_slalom+0xd0>)
 800beea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beee:	bf00      	nop
 800bef0:	0800c24f 	.word	0x0800c24f
 800bef4:	0800bf11 	.word	0x0800bf11
 800bef8:	0800bf93 	.word	0x0800bf93
 800befc:	0800c015 	.word	0x0800c015
 800bf00:	0800c087 	.word	0x0800c087
 800bf04:	0800c145 	.word	0x0800c145
 800bf08:	0800c1c7 	.word	0x0800c1c7
 800bf0c:	0800c249 	.word	0x0800c249
				case 0:
					break;

				case 1:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800bf10:	4881      	ldr	r0, [pc, #516]	; (800c118 <perfect_slalom+0x2f8>)
 800bf12:	f006 fff7 	bl	8012f04 <puts>
					MF.FLAG.SCND = 0;
 800bf16:	4a81      	ldr	r2, [pc, #516]	; (800c11c <perfect_slalom+0x2fc>)
 800bf18:	8813      	ldrh	r3, [r2, #0]
 800bf1a:	f36f 1345 	bfc	r3, #5, #1
 800bf1e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bf20:	4a7e      	ldr	r2, [pc, #504]	; (800c11c <perfect_slalom+0x2fc>)
 800bf22:	8813      	ldrh	r3, [r2, #0]
 800bf24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bf28:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800bf2a:	4a7c      	ldr	r2, [pc, #496]	; (800c11c <perfect_slalom+0x2fc>)
 800bf2c:	8813      	ldrh	r3, [r2, #0]
 800bf2e:	f36f 238a 	bfc	r3, #10, #1
 800bf32:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800bf34:	4b7a      	ldr	r3, [pc, #488]	; (800c120 <perfect_slalom+0x300>)
 800bf36:	2202      	movs	r2, #2
 800bf38:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bf3a:	4b7a      	ldr	r3, [pc, #488]	; (800c124 <perfect_slalom+0x304>)
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bf40:	4b79      	ldr	r3, [pc, #484]	; (800c128 <perfect_slalom+0x308>)
 800bf42:	2202      	movs	r2, #2
 800bf44:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800bf46:	4b79      	ldr	r3, [pc, #484]	; (800c12c <perfect_slalom+0x30c>)
 800bf48:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf4c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800bf4e:	4b78      	ldr	r3, [pc, #480]	; (800c130 <perfect_slalom+0x310>)
 800bf50:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800bf54:	801a      	strh	r2, [r3, #0]

					goal_x = 7;
 800bf56:	4b77      	ldr	r3, [pc, #476]	; (800c134 <perfect_slalom+0x314>)
 800bf58:	2207      	movs	r2, #7
 800bf5a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bf5c:	4b76      	ldr	r3, [pc, #472]	; (800c138 <perfect_slalom+0x318>)
 800bf5e:	2207      	movs	r2, #7
 800bf60:	701a      	strb	r2, [r3, #0]

					get_base();
 800bf62:	f006 f84f 	bl	8012004 <get_base>

					searchC();
 800bf66:	f003 f877 	bl	800f058 <searchC>
					HAL_Delay(2000);
 800bf6a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bf6e:	f7f5 f855 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bf72:	4b71      	ldr	r3, [pc, #452]	; (800c138 <perfect_slalom+0x318>)
 800bf74:	2200      	movs	r2, #0
 800bf76:	701a      	strb	r2, [r3, #0]
 800bf78:	4b6f      	ldr	r3, [pc, #444]	; (800c138 <perfect_slalom+0x318>)
 800bf7a:	781a      	ldrb	r2, [r3, #0]
 800bf7c:	4b6d      	ldr	r3, [pc, #436]	; (800c134 <perfect_slalom+0x314>)
 800bf7e:	701a      	strb	r2, [r3, #0]
					searchC();
 800bf80:	f003 f86a 	bl	800f058 <searchC>

					goal_x = 7;
 800bf84:	4b6b      	ldr	r3, [pc, #428]	; (800c134 <perfect_slalom+0x314>)
 800bf86:	2207      	movs	r2, #7
 800bf88:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bf8a:	4b6b      	ldr	r3, [pc, #428]	; (800c138 <perfect_slalom+0x318>)
 800bf8c:	2207      	movs	r2, #7
 800bf8e:	701a      	strb	r2, [r3, #0]
					break;
 800bf90:	e15d      	b.n	800c24e <perfect_slalom+0x42e>

				case 2:
					//----a二次走行スラローム+既知区間加速走行 speed1----
					printf("First Run. (Continuous)\n");
 800bf92:	486a      	ldr	r0, [pc, #424]	; (800c13c <perfect_slalom+0x31c>)
 800bf94:	f006 ffb6 	bl	8012f04 <puts>
					MF.FLAG.SCND = 1;
 800bf98:	4a60      	ldr	r2, [pc, #384]	; (800c11c <perfect_slalom+0x2fc>)
 800bf9a:	8813      	ldrh	r3, [r2, #0]
 800bf9c:	f043 0320 	orr.w	r3, r3, #32
 800bfa0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bfa2:	4a5e      	ldr	r2, [pc, #376]	; (800c11c <perfect_slalom+0x2fc>)
 800bfa4:	8813      	ldrh	r3, [r2, #0]
 800bfa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bfaa:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bfac:	4a5b      	ldr	r2, [pc, #364]	; (800c11c <perfect_slalom+0x2fc>)
 800bfae:	8813      	ldrh	r3, [r2, #0]
 800bfb0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bfb4:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800bfb6:	4b5a      	ldr	r3, [pc, #360]	; (800c120 <perfect_slalom+0x300>)
 800bfb8:	2202      	movs	r2, #2
 800bfba:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bfbc:	4b59      	ldr	r3, [pc, #356]	; (800c124 <perfect_slalom+0x304>)
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bfc2:	4b59      	ldr	r3, [pc, #356]	; (800c128 <perfect_slalom+0x308>)
 800bfc4:	2202      	movs	r2, #2
 800bfc6:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800bfc8:	4b58      	ldr	r3, [pc, #352]	; (800c12c <perfect_slalom+0x30c>)
 800bfca:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfce:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800bfd0:	4b57      	ldr	r3, [pc, #348]	; (800c130 <perfect_slalom+0x310>)
 800bfd2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800bfd6:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800bfd8:	4b56      	ldr	r3, [pc, #344]	; (800c134 <perfect_slalom+0x314>)
 800bfda:	2207      	movs	r2, #7
 800bfdc:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bfde:	4b56      	ldr	r3, [pc, #344]	; (800c138 <perfect_slalom+0x318>)
 800bfe0:	2207      	movs	r2, #7
 800bfe2:	701a      	strb	r2, [r3, #0]

					get_base();
 800bfe4:	f006 f80e 	bl	8012004 <get_base>

					searchD();
 800bfe8:	f003 fb1a 	bl	800f620 <searchD>
					HAL_Delay(2000);
 800bfec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bff0:	f7f5 f814 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bff4:	4b50      	ldr	r3, [pc, #320]	; (800c138 <perfect_slalom+0x318>)
 800bff6:	2200      	movs	r2, #0
 800bff8:	701a      	strb	r2, [r3, #0]
 800bffa:	4b4f      	ldr	r3, [pc, #316]	; (800c138 <perfect_slalom+0x318>)
 800bffc:	781a      	ldrb	r2, [r3, #0]
 800bffe:	4b4d      	ldr	r3, [pc, #308]	; (800c134 <perfect_slalom+0x314>)
 800c000:	701a      	strb	r2, [r3, #0]
					searchD();
 800c002:	f003 fb0d 	bl	800f620 <searchD>

					goal_x = 7;
 800c006:	4b4b      	ldr	r3, [pc, #300]	; (800c134 <perfect_slalom+0x314>)
 800c008:	2207      	movs	r2, #7
 800c00a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c00c:	4b4a      	ldr	r3, [pc, #296]	; (800c138 <perfect_slalom+0x318>)
 800c00e:	2207      	movs	r2, #7
 800c010:	701a      	strb	r2, [r3, #0]
					break;
 800c012:	e11c      	b.n	800c24e <perfect_slalom+0x42e>

				case 3:
					//----a二次探索スラロームHigh Speed----
					printf("Second Run. (Slalom)\n");
 800c014:	484a      	ldr	r0, [pc, #296]	; (800c140 <perfect_slalom+0x320>)
 800c016:	f006 ff75 	bl	8012f04 <puts>
					MF.FLAG.SCND = 1;
 800c01a:	4a40      	ldr	r2, [pc, #256]	; (800c11c <perfect_slalom+0x2fc>)
 800c01c:	8813      	ldrh	r3, [r2, #0]
 800c01e:	f043 0320 	orr.w	r3, r3, #32
 800c022:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 800c024:	4a3d      	ldr	r2, [pc, #244]	; (800c11c <perfect_slalom+0x2fc>)
 800c026:	8813      	ldrh	r3, [r2, #0]
 800c028:	f36f 2349 	bfc	r3, #9, #1
 800c02c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c02e:	4a3b      	ldr	r2, [pc, #236]	; (800c11c <perfect_slalom+0x2fc>)
 800c030:	8813      	ldrh	r3, [r2, #0]
 800c032:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c036:	8013      	strh	r3, [r2, #0]
					run_mode = 3;
 800c038:	4b39      	ldr	r3, [pc, #228]	; (800c120 <perfect_slalom+0x300>)
 800c03a:	2203      	movs	r2, #3
 800c03c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c03e:	4b39      	ldr	r3, [pc, #228]	; (800c124 <perfect_slalom+0x304>)
 800c040:	2200      	movs	r2, #0
 800c042:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c044:	4b38      	ldr	r3, [pc, #224]	; (800c128 <perfect_slalom+0x308>)
 800c046:	2202      	movs	r2, #2
 800c048:	701a      	strb	r2, [r3, #0]
					goal_x = 7;
 800c04a:	4b3a      	ldr	r3, [pc, #232]	; (800c134 <perfect_slalom+0x314>)
 800c04c:	2207      	movs	r2, #7
 800c04e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c050:	4b39      	ldr	r3, [pc, #228]	; (800c138 <perfect_slalom+0x318>)
 800c052:	2207      	movs	r2, #7
 800c054:	701a      	strb	r2, [r3, #0]

					get_base();
 800c056:	f005 ffd5 	bl	8012004 <get_base>

					searchC();
 800c05a:	f002 fffd 	bl	800f058 <searchC>
					HAL_Delay(2000);
 800c05e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c062:	f7f4 ffdb 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c066:	4b34      	ldr	r3, [pc, #208]	; (800c138 <perfect_slalom+0x318>)
 800c068:	2200      	movs	r2, #0
 800c06a:	701a      	strb	r2, [r3, #0]
 800c06c:	4b32      	ldr	r3, [pc, #200]	; (800c138 <perfect_slalom+0x318>)
 800c06e:	781a      	ldrb	r2, [r3, #0]
 800c070:	4b30      	ldr	r3, [pc, #192]	; (800c134 <perfect_slalom+0x314>)
 800c072:	701a      	strb	r2, [r3, #0]
					searchC();
 800c074:	f002 fff0 	bl	800f058 <searchC>
					goal_x = 7;
 800c078:	4b2e      	ldr	r3, [pc, #184]	; (800c134 <perfect_slalom+0x314>)
 800c07a:	2207      	movs	r2, #7
 800c07c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c07e:	4b2e      	ldr	r3, [pc, #184]	; (800c138 <perfect_slalom+0x318>)
 800c080:	2207      	movs	r2, #7
 800c082:	701a      	strb	r2, [r3, #0]
					break;
 800c084:	e0e3      	b.n	800c24e <perfect_slalom+0x42e>

				case 4:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800c086:	482e      	ldr	r0, [pc, #184]	; (800c140 <perfect_slalom+0x320>)
 800c088:	f006 ff3c 	bl	8012f04 <puts>
					MF.FLAG.SCND = 1;
 800c08c:	4a23      	ldr	r2, [pc, #140]	; (800c11c <perfect_slalom+0x2fc>)
 800c08e:	8813      	ldrh	r3, [r2, #0]
 800c090:	f043 0320 	orr.w	r3, r3, #32
 800c094:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c096:	4a21      	ldr	r2, [pc, #132]	; (800c11c <perfect_slalom+0x2fc>)
 800c098:	8813      	ldrh	r3, [r2, #0]
 800c09a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c09e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c0a0:	4a1e      	ldr	r2, [pc, #120]	; (800c11c <perfect_slalom+0x2fc>)
 800c0a2:	8813      	ldrh	r3, [r2, #0]
 800c0a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c0a8:	8013      	strh	r3, [r2, #0]
					run_mode = 3;
 800c0aa:	4b1d      	ldr	r3, [pc, #116]	; (800c120 <perfect_slalom+0x300>)
 800c0ac:	2203      	movs	r2, #3
 800c0ae:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c0b0:	4b1c      	ldr	r3, [pc, #112]	; (800c124 <perfect_slalom+0x304>)
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c0b6:	4b1c      	ldr	r3, [pc, #112]	; (800c128 <perfect_slalom+0x308>)
 800c0b8:	2202      	movs	r2, #2
 800c0ba:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800c0bc:	4b1b      	ldr	r3, [pc, #108]	; (800c12c <perfect_slalom+0x30c>)
 800c0be:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0c2:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800c0c4:	4b1a      	ldr	r3, [pc, #104]	; (800c130 <perfect_slalom+0x310>)
 800c0c6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800c0ca:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800c0cc:	4b19      	ldr	r3, [pc, #100]	; (800c134 <perfect_slalom+0x314>)
 800c0ce:	2207      	movs	r2, #7
 800c0d0:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c0d2:	4b19      	ldr	r3, [pc, #100]	; (800c138 <perfect_slalom+0x318>)
 800c0d4:	2207      	movs	r2, #7
 800c0d6:	701a      	strb	r2, [r3, #0]

					get_base();
 800c0d8:	f005 ff94 	bl	8012004 <get_base>

					searchD();
 800c0dc:	f003 faa0 	bl	800f620 <searchD>
					HAL_Delay(2000);
 800c0e0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c0e4:	f7f4 ff9a 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c0e8:	4b13      	ldr	r3, [pc, #76]	; (800c138 <perfect_slalom+0x318>)
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	701a      	strb	r2, [r3, #0]
 800c0ee:	4b12      	ldr	r3, [pc, #72]	; (800c138 <perfect_slalom+0x318>)
 800c0f0:	781a      	ldrb	r2, [r3, #0]
 800c0f2:	4b10      	ldr	r3, [pc, #64]	; (800c134 <perfect_slalom+0x314>)
 800c0f4:	701a      	strb	r2, [r3, #0]
					searchD();
 800c0f6:	f003 fa93 	bl	800f620 <searchD>

					goal_x = 7;
 800c0fa:	4b0e      	ldr	r3, [pc, #56]	; (800c134 <perfect_slalom+0x314>)
 800c0fc:	2207      	movs	r2, #7
 800c0fe:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c100:	4b0d      	ldr	r3, [pc, #52]	; (800c138 <perfect_slalom+0x318>)
 800c102:	2207      	movs	r2, #7
 800c104:	701a      	strb	r2, [r3, #0]
					break;
 800c106:	e0a2      	b.n	800c24e <perfect_slalom+0x42e>
 800c108:	080143d8 	.word	0x080143d8
 800c10c:	20000b2c 	.word	0x20000b2c
 800c110:	08014058 	.word	0x08014058
 800c114:	20001648 	.word	0x20001648
 800c118:	08014318 	.word	0x08014318
 800c11c:	20000fa8 	.word	0x20000fa8
 800c120:	20000456 	.word	0x20000456
 800c124:	2000164c 	.word	0x2000164c
 800c128:	20000c31 	.word	0x20000c31
 800c12c:	20000454 	.word	0x20000454
 800c130:	20000ffc 	.word	0x20000ffc
 800c134:	20000c30 	.word	0x20000c30
 800c138:	20000b8c 	.word	0x20000b8c
 800c13c:	08014324 	.word	0x08014324
 800c140:	08014370 	.word	0x08014370

				case 5:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800c144:	4844      	ldr	r0, [pc, #272]	; (800c258 <perfect_slalom+0x438>)
 800c146:	f006 fedd 	bl	8012f04 <puts>
					MF.FLAG.SCND = 1;
 800c14a:	4a44      	ldr	r2, [pc, #272]	; (800c25c <perfect_slalom+0x43c>)
 800c14c:	8813      	ldrh	r3, [r2, #0]
 800c14e:	f043 0320 	orr.w	r3, r3, #32
 800c152:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c154:	4a41      	ldr	r2, [pc, #260]	; (800c25c <perfect_slalom+0x43c>)
 800c156:	8813      	ldrh	r3, [r2, #0]
 800c158:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c15c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c15e:	4a3f      	ldr	r2, [pc, #252]	; (800c25c <perfect_slalom+0x43c>)
 800c160:	8813      	ldrh	r3, [r2, #0]
 800c162:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c166:	8013      	strh	r3, [r2, #0]
					run_mode = 3;
 800c168:	4b3d      	ldr	r3, [pc, #244]	; (800c260 <perfect_slalom+0x440>)
 800c16a:	2203      	movs	r2, #3
 800c16c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c16e:	4b3d      	ldr	r3, [pc, #244]	; (800c264 <perfect_slalom+0x444>)
 800c170:	2200      	movs	r2, #0
 800c172:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c174:	4b3c      	ldr	r3, [pc, #240]	; (800c268 <perfect_slalom+0x448>)
 800c176:	2202      	movs	r2, #2
 800c178:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800c17a:	4b3c      	ldr	r3, [pc, #240]	; (800c26c <perfect_slalom+0x44c>)
 800c17c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c180:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800c182:	4b3b      	ldr	r3, [pc, #236]	; (800c270 <perfect_slalom+0x450>)
 800c184:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c188:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800c18a:	4b3a      	ldr	r3, [pc, #232]	; (800c274 <perfect_slalom+0x454>)
 800c18c:	2207      	movs	r2, #7
 800c18e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c190:	4b39      	ldr	r3, [pc, #228]	; (800c278 <perfect_slalom+0x458>)
 800c192:	2207      	movs	r2, #7
 800c194:	701a      	strb	r2, [r3, #0]

					get_base();
 800c196:	f005 ff35 	bl	8012004 <get_base>

					searchD();
 800c19a:	f003 fa41 	bl	800f620 <searchD>
					HAL_Delay(2000);
 800c19e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c1a2:	f7f4 ff3b 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c1a6:	4b34      	ldr	r3, [pc, #208]	; (800c278 <perfect_slalom+0x458>)
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	701a      	strb	r2, [r3, #0]
 800c1ac:	4b32      	ldr	r3, [pc, #200]	; (800c278 <perfect_slalom+0x458>)
 800c1ae:	781a      	ldrb	r2, [r3, #0]
 800c1b0:	4b30      	ldr	r3, [pc, #192]	; (800c274 <perfect_slalom+0x454>)
 800c1b2:	701a      	strb	r2, [r3, #0]
					searchD();
 800c1b4:	f003 fa34 	bl	800f620 <searchD>

					goal_x = 7;
 800c1b8:	4b2e      	ldr	r3, [pc, #184]	; (800c274 <perfect_slalom+0x454>)
 800c1ba:	2207      	movs	r2, #7
 800c1bc:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c1be:	4b2e      	ldr	r3, [pc, #184]	; (800c278 <perfect_slalom+0x458>)
 800c1c0:	2207      	movs	r2, #7
 800c1c2:	701a      	strb	r2, [r3, #0]
					break;
 800c1c4:	e043      	b.n	800c24e <perfect_slalom+0x42e>

				case 6:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800c1c6:	4824      	ldr	r0, [pc, #144]	; (800c258 <perfect_slalom+0x438>)
 800c1c8:	f006 fe9c 	bl	8012f04 <puts>
					MF.FLAG.SCND = 1;
 800c1cc:	4a23      	ldr	r2, [pc, #140]	; (800c25c <perfect_slalom+0x43c>)
 800c1ce:	8813      	ldrh	r3, [r2, #0]
 800c1d0:	f043 0320 	orr.w	r3, r3, #32
 800c1d4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c1d6:	4a21      	ldr	r2, [pc, #132]	; (800c25c <perfect_slalom+0x43c>)
 800c1d8:	8813      	ldrh	r3, [r2, #0]
 800c1da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c1de:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c1e0:	4a1e      	ldr	r2, [pc, #120]	; (800c25c <perfect_slalom+0x43c>)
 800c1e2:	8813      	ldrh	r3, [r2, #0]
 800c1e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c1e8:	8013      	strh	r3, [r2, #0]
					run_mode = 3;
 800c1ea:	4b1d      	ldr	r3, [pc, #116]	; (800c260 <perfect_slalom+0x440>)
 800c1ec:	2203      	movs	r2, #3
 800c1ee:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c1f0:	4b1c      	ldr	r3, [pc, #112]	; (800c264 <perfect_slalom+0x444>)
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c1f6:	4b1c      	ldr	r3, [pc, #112]	; (800c268 <perfect_slalom+0x448>)
 800c1f8:	2202      	movs	r2, #2
 800c1fa:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800c1fc:	4b1b      	ldr	r3, [pc, #108]	; (800c26c <perfect_slalom+0x44c>)
 800c1fe:	f242 7210 	movw	r2, #10000	; 0x2710
 800c202:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800c204:	4b1a      	ldr	r3, [pc, #104]	; (800c270 <perfect_slalom+0x450>)
 800c206:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c20a:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800c20c:	4b19      	ldr	r3, [pc, #100]	; (800c274 <perfect_slalom+0x454>)
 800c20e:	2207      	movs	r2, #7
 800c210:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c212:	4b19      	ldr	r3, [pc, #100]	; (800c278 <perfect_slalom+0x458>)
 800c214:	2207      	movs	r2, #7
 800c216:	701a      	strb	r2, [r3, #0]

					get_base();
 800c218:	f005 fef4 	bl	8012004 <get_base>

					searchD();
 800c21c:	f003 fa00 	bl	800f620 <searchD>
					HAL_Delay(2000);
 800c220:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c224:	f7f4 fefa 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c228:	4b13      	ldr	r3, [pc, #76]	; (800c278 <perfect_slalom+0x458>)
 800c22a:	2200      	movs	r2, #0
 800c22c:	701a      	strb	r2, [r3, #0]
 800c22e:	4b12      	ldr	r3, [pc, #72]	; (800c278 <perfect_slalom+0x458>)
 800c230:	781a      	ldrb	r2, [r3, #0]
 800c232:	4b10      	ldr	r3, [pc, #64]	; (800c274 <perfect_slalom+0x454>)
 800c234:	701a      	strb	r2, [r3, #0]
					searchD();
 800c236:	f003 f9f3 	bl	800f620 <searchD>

					goal_x = 7;
 800c23a:	4b0e      	ldr	r3, [pc, #56]	; (800c274 <perfect_slalom+0x454>)
 800c23c:	2207      	movs	r2, #7
 800c23e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c240:	4b0d      	ldr	r3, [pc, #52]	; (800c278 <perfect_slalom+0x458>)
 800c242:	2207      	movs	r2, #7
 800c244:	701a      	strb	r2, [r3, #0]
					break;
 800c246:	e002      	b.n	800c24e <perfect_slalom+0x42e>

				case 7:
					perfect_pass();
 800c248:	f000 f81a 	bl	800c280 <perfect_pass>
					break;
 800c24c:	bf00      	nop
			  }
			  dist_l = 0;
 800c24e:	4b0b      	ldr	r3, [pc, #44]	; (800c27c <perfect_slalom+0x45c>)
 800c250:	f04f 0200 	mov.w	r2, #0
 800c254:	601a      	str	r2, [r3, #0]
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800c256:	e5ec      	b.n	800be32 <perfect_slalom+0x12>
 800c258:	08014370 	.word	0x08014370
 800c25c:	20000fa8 	.word	0x20000fa8
 800c260:	20000456 	.word	0x20000456
 800c264:	2000164c 	.word	0x2000164c
 800c268:	20000c31 	.word	0x20000c31
 800c26c:	20000454 	.word	0x20000454
 800c270:	20000ffc 	.word	0x20000ffc
 800c274:	20000c30 	.word	0x20000c30
 800c278:	20000b8c 	.word	0x20000b8c
 800c27c:	20001648 	.word	0x20001648

0800c280 <perfect_pass>:
//perfect_pass
// a本番用pass圧縮走行モード
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_pass(void){
 800c280:	b580      	push	{r7, lr}
 800c282:	b082      	sub	sp, #8
 800c284:	af00      	add	r7, sp, #0

	int mode = 0;
 800c286:	2300      	movs	r3, #0
 800c288:	607b      	str	r3, [r7, #4]
	printf("Perfect Pass Press, Mode : %d\n", mode);
 800c28a:	6879      	ldr	r1, [r7, #4]
 800c28c:	489d      	ldr	r0, [pc, #628]	; (800c504 <perfect_pass+0x284>)
 800c28e:	f006 fdc5 	bl	8012e1c <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	b2db      	uxtb	r3, r3
 800c296:	f003 0301 	and.w	r3, r3, #1
 800c29a:	b2d8      	uxtb	r0, r3
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	b2db      	uxtb	r3, r3
 800c2a0:	f003 0302 	and.w	r3, r3, #2
 800c2a4:	b2d9      	uxtb	r1, r3
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	b2db      	uxtb	r3, r3
 800c2aa:	f003 0304 	and.w	r3, r3, #4
 800c2ae:	b2db      	uxtb	r3, r3
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	f005 feff 	bl	80120b4 <led_write>
		  if(dist_r >= 20){
 800c2b6:	4b94      	ldr	r3, [pc, #592]	; (800c508 <perfect_pass+0x288>)
 800c2b8:	edd3 7a00 	vldr	s15, [r3]
 800c2bc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800c2c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c2c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2c8:	db0f      	blt.n	800c2ea <perfect_pass+0x6a>
			  mode++;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	3301      	adds	r3, #1
 800c2ce:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800c2d0:	4b8d      	ldr	r3, [pc, #564]	; (800c508 <perfect_pass+0x288>)
 800c2d2:	f04f 0200 	mov.w	r2, #0
 800c2d6:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2b07      	cmp	r3, #7
 800c2dc:	dd01      	ble.n	800c2e2 <perfect_pass+0x62>
				  mode = 0;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800c2e2:	6879      	ldr	r1, [r7, #4]
 800c2e4:	4889      	ldr	r0, [pc, #548]	; (800c50c <perfect_pass+0x28c>)
 800c2e6:	f006 fd99 	bl	8012e1c <iprintf>
		  }
		  if(dist_r <= -20){
 800c2ea:	4b87      	ldr	r3, [pc, #540]	; (800c508 <perfect_pass+0x288>)
 800c2ec:	edd3 7a00 	vldr	s15, [r3]
 800c2f0:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800c2f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c2f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2fc:	d80f      	bhi.n	800c31e <perfect_pass+0x9e>
			  mode--;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	3b01      	subs	r3, #1
 800c302:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800c304:	4b80      	ldr	r3, [pc, #512]	; (800c508 <perfect_pass+0x288>)
 800c306:	f04f 0200 	mov.w	r2, #0
 800c30a:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	da01      	bge.n	800c316 <perfect_pass+0x96>
				  mode = 7;
 800c312:	2307      	movs	r3, #7
 800c314:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800c316:	6879      	ldr	r1, [r7, #4]
 800c318:	487c      	ldr	r0, [pc, #496]	; (800c50c <perfect_pass+0x28c>)
 800c31a:	f006 fd7f 	bl	8012e1c <iprintf>
		  }
		  if(dist_l <= -20){
 800c31e:	4b7c      	ldr	r3, [pc, #496]	; (800c510 <perfect_pass+0x290>)
 800c320:	edd3 7a00 	vldr	s15, [r3]
 800c324:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800c328:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c32c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c330:	f200 8479 	bhi.w	800cc26 <perfect_pass+0x9a6>
			  dist_l = 0;
 800c334:	4b76      	ldr	r3, [pc, #472]	; (800c510 <perfect_pass+0x290>)
 800c336:	f04f 0200 	mov.w	r2, #0
 800c33a:	601a      	str	r2, [r3, #0]
			  drive_ready();
 800c33c:	f7f8 fc96 	bl	8004c6c <drive_ready>

			  switch(mode){
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2b07      	cmp	r3, #7
 800c344:	f200 846b 	bhi.w	800cc1e <perfect_pass+0x99e>
 800c348:	a201      	add	r2, pc, #4	; (adr r2, 800c350 <perfect_pass+0xd0>)
 800c34a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c34e:	bf00      	nop
 800c350:	0800cc1f 	.word	0x0800cc1f
 800c354:	0800c371 	.word	0x0800c371
 800c358:	0800c3f5 	.word	0x0800c3f5
 800c35c:	0800c47d 	.word	0x0800c47d
 800c360:	0800c545 	.word	0x0800c545
 800c364:	0800c5cd 	.word	0x0800c5cd
 800c368:	0800c681 	.word	0x0800c681
 800c36c:	0800c96d 	.word	0x0800c96d
				case 0:
					break;

				case 1:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800c370:	4868      	ldr	r0, [pc, #416]	; (800c514 <perfect_pass+0x294>)
 800c372:	f006 fdc7 	bl	8012f04 <puts>
					MF.FLAG.SCND = 0;
 800c376:	4a68      	ldr	r2, [pc, #416]	; (800c518 <perfect_pass+0x298>)
 800c378:	8813      	ldrh	r3, [r2, #0]
 800c37a:	f36f 1345 	bfc	r3, #5, #1
 800c37e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c380:	4a65      	ldr	r2, [pc, #404]	; (800c518 <perfect_pass+0x298>)
 800c382:	8813      	ldrh	r3, [r2, #0]
 800c384:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c388:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800c38a:	4a63      	ldr	r2, [pc, #396]	; (800c518 <perfect_pass+0x298>)
 800c38c:	8813      	ldrh	r3, [r2, #0]
 800c38e:	f36f 238a 	bfc	r3, #10, #1
 800c392:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800c394:	4b61      	ldr	r3, [pc, #388]	; (800c51c <perfect_pass+0x29c>)
 800c396:	2202      	movs	r2, #2
 800c398:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c39a:	4b61      	ldr	r3, [pc, #388]	; (800c520 <perfect_pass+0x2a0>)
 800c39c:	2200      	movs	r2, #0
 800c39e:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c3a0:	4b60      	ldr	r3, [pc, #384]	; (800c524 <perfect_pass+0x2a4>)
 800c3a2:	2202      	movs	r2, #2
 800c3a4:	701a      	strb	r2, [r3, #0]
					accel_hs = 4000;
 800c3a6:	4b60      	ldr	r3, [pc, #384]	; (800c528 <perfect_pass+0x2a8>)
 800c3a8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800c3ac:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800c3ae:	4b5f      	ldr	r3, [pc, #380]	; (800c52c <perfect_pass+0x2ac>)
 800c3b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c3b4:	801a      	strh	r2, [r3, #0]

					goal_x = 7;
 800c3b6:	4b5e      	ldr	r3, [pc, #376]	; (800c530 <perfect_pass+0x2b0>)
 800c3b8:	2207      	movs	r2, #7
 800c3ba:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c3bc:	4b5d      	ldr	r3, [pc, #372]	; (800c534 <perfect_pass+0x2b4>)
 800c3be:	2207      	movs	r2, #7
 800c3c0:	701a      	strb	r2, [r3, #0]

					get_base();
 800c3c2:	f005 fe1f 	bl	8012004 <get_base>

					searchC();
 800c3c6:	f002 fe47 	bl	800f058 <searchC>
					HAL_Delay(2000);
 800c3ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c3ce:	f7f4 fe25 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c3d2:	4b58      	ldr	r3, [pc, #352]	; (800c534 <perfect_pass+0x2b4>)
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	701a      	strb	r2, [r3, #0]
 800c3d8:	4b56      	ldr	r3, [pc, #344]	; (800c534 <perfect_pass+0x2b4>)
 800c3da:	781a      	ldrb	r2, [r3, #0]
 800c3dc:	4b54      	ldr	r3, [pc, #336]	; (800c530 <perfect_pass+0x2b0>)
 800c3de:	701a      	strb	r2, [r3, #0]
					searchC();
 800c3e0:	f002 fe3a 	bl	800f058 <searchC>

					goal_x = 7;
 800c3e4:	4b52      	ldr	r3, [pc, #328]	; (800c530 <perfect_pass+0x2b0>)
 800c3e6:	2207      	movs	r2, #7
 800c3e8:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c3ea:	4b52      	ldr	r3, [pc, #328]	; (800c534 <perfect_pass+0x2b4>)
 800c3ec:	2207      	movs	r2, #7
 800c3ee:	701a      	strb	r2, [r3, #0]
					break;
 800c3f0:	f000 bc15 	b.w	800cc1e <perfect_pass+0x99e>

				case 2:
					//----a直線と大回り圧縮----
					printf("pass press 3.\n");
 800c3f4:	4850      	ldr	r0, [pc, #320]	; (800c538 <perfect_pass+0x2b8>)
 800c3f6:	f006 fd85 	bl	8012f04 <puts>
					MF.FLAG.SCND = 1;
 800c3fa:	4a47      	ldr	r2, [pc, #284]	; (800c518 <perfect_pass+0x298>)
 800c3fc:	8813      	ldrh	r3, [r2, #0]
 800c3fe:	f043 0320 	orr.w	r3, r3, #32
 800c402:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c404:	4a44      	ldr	r2, [pc, #272]	; (800c518 <perfect_pass+0x298>)
 800c406:	8813      	ldrh	r3, [r2, #0]
 800c408:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c40c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c40e:	4a42      	ldr	r2, [pc, #264]	; (800c518 <perfect_pass+0x298>)
 800c410:	8813      	ldrh	r3, [r2, #0]
 800c412:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c416:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800c418:	4b40      	ldr	r3, [pc, #256]	; (800c51c <perfect_pass+0x29c>)
 800c41a:	2202      	movs	r2, #2
 800c41c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c41e:	4b40      	ldr	r3, [pc, #256]	; (800c520 <perfect_pass+0x2a0>)
 800c420:	2200      	movs	r2, #0
 800c422:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c424:	4b3f      	ldr	r3, [pc, #252]	; (800c524 <perfect_pass+0x2a4>)
 800c426:	2202      	movs	r2, #2
 800c428:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800c42a:	4b3f      	ldr	r3, [pc, #252]	; (800c528 <perfect_pass+0x2a8>)
 800c42c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c430:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800c432:	4b3e      	ldr	r3, [pc, #248]	; (800c52c <perfect_pass+0x2ac>)
 800c434:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c438:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800c43a:	4b40      	ldr	r3, [pc, #256]	; (800c53c <perfect_pass+0x2bc>)
 800c43c:	2203      	movs	r2, #3
 800c43e:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800c440:	4b3b      	ldr	r3, [pc, #236]	; (800c530 <perfect_pass+0x2b0>)
 800c442:	2207      	movs	r2, #7
 800c444:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c446:	4b3b      	ldr	r3, [pc, #236]	; (800c534 <perfect_pass+0x2b4>)
 800c448:	2207      	movs	r2, #7
 800c44a:	701a      	strb	r2, [r3, #0]

					get_base();
 800c44c:	f005 fdda 	bl	8012004 <get_base>

					searchF3();
 800c450:	f003 fa7c 	bl	800f94c <searchF3>
					HAL_Delay(2000);
 800c454:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c458:	f7f4 fde0 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c45c:	4b35      	ldr	r3, [pc, #212]	; (800c534 <perfect_pass+0x2b4>)
 800c45e:	2200      	movs	r2, #0
 800c460:	701a      	strb	r2, [r3, #0]
 800c462:	4b34      	ldr	r3, [pc, #208]	; (800c534 <perfect_pass+0x2b4>)
 800c464:	781a      	ldrb	r2, [r3, #0]
 800c466:	4b32      	ldr	r3, [pc, #200]	; (800c530 <perfect_pass+0x2b0>)
 800c468:	701a      	strb	r2, [r3, #0]
					searchF3();
 800c46a:	f003 fa6f 	bl	800f94c <searchF3>

					goal_x = 7;
 800c46e:	4b30      	ldr	r3, [pc, #192]	; (800c530 <perfect_pass+0x2b0>)
 800c470:	2207      	movs	r2, #7
 800c472:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c474:	4b2f      	ldr	r3, [pc, #188]	; (800c534 <perfect_pass+0x2b4>)
 800c476:	2207      	movs	r2, #7
 800c478:	701a      	strb	r2, [r3, #0]
					break;
 800c47a:	e3d0      	b.n	800cc1e <perfect_pass+0x99e>

				case 3:
					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 800c47c:	4830      	ldr	r0, [pc, #192]	; (800c540 <perfect_pass+0x2c0>)
 800c47e:	f006 fd41 	bl	8012f04 <puts>
					MF.FLAG.SCND = 1;
 800c482:	4a25      	ldr	r2, [pc, #148]	; (800c518 <perfect_pass+0x298>)
 800c484:	8813      	ldrh	r3, [r2, #0]
 800c486:	f043 0320 	orr.w	r3, r3, #32
 800c48a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c48c:	4a22      	ldr	r2, [pc, #136]	; (800c518 <perfect_pass+0x298>)
 800c48e:	8813      	ldrh	r3, [r2, #0]
 800c490:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c494:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c496:	4a20      	ldr	r2, [pc, #128]	; (800c518 <perfect_pass+0x298>)
 800c498:	8813      	ldrh	r3, [r2, #0]
 800c49a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c49e:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800c4a0:	4b1e      	ldr	r3, [pc, #120]	; (800c51c <perfect_pass+0x29c>)
 800c4a2:	2202      	movs	r2, #2
 800c4a4:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c4a6:	4b1e      	ldr	r3, [pc, #120]	; (800c520 <perfect_pass+0x2a0>)
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c4ac:	4b1d      	ldr	r3, [pc, #116]	; (800c524 <perfect_pass+0x2a4>)
 800c4ae:	2202      	movs	r2, #2
 800c4b0:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800c4b2:	4b1d      	ldr	r3, [pc, #116]	; (800c528 <perfect_pass+0x2a8>)
 800c4b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4b8:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800c4ba:	4b1c      	ldr	r3, [pc, #112]	; (800c52c <perfect_pass+0x2ac>)
 800c4bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c4c0:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800c4c2:	4b1e      	ldr	r3, [pc, #120]	; (800c53c <perfect_pass+0x2bc>)
 800c4c4:	2204      	movs	r2, #4
 800c4c6:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800c4c8:	4b19      	ldr	r3, [pc, #100]	; (800c530 <perfect_pass+0x2b0>)
 800c4ca:	2207      	movs	r2, #7
 800c4cc:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c4ce:	4b19      	ldr	r3, [pc, #100]	; (800c534 <perfect_pass+0x2b4>)
 800c4d0:	2207      	movs	r2, #7
 800c4d2:	701a      	strb	r2, [r3, #0]

					get_base();
 800c4d4:	f005 fd96 	bl	8012004 <get_base>

					searchF4();
 800c4d8:	f003 fb14 	bl	800fb04 <searchF4>
					HAL_Delay(2000);
 800c4dc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c4e0:	f7f4 fd9c 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c4e4:	4b13      	ldr	r3, [pc, #76]	; (800c534 <perfect_pass+0x2b4>)
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	701a      	strb	r2, [r3, #0]
 800c4ea:	4b12      	ldr	r3, [pc, #72]	; (800c534 <perfect_pass+0x2b4>)
 800c4ec:	781a      	ldrb	r2, [r3, #0]
 800c4ee:	4b10      	ldr	r3, [pc, #64]	; (800c530 <perfect_pass+0x2b0>)
 800c4f0:	701a      	strb	r2, [r3, #0]
					searchF4();
 800c4f2:	f003 fb07 	bl	800fb04 <searchF4>

					goal_x = 7;
 800c4f6:	4b0e      	ldr	r3, [pc, #56]	; (800c530 <perfect_pass+0x2b0>)
 800c4f8:	2207      	movs	r2, #7
 800c4fa:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c4fc:	4b0d      	ldr	r3, [pc, #52]	; (800c534 <perfect_pass+0x2b4>)
 800c4fe:	2207      	movs	r2, #7
 800c500:	701a      	strb	r2, [r3, #0]
					break;
 800c502:	e38c      	b.n	800cc1e <perfect_pass+0x99e>
 800c504:	080143f4 	.word	0x080143f4
 800c508:	20000b2c 	.word	0x20000b2c
 800c50c:	08014058 	.word	0x08014058
 800c510:	20001648 	.word	0x20001648
 800c514:	08014318 	.word	0x08014318
 800c518:	20000fa8 	.word	0x20000fa8
 800c51c:	20000456 	.word	0x20000456
 800c520:	2000164c 	.word	0x2000164c
 800c524:	20000c31 	.word	0x20000c31
 800c528:	20000454 	.word	0x20000454
 800c52c:	20000ffc 	.word	0x20000ffc
 800c530:	20000c30 	.word	0x20000c30
 800c534:	20000b8c 	.word	0x20000b8c
 800c538:	08014414 	.word	0x08014414
 800c53c:	20000457 	.word	0x20000457
 800c540:	0801425c 	.word	0x0801425c

				case 4:
					//----a直線と大回り圧縮 High Speed----
					printf("pass press 3-2.\n");
 800c544:	4843      	ldr	r0, [pc, #268]	; (800c654 <perfect_pass+0x3d4>)
 800c546:	f006 fcdd 	bl	8012f04 <puts>
					MF.FLAG.SCND = 1;
 800c54a:	4a43      	ldr	r2, [pc, #268]	; (800c658 <perfect_pass+0x3d8>)
 800c54c:	8813      	ldrh	r3, [r2, #0]
 800c54e:	f043 0320 	orr.w	r3, r3, #32
 800c552:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c554:	4a40      	ldr	r2, [pc, #256]	; (800c658 <perfect_pass+0x3d8>)
 800c556:	8813      	ldrh	r3, [r2, #0]
 800c558:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c55c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c55e:	4a3e      	ldr	r2, [pc, #248]	; (800c658 <perfect_pass+0x3d8>)
 800c560:	8813      	ldrh	r3, [r2, #0]
 800c562:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c566:	8013      	strh	r3, [r2, #0]
					run_mode = 3;
 800c568:	4b3c      	ldr	r3, [pc, #240]	; (800c65c <perfect_pass+0x3dc>)
 800c56a:	2203      	movs	r2, #3
 800c56c:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c56e:	4b3c      	ldr	r3, [pc, #240]	; (800c660 <perfect_pass+0x3e0>)
 800c570:	2202      	movs	r2, #2
 800c572:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c574:	4b3b      	ldr	r3, [pc, #236]	; (800c664 <perfect_pass+0x3e4>)
 800c576:	2200      	movs	r2, #0
 800c578:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800c57a:	4b3b      	ldr	r3, [pc, #236]	; (800c668 <perfect_pass+0x3e8>)
 800c57c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c580:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800c582:	4b3a      	ldr	r3, [pc, #232]	; (800c66c <perfect_pass+0x3ec>)
 800c584:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800c588:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800c58a:	4b39      	ldr	r3, [pc, #228]	; (800c670 <perfect_pass+0x3f0>)
 800c58c:	2203      	movs	r2, #3
 800c58e:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800c590:	4b38      	ldr	r3, [pc, #224]	; (800c674 <perfect_pass+0x3f4>)
 800c592:	2207      	movs	r2, #7
 800c594:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c596:	4b38      	ldr	r3, [pc, #224]	; (800c678 <perfect_pass+0x3f8>)
 800c598:	2207      	movs	r2, #7
 800c59a:	701a      	strb	r2, [r3, #0]

					get_base();
 800c59c:	f005 fd32 	bl	8012004 <get_base>

					searchF3();
 800c5a0:	f003 f9d4 	bl	800f94c <searchF3>
					HAL_Delay(2000);
 800c5a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c5a8:	f7f4 fd38 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c5ac:	4b32      	ldr	r3, [pc, #200]	; (800c678 <perfect_pass+0x3f8>)
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	701a      	strb	r2, [r3, #0]
 800c5b2:	4b31      	ldr	r3, [pc, #196]	; (800c678 <perfect_pass+0x3f8>)
 800c5b4:	781a      	ldrb	r2, [r3, #0]
 800c5b6:	4b2f      	ldr	r3, [pc, #188]	; (800c674 <perfect_pass+0x3f4>)
 800c5b8:	701a      	strb	r2, [r3, #0]
					searchF3();
 800c5ba:	f003 f9c7 	bl	800f94c <searchF3>

					goal_x = 7;
 800c5be:	4b2d      	ldr	r3, [pc, #180]	; (800c674 <perfect_pass+0x3f4>)
 800c5c0:	2207      	movs	r2, #7
 800c5c2:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c5c4:	4b2c      	ldr	r3, [pc, #176]	; (800c678 <perfect_pass+0x3f8>)
 800c5c6:	2207      	movs	r2, #7
 800c5c8:	701a      	strb	r2, [r3, #0]
					break;
 800c5ca:	e328      	b.n	800cc1e <perfect_pass+0x99e>

				case 5:
					//----a直線と大回り圧縮と斜め High Speedｰｰｰｰ
					printf("pass press 4.\n");
 800c5cc:	482b      	ldr	r0, [pc, #172]	; (800c67c <perfect_pass+0x3fc>)
 800c5ce:	f006 fc99 	bl	8012f04 <puts>
					MF.FLAG.SCND = 1;
 800c5d2:	4a21      	ldr	r2, [pc, #132]	; (800c658 <perfect_pass+0x3d8>)
 800c5d4:	8813      	ldrh	r3, [r2, #0]
 800c5d6:	f043 0320 	orr.w	r3, r3, #32
 800c5da:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c5dc:	4a1e      	ldr	r2, [pc, #120]	; (800c658 <perfect_pass+0x3d8>)
 800c5de:	8813      	ldrh	r3, [r2, #0]
 800c5e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c5e4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c5e6:	4a1c      	ldr	r2, [pc, #112]	; (800c658 <perfect_pass+0x3d8>)
 800c5e8:	8813      	ldrh	r3, [r2, #0]
 800c5ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c5ee:	8013      	strh	r3, [r2, #0]
					run_mode = 3;
 800c5f0:	4b1a      	ldr	r3, [pc, #104]	; (800c65c <perfect_pass+0x3dc>)
 800c5f2:	2203      	movs	r2, #3
 800c5f4:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c5f6:	4b1b      	ldr	r3, [pc, #108]	; (800c664 <perfect_pass+0x3e4>)
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c5fc:	4b18      	ldr	r3, [pc, #96]	; (800c660 <perfect_pass+0x3e0>)
 800c5fe:	2202      	movs	r2, #2
 800c600:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800c602:	4b19      	ldr	r3, [pc, #100]	; (800c668 <perfect_pass+0x3e8>)
 800c604:	f241 3288 	movw	r2, #5000	; 0x1388
 800c608:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800c60a:	4b18      	ldr	r3, [pc, #96]	; (800c66c <perfect_pass+0x3ec>)
 800c60c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800c610:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800c612:	4b17      	ldr	r3, [pc, #92]	; (800c670 <perfect_pass+0x3f0>)
 800c614:	2204      	movs	r2, #4
 800c616:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800c618:	4b16      	ldr	r3, [pc, #88]	; (800c674 <perfect_pass+0x3f4>)
 800c61a:	2207      	movs	r2, #7
 800c61c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c61e:	4b16      	ldr	r3, [pc, #88]	; (800c678 <perfect_pass+0x3f8>)
 800c620:	2207      	movs	r2, #7
 800c622:	701a      	strb	r2, [r3, #0]

					get_base();
 800c624:	f005 fcee 	bl	8012004 <get_base>

					searchF4();
 800c628:	f003 fa6c 	bl	800fb04 <searchF4>
					HAL_Delay(2000);
 800c62c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c630:	f7f4 fcf4 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c634:	4b10      	ldr	r3, [pc, #64]	; (800c678 <perfect_pass+0x3f8>)
 800c636:	2200      	movs	r2, #0
 800c638:	701a      	strb	r2, [r3, #0]
 800c63a:	4b0f      	ldr	r3, [pc, #60]	; (800c678 <perfect_pass+0x3f8>)
 800c63c:	781a      	ldrb	r2, [r3, #0]
 800c63e:	4b0d      	ldr	r3, [pc, #52]	; (800c674 <perfect_pass+0x3f4>)
 800c640:	701a      	strb	r2, [r3, #0]
					searchF4();
 800c642:	f003 fa5f 	bl	800fb04 <searchF4>

					goal_x = 7;
 800c646:	4b0b      	ldr	r3, [pc, #44]	; (800c674 <perfect_pass+0x3f4>)
 800c648:	2207      	movs	r2, #7
 800c64a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c64c:	4b0a      	ldr	r3, [pc, #40]	; (800c678 <perfect_pass+0x3f8>)
 800c64e:	2207      	movs	r2, #7
 800c650:	701a      	strb	r2, [r3, #0]
					break;
 800c652:	e2e4      	b.n	800cc1e <perfect_pass+0x99e>
 800c654:	0801424c 	.word	0x0801424c
 800c658:	20000fa8 	.word	0x20000fa8
 800c65c:	20000456 	.word	0x20000456
 800c660:	20000c31 	.word	0x20000c31
 800c664:	2000164c 	.word	0x2000164c
 800c668:	20000454 	.word	0x20000454
 800c66c:	20000ffc 	.word	0x20000ffc
 800c670:	20000457 	.word	0x20000457
 800c674:	20000c30 	.word	0x20000c30
 800c678:	20000b8c 	.word	0x20000b8c
 800c67c:	0801425c 	.word	0x0801425c

				case 6:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800c680:	48ac      	ldr	r0, [pc, #688]	; (800c934 <perfect_pass+0x6b4>)
 800c682:	f006 fc3f 	bl	8012f04 <puts>
					MF.FLAG.SCND = 0;
 800c686:	4aac      	ldr	r2, [pc, #688]	; (800c938 <perfect_pass+0x6b8>)
 800c688:	8813      	ldrh	r3, [r2, #0]
 800c68a:	f36f 1345 	bfc	r3, #5, #1
 800c68e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c690:	4aa9      	ldr	r2, [pc, #676]	; (800c938 <perfect_pass+0x6b8>)
 800c692:	8813      	ldrh	r3, [r2, #0]
 800c694:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c698:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800c69a:	4aa7      	ldr	r2, [pc, #668]	; (800c938 <perfect_pass+0x6b8>)
 800c69c:	8813      	ldrh	r3, [r2, #0]
 800c69e:	f36f 238a 	bfc	r3, #10, #1
 800c6a2:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800c6a4:	4ba5      	ldr	r3, [pc, #660]	; (800c93c <perfect_pass+0x6bc>)
 800c6a6:	2202      	movs	r2, #2
 800c6a8:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c6aa:	4ba5      	ldr	r3, [pc, #660]	; (800c940 <perfect_pass+0x6c0>)
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c6b0:	4ba4      	ldr	r3, [pc, #656]	; (800c944 <perfect_pass+0x6c4>)
 800c6b2:	2202      	movs	r2, #2
 800c6b4:	701a      	strb	r2, [r3, #0]
					accel_hs = 4000;
 800c6b6:	4ba4      	ldr	r3, [pc, #656]	; (800c948 <perfect_pass+0x6c8>)
 800c6b8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800c6bc:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800c6be:	4ba3      	ldr	r3, [pc, #652]	; (800c94c <perfect_pass+0x6cc>)
 800c6c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c6c4:	801a      	strh	r2, [r3, #0]

					goal_x = GOAL_X;
 800c6c6:	4ba2      	ldr	r3, [pc, #648]	; (800c950 <perfect_pass+0x6d0>)
 800c6c8:	2207      	movs	r2, #7
 800c6ca:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800c6cc:	4ba1      	ldr	r3, [pc, #644]	; (800c954 <perfect_pass+0x6d4>)
 800c6ce:	2207      	movs	r2, #7
 800c6d0:	701a      	strb	r2, [r3, #0]

					get_base();
 800c6d2:	f005 fc97 	bl	8012004 <get_base>

					searchC();
 800c6d6:	f002 fcbf 	bl	800f058 <searchC>
					HAL_Delay(2000);
 800c6da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c6de:	f7f4 fc9d 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c6e2:	4b9c      	ldr	r3, [pc, #624]	; (800c954 <perfect_pass+0x6d4>)
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	701a      	strb	r2, [r3, #0]
 800c6e8:	4b9a      	ldr	r3, [pc, #616]	; (800c954 <perfect_pass+0x6d4>)
 800c6ea:	781a      	ldrb	r2, [r3, #0]
 800c6ec:	4b98      	ldr	r3, [pc, #608]	; (800c950 <perfect_pass+0x6d0>)
 800c6ee:	701a      	strb	r2, [r3, #0]
					searchC();
 800c6f0:	f002 fcb2 	bl	800f058 <searchC>

					degree_z = target_degree_z;
 800c6f4:	4b98      	ldr	r3, [pc, #608]	; (800c958 <perfect_pass+0x6d8>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4a98      	ldr	r2, [pc, #608]	; (800c95c <perfect_pass+0x6dc>)
 800c6fa:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800c6fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c700:	f7f4 fc8c 	bl	800101c <HAL_Delay>
					degree_z = target_degree_z;
					HAL_Delay(2000);
*/

					//----a直線と大回り圧縮----
					printf("pass press 3.\n");
 800c704:	4896      	ldr	r0, [pc, #600]	; (800c960 <perfect_pass+0x6e0>)
 800c706:	f006 fbfd 	bl	8012f04 <puts>
					MF.FLAG.SCND = 1;
 800c70a:	4a8b      	ldr	r2, [pc, #556]	; (800c938 <perfect_pass+0x6b8>)
 800c70c:	8813      	ldrh	r3, [r2, #0]
 800c70e:	f043 0320 	orr.w	r3, r3, #32
 800c712:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c714:	4a88      	ldr	r2, [pc, #544]	; (800c938 <perfect_pass+0x6b8>)
 800c716:	8813      	ldrh	r3, [r2, #0]
 800c718:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c71c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c71e:	4a86      	ldr	r2, [pc, #536]	; (800c938 <perfect_pass+0x6b8>)
 800c720:	8813      	ldrh	r3, [r2, #0]
 800c722:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c726:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800c728:	4b84      	ldr	r3, [pc, #528]	; (800c93c <perfect_pass+0x6bc>)
 800c72a:	2202      	movs	r2, #2
 800c72c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c72e:	4b84      	ldr	r3, [pc, #528]	; (800c940 <perfect_pass+0x6c0>)
 800c730:	2200      	movs	r2, #0
 800c732:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c734:	4b83      	ldr	r3, [pc, #524]	; (800c944 <perfect_pass+0x6c4>)
 800c736:	2202      	movs	r2, #2
 800c738:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800c73a:	4b83      	ldr	r3, [pc, #524]	; (800c948 <perfect_pass+0x6c8>)
 800c73c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c740:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800c742:	4b82      	ldr	r3, [pc, #520]	; (800c94c <perfect_pass+0x6cc>)
 800c744:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800c748:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800c74a:	4b86      	ldr	r3, [pc, #536]	; (800c964 <perfect_pass+0x6e4>)
 800c74c:	2203      	movs	r2, #3
 800c74e:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800c750:	4b7f      	ldr	r3, [pc, #508]	; (800c950 <perfect_pass+0x6d0>)
 800c752:	2207      	movs	r2, #7
 800c754:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800c756:	4b7f      	ldr	r3, [pc, #508]	; (800c954 <perfect_pass+0x6d4>)
 800c758:	2207      	movs	r2, #7
 800c75a:	701a      	strb	r2, [r3, #0]

					searchF3();
 800c75c:	f003 f8f6 	bl	800f94c <searchF3>
					HAL_Delay(2000);
 800c760:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c764:	f7f4 fc5a 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c768:	4b7a      	ldr	r3, [pc, #488]	; (800c954 <perfect_pass+0x6d4>)
 800c76a:	2200      	movs	r2, #0
 800c76c:	701a      	strb	r2, [r3, #0]
 800c76e:	4b79      	ldr	r3, [pc, #484]	; (800c954 <perfect_pass+0x6d4>)
 800c770:	781a      	ldrb	r2, [r3, #0]
 800c772:	4b77      	ldr	r3, [pc, #476]	; (800c950 <perfect_pass+0x6d0>)
 800c774:	701a      	strb	r2, [r3, #0]
					searchF3();
 800c776:	f003 f8e9 	bl	800f94c <searchF3>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800c77a:	2064      	movs	r0, #100	; 0x64
 800c77c:	f7f8 fe92 	bl	80054a4 <driveC2>
					degree_z = target_degree_z;
 800c780:	4b75      	ldr	r3, [pc, #468]	; (800c958 <perfect_pass+0x6d8>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	4a75      	ldr	r2, [pc, #468]	; (800c95c <perfect_pass+0x6dc>)
 800c786:	6013      	str	r3, [r2, #0]
					start_mode = 0;
 800c788:	4b6d      	ldr	r3, [pc, #436]	; (800c940 <perfect_pass+0x6c0>)
 800c78a:	2200      	movs	r2, #0
 800c78c:	701a      	strb	r2, [r3, #0]

					HAL_Delay(2000);
 800c78e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c792:	f7f4 fc43 	bl	800101c <HAL_Delay>


					//----a直線と大回り圧縮と斜め----
					printf("pass press 3.\n");
 800c796:	4872      	ldr	r0, [pc, #456]	; (800c960 <perfect_pass+0x6e0>)
 800c798:	f006 fbb4 	bl	8012f04 <puts>
					MF.FLAG.SCND = 1;
 800c79c:	4a66      	ldr	r2, [pc, #408]	; (800c938 <perfect_pass+0x6b8>)
 800c79e:	8813      	ldrh	r3, [r2, #0]
 800c7a0:	f043 0320 	orr.w	r3, r3, #32
 800c7a4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c7a6:	4a64      	ldr	r2, [pc, #400]	; (800c938 <perfect_pass+0x6b8>)
 800c7a8:	8813      	ldrh	r3, [r2, #0]
 800c7aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c7ae:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c7b0:	4a61      	ldr	r2, [pc, #388]	; (800c938 <perfect_pass+0x6b8>)
 800c7b2:	8813      	ldrh	r3, [r2, #0]
 800c7b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c7b8:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800c7ba:	4b60      	ldr	r3, [pc, #384]	; (800c93c <perfect_pass+0x6bc>)
 800c7bc:	2202      	movs	r2, #2
 800c7be:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c7c0:	4b5f      	ldr	r3, [pc, #380]	; (800c940 <perfect_pass+0x6c0>)
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c7c6:	4b5f      	ldr	r3, [pc, #380]	; (800c944 <perfect_pass+0x6c4>)
 800c7c8:	2202      	movs	r2, #2
 800c7ca:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800c7cc:	4b5e      	ldr	r3, [pc, #376]	; (800c948 <perfect_pass+0x6c8>)
 800c7ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7d2:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800c7d4:	4b5d      	ldr	r3, [pc, #372]	; (800c94c <perfect_pass+0x6cc>)
 800c7d6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800c7da:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;						//a半区画ベースでroute配列生成
 800c7dc:	4b61      	ldr	r3, [pc, #388]	; (800c964 <perfect_pass+0x6e4>)
 800c7de:	2204      	movs	r2, #4
 800c7e0:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800c7e2:	4b5b      	ldr	r3, [pc, #364]	; (800c950 <perfect_pass+0x6d0>)
 800c7e4:	2207      	movs	r2, #7
 800c7e6:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800c7e8:	4b5a      	ldr	r3, [pc, #360]	; (800c954 <perfect_pass+0x6d4>)
 800c7ea:	2207      	movs	r2, #7
 800c7ec:	701a      	strb	r2, [r3, #0]

					searchF4();
 800c7ee:	f003 f989 	bl	800fb04 <searchF4>
					HAL_Delay(2000);
 800c7f2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c7f6:	f7f4 fc11 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c7fa:	4b56      	ldr	r3, [pc, #344]	; (800c954 <perfect_pass+0x6d4>)
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	701a      	strb	r2, [r3, #0]
 800c800:	4b54      	ldr	r3, [pc, #336]	; (800c954 <perfect_pass+0x6d4>)
 800c802:	781a      	ldrb	r2, [r3, #0]
 800c804:	4b52      	ldr	r3, [pc, #328]	; (800c950 <perfect_pass+0x6d0>)
 800c806:	701a      	strb	r2, [r3, #0]
					searchF4();
 800c808:	f003 f97c 	bl	800fb04 <searchF4>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800c80c:	2064      	movs	r0, #100	; 0x64
 800c80e:	f7f8 fe49 	bl	80054a4 <driveC2>
					degree_z = target_degree_z;
 800c812:	4b51      	ldr	r3, [pc, #324]	; (800c958 <perfect_pass+0x6d8>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	4a51      	ldr	r2, [pc, #324]	; (800c95c <perfect_pass+0x6dc>)
 800c818:	6013      	str	r3, [r2, #0]
					start_mode = 0;
 800c81a:	4b49      	ldr	r3, [pc, #292]	; (800c940 <perfect_pass+0x6c0>)
 800c81c:	2200      	movs	r2, #0
 800c81e:	701a      	strb	r2, [r3, #0]

					HAL_Delay(2000);
 800c820:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c824:	f7f4 fbfa 	bl	800101c <HAL_Delay>
					goal_x = goal_y = 0;
					searchD();
*/

					//----a直線と大回り圧縮 High Speed----
					printf("pass press 3.\n");
 800c828:	484d      	ldr	r0, [pc, #308]	; (800c960 <perfect_pass+0x6e0>)
 800c82a:	f006 fb6b 	bl	8012f04 <puts>
					MF.FLAG.SCND = 1;
 800c82e:	4a42      	ldr	r2, [pc, #264]	; (800c938 <perfect_pass+0x6b8>)
 800c830:	8813      	ldrh	r3, [r2, #0]
 800c832:	f043 0320 	orr.w	r3, r3, #32
 800c836:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c838:	4a3f      	ldr	r2, [pc, #252]	; (800c938 <perfect_pass+0x6b8>)
 800c83a:	8813      	ldrh	r3, [r2, #0]
 800c83c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c840:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c842:	4a3d      	ldr	r2, [pc, #244]	; (800c938 <perfect_pass+0x6b8>)
 800c844:	8813      	ldrh	r3, [r2, #0]
 800c846:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c84a:	8013      	strh	r3, [r2, #0]
					run_mode = 3;
 800c84c:	4b3b      	ldr	r3, [pc, #236]	; (800c93c <perfect_pass+0x6bc>)
 800c84e:	2203      	movs	r2, #3
 800c850:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c852:	4b3b      	ldr	r3, [pc, #236]	; (800c940 <perfect_pass+0x6c0>)
 800c854:	2200      	movs	r2, #0
 800c856:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c858:	4b3a      	ldr	r3, [pc, #232]	; (800c944 <perfect_pass+0x6c4>)
 800c85a:	2202      	movs	r2, #2
 800c85c:	701a      	strb	r2, [r3, #0]
					accel_hs = 6000;
 800c85e:	4b3a      	ldr	r3, [pc, #232]	; (800c948 <perfect_pass+0x6c8>)
 800c860:	f241 7270 	movw	r2, #6000	; 0x1770
 800c864:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800c866:	4b39      	ldr	r3, [pc, #228]	; (800c94c <perfect_pass+0x6cc>)
 800c868:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c86c:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800c86e:	4b3d      	ldr	r3, [pc, #244]	; (800c964 <perfect_pass+0x6e4>)
 800c870:	2203      	movs	r2, #3
 800c872:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800c874:	4b36      	ldr	r3, [pc, #216]	; (800c950 <perfect_pass+0x6d0>)
 800c876:	2207      	movs	r2, #7
 800c878:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800c87a:	4b36      	ldr	r3, [pc, #216]	; (800c954 <perfect_pass+0x6d4>)
 800c87c:	2207      	movs	r2, #7
 800c87e:	701a      	strb	r2, [r3, #0]

					searchF3();
 800c880:	f003 f864 	bl	800f94c <searchF3>
					HAL_Delay(2000);
 800c884:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c888:	f7f4 fbc8 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c88c:	4b31      	ldr	r3, [pc, #196]	; (800c954 <perfect_pass+0x6d4>)
 800c88e:	2200      	movs	r2, #0
 800c890:	701a      	strb	r2, [r3, #0]
 800c892:	4b30      	ldr	r3, [pc, #192]	; (800c954 <perfect_pass+0x6d4>)
 800c894:	781a      	ldrb	r2, [r3, #0]
 800c896:	4b2e      	ldr	r3, [pc, #184]	; (800c950 <perfect_pass+0x6d0>)
 800c898:	701a      	strb	r2, [r3, #0]
					searchF3();
 800c89a:	f003 f857 	bl	800f94c <searchF3>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800c89e:	2064      	movs	r0, #100	; 0x64
 800c8a0:	f7f8 fe00 	bl	80054a4 <driveC2>
					degree_z = target_degree_z;
 800c8a4:	4b2c      	ldr	r3, [pc, #176]	; (800c958 <perfect_pass+0x6d8>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	4a2c      	ldr	r2, [pc, #176]	; (800c95c <perfect_pass+0x6dc>)
 800c8aa:	6013      	str	r3, [r2, #0]
					start_mode = 0;
 800c8ac:	4b24      	ldr	r3, [pc, #144]	; (800c940 <perfect_pass+0x6c0>)
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	701a      	strb	r2, [r3, #0]

					HAL_Delay(2000);
 800c8b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c8b6:	f7f4 fbb1 	bl	800101c <HAL_Delay>


					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 800c8ba:	482b      	ldr	r0, [pc, #172]	; (800c968 <perfect_pass+0x6e8>)
 800c8bc:	f006 fb22 	bl	8012f04 <puts>
					MF.FLAG.SCND = 1;
 800c8c0:	4a1d      	ldr	r2, [pc, #116]	; (800c938 <perfect_pass+0x6b8>)
 800c8c2:	8813      	ldrh	r3, [r2, #0]
 800c8c4:	f043 0320 	orr.w	r3, r3, #32
 800c8c8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c8ca:	4a1b      	ldr	r2, [pc, #108]	; (800c938 <perfect_pass+0x6b8>)
 800c8cc:	8813      	ldrh	r3, [r2, #0]
 800c8ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c8d2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c8d4:	4a18      	ldr	r2, [pc, #96]	; (800c938 <perfect_pass+0x6b8>)
 800c8d6:	8813      	ldrh	r3, [r2, #0]
 800c8d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c8dc:	8013      	strh	r3, [r2, #0]
					run_mode = 3;
 800c8de:	4b17      	ldr	r3, [pc, #92]	; (800c93c <perfect_pass+0x6bc>)
 800c8e0:	2203      	movs	r2, #3
 800c8e2:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c8e4:	4b16      	ldr	r3, [pc, #88]	; (800c940 <perfect_pass+0x6c0>)
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c8ea:	4b16      	ldr	r3, [pc, #88]	; (800c944 <perfect_pass+0x6c4>)
 800c8ec:	2202      	movs	r2, #2
 800c8ee:	701a      	strb	r2, [r3, #0]
					accel_hs = 6000;
 800c8f0:	4b15      	ldr	r3, [pc, #84]	; (800c948 <perfect_pass+0x6c8>)
 800c8f2:	f241 7270 	movw	r2, #6000	; 0x1770
 800c8f6:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800c8f8:	4b14      	ldr	r3, [pc, #80]	; (800c94c <perfect_pass+0x6cc>)
 800c8fa:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c8fe:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800c900:	4b18      	ldr	r3, [pc, #96]	; (800c964 <perfect_pass+0x6e4>)
 800c902:	2204      	movs	r2, #4
 800c904:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800c906:	4b12      	ldr	r3, [pc, #72]	; (800c950 <perfect_pass+0x6d0>)
 800c908:	2207      	movs	r2, #7
 800c90a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800c90c:	4b11      	ldr	r3, [pc, #68]	; (800c954 <perfect_pass+0x6d4>)
 800c90e:	2207      	movs	r2, #7
 800c910:	701a      	strb	r2, [r3, #0]

					searchF4();
 800c912:	f003 f8f7 	bl	800fb04 <searchF4>
					HAL_Delay(2000);
 800c916:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c91a:	f7f4 fb7f 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c91e:	4b0d      	ldr	r3, [pc, #52]	; (800c954 <perfect_pass+0x6d4>)
 800c920:	2200      	movs	r2, #0
 800c922:	701a      	strb	r2, [r3, #0]
 800c924:	4b0b      	ldr	r3, [pc, #44]	; (800c954 <perfect_pass+0x6d4>)
 800c926:	781a      	ldrb	r2, [r3, #0]
 800c928:	4b09      	ldr	r3, [pc, #36]	; (800c950 <perfect_pass+0x6d0>)
 800c92a:	701a      	strb	r2, [r3, #0]
					searchF4();
 800c92c:	f003 f8ea 	bl	800fb04 <searchF4>

					break;
 800c930:	e175      	b.n	800cc1e <perfect_pass+0x99e>
 800c932:	bf00      	nop
 800c934:	08014318 	.word	0x08014318
 800c938:	20000fa8 	.word	0x20000fa8
 800c93c:	20000456 	.word	0x20000456
 800c940:	2000164c 	.word	0x2000164c
 800c944:	20000c31 	.word	0x20000c31
 800c948:	20000454 	.word	0x20000454
 800c94c:	20000ffc 	.word	0x20000ffc
 800c950:	20000c30 	.word	0x20000c30
 800c954:	20000b8c 	.word	0x20000b8c
 800c958:	20000c78 	.word	0x20000c78
 800c95c:	20000b9c 	.word	0x20000b9c
 800c960:	08014414 	.word	0x08014414
 800c964:	20000457 	.word	0x20000457
 800c968:	0801425c 	.word	0x0801425c

				case 7:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800c96c:	48af      	ldr	r0, [pc, #700]	; (800cc2c <perfect_pass+0x9ac>)
 800c96e:	f006 fac9 	bl	8012f04 <puts>
					MF.FLAG.SCND = 0;
 800c972:	4aaf      	ldr	r2, [pc, #700]	; (800cc30 <perfect_pass+0x9b0>)
 800c974:	8813      	ldrh	r3, [r2, #0]
 800c976:	f36f 1345 	bfc	r3, #5, #1
 800c97a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c97c:	4aac      	ldr	r2, [pc, #688]	; (800cc30 <perfect_pass+0x9b0>)
 800c97e:	8813      	ldrh	r3, [r2, #0]
 800c980:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c984:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800c986:	4aaa      	ldr	r2, [pc, #680]	; (800cc30 <perfect_pass+0x9b0>)
 800c988:	8813      	ldrh	r3, [r2, #0]
 800c98a:	f36f 238a 	bfc	r3, #10, #1
 800c98e:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800c990:	4ba8      	ldr	r3, [pc, #672]	; (800cc34 <perfect_pass+0x9b4>)
 800c992:	2202      	movs	r2, #2
 800c994:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c996:	4ba8      	ldr	r3, [pc, #672]	; (800cc38 <perfect_pass+0x9b8>)
 800c998:	2200      	movs	r2, #0
 800c99a:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c99c:	4ba7      	ldr	r3, [pc, #668]	; (800cc3c <perfect_pass+0x9bc>)
 800c99e:	2202      	movs	r2, #2
 800c9a0:	701a      	strb	r2, [r3, #0]
					accel_hs = 4000;
 800c9a2:	4ba7      	ldr	r3, [pc, #668]	; (800cc40 <perfect_pass+0x9c0>)
 800c9a4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800c9a8:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800c9aa:	4ba6      	ldr	r3, [pc, #664]	; (800cc44 <perfect_pass+0x9c4>)
 800c9ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c9b0:	801a      	strh	r2, [r3, #0]

					goal_x = 7;
 800c9b2:	4ba5      	ldr	r3, [pc, #660]	; (800cc48 <perfect_pass+0x9c8>)
 800c9b4:	2207      	movs	r2, #7
 800c9b6:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c9b8:	4ba4      	ldr	r3, [pc, #656]	; (800cc4c <perfect_pass+0x9cc>)
 800c9ba:	2207      	movs	r2, #7
 800c9bc:	701a      	strb	r2, [r3, #0]

					get_base();
 800c9be:	f005 fb21 	bl	8012004 <get_base>

					searchC();
 800c9c2:	f002 fb49 	bl	800f058 <searchC>
					HAL_Delay(2000);
 800c9c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c9ca:	f7f4 fb27 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c9ce:	4b9f      	ldr	r3, [pc, #636]	; (800cc4c <perfect_pass+0x9cc>)
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	701a      	strb	r2, [r3, #0]
 800c9d4:	4b9d      	ldr	r3, [pc, #628]	; (800cc4c <perfect_pass+0x9cc>)
 800c9d6:	781a      	ldrb	r2, [r3, #0]
 800c9d8:	4b9b      	ldr	r3, [pc, #620]	; (800cc48 <perfect_pass+0x9c8>)
 800c9da:	701a      	strb	r2, [r3, #0]
					searchC();
 800c9dc:	f002 fb3c 	bl	800f058 <searchC>

					degree_z = target_degree_z;
 800c9e0:	4b9b      	ldr	r3, [pc, #620]	; (800cc50 <perfect_pass+0x9d0>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	4a9b      	ldr	r2, [pc, #620]	; (800cc54 <perfect_pass+0x9d4>)
 800c9e6:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800c9e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c9ec:	f7f4 fb16 	bl	800101c <HAL_Delay>
					degree_z = target_degree_z;
					HAL_Delay(2000);
*/

					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース----
					printf("pass press 3.\n");
 800c9f0:	4899      	ldr	r0, [pc, #612]	; (800cc58 <perfect_pass+0x9d8>)
 800c9f2:	f006 fa87 	bl	8012f04 <puts>
					MF.FLAG.SCND = 1;
 800c9f6:	4a8e      	ldr	r2, [pc, #568]	; (800cc30 <perfect_pass+0x9b0>)
 800c9f8:	8813      	ldrh	r3, [r2, #0]
 800c9fa:	f043 0320 	orr.w	r3, r3, #32
 800c9fe:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ca00:	4a8b      	ldr	r2, [pc, #556]	; (800cc30 <perfect_pass+0x9b0>)
 800ca02:	8813      	ldrh	r3, [r2, #0]
 800ca04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ca08:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800ca0a:	4a89      	ldr	r2, [pc, #548]	; (800cc30 <perfect_pass+0x9b0>)
 800ca0c:	8813      	ldrh	r3, [r2, #0]
 800ca0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ca12:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800ca14:	4b87      	ldr	r3, [pc, #540]	; (800cc34 <perfect_pass+0x9b4>)
 800ca16:	2202      	movs	r2, #2
 800ca18:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800ca1a:	4b87      	ldr	r3, [pc, #540]	; (800cc38 <perfect_pass+0x9b8>)
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800ca20:	4b86      	ldr	r3, [pc, #536]	; (800cc3c <perfect_pass+0x9bc>)
 800ca22:	2202      	movs	r2, #2
 800ca24:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800ca26:	4b86      	ldr	r3, [pc, #536]	; (800cc40 <perfect_pass+0x9c0>)
 800ca28:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca2c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800ca2e:	4b85      	ldr	r3, [pc, #532]	; (800cc44 <perfect_pass+0x9c4>)
 800ca30:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800ca34:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800ca36:	4b89      	ldr	r3, [pc, #548]	; (800cc5c <perfect_pass+0x9dc>)
 800ca38:	2203      	movs	r2, #3
 800ca3a:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800ca3c:	4b82      	ldr	r3, [pc, #520]	; (800cc48 <perfect_pass+0x9c8>)
 800ca3e:	2207      	movs	r2, #7
 800ca40:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800ca42:	4b82      	ldr	r3, [pc, #520]	; (800cc4c <perfect_pass+0x9cc>)
 800ca44:	2207      	movs	r2, #7
 800ca46:	701a      	strb	r2, [r3, #0]

					searchF3();
 800ca48:	f002 ff80 	bl	800f94c <searchF3>
					HAL_Delay(2000);
 800ca4c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ca50:	f7f4 fae4 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ca54:	4b7d      	ldr	r3, [pc, #500]	; (800cc4c <perfect_pass+0x9cc>)
 800ca56:	2200      	movs	r2, #0
 800ca58:	701a      	strb	r2, [r3, #0]
 800ca5a:	4b7c      	ldr	r3, [pc, #496]	; (800cc4c <perfect_pass+0x9cc>)
 800ca5c:	781a      	ldrb	r2, [r3, #0]
 800ca5e:	4b7a      	ldr	r3, [pc, #488]	; (800cc48 <perfect_pass+0x9c8>)
 800ca60:	701a      	strb	r2, [r3, #0]
					searchF3();
 800ca62:	f002 ff73 	bl	800f94c <searchF3>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800ca66:	2064      	movs	r0, #100	; 0x64
 800ca68:	f7f8 fd1c 	bl	80054a4 <driveC2>
					degree_z = target_degree_z;
 800ca6c:	4b78      	ldr	r3, [pc, #480]	; (800cc50 <perfect_pass+0x9d0>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	4a78      	ldr	r2, [pc, #480]	; (800cc54 <perfect_pass+0x9d4>)
 800ca72:	6013      	str	r3, [r2, #0]
					start_mode = 0;
 800ca74:	4b70      	ldr	r3, [pc, #448]	; (800cc38 <perfect_pass+0x9b8>)
 800ca76:	2200      	movs	r2, #0
 800ca78:	701a      	strb	r2, [r3, #0]
					HAL_Delay(2000);
 800ca7a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ca7e:	f7f4 facd 	bl	800101c <HAL_Delay>


					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 800ca82:	4877      	ldr	r0, [pc, #476]	; (800cc60 <perfect_pass+0x9e0>)
 800ca84:	f006 fa3e 	bl	8012f04 <puts>
					MF.FLAG.SCND = 1;
 800ca88:	4a69      	ldr	r2, [pc, #420]	; (800cc30 <perfect_pass+0x9b0>)
 800ca8a:	8813      	ldrh	r3, [r2, #0]
 800ca8c:	f043 0320 	orr.w	r3, r3, #32
 800ca90:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ca92:	4a67      	ldr	r2, [pc, #412]	; (800cc30 <perfect_pass+0x9b0>)
 800ca94:	8813      	ldrh	r3, [r2, #0]
 800ca96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ca9a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800ca9c:	4a64      	ldr	r2, [pc, #400]	; (800cc30 <perfect_pass+0x9b0>)
 800ca9e:	8813      	ldrh	r3, [r2, #0]
 800caa0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800caa4:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800caa6:	4b63      	ldr	r3, [pc, #396]	; (800cc34 <perfect_pass+0x9b4>)
 800caa8:	2202      	movs	r2, #2
 800caaa:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800caac:	4b62      	ldr	r3, [pc, #392]	; (800cc38 <perfect_pass+0x9b8>)
 800caae:	2200      	movs	r2, #0
 800cab0:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800cab2:	4b62      	ldr	r3, [pc, #392]	; (800cc3c <perfect_pass+0x9bc>)
 800cab4:	2202      	movs	r2, #2
 800cab6:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800cab8:	4b61      	ldr	r3, [pc, #388]	; (800cc40 <perfect_pass+0x9c0>)
 800caba:	f241 3288 	movw	r2, #5000	; 0x1388
 800cabe:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800cac0:	4b60      	ldr	r3, [pc, #384]	; (800cc44 <perfect_pass+0x9c4>)
 800cac2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800cac6:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800cac8:	4b64      	ldr	r3, [pc, #400]	; (800cc5c <perfect_pass+0x9dc>)
 800caca:	2204      	movs	r2, #4
 800cacc:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800cace:	4b5e      	ldr	r3, [pc, #376]	; (800cc48 <perfect_pass+0x9c8>)
 800cad0:	2207      	movs	r2, #7
 800cad2:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800cad4:	4b5d      	ldr	r3, [pc, #372]	; (800cc4c <perfect_pass+0x9cc>)
 800cad6:	2207      	movs	r2, #7
 800cad8:	701a      	strb	r2, [r3, #0]

					searchF4();
 800cada:	f003 f813 	bl	800fb04 <searchF4>
					HAL_Delay(2000);
 800cade:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800cae2:	f7f4 fa9b 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800cae6:	4b59      	ldr	r3, [pc, #356]	; (800cc4c <perfect_pass+0x9cc>)
 800cae8:	2200      	movs	r2, #0
 800caea:	701a      	strb	r2, [r3, #0]
 800caec:	4b57      	ldr	r3, [pc, #348]	; (800cc4c <perfect_pass+0x9cc>)
 800caee:	781a      	ldrb	r2, [r3, #0]
 800caf0:	4b55      	ldr	r3, [pc, #340]	; (800cc48 <perfect_pass+0x9c8>)
 800caf2:	701a      	strb	r2, [r3, #0]
					searchF4();
 800caf4:	f003 f806 	bl	800fb04 <searchF4>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800caf8:	2064      	movs	r0, #100	; 0x64
 800cafa:	f7f8 fcd3 	bl	80054a4 <driveC2>
					degree_z = target_degree_z;
 800cafe:	4b54      	ldr	r3, [pc, #336]	; (800cc50 <perfect_pass+0x9d0>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	4a54      	ldr	r2, [pc, #336]	; (800cc54 <perfect_pass+0x9d4>)
 800cb04:	6013      	str	r3, [r2, #0]
					start_mode = 0;
 800cb06:	4b4c      	ldr	r3, [pc, #304]	; (800cc38 <perfect_pass+0x9b8>)
 800cb08:	2200      	movs	r2, #0
 800cb0a:	701a      	strb	r2, [r3, #0]

					HAL_Delay(2000);
 800cb0c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800cb10:	f7f4 fa84 	bl	800101c <HAL_Delay>
					goal_x = goal_y = 0;
					searchD();
*/

					//----a直線と大回り圧縮 High Speed----
					printf("pass press 3.\n");
 800cb14:	4850      	ldr	r0, [pc, #320]	; (800cc58 <perfect_pass+0x9d8>)
 800cb16:	f006 f9f5 	bl	8012f04 <puts>
					MF.FLAG.SCND = 1;
 800cb1a:	4a45      	ldr	r2, [pc, #276]	; (800cc30 <perfect_pass+0x9b0>)
 800cb1c:	8813      	ldrh	r3, [r2, #0]
 800cb1e:	f043 0320 	orr.w	r3, r3, #32
 800cb22:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800cb24:	4a42      	ldr	r2, [pc, #264]	; (800cc30 <perfect_pass+0x9b0>)
 800cb26:	8813      	ldrh	r3, [r2, #0]
 800cb28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cb2c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800cb2e:	4a40      	ldr	r2, [pc, #256]	; (800cc30 <perfect_pass+0x9b0>)
 800cb30:	8813      	ldrh	r3, [r2, #0]
 800cb32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cb36:	8013      	strh	r3, [r2, #0]
					run_mode = 3;
 800cb38:	4b3e      	ldr	r3, [pc, #248]	; (800cc34 <perfect_pass+0x9b4>)
 800cb3a:	2203      	movs	r2, #3
 800cb3c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800cb3e:	4b3e      	ldr	r3, [pc, #248]	; (800cc38 <perfect_pass+0x9b8>)
 800cb40:	2200      	movs	r2, #0
 800cb42:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800cb44:	4b3d      	ldr	r3, [pc, #244]	; (800cc3c <perfect_pass+0x9bc>)
 800cb46:	2202      	movs	r2, #2
 800cb48:	701a      	strb	r2, [r3, #0]
					accel_hs = 6000;
 800cb4a:	4b3d      	ldr	r3, [pc, #244]	; (800cc40 <perfect_pass+0x9c0>)
 800cb4c:	f241 7270 	movw	r2, #6000	; 0x1770
 800cb50:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800cb52:	4b3c      	ldr	r3, [pc, #240]	; (800cc44 <perfect_pass+0x9c4>)
 800cb54:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800cb58:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800cb5a:	4b40      	ldr	r3, [pc, #256]	; (800cc5c <perfect_pass+0x9dc>)
 800cb5c:	2203      	movs	r2, #3
 800cb5e:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800cb60:	4b39      	ldr	r3, [pc, #228]	; (800cc48 <perfect_pass+0x9c8>)
 800cb62:	2207      	movs	r2, #7
 800cb64:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800cb66:	4b39      	ldr	r3, [pc, #228]	; (800cc4c <perfect_pass+0x9cc>)
 800cb68:	2207      	movs	r2, #7
 800cb6a:	701a      	strb	r2, [r3, #0]

					searchF3();
 800cb6c:	f002 feee 	bl	800f94c <searchF3>
					HAL_Delay(2000);
 800cb70:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800cb74:	f7f4 fa52 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800cb78:	4b34      	ldr	r3, [pc, #208]	; (800cc4c <perfect_pass+0x9cc>)
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	701a      	strb	r2, [r3, #0]
 800cb7e:	4b33      	ldr	r3, [pc, #204]	; (800cc4c <perfect_pass+0x9cc>)
 800cb80:	781a      	ldrb	r2, [r3, #0]
 800cb82:	4b31      	ldr	r3, [pc, #196]	; (800cc48 <perfect_pass+0x9c8>)
 800cb84:	701a      	strb	r2, [r3, #0]
					searchF3();
 800cb86:	f002 fee1 	bl	800f94c <searchF3>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800cb8a:	2064      	movs	r0, #100	; 0x64
 800cb8c:	f7f8 fc8a 	bl	80054a4 <driveC2>
					degree_z = target_degree_z;
 800cb90:	4b2f      	ldr	r3, [pc, #188]	; (800cc50 <perfect_pass+0x9d0>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	4a2f      	ldr	r2, [pc, #188]	; (800cc54 <perfect_pass+0x9d4>)
 800cb96:	6013      	str	r3, [r2, #0]
					start_mode = 0;
 800cb98:	4b27      	ldr	r3, [pc, #156]	; (800cc38 <perfect_pass+0x9b8>)
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	701a      	strb	r2, [r3, #0]

					HAL_Delay(2000);
 800cb9e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800cba2:	f7f4 fa3b 	bl	800101c <HAL_Delay>


					//----a直線と大回り圧縮と斜め High Speedｰｰｰｰ
					printf("pass press 4.\n");
 800cba6:	482e      	ldr	r0, [pc, #184]	; (800cc60 <perfect_pass+0x9e0>)
 800cba8:	f006 f9ac 	bl	8012f04 <puts>
					MF.FLAG.SCND = 1;
 800cbac:	4a20      	ldr	r2, [pc, #128]	; (800cc30 <perfect_pass+0x9b0>)
 800cbae:	8813      	ldrh	r3, [r2, #0]
 800cbb0:	f043 0320 	orr.w	r3, r3, #32
 800cbb4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800cbb6:	4a1e      	ldr	r2, [pc, #120]	; (800cc30 <perfect_pass+0x9b0>)
 800cbb8:	8813      	ldrh	r3, [r2, #0]
 800cbba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cbbe:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800cbc0:	4a1b      	ldr	r2, [pc, #108]	; (800cc30 <perfect_pass+0x9b0>)
 800cbc2:	8813      	ldrh	r3, [r2, #0]
 800cbc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cbc8:	8013      	strh	r3, [r2, #0]
					run_mode = 3;
 800cbca:	4b1a      	ldr	r3, [pc, #104]	; (800cc34 <perfect_pass+0x9b4>)
 800cbcc:	2203      	movs	r2, #3
 800cbce:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800cbd0:	4b19      	ldr	r3, [pc, #100]	; (800cc38 <perfect_pass+0x9b8>)
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800cbd6:	4b19      	ldr	r3, [pc, #100]	; (800cc3c <perfect_pass+0x9bc>)
 800cbd8:	2202      	movs	r2, #2
 800cbda:	701a      	strb	r2, [r3, #0]
					accel_hs = 6000;
 800cbdc:	4b18      	ldr	r3, [pc, #96]	; (800cc40 <perfect_pass+0x9c0>)
 800cbde:	f241 7270 	movw	r2, #6000	; 0x1770
 800cbe2:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800cbe4:	4b17      	ldr	r3, [pc, #92]	; (800cc44 <perfect_pass+0x9c4>)
 800cbe6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800cbea:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800cbec:	4b1b      	ldr	r3, [pc, #108]	; (800cc5c <perfect_pass+0x9dc>)
 800cbee:	2204      	movs	r2, #4
 800cbf0:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800cbf2:	4b15      	ldr	r3, [pc, #84]	; (800cc48 <perfect_pass+0x9c8>)
 800cbf4:	2207      	movs	r2, #7
 800cbf6:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800cbf8:	4b14      	ldr	r3, [pc, #80]	; (800cc4c <perfect_pass+0x9cc>)
 800cbfa:	2207      	movs	r2, #7
 800cbfc:	701a      	strb	r2, [r3, #0]

					searchF4();
 800cbfe:	f002 ff81 	bl	800fb04 <searchF4>
					HAL_Delay(2000);
 800cc02:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800cc06:	f7f4 fa09 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800cc0a:	4b10      	ldr	r3, [pc, #64]	; (800cc4c <perfect_pass+0x9cc>)
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	701a      	strb	r2, [r3, #0]
 800cc10:	4b0e      	ldr	r3, [pc, #56]	; (800cc4c <perfect_pass+0x9cc>)
 800cc12:	781a      	ldrb	r2, [r3, #0]
 800cc14:	4b0c      	ldr	r3, [pc, #48]	; (800cc48 <perfect_pass+0x9c8>)
 800cc16:	701a      	strb	r2, [r3, #0]
					searchF4();
 800cc18:	f002 ff74 	bl	800fb04 <searchF4>

					break;
 800cc1c:	bf00      	nop
			  }
			  dist_l = 0;
 800cc1e:	4b11      	ldr	r3, [pc, #68]	; (800cc64 <perfect_pass+0x9e4>)
 800cc20:	f04f 0200 	mov.w	r2, #0
 800cc24:	601a      	str	r2, [r3, #0]
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800cc26:	f7ff bb34 	b.w	800c292 <perfect_pass+0x12>
 800cc2a:	bf00      	nop
 800cc2c:	08014318 	.word	0x08014318
 800cc30:	20000fa8 	.word	0x20000fa8
 800cc34:	20000456 	.word	0x20000456
 800cc38:	2000164c 	.word	0x2000164c
 800cc3c:	20000c31 	.word	0x20000c31
 800cc40:	20000454 	.word	0x20000454
 800cc44:	20000ffc 	.word	0x20000ffc
 800cc48:	20000c30 	.word	0x20000c30
 800cc4c:	20000b8c 	.word	0x20000b8c
 800cc50:	20000c78 	.word	0x20000c78
 800cc54:	20000b9c 	.word	0x20000b9c
 800cc58:	08014414 	.word	0x08014414
 800cc5c:	20000457 	.word	0x20000457
 800cc60:	0801425c 	.word	0x0801425c
 800cc64:	20001648 	.word	0x20001648

0800cc68 <eeprom_enable_write>:
//eeprom_enable_write
// eepromとして使うflashメモリ領域をeraseし，書き込みを有効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_enable_write(void){
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b088      	sub	sp, #32
 800cc6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t PageError = 0;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	607b      	str	r3, [r7, #4]
  EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800cc72:	2300      	movs	r3, #0
 800cc74:	60bb      	str	r3, [r7, #8]
  //EraseInitStruct.Banks = FLASH_BANK_1;
  //EraseInitStruct.Sector = EEPROM_START_ADDRESS;
  EraseInitStruct.Sector = FLASH_SECTOR_11;
 800cc76:	230b      	movs	r3, #11
 800cc78:	613b      	str	r3, [r7, #16]
  EraseInitStruct.NbSectors = 1;
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	617b      	str	r3, [r7, #20]
  EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800cc7e:	2302      	movs	r3, #2
 800cc80:	61bb      	str	r3, [r7, #24]

  status = HAL_FLASH_Unlock();
 800cc82:	f7f4 ff0d 	bl	8001aa0 <HAL_FLASH_Unlock>
 800cc86:	4603      	mov	r3, r0
 800cc88:	77fb      	strb	r3, [r7, #31]
  if(status != HAL_OK) return status;
 800cc8a:	7ffb      	ldrb	r3, [r7, #31]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d001      	beq.n	800cc94 <eeprom_enable_write+0x2c>
 800cc90:	7ffb      	ldrb	r3, [r7, #31]
 800cc92:	e009      	b.n	800cca8 <eeprom_enable_write+0x40>
  status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 800cc94:	1d3a      	adds	r2, r7, #4
 800cc96:	f107 0308 	add.w	r3, r7, #8
 800cc9a:	4611      	mov	r1, r2
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f7f5 f85d 	bl	8001d5c <HAL_FLASHEx_Erase>
 800cca2:	4603      	mov	r3, r0
 800cca4:	77fb      	strb	r3, [r7, #31]
  return status;
 800cca6:	7ffb      	ldrb	r3, [r7, #31]
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3720      	adds	r7, #32
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}

0800ccb0 <eeprom_disable_write>:
//eeprom_disable_write
// eepromとして使うflashメモリ領域への書き込みを無効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_disable_write(void){
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	af00      	add	r7, sp, #0
  return HAL_FLASH_Lock();
 800ccb4:	f7f4 ff16 	bl	8001ae4 <HAL_FLASH_Lock>
 800ccb8:	4603      	mov	r3, r0
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	bd80      	pop	{r7, pc}

0800ccbe <eeprom_write_halfword>:
//eeprom_write_halfword
// eepromとして使うflashメモリ領域へ2バイトの値を書き込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット，data …… 書き込みたいuin16_t型データ
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_write_halfword(uint32_t address, uint16_t data){
 800ccbe:	b590      	push	{r4, r7, lr}
 800ccc0:	b085      	sub	sp, #20
 800ccc2:	af00      	add	r7, sp, #0
 800ccc4:	6078      	str	r0, [r7, #4]
 800ccc6:	460b      	mov	r3, r1
 800ccc8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status;
  address = address*2 + EEPROM_START_ADDRESS;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800ccd0:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 800ccd4:	005b      	lsls	r3, r3, #1
 800ccd6:	607b      	str	r3, [r7, #4]
  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 800ccd8:	887b      	ldrh	r3, [r7, #2]
 800ccda:	f04f 0400 	mov.w	r4, #0
 800ccde:	461a      	mov	r2, r3
 800cce0:	4623      	mov	r3, r4
 800cce2:	6879      	ldr	r1, [r7, #4]
 800cce4:	2001      	movs	r0, #1
 800cce6:	f7f4 fe87 	bl	80019f8 <HAL_FLASH_Program>
 800ccea:	4603      	mov	r3, r0
 800ccec:	73fb      	strb	r3, [r7, #15]
  return status;
 800ccee:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3714      	adds	r7, #20
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd90      	pop	{r4, r7, pc}

0800ccf8 <eeprom_read_halfword>:
//eeprom_read_halfword
// eepromとして使うflashメモリ領域から2バイトの値を読み込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット
// 戻り値：読み込んだuin16_t型データ
//+++++++++++++++++++++++++++++++++++++++++++++++
uint16_t eeprom_read_halfword(uint32_t address){
 800ccf8:	b480      	push	{r7}
 800ccfa:	b085      	sub	sp, #20
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
  uint16_t val = 0;
 800cd00:	2300      	movs	r3, #0
 800cd02:	81fb      	strh	r3, [r7, #14]
  address = address*2 + EEPROM_START_ADDRESS;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800cd0a:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 800cd0e:	005b      	lsls	r3, r3, #1
 800cd10:	607b      	str	r3, [r7, #4]
  val = *(__IO uint16_t *)address;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	881b      	ldrh	r3, [r3, #0]
 800cd16:	81fb      	strh	r3, [r7, #14]
  return val;
 800cd18:	89fb      	ldrh	r3, [r7, #14]
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3714      	adds	r7, #20
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd24:	4770      	bx	lr
	...

0800cd28 <gyro_init>:
#include "global.h"

SPI_HandleTypeDef hspi3;


void gyro_init(void){
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b082      	sub	sp, #8
 800cd2c:	af00      	add	r7, sp, #0
  uint8_t who_am_i;

  HAL_Delay(100); 					// wait start up
 800cd2e:	2064      	movs	r0, #100	; 0x64
 800cd30:	f7f4 f974 	bl	800101c <HAL_Delay>
  who_am_i = read_byte(WHO_AM_I); 	// 1. read who am i
 800cd34:	2075      	movs	r0, #117	; 0x75
 800cd36:	f000 f82f 	bl	800cd98 <read_byte>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	71fb      	strb	r3, [r7, #7]
  printf("0x%x\r\n",who_am_i); 		// 2. check who am i value
 800cd3e:	79fb      	ldrb	r3, [r7, #7]
 800cd40:	4619      	mov	r1, r3
 800cd42:	4813      	ldr	r0, [pc, #76]	; (800cd90 <gyro_init+0x68>)
 800cd44:	f006 f86a 	bl	8012e1c <iprintf>

  // 2. error check
  if (who_am_i != 0x98){
 800cd48:	79fb      	ldrb	r3, [r7, #7]
 800cd4a:	2b98      	cmp	r3, #152	; 0x98
 800cd4c:	d003      	beq.n	800cd56 <gyro_init+0x2e>
    while(1){
      printf("gyro_error\r");
 800cd4e:	4811      	ldr	r0, [pc, #68]	; (800cd94 <gyro_init+0x6c>)
 800cd50:	f006 f864 	bl	8012e1c <iprintf>
 800cd54:	e7fb      	b.n	800cd4e <gyro_init+0x26>
    }
  }

  HAL_Delay(50); // wait
 800cd56:	2032      	movs	r0, #50	; 0x32
 800cd58:	f7f4 f960 	bl	800101c <HAL_Delay>
  write_byte(PWR_MGMT_1, 0x00); 	// 3. set pwr_might
 800cd5c:	2100      	movs	r1, #0
 800cd5e:	206b      	movs	r0, #107	; 0x6b
 800cd60:	f000 f846 	bl	800cdf0 <write_byte>

  HAL_Delay(50);
 800cd64:	2032      	movs	r0, #50	; 0x32
 800cd66:	f7f4 f959 	bl	800101c <HAL_Delay>
  write_byte(CONFIG, 0x00); 		// 4. set config
 800cd6a:	2100      	movs	r1, #0
 800cd6c:	201a      	movs	r0, #26
 800cd6e:	f000 f83f 	bl	800cdf0 <write_byte>

  HAL_Delay(50);
 800cd72:	2032      	movs	r0, #50	; 0x32
 800cd74:	f7f4 f952 	bl	800101c <HAL_Delay>
  write_byte(GYRO_CONFIG, 0x18); 	// 5. set gyro config
 800cd78:	2118      	movs	r1, #24
 800cd7a:	201b      	movs	r0, #27
 800cd7c:	f000 f838 	bl	800cdf0 <write_byte>

  HAL_Delay(50);
 800cd80:	2032      	movs	r0, #50	; 0x32
 800cd82:	f7f4 f94b 	bl	800101c <HAL_Delay>
}
 800cd86:	bf00      	nop
 800cd88:	3708      	adds	r7, #8
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}
 800cd8e:	bf00      	nop
 800cd90:	08014424 	.word	0x08014424
 800cd94:	0801442c 	.word	0x0801442c

0800cd98 <read_byte>:


uint8_t read_byte(uint8_t reg){
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b084      	sub	sp, #16
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	4603      	mov	r3, r0
 800cda0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret,val;
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET ); 	//cs = Low;
 800cda2:	2200      	movs	r2, #0
 800cda4:	2104      	movs	r1, #4
 800cda6:	4810      	ldr	r0, [pc, #64]	; (800cde8 <read_byte+0x50>)
 800cda8:	f7f5 faac 	bl	8002304 <HAL_GPIO_WritePin>
  ret = reg | 0x80;  // MSB = 1
 800cdac:	79fb      	ldrb	r3, [r7, #7]
 800cdae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cdb2:	b2db      	uxtb	r3, r3
 800cdb4:	73fb      	strb	r3, [r7, #15]
  HAL_SPI_Transmit(&hspi3, &ret,1,100); 					// sent 1byte(address)
 800cdb6:	f107 010f 	add.w	r1, r7, #15
 800cdba:	2364      	movs	r3, #100	; 0x64
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	480b      	ldr	r0, [pc, #44]	; (800cdec <read_byte+0x54>)
 800cdc0:	f7f5 ff28 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi3,&val,1,100); 						// read 1byte(read data)
 800cdc4:	f107 010e 	add.w	r1, r7, #14
 800cdc8:	2364      	movs	r3, #100	; 0x64
 800cdca:	2201      	movs	r2, #1
 800cdcc:	4807      	ldr	r0, [pc, #28]	; (800cdec <read_byte+0x54>)
 800cdce:	f7f6 f855 	bl	8002e7c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET );  	//cs = High;
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	2104      	movs	r1, #4
 800cdd6:	4804      	ldr	r0, [pc, #16]	; (800cde8 <read_byte+0x50>)
 800cdd8:	f7f5 fa94 	bl	8002304 <HAL_GPIO_WritePin>
  return val;
 800cddc:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3710      	adds	r7, #16
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
 800cde6:	bf00      	nop
 800cde8:	40020c00 	.word	0x40020c00
 800cdec:	20000144 	.word	0x20000144

0800cdf0 <write_byte>:


void write_byte(uint8_t reg, uint8_t val){
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b084      	sub	sp, #16
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	460a      	mov	r2, r1
 800cdfa:	71fb      	strb	r3, [r7, #7]
 800cdfc:	4613      	mov	r3, r2
 800cdfe:	71bb      	strb	r3, [r7, #6]
  uint8_t ret;
  ret = reg & 0x7F ; // MSB = 0
 800ce00:	79fb      	ldrb	r3, [r7, #7]
 800ce02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce06:	b2db      	uxtb	r3, r3
 800ce08:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET); 	// cs = Low;
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	2104      	movs	r1, #4
 800ce0e:	480c      	ldr	r0, [pc, #48]	; (800ce40 <write_byte+0x50>)
 800ce10:	f7f5 fa78 	bl	8002304 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, &ret,1,100); 					// sent 1byte(address)
 800ce14:	f107 010f 	add.w	r1, r7, #15
 800ce18:	2364      	movs	r3, #100	; 0x64
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	4809      	ldr	r0, [pc, #36]	; (800ce44 <write_byte+0x54>)
 800ce1e:	f7f5 fef9 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi3, &val,1,100); 					// read 1byte(write data)
 800ce22:	1db9      	adds	r1, r7, #6
 800ce24:	2364      	movs	r3, #100	; 0x64
 800ce26:	2201      	movs	r2, #1
 800ce28:	4806      	ldr	r0, [pc, #24]	; (800ce44 <write_byte+0x54>)
 800ce2a:	f7f5 fef3 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET); 		// cs = High;
 800ce2e:	2201      	movs	r2, #1
 800ce30:	2104      	movs	r1, #4
 800ce32:	4803      	ldr	r0, [pc, #12]	; (800ce40 <write_byte+0x50>)
 800ce34:	f7f5 fa66 	bl	8002304 <HAL_GPIO_WritePin>
}
 800ce38:	bf00      	nop
 800ce3a:	3710      	adds	r7, #16
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}
 800ce40:	40020c00 	.word	0x40020c00
 800ce44:	20000144 	.word	0x20000144

0800ce48 <gyro_read_z>:
  omega = (float)(gyro_y / GYRO_FACTOR-0.75); // dps to deg/sec
  return omega;
}


float gyro_read_z(void){
 800ce48:	b5b0      	push	{r4, r5, r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
  int16_t gyro_z;
  float omega;

  // H:8bit shift, Link h and l
  gyro_z = (int16_t)((int16_t)(read_byte(GYRO_ZOUT_H) << 8) | read_byte(GYRO_ZOUT_L));
 800ce4e:	2047      	movs	r0, #71	; 0x47
 800ce50:	f7ff ffa2 	bl	800cd98 <read_byte>
 800ce54:	4603      	mov	r3, r0
 800ce56:	021b      	lsls	r3, r3, #8
 800ce58:	b21c      	sxth	r4, r3
 800ce5a:	2048      	movs	r0, #72	; 0x48
 800ce5c:	f7ff ff9c 	bl	800cd98 <read_byte>
 800ce60:	4603      	mov	r3, r0
 800ce62:	b21b      	sxth	r3, r3
 800ce64:	4323      	orrs	r3, r4
 800ce66:	80fb      	strh	r3, [r7, #6]

//  omega = (float)(gyro_z / GYRO_FACTOR-4.9); //5.25// dps to deg/sec
  omega = (float)(gyro_z / GYRO_FACTOR-gyro_drift_value); // dps to deg/sec
 800ce68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7f3 fb51 	bl	8000514 <__aeabi_i2d>
 800ce72:	a314      	add	r3, pc, #80	; (adr r3, 800cec4 <gyro_read_z+0x7c>)
 800ce74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce78:	f7f3 fce0 	bl	800083c <__aeabi_ddiv>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	460c      	mov	r4, r1
 800ce80:	4625      	mov	r5, r4
 800ce82:	461c      	mov	r4, r3
 800ce84:	4b0e      	ldr	r3, [pc, #56]	; (800cec0 <gyro_read_z+0x78>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f7f3 fb55 	bl	8000538 <__aeabi_f2d>
 800ce8e:	4602      	mov	r2, r0
 800ce90:	460b      	mov	r3, r1
 800ce92:	4620      	mov	r0, r4
 800ce94:	4629      	mov	r1, r5
 800ce96:	f7f3 f9ef 	bl	8000278 <__aeabi_dsub>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	460c      	mov	r4, r1
 800ce9e:	4618      	mov	r0, r3
 800cea0:	4621      	mov	r1, r4
 800cea2:	f7f3 fe79 	bl	8000b98 <__aeabi_d2f>
 800cea6:	4603      	mov	r3, r0
 800cea8:	603b      	str	r3, [r7, #0]
  return omega;
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	ee07 3a90 	vmov	s15, r3
}
 800ceb0:	eeb0 0a67 	vmov.f32	s0, s15
 800ceb4:	3708      	adds	r7, #8
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bdb0      	pop	{r4, r5, r7, pc}
 800ceba:	bf00      	nop
 800cebc:	f3af 8000 	nop.w
 800cec0:	20000c74 	.word	0x20000c74
 800cec4:	66666666 	.word	0x66666666
 800cec8:	40306666 	.word	0x40306666

0800cecc <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int c) {
 800cecc:	b580      	push	{r7, lr}
 800cece:	b084      	sub	sp, #16
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
  if( c == '\n' ) {
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2b0a      	cmp	r3, #10
 800ced8:	d108      	bne.n	800ceec <__io_putchar+0x20>
    int _c = '\r';
 800ceda:	230d      	movs	r3, #13
 800cedc:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, &_c, 1, 1);
 800cede:	f107 010c 	add.w	r1, r7, #12
 800cee2:	2301      	movs	r3, #1
 800cee4:	2201      	movs	r2, #1
 800cee6:	4807      	ldr	r0, [pc, #28]	; (800cf04 <__io_putchar+0x38>)
 800cee8:	f7f7 fbc1 	bl	800466e <HAL_UART_Transmit>
  }
  HAL_UART_Transmit(&huart1, &c, 1, 1);
 800ceec:	1d39      	adds	r1, r7, #4
 800ceee:	2301      	movs	r3, #1
 800cef0:	2201      	movs	r2, #1
 800cef2:	4804      	ldr	r0, [pc, #16]	; (800cf04 <__io_putchar+0x38>)
 800cef4:	f7f7 fbbb 	bl	800466e <HAL_UART_Transmit>
  return 0;
 800cef8:	2300      	movs	r3, #0
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3710      	adds	r7, #16
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}
 800cf02:	bf00      	nop
 800cf04:	20000ba4 	.word	0x20000ba4

0800cf08 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cf08:	b5b0      	push	{r4, r5, r7, lr}
 800cf0a:	ed2d 8b02 	vpush	{d8}
 800cf0e:	b08c      	sub	sp, #48	; 0x30
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 800cf14:	2360      	movs	r3, #96	; 0x60
 800cf16:	60fb      	str	r3, [r7, #12]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	617b      	str	r3, [r7, #20]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	61fb      	str	r3, [r7, #28]

	if(htim == &htim6){
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	4ab5      	ldr	r2, [pc, #724]	; (800d1f8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800cf24:	4293      	cmp	r3, r2
 800cf26:	f041 8262 	bne.w	800e3ee <HAL_TIM_PeriodElapsedCallback+0x14e6>
		cnt_l = TIM5 -> CNT;
 800cf2a:	4bb4      	ldr	r3, [pc, #720]	; (800d1fc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800cf2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf2e:	ee07 3a90 	vmov	s15, r3
 800cf32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf36:	4bb2      	ldr	r3, [pc, #712]	; (800d200 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800cf38:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = TIM8 -> CNT;
 800cf3c:	4bb1      	ldr	r3, [pc, #708]	; (800d204 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800cf3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf40:	ee07 3a90 	vmov	s15, r3
 800cf44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf48:	4baf      	ldr	r3, [pc, #700]	; (800d208 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800cf4a:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_l > 40000) cnt_l = cnt_l - 65535;		//0=>65505の値飛び検出用
 800cf4e:	4bac      	ldr	r3, [pc, #688]	; (800d200 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800cf50:	edd3 7a00 	vldr	s15, [r3]
 800cf54:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800d20c <HAL_TIM_PeriodElapsedCallback+0x304>
 800cf58:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cf5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf60:	dd09      	ble.n	800cf76 <HAL_TIM_PeriodElapsedCallback+0x6e>
 800cf62:	4ba7      	ldr	r3, [pc, #668]	; (800d200 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800cf64:	edd3 7a00 	vldr	s15, [r3]
 800cf68:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 800d210 <HAL_TIM_PeriodElapsedCallback+0x308>
 800cf6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cf70:	4ba3      	ldr	r3, [pc, #652]	; (800d200 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800cf72:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_r > 40000) cnt_r = cnt_r - 65535;		//0=>65505の値飛び検出用
 800cf76:	4ba4      	ldr	r3, [pc, #656]	; (800d208 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800cf78:	edd3 7a00 	vldr	s15, [r3]
 800cf7c:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 800d20c <HAL_TIM_PeriodElapsedCallback+0x304>
 800cf80:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cf84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf88:	dd09      	ble.n	800cf9e <HAL_TIM_PeriodElapsedCallback+0x96>
 800cf8a:	4b9f      	ldr	r3, [pc, #636]	; (800d208 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800cf8c:	edd3 7a00 	vldr	s15, [r3]
 800cf90:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 800d210 <HAL_TIM_PeriodElapsedCallback+0x308>
 800cf94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cf98:	4b9b      	ldr	r3, [pc, #620]	; (800d208 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800cf9a:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = cnt_r * -1;								//a回転方向合わせ
 800cf9e:	4b9a      	ldr	r3, [pc, #616]	; (800d208 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800cfa0:	edd3 7a00 	vldr	s15, [r3]
 800cfa4:	eef1 7a67 	vneg.f32	s15, s15
 800cfa8:	4b97      	ldr	r3, [pc, #604]	; (800d208 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800cfaa:	edc3 7a00 	vstr	s15, [r3]

		dist_l = dist_l + cnt_l * (DIAMETER * M_PI * 11 / 42 / 4096 / 4);
 800cfae:	4b99      	ldr	r3, [pc, #612]	; (800d214 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7f3 fac0 	bl	8000538 <__aeabi_f2d>
 800cfb8:	4604      	mov	r4, r0
 800cfba:	460d      	mov	r5, r1
 800cfbc:	4b90      	ldr	r3, [pc, #576]	; (800d200 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f7f3 fab9 	bl	8000538 <__aeabi_f2d>
 800cfc6:	a388      	add	r3, pc, #544	; (adr r3, 800d1e8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800cfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfcc:	f7f3 fb0c 	bl	80005e8 <__aeabi_dmul>
 800cfd0:	4602      	mov	r2, r0
 800cfd2:	460b      	mov	r3, r1
 800cfd4:	4620      	mov	r0, r4
 800cfd6:	4629      	mov	r1, r5
 800cfd8:	f7f3 f950 	bl	800027c <__adddf3>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	460c      	mov	r4, r1
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	4621      	mov	r1, r4
 800cfe4:	f7f3 fdd8 	bl	8000b98 <__aeabi_d2f>
 800cfe8:	4602      	mov	r2, r0
 800cfea:	4b8a      	ldr	r3, [pc, #552]	; (800d214 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800cfec:	601a      	str	r2, [r3, #0]
		dist_r = dist_r + cnt_r * (DIAMETER * M_PI * 11 / 42 / 4096 / 4);
 800cfee:	4b8a      	ldr	r3, [pc, #552]	; (800d218 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	4618      	mov	r0, r3
 800cff4:	f7f3 faa0 	bl	8000538 <__aeabi_f2d>
 800cff8:	4604      	mov	r4, r0
 800cffa:	460d      	mov	r5, r1
 800cffc:	4b82      	ldr	r3, [pc, #520]	; (800d208 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	4618      	mov	r0, r3
 800d002:	f7f3 fa99 	bl	8000538 <__aeabi_f2d>
 800d006:	a378      	add	r3, pc, #480	; (adr r3, 800d1e8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800d008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d00c:	f7f3 faec 	bl	80005e8 <__aeabi_dmul>
 800d010:	4602      	mov	r2, r0
 800d012:	460b      	mov	r3, r1
 800d014:	4620      	mov	r0, r4
 800d016:	4629      	mov	r1, r5
 800d018:	f7f3 f930 	bl	800027c <__adddf3>
 800d01c:	4603      	mov	r3, r0
 800d01e:	460c      	mov	r4, r1
 800d020:	4618      	mov	r0, r3
 800d022:	4621      	mov	r1, r4
 800d024:	f7f3 fdb8 	bl	8000b98 <__aeabi_d2f>
 800d028:	4602      	mov	r2, r0
 800d02a:	4b7b      	ldr	r3, [pc, #492]	; (800d218 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800d02c:	601a      	str	r2, [r3, #0]

		speed_l = cnt_l * (DIAMETER * M_PI * 11 / 42 / 4096 / 4) / 0.001;
 800d02e:	4b74      	ldr	r3, [pc, #464]	; (800d200 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	4618      	mov	r0, r3
 800d034:	f7f3 fa80 	bl	8000538 <__aeabi_f2d>
 800d038:	a36b      	add	r3, pc, #428	; (adr r3, 800d1e8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800d03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d03e:	f7f3 fad3 	bl	80005e8 <__aeabi_dmul>
 800d042:	4603      	mov	r3, r0
 800d044:	460c      	mov	r4, r1
 800d046:	4618      	mov	r0, r3
 800d048:	4621      	mov	r1, r4
 800d04a:	a369      	add	r3, pc, #420	; (adr r3, 800d1f0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800d04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d050:	f7f3 fbf4 	bl	800083c <__aeabi_ddiv>
 800d054:	4603      	mov	r3, r0
 800d056:	460c      	mov	r4, r1
 800d058:	4618      	mov	r0, r3
 800d05a:	4621      	mov	r1, r4
 800d05c:	f7f3 fd9c 	bl	8000b98 <__aeabi_d2f>
 800d060:	4602      	mov	r2, r0
 800d062:	4b6e      	ldr	r3, [pc, #440]	; (800d21c <HAL_TIM_PeriodElapsedCallback+0x314>)
 800d064:	601a      	str	r2, [r3, #0]
		speed_r = cnt_r * (DIAMETER * M_PI * 11 / 42 / 4096 / 4) / 0.001;
 800d066:	4b68      	ldr	r3, [pc, #416]	; (800d208 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	4618      	mov	r0, r3
 800d06c:	f7f3 fa64 	bl	8000538 <__aeabi_f2d>
 800d070:	a35d      	add	r3, pc, #372	; (adr r3, 800d1e8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800d072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d076:	f7f3 fab7 	bl	80005e8 <__aeabi_dmul>
 800d07a:	4603      	mov	r3, r0
 800d07c:	460c      	mov	r4, r1
 800d07e:	4618      	mov	r0, r3
 800d080:	4621      	mov	r1, r4
 800d082:	a35b      	add	r3, pc, #364	; (adr r3, 800d1f0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800d084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d088:	f7f3 fbd8 	bl	800083c <__aeabi_ddiv>
 800d08c:	4603      	mov	r3, r0
 800d08e:	460c      	mov	r4, r1
 800d090:	4618      	mov	r0, r3
 800d092:	4621      	mov	r1, r4
 800d094:	f7f3 fd80 	bl	8000b98 <__aeabi_d2f>
 800d098:	4602      	mov	r2, r0
 800d09a:	4b61      	ldr	r3, [pc, #388]	; (800d220 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800d09c:	601a      	str	r2, [r3, #0]

		TIM5 -> CNT = 0;
 800d09e:	4b57      	ldr	r3, [pc, #348]	; (800d1fc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	625a      	str	r2, [r3, #36]	; 0x24
		TIM8 -> CNT = 0;
 800d0a4:	4b57      	ldr	r3, [pc, #348]	; (800d204 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	625a      	str	r2, [r3, #36]	; 0x24

		if(MF.FLAG.SPD){
 800d0aa:	4b5e      	ldr	r3, [pc, #376]	; (800d224 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800d0ac:	881b      	ldrh	r3, [r3, #0]
 800d0ae:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800d0b2:	b2db      	uxtb	r3, r3
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	f000 80fc 	beq.w	800d2b2 <HAL_TIM_PeriodElapsedCallback+0x3aa>
			target_speed_l += accel_l * 0.001;
 800d0ba:	4b5b      	ldr	r3, [pc, #364]	; (800d228 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f7f3 fa3a 	bl	8000538 <__aeabi_f2d>
 800d0c4:	a34a      	add	r3, pc, #296	; (adr r3, 800d1f0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800d0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ca:	f7f3 fa8d 	bl	80005e8 <__aeabi_dmul>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	460c      	mov	r4, r1
 800d0d2:	4625      	mov	r5, r4
 800d0d4:	461c      	mov	r4, r3
 800d0d6:	4b55      	ldr	r3, [pc, #340]	; (800d22c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f7f3 fa2c 	bl	8000538 <__aeabi_f2d>
 800d0e0:	4602      	mov	r2, r0
 800d0e2:	460b      	mov	r3, r1
 800d0e4:	4620      	mov	r0, r4
 800d0e6:	4629      	mov	r1, r5
 800d0e8:	f7f3 f8c8 	bl	800027c <__adddf3>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	460c      	mov	r4, r1
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	4621      	mov	r1, r4
 800d0f4:	f7f3 fd50 	bl	8000b98 <__aeabi_d2f>
 800d0f8:	4602      	mov	r2, r0
 800d0fa:	4b4c      	ldr	r3, [pc, #304]	; (800d22c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800d0fc:	601a      	str	r2, [r3, #0]
			target_speed_l = max(min(target_speed_l, speed_max_l), speed_min_l);
 800d0fe:	4b4b      	ldr	r3, [pc, #300]	; (800d22c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800d100:	ed93 7a00 	vldr	s14, [r3]
 800d104:	4b4a      	ldr	r3, [pc, #296]	; (800d230 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800d106:	edd3 7a00 	vldr	s15, [r3]
 800d10a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d10e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d112:	dd03      	ble.n	800d11c <HAL_TIM_PeriodElapsedCallback+0x214>
 800d114:	4b46      	ldr	r3, [pc, #280]	; (800d230 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800d116:	edd3 7a00 	vldr	s15, [r3]
 800d11a:	e002      	b.n	800d122 <HAL_TIM_PeriodElapsedCallback+0x21a>
 800d11c:	4b43      	ldr	r3, [pc, #268]	; (800d22c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800d11e:	edd3 7a00 	vldr	s15, [r3]
 800d122:	4b44      	ldr	r3, [pc, #272]	; (800d234 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800d124:	ed93 7a00 	vldr	s14, [r3]
 800d128:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d12c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d130:	dd10      	ble.n	800d154 <HAL_TIM_PeriodElapsedCallback+0x24c>
 800d132:	4b3e      	ldr	r3, [pc, #248]	; (800d22c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800d134:	ed93 7a00 	vldr	s14, [r3]
 800d138:	4b3d      	ldr	r3, [pc, #244]	; (800d230 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800d13a:	edd3 7a00 	vldr	s15, [r3]
 800d13e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d146:	dd02      	ble.n	800d14e <HAL_TIM_PeriodElapsedCallback+0x246>
 800d148:	4b39      	ldr	r3, [pc, #228]	; (800d230 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	e004      	b.n	800d158 <HAL_TIM_PeriodElapsedCallback+0x250>
 800d14e:	4b37      	ldr	r3, [pc, #220]	; (800d22c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	e001      	b.n	800d158 <HAL_TIM_PeriodElapsedCallback+0x250>
 800d154:	4b37      	ldr	r3, [pc, #220]	; (800d234 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	4a34      	ldr	r2, [pc, #208]	; (800d22c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800d15a:	6013      	str	r3, [r2, #0]
			epsilon_l = target_speed_l - speed_l;
 800d15c:	4b33      	ldr	r3, [pc, #204]	; (800d22c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800d15e:	ed93 7a00 	vldr	s14, [r3]
 800d162:	4b2e      	ldr	r3, [pc, #184]	; (800d21c <HAL_TIM_PeriodElapsedCallback+0x314>)
 800d164:	edd3 7a00 	vldr	s15, [r3]
 800d168:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d16c:	4b32      	ldr	r3, [pc, #200]	; (800d238 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800d16e:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kpl * epsilon_l;
 800d172:	4b31      	ldr	r3, [pc, #196]	; (800d238 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800d174:	edd3 7a00 	vldr	s15, [r3]
 800d178:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800d17c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d180:	4b2e      	ldr	r3, [pc, #184]	; (800d23c <HAL_TIM_PeriodElapsedCallback+0x334>)
 800d182:	edc3 7a00 	vstr	s15, [r3]

			target_speed_r += accel_r * 0.001;
 800d186:	4b2e      	ldr	r3, [pc, #184]	; (800d240 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	4618      	mov	r0, r3
 800d18c:	f7f3 f9d4 	bl	8000538 <__aeabi_f2d>
 800d190:	a317      	add	r3, pc, #92	; (adr r3, 800d1f0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800d192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d196:	f7f3 fa27 	bl	80005e8 <__aeabi_dmul>
 800d19a:	4603      	mov	r3, r0
 800d19c:	460c      	mov	r4, r1
 800d19e:	4625      	mov	r5, r4
 800d1a0:	461c      	mov	r4, r3
 800d1a2:	4b28      	ldr	r3, [pc, #160]	; (800d244 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f7f3 f9c6 	bl	8000538 <__aeabi_f2d>
 800d1ac:	4602      	mov	r2, r0
 800d1ae:	460b      	mov	r3, r1
 800d1b0:	4620      	mov	r0, r4
 800d1b2:	4629      	mov	r1, r5
 800d1b4:	f7f3 f862 	bl	800027c <__adddf3>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	460c      	mov	r4, r1
 800d1bc:	4618      	mov	r0, r3
 800d1be:	4621      	mov	r1, r4
 800d1c0:	f7f3 fcea 	bl	8000b98 <__aeabi_d2f>
 800d1c4:	4602      	mov	r2, r0
 800d1c6:	4b1f      	ldr	r3, [pc, #124]	; (800d244 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800d1c8:	601a      	str	r2, [r3, #0]
			target_speed_r = max(min(target_speed_r, speed_max_r), speed_min_r);
 800d1ca:	4b1e      	ldr	r3, [pc, #120]	; (800d244 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800d1cc:	ed93 7a00 	vldr	s14, [r3]
 800d1d0:	4b1d      	ldr	r3, [pc, #116]	; (800d248 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800d1d2:	edd3 7a00 	vldr	s15, [r3]
 800d1d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d1da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1de:	dd35      	ble.n	800d24c <HAL_TIM_PeriodElapsedCallback+0x344>
 800d1e0:	4b19      	ldr	r3, [pc, #100]	; (800d248 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800d1e2:	edd3 7a00 	vldr	s15, [r3]
 800d1e6:	e034      	b.n	800d252 <HAL_TIM_PeriodElapsedCallback+0x34a>
 800d1e8:	9ac0c879 	.word	0x9ac0c879
 800d1ec:	3f538014 	.word	0x3f538014
 800d1f0:	d2f1a9fc 	.word	0xd2f1a9fc
 800d1f4:	3f50624d 	.word	0x3f50624d
 800d1f8:	20000c34 	.word	0x20000c34
 800d1fc:	40000c00 	.word	0x40000c00
 800d200:	200002ac 	.word	0x200002ac
 800d204:	40010400 	.word	0x40010400
 800d208:	20000c2c 	.word	0x20000c2c
 800d20c:	471c4000 	.word	0x471c4000
 800d210:	477fff00 	.word	0x477fff00
 800d214:	20001648 	.word	0x20001648
 800d218:	20000b2c 	.word	0x20000b2c
 800d21c:	20000b30 	.word	0x20000b30
 800d220:	200002bc 	.word	0x200002bc
 800d224:	20000fa8 	.word	0x20000fa8
 800d228:	20000d98 	.word	0x20000d98
 800d22c:	20000c7c 	.word	0x20000c7c
 800d230:	2000077c 	.word	0x2000077c
 800d234:	20000b94 	.word	0x20000b94
 800d238:	20000ba0 	.word	0x20000ba0
 800d23c:	20000c28 	.word	0x20000c28
 800d240:	20000b24 	.word	0x20000b24
 800d244:	200001a0 	.word	0x200001a0
 800d248:	200001a4 	.word	0x200001a4
 800d24c:	4b98      	ldr	r3, [pc, #608]	; (800d4b0 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 800d24e:	edd3 7a00 	vldr	s15, [r3]
 800d252:	4b98      	ldr	r3, [pc, #608]	; (800d4b4 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 800d254:	ed93 7a00 	vldr	s14, [r3]
 800d258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d25c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d260:	dd10      	ble.n	800d284 <HAL_TIM_PeriodElapsedCallback+0x37c>
 800d262:	4b93      	ldr	r3, [pc, #588]	; (800d4b0 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 800d264:	ed93 7a00 	vldr	s14, [r3]
 800d268:	4b93      	ldr	r3, [pc, #588]	; (800d4b8 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 800d26a:	edd3 7a00 	vldr	s15, [r3]
 800d26e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d276:	dd02      	ble.n	800d27e <HAL_TIM_PeriodElapsedCallback+0x376>
 800d278:	4b8f      	ldr	r3, [pc, #572]	; (800d4b8 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	e004      	b.n	800d288 <HAL_TIM_PeriodElapsedCallback+0x380>
 800d27e:	4b8c      	ldr	r3, [pc, #560]	; (800d4b0 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	e001      	b.n	800d288 <HAL_TIM_PeriodElapsedCallback+0x380>
 800d284:	4b8b      	ldr	r3, [pc, #556]	; (800d4b4 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	4a89      	ldr	r2, [pc, #548]	; (800d4b0 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 800d28a:	6013      	str	r3, [r2, #0]
			epsilon_r = target_speed_r - speed_r;
 800d28c:	4b88      	ldr	r3, [pc, #544]	; (800d4b0 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 800d28e:	ed93 7a00 	vldr	s14, [r3]
 800d292:	4b8a      	ldr	r3, [pc, #552]	; (800d4bc <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 800d294:	edd3 7a00 	vldr	s15, [r3]
 800d298:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d29c:	4b88      	ldr	r3, [pc, #544]	; (800d4c0 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 800d29e:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kpr * epsilon_r;
 800d2a2:	4b87      	ldr	r3, [pc, #540]	; (800d4c0 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 800d2a4:	edd3 7a00 	vldr	s15, [r3]
 800d2a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d2ac:	4b85      	ldr	r3, [pc, #532]	; (800d4c4 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 800d2ae:	edc3 7a00 	vstr	s15, [r3]
		}

		log_cnt ++;
 800d2b2:	4b85      	ldr	r3, [pc, #532]	; (800d4c8 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	3301      	adds	r3, #1
 800d2b8:	4a83      	ldr	r2, [pc, #524]	; (800d4c8 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 800d2ba:	6013      	str	r3, [r2, #0]

		if(log_cnt >= 5 && MF2.FLAG.LOG){
 800d2bc:	4b82      	ldr	r3, [pc, #520]	; (800d4c8 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	2b04      	cmp	r3, #4
 800d2c2:	dd37      	ble.n	800d334 <HAL_TIM_PeriodElapsedCallback+0x42c>
 800d2c4:	4b81      	ldr	r3, [pc, #516]	; (800d4cc <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 800d2c6:	881b      	ldrh	r3, [r3, #0]
 800d2c8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800d2cc:	b2db      	uxtb	r3, r3
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d030      	beq.n	800d334 <HAL_TIM_PeriodElapsedCallback+0x42c>
			log_cnt = 0;
 800d2d2:	4b7d      	ldr	r3, [pc, #500]	; (800d4c8 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	601a      	str	r2, [r3, #0]
			if(get_cnt < log_allay){
 800d2d8:	4b7d      	ldr	r3, [pc, #500]	; (800d4d0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	2bc7      	cmp	r3, #199	; 0xc7
 800d2de:	dc29      	bgt.n	800d334 <HAL_TIM_PeriodElapsedCallback+0x42c>
				get_speed_l[get_cnt] = speed_l;
 800d2e0:	4b7c      	ldr	r3, [pc, #496]	; (800d4d4 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 800d2e2:	edd3 7a00 	vldr	s15, [r3]
 800d2e6:	4b7a      	ldr	r3, [pc, #488]	; (800d4d0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d2ee:	ee17 1a90 	vmov	r1, s15
 800d2f2:	4a79      	ldr	r2, [pc, #484]	; (800d4d8 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800d2f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_speed_r[get_cnt] = speed_r;
 800d2f8:	4b70      	ldr	r3, [pc, #448]	; (800d4bc <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 800d2fa:	edd3 7a00 	vldr	s15, [r3]
 800d2fe:	4b74      	ldr	r3, [pc, #464]	; (800d4d0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d306:	ee17 1a90 	vmov	r1, s15
 800d30a:	4a74      	ldr	r2, [pc, #464]	; (800d4dc <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 800d30c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_omega[get_cnt] = gyro_read_z();
 800d310:	f7ff fd9a 	bl	800ce48 <gyro_read_z>
 800d314:	eef0 7a40 	vmov.f32	s15, s0
 800d318:	4b6d      	ldr	r3, [pc, #436]	; (800d4d0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d320:	ee17 1a90 	vmov	r1, s15
 800d324:	4a6e      	ldr	r2, [pc, #440]	; (800d4e0 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800d326:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_cnt++;
 800d32a:	4b69      	ldr	r3, [pc, #420]	; (800d4d0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	3301      	adds	r3, #1
 800d330:	4a67      	ldr	r2, [pc, #412]	; (800d4d0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800d332:	6013      	str	r3, [r2, #0]
//		degree_x += accel_read_x() * 0.001;
//		degree_y += accel_read_y() * 0.001;
//		degree_z += accel_read_z() * 0.001;
//		degree_x += gyro_read_x() * 0.001;
//		degree_y += gyro_read_y() * 0.001;
		degree_z += gyro_read_z() * 0.001;
 800d334:	f7ff fd88 	bl	800ce48 <gyro_read_z>
 800d338:	ee10 3a10 	vmov	r3, s0
 800d33c:	4618      	mov	r0, r3
 800d33e:	f7f3 f8fb 	bl	8000538 <__aeabi_f2d>
 800d342:	a357      	add	r3, pc, #348	; (adr r3, 800d4a0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 800d344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d348:	f7f3 f94e 	bl	80005e8 <__aeabi_dmul>
 800d34c:	4603      	mov	r3, r0
 800d34e:	460c      	mov	r4, r1
 800d350:	4625      	mov	r5, r4
 800d352:	461c      	mov	r4, r3
 800d354:	4b63      	ldr	r3, [pc, #396]	; (800d4e4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	4618      	mov	r0, r3
 800d35a:	f7f3 f8ed 	bl	8000538 <__aeabi_f2d>
 800d35e:	4602      	mov	r2, r0
 800d360:	460b      	mov	r3, r1
 800d362:	4620      	mov	r0, r4
 800d364:	4629      	mov	r1, r5
 800d366:	f7f2 ff89 	bl	800027c <__adddf3>
 800d36a:	4603      	mov	r3, r0
 800d36c:	460c      	mov	r4, r1
 800d36e:	4618      	mov	r0, r3
 800d370:	4621      	mov	r1, r4
 800d372:	f7f3 fc11 	bl	8000b98 <__aeabi_d2f>
 800d376:	4602      	mov	r2, r0
 800d378:	4b5a      	ldr	r3, [pc, #360]	; (800d4e4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800d37a:	601a      	str	r2, [r3, #0]

		//gyro ドリフト量計算
		if(MF2.FLAG.GDRIFT){
 800d37c:	4b53      	ldr	r3, [pc, #332]	; (800d4cc <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 800d37e:	881b      	ldrh	r3, [r3, #0]
 800d380:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800d384:	b2db      	uxtb	r3, r3
 800d386:	2b00      	cmp	r3, #0
 800d388:	d039      	beq.n	800d3fe <HAL_TIM_PeriodElapsedCallback+0x4f6>
			gyro_cnt ++;
 800d38a:	4b57      	ldr	r3, [pc, #348]	; (800d4e8 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	3301      	adds	r3, #1
 800d390:	4a55      	ldr	r2, [pc, #340]	; (800d4e8 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800d392:	6013      	str	r3, [r2, #0]
			sum_omega_z += gyro_read_z();
 800d394:	f7ff fd58 	bl	800ce48 <gyro_read_z>
 800d398:	eeb0 7a40 	vmov.f32	s14, s0
 800d39c:	4b53      	ldr	r3, [pc, #332]	; (800d4ec <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 800d39e:	edd3 7a00 	vldr	s15, [r3]
 800d3a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d3a6:	4b51      	ldr	r3, [pc, #324]	; (800d4ec <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 800d3a8:	edc3 7a00 	vstr	s15, [r3]
			full_led_write1(YELLOW);
 800d3ac:	2006      	movs	r0, #6
 800d3ae:	f004 febb 	bl	8012128 <full_led_write1>
			if(gyro_cnt >= 1000) {
 800d3b2:	4b4d      	ldr	r3, [pc, #308]	; (800d4e8 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d3ba:	db18      	blt.n	800d3ee <HAL_TIM_PeriodElapsedCallback+0x4e6>
				MF2.FLAG.GDRIFT = 0;
 800d3bc:	4a43      	ldr	r2, [pc, #268]	; (800d4cc <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 800d3be:	8813      	ldrh	r3, [r2, #0]
 800d3c0:	f36f 13c7 	bfc	r3, #7, #1
 800d3c4:	8013      	strh	r3, [r2, #0]
				gyro_drift_value = sum_omega_z / gyro_cnt;
 800d3c6:	4b49      	ldr	r3, [pc, #292]	; (800d4ec <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 800d3c8:	edd3 6a00 	vldr	s13, [r3]
 800d3cc:	4b46      	ldr	r3, [pc, #280]	; (800d4e8 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	ee07 3a90 	vmov	s15, r3
 800d3d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d3d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3dc:	4b44      	ldr	r3, [pc, #272]	; (800d4f0 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800d3de:	edc3 7a00 	vstr	s15, [r3]
				gyro_cnt = 0;
 800d3e2:	4b41      	ldr	r3, [pc, #260]	; (800d4e8 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	601a      	str	r2, [r3, #0]
				full_led_write1(BLUEGREEN);
 800d3e8:	2004      	movs	r0, #4
 800d3ea:	f004 fe9d 	bl	8012128 <full_led_write1>
			}
			degree_z = 0;
 800d3ee:	4b3d      	ldr	r3, [pc, #244]	; (800d4e4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800d3f0:	f04f 0200 	mov.w	r2, #0
 800d3f4:	601a      	str	r2, [r3, #0]
			target_degree_z = 0;
 800d3f6:	4b3f      	ldr	r3, [pc, #252]	; (800d4f4 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 800d3f8:	f04f 0200 	mov.w	r2, #0
 800d3fc:	601a      	str	r2, [r3, #0]
		}


		if(MF2.FLAG.ENKAI){
 800d3fe:	4b33      	ldr	r3, [pc, #204]	; (800d4cc <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 800d400:	881b      	ldrh	r3, [r3, #0]
 800d402:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d406:	b2db      	uxtb	r3, r3
 800d408:	2b00      	cmp	r3, #0
 800d40a:	f000 80d0 	beq.w	800d5ae <HAL_TIM_PeriodElapsedCallback+0x6a6>
			target_dist = TREAD*M_PI/360*(degree_z-target_degree_z);
 800d40e:	4b35      	ldr	r3, [pc, #212]	; (800d4e4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800d410:	ed93 7a00 	vldr	s14, [r3]
 800d414:	4b37      	ldr	r3, [pc, #220]	; (800d4f4 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 800d416:	edd3 7a00 	vldr	s15, [r3]
 800d41a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d41e:	ee17 0a90 	vmov	r0, s15
 800d422:	f7f3 f889 	bl	8000538 <__aeabi_f2d>
 800d426:	a320      	add	r3, pc, #128	; (adr r3, 800d4a8 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 800d428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d42c:	f7f3 f8dc 	bl	80005e8 <__aeabi_dmul>
 800d430:	4603      	mov	r3, r0
 800d432:	460c      	mov	r4, r1
 800d434:	4618      	mov	r0, r3
 800d436:	4621      	mov	r1, r4
 800d438:	f7f3 fbae 	bl	8000b98 <__aeabi_d2f>
 800d43c:	4602      	mov	r2, r0
 800d43e:	4b2e      	ldr	r3, [pc, #184]	; (800d4f8 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800d440:	601a      	str	r2, [r3, #0]
			if(target_dist > 0){
 800d442:	4b2d      	ldr	r3, [pc, #180]	; (800d4f8 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800d444:	edd3 7a00 	vldr	s15, [r3]
 800d448:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d44c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d450:	dd58      	ble.n	800d504 <HAL_TIM_PeriodElapsedCallback+0x5fc>
				target_speed_l = sqrt(2*accel_l*target_dist);
 800d452:	4b2a      	ldr	r3, [pc, #168]	; (800d4fc <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800d454:	edd3 7a00 	vldr	s15, [r3]
 800d458:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d45c:	4b26      	ldr	r3, [pc, #152]	; (800d4f8 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800d45e:	edd3 7a00 	vldr	s15, [r3]
 800d462:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d466:	ee17 0a90 	vmov	r0, s15
 800d46a:	f7f3 f865 	bl	8000538 <__aeabi_f2d>
 800d46e:	4603      	mov	r3, r0
 800d470:	460c      	mov	r4, r1
 800d472:	ec44 3b10 	vmov	d0, r3, r4
 800d476:	f006 fcd7 	bl	8013e28 <sqrt>
 800d47a:	ec54 3b10 	vmov	r3, r4, d0
 800d47e:	4618      	mov	r0, r3
 800d480:	4621      	mov	r1, r4
 800d482:	f7f3 fb89 	bl	8000b98 <__aeabi_d2f>
 800d486:	4602      	mov	r2, r0
 800d488:	4b1d      	ldr	r3, [pc, #116]	; (800d500 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800d48a:	601a      	str	r2, [r3, #0]
				target_speed_r = -1 * target_speed_l;
 800d48c:	4b1c      	ldr	r3, [pc, #112]	; (800d500 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800d48e:	edd3 7a00 	vldr	s15, [r3]
 800d492:	eef1 7a67 	vneg.f32	s15, s15
 800d496:	4b06      	ldr	r3, [pc, #24]	; (800d4b0 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 800d498:	edc3 7a00 	vstr	s15, [r3]
 800d49c:	e05f      	b.n	800d55e <HAL_TIM_PeriodElapsedCallback+0x656>
 800d49e:	bf00      	nop
 800d4a0:	d2f1a9fc 	.word	0xd2f1a9fc
 800d4a4:	3f50624d 	.word	0x3f50624d
 800d4a8:	d7653223 	.word	0xd7653223
 800d4ac:	3fe26e40 	.word	0x3fe26e40
 800d4b0:	200001a0 	.word	0x200001a0
 800d4b4:	20000fec 	.word	0x20000fec
 800d4b8:	200001a4 	.word	0x200001a4
 800d4bc:	200002bc 	.word	0x200002bc
 800d4c0:	20000c88 	.word	0x20000c88
 800d4c4:	20000780 	.word	0x20000780
 800d4c8:	20000108 	.word	0x20000108
 800d4cc:	20000fa4 	.word	0x20000fa4
 800d4d0:	20000110 	.word	0x20000110
 800d4d4:	20000b30 	.word	0x20000b30
 800d4d8:	200007c4 	.word	0x200007c4
 800d4dc:	2000045c 	.word	0x2000045c
 800d4e0:	20001328 	.word	0x20001328
 800d4e4:	20000b9c 	.word	0x20000b9c
 800d4e8:	2000010c 	.word	0x2000010c
 800d4ec:	20001000 	.word	0x20001000
 800d4f0:	20000c74 	.word	0x20000c74
 800d4f4:	20000c78 	.word	0x20000c78
 800d4f8:	20000ff8 	.word	0x20000ff8
 800d4fc:	20000d98 	.word	0x20000d98
 800d500:	20000c7c 	.word	0x20000c7c
			}else{
				target_speed_l = sqrt(2*accel_l*target_dist*-1)*-1;
 800d504:	4baa      	ldr	r3, [pc, #680]	; (800d7b0 <HAL_TIM_PeriodElapsedCallback+0x8a8>)
 800d506:	edd3 7a00 	vldr	s15, [r3]
 800d50a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d50e:	4ba9      	ldr	r3, [pc, #676]	; (800d7b4 <HAL_TIM_PeriodElapsedCallback+0x8ac>)
 800d510:	edd3 7a00 	vldr	s15, [r3]
 800d514:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d518:	eef1 7a67 	vneg.f32	s15, s15
 800d51c:	ee17 3a90 	vmov	r3, s15
 800d520:	4618      	mov	r0, r3
 800d522:	f7f3 f809 	bl	8000538 <__aeabi_f2d>
 800d526:	4603      	mov	r3, r0
 800d528:	460c      	mov	r4, r1
 800d52a:	ec44 3b10 	vmov	d0, r3, r4
 800d52e:	f006 fc7b 	bl	8013e28 <sqrt>
 800d532:	ec54 3b10 	vmov	r3, r4, d0
 800d536:	4618      	mov	r0, r3
 800d538:	4621      	mov	r1, r4
 800d53a:	f7f3 fb2d 	bl	8000b98 <__aeabi_d2f>
 800d53e:	4603      	mov	r3, r0
 800d540:	ee07 3a90 	vmov	s15, r3
 800d544:	eef1 7a67 	vneg.f32	s15, s15
 800d548:	4b9b      	ldr	r3, [pc, #620]	; (800d7b8 <HAL_TIM_PeriodElapsedCallback+0x8b0>)
 800d54a:	edc3 7a00 	vstr	s15, [r3]
				target_speed_r = -1 * target_speed_l;
 800d54e:	4b9a      	ldr	r3, [pc, #616]	; (800d7b8 <HAL_TIM_PeriodElapsedCallback+0x8b0>)
 800d550:	edd3 7a00 	vldr	s15, [r3]
 800d554:	eef1 7a67 	vneg.f32	s15, s15
 800d558:	4b98      	ldr	r3, [pc, #608]	; (800d7bc <HAL_TIM_PeriodElapsedCallback+0x8b4>)
 800d55a:	edc3 7a00 	vstr	s15, [r3]
			}

			epsilon_l = target_speed_l - speed_l;
 800d55e:	4b96      	ldr	r3, [pc, #600]	; (800d7b8 <HAL_TIM_PeriodElapsedCallback+0x8b0>)
 800d560:	ed93 7a00 	vldr	s14, [r3]
 800d564:	4b96      	ldr	r3, [pc, #600]	; (800d7c0 <HAL_TIM_PeriodElapsedCallback+0x8b8>)
 800d566:	edd3 7a00 	vldr	s15, [r3]
 800d56a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d56e:	4b95      	ldr	r3, [pc, #596]	; (800d7c4 <HAL_TIM_PeriodElapsedCallback+0x8bc>)
 800d570:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kpl * epsilon_l;
 800d574:	4b93      	ldr	r3, [pc, #588]	; (800d7c4 <HAL_TIM_PeriodElapsedCallback+0x8bc>)
 800d576:	edd3 7a00 	vldr	s15, [r3]
 800d57a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800d57e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d582:	4b91      	ldr	r3, [pc, #580]	; (800d7c8 <HAL_TIM_PeriodElapsedCallback+0x8c0>)
 800d584:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800d588:	4b8c      	ldr	r3, [pc, #560]	; (800d7bc <HAL_TIM_PeriodElapsedCallback+0x8b4>)
 800d58a:	ed93 7a00 	vldr	s14, [r3]
 800d58e:	4b8f      	ldr	r3, [pc, #572]	; (800d7cc <HAL_TIM_PeriodElapsedCallback+0x8c4>)
 800d590:	edd3 7a00 	vldr	s15, [r3]
 800d594:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d598:	4b8d      	ldr	r3, [pc, #564]	; (800d7d0 <HAL_TIM_PeriodElapsedCallback+0x8c8>)
 800d59a:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kpr * epsilon_r;
 800d59e:	4b8c      	ldr	r3, [pc, #560]	; (800d7d0 <HAL_TIM_PeriodElapsedCallback+0x8c8>)
 800d5a0:	edd3 7a00 	vldr	s15, [r3]
 800d5a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d5a8:	4b8a      	ldr	r3, [pc, #552]	; (800d7d4 <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 800d5aa:	edc3 7a00 	vstr	s15, [r3]
		}


		if(MF.FLAG.FWALL){
 800d5ae:	4b8a      	ldr	r3, [pc, #552]	; (800d7d8 <HAL_TIM_PeriodElapsedCallback+0x8d0>)
 800d5b0:	881b      	ldrh	r3, [r3, #0]
 800d5b2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800d5b6:	b2db      	uxtb	r3, r3
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	f000 8122 	beq.w	800d802 <HAL_TIM_PeriodElapsedCallback+0x8fa>
			target_speed_l = (int16_t)(OFFSET_FWALL_L - ad_fl)*0.5;//0.75;
 800d5be:	4b87      	ldr	r3, [pc, #540]	; (800d7dc <HAL_TIM_PeriodElapsedCallback+0x8d4>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	b29b      	uxth	r3, r3
 800d5c4:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 800d5c8:	3304      	adds	r3, #4
 800d5ca:	b29b      	uxth	r3, r3
 800d5cc:	b21b      	sxth	r3, r3
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f7f2 ffa0 	bl	8000514 <__aeabi_i2d>
 800d5d4:	f04f 0200 	mov.w	r2, #0
 800d5d8:	4b81      	ldr	r3, [pc, #516]	; (800d7e0 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 800d5da:	f7f3 f805 	bl	80005e8 <__aeabi_dmul>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	460c      	mov	r4, r1
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	4621      	mov	r1, r4
 800d5e6:	f7f3 fad7 	bl	8000b98 <__aeabi_d2f>
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	4b72      	ldr	r3, [pc, #456]	; (800d7b8 <HAL_TIM_PeriodElapsedCallback+0x8b0>)
 800d5ee:	601a      	str	r2, [r3, #0]
			target_speed_r = (int16_t)(OFFSET_FWALL_R - ad_fr);//*1.5;
 800d5f0:	4b7c      	ldr	r3, [pc, #496]	; (800d7e4 <HAL_TIM_PeriodElapsedCallback+0x8dc>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	b29b      	uxth	r3, r3
 800d5f6:	f5c3 7361 	rsb	r3, r3, #900	; 0x384
 800d5fa:	b29b      	uxth	r3, r3
 800d5fc:	b21b      	sxth	r3, r3
 800d5fe:	ee07 3a90 	vmov	s15, r3
 800d602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d606:	4b6d      	ldr	r3, [pc, #436]	; (800d7bc <HAL_TIM_PeriodElapsedCallback+0x8b4>)
 800d608:	edc3 7a00 	vstr	s15, [r3]

			if(target_speed_l*target_speed_l < 2500)target_speed_l = 0;
 800d60c:	4b6a      	ldr	r3, [pc, #424]	; (800d7b8 <HAL_TIM_PeriodElapsedCallback+0x8b0>)
 800d60e:	ed93 7a00 	vldr	s14, [r3]
 800d612:	4b69      	ldr	r3, [pc, #420]	; (800d7b8 <HAL_TIM_PeriodElapsedCallback+0x8b0>)
 800d614:	edd3 7a00 	vldr	s15, [r3]
 800d618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d61c:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800d7e8 <HAL_TIM_PeriodElapsedCallback+0x8e0>
 800d620:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d628:	d503      	bpl.n	800d632 <HAL_TIM_PeriodElapsedCallback+0x72a>
 800d62a:	4b63      	ldr	r3, [pc, #396]	; (800d7b8 <HAL_TIM_PeriodElapsedCallback+0x8b0>)
 800d62c:	f04f 0200 	mov.w	r2, #0
 800d630:	601a      	str	r2, [r3, #0]
			if(target_speed_r*target_speed_r < 2500)target_speed_r = 0;
 800d632:	4b62      	ldr	r3, [pc, #392]	; (800d7bc <HAL_TIM_PeriodElapsedCallback+0x8b4>)
 800d634:	ed93 7a00 	vldr	s14, [r3]
 800d638:	4b60      	ldr	r3, [pc, #384]	; (800d7bc <HAL_TIM_PeriodElapsedCallback+0x8b4>)
 800d63a:	edd3 7a00 	vldr	s15, [r3]
 800d63e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d642:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800d7e8 <HAL_TIM_PeriodElapsedCallback+0x8e0>
 800d646:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d64a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d64e:	d503      	bpl.n	800d658 <HAL_TIM_PeriodElapsedCallback+0x750>
 800d650:	4b5a      	ldr	r3, [pc, #360]	; (800d7bc <HAL_TIM_PeriodElapsedCallback+0x8b4>)
 800d652:	f04f 0200 	mov.w	r2, #0
 800d656:	601a      	str	r2, [r3, #0]
			if(target_speed_l == 0 && target_speed_r == 0){
 800d658:	4b57      	ldr	r3, [pc, #348]	; (800d7b8 <HAL_TIM_PeriodElapsedCallback+0x8b0>)
 800d65a:	edd3 7a00 	vldr	s15, [r3]
 800d65e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d666:	d111      	bne.n	800d68c <HAL_TIM_PeriodElapsedCallback+0x784>
 800d668:	4b54      	ldr	r3, [pc, #336]	; (800d7bc <HAL_TIM_PeriodElapsedCallback+0x8b4>)
 800d66a:	edd3 7a00 	vldr	s15, [r3]
 800d66e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d676:	d109      	bne.n	800d68c <HAL_TIM_PeriodElapsedCallback+0x784>
				MF.FLAG.FWALL = 0;
 800d678:	4a57      	ldr	r2, [pc, #348]	; (800d7d8 <HAL_TIM_PeriodElapsedCallback+0x8d0>)
 800d67a:	8813      	ldrh	r3, [r2, #0]
 800d67c:	f36f 13c7 	bfc	r3, #7, #1
 800d680:	8013      	strh	r3, [r2, #0]
				MF.FLAG.DRV = 0;
 800d682:	4a55      	ldr	r2, [pc, #340]	; (800d7d8 <HAL_TIM_PeriodElapsedCallback+0x8d0>)
 800d684:	8813      	ldrh	r3, [r2, #0]
 800d686:	f36f 0341 	bfc	r3, #1, #1
 800d68a:	8013      	strh	r3, [r2, #0]
			}

			epsilon_l = target_speed_l - speed_l;
 800d68c:	4b4a      	ldr	r3, [pc, #296]	; (800d7b8 <HAL_TIM_PeriodElapsedCallback+0x8b0>)
 800d68e:	ed93 7a00 	vldr	s14, [r3]
 800d692:	4b4b      	ldr	r3, [pc, #300]	; (800d7c0 <HAL_TIM_PeriodElapsedCallback+0x8b8>)
 800d694:	edd3 7a00 	vldr	s15, [r3]
 800d698:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d69c:	4b49      	ldr	r3, [pc, #292]	; (800d7c4 <HAL_TIM_PeriodElapsedCallback+0x8bc>)
 800d69e:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kpl * epsilon_l;
 800d6a2:	4b48      	ldr	r3, [pc, #288]	; (800d7c4 <HAL_TIM_PeriodElapsedCallback+0x8bc>)
 800d6a4:	edd3 7a00 	vldr	s15, [r3]
 800d6a8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800d6ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d6b0:	4b45      	ldr	r3, [pc, #276]	; (800d7c8 <HAL_TIM_PeriodElapsedCallback+0x8c0>)
 800d6b2:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800d6b6:	4b41      	ldr	r3, [pc, #260]	; (800d7bc <HAL_TIM_PeriodElapsedCallback+0x8b4>)
 800d6b8:	ed93 7a00 	vldr	s14, [r3]
 800d6bc:	4b43      	ldr	r3, [pc, #268]	; (800d7cc <HAL_TIM_PeriodElapsedCallback+0x8c4>)
 800d6be:	edd3 7a00 	vldr	s15, [r3]
 800d6c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d6c6:	4b42      	ldr	r3, [pc, #264]	; (800d7d0 <HAL_TIM_PeriodElapsedCallback+0x8c8>)
 800d6c8:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kpr * epsilon_r;
 800d6cc:	4b40      	ldr	r3, [pc, #256]	; (800d7d0 <HAL_TIM_PeriodElapsedCallback+0x8c8>)
 800d6ce:	edd3 7a00 	vldr	s15, [r3]
 800d6d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d6d6:	4b3f      	ldr	r3, [pc, #252]	; (800d7d4 <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 800d6d8:	edc3 7a00 	vstr	s15, [r3]

			pulse_l = min(max(pulse_l, -100), 100);
 800d6dc:	4b3a      	ldr	r3, [pc, #232]	; (800d7c8 <HAL_TIM_PeriodElapsedCallback+0x8c0>)
 800d6de:	edd3 7a00 	vldr	s15, [r3]
 800d6e2:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800d7ec <HAL_TIM_PeriodElapsedCallback+0x8e4>
 800d6e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d6ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6ee:	bfcc      	ite	gt
 800d6f0:	2301      	movgt	r3, #1
 800d6f2:	2300      	movle	r3, #0
 800d6f4:	b2db      	uxtb	r3, r3
 800d6f6:	f083 0301 	eor.w	r3, r3, #1
 800d6fa:	b2db      	uxtb	r3, r3
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d111      	bne.n	800d724 <HAL_TIM_PeriodElapsedCallback+0x81c>
 800d700:	4b31      	ldr	r3, [pc, #196]	; (800d7c8 <HAL_TIM_PeriodElapsedCallback+0x8c0>)
 800d702:	edd3 7a00 	vldr	s15, [r3]
 800d706:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800d7f0 <HAL_TIM_PeriodElapsedCallback+0x8e8>
 800d70a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d70e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d712:	bfcc      	ite	gt
 800d714:	2301      	movgt	r3, #1
 800d716:	2300      	movle	r3, #0
 800d718:	b2db      	uxtb	r3, r3
 800d71a:	f083 0301 	eor.w	r3, r3, #1
 800d71e:	b2db      	uxtb	r3, r3
 800d720:	2b00      	cmp	r3, #0
 800d722:	d00e      	beq.n	800d742 <HAL_TIM_PeriodElapsedCallback+0x83a>
 800d724:	4b28      	ldr	r3, [pc, #160]	; (800d7c8 <HAL_TIM_PeriodElapsedCallback+0x8c0>)
 800d726:	edd3 7a00 	vldr	s15, [r3]
 800d72a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800d7ec <HAL_TIM_PeriodElapsedCallback+0x8e4>
 800d72e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d736:	dd02      	ble.n	800d73e <HAL_TIM_PeriodElapsedCallback+0x836>
 800d738:	4b23      	ldr	r3, [pc, #140]	; (800d7c8 <HAL_TIM_PeriodElapsedCallback+0x8c0>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	e002      	b.n	800d744 <HAL_TIM_PeriodElapsedCallback+0x83c>
 800d73e:	4b2d      	ldr	r3, [pc, #180]	; (800d7f4 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800d740:	e000      	b.n	800d744 <HAL_TIM_PeriodElapsedCallback+0x83c>
 800d742:	4b2d      	ldr	r3, [pc, #180]	; (800d7f8 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800d744:	4a20      	ldr	r2, [pc, #128]	; (800d7c8 <HAL_TIM_PeriodElapsedCallback+0x8c0>)
 800d746:	6013      	str	r3, [r2, #0]
			pulse_r = min(max(pulse_r, -100), 100);
 800d748:	4b22      	ldr	r3, [pc, #136]	; (800d7d4 <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 800d74a:	edd3 7a00 	vldr	s15, [r3]
 800d74e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800d7ec <HAL_TIM_PeriodElapsedCallback+0x8e4>
 800d752:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d75a:	bfcc      	ite	gt
 800d75c:	2301      	movgt	r3, #1
 800d75e:	2300      	movle	r3, #0
 800d760:	b2db      	uxtb	r3, r3
 800d762:	f083 0301 	eor.w	r3, r3, #1
 800d766:	b2db      	uxtb	r3, r3
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d111      	bne.n	800d790 <HAL_TIM_PeriodElapsedCallback+0x888>
 800d76c:	4b19      	ldr	r3, [pc, #100]	; (800d7d4 <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 800d76e:	edd3 7a00 	vldr	s15, [r3]
 800d772:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800d7f0 <HAL_TIM_PeriodElapsedCallback+0x8e8>
 800d776:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d77a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d77e:	bfcc      	ite	gt
 800d780:	2301      	movgt	r3, #1
 800d782:	2300      	movle	r3, #0
 800d784:	b2db      	uxtb	r3, r3
 800d786:	f083 0301 	eor.w	r3, r3, #1
 800d78a:	b2db      	uxtb	r3, r3
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d035      	beq.n	800d7fc <HAL_TIM_PeriodElapsedCallback+0x8f4>
 800d790:	4b10      	ldr	r3, [pc, #64]	; (800d7d4 <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 800d792:	edd3 7a00 	vldr	s15, [r3]
 800d796:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800d7ec <HAL_TIM_PeriodElapsedCallback+0x8e4>
 800d79a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d79e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7a2:	dd02      	ble.n	800d7aa <HAL_TIM_PeriodElapsedCallback+0x8a2>
 800d7a4:	4b0b      	ldr	r3, [pc, #44]	; (800d7d4 <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	e029      	b.n	800d7fe <HAL_TIM_PeriodElapsedCallback+0x8f6>
 800d7aa:	4b12      	ldr	r3, [pc, #72]	; (800d7f4 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800d7ac:	e027      	b.n	800d7fe <HAL_TIM_PeriodElapsedCallback+0x8f6>
 800d7ae:	bf00      	nop
 800d7b0:	20000d98 	.word	0x20000d98
 800d7b4:	20000ff8 	.word	0x20000ff8
 800d7b8:	20000c7c 	.word	0x20000c7c
 800d7bc:	200001a0 	.word	0x200001a0
 800d7c0:	20000b30 	.word	0x20000b30
 800d7c4:	20000ba0 	.word	0x20000ba0
 800d7c8:	20000c28 	.word	0x20000c28
 800d7cc:	200002bc 	.word	0x200002bc
 800d7d0:	20000c88 	.word	0x20000c88
 800d7d4:	20000780 	.word	0x20000780
 800d7d8:	20000fa8 	.word	0x20000fa8
 800d7dc:	20000d94 	.word	0x20000d94
 800d7e0:	3fe00000 	.word	0x3fe00000
 800d7e4:	20000c80 	.word	0x20000c80
 800d7e8:	451c4000 	.word	0x451c4000
 800d7ec:	c2c80000 	.word	0xc2c80000
 800d7f0:	42c80000 	.word	0x42c80000
 800d7f4:	c2c80000 	.word	0xc2c80000
 800d7f8:	42c80000 	.word	0x42c80000
 800d7fc:	4bba      	ldr	r3, [pc, #744]	; (800dae8 <HAL_TIM_PeriodElapsedCallback+0xbe0>)
 800d7fe:	4abb      	ldr	r2, [pc, #748]	; (800daec <HAL_TIM_PeriodElapsedCallback+0xbe4>)
 800d800:	6013      	str	r3, [r2, #0]
		}


		if(MF.FLAG.GYRO){
 800d802:	4bbb      	ldr	r3, [pc, #748]	; (800daf0 <HAL_TIM_PeriodElapsedCallback+0xbe8>)
 800d804:	881b      	ldrh	r3, [r3, #0]
 800d806:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800d80a:	b2db      	uxtb	r3, r3
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	f000 8105 	beq.w	800da1c <HAL_TIM_PeriodElapsedCallback+0xb14>
			target_omega_z += target_degaccel_z * 0.001;
 800d812:	4bb8      	ldr	r3, [pc, #736]	; (800daf4 <HAL_TIM_PeriodElapsedCallback+0xbec>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	4618      	mov	r0, r3
 800d818:	f7f2 fe8e 	bl	8000538 <__aeabi_f2d>
 800d81c:	a3ae      	add	r3, pc, #696	; (adr r3, 800dad8 <HAL_TIM_PeriodElapsedCallback+0xbd0>)
 800d81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d822:	f7f2 fee1 	bl	80005e8 <__aeabi_dmul>
 800d826:	4603      	mov	r3, r0
 800d828:	460c      	mov	r4, r1
 800d82a:	4625      	mov	r5, r4
 800d82c:	461c      	mov	r4, r3
 800d82e:	4bb2      	ldr	r3, [pc, #712]	; (800daf8 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	4618      	mov	r0, r3
 800d834:	f7f2 fe80 	bl	8000538 <__aeabi_f2d>
 800d838:	4602      	mov	r2, r0
 800d83a:	460b      	mov	r3, r1
 800d83c:	4620      	mov	r0, r4
 800d83e:	4629      	mov	r1, r5
 800d840:	f7f2 fd1c 	bl	800027c <__adddf3>
 800d844:	4603      	mov	r3, r0
 800d846:	460c      	mov	r4, r1
 800d848:	4618      	mov	r0, r3
 800d84a:	4621      	mov	r1, r4
 800d84c:	f7f3 f9a4 	bl	8000b98 <__aeabi_d2f>
 800d850:	4602      	mov	r2, r0
 800d852:	4ba9      	ldr	r3, [pc, #676]	; (800daf8 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 800d854:	601a      	str	r2, [r3, #0]
			target_omega_z = max(min(target_omega_z, omega_max), omega_min);
 800d856:	4ba8      	ldr	r3, [pc, #672]	; (800daf8 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 800d858:	ed93 7a00 	vldr	s14, [r3]
 800d85c:	4ba7      	ldr	r3, [pc, #668]	; (800dafc <HAL_TIM_PeriodElapsedCallback+0xbf4>)
 800d85e:	edd3 7a00 	vldr	s15, [r3]
 800d862:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d86a:	dd03      	ble.n	800d874 <HAL_TIM_PeriodElapsedCallback+0x96c>
 800d86c:	4ba3      	ldr	r3, [pc, #652]	; (800dafc <HAL_TIM_PeriodElapsedCallback+0xbf4>)
 800d86e:	edd3 7a00 	vldr	s15, [r3]
 800d872:	e002      	b.n	800d87a <HAL_TIM_PeriodElapsedCallback+0x972>
 800d874:	4ba0      	ldr	r3, [pc, #640]	; (800daf8 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 800d876:	edd3 7a00 	vldr	s15, [r3]
 800d87a:	4ba1      	ldr	r3, [pc, #644]	; (800db00 <HAL_TIM_PeriodElapsedCallback+0xbf8>)
 800d87c:	ed93 7a00 	vldr	s14, [r3]
 800d880:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d888:	dd10      	ble.n	800d8ac <HAL_TIM_PeriodElapsedCallback+0x9a4>
 800d88a:	4b9b      	ldr	r3, [pc, #620]	; (800daf8 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 800d88c:	ed93 7a00 	vldr	s14, [r3]
 800d890:	4b9a      	ldr	r3, [pc, #616]	; (800dafc <HAL_TIM_PeriodElapsedCallback+0xbf4>)
 800d892:	edd3 7a00 	vldr	s15, [r3]
 800d896:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d89a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d89e:	dd02      	ble.n	800d8a6 <HAL_TIM_PeriodElapsedCallback+0x99e>
 800d8a0:	4b96      	ldr	r3, [pc, #600]	; (800dafc <HAL_TIM_PeriodElapsedCallback+0xbf4>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	e004      	b.n	800d8b0 <HAL_TIM_PeriodElapsedCallback+0x9a8>
 800d8a6:	4b94      	ldr	r3, [pc, #592]	; (800daf8 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	e001      	b.n	800d8b0 <HAL_TIM_PeriodElapsedCallback+0x9a8>
 800d8ac:	4b94      	ldr	r3, [pc, #592]	; (800db00 <HAL_TIM_PeriodElapsedCallback+0xbf8>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	4a91      	ldr	r2, [pc, #580]	; (800daf8 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 800d8b2:	6013      	str	r3, [r2, #0]

			epsilon_omega = target_omega_z - gyro_read_z();
 800d8b4:	4b90      	ldr	r3, [pc, #576]	; (800daf8 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 800d8b6:	ed93 8a00 	vldr	s16, [r3]
 800d8ba:	f7ff fac5 	bl	800ce48 <gyro_read_z>
 800d8be:	eef0 7a40 	vmov.f32	s15, s0
 800d8c2:	ee78 7a67 	vsub.f32	s15, s16, s15
 800d8c6:	4b8f      	ldr	r3, [pc, #572]	; (800db04 <HAL_TIM_PeriodElapsedCallback+0xbfc>)
 800d8c8:	edc3 7a00 	vstr	s15, [r3]

			target_speed_l = speed_G - (target_omega_z + Kp_o*epsilon_omega)/180*M_PI*TREAD/2;
 800d8cc:	4b8e      	ldr	r3, [pc, #568]	; (800db08 <HAL_TIM_PeriodElapsedCallback+0xc00>)
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f7f2 fe31 	bl	8000538 <__aeabi_f2d>
 800d8d6:	4604      	mov	r4, r0
 800d8d8:	460d      	mov	r5, r1
 800d8da:	4b8a      	ldr	r3, [pc, #552]	; (800db04 <HAL_TIM_PeriodElapsedCallback+0xbfc>)
 800d8dc:	edd3 7a00 	vldr	s15, [r3]
 800d8e0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d8e4:	4b84      	ldr	r3, [pc, #528]	; (800daf8 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 800d8e6:	edd3 7a00 	vldr	s15, [r3]
 800d8ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d8ee:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800db0c <HAL_TIM_PeriodElapsedCallback+0xc04>
 800d8f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d8f6:	ee16 0a90 	vmov	r0, s13
 800d8fa:	f7f2 fe1d 	bl	8000538 <__aeabi_f2d>
 800d8fe:	a378      	add	r3, pc, #480	; (adr r3, 800dae0 <HAL_TIM_PeriodElapsedCallback+0xbd8>)
 800d900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d904:	f7f2 fe70 	bl	80005e8 <__aeabi_dmul>
 800d908:	4602      	mov	r2, r0
 800d90a:	460b      	mov	r3, r1
 800d90c:	4610      	mov	r0, r2
 800d90e:	4619      	mov	r1, r3
 800d910:	f04f 0200 	mov.w	r2, #0
 800d914:	4b7e      	ldr	r3, [pc, #504]	; (800db10 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 800d916:	f7f2 fe67 	bl	80005e8 <__aeabi_dmul>
 800d91a:	4602      	mov	r2, r0
 800d91c:	460b      	mov	r3, r1
 800d91e:	4610      	mov	r0, r2
 800d920:	4619      	mov	r1, r3
 800d922:	f04f 0200 	mov.w	r2, #0
 800d926:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d92a:	f7f2 ff87 	bl	800083c <__aeabi_ddiv>
 800d92e:	4602      	mov	r2, r0
 800d930:	460b      	mov	r3, r1
 800d932:	4620      	mov	r0, r4
 800d934:	4629      	mov	r1, r5
 800d936:	f7f2 fc9f 	bl	8000278 <__aeabi_dsub>
 800d93a:	4603      	mov	r3, r0
 800d93c:	460c      	mov	r4, r1
 800d93e:	4618      	mov	r0, r3
 800d940:	4621      	mov	r1, r4
 800d942:	f7f3 f929 	bl	8000b98 <__aeabi_d2f>
 800d946:	4602      	mov	r2, r0
 800d948:	4b72      	ldr	r3, [pc, #456]	; (800db14 <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 800d94a:	601a      	str	r2, [r3, #0]
			target_speed_r = speed_G + (target_omega_z + Kp_o*epsilon_omega)/180*M_PI*TREAD/2;
 800d94c:	4b6e      	ldr	r3, [pc, #440]	; (800db08 <HAL_TIM_PeriodElapsedCallback+0xc00>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	4618      	mov	r0, r3
 800d952:	f7f2 fdf1 	bl	8000538 <__aeabi_f2d>
 800d956:	4604      	mov	r4, r0
 800d958:	460d      	mov	r5, r1
 800d95a:	4b6a      	ldr	r3, [pc, #424]	; (800db04 <HAL_TIM_PeriodElapsedCallback+0xbfc>)
 800d95c:	edd3 7a00 	vldr	s15, [r3]
 800d960:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d964:	4b64      	ldr	r3, [pc, #400]	; (800daf8 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 800d966:	edd3 7a00 	vldr	s15, [r3]
 800d96a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d96e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800db0c <HAL_TIM_PeriodElapsedCallback+0xc04>
 800d972:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d976:	ee16 0a90 	vmov	r0, s13
 800d97a:	f7f2 fddd 	bl	8000538 <__aeabi_f2d>
 800d97e:	a358      	add	r3, pc, #352	; (adr r3, 800dae0 <HAL_TIM_PeriodElapsedCallback+0xbd8>)
 800d980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d984:	f7f2 fe30 	bl	80005e8 <__aeabi_dmul>
 800d988:	4602      	mov	r2, r0
 800d98a:	460b      	mov	r3, r1
 800d98c:	4610      	mov	r0, r2
 800d98e:	4619      	mov	r1, r3
 800d990:	f04f 0200 	mov.w	r2, #0
 800d994:	4b5e      	ldr	r3, [pc, #376]	; (800db10 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 800d996:	f7f2 fe27 	bl	80005e8 <__aeabi_dmul>
 800d99a:	4602      	mov	r2, r0
 800d99c:	460b      	mov	r3, r1
 800d99e:	4610      	mov	r0, r2
 800d9a0:	4619      	mov	r1, r3
 800d9a2:	f04f 0200 	mov.w	r2, #0
 800d9a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d9aa:	f7f2 ff47 	bl	800083c <__aeabi_ddiv>
 800d9ae:	4602      	mov	r2, r0
 800d9b0:	460b      	mov	r3, r1
 800d9b2:	4620      	mov	r0, r4
 800d9b4:	4629      	mov	r1, r5
 800d9b6:	f7f2 fc61 	bl	800027c <__adddf3>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	460c      	mov	r4, r1
 800d9be:	4618      	mov	r0, r3
 800d9c0:	4621      	mov	r1, r4
 800d9c2:	f7f3 f8e9 	bl	8000b98 <__aeabi_d2f>
 800d9c6:	4602      	mov	r2, r0
 800d9c8:	4b53      	ldr	r3, [pc, #332]	; (800db18 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 800d9ca:	601a      	str	r2, [r3, #0]

			epsilon_l = target_speed_l - speed_l;
 800d9cc:	4b51      	ldr	r3, [pc, #324]	; (800db14 <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 800d9ce:	ed93 7a00 	vldr	s14, [r3]
 800d9d2:	4b52      	ldr	r3, [pc, #328]	; (800db1c <HAL_TIM_PeriodElapsedCallback+0xc14>)
 800d9d4:	edd3 7a00 	vldr	s15, [r3]
 800d9d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d9dc:	4b50      	ldr	r3, [pc, #320]	; (800db20 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 800d9de:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kpl * epsilon_l;
 800d9e2:	4b4f      	ldr	r3, [pc, #316]	; (800db20 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 800d9e4:	edd3 7a00 	vldr	s15, [r3]
 800d9e8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800d9ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d9f0:	4b4c      	ldr	r3, [pc, #304]	; (800db24 <HAL_TIM_PeriodElapsedCallback+0xc1c>)
 800d9f2:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800d9f6:	4b48      	ldr	r3, [pc, #288]	; (800db18 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 800d9f8:	ed93 7a00 	vldr	s14, [r3]
 800d9fc:	4b4a      	ldr	r3, [pc, #296]	; (800db28 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 800d9fe:	edd3 7a00 	vldr	s15, [r3]
 800da02:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da06:	4b49      	ldr	r3, [pc, #292]	; (800db2c <HAL_TIM_PeriodElapsedCallback+0xc24>)
 800da08:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kpr * epsilon_r;
 800da0c:	4b47      	ldr	r3, [pc, #284]	; (800db2c <HAL_TIM_PeriodElapsedCallback+0xc24>)
 800da0e:	edd3 7a00 	vldr	s15, [r3]
 800da12:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800da16:	4b35      	ldr	r3, [pc, #212]	; (800daec <HAL_TIM_PeriodElapsedCallback+0xbe4>)
 800da18:	edc3 7a00 	vstr	s15, [r3]
		}


		//ADchange interrupt
		uint16_t delay;
		tp = (tp+1)%3;
 800da1c:	4b44      	ldr	r3, [pc, #272]	; (800db30 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 800da1e:	781b      	ldrb	r3, [r3, #0]
 800da20:	1c5a      	adds	r2, r3, #1
 800da22:	4b44      	ldr	r3, [pc, #272]	; (800db34 <HAL_TIM_PeriodElapsedCallback+0xc2c>)
 800da24:	fb83 3102 	smull	r3, r1, r3, r2
 800da28:	17d3      	asrs	r3, r2, #31
 800da2a:	1ac9      	subs	r1, r1, r3
 800da2c:	460b      	mov	r3, r1
 800da2e:	005b      	lsls	r3, r3, #1
 800da30:	440b      	add	r3, r1
 800da32:	1ad1      	subs	r1, r2, r3
 800da34:	b2ca      	uxtb	r2, r1
 800da36:	4b3e      	ldr	r3, [pc, #248]	; (800db30 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 800da38:	701a      	strb	r2, [r3, #0]

		switch(tp){
 800da3a:	4b3d      	ldr	r3, [pc, #244]	; (800db30 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 800da3c:	781b      	ldrb	r3, [r3, #0]
 800da3e:	2b01      	cmp	r3, #1
 800da40:	d042      	beq.n	800dac8 <HAL_TIM_PeriodElapsedCallback+0xbc0>
 800da42:	2b02      	cmp	r3, #2
 800da44:	f000 80b7 	beq.w	800dbb6 <HAL_TIM_PeriodElapsedCallback+0xcae>
 800da48:	2b00      	cmp	r3, #0
 800da4a:	f040 82aa 	bne.w	800dfa2 <HAL_TIM_PeriodElapsedCallback+0x109a>
		  case 0:
				HAL_GPIO_WritePin(IR_L_GPIO_Port, IR_L_Pin, GPIO_PIN_SET); 	//L
 800da4e:	2201      	movs	r2, #1
 800da50:	2101      	movs	r1, #1
 800da52:	4839      	ldr	r0, [pc, #228]	; (800db38 <HAL_TIM_PeriodElapsedCallback+0xc30>)
 800da54:	f7f4 fc56 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800da58:	2300      	movs	r3, #0
 800da5a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800da5c:	e002      	b.n	800da64 <HAL_TIM_PeriodElapsedCallback+0xb5c>
 800da5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800da60:	3301      	adds	r3, #1
 800da62:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800da64:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800da66:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800da6a:	4293      	cmp	r3, r2
 800da6c:	d9f7      	bls.n	800da5e <HAL_TIM_PeriodElapsedCallback+0xb56>
				ad_l = get_adc_value(&hadc1, ADC_CHANNEL_12);				//L
 800da6e:	210c      	movs	r1, #12
 800da70:	4832      	ldr	r0, [pc, #200]	; (800db3c <HAL_TIM_PeriodElapsedCallback+0xc34>)
 800da72:	f001 faa5 	bl	800efc0 <get_adc_value>
 800da76:	4603      	mov	r3, r0
 800da78:	461a      	mov	r2, r3
 800da7a:	4b31      	ldr	r3, [pc, #196]	; (800db40 <HAL_TIM_PeriodElapsedCallback+0xc38>)
 800da7c:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(IR_L_GPIO_Port, IR_L_Pin, GPIO_PIN_RESET);
 800da7e:	2200      	movs	r2, #0
 800da80:	2101      	movs	r1, #1
 800da82:	482d      	ldr	r0, [pc, #180]	; (800db38 <HAL_TIM_PeriodElapsedCallback+0xc30>)
 800da84:	f7f4 fc3e 	bl	8002304 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(IR_R_GPIO_Port, IR_R_Pin, GPIO_PIN_SET);  //R
 800da88:	2201      	movs	r2, #1
 800da8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800da8e:	482d      	ldr	r0, [pc, #180]	; (800db44 <HAL_TIM_PeriodElapsedCallback+0xc3c>)
 800da90:	f7f4 fc38 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800da94:	2300      	movs	r3, #0
 800da96:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800da98:	e002      	b.n	800daa0 <HAL_TIM_PeriodElapsedCallback+0xb98>
 800da9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800da9c:	3301      	adds	r3, #1
 800da9e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800daa0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800daa2:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800daa6:	4293      	cmp	r3, r2
 800daa8:	d9f7      	bls.n	800da9a <HAL_TIM_PeriodElapsedCallback+0xb92>
				ad_r = get_adc_value(&hadc1, ADC_CHANNEL_11);				//R
 800daaa:	210b      	movs	r1, #11
 800daac:	4823      	ldr	r0, [pc, #140]	; (800db3c <HAL_TIM_PeriodElapsedCallback+0xc34>)
 800daae:	f001 fa87 	bl	800efc0 <get_adc_value>
 800dab2:	4603      	mov	r3, r0
 800dab4:	461a      	mov	r2, r3
 800dab6:	4b24      	ldr	r3, [pc, #144]	; (800db48 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800dab8:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(IR_R_GPIO_Port, IR_R_Pin, GPIO_PIN_RESET);
 800daba:	2200      	movs	r2, #0
 800dabc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800dac0:	4820      	ldr	r0, [pc, #128]	; (800db44 <HAL_TIM_PeriodElapsedCallback+0xc3c>)
 800dac2:	f7f4 fc1f 	bl	8002304 <HAL_GPIO_WritePin>
			break;
 800dac6:	e26c      	b.n	800dfa2 <HAL_TIM_PeriodElapsedCallback+0x109a>

		  case 1:
				HAL_GPIO_WritePin(IR_FL_GPIO_Port, IR_FL_Pin, GPIO_PIN_SET);//FL
 800dac8:	2201      	movs	r2, #1
 800daca:	2102      	movs	r1, #2
 800dacc:	481a      	ldr	r0, [pc, #104]	; (800db38 <HAL_TIM_PeriodElapsedCallback+0xc30>)
 800dace:	f7f4 fc19 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800dad2:	2300      	movs	r3, #0
 800dad4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800dad6:	e03c      	b.n	800db52 <HAL_TIM_PeriodElapsedCallback+0xc4a>
 800dad8:	d2f1a9fc 	.word	0xd2f1a9fc
 800dadc:	3f50624d 	.word	0x3f50624d
 800dae0:	54442d18 	.word	0x54442d18
 800dae4:	400921fb 	.word	0x400921fb
 800dae8:	42c80000 	.word	0x42c80000
 800daec:	20000780 	.word	0x20000780
 800daf0:	20000fa8 	.word	0x20000fa8
 800daf4:	20000b98 	.word	0x20000b98
 800daf8:	200001a8 	.word	0x200001a8
 800dafc:	20000b28 	.word	0x20000b28
 800db00:	200002b8 	.word	0x200002b8
 800db04:	20000458 	.word	0x20000458
 800db08:	20000b34 	.word	0x20000b34
 800db0c:	43340000 	.word	0x43340000
 800db10:	40508000 	.word	0x40508000
 800db14:	20000c7c 	.word	0x20000c7c
 800db18:	200001a0 	.word	0x200001a0
 800db1c:	20000b30 	.word	0x20000b30
 800db20:	20000ba0 	.word	0x20000ba0
 800db24:	20000c28 	.word	0x20000c28
 800db28:	200002bc 	.word	0x200002bc
 800db2c:	20000c88 	.word	0x20000c88
 800db30:	20001324 	.word	0x20001324
 800db34:	55555556 	.word	0x55555556
 800db38:	40021c00 	.word	0x40021c00
 800db3c:	20000b40 	.word	0x20000b40
 800db40:	20000b3c 	.word	0x20000b3c
 800db44:	40020000 	.word	0x40020000
 800db48:	20000fa0 	.word	0x20000fa0
 800db4c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800db4e:	3301      	adds	r3, #1
 800db50:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800db52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800db54:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800db58:	4293      	cmp	r3, r2
 800db5a:	d9f7      	bls.n	800db4c <HAL_TIM_PeriodElapsedCallback+0xc44>
				ad_fl = get_adc_value(&hadc1, ADC_CHANNEL_13);				//FL
 800db5c:	210d      	movs	r1, #13
 800db5e:	48a0      	ldr	r0, [pc, #640]	; (800dde0 <HAL_TIM_PeriodElapsedCallback+0xed8>)
 800db60:	f001 fa2e 	bl	800efc0 <get_adc_value>
 800db64:	4603      	mov	r3, r0
 800db66:	461a      	mov	r2, r3
 800db68:	4b9e      	ldr	r3, [pc, #632]	; (800dde4 <HAL_TIM_PeriodElapsedCallback+0xedc>)
 800db6a:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(IR_FL_GPIO_Port, IR_FL_Pin, GPIO_PIN_RESET);
 800db6c:	2200      	movs	r2, #0
 800db6e:	2102      	movs	r1, #2
 800db70:	489d      	ldr	r0, [pc, #628]	; (800dde8 <HAL_TIM_PeriodElapsedCallback+0xee0>)
 800db72:	f7f4 fbc7 	bl	8002304 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(IR_FR_GPIO_Port, IR_FR_Pin, GPIO_PIN_SET);//FR
 800db76:	2201      	movs	r2, #1
 800db78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800db7c:	489b      	ldr	r0, [pc, #620]	; (800ddec <HAL_TIM_PeriodElapsedCallback+0xee4>)
 800db7e:	f7f4 fbc1 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800db82:	2300      	movs	r3, #0
 800db84:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800db86:	e002      	b.n	800db8e <HAL_TIM_PeriodElapsedCallback+0xc86>
 800db88:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800db8a:	3301      	adds	r3, #1
 800db8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800db8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800db90:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800db94:	4293      	cmp	r3, r2
 800db96:	d9f7      	bls.n	800db88 <HAL_TIM_PeriodElapsedCallback+0xc80>
				ad_fr = get_adc_value(&hadc1, ADC_CHANNEL_10);				//FR
 800db98:	210a      	movs	r1, #10
 800db9a:	4891      	ldr	r0, [pc, #580]	; (800dde0 <HAL_TIM_PeriodElapsedCallback+0xed8>)
 800db9c:	f001 fa10 	bl	800efc0 <get_adc_value>
 800dba0:	4603      	mov	r3, r0
 800dba2:	461a      	mov	r2, r3
 800dba4:	4b92      	ldr	r3, [pc, #584]	; (800ddf0 <HAL_TIM_PeriodElapsedCallback+0xee8>)
 800dba6:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(IR_FR_GPIO_Port, IR_FR_Pin, GPIO_PIN_RESET);
 800dba8:	2200      	movs	r2, #0
 800dbaa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800dbae:	488f      	ldr	r0, [pc, #572]	; (800ddec <HAL_TIM_PeriodElapsedCallback+0xee4>)
 800dbb0:	f7f4 fba8 	bl	8002304 <HAL_GPIO_WritePin>
			break;
 800dbb4:	e1f5      	b.n	800dfa2 <HAL_TIM_PeriodElapsedCallback+0x109a>

		  case 2:
				//
				if(MF.FLAG.WCTRL){
 800dbb6:	4b8f      	ldr	r3, [pc, #572]	; (800ddf4 <HAL_TIM_PeriodElapsedCallback+0xeec>)
 800dbb8:	881b      	ldrh	r3, [r3, #0]
 800dbba:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800dbbe:	b2db      	uxtb	r3, r3
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	f000 819a 	beq.w	800defa <HAL_TIM_PeriodElapsedCallback+0xff2>
					int16_t dwl_tmp = 0, dwr_tmp = 0;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800dbca:	2300      	movs	r3, #0
 800dbcc:	857b      	strh	r3, [r7, #42]	; 0x2a
					if(!MF2.FLAG.V){											//a通常走行時
 800dbce:	4b8a      	ldr	r3, [pc, #552]	; (800ddf8 <HAL_TIM_PeriodElapsedCallback+0xef0>)
 800dbd0:	881b      	ldrh	r3, [r3, #0]
 800dbd2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800dbd6:	b2db      	uxtb	r3, r3
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	f040 8095 	bne.w	800dd08 <HAL_TIM_PeriodElapsedCallback+0xe00>
						dif_l = (int32_t) ad_l - base_l;
 800dbde:	4b87      	ldr	r3, [pc, #540]	; (800ddfc <HAL_TIM_PeriodElapsedCallback+0xef4>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	b29a      	uxth	r2, r3
 800dbe4:	4b86      	ldr	r3, [pc, #536]	; (800de00 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 800dbe6:	881b      	ldrh	r3, [r3, #0]
 800dbe8:	1ad3      	subs	r3, r2, r3
 800dbea:	b29b      	uxth	r3, r3
 800dbec:	b21a      	sxth	r2, r3
 800dbee:	4b85      	ldr	r3, [pc, #532]	; (800de04 <HAL_TIM_PeriodElapsedCallback+0xefc>)
 800dbf0:	801a      	strh	r2, [r3, #0]
						dif_r = (int32_t) ad_r - base_r;
 800dbf2:	4b85      	ldr	r3, [pc, #532]	; (800de08 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	b29a      	uxth	r2, r3
 800dbf8:	4b84      	ldr	r3, [pc, #528]	; (800de0c <HAL_TIM_PeriodElapsedCallback+0xf04>)
 800dbfa:	881b      	ldrh	r3, [r3, #0]
 800dbfc:	1ad3      	subs	r3, r2, r3
 800dbfe:	b29b      	uxth	r3, r3
 800dc00:	b21a      	sxth	r2, r3
 800dc02:	4b83      	ldr	r3, [pc, #524]	; (800de10 <HAL_TIM_PeriodElapsedCallback+0xf08>)
 800dc04:	801a      	strh	r2, [r3, #0]

						if(dif_l > CTRL_BASE_L || dif_r > CTRL_BASE_R){
 800dc06:	4b7f      	ldr	r3, [pc, #508]	; (800de04 <HAL_TIM_PeriodElapsedCallback+0xefc>)
 800dc08:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc0c:	2b23      	cmp	r3, #35	; 0x23
 800dc0e:	dc04      	bgt.n	800dc1a <HAL_TIM_PeriodElapsedCallback+0xd12>
 800dc10:	4b7f      	ldr	r3, [pc, #508]	; (800de10 <HAL_TIM_PeriodElapsedCallback+0xf08>)
 800dc12:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc16:	2b1e      	cmp	r3, #30
 800dc18:	dd70      	ble.n	800dcfc <HAL_TIM_PeriodElapsedCallback+0xdf4>
							if(dif_l > CTRL_BASE_L){
 800dc1a:	4b7a      	ldr	r3, [pc, #488]	; (800de04 <HAL_TIM_PeriodElapsedCallback+0xefc>)
 800dc1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc20:	2b23      	cmp	r3, #35	; 0x23
 800dc22:	dd30      	ble.n	800dc86 <HAL_TIM_PeriodElapsedCallback+0xd7e>
								dwl_tmp += CTRL_CONT_W * dif_l;					//a比例制御値を決定
 800dc24:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800dc28:	ee07 3a90 	vmov	s15, r3
 800dc2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dc30:	4b74      	ldr	r3, [pc, #464]	; (800de04 <HAL_TIM_PeriodElapsedCallback+0xefc>)
 800dc32:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc36:	ee07 3a90 	vmov	s15, r3
 800dc3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc3e:	eef6 6a08 	vmov.f32	s13, #104	; 0x3f400000  0.750
 800dc42:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dc46:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc4e:	ee17 3a90 	vmov	r3, s15
 800dc52:	85bb      	strh	r3, [r7, #44]	; 0x2c
								dwr_tmp += -1 * CTRL_CONT_W * dif_l;			//a比例制御値を決定
 800dc54:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800dc58:	ee07 3a90 	vmov	s15, r3
 800dc5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dc60:	4b68      	ldr	r3, [pc, #416]	; (800de04 <HAL_TIM_PeriodElapsedCallback+0xefc>)
 800dc62:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc66:	ee07 3a90 	vmov	s15, r3
 800dc6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc6e:	eefe 6a08 	vmov.f32	s13, #232	; 0xbf400000 -0.750
 800dc72:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dc76:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc7e:	ee17 3a90 	vmov	r3, s15
 800dc82:	857b      	strh	r3, [r7, #42]	; 0x2a
 800dc84:	e034      	b.n	800dcf0 <HAL_TIM_PeriodElapsedCallback+0xde8>
							}
							else if(dif_r > CTRL_BASE_R){
 800dc86:	4b62      	ldr	r3, [pc, #392]	; (800de10 <HAL_TIM_PeriodElapsedCallback+0xf08>)
 800dc88:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc8c:	2b1e      	cmp	r3, #30
 800dc8e:	dd2f      	ble.n	800dcf0 <HAL_TIM_PeriodElapsedCallback+0xde8>
								dwl_tmp += -1 * CTRL_CONT_W * dif_r;			//a比例制御値を決定
 800dc90:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800dc94:	ee07 3a90 	vmov	s15, r3
 800dc98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dc9c:	4b5c      	ldr	r3, [pc, #368]	; (800de10 <HAL_TIM_PeriodElapsedCallback+0xf08>)
 800dc9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dca2:	ee07 3a90 	vmov	s15, r3
 800dca6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dcaa:	eefe 6a08 	vmov.f32	s13, #232	; 0xbf400000 -0.750
 800dcae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dcb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dcb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dcba:	ee17 3a90 	vmov	r3, s15
 800dcbe:	85bb      	strh	r3, [r7, #44]	; 0x2c
								dwr_tmp += CTRL_CONT_W * dif_r;					//a比例制御値を決定
 800dcc0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800dcc4:	ee07 3a90 	vmov	s15, r3
 800dcc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dccc:	4b50      	ldr	r3, [pc, #320]	; (800de10 <HAL_TIM_PeriodElapsedCallback+0xf08>)
 800dcce:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dcd2:	ee07 3a90 	vmov	s15, r3
 800dcd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dcda:	eef6 6a08 	vmov.f32	s13, #104	; 0x3f400000  0.750
 800dcde:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dce2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dce6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dcea:	ee17 3a90 	vmov	r3, s15
 800dcee:	857b      	strh	r3, [r7, #42]	; 0x2a
							}
							MF2.FLAG.WG = 1;
 800dcf0:	4a41      	ldr	r2, [pc, #260]	; (800ddf8 <HAL_TIM_PeriodElapsedCallback+0xef0>)
 800dcf2:	8813      	ldrh	r3, [r2, #0]
 800dcf4:	f043 0310 	orr.w	r3, r3, #16
 800dcf8:	8013      	strh	r3, [r2, #0]
 800dcfa:	e0db      	b.n	800deb4 <HAL_TIM_PeriodElapsedCallback+0xfac>
						}else{
							MF2.FLAG.WG = 0;
 800dcfc:	4a3e      	ldr	r2, [pc, #248]	; (800ddf8 <HAL_TIM_PeriodElapsedCallback+0xef0>)
 800dcfe:	8813      	ldrh	r3, [r2, #0]
 800dd00:	f36f 1304 	bfc	r3, #4, #1
 800dd04:	8013      	strh	r3, [r2, #0]
 800dd06:	e0d5      	b.n	800deb4 <HAL_TIM_PeriodElapsedCallback+0xfac>
						}
					}else{														//a斜め走行時
						dif_l = (int32_t) ad_fl - BASE_FL;
 800dd08:	4b36      	ldr	r3, [pc, #216]	; (800dde4 <HAL_TIM_PeriodElapsedCallback+0xedc>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	b29b      	uxth	r3, r3
 800dd0e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800dd12:	b29b      	uxth	r3, r3
 800dd14:	b21a      	sxth	r2, r3
 800dd16:	4b3b      	ldr	r3, [pc, #236]	; (800de04 <HAL_TIM_PeriodElapsedCallback+0xefc>)
 800dd18:	801a      	strh	r2, [r3, #0]
						dif_r = (int32_t) ad_fr - BASE_FR;
 800dd1a:	4b35      	ldr	r3, [pc, #212]	; (800ddf0 <HAL_TIM_PeriodElapsedCallback+0xee8>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	b29b      	uxth	r3, r3
 800dd20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800dd24:	b29b      	uxth	r3, r3
 800dd26:	b21a      	sxth	r2, r3
 800dd28:	4b39      	ldr	r3, [pc, #228]	; (800de10 <HAL_TIM_PeriodElapsedCallback+0xf08>)
 800dd2a:	801a      	strh	r2, [r3, #0]

						if(dif_l > CTRL_BASE_FL || dif_r > CTRL_BASE_FR){
 800dd2c:	4b35      	ldr	r3, [pc, #212]	; (800de04 <HAL_TIM_PeriodElapsedCallback+0xefc>)
 800dd2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd32:	2bc8      	cmp	r3, #200	; 0xc8
 800dd34:	dc05      	bgt.n	800dd42 <HAL_TIM_PeriodElapsedCallback+0xe3a>
 800dd36:	4b36      	ldr	r3, [pc, #216]	; (800de10 <HAL_TIM_PeriodElapsedCallback+0xf08>)
 800dd38:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd3c:	2b64      	cmp	r3, #100	; 0x64
 800dd3e:	f340 80b4 	ble.w	800deaa <HAL_TIM_PeriodElapsedCallback+0xfa2>
							if(dif_l > CTRL_BASE_FL){
 800dd42:	4b30      	ldr	r3, [pc, #192]	; (800de04 <HAL_TIM_PeriodElapsedCallback+0xefc>)
 800dd44:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd48:	2bc8      	cmp	r3, #200	; 0xc8
 800dd4a:	dd63      	ble.n	800de14 <HAL_TIM_PeriodElapsedCallback+0xf0c>
								dwl_tmp += CTRL_CONT_W * 0.1 * dif_l;				//a比例制御値を決定
 800dd4c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800dd50:	4618      	mov	r0, r3
 800dd52:	f7f2 fbdf 	bl	8000514 <__aeabi_i2d>
 800dd56:	4604      	mov	r4, r0
 800dd58:	460d      	mov	r5, r1
 800dd5a:	4b2a      	ldr	r3, [pc, #168]	; (800de04 <HAL_TIM_PeriodElapsedCallback+0xefc>)
 800dd5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd60:	4618      	mov	r0, r3
 800dd62:	f7f2 fbd7 	bl	8000514 <__aeabi_i2d>
 800dd66:	a31a      	add	r3, pc, #104	; (adr r3, 800ddd0 <HAL_TIM_PeriodElapsedCallback+0xec8>)
 800dd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd6c:	f7f2 fc3c 	bl	80005e8 <__aeabi_dmul>
 800dd70:	4602      	mov	r2, r0
 800dd72:	460b      	mov	r3, r1
 800dd74:	4620      	mov	r0, r4
 800dd76:	4629      	mov	r1, r5
 800dd78:	f7f2 fa80 	bl	800027c <__adddf3>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	460c      	mov	r4, r1
 800dd80:	4618      	mov	r0, r3
 800dd82:	4621      	mov	r1, r4
 800dd84:	f7f2 fee0 	bl	8000b48 <__aeabi_d2iz>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	85bb      	strh	r3, [r7, #44]	; 0x2c
								dwr_tmp += -1 * CTRL_CONT_W * 0.1 * dif_l;			//a比例制御値を決定
 800dd8c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800dd90:	4618      	mov	r0, r3
 800dd92:	f7f2 fbbf 	bl	8000514 <__aeabi_i2d>
 800dd96:	4604      	mov	r4, r0
 800dd98:	460d      	mov	r5, r1
 800dd9a:	4b1a      	ldr	r3, [pc, #104]	; (800de04 <HAL_TIM_PeriodElapsedCallback+0xefc>)
 800dd9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dda0:	4618      	mov	r0, r3
 800dda2:	f7f2 fbb7 	bl	8000514 <__aeabi_i2d>
 800dda6:	a30c      	add	r3, pc, #48	; (adr r3, 800ddd8 <HAL_TIM_PeriodElapsedCallback+0xed0>)
 800dda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddac:	f7f2 fc1c 	bl	80005e8 <__aeabi_dmul>
 800ddb0:	4602      	mov	r2, r0
 800ddb2:	460b      	mov	r3, r1
 800ddb4:	4620      	mov	r0, r4
 800ddb6:	4629      	mov	r1, r5
 800ddb8:	f7f2 fa60 	bl	800027c <__adddf3>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	460c      	mov	r4, r1
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	4621      	mov	r1, r4
 800ddc4:	f7f2 fec0 	bl	8000b48 <__aeabi_d2iz>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	857b      	strh	r3, [r7, #42]	; 0x2a
 800ddcc:	e067      	b.n	800de9e <HAL_TIM_PeriodElapsedCallback+0xf96>
 800ddce:	bf00      	nop
 800ddd0:	33333334 	.word	0x33333334
 800ddd4:	3fb33333 	.word	0x3fb33333
 800ddd8:	33333334 	.word	0x33333334
 800dddc:	bfb33333 	.word	0xbfb33333
 800dde0:	20000b40 	.word	0x20000b40
 800dde4:	20000d94 	.word	0x20000d94
 800dde8:	40021c00 	.word	0x40021c00
 800ddec:	40020000 	.word	0x40020000
 800ddf0:	20000c80 	.word	0x20000c80
 800ddf4:	20000fa8 	.word	0x20000fa8
 800ddf8:	20000fa4 	.word	0x20000fa4
 800ddfc:	20000b3c 	.word	0x20000b3c
 800de00:	2000034c 	.word	0x2000034c
 800de04:	20000b90 	.word	0x20000b90
 800de08:	20000fa0 	.word	0x20000fa0
 800de0c:	200002c0 	.word	0x200002c0
 800de10:	20000c32 	.word	0x20000c32
							}
							else if(dif_r > CTRL_BASE_FR){
 800de14:	4bb8      	ldr	r3, [pc, #736]	; (800e0f8 <HAL_TIM_PeriodElapsedCallback+0x11f0>)
 800de16:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de1a:	2b64      	cmp	r3, #100	; 0x64
 800de1c:	dd3f      	ble.n	800de9e <HAL_TIM_PeriodElapsedCallback+0xf96>
								dwl_tmp += -1 * CTRL_CONT_W * 0.2 * dif_r;			//a比例制御値を決定
 800de1e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800de22:	4618      	mov	r0, r3
 800de24:	f7f2 fb76 	bl	8000514 <__aeabi_i2d>
 800de28:	4604      	mov	r4, r0
 800de2a:	460d      	mov	r5, r1
 800de2c:	4bb2      	ldr	r3, [pc, #712]	; (800e0f8 <HAL_TIM_PeriodElapsedCallback+0x11f0>)
 800de2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de32:	4618      	mov	r0, r3
 800de34:	f7f2 fb6e 	bl	8000514 <__aeabi_i2d>
 800de38:	a3ab      	add	r3, pc, #684	; (adr r3, 800e0e8 <HAL_TIM_PeriodElapsedCallback+0x11e0>)
 800de3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de3e:	f7f2 fbd3 	bl	80005e8 <__aeabi_dmul>
 800de42:	4602      	mov	r2, r0
 800de44:	460b      	mov	r3, r1
 800de46:	4620      	mov	r0, r4
 800de48:	4629      	mov	r1, r5
 800de4a:	f7f2 fa17 	bl	800027c <__adddf3>
 800de4e:	4603      	mov	r3, r0
 800de50:	460c      	mov	r4, r1
 800de52:	4618      	mov	r0, r3
 800de54:	4621      	mov	r1, r4
 800de56:	f7f2 fe77 	bl	8000b48 <__aeabi_d2iz>
 800de5a:	4603      	mov	r3, r0
 800de5c:	85bb      	strh	r3, [r7, #44]	; 0x2c
								dwr_tmp += CTRL_CONT_W * 0.2 * dif_r;				//a比例制御値を決定
 800de5e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800de62:	4618      	mov	r0, r3
 800de64:	f7f2 fb56 	bl	8000514 <__aeabi_i2d>
 800de68:	4604      	mov	r4, r0
 800de6a:	460d      	mov	r5, r1
 800de6c:	4ba2      	ldr	r3, [pc, #648]	; (800e0f8 <HAL_TIM_PeriodElapsedCallback+0x11f0>)
 800de6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de72:	4618      	mov	r0, r3
 800de74:	f7f2 fb4e 	bl	8000514 <__aeabi_i2d>
 800de78:	a39d      	add	r3, pc, #628	; (adr r3, 800e0f0 <HAL_TIM_PeriodElapsedCallback+0x11e8>)
 800de7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de7e:	f7f2 fbb3 	bl	80005e8 <__aeabi_dmul>
 800de82:	4602      	mov	r2, r0
 800de84:	460b      	mov	r3, r1
 800de86:	4620      	mov	r0, r4
 800de88:	4629      	mov	r1, r5
 800de8a:	f7f2 f9f7 	bl	800027c <__adddf3>
 800de8e:	4603      	mov	r3, r0
 800de90:	460c      	mov	r4, r1
 800de92:	4618      	mov	r0, r3
 800de94:	4621      	mov	r1, r4
 800de96:	f7f2 fe57 	bl	8000b48 <__aeabi_d2iz>
 800de9a:	4603      	mov	r3, r0
 800de9c:	857b      	strh	r3, [r7, #42]	; 0x2a
							}
							MF2.FLAG.WG = 1;
 800de9e:	4a97      	ldr	r2, [pc, #604]	; (800e0fc <HAL_TIM_PeriodElapsedCallback+0x11f4>)
 800dea0:	8813      	ldrh	r3, [r2, #0]
 800dea2:	f043 0310 	orr.w	r3, r3, #16
 800dea6:	8013      	strh	r3, [r2, #0]
 800dea8:	e004      	b.n	800deb4 <HAL_TIM_PeriodElapsedCallback+0xfac>
						}else{
							MF2.FLAG.WG = 0;
 800deaa:	4a94      	ldr	r2, [pc, #592]	; (800e0fc <HAL_TIM_PeriodElapsedCallback+0x11f4>)
 800deac:	8813      	ldrh	r3, [r2, #0]
 800deae:	f36f 1304 	bfc	r3, #4, #1
 800deb2:	8013      	strh	r3, [r2, #0]
						}
					}
					dwl = max(min(CTRL_MAX_W, dwl_tmp), -1 * CTRL_MAX_W);
 800deb4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800deb8:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800debc:	dd08      	ble.n	800ded0 <HAL_TIM_PeriodElapsedCallback+0xfc8>
 800debe:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800dec2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dec6:	bfa8      	it	ge
 800dec8:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800decc:	b21b      	sxth	r3, r3
 800dece:	e000      	b.n	800ded2 <HAL_TIM_PeriodElapsedCallback+0xfca>
 800ded0:	4b8b      	ldr	r3, [pc, #556]	; (800e100 <HAL_TIM_PeriodElapsedCallback+0x11f8>)
 800ded2:	4a8c      	ldr	r2, [pc, #560]	; (800e104 <HAL_TIM_PeriodElapsedCallback+0x11fc>)
 800ded4:	8013      	strh	r3, [r2, #0]
					dwr = max(min(CTRL_MAX_W, dwr_tmp), -1 * CTRL_MAX_W);
 800ded6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800deda:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800dede:	dd08      	ble.n	800def2 <HAL_TIM_PeriodElapsedCallback+0xfea>
 800dee0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800dee4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dee8:	bfa8      	it	ge
 800deea:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800deee:	b21b      	sxth	r3, r3
 800def0:	e000      	b.n	800def4 <HAL_TIM_PeriodElapsedCallback+0xfec>
 800def2:	4b83      	ldr	r3, [pc, #524]	; (800e100 <HAL_TIM_PeriodElapsedCallback+0x11f8>)
 800def4:	4a84      	ldr	r2, [pc, #528]	; (800e108 <HAL_TIM_PeriodElapsedCallback+0x1200>)
 800def6:	8013      	strh	r3, [r2, #0]
 800def8:	e006      	b.n	800df08 <HAL_TIM_PeriodElapsedCallback+0x1000>
				}else{
					//a制御フラグがなければ壁制御値0
					dwl = dwr = 0;
 800defa:	2100      	movs	r1, #0
 800defc:	4b82      	ldr	r3, [pc, #520]	; (800e108 <HAL_TIM_PeriodElapsedCallback+0x1200>)
 800defe:	460a      	mov	r2, r1
 800df00:	801a      	strh	r2, [r3, #0]
 800df02:	4b80      	ldr	r3, [pc, #512]	; (800e104 <HAL_TIM_PeriodElapsedCallback+0x11fc>)
 800df04:	460a      	mov	r2, r1
 800df06:	801a      	strh	r2, [r3, #0]
				}

				if(MF.FLAG.GCTRL){
 800df08:	4b80      	ldr	r3, [pc, #512]	; (800e10c <HAL_TIM_PeriodElapsedCallback+0x1204>)
 800df0a:	881b      	ldrh	r3, [r3, #0]
 800df0c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800df10:	b2db      	uxtb	r3, r3
 800df12:	2b00      	cmp	r3, #0
 800df14:	d03d      	beq.n	800df92 <HAL_TIM_PeriodElapsedCallback+0x108a>
				}

					dg = CTRL_CONT_G * gyro_read_z();			//a角速度制御
					dg = CTRL_CONT_G * degree_z;				//a角度制御
*/
					dg = CTRL_CONT_G * (target_degree_z - degree_z);		//a角度制御(目標角度はスタートを0度とし、旋回量と対応付け)
 800df16:	4b7e      	ldr	r3, [pc, #504]	; (800e110 <HAL_TIM_PeriodElapsedCallback+0x1208>)
 800df18:	ed93 7a00 	vldr	s14, [r3]
 800df1c:	4b7d      	ldr	r3, [pc, #500]	; (800e114 <HAL_TIM_PeriodElapsedCallback+0x120c>)
 800df1e:	edd3 7a00 	vldr	s15, [r3]
 800df22:	ee77 7a67 	vsub.f32	s15, s14, s15
 800df26:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800e118 <HAL_TIM_PeriodElapsedCallback+0x1210>
 800df2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800df2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800df32:	ee17 3a90 	vmov	r3, s15
 800df36:	b21a      	sxth	r2, r3
 800df38:	4b78      	ldr	r3, [pc, #480]	; (800e11c <HAL_TIM_PeriodElapsedCallback+0x1214>)
 800df3a:	801a      	strh	r2, [r3, #0]

					dg = max(min(CTRL_MAX_G, dg), -1 * CTRL_MAX_G);
 800df3c:	4b77      	ldr	r3, [pc, #476]	; (800e11c <HAL_TIM_PeriodElapsedCallback+0x1214>)
 800df3e:	881b      	ldrh	r3, [r3, #0]
 800df40:	b21b      	sxth	r3, r3
 800df42:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800df46:	da05      	bge.n	800df54 <HAL_TIM_PeriodElapsedCallback+0x104c>
 800df48:	4b74      	ldr	r3, [pc, #464]	; (800e11c <HAL_TIM_PeriodElapsedCallback+0x1214>)
 800df4a:	881b      	ldrh	r3, [r3, #0]
 800df4c:	b21b      	sxth	r3, r3
 800df4e:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 800df52:	dd0c      	ble.n	800df6e <HAL_TIM_PeriodElapsedCallback+0x1066>
 800df54:	4b71      	ldr	r3, [pc, #452]	; (800e11c <HAL_TIM_PeriodElapsedCallback+0x1214>)
 800df56:	881b      	ldrh	r3, [r3, #0]
 800df58:	b21b      	sxth	r3, r3
 800df5a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800df5e:	da03      	bge.n	800df68 <HAL_TIM_PeriodElapsedCallback+0x1060>
 800df60:	4b6e      	ldr	r3, [pc, #440]	; (800e11c <HAL_TIM_PeriodElapsedCallback+0x1214>)
 800df62:	881b      	ldrh	r3, [r3, #0]
 800df64:	b21b      	sxth	r3, r3
 800df66:	e003      	b.n	800df70 <HAL_TIM_PeriodElapsedCallback+0x1068>
 800df68:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800df6c:	e000      	b.n	800df70 <HAL_TIM_PeriodElapsedCallback+0x1068>
 800df6e:	4b6c      	ldr	r3, [pc, #432]	; (800e120 <HAL_TIM_PeriodElapsedCallback+0x1218>)
 800df70:	4a6a      	ldr	r2, [pc, #424]	; (800e11c <HAL_TIM_PeriodElapsedCallback+0x1214>)
 800df72:	8013      	strh	r3, [r2, #0]
					dgl = -1*dg;
 800df74:	4b69      	ldr	r3, [pc, #420]	; (800e11c <HAL_TIM_PeriodElapsedCallback+0x1214>)
 800df76:	881b      	ldrh	r3, [r3, #0]
 800df78:	b21b      	sxth	r3, r3
 800df7a:	b29b      	uxth	r3, r3
 800df7c:	425b      	negs	r3, r3
 800df7e:	b29b      	uxth	r3, r3
 800df80:	b21a      	sxth	r2, r3
 800df82:	4b68      	ldr	r3, [pc, #416]	; (800e124 <HAL_TIM_PeriodElapsedCallback+0x121c>)
 800df84:	801a      	strh	r2, [r3, #0]
					dgr = dg;
 800df86:	4b65      	ldr	r3, [pc, #404]	; (800e11c <HAL_TIM_PeriodElapsedCallback+0x1214>)
 800df88:	881b      	ldrh	r3, [r3, #0]
 800df8a:	b21a      	sxth	r2, r3
 800df8c:	4b66      	ldr	r3, [pc, #408]	; (800e128 <HAL_TIM_PeriodElapsedCallback+0x1220>)
 800df8e:	801a      	strh	r2, [r3, #0]
				}else{
					//a制御フラグがなければジャイロ制御値0
					dgl = dgr = 0;
				}
				break;
 800df90:	e006      	b.n	800dfa0 <HAL_TIM_PeriodElapsedCallback+0x1098>
					dgl = dgr = 0;
 800df92:	2100      	movs	r1, #0
 800df94:	4b64      	ldr	r3, [pc, #400]	; (800e128 <HAL_TIM_PeriodElapsedCallback+0x1220>)
 800df96:	460a      	mov	r2, r1
 800df98:	801a      	strh	r2, [r3, #0]
 800df9a:	4b62      	ldr	r3, [pc, #392]	; (800e124 <HAL_TIM_PeriodElapsedCallback+0x121c>)
 800df9c:	460a      	mov	r2, r1
 800df9e:	801a      	strh	r2, [r3, #0]
				break;
 800dfa0:	bf00      	nop
		}


		if(MF.FLAG.DRV){
 800dfa2:	4b5a      	ldr	r3, [pc, #360]	; (800e10c <HAL_TIM_PeriodElapsedCallback+0x1204>)
 800dfa4:	881b      	ldrh	r3, [r3, #0]
 800dfa6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800dfaa:	b2db      	uxtb	r3, r3
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	f000 8183 	beq.w	800e2b8 <HAL_TIM_PeriodElapsedCallback+0x13b0>
			if(!MF2.FLAG.WG){
 800dfb2:	4b52      	ldr	r3, [pc, #328]	; (800e0fc <HAL_TIM_PeriodElapsedCallback+0x11f4>)
 800dfb4:	881b      	ldrh	r3, [r3, #0]
 800dfb6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800dfba:	b2db      	uxtb	r3, r3
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d130      	bne.n	800e022 <HAL_TIM_PeriodElapsedCallback+0x111a>
				pulse_l = pulse_l + dgl + dwl;
 800dfc0:	4b58      	ldr	r3, [pc, #352]	; (800e124 <HAL_TIM_PeriodElapsedCallback+0x121c>)
 800dfc2:	881b      	ldrh	r3, [r3, #0]
 800dfc4:	b21b      	sxth	r3, r3
 800dfc6:	ee07 3a90 	vmov	s15, r3
 800dfca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dfce:	4b57      	ldr	r3, [pc, #348]	; (800e12c <HAL_TIM_PeriodElapsedCallback+0x1224>)
 800dfd0:	edd3 7a00 	vldr	s15, [r3]
 800dfd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dfd8:	4b4a      	ldr	r3, [pc, #296]	; (800e104 <HAL_TIM_PeriodElapsedCallback+0x11fc>)
 800dfda:	881b      	ldrh	r3, [r3, #0]
 800dfdc:	b21b      	sxth	r3, r3
 800dfde:	ee07 3a90 	vmov	s15, r3
 800dfe2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dfe6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dfea:	4b50      	ldr	r3, [pc, #320]	; (800e12c <HAL_TIM_PeriodElapsedCallback+0x1224>)
 800dfec:	edc3 7a00 	vstr	s15, [r3]
				pulse_r = pulse_r + dgr + dwr;
 800dff0:	4b4d      	ldr	r3, [pc, #308]	; (800e128 <HAL_TIM_PeriodElapsedCallback+0x1220>)
 800dff2:	881b      	ldrh	r3, [r3, #0]
 800dff4:	b21b      	sxth	r3, r3
 800dff6:	ee07 3a90 	vmov	s15, r3
 800dffa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dffe:	4b4c      	ldr	r3, [pc, #304]	; (800e130 <HAL_TIM_PeriodElapsedCallback+0x1228>)
 800e000:	edd3 7a00 	vldr	s15, [r3]
 800e004:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e008:	4b3f      	ldr	r3, [pc, #252]	; (800e108 <HAL_TIM_PeriodElapsedCallback+0x1200>)
 800e00a:	881b      	ldrh	r3, [r3, #0]
 800e00c:	b21b      	sxth	r3, r3
 800e00e:	ee07 3a90 	vmov	s15, r3
 800e012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e016:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e01a:	4b45      	ldr	r3, [pc, #276]	; (800e130 <HAL_TIM_PeriodElapsedCallback+0x1228>)
 800e01c:	edc3 7a00 	vstr	s15, [r3]
 800e020:	e02f      	b.n	800e082 <HAL_TIM_PeriodElapsedCallback+0x117a>
//				pulse_l = pulse_l + dgl;
//				pulse_r = pulse_r + dgr;
			}else{
				pulse_l = pulse_l + dgl + dwl;
 800e022:	4b40      	ldr	r3, [pc, #256]	; (800e124 <HAL_TIM_PeriodElapsedCallback+0x121c>)
 800e024:	881b      	ldrh	r3, [r3, #0]
 800e026:	b21b      	sxth	r3, r3
 800e028:	ee07 3a90 	vmov	s15, r3
 800e02c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e030:	4b3e      	ldr	r3, [pc, #248]	; (800e12c <HAL_TIM_PeriodElapsedCallback+0x1224>)
 800e032:	edd3 7a00 	vldr	s15, [r3]
 800e036:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e03a:	4b32      	ldr	r3, [pc, #200]	; (800e104 <HAL_TIM_PeriodElapsedCallback+0x11fc>)
 800e03c:	881b      	ldrh	r3, [r3, #0]
 800e03e:	b21b      	sxth	r3, r3
 800e040:	ee07 3a90 	vmov	s15, r3
 800e044:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e048:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e04c:	4b37      	ldr	r3, [pc, #220]	; (800e12c <HAL_TIM_PeriodElapsedCallback+0x1224>)
 800e04e:	edc3 7a00 	vstr	s15, [r3]
				pulse_r = pulse_r + dgr + dwr;
 800e052:	4b35      	ldr	r3, [pc, #212]	; (800e128 <HAL_TIM_PeriodElapsedCallback+0x1220>)
 800e054:	881b      	ldrh	r3, [r3, #0]
 800e056:	b21b      	sxth	r3, r3
 800e058:	ee07 3a90 	vmov	s15, r3
 800e05c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e060:	4b33      	ldr	r3, [pc, #204]	; (800e130 <HAL_TIM_PeriodElapsedCallback+0x1228>)
 800e062:	edd3 7a00 	vldr	s15, [r3]
 800e066:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e06a:	4b27      	ldr	r3, [pc, #156]	; (800e108 <HAL_TIM_PeriodElapsedCallback+0x1200>)
 800e06c:	881b      	ldrh	r3, [r3, #0]
 800e06e:	b21b      	sxth	r3, r3
 800e070:	ee07 3a90 	vmov	s15, r3
 800e074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e078:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e07c:	4b2c      	ldr	r3, [pc, #176]	; (800e130 <HAL_TIM_PeriodElapsedCallback+0x1228>)
 800e07e:	edc3 7a00 	vstr	s15, [r3]
//				pulse_l = pulse_l + dwl;
//				pulse_r = pulse_r + dwr;
			}
			pulse_l = min(max(pulse_l, -1000), 1000);
 800e082:	4b2a      	ldr	r3, [pc, #168]	; (800e12c <HAL_TIM_PeriodElapsedCallback+0x1224>)
 800e084:	edd3 7a00 	vldr	s15, [r3]
 800e088:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800e134 <HAL_TIM_PeriodElapsedCallback+0x122c>
 800e08c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e094:	bfcc      	ite	gt
 800e096:	2301      	movgt	r3, #1
 800e098:	2300      	movle	r3, #0
 800e09a:	b2db      	uxtb	r3, r3
 800e09c:	f083 0301 	eor.w	r3, r3, #1
 800e0a0:	b2db      	uxtb	r3, r3
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d111      	bne.n	800e0ca <HAL_TIM_PeriodElapsedCallback+0x11c2>
 800e0a6:	4b21      	ldr	r3, [pc, #132]	; (800e12c <HAL_TIM_PeriodElapsedCallback+0x1224>)
 800e0a8:	edd3 7a00 	vldr	s15, [r3]
 800e0ac:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800e138 <HAL_TIM_PeriodElapsedCallback+0x1230>
 800e0b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e0b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0b8:	bfcc      	ite	gt
 800e0ba:	2301      	movgt	r3, #1
 800e0bc:	2300      	movle	r3, #0
 800e0be:	b2db      	uxtb	r3, r3
 800e0c0:	f083 0301 	eor.w	r3, r3, #1
 800e0c4:	b2db      	uxtb	r3, r3
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d03a      	beq.n	800e140 <HAL_TIM_PeriodElapsedCallback+0x1238>
 800e0ca:	4b18      	ldr	r3, [pc, #96]	; (800e12c <HAL_TIM_PeriodElapsedCallback+0x1224>)
 800e0cc:	edd3 7a00 	vldr	s15, [r3]
 800e0d0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800e134 <HAL_TIM_PeriodElapsedCallback+0x122c>
 800e0d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e0d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0dc:	dd2e      	ble.n	800e13c <HAL_TIM_PeriodElapsedCallback+0x1234>
 800e0de:	4b13      	ldr	r3, [pc, #76]	; (800e12c <HAL_TIM_PeriodElapsedCallback+0x1224>)
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	e02e      	b.n	800e142 <HAL_TIM_PeriodElapsedCallback+0x123a>
 800e0e4:	f3af 8000 	nop.w
 800e0e8:	33333334 	.word	0x33333334
 800e0ec:	bfc33333 	.word	0xbfc33333
 800e0f0:	33333334 	.word	0x33333334
 800e0f4:	3fc33333 	.word	0x3fc33333
 800e0f8:	20000c32 	.word	0x20000c32
 800e0fc:	20000fa4 	.word	0x20000fa4
 800e100:	fffffc18 	.word	0xfffffc18
 800e104:	20000b38 	.word	0x20000b38
 800e108:	20000ff4 	.word	0x20000ff4
 800e10c:	20000fa8 	.word	0x20000fa8
 800e110:	20000c78 	.word	0x20000c78
 800e114:	20000b9c 	.word	0x20000b9c
 800e118:	42c80000 	.word	0x42c80000
 800e11c:	20000c90 	.word	0x20000c90
 800e120:	fffffe0c 	.word	0xfffffe0c
 800e124:	2000019c 	.word	0x2000019c
 800e128:	20000b8e 	.word	0x20000b8e
 800e12c:	20000c28 	.word	0x20000c28
 800e130:	20000780 	.word	0x20000780
 800e134:	c47a0000 	.word	0xc47a0000
 800e138:	447a0000 	.word	0x447a0000
 800e13c:	4baf      	ldr	r3, [pc, #700]	; (800e3fc <HAL_TIM_PeriodElapsedCallback+0x14f4>)
 800e13e:	e000      	b.n	800e142 <HAL_TIM_PeriodElapsedCallback+0x123a>
 800e140:	4baf      	ldr	r3, [pc, #700]	; (800e400 <HAL_TIM_PeriodElapsedCallback+0x14f8>)
 800e142:	4ab0      	ldr	r2, [pc, #704]	; (800e404 <HAL_TIM_PeriodElapsedCallback+0x14fc>)
 800e144:	6013      	str	r3, [r2, #0]
			pulse_r = min(max(pulse_r, -1000), 1000);
 800e146:	4bb0      	ldr	r3, [pc, #704]	; (800e408 <HAL_TIM_PeriodElapsedCallback+0x1500>)
 800e148:	edd3 7a00 	vldr	s15, [r3]
 800e14c:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800e40c <HAL_TIM_PeriodElapsedCallback+0x1504>
 800e150:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e158:	bfcc      	ite	gt
 800e15a:	2301      	movgt	r3, #1
 800e15c:	2300      	movle	r3, #0
 800e15e:	b2db      	uxtb	r3, r3
 800e160:	f083 0301 	eor.w	r3, r3, #1
 800e164:	b2db      	uxtb	r3, r3
 800e166:	2b00      	cmp	r3, #0
 800e168:	d111      	bne.n	800e18e <HAL_TIM_PeriodElapsedCallback+0x1286>
 800e16a:	4ba7      	ldr	r3, [pc, #668]	; (800e408 <HAL_TIM_PeriodElapsedCallback+0x1500>)
 800e16c:	edd3 7a00 	vldr	s15, [r3]
 800e170:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 800e410 <HAL_TIM_PeriodElapsedCallback+0x1508>
 800e174:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e17c:	bfcc      	ite	gt
 800e17e:	2301      	movgt	r3, #1
 800e180:	2300      	movle	r3, #0
 800e182:	b2db      	uxtb	r3, r3
 800e184:	f083 0301 	eor.w	r3, r3, #1
 800e188:	b2db      	uxtb	r3, r3
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d00e      	beq.n	800e1ac <HAL_TIM_PeriodElapsedCallback+0x12a4>
 800e18e:	4b9e      	ldr	r3, [pc, #632]	; (800e408 <HAL_TIM_PeriodElapsedCallback+0x1500>)
 800e190:	edd3 7a00 	vldr	s15, [r3]
 800e194:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 800e40c <HAL_TIM_PeriodElapsedCallback+0x1504>
 800e198:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e19c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1a0:	dd02      	ble.n	800e1a8 <HAL_TIM_PeriodElapsedCallback+0x12a0>
 800e1a2:	4b99      	ldr	r3, [pc, #612]	; (800e408 <HAL_TIM_PeriodElapsedCallback+0x1500>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	e002      	b.n	800e1ae <HAL_TIM_PeriodElapsedCallback+0x12a6>
 800e1a8:	4b94      	ldr	r3, [pc, #592]	; (800e3fc <HAL_TIM_PeriodElapsedCallback+0x14f4>)
 800e1aa:	e000      	b.n	800e1ae <HAL_TIM_PeriodElapsedCallback+0x12a6>
 800e1ac:	4b94      	ldr	r3, [pc, #592]	; (800e400 <HAL_TIM_PeriodElapsedCallback+0x14f8>)
 800e1ae:	4a96      	ldr	r2, [pc, #600]	; (800e408 <HAL_TIM_PeriodElapsedCallback+0x1500>)
 800e1b0:	6013      	str	r3, [r2, #0]

			if(pulse_l >= 0){
 800e1b2:	4b94      	ldr	r3, [pc, #592]	; (800e404 <HAL_TIM_PeriodElapsedCallback+0x14fc>)
 800e1b4:	edd3 7a00 	vldr	s15, [r3]
 800e1b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e1bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1c0:	db17      	blt.n	800e1f2 <HAL_TIM_PeriodElapsedCallback+0x12ea>
				drive_dir(0, 0);
 800e1c2:	2100      	movs	r1, #0
 800e1c4:	2000      	movs	r0, #0
 800e1c6:	f7f6 fe5b 	bl	8004e80 <drive_dir>
				ConfigOC.Pulse = pulse_l;
 800e1ca:	4b8e      	ldr	r3, [pc, #568]	; (800e404 <HAL_TIM_PeriodElapsedCallback+0x14fc>)
 800e1cc:	edd3 7a00 	vldr	s15, [r3]
 800e1d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e1d4:	ee17 3a90 	vmov	r3, s15
 800e1d8:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim3, &ConfigOC, TIM_CHANNEL_3);
 800e1da:	f107 030c 	add.w	r3, r7, #12
 800e1de:	2208      	movs	r2, #8
 800e1e0:	4619      	mov	r1, r3
 800e1e2:	488c      	ldr	r0, [pc, #560]	; (800e414 <HAL_TIM_PeriodElapsedCallback+0x150c>)
 800e1e4:	f7f5 fce8 	bl	8003bb8 <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 800e1e8:	2108      	movs	r1, #8
 800e1ea:	488a      	ldr	r0, [pc, #552]	; (800e414 <HAL_TIM_PeriodElapsedCallback+0x150c>)
 800e1ec:	f7f5 fa7c 	bl	80036e8 <HAL_TIM_PWM_Start>
 800e1f0:	e020      	b.n	800e234 <HAL_TIM_PeriodElapsedCallback+0x132c>
			}
			else if(pulse_l < 0){
 800e1f2:	4b84      	ldr	r3, [pc, #528]	; (800e404 <HAL_TIM_PeriodElapsedCallback+0x14fc>)
 800e1f4:	edd3 7a00 	vldr	s15, [r3]
 800e1f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e1fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e200:	d518      	bpl.n	800e234 <HAL_TIM_PeriodElapsedCallback+0x132c>
				drive_dir(0, 1);
 800e202:	2101      	movs	r1, #1
 800e204:	2000      	movs	r0, #0
 800e206:	f7f6 fe3b 	bl	8004e80 <drive_dir>
				ConfigOC.Pulse = -pulse_l;
 800e20a:	4b7e      	ldr	r3, [pc, #504]	; (800e404 <HAL_TIM_PeriodElapsedCallback+0x14fc>)
 800e20c:	edd3 7a00 	vldr	s15, [r3]
 800e210:	eef1 7a67 	vneg.f32	s15, s15
 800e214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e218:	ee17 3a90 	vmov	r3, s15
 800e21c:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim3, &ConfigOC, TIM_CHANNEL_3);
 800e21e:	f107 030c 	add.w	r3, r7, #12
 800e222:	2208      	movs	r2, #8
 800e224:	4619      	mov	r1, r3
 800e226:	487b      	ldr	r0, [pc, #492]	; (800e414 <HAL_TIM_PeriodElapsedCallback+0x150c>)
 800e228:	f7f5 fcc6 	bl	8003bb8 <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 800e22c:	2108      	movs	r1, #8
 800e22e:	4879      	ldr	r0, [pc, #484]	; (800e414 <HAL_TIM_PeriodElapsedCallback+0x150c>)
 800e230:	f7f5 fa5a 	bl	80036e8 <HAL_TIM_PWM_Start>
			}

			if(pulse_r >= 0){
 800e234:	4b74      	ldr	r3, [pc, #464]	; (800e408 <HAL_TIM_PeriodElapsedCallback+0x1500>)
 800e236:	edd3 7a00 	vldr	s15, [r3]
 800e23a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e23e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e242:	db17      	blt.n	800e274 <HAL_TIM_PeriodElapsedCallback+0x136c>
				drive_dir(1, 0);
 800e244:	2100      	movs	r1, #0
 800e246:	2001      	movs	r0, #1
 800e248:	f7f6 fe1a 	bl	8004e80 <drive_dir>
				ConfigOC.Pulse = pulse_r;
 800e24c:	4b6e      	ldr	r3, [pc, #440]	; (800e408 <HAL_TIM_PeriodElapsedCallback+0x1500>)
 800e24e:	edd3 7a00 	vldr	s15, [r3]
 800e252:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e256:	ee17 3a90 	vmov	r3, s15
 800e25a:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim12, &ConfigOC, TIM_CHANNEL_2);
 800e25c:	f107 030c 	add.w	r3, r7, #12
 800e260:	2204      	movs	r2, #4
 800e262:	4619      	mov	r1, r3
 800e264:	486c      	ldr	r0, [pc, #432]	; (800e418 <HAL_TIM_PeriodElapsedCallback+0x1510>)
 800e266:	f7f5 fca7 	bl	8003bb8 <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_2);
 800e26a:	2104      	movs	r1, #4
 800e26c:	486a      	ldr	r0, [pc, #424]	; (800e418 <HAL_TIM_PeriodElapsedCallback+0x1510>)
 800e26e:	f7f5 fa3b 	bl	80036e8 <HAL_TIM_PWM_Start>
 800e272:	e029      	b.n	800e2c8 <HAL_TIM_PeriodElapsedCallback+0x13c0>
			}
			else if(pulse_r < 0){
 800e274:	4b64      	ldr	r3, [pc, #400]	; (800e408 <HAL_TIM_PeriodElapsedCallback+0x1500>)
 800e276:	edd3 7a00 	vldr	s15, [r3]
 800e27a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e27e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e282:	d521      	bpl.n	800e2c8 <HAL_TIM_PeriodElapsedCallback+0x13c0>
				drive_dir(1, 1);
 800e284:	2101      	movs	r1, #1
 800e286:	2001      	movs	r0, #1
 800e288:	f7f6 fdfa 	bl	8004e80 <drive_dir>
				ConfigOC.Pulse = -pulse_r;
 800e28c:	4b5e      	ldr	r3, [pc, #376]	; (800e408 <HAL_TIM_PeriodElapsedCallback+0x1500>)
 800e28e:	edd3 7a00 	vldr	s15, [r3]
 800e292:	eef1 7a67 	vneg.f32	s15, s15
 800e296:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e29a:	ee17 3a90 	vmov	r3, s15
 800e29e:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim12, &ConfigOC, TIM_CHANNEL_2);
 800e2a0:	f107 030c 	add.w	r3, r7, #12
 800e2a4:	2204      	movs	r2, #4
 800e2a6:	4619      	mov	r1, r3
 800e2a8:	485b      	ldr	r0, [pc, #364]	; (800e418 <HAL_TIM_PeriodElapsedCallback+0x1510>)
 800e2aa:	f7f5 fc85 	bl	8003bb8 <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_2);
 800e2ae:	2104      	movs	r1, #4
 800e2b0:	4859      	ldr	r0, [pc, #356]	; (800e418 <HAL_TIM_PeriodElapsedCallback+0x1510>)
 800e2b2:	f7f5 fa19 	bl	80036e8 <HAL_TIM_PWM_Start>
 800e2b6:	e007      	b.n	800e2c8 <HAL_TIM_PeriodElapsedCallback+0x13c0>
			}
		}else{
			drive_dir(0, 2);
 800e2b8:	2102      	movs	r1, #2
 800e2ba:	2000      	movs	r0, #0
 800e2bc:	f7f6 fde0 	bl	8004e80 <drive_dir>
			drive_dir(1, 2);
 800e2c0:	2102      	movs	r1, #2
 800e2c2:	2001      	movs	r0, #1
 800e2c4:	f7f6 fddc 	bl	8004e80 <drive_dir>
		}


		//wall check
		//----look L----
		if(ad_l > WALL_BASE_L){
 800e2c8:	4b54      	ldr	r3, [pc, #336]	; (800e41c <HAL_TIM_PeriodElapsedCallback+0x1514>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	2bb4      	cmp	r3, #180	; 0xb4
 800e2ce:	d905      	bls.n	800e2dc <HAL_TIM_PeriodElapsedCallback+0x13d4>
			HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 800e2d0:	2201      	movs	r2, #1
 800e2d2:	2104      	movs	r1, #4
 800e2d4:	4852      	ldr	r0, [pc, #328]	; (800e420 <HAL_TIM_PeriodElapsedCallback+0x1518>)
 800e2d6:	f7f4 f815 	bl	8002304 <HAL_GPIO_WritePin>
 800e2da:	e004      	b.n	800e2e6 <HAL_TIM_PeriodElapsedCallback+0x13de>
		}else{
			HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 800e2dc:	2200      	movs	r2, #0
 800e2de:	2104      	movs	r1, #4
 800e2e0:	484f      	ldr	r0, [pc, #316]	; (800e420 <HAL_TIM_PeriodElapsedCallback+0x1518>)
 800e2e2:	f7f4 f80f 	bl	8002304 <HAL_GPIO_WritePin>
		}
		//----look R----
		if(ad_r > WALL_BASE_R){
 800e2e6:	4b4f      	ldr	r3, [pc, #316]	; (800e424 <HAL_TIM_PeriodElapsedCallback+0x151c>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800e2ee:	d906      	bls.n	800e2fe <HAL_TIM_PeriodElapsedCallback+0x13f6>
			HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 800e2f0:	2201      	movs	r2, #1
 800e2f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e2f6:	484c      	ldr	r0, [pc, #304]	; (800e428 <HAL_TIM_PeriodElapsedCallback+0x1520>)
 800e2f8:	f7f4 f804 	bl	8002304 <HAL_GPIO_WritePin>
 800e2fc:	e005      	b.n	800e30a <HAL_TIM_PeriodElapsedCallback+0x1402>
		}else{
			HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 800e2fe:	2200      	movs	r2, #0
 800e300:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e304:	4848      	ldr	r0, [pc, #288]	; (800e428 <HAL_TIM_PeriodElapsedCallback+0x1520>)
 800e306:	f7f3 fffd 	bl	8002304 <HAL_GPIO_WritePin>
		}
		//----look FL----
		if(ad_fl > WALL_BASE_FL){
 800e30a:	4b48      	ldr	r3, [pc, #288]	; (800e42c <HAL_TIM_PeriodElapsedCallback+0x1524>)
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	2bc8      	cmp	r3, #200	; 0xc8
 800e310:	d905      	bls.n	800e31e <HAL_TIM_PeriodElapsedCallback+0x1416>
			HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 800e312:	2201      	movs	r2, #1
 800e314:	2110      	movs	r1, #16
 800e316:	4842      	ldr	r0, [pc, #264]	; (800e420 <HAL_TIM_PeriodElapsedCallback+0x1518>)
 800e318:	f7f3 fff4 	bl	8002304 <HAL_GPIO_WritePin>
 800e31c:	e004      	b.n	800e328 <HAL_TIM_PeriodElapsedCallback+0x1420>
		}else{
			HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 800e31e:	2200      	movs	r2, #0
 800e320:	2110      	movs	r1, #16
 800e322:	483f      	ldr	r0, [pc, #252]	; (800e420 <HAL_TIM_PeriodElapsedCallback+0x1518>)
 800e324:	f7f3 ffee 	bl	8002304 <HAL_GPIO_WritePin>
		}
		//----look FR----
		if(ad_fr > WALL_BASE_FR){
 800e328:	4b41      	ldr	r3, [pc, #260]	; (800e430 <HAL_TIM_PeriodElapsedCallback+0x1528>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	2b78      	cmp	r3, #120	; 0x78
 800e32e:	d906      	bls.n	800e33e <HAL_TIM_PeriodElapsedCallback+0x1436>
			HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 800e330:	2201      	movs	r2, #1
 800e332:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e336:	483f      	ldr	r0, [pc, #252]	; (800e434 <HAL_TIM_PeriodElapsedCallback+0x152c>)
 800e338:	f7f3 ffe4 	bl	8002304 <HAL_GPIO_WritePin>
 800e33c:	e005      	b.n	800e34a <HAL_TIM_PeriodElapsedCallback+0x1442>
		}else{
			HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 800e33e:	2200      	movs	r2, #0
 800e340:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e344:	483b      	ldr	r0, [pc, #236]	; (800e434 <HAL_TIM_PeriodElapsedCallback+0x152c>)
 800e346:	f7f3 ffdd 	bl	8002304 <HAL_GPIO_WritePin>
		}


		//battery check
		if(HAL_GPIO_ReadPin(VOL_CHECK_GPIO_Port, VOL_CHECK_Pin) == GPIO_PIN_RESET) {	//2.1V以下で赤ランプ点灯=>LiPoが約7Vを下回るとランプ点灯
 800e34a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e34e:	4836      	ldr	r0, [pc, #216]	; (800e428 <HAL_TIM_PeriodElapsedCallback+0x1520>)
 800e350:	f7f3 ffc0 	bl	80022d4 <HAL_GPIO_ReadPin>
 800e354:	4603      	mov	r3, r0
 800e356:	2b00      	cmp	r3, #0
 800e358:	d105      	bne.n	800e366 <HAL_TIM_PeriodElapsedCallback+0x145e>
		   HAL_GPIO_WritePin(VAT_ALERT_GPIO_Port, VAT_ALERT_Pin, GPIO_PIN_SET);
 800e35a:	2201      	movs	r2, #1
 800e35c:	2108      	movs	r1, #8
 800e35e:	4830      	ldr	r0, [pc, #192]	; (800e420 <HAL_TIM_PeriodElapsedCallback+0x1518>)
 800e360:	f7f3 ffd0 	bl	8002304 <HAL_GPIO_WritePin>
 800e364:	e004      	b.n	800e370 <HAL_TIM_PeriodElapsedCallback+0x1468>
		} else {
		   HAL_GPIO_WritePin(VAT_ALERT_GPIO_Port, VAT_ALERT_Pin, GPIO_PIN_RESET);
 800e366:	2200      	movs	r2, #0
 800e368:	2108      	movs	r1, #8
 800e36a:	482d      	ldr	r0, [pc, #180]	; (800e420 <HAL_TIM_PeriodElapsedCallback+0x1518>)
 800e36c:	f7f3 ffca 	bl	8002304 <HAL_GPIO_WritePin>
		}


		//fail safe
		if(degree_z >= target_degree_z+270 || degree_z <= target_degree_z-270 || dist_r > 500 || dist_l > 500){	//270度以上回転発生でFail Safe
 800e370:	4b31      	ldr	r3, [pc, #196]	; (800e438 <HAL_TIM_PeriodElapsedCallback+0x1530>)
 800e372:	edd3 7a00 	vldr	s15, [r3]
 800e376:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800e43c <HAL_TIM_PeriodElapsedCallback+0x1534>
 800e37a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e37e:	4b30      	ldr	r3, [pc, #192]	; (800e440 <HAL_TIM_PeriodElapsedCallback+0x1538>)
 800e380:	edd3 7a00 	vldr	s15, [r3]
 800e384:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e38c:	d923      	bls.n	800e3d6 <HAL_TIM_PeriodElapsedCallback+0x14ce>
 800e38e:	4b2a      	ldr	r3, [pc, #168]	; (800e438 <HAL_TIM_PeriodElapsedCallback+0x1530>)
 800e390:	edd3 7a00 	vldr	s15, [r3]
 800e394:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800e43c <HAL_TIM_PeriodElapsedCallback+0x1534>
 800e398:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800e39c:	4b28      	ldr	r3, [pc, #160]	; (800e440 <HAL_TIM_PeriodElapsedCallback+0x1538>)
 800e39e:	edd3 7a00 	vldr	s15, [r3]
 800e3a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e3a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3aa:	da14      	bge.n	800e3d6 <HAL_TIM_PeriodElapsedCallback+0x14ce>
 800e3ac:	4b25      	ldr	r3, [pc, #148]	; (800e444 <HAL_TIM_PeriodElapsedCallback+0x153c>)
 800e3ae:	edd3 7a00 	vldr	s15, [r3]
 800e3b2:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800e448 <HAL_TIM_PeriodElapsedCallback+0x1540>
 800e3b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3be:	dc0a      	bgt.n	800e3d6 <HAL_TIM_PeriodElapsedCallback+0x14ce>
 800e3c0:	4b22      	ldr	r3, [pc, #136]	; (800e44c <HAL_TIM_PeriodElapsedCallback+0x1544>)
 800e3c2:	edd3 7a00 	vldr	s15, [r3]
 800e3c6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800e448 <HAL_TIM_PeriodElapsedCallback+0x1540>
 800e3ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e3ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3d2:	dc00      	bgt.n	800e3d6 <HAL_TIM_PeriodElapsedCallback+0x14ce>
			   drive_dir(1, 2);
			   full_led_write1(RED);
		   }
		}
	}
}
 800e3d4:	e00b      	b.n	800e3ee <HAL_TIM_PeriodElapsedCallback+0x14e6>
			   drive_dir(0, 2);
 800e3d6:	2102      	movs	r1, #2
 800e3d8:	2000      	movs	r0, #0
 800e3da:	f7f6 fd51 	bl	8004e80 <drive_dir>
			   drive_dir(1, 2);
 800e3de:	2102      	movs	r1, #2
 800e3e0:	2001      	movs	r0, #1
 800e3e2:	f7f6 fd4d 	bl	8004e80 <drive_dir>
			   full_led_write1(RED);
 800e3e6:	2001      	movs	r0, #1
 800e3e8:	f003 fe9e 	bl	8012128 <full_led_write1>
			   drive_dir(0, 2);
 800e3ec:	e7f3      	b.n	800e3d6 <HAL_TIM_PeriodElapsedCallback+0x14ce>
}
 800e3ee:	bf00      	nop
 800e3f0:	3730      	adds	r7, #48	; 0x30
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	ecbd 8b02 	vpop	{d8}
 800e3f8:	bdb0      	pop	{r4, r5, r7, pc}
 800e3fa:	bf00      	nop
 800e3fc:	c47a0000 	.word	0xc47a0000
 800e400:	447a0000 	.word	0x447a0000
 800e404:	20000c28 	.word	0x20000c28
 800e408:	20000780 	.word	0x20000780
 800e40c:	c47a0000 	.word	0xc47a0000
 800e410:	447a0000 	.word	0x447a0000
 800e414:	20000ae4 	.word	0x20000ae4
 800e418:	20000fac 	.word	0x20000fac
 800e41c:	20000b3c 	.word	0x20000b3c
 800e420:	40020000 	.word	0x40020000
 800e424:	20000fa0 	.word	0x20000fa0
 800e428:	40020800 	.word	0x40020800
 800e42c:	20000d94 	.word	0x20000d94
 800e430:	20000c80 	.word	0x20000c80
 800e434:	40020400 	.word	0x40020400
 800e438:	20000c78 	.word	0x20000c78
 800e43c:	43870000 	.word	0x43870000
 800e440:	20000b9c 	.word	0x20000b9c
 800e444:	20000b2c 	.word	0x20000b2c
 800e448:	43fa0000 	.word	0x43fa0000
 800e44c:	20001648 	.word	0x20001648

0800e450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b082      	sub	sp, #8
 800e454:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800e456:	f7f2 fd6f 	bl	8000f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800e45a:	f000 f915 	bl	800e688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800e45e:	f000 fc8f 	bl	800ed80 <MX_GPIO_Init>
  MX_ADC1_Init();
 800e462:	f000 f97b 	bl	800e75c <MX_ADC1_Init>
  MX_TIM8_Init();
 800e466:	f000 fb59 	bl	800eb1c <MX_TIM8_Init>
  MX_TIM5_Init();
 800e46a:	f000 facd 	bl	800ea08 <MX_TIM5_Init>
  MX_SPI3_Init();
 800e46e:	f000 f9c7 	bl	800e800 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800e472:	f000 fc5b 	bl	800ed2c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800e476:	f000 f9f9 	bl	800e86c <MX_TIM3_Init>
  MX_TIM12_Init();
 800e47a:	f000 fbf5 	bl	800ec68 <MX_TIM12_Init>
  MX_TIM4_Init();
 800e47e:	f000 fa6b 	bl	800e958 <MX_TIM4_Init>
  MX_TIM11_Init();
 800e482:	f000 fba3 	bl	800ebcc <MX_TIM11_Init>
  MX_TIM6_Init();
 800e486:	f000 fb13 	bl	800eab0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  drive_init();
 800e48a:	f7f6 fbdd 	bl	8004c48 <drive_init>
  gyro_init();
 800e48e:	f7fe fc4b 	bl	800cd28 <gyro_init>
  search_init();
 800e492:	f000 fdc5 	bl	800f020 <search_init>
  sensor_init();
 800e496:	f003 fd87 	bl	8011fa8 <sensor_init>

  printf("*** Welcome to WMMC ! ***\n");
 800e49a:	486d      	ldr	r0, [pc, #436]	; (800e650 <main+0x200>)
 800e49c:	f004 fd32 	bl	8012f04 <puts>

  setbuf(stdout, NULL);
 800e4a0:	4b6c      	ldr	r3, [pc, #432]	; (800e654 <main+0x204>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	689b      	ldr	r3, [r3, #8]
 800e4a6:	2100      	movs	r1, #0
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	f004 fd33 	bl	8012f14 <setbuf>
  HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_ALL);
 800e4ae:	213c      	movs	r1, #60	; 0x3c
 800e4b0:	4869      	ldr	r0, [pc, #420]	; (800e658 <main+0x208>)
 800e4b2:	f7f5 fa41 	bl	8003938 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 800e4b6:	213c      	movs	r1, #60	; 0x3c
 800e4b8:	4868      	ldr	r0, [pc, #416]	; (800e65c <main+0x20c>)
 800e4ba:	f7f5 fa3d 	bl	8003938 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 800e4be:	4868      	ldr	r0, [pc, #416]	; (800e660 <main+0x210>)
 800e4c0:	f7f5 f8c3 	bl	800364a <HAL_TIM_Base_Start_IT>

  int mode = 0;
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	607b      	str	r3, [r7, #4]
  printf("Mode : %d\n", mode);
 800e4c8:	6879      	ldr	r1, [r7, #4]
 800e4ca:	4866      	ldr	r0, [pc, #408]	; (800e664 <main+0x214>)
 800e4cc:	f004 fca6 	bl	8012e1c <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	b2db      	uxtb	r3, r3
 800e4d4:	f003 0301 	and.w	r3, r3, #1
 800e4d8:	b2d8      	uxtb	r0, r3
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	b2db      	uxtb	r3, r3
 800e4de:	f003 0302 	and.w	r3, r3, #2
 800e4e2:	b2d9      	uxtb	r1, r3
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	b2db      	uxtb	r3, r3
 800e4e8:	f003 0304 	and.w	r3, r3, #4
 800e4ec:	b2db      	uxtb	r3, r3
 800e4ee:	461a      	mov	r2, r3
 800e4f0:	f003 fde0 	bl	80120b4 <led_write>
	  if(dist_r >= 20){
 800e4f4:	4b5c      	ldr	r3, [pc, #368]	; (800e668 <main+0x218>)
 800e4f6:	edd3 7a00 	vldr	s15, [r3]
 800e4fa:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800e4fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e506:	db0f      	blt.n	800e528 <main+0xd8>
		  mode++;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	3301      	adds	r3, #1
 800e50c:	607b      	str	r3, [r7, #4]
		  dist_r = 0;
 800e50e:	4b56      	ldr	r3, [pc, #344]	; (800e668 <main+0x218>)
 800e510:	f04f 0200 	mov.w	r2, #0
 800e514:	601a      	str	r2, [r3, #0]
		  if(mode > 7){
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	2b07      	cmp	r3, #7
 800e51a:	dd01      	ble.n	800e520 <main+0xd0>
			  mode = 0;
 800e51c:	2300      	movs	r3, #0
 800e51e:	607b      	str	r3, [r7, #4]
		  }
		  printf("Mode : %d\n", mode);
 800e520:	6879      	ldr	r1, [r7, #4]
 800e522:	4850      	ldr	r0, [pc, #320]	; (800e664 <main+0x214>)
 800e524:	f004 fc7a 	bl	8012e1c <iprintf>
	  }
	  if(dist_r <= -20){
 800e528:	4b4f      	ldr	r3, [pc, #316]	; (800e668 <main+0x218>)
 800e52a:	edd3 7a00 	vldr	s15, [r3]
 800e52e:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800e532:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e53a:	d80f      	bhi.n	800e55c <main+0x10c>
		  mode--;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	3b01      	subs	r3, #1
 800e540:	607b      	str	r3, [r7, #4]
		  dist_r = 0;
 800e542:	4b49      	ldr	r3, [pc, #292]	; (800e668 <main+0x218>)
 800e544:	f04f 0200 	mov.w	r2, #0
 800e548:	601a      	str	r2, [r3, #0]
		  if(mode < 0){
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	da01      	bge.n	800e554 <main+0x104>
			  mode = 7;
 800e550:	2307      	movs	r3, #7
 800e552:	607b      	str	r3, [r7, #4]
		  }
		  printf("Mode : %d\n", mode);
 800e554:	6879      	ldr	r1, [r7, #4]
 800e556:	4843      	ldr	r0, [pc, #268]	; (800e664 <main+0x214>)
 800e558:	f004 fc60 	bl	8012e1c <iprintf>
	  }
	  if(dist_l <= -20){
 800e55c:	4b43      	ldr	r3, [pc, #268]	; (800e66c <main+0x21c>)
 800e55e:	edd3 7a00 	vldr	s15, [r3]
 800e562:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800e566:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e56a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e56e:	d86d      	bhi.n	800e64c <main+0x1fc>
		  dist_l = 0;
 800e570:	4b3e      	ldr	r3, [pc, #248]	; (800e66c <main+0x21c>)
 800e572:	f04f 0200 	mov.w	r2, #0
 800e576:	601a      	str	r2, [r3, #0]
		  switch(mode){
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2b07      	cmp	r3, #7
 800e57c:	d8a8      	bhi.n	800e4d0 <main+0x80>
 800e57e:	a201      	add	r2, pc, #4	; (adr r2, 800e584 <main+0x134>)
 800e580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e584:	0800e5a5 	.word	0x0800e5a5
 800e588:	0800e5af 	.word	0x0800e5af
 800e58c:	0800e5bb 	.word	0x0800e5bb
 800e590:	0800e5c7 	.word	0x0800e5c7
 800e594:	0800e5d3 	.word	0x0800e5d3
 800e598:	0800e5d9 	.word	0x0800e5d9
 800e59c:	0800e605 	.word	0x0800e605
 800e5a0:	0800e647 	.word	0x0800e647

			  case 0:
				  HAL_Delay(5000);
 800e5a4:	f241 3088 	movw	r0, #5000	; 0x1388
 800e5a8:	f7f2 fd38 	bl	800101c <HAL_Delay>
				  break;
 800e5ac:	e04e      	b.n	800e64c <main+0x1fc>

			  case 1:
				  //----a超新地走行----
				  printf("Simple Run.\n");
 800e5ae:	4830      	ldr	r0, [pc, #192]	; (800e670 <main+0x220>)
 800e5b0:	f004 fca8 	bl	8012f04 <puts>
				  //MF.FLAG.WEDGE = 1;
	//		  		  simple_run();
				  perfect_run();
 800e5b4:	f7fd f962 	bl	800b87c <perfect_run>
				  break;
 800e5b8:	e048      	b.n	800e64c <main+0x1fc>

			  case 2:
				  //----aスラローム走行----
				  printf("slalom Run.\n");
 800e5ba:	482e      	ldr	r0, [pc, #184]	; (800e674 <main+0x224>)
 800e5bc:	f004 fca2 	bl	8012f04 <puts>
				  //MF.FLAG.WEDGE = 1;
				  slalom_run();
 800e5c0:	f7fc fee4 	bl	800b38c <slalom_run>
				  break;
 800e5c4:	e042      	b.n	800e64c <main+0x1fc>

			  case 3:
				  //----aスラローム走行&pass圧縮----
				  printf("First Run. (Slalom)\n");
 800e5c6:	482c      	ldr	r0, [pc, #176]	; (800e678 <main+0x228>)
 800e5c8:	f004 fc9c 	bl	8012f04 <puts>
				  pass_test();
 800e5cc:	f7fc f810 	bl	800a5f0 <pass_test>
				  break;
 800e5d0:	e03c      	b.n	800e64c <main+0x1fc>

			  case 4:
				  //----aテストモード選択----
				  test_select();
 800e5d2:	f7fb fa75 	bl	8009ac0 <test_select>
				  break;
 800e5d6:	e039      	b.n	800e64c <main+0x1fc>

			  case 5:
				  //----sensor check----
				  printf("Sensor Check.\n");
 800e5d8:	4828      	ldr	r0, [pc, #160]	; (800e67c <main+0x22c>)
 800e5da:	f004 fc93 	bl	8012f04 <puts>
				  sensor_test();
 800e5de:	f003 feff 	bl	80123e0 <sensor_test>
				  break;
 800e5e2:	e033      	b.n	800e64c <main+0x1fc>

			  case 6:
				  //----pitagola sound----
				  while(ad_fl <= WALL_BASE_FL){
					  led_write(1, 1, 1);
 800e5e4:	2201      	movs	r2, #1
 800e5e6:	2101      	movs	r1, #1
 800e5e8:	2001      	movs	r0, #1
 800e5ea:	f003 fd63 	bl	80120b4 <led_write>
					  HAL_Delay(200);
 800e5ee:	20c8      	movs	r0, #200	; 0xc8
 800e5f0:	f7f2 fd14 	bl	800101c <HAL_Delay>
					  led_write(0, 0, 0);
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	2100      	movs	r1, #0
 800e5f8:	2000      	movs	r0, #0
 800e5fa:	f003 fd5b 	bl	80120b4 <led_write>
					  HAL_Delay(200);
 800e5fe:	20c8      	movs	r0, #200	; 0xc8
 800e600:	f7f2 fd0c 	bl	800101c <HAL_Delay>
				  while(ad_fl <= WALL_BASE_FL){
 800e604:	4b1e      	ldr	r3, [pc, #120]	; (800e680 <main+0x230>)
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	2bc8      	cmp	r3, #200	; 0xc8
 800e60a:	d9eb      	bls.n	800e5e4 <main+0x194>
				  }
				  HAL_Delay(200);
 800e60c:	20c8      	movs	r0, #200	; 0xc8
 800e60e:	f7f2 fd05 	bl	800101c <HAL_Delay>
				  }
				  HAL_Delay(2000);
				  for(int i=0; i<m_ok; i++){
					  buzzer(mario_ok[i][0], mario_ok[i][1]);
				  }
	*/				  HAL_Delay(2000);
 800e612:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800e616:	f7f2 fd01 	bl	800101c <HAL_Delay>
				  for(int i=0; i<m_goal; i++){
 800e61a:	2300      	movs	r3, #0
 800e61c:	603b      	str	r3, [r7, #0]
 800e61e:	e00e      	b.n	800e63e <main+0x1ee>
					  buzzer(mario_goal[i][0], mario_goal[i][1]);
 800e620:	4a18      	ldr	r2, [pc, #96]	; (800e684 <main+0x234>)
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e628:	4a16      	ldr	r2, [pc, #88]	; (800e684 <main+0x234>)
 800e62a:	683b      	ldr	r3, [r7, #0]
 800e62c:	00db      	lsls	r3, r3, #3
 800e62e:	4413      	add	r3, r2
 800e630:	685b      	ldr	r3, [r3, #4]
 800e632:	4619      	mov	r1, r3
 800e634:	f000 fc84 	bl	800ef40 <buzzer>
				  for(int i=0; i<m_goal; i++){
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	3301      	adds	r3, #1
 800e63c:	603b      	str	r3, [r7, #0]
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	2b0e      	cmp	r3, #14
 800e642:	dded      	ble.n	800e620 <main+0x1d0>
				  }
				  break;
 800e644:	e002      	b.n	800e64c <main+0x1fc>
				  //MF.FLAG.WEDGE = 1;
	/*		  		  for(int i=0; i<m_select; i++){
					  buzzer(mario_select[i][0], mario_select[i][1]);
				  }
	*///		  		  perfect_run();
				  perfect_slalom();
 800e646:	f7fd fbeb 	bl	800be20 <perfect_slalom>
				  break;
 800e64a:	bf00      	nop
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800e64c:	e740      	b.n	800e4d0 <main+0x80>
 800e64e:	bf00      	nop
 800e650:	08014438 	.word	0x08014438
 800e654:	20000084 	.word	0x20000084
 800e658:	20000784 	.word	0x20000784
 800e65c:	200002cc 	.word	0x200002cc
 800e660:	20000c34 	.word	0x20000c34
 800e664:	08014454 	.word	0x08014454
 800e668:	20000b2c 	.word	0x20000b2c
 800e66c:	20001648 	.word	0x20001648
 800e670:	08014460 	.word	0x08014460
 800e674:	0801446c 	.word	0x0801446c
 800e678:	08014478 	.word	0x08014478
 800e67c:	0801448c 	.word	0x0801448c
 800e680:	20000d94 	.word	0x20000d94
 800e684:	20000008 	.word	0x20000008

0800e688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b094      	sub	sp, #80	; 0x50
 800e68c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800e68e:	f107 0320 	add.w	r3, r7, #32
 800e692:	2230      	movs	r2, #48	; 0x30
 800e694:	2100      	movs	r1, #0
 800e696:	4618      	mov	r0, r3
 800e698:	f004 fbb8 	bl	8012e0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800e69c:	f107 030c 	add.w	r3, r7, #12
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	601a      	str	r2, [r3, #0]
 800e6a4:	605a      	str	r2, [r3, #4]
 800e6a6:	609a      	str	r2, [r3, #8]
 800e6a8:	60da      	str	r2, [r3, #12]
 800e6aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	60bb      	str	r3, [r7, #8]
 800e6b0:	4b28      	ldr	r3, [pc, #160]	; (800e754 <SystemClock_Config+0xcc>)
 800e6b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6b4:	4a27      	ldr	r2, [pc, #156]	; (800e754 <SystemClock_Config+0xcc>)
 800e6b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e6ba:	6413      	str	r3, [r2, #64]	; 0x40
 800e6bc:	4b25      	ldr	r3, [pc, #148]	; (800e754 <SystemClock_Config+0xcc>)
 800e6be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e6c4:	60bb      	str	r3, [r7, #8]
 800e6c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	607b      	str	r3, [r7, #4]
 800e6cc:	4b22      	ldr	r3, [pc, #136]	; (800e758 <SystemClock_Config+0xd0>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	4a21      	ldr	r2, [pc, #132]	; (800e758 <SystemClock_Config+0xd0>)
 800e6d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e6d6:	6013      	str	r3, [r2, #0]
 800e6d8:	4b1f      	ldr	r3, [pc, #124]	; (800e758 <SystemClock_Config+0xd0>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e6e0:	607b      	str	r3, [r7, #4]
 800e6e2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800e6e4:	2302      	movs	r3, #2
 800e6e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800e6e8:	2301      	movs	r3, #1
 800e6ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800e6ec:	2310      	movs	r3, #16
 800e6ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e6f0:	2302      	movs	r3, #2
 800e6f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800e6f8:	2308      	movs	r3, #8
 800e6fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800e6fc:	23a8      	movs	r3, #168	; 0xa8
 800e6fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800e700:	2302      	movs	r3, #2
 800e702:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800e704:	2304      	movs	r3, #4
 800e706:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e708:	f107 0320 	add.w	r3, r7, #32
 800e70c:	4618      	mov	r0, r3
 800e70e:	f7f3 fe13 	bl	8002338 <HAL_RCC_OscConfig>
 800e712:	4603      	mov	r3, r0
 800e714:	2b00      	cmp	r3, #0
 800e716:	d001      	beq.n	800e71c <SystemClock_Config+0x94>
  {
    Error_Handler();
 800e718:	f000 fc7b 	bl	800f012 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800e71c:	230f      	movs	r3, #15
 800e71e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800e720:	2302      	movs	r3, #2
 800e722:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800e724:	2300      	movs	r3, #0
 800e726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800e728:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800e72c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800e72e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e732:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800e734:	f107 030c 	add.w	r3, r7, #12
 800e738:	2105      	movs	r1, #5
 800e73a:	4618      	mov	r0, r3
 800e73c:	f7f4 f83e 	bl	80027bc <HAL_RCC_ClockConfig>
 800e740:	4603      	mov	r3, r0
 800e742:	2b00      	cmp	r3, #0
 800e744:	d001      	beq.n	800e74a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800e746:	f000 fc64 	bl	800f012 <Error_Handler>
  }
}
 800e74a:	bf00      	nop
 800e74c:	3750      	adds	r7, #80	; 0x50
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}
 800e752:	bf00      	nop
 800e754:	40023800 	.word	0x40023800
 800e758:	40007000 	.word	0x40007000

0800e75c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b084      	sub	sp, #16
 800e760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800e762:	463b      	mov	r3, r7
 800e764:	2200      	movs	r2, #0
 800e766:	601a      	str	r2, [r3, #0]
 800e768:	605a      	str	r2, [r3, #4]
 800e76a:	609a      	str	r2, [r3, #8]
 800e76c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800e76e:	4b21      	ldr	r3, [pc, #132]	; (800e7f4 <MX_ADC1_Init+0x98>)
 800e770:	4a21      	ldr	r2, [pc, #132]	; (800e7f8 <MX_ADC1_Init+0x9c>)
 800e772:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800e774:	4b1f      	ldr	r3, [pc, #124]	; (800e7f4 <MX_ADC1_Init+0x98>)
 800e776:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800e77a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800e77c:	4b1d      	ldr	r3, [pc, #116]	; (800e7f4 <MX_ADC1_Init+0x98>)
 800e77e:	2200      	movs	r2, #0
 800e780:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800e782:	4b1c      	ldr	r3, [pc, #112]	; (800e7f4 <MX_ADC1_Init+0x98>)
 800e784:	2200      	movs	r2, #0
 800e786:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800e788:	4b1a      	ldr	r3, [pc, #104]	; (800e7f4 <MX_ADC1_Init+0x98>)
 800e78a:	2200      	movs	r2, #0
 800e78c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800e78e:	4b19      	ldr	r3, [pc, #100]	; (800e7f4 <MX_ADC1_Init+0x98>)
 800e790:	2200      	movs	r2, #0
 800e792:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800e796:	4b17      	ldr	r3, [pc, #92]	; (800e7f4 <MX_ADC1_Init+0x98>)
 800e798:	2200      	movs	r2, #0
 800e79a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800e79c:	4b15      	ldr	r3, [pc, #84]	; (800e7f4 <MX_ADC1_Init+0x98>)
 800e79e:	4a17      	ldr	r2, [pc, #92]	; (800e7fc <MX_ADC1_Init+0xa0>)
 800e7a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e7a2:	4b14      	ldr	r3, [pc, #80]	; (800e7f4 <MX_ADC1_Init+0x98>)
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800e7a8:	4b12      	ldr	r3, [pc, #72]	; (800e7f4 <MX_ADC1_Init+0x98>)
 800e7aa:	2201      	movs	r2, #1
 800e7ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800e7ae:	4b11      	ldr	r3, [pc, #68]	; (800e7f4 <MX_ADC1_Init+0x98>)
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e7b6:	4b0f      	ldr	r3, [pc, #60]	; (800e7f4 <MX_ADC1_Init+0x98>)
 800e7b8:	2201      	movs	r2, #1
 800e7ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800e7bc:	480d      	ldr	r0, [pc, #52]	; (800e7f4 <MX_ADC1_Init+0x98>)
 800e7be:	f7f2 fc4f 	bl	8001060 <HAL_ADC_Init>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d001      	beq.n	800e7cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800e7c8:	f000 fc23 	bl	800f012 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800e7cc:	230a      	movs	r3, #10
 800e7ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e7d8:	463b      	mov	r3, r7
 800e7da:	4619      	mov	r1, r3
 800e7dc:	4805      	ldr	r0, [pc, #20]	; (800e7f4 <MX_ADC1_Init+0x98>)
 800e7de:	f7f2 fddb 	bl	8001398 <HAL_ADC_ConfigChannel>
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d001      	beq.n	800e7ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800e7e8:	f000 fc13 	bl	800f012 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800e7ec:	bf00      	nop
 800e7ee:	3710      	adds	r7, #16
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}
 800e7f4:	20000b40 	.word	0x20000b40
 800e7f8:	40012000 	.word	0x40012000
 800e7fc:	0f000001 	.word	0x0f000001

0800e800 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800e804:	4b17      	ldr	r3, [pc, #92]	; (800e864 <MX_SPI3_Init+0x64>)
 800e806:	4a18      	ldr	r2, [pc, #96]	; (800e868 <MX_SPI3_Init+0x68>)
 800e808:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800e80a:	4b16      	ldr	r3, [pc, #88]	; (800e864 <MX_SPI3_Init+0x64>)
 800e80c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800e810:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800e812:	4b14      	ldr	r3, [pc, #80]	; (800e864 <MX_SPI3_Init+0x64>)
 800e814:	2200      	movs	r2, #0
 800e816:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800e818:	4b12      	ldr	r3, [pc, #72]	; (800e864 <MX_SPI3_Init+0x64>)
 800e81a:	2200      	movs	r2, #0
 800e81c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800e81e:	4b11      	ldr	r3, [pc, #68]	; (800e864 <MX_SPI3_Init+0x64>)
 800e820:	2200      	movs	r2, #0
 800e822:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800e824:	4b0f      	ldr	r3, [pc, #60]	; (800e864 <MX_SPI3_Init+0x64>)
 800e826:	2200      	movs	r2, #0
 800e828:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800e82a:	4b0e      	ldr	r3, [pc, #56]	; (800e864 <MX_SPI3_Init+0x64>)
 800e82c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e830:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800e832:	4b0c      	ldr	r3, [pc, #48]	; (800e864 <MX_SPI3_Init+0x64>)
 800e834:	2218      	movs	r2, #24
 800e836:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800e838:	4b0a      	ldr	r3, [pc, #40]	; (800e864 <MX_SPI3_Init+0x64>)
 800e83a:	2200      	movs	r2, #0
 800e83c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800e83e:	4b09      	ldr	r3, [pc, #36]	; (800e864 <MX_SPI3_Init+0x64>)
 800e840:	2200      	movs	r2, #0
 800e842:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e844:	4b07      	ldr	r3, [pc, #28]	; (800e864 <MX_SPI3_Init+0x64>)
 800e846:	2200      	movs	r2, #0
 800e848:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800e84a:	4b06      	ldr	r3, [pc, #24]	; (800e864 <MX_SPI3_Init+0x64>)
 800e84c:	220a      	movs	r2, #10
 800e84e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800e850:	4804      	ldr	r0, [pc, #16]	; (800e864 <MX_SPI3_Init+0x64>)
 800e852:	f7f4 f97b 	bl	8002b4c <HAL_SPI_Init>
 800e856:	4603      	mov	r3, r0
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d001      	beq.n	800e860 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800e85c:	f000 fbd9 	bl	800f012 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800e860:	bf00      	nop
 800e862:	bd80      	pop	{r7, pc}
 800e864:	20000144 	.word	0x20000144
 800e868:	40003c00 	.word	0x40003c00

0800e86c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b08e      	sub	sp, #56	; 0x38
 800e870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e872:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e876:	2200      	movs	r2, #0
 800e878:	601a      	str	r2, [r3, #0]
 800e87a:	605a      	str	r2, [r3, #4]
 800e87c:	609a      	str	r2, [r3, #8]
 800e87e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e880:	f107 0320 	add.w	r3, r7, #32
 800e884:	2200      	movs	r2, #0
 800e886:	601a      	str	r2, [r3, #0]
 800e888:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e88a:	1d3b      	adds	r3, r7, #4
 800e88c:	2200      	movs	r2, #0
 800e88e:	601a      	str	r2, [r3, #0]
 800e890:	605a      	str	r2, [r3, #4]
 800e892:	609a      	str	r2, [r3, #8]
 800e894:	60da      	str	r2, [r3, #12]
 800e896:	611a      	str	r2, [r3, #16]
 800e898:	615a      	str	r2, [r3, #20]
 800e89a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800e89c:	4b2c      	ldr	r3, [pc, #176]	; (800e950 <MX_TIM3_Init+0xe4>)
 800e89e:	4a2d      	ldr	r2, [pc, #180]	; (800e954 <MX_TIM3_Init+0xe8>)
 800e8a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800e8a2:	4b2b      	ldr	r3, [pc, #172]	; (800e950 <MX_TIM3_Init+0xe4>)
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e8a8:	4b29      	ldr	r3, [pc, #164]	; (800e950 <MX_TIM3_Init+0xe4>)
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800e8ae:	4b28      	ldr	r3, [pc, #160]	; (800e950 <MX_TIM3_Init+0xe4>)
 800e8b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e8b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e8b6:	4b26      	ldr	r3, [pc, #152]	; (800e950 <MX_TIM3_Init+0xe4>)
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e8bc:	4b24      	ldr	r3, [pc, #144]	; (800e950 <MX_TIM3_Init+0xe4>)
 800e8be:	2200      	movs	r2, #0
 800e8c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800e8c2:	4823      	ldr	r0, [pc, #140]	; (800e950 <MX_TIM3_Init+0xe4>)
 800e8c4:	f7f4 fe96 	bl	80035f4 <HAL_TIM_Base_Init>
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d001      	beq.n	800e8d2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800e8ce:	f000 fba0 	bl	800f012 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e8d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e8d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800e8d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e8dc:	4619      	mov	r1, r3
 800e8de:	481c      	ldr	r0, [pc, #112]	; (800e950 <MX_TIM3_Init+0xe4>)
 800e8e0:	f7f5 fa30 	bl	8003d44 <HAL_TIM_ConfigClockSource>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d001      	beq.n	800e8ee <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800e8ea:	f000 fb92 	bl	800f012 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800e8ee:	4818      	ldr	r0, [pc, #96]	; (800e950 <MX_TIM3_Init+0xe4>)
 800e8f0:	f7f4 fecf 	bl	8003692 <HAL_TIM_PWM_Init>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d001      	beq.n	800e8fe <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800e8fa:	f000 fb8a 	bl	800f012 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e8fe:	2300      	movs	r3, #0
 800e900:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e902:	2300      	movs	r3, #0
 800e904:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800e906:	f107 0320 	add.w	r3, r7, #32
 800e90a:	4619      	mov	r1, r3
 800e90c:	4810      	ldr	r0, [pc, #64]	; (800e950 <MX_TIM3_Init+0xe4>)
 800e90e:	f7f5 fe08 	bl	8004522 <HAL_TIMEx_MasterConfigSynchronization>
 800e912:	4603      	mov	r3, r0
 800e914:	2b00      	cmp	r3, #0
 800e916:	d001      	beq.n	800e91c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800e918:	f000 fb7b 	bl	800f012 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e91c:	2360      	movs	r3, #96	; 0x60
 800e91e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800e920:	2300      	movs	r3, #0
 800e922:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e924:	2300      	movs	r3, #0
 800e926:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e928:	2300      	movs	r3, #0
 800e92a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800e92c:	1d3b      	adds	r3, r7, #4
 800e92e:	2208      	movs	r2, #8
 800e930:	4619      	mov	r1, r3
 800e932:	4807      	ldr	r0, [pc, #28]	; (800e950 <MX_TIM3_Init+0xe4>)
 800e934:	f7f5 f940 	bl	8003bb8 <HAL_TIM_PWM_ConfigChannel>
 800e938:	4603      	mov	r3, r0
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d001      	beq.n	800e942 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800e93e:	f000 fb68 	bl	800f012 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800e942:	4803      	ldr	r0, [pc, #12]	; (800e950 <MX_TIM3_Init+0xe4>)
 800e944:	f004 f810 	bl	8012968 <HAL_TIM_MspPostInit>

}
 800e948:	bf00      	nop
 800e94a:	3738      	adds	r7, #56	; 0x38
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd80      	pop	{r7, pc}
 800e950:	20000ae4 	.word	0x20000ae4
 800e954:	40000400 	.word	0x40000400

0800e958 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b08a      	sub	sp, #40	; 0x28
 800e95c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e95e:	f107 0320 	add.w	r3, r7, #32
 800e962:	2200      	movs	r2, #0
 800e964:	601a      	str	r2, [r3, #0]
 800e966:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e968:	1d3b      	adds	r3, r7, #4
 800e96a:	2200      	movs	r2, #0
 800e96c:	601a      	str	r2, [r3, #0]
 800e96e:	605a      	str	r2, [r3, #4]
 800e970:	609a      	str	r2, [r3, #8]
 800e972:	60da      	str	r2, [r3, #12]
 800e974:	611a      	str	r2, [r3, #16]
 800e976:	615a      	str	r2, [r3, #20]
 800e978:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800e97a:	4b21      	ldr	r3, [pc, #132]	; (800ea00 <MX_TIM4_Init+0xa8>)
 800e97c:	4a21      	ldr	r2, [pc, #132]	; (800ea04 <MX_TIM4_Init+0xac>)
 800e97e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800e980:	4b1f      	ldr	r3, [pc, #124]	; (800ea00 <MX_TIM4_Init+0xa8>)
 800e982:	2200      	movs	r2, #0
 800e984:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e986:	4b1e      	ldr	r3, [pc, #120]	; (800ea00 <MX_TIM4_Init+0xa8>)
 800e988:	2200      	movs	r2, #0
 800e98a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 800e98c:	4b1c      	ldr	r3, [pc, #112]	; (800ea00 <MX_TIM4_Init+0xa8>)
 800e98e:	2200      	movs	r2, #0
 800e990:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e992:	4b1b      	ldr	r3, [pc, #108]	; (800ea00 <MX_TIM4_Init+0xa8>)
 800e994:	2200      	movs	r2, #0
 800e996:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e998:	4b19      	ldr	r3, [pc, #100]	; (800ea00 <MX_TIM4_Init+0xa8>)
 800e99a:	2200      	movs	r2, #0
 800e99c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800e99e:	4818      	ldr	r0, [pc, #96]	; (800ea00 <MX_TIM4_Init+0xa8>)
 800e9a0:	f7f4 fe77 	bl	8003692 <HAL_TIM_PWM_Init>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d001      	beq.n	800e9ae <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800e9aa:	f000 fb32 	bl	800f012 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800e9b6:	f107 0320 	add.w	r3, r7, #32
 800e9ba:	4619      	mov	r1, r3
 800e9bc:	4810      	ldr	r0, [pc, #64]	; (800ea00 <MX_TIM4_Init+0xa8>)
 800e9be:	f7f5 fdb0 	bl	8004522 <HAL_TIMEx_MasterConfigSynchronization>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d001      	beq.n	800e9cc <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 800e9c8:	f000 fb23 	bl	800f012 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e9cc:	2360      	movs	r3, #96	; 0x60
 800e9ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e9d8:	2300      	movs	r3, #0
 800e9da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800e9dc:	1d3b      	adds	r3, r7, #4
 800e9de:	2208      	movs	r2, #8
 800e9e0:	4619      	mov	r1, r3
 800e9e2:	4807      	ldr	r0, [pc, #28]	; (800ea00 <MX_TIM4_Init+0xa8>)
 800e9e4:	f7f5 f8e8 	bl	8003bb8 <HAL_TIM_PWM_ConfigChannel>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d001      	beq.n	800e9f2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800e9ee:	f000 fb10 	bl	800f012 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800e9f2:	4803      	ldr	r0, [pc, #12]	; (800ea00 <MX_TIM4_Init+0xa8>)
 800e9f4:	f003 ffb8 	bl	8012968 <HAL_TIM_MspPostInit>

}
 800e9f8:	bf00      	nop
 800e9fa:	3728      	adds	r7, #40	; 0x28
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd80      	pop	{r7, pc}
 800ea00:	2000030c 	.word	0x2000030c
 800ea04:	40000800 	.word	0x40000800

0800ea08 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b08c      	sub	sp, #48	; 0x30
 800ea0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800ea0e:	f107 030c 	add.w	r3, r7, #12
 800ea12:	2224      	movs	r2, #36	; 0x24
 800ea14:	2100      	movs	r1, #0
 800ea16:	4618      	mov	r0, r3
 800ea18:	f004 f9f8 	bl	8012e0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ea1c:	1d3b      	adds	r3, r7, #4
 800ea1e:	2200      	movs	r2, #0
 800ea20:	601a      	str	r2, [r3, #0]
 800ea22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800ea24:	4b20      	ldr	r3, [pc, #128]	; (800eaa8 <MX_TIM5_Init+0xa0>)
 800ea26:	4a21      	ldr	r2, [pc, #132]	; (800eaac <MX_TIM5_Init+0xa4>)
 800ea28:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800ea2a:	4b1f      	ldr	r3, [pc, #124]	; (800eaa8 <MX_TIM5_Init+0xa0>)
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ea30:	4b1d      	ldr	r3, [pc, #116]	; (800eaa8 <MX_TIM5_Init+0xa0>)
 800ea32:	2200      	movs	r2, #0
 800ea34:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535-1;
 800ea36:	4b1c      	ldr	r3, [pc, #112]	; (800eaa8 <MX_TIM5_Init+0xa0>)
 800ea38:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ea3c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ea3e:	4b1a      	ldr	r3, [pc, #104]	; (800eaa8 <MX_TIM5_Init+0xa0>)
 800ea40:	2200      	movs	r2, #0
 800ea42:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ea44:	4b18      	ldr	r3, [pc, #96]	; (800eaa8 <MX_TIM5_Init+0xa0>)
 800ea46:	2200      	movs	r2, #0
 800ea48:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800ea4a:	2303      	movs	r3, #3
 800ea4c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800ea4e:	2300      	movs	r3, #0
 800ea50:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800ea52:	2301      	movs	r3, #1
 800ea54:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800ea56:	2300      	movs	r3, #0
 800ea58:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800ea5e:	2300      	movs	r3, #0
 800ea60:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800ea62:	2301      	movs	r3, #1
 800ea64:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800ea66:	2300      	movs	r3, #0
 800ea68:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800ea6e:	f107 030c 	add.w	r3, r7, #12
 800ea72:	4619      	mov	r1, r3
 800ea74:	480c      	ldr	r0, [pc, #48]	; (800eaa8 <MX_TIM5_Init+0xa0>)
 800ea76:	f7f4 fecd 	bl	8003814 <HAL_TIM_Encoder_Init>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d001      	beq.n	800ea84 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 800ea80:	f000 fac7 	bl	800f012 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ea84:	2300      	movs	r3, #0
 800ea86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ea88:	2300      	movs	r3, #0
 800ea8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800ea8c:	1d3b      	adds	r3, r7, #4
 800ea8e:	4619      	mov	r1, r3
 800ea90:	4805      	ldr	r0, [pc, #20]	; (800eaa8 <MX_TIM5_Init+0xa0>)
 800ea92:	f7f5 fd46 	bl	8004522 <HAL_TIMEx_MasterConfigSynchronization>
 800ea96:	4603      	mov	r3, r0
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d001      	beq.n	800eaa0 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 800ea9c:	f000 fab9 	bl	800f012 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800eaa0:	bf00      	nop
 800eaa2:	3730      	adds	r7, #48	; 0x30
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bd80      	pop	{r7, pc}
 800eaa8:	20000784 	.word	0x20000784
 800eaac:	40000c00 	.word	0x40000c00

0800eab0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b082      	sub	sp, #8
 800eab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800eab6:	463b      	mov	r3, r7
 800eab8:	2200      	movs	r2, #0
 800eaba:	601a      	str	r2, [r3, #0]
 800eabc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800eabe:	4b15      	ldr	r3, [pc, #84]	; (800eb14 <MX_TIM6_Init+0x64>)
 800eac0:	4a15      	ldr	r2, [pc, #84]	; (800eb18 <MX_TIM6_Init+0x68>)
 800eac2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 800eac4:	4b13      	ldr	r3, [pc, #76]	; (800eb14 <MX_TIM6_Init+0x64>)
 800eac6:	2253      	movs	r2, #83	; 0x53
 800eac8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800eaca:	4b12      	ldr	r3, [pc, #72]	; (800eb14 <MX_TIM6_Init+0x64>)
 800eacc:	2200      	movs	r2, #0
 800eace:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800ead0:	4b10      	ldr	r3, [pc, #64]	; (800eb14 <MX_TIM6_Init+0x64>)
 800ead2:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ead6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ead8:	4b0e      	ldr	r3, [pc, #56]	; (800eb14 <MX_TIM6_Init+0x64>)
 800eada:	2200      	movs	r2, #0
 800eadc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800eade:	480d      	ldr	r0, [pc, #52]	; (800eb14 <MX_TIM6_Init+0x64>)
 800eae0:	f7f4 fd88 	bl	80035f4 <HAL_TIM_Base_Init>
 800eae4:	4603      	mov	r3, r0
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d001      	beq.n	800eaee <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800eaea:	f000 fa92 	bl	800f012 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800eaee:	2300      	movs	r3, #0
 800eaf0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800eaf6:	463b      	mov	r3, r7
 800eaf8:	4619      	mov	r1, r3
 800eafa:	4806      	ldr	r0, [pc, #24]	; (800eb14 <MX_TIM6_Init+0x64>)
 800eafc:	f7f5 fd11 	bl	8004522 <HAL_TIMEx_MasterConfigSynchronization>
 800eb00:	4603      	mov	r3, r0
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d001      	beq.n	800eb0a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800eb06:	f000 fa84 	bl	800f012 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800eb0a:	bf00      	nop
 800eb0c:	3708      	adds	r7, #8
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}
 800eb12:	bf00      	nop
 800eb14:	20000c34 	.word	0x20000c34
 800eb18:	40001000 	.word	0x40001000

0800eb1c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b08c      	sub	sp, #48	; 0x30
 800eb20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800eb22:	f107 030c 	add.w	r3, r7, #12
 800eb26:	2224      	movs	r2, #36	; 0x24
 800eb28:	2100      	movs	r1, #0
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	f004 f96e 	bl	8012e0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800eb30:	1d3b      	adds	r3, r7, #4
 800eb32:	2200      	movs	r2, #0
 800eb34:	601a      	str	r2, [r3, #0]
 800eb36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800eb38:	4b22      	ldr	r3, [pc, #136]	; (800ebc4 <MX_TIM8_Init+0xa8>)
 800eb3a:	4a23      	ldr	r2, [pc, #140]	; (800ebc8 <MX_TIM8_Init+0xac>)
 800eb3c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800eb3e:	4b21      	ldr	r3, [pc, #132]	; (800ebc4 <MX_TIM8_Init+0xa8>)
 800eb40:	2200      	movs	r2, #0
 800eb42:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800eb44:	4b1f      	ldr	r3, [pc, #124]	; (800ebc4 <MX_TIM8_Init+0xa8>)
 800eb46:	2200      	movs	r2, #0
 800eb48:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535-1;
 800eb4a:	4b1e      	ldr	r3, [pc, #120]	; (800ebc4 <MX_TIM8_Init+0xa8>)
 800eb4c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800eb50:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800eb52:	4b1c      	ldr	r3, [pc, #112]	; (800ebc4 <MX_TIM8_Init+0xa8>)
 800eb54:	2200      	movs	r2, #0
 800eb56:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800eb58:	4b1a      	ldr	r3, [pc, #104]	; (800ebc4 <MX_TIM8_Init+0xa8>)
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800eb5e:	4b19      	ldr	r3, [pc, #100]	; (800ebc4 <MX_TIM8_Init+0xa8>)
 800eb60:	2200      	movs	r2, #0
 800eb62:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800eb64:	2303      	movs	r3, #3
 800eb66:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800eb68:	2300      	movs	r3, #0
 800eb6a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800eb70:	2300      	movs	r3, #0
 800eb72:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800eb74:	2300      	movs	r3, #0
 800eb76:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800eb78:	2300      	movs	r3, #0
 800eb7a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800eb7c:	2301      	movs	r3, #1
 800eb7e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800eb80:	2300      	movs	r3, #0
 800eb82:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800eb84:	2300      	movs	r3, #0
 800eb86:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800eb88:	f107 030c 	add.w	r3, r7, #12
 800eb8c:	4619      	mov	r1, r3
 800eb8e:	480d      	ldr	r0, [pc, #52]	; (800ebc4 <MX_TIM8_Init+0xa8>)
 800eb90:	f7f4 fe40 	bl	8003814 <HAL_TIM_Encoder_Init>
 800eb94:	4603      	mov	r3, r0
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d001      	beq.n	800eb9e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800eb9a:	f000 fa3a 	bl	800f012 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800eb9e:	2300      	movs	r3, #0
 800eba0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800eba2:	2300      	movs	r3, #0
 800eba4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800eba6:	1d3b      	adds	r3, r7, #4
 800eba8:	4619      	mov	r1, r3
 800ebaa:	4806      	ldr	r0, [pc, #24]	; (800ebc4 <MX_TIM8_Init+0xa8>)
 800ebac:	f7f5 fcb9 	bl	8004522 <HAL_TIMEx_MasterConfigSynchronization>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d001      	beq.n	800ebba <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800ebb6:	f000 fa2c 	bl	800f012 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800ebba:	bf00      	nop
 800ebbc:	3730      	adds	r7, #48	; 0x30
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}
 800ebc2:	bf00      	nop
 800ebc4:	200002cc 	.word	0x200002cc
 800ebc8:	40010400 	.word	0x40010400

0800ebcc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b088      	sub	sp, #32
 800ebd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800ebd2:	1d3b      	adds	r3, r7, #4
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	601a      	str	r2, [r3, #0]
 800ebd8:	605a      	str	r2, [r3, #4]
 800ebda:	609a      	str	r2, [r3, #8]
 800ebdc:	60da      	str	r2, [r3, #12]
 800ebde:	611a      	str	r2, [r3, #16]
 800ebe0:	615a      	str	r2, [r3, #20]
 800ebe2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800ebe4:	4b1e      	ldr	r3, [pc, #120]	; (800ec60 <MX_TIM11_Init+0x94>)
 800ebe6:	4a1f      	ldr	r2, [pc, #124]	; (800ec64 <MX_TIM11_Init+0x98>)
 800ebe8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800ebea:	4b1d      	ldr	r3, [pc, #116]	; (800ec60 <MX_TIM11_Init+0x94>)
 800ebec:	2200      	movs	r2, #0
 800ebee:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ebf0:	4b1b      	ldr	r3, [pc, #108]	; (800ec60 <MX_TIM11_Init+0x94>)
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 800ebf6:	4b1a      	ldr	r3, [pc, #104]	; (800ec60 <MX_TIM11_Init+0x94>)
 800ebf8:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ebfc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ebfe:	4b18      	ldr	r3, [pc, #96]	; (800ec60 <MX_TIM11_Init+0x94>)
 800ec00:	2200      	movs	r2, #0
 800ec02:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ec04:	4b16      	ldr	r3, [pc, #88]	; (800ec60 <MX_TIM11_Init+0x94>)
 800ec06:	2200      	movs	r2, #0
 800ec08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800ec0a:	4815      	ldr	r0, [pc, #84]	; (800ec60 <MX_TIM11_Init+0x94>)
 800ec0c:	f7f4 fcf2 	bl	80035f4 <HAL_TIM_Base_Init>
 800ec10:	4603      	mov	r3, r0
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d001      	beq.n	800ec1a <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800ec16:	f000 f9fc 	bl	800f012 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800ec1a:	4811      	ldr	r0, [pc, #68]	; (800ec60 <MX_TIM11_Init+0x94>)
 800ec1c:	f7f4 fd39 	bl	8003692 <HAL_TIM_PWM_Init>
 800ec20:	4603      	mov	r3, r0
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d001      	beq.n	800ec2a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800ec26:	f000 f9f4 	bl	800f012 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ec2a:	2360      	movs	r3, #96	; 0x60
 800ec2c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ec32:	2300      	movs	r3, #0
 800ec34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ec36:	2300      	movs	r3, #0
 800ec38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ec3a:	1d3b      	adds	r3, r7, #4
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	4619      	mov	r1, r3
 800ec40:	4807      	ldr	r0, [pc, #28]	; (800ec60 <MX_TIM11_Init+0x94>)
 800ec42:	f7f4 ffb9 	bl	8003bb8 <HAL_TIM_PWM_ConfigChannel>
 800ec46:	4603      	mov	r3, r0
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d001      	beq.n	800ec50 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 800ec4c:	f000 f9e1 	bl	800f012 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 800ec50:	4803      	ldr	r0, [pc, #12]	; (800ec60 <MX_TIM11_Init+0x94>)
 800ec52:	f003 fe89 	bl	8012968 <HAL_TIM_MspPostInit>

}
 800ec56:	bf00      	nop
 800ec58:	3720      	adds	r7, #32
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}
 800ec5e:	bf00      	nop
 800ec60:	20000be8 	.word	0x20000be8
 800ec64:	40014800 	.word	0x40014800

0800ec68 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b08c      	sub	sp, #48	; 0x30
 800ec6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ec6e:	f107 0320 	add.w	r3, r7, #32
 800ec72:	2200      	movs	r2, #0
 800ec74:	601a      	str	r2, [r3, #0]
 800ec76:	605a      	str	r2, [r3, #4]
 800ec78:	609a      	str	r2, [r3, #8]
 800ec7a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ec7c:	1d3b      	adds	r3, r7, #4
 800ec7e:	2200      	movs	r2, #0
 800ec80:	601a      	str	r2, [r3, #0]
 800ec82:	605a      	str	r2, [r3, #4]
 800ec84:	609a      	str	r2, [r3, #8]
 800ec86:	60da      	str	r2, [r3, #12]
 800ec88:	611a      	str	r2, [r3, #16]
 800ec8a:	615a      	str	r2, [r3, #20]
 800ec8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800ec8e:	4b25      	ldr	r3, [pc, #148]	; (800ed24 <MX_TIM12_Init+0xbc>)
 800ec90:	4a25      	ldr	r2, [pc, #148]	; (800ed28 <MX_TIM12_Init+0xc0>)
 800ec92:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800ec94:	4b23      	ldr	r3, [pc, #140]	; (800ed24 <MX_TIM12_Init+0xbc>)
 800ec96:	2200      	movs	r2, #0
 800ec98:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ec9a:	4b22      	ldr	r3, [pc, #136]	; (800ed24 <MX_TIM12_Init+0xbc>)
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 800eca0:	4b20      	ldr	r3, [pc, #128]	; (800ed24 <MX_TIM12_Init+0xbc>)
 800eca2:	f240 32e7 	movw	r2, #999	; 0x3e7
 800eca6:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800eca8:	4b1e      	ldr	r3, [pc, #120]	; (800ed24 <MX_TIM12_Init+0xbc>)
 800ecaa:	2200      	movs	r2, #0
 800ecac:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ecae:	4b1d      	ldr	r3, [pc, #116]	; (800ed24 <MX_TIM12_Init+0xbc>)
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800ecb4:	481b      	ldr	r0, [pc, #108]	; (800ed24 <MX_TIM12_Init+0xbc>)
 800ecb6:	f7f4 fc9d 	bl	80035f4 <HAL_TIM_Base_Init>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d001      	beq.n	800ecc4 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 800ecc0:	f000 f9a7 	bl	800f012 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ecc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ecc8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800ecca:	f107 0320 	add.w	r3, r7, #32
 800ecce:	4619      	mov	r1, r3
 800ecd0:	4814      	ldr	r0, [pc, #80]	; (800ed24 <MX_TIM12_Init+0xbc>)
 800ecd2:	f7f5 f837 	bl	8003d44 <HAL_TIM_ConfigClockSource>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d001      	beq.n	800ece0 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 800ecdc:	f000 f999 	bl	800f012 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800ece0:	4810      	ldr	r0, [pc, #64]	; (800ed24 <MX_TIM12_Init+0xbc>)
 800ece2:	f7f4 fcd6 	bl	8003692 <HAL_TIM_PWM_Init>
 800ece6:	4603      	mov	r3, r0
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d001      	beq.n	800ecf0 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 800ecec:	f000 f991 	bl	800f012 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ecf0:	2360      	movs	r3, #96	; 0x60
 800ecf2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800ed00:	1d3b      	adds	r3, r7, #4
 800ed02:	2204      	movs	r2, #4
 800ed04:	4619      	mov	r1, r3
 800ed06:	4807      	ldr	r0, [pc, #28]	; (800ed24 <MX_TIM12_Init+0xbc>)
 800ed08:	f7f4 ff56 	bl	8003bb8 <HAL_TIM_PWM_ConfigChannel>
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d001      	beq.n	800ed16 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 800ed12:	f000 f97e 	bl	800f012 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800ed16:	4803      	ldr	r0, [pc, #12]	; (800ed24 <MX_TIM12_Init+0xbc>)
 800ed18:	f003 fe26 	bl	8012968 <HAL_TIM_MspPostInit>

}
 800ed1c:	bf00      	nop
 800ed1e:	3730      	adds	r7, #48	; 0x30
 800ed20:	46bd      	mov	sp, r7
 800ed22:	bd80      	pop	{r7, pc}
 800ed24:	20000fac 	.word	0x20000fac
 800ed28:	40001800 	.word	0x40001800

0800ed2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800ed30:	4b11      	ldr	r3, [pc, #68]	; (800ed78 <MX_USART1_UART_Init+0x4c>)
 800ed32:	4a12      	ldr	r2, [pc, #72]	; (800ed7c <MX_USART1_UART_Init+0x50>)
 800ed34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800ed36:	4b10      	ldr	r3, [pc, #64]	; (800ed78 <MX_USART1_UART_Init+0x4c>)
 800ed38:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800ed3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800ed3e:	4b0e      	ldr	r3, [pc, #56]	; (800ed78 <MX_USART1_UART_Init+0x4c>)
 800ed40:	2200      	movs	r2, #0
 800ed42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800ed44:	4b0c      	ldr	r3, [pc, #48]	; (800ed78 <MX_USART1_UART_Init+0x4c>)
 800ed46:	2200      	movs	r2, #0
 800ed48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800ed4a:	4b0b      	ldr	r3, [pc, #44]	; (800ed78 <MX_USART1_UART_Init+0x4c>)
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800ed50:	4b09      	ldr	r3, [pc, #36]	; (800ed78 <MX_USART1_UART_Init+0x4c>)
 800ed52:	220c      	movs	r2, #12
 800ed54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ed56:	4b08      	ldr	r3, [pc, #32]	; (800ed78 <MX_USART1_UART_Init+0x4c>)
 800ed58:	2200      	movs	r2, #0
 800ed5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800ed5c:	4b06      	ldr	r3, [pc, #24]	; (800ed78 <MX_USART1_UART_Init+0x4c>)
 800ed5e:	2200      	movs	r2, #0
 800ed60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800ed62:	4805      	ldr	r0, [pc, #20]	; (800ed78 <MX_USART1_UART_Init+0x4c>)
 800ed64:	f7f5 fc36 	bl	80045d4 <HAL_UART_Init>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d001      	beq.n	800ed72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800ed6e:	f000 f950 	bl	800f012 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800ed72:	bf00      	nop
 800ed74:	bd80      	pop	{r7, pc}
 800ed76:	bf00      	nop
 800ed78:	20000ba4 	.word	0x20000ba4
 800ed7c:	40011000 	.word	0x40011000

0800ed80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b08a      	sub	sp, #40	; 0x28
 800ed84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ed86:	f107 0314 	add.w	r3, r7, #20
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	601a      	str	r2, [r3, #0]
 800ed8e:	605a      	str	r2, [r3, #4]
 800ed90:	609a      	str	r2, [r3, #8]
 800ed92:	60da      	str	r2, [r3, #12]
 800ed94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ed96:	2300      	movs	r3, #0
 800ed98:	613b      	str	r3, [r7, #16]
 800ed9a:	4b63      	ldr	r3, [pc, #396]	; (800ef28 <MX_GPIO_Init+0x1a8>)
 800ed9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed9e:	4a62      	ldr	r2, [pc, #392]	; (800ef28 <MX_GPIO_Init+0x1a8>)
 800eda0:	f043 0304 	orr.w	r3, r3, #4
 800eda4:	6313      	str	r3, [r2, #48]	; 0x30
 800eda6:	4b60      	ldr	r3, [pc, #384]	; (800ef28 <MX_GPIO_Init+0x1a8>)
 800eda8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edaa:	f003 0304 	and.w	r3, r3, #4
 800edae:	613b      	str	r3, [r7, #16]
 800edb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800edb2:	2300      	movs	r3, #0
 800edb4:	60fb      	str	r3, [r7, #12]
 800edb6:	4b5c      	ldr	r3, [pc, #368]	; (800ef28 <MX_GPIO_Init+0x1a8>)
 800edb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edba:	4a5b      	ldr	r2, [pc, #364]	; (800ef28 <MX_GPIO_Init+0x1a8>)
 800edbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edc0:	6313      	str	r3, [r2, #48]	; 0x30
 800edc2:	4b59      	ldr	r3, [pc, #356]	; (800ef28 <MX_GPIO_Init+0x1a8>)
 800edc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800edca:	60fb      	str	r3, [r7, #12]
 800edcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800edce:	2300      	movs	r3, #0
 800edd0:	60bb      	str	r3, [r7, #8]
 800edd2:	4b55      	ldr	r3, [pc, #340]	; (800ef28 <MX_GPIO_Init+0x1a8>)
 800edd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edd6:	4a54      	ldr	r2, [pc, #336]	; (800ef28 <MX_GPIO_Init+0x1a8>)
 800edd8:	f043 0301 	orr.w	r3, r3, #1
 800eddc:	6313      	str	r3, [r2, #48]	; 0x30
 800edde:	4b52      	ldr	r3, [pc, #328]	; (800ef28 <MX_GPIO_Init+0x1a8>)
 800ede0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ede2:	f003 0301 	and.w	r3, r3, #1
 800ede6:	60bb      	str	r3, [r7, #8]
 800ede8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800edea:	2300      	movs	r3, #0
 800edec:	607b      	str	r3, [r7, #4]
 800edee:	4b4e      	ldr	r3, [pc, #312]	; (800ef28 <MX_GPIO_Init+0x1a8>)
 800edf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edf2:	4a4d      	ldr	r2, [pc, #308]	; (800ef28 <MX_GPIO_Init+0x1a8>)
 800edf4:	f043 0302 	orr.w	r3, r3, #2
 800edf8:	6313      	str	r3, [r2, #48]	; 0x30
 800edfa:	4b4b      	ldr	r3, [pc, #300]	; (800ef28 <MX_GPIO_Init+0x1a8>)
 800edfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edfe:	f003 0302 	and.w	r3, r3, #2
 800ee02:	607b      	str	r3, [r7, #4]
 800ee04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800ee06:	2300      	movs	r3, #0
 800ee08:	603b      	str	r3, [r7, #0]
 800ee0a:	4b47      	ldr	r3, [pc, #284]	; (800ef28 <MX_GPIO_Init+0x1a8>)
 800ee0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee0e:	4a46      	ldr	r2, [pc, #280]	; (800ef28 <MX_GPIO_Init+0x1a8>)
 800ee10:	f043 0308 	orr.w	r3, r3, #8
 800ee14:	6313      	str	r3, [r2, #48]	; 0x30
 800ee16:	4b44      	ldr	r3, [pc, #272]	; (800ef28 <MX_GPIO_Init+0x1a8>)
 800ee18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee1a:	f003 0308 	and.w	r3, r3, #8
 800ee1e:	603b      	str	r3, [r7, #0]
 800ee20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FLED2_RED_Pin|FLED2_GREEN_Pin|FLED2_BLUE_Pin|LED4_Pin, GPIO_PIN_RESET);
 800ee22:	2200      	movs	r2, #0
 800ee24:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 800ee28:	4840      	ldr	r0, [pc, #256]	; (800ef2c <MX_GPIO_Init+0x1ac>)
 800ee2a:	f7f3 fa6b 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, IR_L_Pin|IR_FL_Pin, GPIO_PIN_RESET);
 800ee2e:	2200      	movs	r2, #0
 800ee30:	2103      	movs	r1, #3
 800ee32:	483f      	ldr	r0, [pc, #252]	; (800ef30 <MX_GPIO_Init+0x1b0>)
 800ee34:	f7f3 fa66 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED6_Pin|VAT_ALERT_Pin|LED7_Pin|LED3_Pin 
 800ee38:	2200      	movs	r2, #0
 800ee3a:	f641 01fc 	movw	r1, #6396	; 0x18fc
 800ee3e:	483d      	ldr	r0, [pc, #244]	; (800ef34 <MX_GPIO_Init+0x1b4>)
 800ee40:	f7f3 fa60 	bl	8002304 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED1_Pin|IR_FR_Pin|IR_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_L_CCW_Pin|MOTOR_L_CW_Pin|MOTOR_L_R_STBY_Pin|MOTOR_R_CW_Pin 
 800ee44:	2200      	movs	r2, #0
 800ee46:	f647 41e2 	movw	r1, #31970	; 0x7ce2
 800ee4a:	483b      	ldr	r0, [pc, #236]	; (800ef38 <MX_GPIO_Init+0x1b8>)
 800ee4c:	f7f3 fa5a 	bl	8002304 <HAL_GPIO_WritePin>
                          |LED5_Pin|MOTOR_R_CCW_Pin|FLED1_BLUE_Pin|FLED1_RED_Pin 
                          |FLED1_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800ee50:	2200      	movs	r2, #0
 800ee52:	2104      	movs	r1, #4
 800ee54:	4839      	ldr	r0, [pc, #228]	; (800ef3c <MX_GPIO_Init+0x1bc>)
 800ee56:	f7f3 fa55 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FLED2_RED_Pin FLED2_GREEN_Pin FLED2_BLUE_Pin LED4_Pin */
  GPIO_InitStruct.Pin = FLED2_RED_Pin|FLED2_GREEN_Pin|FLED2_BLUE_Pin|LED4_Pin;
 800ee5a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800ee5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ee60:	2301      	movs	r3, #1
 800ee62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee64:	2300      	movs	r3, #0
 800ee66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ee68:	2300      	movs	r3, #0
 800ee6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ee6c:	f107 0314 	add.w	r3, r7, #20
 800ee70:	4619      	mov	r1, r3
 800ee72:	482e      	ldr	r0, [pc, #184]	; (800ef2c <MX_GPIO_Init+0x1ac>)
 800ee74:	f7f3 f894 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IR_L_Pin IR_FL_Pin */
  GPIO_InitStruct.Pin = IR_L_Pin|IR_FL_Pin;
 800ee78:	2303      	movs	r3, #3
 800ee7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ee7c:	2301      	movs	r3, #1
 800ee7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee80:	2300      	movs	r3, #0
 800ee82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ee84:	2300      	movs	r3, #0
 800ee86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800ee88:	f107 0314 	add.w	r3, r7, #20
 800ee8c:	4619      	mov	r1, r3
 800ee8e:	4828      	ldr	r0, [pc, #160]	; (800ef30 <MX_GPIO_Init+0x1b0>)
 800ee90:	f7f3 f886 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED6_Pin VAT_ALERT_Pin LED7_Pin LED3_Pin 
                           LED2_Pin LED1_Pin IR_FR_Pin IR_R_Pin */
  GPIO_InitStruct.Pin = LED6_Pin|VAT_ALERT_Pin|LED7_Pin|LED3_Pin 
 800ee94:	f641 03fc 	movw	r3, #6396	; 0x18fc
 800ee98:	617b      	str	r3, [r7, #20]
                          |LED2_Pin|LED1_Pin|IR_FR_Pin|IR_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ee9a:	2301      	movs	r3, #1
 800ee9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eea2:	2300      	movs	r3, #0
 800eea4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eea6:	f107 0314 	add.w	r3, r7, #20
 800eeaa:	4619      	mov	r1, r3
 800eeac:	4821      	ldr	r0, [pc, #132]	; (800ef34 <MX_GPIO_Init+0x1b4>)
 800eeae:	f7f3 f877 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_L_CCW_Pin MOTOR_L_CW_Pin MOTOR_L_R_STBY_Pin MOTOR_R_CW_Pin 
                           LED5_Pin MOTOR_R_CCW_Pin FLED1_BLUE_Pin FLED1_RED_Pin 
                           FLED1_GREEN_Pin */
  GPIO_InitStruct.Pin = MOTOR_L_CCW_Pin|MOTOR_L_CW_Pin|MOTOR_L_R_STBY_Pin|MOTOR_R_CW_Pin 
 800eeb2:	f647 43e2 	movw	r3, #31970	; 0x7ce2
 800eeb6:	617b      	str	r3, [r7, #20]
                          |LED5_Pin|MOTOR_R_CCW_Pin|FLED1_BLUE_Pin|FLED1_RED_Pin 
                          |FLED1_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800eeb8:	2301      	movs	r3, #1
 800eeba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eebc:	2300      	movs	r3, #0
 800eebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eec0:	2300      	movs	r3, #0
 800eec2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800eec4:	f107 0314 	add.w	r3, r7, #20
 800eec8:	4619      	mov	r1, r3
 800eeca:	481b      	ldr	r0, [pc, #108]	; (800ef38 <MX_GPIO_Init+0x1b8>)
 800eecc:	f7f3 f868 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VOL_CHECK_Pin */
  GPIO_InitStruct.Pin = VOL_CHECK_Pin;
 800eed0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eed4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800eed6:	2300      	movs	r3, #0
 800eed8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800eeda:	2301      	movs	r3, #1
 800eedc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VOL_CHECK_GPIO_Port, &GPIO_InitStruct);
 800eede:	f107 0314 	add.w	r3, r7, #20
 800eee2:	4619      	mov	r1, r3
 800eee4:	4811      	ldr	r0, [pc, #68]	; (800ef2c <MX_GPIO_Init+0x1ac>)
 800eee6:	f7f3 f85b 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PUSH_IN_Pin */
  GPIO_InitStruct.Pin = PUSH_IN_Pin;
 800eeea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eeee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800eef0:	2300      	movs	r3, #0
 800eef2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eef4:	2300      	movs	r3, #0
 800eef6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PUSH_IN_GPIO_Port, &GPIO_InitStruct);
 800eef8:	f107 0314 	add.w	r3, r7, #20
 800eefc:	4619      	mov	r1, r3
 800eefe:	480d      	ldr	r0, [pc, #52]	; (800ef34 <MX_GPIO_Init+0x1b4>)
 800ef00:	f7f3 f84e 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 800ef04:	2304      	movs	r3, #4
 800ef06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ef08:	2301      	movs	r3, #1
 800ef0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ef10:	2300      	movs	r3, #0
 800ef12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 800ef14:	f107 0314 	add.w	r3, r7, #20
 800ef18:	4619      	mov	r1, r3
 800ef1a:	4808      	ldr	r0, [pc, #32]	; (800ef3c <MX_GPIO_Init+0x1bc>)
 800ef1c:	f7f3 f840 	bl	8001fa0 <HAL_GPIO_Init>

}
 800ef20:	bf00      	nop
 800ef22:	3728      	adds	r7, #40	; 0x28
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}
 800ef28:	40023800 	.word	0x40023800
 800ef2c:	40020800 	.word	0x40020800
 800ef30:	40021c00 	.word	0x40021c00
 800ef34:	40020000 	.word	0x40020000
 800ef38:	40020400 	.word	0x40020400
 800ef3c:	40020c00 	.word	0x40020c00

0800ef40 <buzzer>:

/* USER CODE BEGIN 4 */
void buzzer(int sound, int length){
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b08a      	sub	sp, #40	; 0x28
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
 800ef48:	6039      	str	r1, [r7, #0]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ef4a:	2360      	movs	r3, #96	; 0x60
 800ef4c:	60fb      	str	r3, [r7, #12]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ef4e:	2300      	movs	r3, #0
 800ef50:	617b      	str	r3, [r7, #20]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ef52:	2300      	movs	r3, #0
 800ef54:	61fb      	str	r3, [r7, #28]

	hz = 1000000 / sound;
 800ef56:	4a15      	ldr	r2, [pc, #84]	; (800efac <buzzer+0x6c>)
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	fb92 f3f3 	sdiv	r3, r2, r3
 800ef5e:	4a14      	ldr	r2, [pc, #80]	; (800efb0 <buzzer+0x70>)
 800ef60:	6013      	str	r3, [r2, #0]
	TIM3 -> ARR = hz;
 800ef62:	4b13      	ldr	r3, [pc, #76]	; (800efb0 <buzzer+0x70>)
 800ef64:	681a      	ldr	r2, [r3, #0]
 800ef66:	4b13      	ldr	r3, [pc, #76]	; (800efb4 <buzzer+0x74>)
 800ef68:	62da      	str	r2, [r3, #44]	; 0x2c
    ConfigOC.Pulse = hz / 10;
 800ef6a:	4b11      	ldr	r3, [pc, #68]	; (800efb0 <buzzer+0x70>)
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	4a12      	ldr	r2, [pc, #72]	; (800efb8 <buzzer+0x78>)
 800ef70:	fb82 1203 	smull	r1, r2, r2, r3
 800ef74:	1092      	asrs	r2, r2, #2
 800ef76:	17db      	asrs	r3, r3, #31
 800ef78:	1ad3      	subs	r3, r2, r3
 800ef7a:	613b      	str	r3, [r7, #16]
    HAL_TIM_PWM_ConfigChannel(&htim4, &ConfigOC, TIM_CHANNEL_3);
 800ef7c:	f107 030c 	add.w	r3, r7, #12
 800ef80:	2208      	movs	r2, #8
 800ef82:	4619      	mov	r1, r3
 800ef84:	480d      	ldr	r0, [pc, #52]	; (800efbc <buzzer+0x7c>)
 800ef86:	f7f4 fe17 	bl	8003bb8 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800ef8a:	2108      	movs	r1, #8
 800ef8c:	480b      	ldr	r0, [pc, #44]	; (800efbc <buzzer+0x7c>)
 800ef8e:	f7f4 fbab 	bl	80036e8 <HAL_TIM_PWM_Start>

	HAL_Delay(length);
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	4618      	mov	r0, r3
 800ef96:	f7f2 f841 	bl	800101c <HAL_Delay>
    HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 800ef9a:	2108      	movs	r1, #8
 800ef9c:	4807      	ldr	r0, [pc, #28]	; (800efbc <buzzer+0x7c>)
 800ef9e:	f7f4 fbe1 	bl	8003764 <HAL_TIM_PWM_Stop>
}
 800efa2:	bf00      	nop
 800efa4:	3728      	adds	r7, #40	; 0x28
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd80      	pop	{r7, pc}
 800efaa:	bf00      	nop
 800efac:	000f4240 	.word	0x000f4240
 800efb0:	200002c4 	.word	0x200002c4
 800efb4:	40000400 	.word	0x40000400
 800efb8:	66666667 	.word	0x66666667
 800efbc:	2000030c 	.word	0x2000030c

0800efc0 <get_adc_value>:


int get_adc_value(ADC_HandleTypeDef *hadc, uint32_t channel){
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b086      	sub	sp, #24
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
 800efc8:	6039      	str	r1, [r7, #0]

  ADC_ChannelConfTypeDef sConfig = {0};
 800efca:	f107 0308 	add.w	r3, r7, #8
 800efce:	2200      	movs	r2, #0
 800efd0:	601a      	str	r2, [r3, #0]
 800efd2:	605a      	str	r2, [r3, #4]
 800efd4:	609a      	str	r2, [r3, #8]
 800efd6:	60da      	str	r2, [r3, #12]

  sConfig.Channel = channel;
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 800efdc:	2301      	movs	r3, #1
 800efde:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800efe0:	2300      	movs	r3, #0
 800efe2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800efe4:	2300      	movs	r3, #0
 800efe6:	617b      	str	r3, [r7, #20]

  HAL_ADC_ConfigChannel(hadc, &sConfig);
 800efe8:	f107 0308 	add.w	r3, r7, #8
 800efec:	4619      	mov	r1, r3
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	f7f2 f9d2 	bl	8001398 <HAL_ADC_ConfigChannel>

  HAL_ADC_Start(hadc);                    //
 800eff4:	6878      	ldr	r0, [r7, #4]
 800eff6:	f7f2 f877 	bl	80010e8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 100);   //wait for ADC
 800effa:	2164      	movs	r1, #100	; 0x64
 800effc:	6878      	ldr	r0, [r7, #4]
 800effe:	f7f2 f939 	bl	8001274 <HAL_ADC_PollForConversion>
  return HAL_ADC_GetValue(hadc);          //
 800f002:	6878      	ldr	r0, [r7, #4]
 800f004:	f7f2 f9ba 	bl	800137c <HAL_ADC_GetValue>
 800f008:	4603      	mov	r3, r0
}
 800f00a:	4618      	mov	r0, r3
 800f00c:	3718      	adds	r7, #24
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}

0800f012 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800f012:	b480      	push	{r7}
 800f014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800f016:	bf00      	nop
 800f018:	46bd      	mov	sp, r7
 800f01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01e:	4770      	bx	lr

0800f020 <search_init>:

#include "global.h"

void search_init(void){
 800f020:	b580      	push	{r7, lr}
 800f022:	af00      	add	r7, sp, #0

	//----a探索系----
	goal_x = GOAL_X;        		//GOAL_Xはglobal.hにマクロ定義あり
 800f024:	4b09      	ldr	r3, [pc, #36]	; (800f04c <search_init+0x2c>)
 800f026:	2207      	movs	r2, #7
 800f028:	701a      	strb	r2, [r3, #0]
	goal_y = GOAL_Y;        		//GOAL_Yはglobal.hにマクロ定義あり
 800f02a:	4b09      	ldr	r3, [pc, #36]	; (800f050 <search_init+0x30>)
 800f02c:	2207      	movs	r2, #7
 800f02e:	701a      	strb	r2, [r3, #0]
	map_Init();						//aマップの初期化
 800f030:	f001 f852 	bl	80100d8 <map_Init>
	mouse.x = 0;
 800f034:	4b07      	ldr	r3, [pc, #28]	; (800f054 <search_init+0x34>)
 800f036:	2200      	movs	r2, #0
 800f038:	701a      	strb	r2, [r3, #0]
	mouse.y = 0;					//a現在地の初期化
 800f03a:	4b06      	ldr	r3, [pc, #24]	; (800f054 <search_init+0x34>)
 800f03c:	2200      	movs	r2, #0
 800f03e:	705a      	strb	r2, [r3, #1]
	mouse.dir = 0;					//aマウスの向きの初期化
 800f040:	4b04      	ldr	r3, [pc, #16]	; (800f054 <search_init+0x34>)
 800f042:	2200      	movs	r2, #0
 800f044:	709a      	strb	r2, [r3, #2]
}
 800f046:	bf00      	nop
 800f048:	bd80      	pop	{r7, pc}
 800f04a:	bf00      	nop
 800f04c:	20000c30 	.word	0x20000c30
 800f050:	20000b8c 	.word	0x20000b8c
 800f054:	20000c8c 	.word	0x20000c8c

0800f058 <searchC>:
//searchC
//aスラローム走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchC(){
 800f058:	b590      	push	{r4, r7, lr}
 800f05a:	b083      	sub	sp, #12
 800f05c:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800f05e:	4bab      	ldr	r3, [pc, #684]	; (800f30c <searchC+0x2b4>)
 800f060:	881b      	ldrh	r3, [r3, #0]
 800f062:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f066:	b2db      	uxtb	r3, r3
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d001      	beq.n	800f070 <searchC+0x18>
		load_map_from_eeprom();
 800f06c:	f002 ff70 	bl	8011f50 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(!MF.FLAG.SCND)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800f070:	4ba6      	ldr	r3, [pc, #664]	; (800f30c <searchC+0x2b4>)
 800f072:	881b      	ldrh	r3, [r3, #0]
 800f074:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f078:	b2db      	uxtb	r3, r3
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d101      	bne.n	800f082 <searchC+0x2a>
 800f07e:	f002 ffdf 	bl	8012040 <get_wall_info>
	if(!MF.FLAG.SCND)wall_info &= ~0x88;									//a前壁は存在するはずがないので削除する
 800f082:	4ba2      	ldr	r3, [pc, #648]	; (800f30c <searchC+0x2b4>)
 800f084:	881b      	ldrh	r3, [r3, #0]
 800f086:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f08a:	b2db      	uxtb	r3, r3
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d106      	bne.n	800f09e <searchC+0x46>
 800f090:	4b9f      	ldr	r3, [pc, #636]	; (800f310 <searchC+0x2b8>)
 800f092:	781b      	ldrb	r3, [r3, #0]
 800f094:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800f098:	b2da      	uxtb	r2, r3
 800f09a:	4b9d      	ldr	r3, [pc, #628]	; (800f310 <searchC+0x2b8>)
 800f09c:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800f09e:	4b9b      	ldr	r3, [pc, #620]	; (800f30c <searchC+0x2b4>)
 800f0a0:	881b      	ldrh	r3, [r3, #0]
 800f0a2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f0a6:	b2db      	uxtb	r3, r3
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d101      	bne.n	800f0b0 <searchC+0x58>
 800f0ac:	f001 f880 	bl	80101b0 <write_map>

	if(MF2.FLAG.GOAL){
 800f0b0:	4b98      	ldr	r3, [pc, #608]	; (800f314 <searchC+0x2bc>)
 800f0b2:	881b      	ldrh	r3, [r3, #0]
 800f0b4:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800f0b8:	b2db      	uxtb	r3, r3
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d00b      	beq.n	800f0d6 <searchC+0x7e>
//		HAL_Delay(500);
		rotate_180();											//180度回転
 800f0be:	f7f7 fb8b 	bl	80067d8 <rotate_180>
//		driveC2(SETPOS_BACK);         							//a尻を当てる程度に後退。回転後に停止する
//		degree_z = target_degree_z;
//		start_mode = 0;
		start_mode = 1;
 800f0c2:	4b95      	ldr	r3, [pc, #596]	; (800f318 <searchC+0x2c0>)
 800f0c4:	2201      	movs	r2, #1
 800f0c6:	701a      	strb	r2, [r3, #0]
		goal_mode = 1;
 800f0c8:	4b94      	ldr	r3, [pc, #592]	; (800f31c <searchC+0x2c4>)
 800f0ca:	2201      	movs	r2, #1
 800f0cc:	701a      	strb	r2, [r3, #0]
		HAL_Delay(500);
 800f0ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f0d2:	f7f1 ffa3 	bl	800101c <HAL_Delay>
	if(!MF.FLAG.SCND || !MF2.FLAG.GOAL)wall_info &= ~0x88;					//a前壁は存在するはずがないので削除する
	if(!MF.FLAG.SCND || !MF2.FLAG.GOAL)write_map();							//a壁情報を地図に記入
*/

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800f0d6:	f7f6 fc97 	bl	8005a08 <start_sectionA>
	adv_pos();
 800f0da:	f000 ffa5 	bl	8010028 <adv_pos>

	//====a歩数マップ・経路作成====
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800f0de:	4b8b      	ldr	r3, [pc, #556]	; (800f30c <searchC+0x2b4>)
 800f0e0:	881b      	ldrh	r3, [r3, #0]
 800f0e2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f0e6:	b2db      	uxtb	r3, r3
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d101      	bne.n	800f0f0 <searchC+0x98>
 800f0ec:	f001 f860 	bl	80101b0 <write_map>
	r_cnt = 0;																//a経路カウンタの初期化
 800f0f0:	4b8b      	ldr	r3, [pc, #556]	; (800f320 <searchC+0x2c8>)
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	701a      	strb	r2, [r3, #0]
	make_smap();															//a歩数マップ作成
 800f0f6:	f001 fa4f 	bl	8010598 <make_smap>
	make_route();															//a最短経路探索（route配列に動作が格納される）
 800f0fa:	f001 fe0b 	bl	8010d14 <make_route>
	uint8_t x, y;															//X，Y座標

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){												//route配列によって進行を決定。経路カウンタを進める
 800f0fe:	4b88      	ldr	r3, [pc, #544]	; (800f320 <searchC+0x2c8>)
 800f100:	781b      	ldrb	r3, [r3, #0]
 800f102:	1c5a      	adds	r2, r3, #1
 800f104:	b2d1      	uxtb	r1, r2
 800f106:	4a86      	ldr	r2, [pc, #536]	; (800f320 <searchC+0x2c8>)
 800f108:	7011      	strb	r1, [r2, #0]
 800f10a:	461a      	mov	r2, r3
 800f10c:	4b85      	ldr	r3, [pc, #532]	; (800f324 <searchC+0x2cc>)
 800f10e:	5c9b      	ldrb	r3, [r3, r2]
 800f110:	2b22      	cmp	r3, #34	; 0x22
 800f112:	d07f      	beq.n	800f214 <searchC+0x1bc>
 800f114:	2b22      	cmp	r3, #34	; 0x22
 800f116:	dc03      	bgt.n	800f120 <searchC+0xc8>
 800f118:	2b11      	cmp	r3, #17
 800f11a:	f000 808b 	beq.w	800f234 <searchC+0x1dc>
 800f11e:	e08c      	b.n	800f23a <searchC+0x1e2>
 800f120:	2b44      	cmp	r3, #68	; 0x44
 800f122:	d074      	beq.n	800f20e <searchC+0x1b6>
 800f124:	2b88      	cmp	r3, #136	; 0x88
 800f126:	f040 8088 	bne.w	800f23a <searchC+0x1e2>
			//----a前進----
			case 0x88:
				if(route[r_cnt] == 0x88 && MF.FLAG.ACCL2){
 800f12a:	4b7d      	ldr	r3, [pc, #500]	; (800f320 <searchC+0x2c8>)
 800f12c:	781b      	ldrb	r3, [r3, #0]
 800f12e:	461a      	mov	r2, r3
 800f130:	4b7c      	ldr	r3, [pc, #496]	; (800f324 <searchC+0x2cc>)
 800f132:	5c9b      	ldrb	r3, [r3, r2]
 800f134:	2b88      	cmp	r3, #136	; 0x88
 800f136:	d158      	bne.n	800f1ea <searchC+0x192>
 800f138:	4b74      	ldr	r3, [pc, #464]	; (800f30c <searchC+0x2b4>)
 800f13a:	881b      	ldrh	r3, [r3, #0]
 800f13c:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800f140:	b2db      	uxtb	r3, r3
 800f142:	2b00      	cmp	r3, #0
 800f144:	d051      	beq.n	800f1ea <searchC+0x192>
					x = mouse.x;
 800f146:	4b78      	ldr	r3, [pc, #480]	; (800f328 <searchC+0x2d0>)
 800f148:	781b      	ldrb	r3, [r3, #0]
 800f14a:	70fb      	strb	r3, [r7, #3]
					y = mouse.y;
 800f14c:	4b76      	ldr	r3, [pc, #472]	; (800f328 <searchC+0x2d0>)
 800f14e:	785b      	ldrb	r3, [r3, #1]
 800f150:	70bb      	strb	r3, [r7, #2]
					adv_pos();
 800f152:	f000 ff69 	bl	8010028 <adv_pos>
					if((map[mouse.y][mouse.x] & 0x0f) == (map[mouse.y][mouse.x]>>4)){
 800f156:	4b74      	ldr	r3, [pc, #464]	; (800f328 <searchC+0x2d0>)
 800f158:	785b      	ldrb	r3, [r3, #1]
 800f15a:	b2db      	uxtb	r3, r3
 800f15c:	4618      	mov	r0, r3
 800f15e:	4b72      	ldr	r3, [pc, #456]	; (800f328 <searchC+0x2d0>)
 800f160:	781b      	ldrb	r3, [r3, #0]
 800f162:	b2db      	uxtb	r3, r3
 800f164:	4619      	mov	r1, r3
 800f166:	4a71      	ldr	r2, [pc, #452]	; (800f32c <searchC+0x2d4>)
 800f168:	0103      	lsls	r3, r0, #4
 800f16a:	4413      	add	r3, r2
 800f16c:	440b      	add	r3, r1
 800f16e:	781b      	ldrb	r3, [r3, #0]
 800f170:	f003 030f 	and.w	r3, r3, #15
 800f174:	4a6c      	ldr	r2, [pc, #432]	; (800f328 <searchC+0x2d0>)
 800f176:	7852      	ldrb	r2, [r2, #1]
 800f178:	b2d2      	uxtb	r2, r2
 800f17a:	4614      	mov	r4, r2
 800f17c:	4a6a      	ldr	r2, [pc, #424]	; (800f328 <searchC+0x2d0>)
 800f17e:	7812      	ldrb	r2, [r2, #0]
 800f180:	b2d2      	uxtb	r2, r2
 800f182:	4610      	mov	r0, r2
 800f184:	4969      	ldr	r1, [pc, #420]	; (800f32c <searchC+0x2d4>)
 800f186:	0122      	lsls	r2, r4, #4
 800f188:	440a      	add	r2, r1
 800f18a:	4402      	add	r2, r0
 800f18c:	7812      	ldrb	r2, [r2, #0]
 800f18e:	0912      	lsrs	r2, r2, #4
 800f190:	b2d2      	uxtb	r2, r2
 800f192:	4293      	cmp	r3, r2
 800f194:	d111      	bne.n	800f1ba <searchC+0x162>
						if(!MF2.FLAG.HACCEL){
 800f196:	4b5f      	ldr	r3, [pc, #380]	; (800f314 <searchC+0x2bc>)
 800f198:	881b      	ldrh	r3, [r3, #0]
 800f19a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f19e:	b2db      	uxtb	r3, r3
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d107      	bne.n	800f1b4 <searchC+0x15c>
							one_sectionA();
 800f1a4:	f7f6 ff02 	bl	8005fac <one_sectionA>
							MF2.FLAG.HACCEL = 1;
 800f1a8:	4a5a      	ldr	r2, [pc, #360]	; (800f314 <searchC+0x2bc>)
 800f1aa:	8813      	ldrh	r3, [r2, #0]
 800f1ac:	f043 0302 	orr.w	r3, r3, #2
 800f1b0:	8013      	strh	r3, [r2, #0]
 800f1b2:	e013      	b.n	800f1dc <searchC+0x184>
						}else{
							one_sectionU();
 800f1b4:	f7f7 f93e 	bl	8006434 <one_sectionU>
 800f1b8:	e010      	b.n	800f1dc <searchC+0x184>
						}
					}else if(MF2.FLAG.HACCEL){
 800f1ba:	4b56      	ldr	r3, [pc, #344]	; (800f314 <searchC+0x2bc>)
 800f1bc:	881b      	ldrh	r3, [r3, #0]
 800f1be:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f1c2:	b2db      	uxtb	r3, r3
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d007      	beq.n	800f1d8 <searchC+0x180>
						one_sectionD();
 800f1c8:	f7f6 ff7a 	bl	80060c0 <one_sectionD>
						MF2.FLAG.HACCEL = 0;
 800f1cc:	4a51      	ldr	r2, [pc, #324]	; (800f314 <searchC+0x2bc>)
 800f1ce:	8813      	ldrh	r3, [r2, #0]
 800f1d0:	f36f 0341 	bfc	r3, #1, #1
 800f1d4:	8013      	strh	r3, [r2, #0]
 800f1d6:	e001      	b.n	800f1dc <searchC+0x184>
					}else{
						one_sectionU();
 800f1d8:	f7f7 f92c 	bl	8006434 <one_sectionU>
					}
					mouse.x = x;
 800f1dc:	4a52      	ldr	r2, [pc, #328]	; (800f328 <searchC+0x2d0>)
 800f1de:	78fb      	ldrb	r3, [r7, #3]
 800f1e0:	7013      	strb	r3, [r2, #0]
					mouse.y = y;
 800f1e2:	4a51      	ldr	r2, [pc, #324]	; (800f328 <searchC+0x2d0>)
 800f1e4:	78bb      	ldrb	r3, [r7, #2]
 800f1e6:	7053      	strb	r3, [r2, #1]
					one_sectionD();
					MF2.FLAG.HACCEL = 0;
				}else{
					one_sectionU();
				}
				break;
 800f1e8:	e027      	b.n	800f23a <searchC+0x1e2>
				}else if(MF2.FLAG.HACCEL){
 800f1ea:	4b4a      	ldr	r3, [pc, #296]	; (800f314 <searchC+0x2bc>)
 800f1ec:	881b      	ldrh	r3, [r3, #0]
 800f1ee:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f1f2:	b2db      	uxtb	r3, r3
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d007      	beq.n	800f208 <searchC+0x1b0>
					one_sectionD();
 800f1f8:	f7f6 ff62 	bl	80060c0 <one_sectionD>
					MF2.FLAG.HACCEL = 0;
 800f1fc:	4a45      	ldr	r2, [pc, #276]	; (800f314 <searchC+0x2bc>)
 800f1fe:	8813      	ldrh	r3, [r2, #0]
 800f200:	f36f 0341 	bfc	r3, #1, #1
 800f204:	8013      	strh	r3, [r2, #0]
				break;
 800f206:	e018      	b.n	800f23a <searchC+0x1e2>
					one_sectionU();
 800f208:	f7f7 f914 	bl	8006434 <one_sectionU>
				break;
 800f20c:	e015      	b.n	800f23a <searchC+0x1e2>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 800f20e:	f7f7 fbbb 	bl	8006988 <slalom_R90>
				break;
 800f212:	e012      	b.n	800f23a <searchC+0x1e2>
			//----180回転----
			case 0x22:
				half_sectionD();
 800f214:	f7f6 fd90 	bl	8005d38 <half_sectionD>
				rotate_180();
 800f218:	f7f7 fade 	bl	80067d8 <rotate_180>
				if(wall_info & 0x88){
 800f21c:	4b3c      	ldr	r3, [pc, #240]	; (800f310 <searchC+0x2b8>)
 800f21e:	781b      	ldrb	r3, [r3, #0]
 800f220:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800f224:	2b00      	cmp	r3, #0
 800f226:	d002      	beq.n	800f22e <searchC+0x1d6>
					set_position();
 800f228:	f7f6 fbba 	bl	80059a0 <set_position>
				}else{
					half_sectionA();
				}
				break;
 800f22c:	e005      	b.n	800f23a <searchC+0x1e2>
					half_sectionA();
 800f22e:	f7f6 fd1d 	bl	8005c6c <half_sectionA>
				break;
 800f232:	e002      	b.n	800f23a <searchC+0x1e2>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800f234:	f7f7 fd0a 	bl	8006c4c <slalom_L90>
				break;
 800f238:	bf00      	nop
		}
		adv_pos();
 800f23a:	f000 fef5 	bl	8010028 <adv_pos>
		if(!MF.FLAG.SCND)conf_route();
 800f23e:	4b33      	ldr	r3, [pc, #204]	; (800f30c <searchC+0x2b4>)
 800f240:	881b      	ldrh	r3, [r3, #0]
 800f242:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f246:	b2db      	uxtb	r3, r3
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d101      	bne.n	800f250 <searchC+0x1f8>
 800f24c:	f000 ff26 	bl	801009c <conf_route>

//	}while((mouse.x != goal_x) || (mouse.y != goal_y));
	}while(smap[mouse.y][mouse.x] != 0);
 800f250:	4b35      	ldr	r3, [pc, #212]	; (800f328 <searchC+0x2d0>)
 800f252:	785b      	ldrb	r3, [r3, #1]
 800f254:	b2db      	uxtb	r3, r3
 800f256:	4618      	mov	r0, r3
 800f258:	4b33      	ldr	r3, [pc, #204]	; (800f328 <searchC+0x2d0>)
 800f25a:	781b      	ldrb	r3, [r3, #0]
 800f25c:	b2db      	uxtb	r3, r3
 800f25e:	4619      	mov	r1, r3
 800f260:	4a33      	ldr	r2, [pc, #204]	; (800f330 <searchC+0x2d8>)
 800f262:	0103      	lsls	r3, r0, #4
 800f264:	440b      	add	r3, r1
 800f266:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	f47f af47 	bne.w	800f0fe <searchC+0xa6>

	for(int j=0; j<goal_mode-1; j++){
 800f270:	2300      	movs	r3, #0
 800f272:	607b      	str	r3, [r7, #4]
 800f274:	e006      	b.n	800f284 <searchC+0x22c>
		one_sectionU();
 800f276:	f7f7 f8dd 	bl	8006434 <one_sectionU>
		adv_pos();
 800f27a:	f000 fed5 	bl	8010028 <adv_pos>
	for(int j=0; j<goal_mode-1; j++){
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	3301      	adds	r3, #1
 800f282:	607b      	str	r3, [r7, #4]
 800f284:	4b25      	ldr	r3, [pc, #148]	; (800f31c <searchC+0x2c4>)
 800f286:	781b      	ldrb	r3, [r3, #0]
 800f288:	3b01      	subs	r3, #1
 800f28a:	687a      	ldr	r2, [r7, #4]
 800f28c:	429a      	cmp	r2, r3
 800f28e:	dbf2      	blt.n	800f276 <searchC+0x21e>
	}
	half_sectionD();
 800f290:	f7f6 fd52 	bl	8005d38 <half_sectionD>

	set_positionF();
 800f294:	f7f6 fb9a 	bl	80059cc <set_positionF>

	MF2.FLAG.GOAL = (MF2.FLAG.GOAL+1)%2;
 800f298:	4b1e      	ldr	r3, [pc, #120]	; (800f314 <searchC+0x2bc>)
 800f29a:	881b      	ldrh	r3, [r3, #0]
 800f29c:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800f2a0:	b2db      	uxtb	r3, r3
 800f2a2:	3301      	adds	r3, #1
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	f003 0301 	and.w	r3, r3, #1
 800f2aa:	bfb8      	it	lt
 800f2ac:	425b      	neglt	r3, r3
 800f2ae:	f003 0301 	and.w	r3, r3, #1
 800f2b2:	b2d9      	uxtb	r1, r3
 800f2b4:	4a17      	ldr	r2, [pc, #92]	; (800f314 <searchC+0x2bc>)
 800f2b6:	8813      	ldrh	r3, [r2, #0]
 800f2b8:	f361 2308 	bfi	r3, r1, #8, #1
 800f2bc:	8013      	strh	r3, [r2, #0]
	if(!MF2.FLAG.GOAL){
 800f2be:	4b15      	ldr	r3, [pc, #84]	; (800f314 <searchC+0x2bc>)
 800f2c0:	881b      	ldrh	r3, [r3, #0]
 800f2c2:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800f2c6:	b2db      	uxtb	r3, r3
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d112      	bne.n	800f2f2 <searchC+0x29a>
		HAL_Delay(500);
 800f2cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f2d0:	f7f1 fea4 	bl	800101c <HAL_Delay>
		rotate_180();										//180度回転
 800f2d4:	f7f7 fa80 	bl	80067d8 <rotate_180>
		driveC2(SETPOS_BACK);         						//a尻を当てる程度に後退。回転後に停止する
 800f2d8:	2064      	movs	r0, #100	; 0x64
 800f2da:	f7f6 f8e3 	bl	80054a4 <driveC2>
		degree_z = target_degree_z;
 800f2de:	4b15      	ldr	r3, [pc, #84]	; (800f334 <searchC+0x2dc>)
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	4a15      	ldr	r2, [pc, #84]	; (800f338 <searchC+0x2e0>)
 800f2e4:	6013      	str	r3, [r2, #0]
		start_mode = 0;
 800f2e6:	4b0c      	ldr	r3, [pc, #48]	; (800f318 <searchC+0x2c0>)
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	701a      	strb	r2, [r3, #0]
		goal_mode = 1;
 800f2ec:	4b0b      	ldr	r3, [pc, #44]	; (800f31c <searchC+0x2c4>)
 800f2ee:	2201      	movs	r2, #1
 800f2f0:	701a      	strb	r2, [r3, #0]
	}

	if(!MF.FLAG.SCND){
 800f2f2:	4b06      	ldr	r3, [pc, #24]	; (800f30c <searchC+0x2b4>)
 800f2f4:	881b      	ldrh	r3, [r3, #0]
 800f2f6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f2fa:	b2db      	uxtb	r3, r3
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d101      	bne.n	800f304 <searchC+0x2ac>
		store_map_in_eeprom();
 800f300:	f002 fdec 	bl	8011edc <store_map_in_eeprom>
	}
}
 800f304:	bf00      	nop
 800f306:	370c      	adds	r7, #12
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd90      	pop	{r4, r7, pc}
 800f30c:	20000fa8 	.word	0x20000fa8
 800f310:	200002c8 	.word	0x200002c8
 800f314:	20000fa4 	.word	0x20000fa4
 800f318:	2000164c 	.word	0x2000164c
 800f31c:	20000c31 	.word	0x20000c31
 800f320:	20001654 	.word	0x20001654
 800f324:	20000c94 	.word	0x20000c94
 800f328:	20000c8c 	.word	0x20000c8c
 800f32c:	200001ac 	.word	0x200001ac
 800f330:	20000da0 	.word	0x20000da0
 800f334:	20000c78 	.word	0x20000c78
 800f338:	20000b9c 	.word	0x20000b9c

0800f33c <searchC2>:
//searchC2
//aスラローム走行でgoal座標に進む　重ね探索用
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchC2(){
 800f33c:	b590      	push	{r4, r7, lr}
 800f33e:	b083      	sub	sp, #12
 800f340:	af00      	add	r7, sp, #0

	if(MF.FLAG.SRC2){
 800f342:	4bab      	ldr	r3, [pc, #684]	; (800f5f0 <searchC2+0x2b4>)
 800f344:	881b      	ldrh	r3, [r3, #0]
 800f346:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800f34a:	b2db      	uxtb	r3, r3
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d001      	beq.n	800f354 <searchC2+0x18>
		load_map_from_eeprom();
 800f350:	f002 fdfe 	bl	8011f50 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(!MF.FLAG.SCND)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800f354:	4ba6      	ldr	r3, [pc, #664]	; (800f5f0 <searchC2+0x2b4>)
 800f356:	881b      	ldrh	r3, [r3, #0]
 800f358:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f35c:	b2db      	uxtb	r3, r3
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d101      	bne.n	800f366 <searchC2+0x2a>
 800f362:	f002 fe6d 	bl	8012040 <get_wall_info>
	if(!MF.FLAG.SCND)wall_info &= ~0x88;									//a前壁は存在するはずがないので削除する
 800f366:	4ba2      	ldr	r3, [pc, #648]	; (800f5f0 <searchC2+0x2b4>)
 800f368:	881b      	ldrh	r3, [r3, #0]
 800f36a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f36e:	b2db      	uxtb	r3, r3
 800f370:	2b00      	cmp	r3, #0
 800f372:	d106      	bne.n	800f382 <searchC2+0x46>
 800f374:	4b9f      	ldr	r3, [pc, #636]	; (800f5f4 <searchC2+0x2b8>)
 800f376:	781b      	ldrb	r3, [r3, #0]
 800f378:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800f37c:	b2da      	uxtb	r2, r3
 800f37e:	4b9d      	ldr	r3, [pc, #628]	; (800f5f4 <searchC2+0x2b8>)
 800f380:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800f382:	4b9b      	ldr	r3, [pc, #620]	; (800f5f0 <searchC2+0x2b4>)
 800f384:	881b      	ldrh	r3, [r3, #0]
 800f386:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f38a:	b2db      	uxtb	r3, r3
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d101      	bne.n	800f394 <searchC2+0x58>
 800f390:	f000 ff0e 	bl	80101b0 <write_map>

	if(MF2.FLAG.GOAL){
 800f394:	4b98      	ldr	r3, [pc, #608]	; (800f5f8 <searchC2+0x2bc>)
 800f396:	881b      	ldrh	r3, [r3, #0]
 800f398:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800f39c:	b2db      	uxtb	r3, r3
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d00b      	beq.n	800f3ba <searchC2+0x7e>
		HAL_Delay(500);
 800f3a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f3a6:	f7f1 fe39 	bl	800101c <HAL_Delay>
		rotate_180();											//180度回転
 800f3aa:	f7f7 fa15 	bl	80067d8 <rotate_180>
//		driveC2(SETPOS_BACK);         							//a尻を当てる程度に後退。回転後に停止する
//		degree_z = target_degree_z;
//		start_mode = 0;
		start_mode = 1;
 800f3ae:	4b93      	ldr	r3, [pc, #588]	; (800f5fc <searchC2+0x2c0>)
 800f3b0:	2201      	movs	r2, #1
 800f3b2:	701a      	strb	r2, [r3, #0]
		goal_mode = 1;
 800f3b4:	4b92      	ldr	r3, [pc, #584]	; (800f600 <searchC2+0x2c4>)
 800f3b6:	2201      	movs	r2, #1
 800f3b8:	701a      	strb	r2, [r3, #0]
	}

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800f3ba:	f7f6 fb25 	bl	8005a08 <start_sectionA>
	adv_pos();
 800f3be:	f000 fe33 	bl	8010028 <adv_pos>

	//====a歩数マップ・経路作成====
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800f3c2:	4b8b      	ldr	r3, [pc, #556]	; (800f5f0 <searchC2+0x2b4>)
 800f3c4:	881b      	ldrh	r3, [r3, #0]
 800f3c6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f3ca:	b2db      	uxtb	r3, r3
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d101      	bne.n	800f3d4 <searchC2+0x98>
 800f3d0:	f000 feee 	bl	80101b0 <write_map>
	r_cnt = 0;																//a経路カウンタの初期化
 800f3d4:	4b8b      	ldr	r3, [pc, #556]	; (800f604 <searchC2+0x2c8>)
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	701a      	strb	r2, [r3, #0]
	make_smap();															//a歩数マップ作成
 800f3da:	f001 f8dd 	bl	8010598 <make_smap>
	make_route();															//a最短経路探索（route配列に動作が格納される）
 800f3de:	f001 fc99 	bl	8010d14 <make_route>
	uint8_t x, y;															//X，Y座標

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){												//route配列によって進行を決定。経路カウンタを進める
 800f3e2:	4b88      	ldr	r3, [pc, #544]	; (800f604 <searchC2+0x2c8>)
 800f3e4:	781b      	ldrb	r3, [r3, #0]
 800f3e6:	1c5a      	adds	r2, r3, #1
 800f3e8:	b2d1      	uxtb	r1, r2
 800f3ea:	4a86      	ldr	r2, [pc, #536]	; (800f604 <searchC2+0x2c8>)
 800f3ec:	7011      	strb	r1, [r2, #0]
 800f3ee:	461a      	mov	r2, r3
 800f3f0:	4b85      	ldr	r3, [pc, #532]	; (800f608 <searchC2+0x2cc>)
 800f3f2:	5c9b      	ldrb	r3, [r3, r2]
 800f3f4:	2b22      	cmp	r3, #34	; 0x22
 800f3f6:	d07f      	beq.n	800f4f8 <searchC2+0x1bc>
 800f3f8:	2b22      	cmp	r3, #34	; 0x22
 800f3fa:	dc03      	bgt.n	800f404 <searchC2+0xc8>
 800f3fc:	2b11      	cmp	r3, #17
 800f3fe:	f000 808b 	beq.w	800f518 <searchC2+0x1dc>
 800f402:	e08c      	b.n	800f51e <searchC2+0x1e2>
 800f404:	2b44      	cmp	r3, #68	; 0x44
 800f406:	d074      	beq.n	800f4f2 <searchC2+0x1b6>
 800f408:	2b88      	cmp	r3, #136	; 0x88
 800f40a:	f040 8088 	bne.w	800f51e <searchC2+0x1e2>
			//----a前進----
			case 0x88:
				if(route[r_cnt] == 0x88 && MF.FLAG.ACCL2){
 800f40e:	4b7d      	ldr	r3, [pc, #500]	; (800f604 <searchC2+0x2c8>)
 800f410:	781b      	ldrb	r3, [r3, #0]
 800f412:	461a      	mov	r2, r3
 800f414:	4b7c      	ldr	r3, [pc, #496]	; (800f608 <searchC2+0x2cc>)
 800f416:	5c9b      	ldrb	r3, [r3, r2]
 800f418:	2b88      	cmp	r3, #136	; 0x88
 800f41a:	d158      	bne.n	800f4ce <searchC2+0x192>
 800f41c:	4b74      	ldr	r3, [pc, #464]	; (800f5f0 <searchC2+0x2b4>)
 800f41e:	881b      	ldrh	r3, [r3, #0]
 800f420:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800f424:	b2db      	uxtb	r3, r3
 800f426:	2b00      	cmp	r3, #0
 800f428:	d051      	beq.n	800f4ce <searchC2+0x192>
					x = mouse.x;
 800f42a:	4b78      	ldr	r3, [pc, #480]	; (800f60c <searchC2+0x2d0>)
 800f42c:	781b      	ldrb	r3, [r3, #0]
 800f42e:	70fb      	strb	r3, [r7, #3]
					y = mouse.y;
 800f430:	4b76      	ldr	r3, [pc, #472]	; (800f60c <searchC2+0x2d0>)
 800f432:	785b      	ldrb	r3, [r3, #1]
 800f434:	70bb      	strb	r3, [r7, #2]
					adv_pos();
 800f436:	f000 fdf7 	bl	8010028 <adv_pos>
					if((map[mouse.y][mouse.x] & 0x0f) == (map[mouse.y][mouse.x]>>4)){
 800f43a:	4b74      	ldr	r3, [pc, #464]	; (800f60c <searchC2+0x2d0>)
 800f43c:	785b      	ldrb	r3, [r3, #1]
 800f43e:	b2db      	uxtb	r3, r3
 800f440:	4618      	mov	r0, r3
 800f442:	4b72      	ldr	r3, [pc, #456]	; (800f60c <searchC2+0x2d0>)
 800f444:	781b      	ldrb	r3, [r3, #0]
 800f446:	b2db      	uxtb	r3, r3
 800f448:	4619      	mov	r1, r3
 800f44a:	4a71      	ldr	r2, [pc, #452]	; (800f610 <searchC2+0x2d4>)
 800f44c:	0103      	lsls	r3, r0, #4
 800f44e:	4413      	add	r3, r2
 800f450:	440b      	add	r3, r1
 800f452:	781b      	ldrb	r3, [r3, #0]
 800f454:	f003 030f 	and.w	r3, r3, #15
 800f458:	4a6c      	ldr	r2, [pc, #432]	; (800f60c <searchC2+0x2d0>)
 800f45a:	7852      	ldrb	r2, [r2, #1]
 800f45c:	b2d2      	uxtb	r2, r2
 800f45e:	4614      	mov	r4, r2
 800f460:	4a6a      	ldr	r2, [pc, #424]	; (800f60c <searchC2+0x2d0>)
 800f462:	7812      	ldrb	r2, [r2, #0]
 800f464:	b2d2      	uxtb	r2, r2
 800f466:	4610      	mov	r0, r2
 800f468:	4969      	ldr	r1, [pc, #420]	; (800f610 <searchC2+0x2d4>)
 800f46a:	0122      	lsls	r2, r4, #4
 800f46c:	440a      	add	r2, r1
 800f46e:	4402      	add	r2, r0
 800f470:	7812      	ldrb	r2, [r2, #0]
 800f472:	0912      	lsrs	r2, r2, #4
 800f474:	b2d2      	uxtb	r2, r2
 800f476:	4293      	cmp	r3, r2
 800f478:	d111      	bne.n	800f49e <searchC2+0x162>
						if(!MF2.FLAG.HACCEL){
 800f47a:	4b5f      	ldr	r3, [pc, #380]	; (800f5f8 <searchC2+0x2bc>)
 800f47c:	881b      	ldrh	r3, [r3, #0]
 800f47e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f482:	b2db      	uxtb	r3, r3
 800f484:	2b00      	cmp	r3, #0
 800f486:	d107      	bne.n	800f498 <searchC2+0x15c>
							one_sectionA();
 800f488:	f7f6 fd90 	bl	8005fac <one_sectionA>
							MF2.FLAG.HACCEL = 1;
 800f48c:	4a5a      	ldr	r2, [pc, #360]	; (800f5f8 <searchC2+0x2bc>)
 800f48e:	8813      	ldrh	r3, [r2, #0]
 800f490:	f043 0302 	orr.w	r3, r3, #2
 800f494:	8013      	strh	r3, [r2, #0]
 800f496:	e013      	b.n	800f4c0 <searchC2+0x184>
						}else{
							one_sectionU();
 800f498:	f7f6 ffcc 	bl	8006434 <one_sectionU>
 800f49c:	e010      	b.n	800f4c0 <searchC2+0x184>
						}
					}else if(MF2.FLAG.HACCEL){
 800f49e:	4b56      	ldr	r3, [pc, #344]	; (800f5f8 <searchC2+0x2bc>)
 800f4a0:	881b      	ldrh	r3, [r3, #0]
 800f4a2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f4a6:	b2db      	uxtb	r3, r3
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d007      	beq.n	800f4bc <searchC2+0x180>
						one_sectionD();
 800f4ac:	f7f6 fe08 	bl	80060c0 <one_sectionD>
						MF2.FLAG.HACCEL = 0;
 800f4b0:	4a51      	ldr	r2, [pc, #324]	; (800f5f8 <searchC2+0x2bc>)
 800f4b2:	8813      	ldrh	r3, [r2, #0]
 800f4b4:	f36f 0341 	bfc	r3, #1, #1
 800f4b8:	8013      	strh	r3, [r2, #0]
 800f4ba:	e001      	b.n	800f4c0 <searchC2+0x184>
					}else{
						one_sectionU();
 800f4bc:	f7f6 ffba 	bl	8006434 <one_sectionU>
					}
					mouse.x = x;
 800f4c0:	4a52      	ldr	r2, [pc, #328]	; (800f60c <searchC2+0x2d0>)
 800f4c2:	78fb      	ldrb	r3, [r7, #3]
 800f4c4:	7013      	strb	r3, [r2, #0]
					mouse.y = y;
 800f4c6:	4a51      	ldr	r2, [pc, #324]	; (800f60c <searchC2+0x2d0>)
 800f4c8:	78bb      	ldrb	r3, [r7, #2]
 800f4ca:	7053      	strb	r3, [r2, #1]
					one_sectionD();
					MF2.FLAG.HACCEL = 0;
				}else{
					one_sectionU();
				}
				break;
 800f4cc:	e027      	b.n	800f51e <searchC2+0x1e2>
				}else if(MF2.FLAG.HACCEL){
 800f4ce:	4b4a      	ldr	r3, [pc, #296]	; (800f5f8 <searchC2+0x2bc>)
 800f4d0:	881b      	ldrh	r3, [r3, #0]
 800f4d2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f4d6:	b2db      	uxtb	r3, r3
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d007      	beq.n	800f4ec <searchC2+0x1b0>
					one_sectionD();
 800f4dc:	f7f6 fdf0 	bl	80060c0 <one_sectionD>
					MF2.FLAG.HACCEL = 0;
 800f4e0:	4a45      	ldr	r2, [pc, #276]	; (800f5f8 <searchC2+0x2bc>)
 800f4e2:	8813      	ldrh	r3, [r2, #0]
 800f4e4:	f36f 0341 	bfc	r3, #1, #1
 800f4e8:	8013      	strh	r3, [r2, #0]
				break;
 800f4ea:	e018      	b.n	800f51e <searchC2+0x1e2>
					one_sectionU();
 800f4ec:	f7f6 ffa2 	bl	8006434 <one_sectionU>
				break;
 800f4f0:	e015      	b.n	800f51e <searchC2+0x1e2>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 800f4f2:	f7f7 fa49 	bl	8006988 <slalom_R90>
				break;
 800f4f6:	e012      	b.n	800f51e <searchC2+0x1e2>
			//----180回転----
			case 0x22:
				half_sectionD();
 800f4f8:	f7f6 fc1e 	bl	8005d38 <half_sectionD>
				rotate_180();
 800f4fc:	f7f7 f96c 	bl	80067d8 <rotate_180>
				if(wall_info & 0x88){
 800f500:	4b3c      	ldr	r3, [pc, #240]	; (800f5f4 <searchC2+0x2b8>)
 800f502:	781b      	ldrb	r3, [r3, #0]
 800f504:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d002      	beq.n	800f512 <searchC2+0x1d6>
					set_position();
 800f50c:	f7f6 fa48 	bl	80059a0 <set_position>
				}else{
					half_sectionA();
				}
				break;
 800f510:	e005      	b.n	800f51e <searchC2+0x1e2>
					half_sectionA();
 800f512:	f7f6 fbab 	bl	8005c6c <half_sectionA>
				break;
 800f516:	e002      	b.n	800f51e <searchC2+0x1e2>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800f518:	f7f7 fb98 	bl	8006c4c <slalom_L90>
				break;
 800f51c:	bf00      	nop
		}
		adv_pos();
 800f51e:	f000 fd83 	bl	8010028 <adv_pos>
		if(!MF.FLAG.SCND)conf_route();
 800f522:	4b33      	ldr	r3, [pc, #204]	; (800f5f0 <searchC2+0x2b4>)
 800f524:	881b      	ldrh	r3, [r3, #0]
 800f526:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f52a:	b2db      	uxtb	r3, r3
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d101      	bne.n	800f534 <searchC2+0x1f8>
 800f530:	f000 fdb4 	bl	801009c <conf_route>

//	}while((mouse.x != goal_x) || (mouse.y != goal_y));
	}while(smap[mouse.y][mouse.x] != 0);
 800f534:	4b35      	ldr	r3, [pc, #212]	; (800f60c <searchC2+0x2d0>)
 800f536:	785b      	ldrb	r3, [r3, #1]
 800f538:	b2db      	uxtb	r3, r3
 800f53a:	4618      	mov	r0, r3
 800f53c:	4b33      	ldr	r3, [pc, #204]	; (800f60c <searchC2+0x2d0>)
 800f53e:	781b      	ldrb	r3, [r3, #0]
 800f540:	b2db      	uxtb	r3, r3
 800f542:	4619      	mov	r1, r3
 800f544:	4a33      	ldr	r2, [pc, #204]	; (800f614 <searchC2+0x2d8>)
 800f546:	0103      	lsls	r3, r0, #4
 800f548:	440b      	add	r3, r1
 800f54a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	f47f af47 	bne.w	800f3e2 <searchC2+0xa6>

	for(int j=0; j<goal_mode-1; j++){
 800f554:	2300      	movs	r3, #0
 800f556:	607b      	str	r3, [r7, #4]
 800f558:	e006      	b.n	800f568 <searchC2+0x22c>
		one_sectionU();
 800f55a:	f7f6 ff6b 	bl	8006434 <one_sectionU>
		adv_pos();
 800f55e:	f000 fd63 	bl	8010028 <adv_pos>
	for(int j=0; j<goal_mode-1; j++){
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	3301      	adds	r3, #1
 800f566:	607b      	str	r3, [r7, #4]
 800f568:	4b25      	ldr	r3, [pc, #148]	; (800f600 <searchC2+0x2c4>)
 800f56a:	781b      	ldrb	r3, [r3, #0]
 800f56c:	3b01      	subs	r3, #1
 800f56e:	687a      	ldr	r2, [r7, #4]
 800f570:	429a      	cmp	r2, r3
 800f572:	dbf2      	blt.n	800f55a <searchC2+0x21e>
	}
	half_sectionD();
 800f574:	f7f6 fbe0 	bl	8005d38 <half_sectionD>

	set_positionF();
 800f578:	f7f6 fa28 	bl	80059cc <set_positionF>

	MF2.FLAG.GOAL = (MF2.FLAG.GOAL+1)%2;
 800f57c:	4b1e      	ldr	r3, [pc, #120]	; (800f5f8 <searchC2+0x2bc>)
 800f57e:	881b      	ldrh	r3, [r3, #0]
 800f580:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800f584:	b2db      	uxtb	r3, r3
 800f586:	3301      	adds	r3, #1
 800f588:	2b00      	cmp	r3, #0
 800f58a:	f003 0301 	and.w	r3, r3, #1
 800f58e:	bfb8      	it	lt
 800f590:	425b      	neglt	r3, r3
 800f592:	f003 0301 	and.w	r3, r3, #1
 800f596:	b2d9      	uxtb	r1, r3
 800f598:	4a17      	ldr	r2, [pc, #92]	; (800f5f8 <searchC2+0x2bc>)
 800f59a:	8813      	ldrh	r3, [r2, #0]
 800f59c:	f361 2308 	bfi	r3, r1, #8, #1
 800f5a0:	8013      	strh	r3, [r2, #0]
	if(!MF2.FLAG.GOAL){
 800f5a2:	4b15      	ldr	r3, [pc, #84]	; (800f5f8 <searchC2+0x2bc>)
 800f5a4:	881b      	ldrh	r3, [r3, #0]
 800f5a6:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800f5aa:	b2db      	uxtb	r3, r3
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d112      	bne.n	800f5d6 <searchC2+0x29a>
		HAL_Delay(500);
 800f5b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f5b4:	f7f1 fd32 	bl	800101c <HAL_Delay>
		rotate_180();										//180度回転
 800f5b8:	f7f7 f90e 	bl	80067d8 <rotate_180>
		driveC2(SETPOS_BACK);         						//a尻を当てる程度に後退。回転後に停止する
 800f5bc:	2064      	movs	r0, #100	; 0x64
 800f5be:	f7f5 ff71 	bl	80054a4 <driveC2>
		degree_z = target_degree_z;
 800f5c2:	4b15      	ldr	r3, [pc, #84]	; (800f618 <searchC2+0x2dc>)
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	4a15      	ldr	r2, [pc, #84]	; (800f61c <searchC2+0x2e0>)
 800f5c8:	6013      	str	r3, [r2, #0]
		start_mode = 0;
 800f5ca:	4b0c      	ldr	r3, [pc, #48]	; (800f5fc <searchC2+0x2c0>)
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	701a      	strb	r2, [r3, #0]
		goal_mode = 1;
 800f5d0:	4b0b      	ldr	r3, [pc, #44]	; (800f600 <searchC2+0x2c4>)
 800f5d2:	2201      	movs	r2, #1
 800f5d4:	701a      	strb	r2, [r3, #0]
	}

	if(!MF.FLAG.SCND){
 800f5d6:	4b06      	ldr	r3, [pc, #24]	; (800f5f0 <searchC2+0x2b4>)
 800f5d8:	881b      	ldrh	r3, [r3, #0]
 800f5da:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f5de:	b2db      	uxtb	r3, r3
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d101      	bne.n	800f5e8 <searchC2+0x2ac>
		store_map_in_eeprom();
 800f5e4:	f002 fc7a 	bl	8011edc <store_map_in_eeprom>
	}
}
 800f5e8:	bf00      	nop
 800f5ea:	370c      	adds	r7, #12
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	bd90      	pop	{r4, r7, pc}
 800f5f0:	20000fa8 	.word	0x20000fa8
 800f5f4:	200002c8 	.word	0x200002c8
 800f5f8:	20000fa4 	.word	0x20000fa4
 800f5fc:	2000164c 	.word	0x2000164c
 800f600:	20000c31 	.word	0x20000c31
 800f604:	20001654 	.word	0x20001654
 800f608:	20000c94 	.word	0x20000c94
 800f60c:	20000c8c 	.word	0x20000c8c
 800f610:	200001ac 	.word	0x200001ac
 800f614:	20000da0 	.word	0x20000da0
 800f618:	20000c78 	.word	0x20000c78
 800f61c:	20000b9c 	.word	0x20000b9c

0800f620 <searchD>:
//searchD
//aスラローム走行+既知区間加速でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchD(){
 800f620:	b580      	push	{r7, lr}
 800f622:	b082      	sub	sp, #8
 800f624:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800f626:	4b6a      	ldr	r3, [pc, #424]	; (800f7d0 <searchD+0x1b0>)
 800f628:	881b      	ldrh	r3, [r3, #0]
 800f62a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f62e:	b2db      	uxtb	r3, r3
 800f630:	2b00      	cmp	r3, #0
 800f632:	d001      	beq.n	800f638 <searchD+0x18>
		load_map_from_eeprom();
 800f634:	f002 fc8c 	bl	8011f50 <load_map_from_eeprom>
//	if(!MF.FLAG.SCND)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
//	if(!MF.FLAG.SCND)wall_info &= ~0x88;									//a前壁は存在するはずがないので削除する
//	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800f638:	f7f6 f9e6 	bl	8005a08 <start_sectionA>
	adv_pos();
 800f63c:	f000 fcf4 	bl	8010028 <adv_pos>

	//====a歩数マップ・経路作成====
//	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
	r_cnt = 0;												//a経路カウンタの初期化
 800f640:	4b64      	ldr	r3, [pc, #400]	; (800f7d4 <searchD+0x1b4>)
 800f642:	2200      	movs	r2, #0
 800f644:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800f646:	f000 ffa7 	bl	8010598 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800f64a:	f001 fb63 	bl	8010d14 <make_route>

	MF2.FLAG.HACCEL = 0;
 800f64e:	4a62      	ldr	r2, [pc, #392]	; (800f7d8 <searchD+0x1b8>)
 800f650:	8813      	ldrh	r3, [r2, #0]
 800f652:	f36f 0341 	bfc	r3, #1, #1
 800f656:	8013      	strh	r3, [r2, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800f658:	4b5e      	ldr	r3, [pc, #376]	; (800f7d4 <searchD+0x1b4>)
 800f65a:	781b      	ldrb	r3, [r3, #0]
 800f65c:	1c5a      	adds	r2, r3, #1
 800f65e:	b2d1      	uxtb	r1, r2
 800f660:	4a5c      	ldr	r2, [pc, #368]	; (800f7d4 <searchD+0x1b4>)
 800f662:	7011      	strb	r1, [r2, #0]
 800f664:	461a      	mov	r2, r3
 800f666:	4b5d      	ldr	r3, [pc, #372]	; (800f7dc <searchD+0x1bc>)
 800f668:	5c9b      	ldrb	r3, [r3, r2]
 800f66a:	2b22      	cmp	r3, #34	; 0x22
 800f66c:	d05d      	beq.n	800f72a <searchD+0x10a>
 800f66e:	2b22      	cmp	r3, #34	; 0x22
 800f670:	dc02      	bgt.n	800f678 <searchD+0x58>
 800f672:	2b11      	cmp	r3, #17
 800f674:	d069      	beq.n	800f74a <searchD+0x12a>
 800f676:	e06b      	b.n	800f750 <searchD+0x130>
 800f678:	2b44      	cmp	r3, #68	; 0x44
 800f67a:	d053      	beq.n	800f724 <searchD+0x104>
 800f67c:	2b88      	cmp	r3, #136	; 0x88
 800f67e:	d167      	bne.n	800f750 <searchD+0x130>
			//----a前進----
			case 0x88:
				if(MF.FLAG.SCND && MF.FLAG.ACCL2){
 800f680:	4b53      	ldr	r3, [pc, #332]	; (800f7d0 <searchD+0x1b0>)
 800f682:	881b      	ldrh	r3, [r3, #0]
 800f684:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f688:	b2db      	uxtb	r3, r3
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d046      	beq.n	800f71c <searchD+0xfc>
 800f68e:	4b50      	ldr	r3, [pc, #320]	; (800f7d0 <searchD+0x1b0>)
 800f690:	881b      	ldrh	r3, [r3, #0]
 800f692:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800f696:	b2db      	uxtb	r3, r3
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d03f      	beq.n	800f71c <searchD+0xfc>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (MF2.FLAG.HACCEL == 0)){
 800f69c:	4b4d      	ldr	r3, [pc, #308]	; (800f7d4 <searchD+0x1b4>)
 800f69e:	781b      	ldrb	r3, [r3, #0]
 800f6a0:	3b01      	subs	r3, #1
 800f6a2:	4a4e      	ldr	r2, [pc, #312]	; (800f7dc <searchD+0x1bc>)
 800f6a4:	5cd2      	ldrb	r2, [r2, r3]
 800f6a6:	4b4b      	ldr	r3, [pc, #300]	; (800f7d4 <searchD+0x1b4>)
 800f6a8:	781b      	ldrb	r3, [r3, #0]
 800f6aa:	4619      	mov	r1, r3
 800f6ac:	4b4b      	ldr	r3, [pc, #300]	; (800f7dc <searchD+0x1bc>)
 800f6ae:	5c5b      	ldrb	r3, [r3, r1]
 800f6b0:	4013      	ands	r3, r2
 800f6b2:	b2db      	uxtb	r3, r3
 800f6b4:	2b88      	cmp	r3, #136	; 0x88
 800f6b6:	d115      	bne.n	800f6e4 <searchD+0xc4>
 800f6b8:	4b46      	ldr	r3, [pc, #280]	; (800f7d4 <searchD+0x1b4>)
 800f6ba:	781b      	ldrb	r3, [r3, #0]
 800f6bc:	461a      	mov	r2, r3
 800f6be:	4b47      	ldr	r3, [pc, #284]	; (800f7dc <searchD+0x1bc>)
 800f6c0:	5c9b      	ldrb	r3, [r3, r2]
 800f6c2:	2bff      	cmp	r3, #255	; 0xff
 800f6c4:	d00e      	beq.n	800f6e4 <searchD+0xc4>
 800f6c6:	4b44      	ldr	r3, [pc, #272]	; (800f7d8 <searchD+0x1b8>)
 800f6c8:	881b      	ldrh	r3, [r3, #0]
 800f6ca:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f6ce:	b2db      	uxtb	r3, r3
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d107      	bne.n	800f6e4 <searchD+0xc4>
						one_sectionA();
 800f6d4:	f7f6 fc6a 	bl	8005fac <one_sectionA>
						MF2.FLAG.HACCEL = 1;
 800f6d8:	4a3f      	ldr	r2, [pc, #252]	; (800f7d8 <searchD+0x1b8>)
 800f6da:	8813      	ldrh	r3, [r2, #0]
 800f6dc:	f043 0302 	orr.w	r3, r3, #2
 800f6e0:	8013      	strh	r3, [r2, #0]
 800f6e2:	e01a      	b.n	800f71a <searchD+0xfa>
					}
					else if((route[r_cnt] & 0x55) && (MF2.FLAG.HACCEL)){
 800f6e4:	4b3b      	ldr	r3, [pc, #236]	; (800f7d4 <searchD+0x1b4>)
 800f6e6:	781b      	ldrb	r3, [r3, #0]
 800f6e8:	461a      	mov	r2, r3
 800f6ea:	4b3c      	ldr	r3, [pc, #240]	; (800f7dc <searchD+0x1bc>)
 800f6ec:	5c9b      	ldrb	r3, [r3, r2]
 800f6ee:	f003 0355 	and.w	r3, r3, #85	; 0x55
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d00e      	beq.n	800f714 <searchD+0xf4>
 800f6f6:	4b38      	ldr	r3, [pc, #224]	; (800f7d8 <searchD+0x1b8>)
 800f6f8:	881b      	ldrh	r3, [r3, #0]
 800f6fa:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f6fe:	b2db      	uxtb	r3, r3
 800f700:	2b00      	cmp	r3, #0
 800f702:	d007      	beq.n	800f714 <searchD+0xf4>
						one_sectionD();
 800f704:	f7f6 fcdc 	bl	80060c0 <one_sectionD>
						MF2.FLAG.HACCEL = 0;
 800f708:	4a33      	ldr	r2, [pc, #204]	; (800f7d8 <searchD+0x1b8>)
 800f70a:	8813      	ldrh	r3, [r2, #0]
 800f70c:	f36f 0341 	bfc	r3, #1, #1
 800f710:	8013      	strh	r3, [r2, #0]
 800f712:	e002      	b.n	800f71a <searchD+0xfa>
					}else{
						one_sectionU();
 800f714:	f7f6 fe8e 	bl	8006434 <one_sectionU>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (MF2.FLAG.HACCEL == 0)){
 800f718:	e003      	b.n	800f722 <searchD+0x102>
 800f71a:	e002      	b.n	800f722 <searchD+0x102>
					}
				}else{
					one_sectionU();
 800f71c:	f7f6 fe8a 	bl	8006434 <one_sectionU>
				}
				break;
 800f720:	e016      	b.n	800f750 <searchD+0x130>
 800f722:	e015      	b.n	800f750 <searchD+0x130>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 800f724:	f7f7 f930 	bl	8006988 <slalom_R90>
				break;
 800f728:	e012      	b.n	800f750 <searchD+0x130>
			//----180回転----
			case 0x22:
				half_sectionD();
 800f72a:	f7f6 fb05 	bl	8005d38 <half_sectionD>
				rotate_180();
 800f72e:	f7f7 f853 	bl	80067d8 <rotate_180>
				if(wall_info & 0x88){
 800f732:	4b2b      	ldr	r3, [pc, #172]	; (800f7e0 <searchD+0x1c0>)
 800f734:	781b      	ldrb	r3, [r3, #0]
 800f736:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d002      	beq.n	800f744 <searchD+0x124>
					set_position();
 800f73e:	f7f6 f92f 	bl	80059a0 <set_position>
				}else{
					half_sectionA();
				}
				break;
 800f742:	e005      	b.n	800f750 <searchD+0x130>
					half_sectionA();
 800f744:	f7f6 fa92 	bl	8005c6c <half_sectionA>
				break;
 800f748:	e002      	b.n	800f750 <searchD+0x130>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800f74a:	f7f7 fa7f 	bl	8006c4c <slalom_L90>
				break;
 800f74e:	bf00      	nop
		}
		adv_pos();
 800f750:	f000 fc6a 	bl	8010028 <adv_pos>
//		if(!MF.FLAG.SCND)conf_route();

//	}while((mouse.x != goal_x) || (mouse.y != goal_y));
	}while(smap[mouse.y][mouse.x] != 0);
 800f754:	4b23      	ldr	r3, [pc, #140]	; (800f7e4 <searchD+0x1c4>)
 800f756:	785b      	ldrb	r3, [r3, #1]
 800f758:	b2db      	uxtb	r3, r3
 800f75a:	4618      	mov	r0, r3
 800f75c:	4b21      	ldr	r3, [pc, #132]	; (800f7e4 <searchD+0x1c4>)
 800f75e:	781b      	ldrb	r3, [r3, #0]
 800f760:	b2db      	uxtb	r3, r3
 800f762:	4619      	mov	r1, r3
 800f764:	4a20      	ldr	r2, [pc, #128]	; (800f7e8 <searchD+0x1c8>)
 800f766:	0103      	lsls	r3, r0, #4
 800f768:	440b      	add	r3, r1
 800f76a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	f47f af72 	bne.w	800f658 <searchD+0x38>

	for(int j=0; j<goal_mode-1; j++){
 800f774:	2300      	movs	r3, #0
 800f776:	607b      	str	r3, [r7, #4]
 800f778:	e006      	b.n	800f788 <searchD+0x168>
		one_sectionU();
 800f77a:	f7f6 fe5b 	bl	8006434 <one_sectionU>
		adv_pos();
 800f77e:	f000 fc53 	bl	8010028 <adv_pos>
	for(int j=0; j<goal_mode-1; j++){
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	3301      	adds	r3, #1
 800f786:	607b      	str	r3, [r7, #4]
 800f788:	4b18      	ldr	r3, [pc, #96]	; (800f7ec <searchD+0x1cc>)
 800f78a:	781b      	ldrb	r3, [r3, #0]
 800f78c:	3b01      	subs	r3, #1
 800f78e:	687a      	ldr	r2, [r7, #4]
 800f790:	429a      	cmp	r2, r3
 800f792:	dbf2      	blt.n	800f77a <searchD+0x15a>
	}
	half_sectionD();
 800f794:	f7f6 fad0 	bl	8005d38 <half_sectionD>
	set_positionF();
 800f798:	f7f6 f918 	bl	80059cc <set_positionF>

	HAL_Delay(500);
 800f79c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f7a0:	f7f1 fc3c 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800f7a4:	f7f7 f818 	bl	80067d8 <rotate_180>
//	driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
//	degree_z = target_degree_z;
//	start_mode = 0;
	start_mode = 1;
 800f7a8:	4b11      	ldr	r3, [pc, #68]	; (800f7f0 <searchD+0x1d0>)
 800f7aa:	2201      	movs	r2, #1
 800f7ac:	701a      	strb	r2, [r3, #0]
	goal_mode = 1;
 800f7ae:	4b0f      	ldr	r3, [pc, #60]	; (800f7ec <searchD+0x1cc>)
 800f7b0:	2201      	movs	r2, #1
 800f7b2:	701a      	strb	r2, [r3, #0]

	if(!MF.FLAG.SCND){
 800f7b4:	4b06      	ldr	r3, [pc, #24]	; (800f7d0 <searchD+0x1b0>)
 800f7b6:	881b      	ldrh	r3, [r3, #0]
 800f7b8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f7bc:	b2db      	uxtb	r3, r3
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d101      	bne.n	800f7c6 <searchD+0x1a6>
		store_map_in_eeprom();
 800f7c2:	f002 fb8b 	bl	8011edc <store_map_in_eeprom>
	}
}
 800f7c6:	bf00      	nop
 800f7c8:	3708      	adds	r7, #8
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	bd80      	pop	{r7, pc}
 800f7ce:	bf00      	nop
 800f7d0:	20000fa8 	.word	0x20000fa8
 800f7d4:	20001654 	.word	0x20001654
 800f7d8:	20000fa4 	.word	0x20000fa4
 800f7dc:	20000c94 	.word	0x20000c94
 800f7e0:	200002c8 	.word	0x200002c8
 800f7e4:	20000c8c 	.word	0x20000c8c
 800f7e8:	20000da0 	.word	0x20000da0
 800f7ec:	20000c31 	.word	0x20000c31
 800f7f0:	2000164c 	.word	0x2000164c

0800f7f4 <searchE>:
//searchE
//a未知壁を含むマスを仮goal座標とし、スラローム連続走行で全マスに進む。仮goalを連続的に変化させる。全面探索終了後は半区画減速
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchE(){
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b082      	sub	sp, #8
 800f7f8:	af00      	add	r7, sp, #0

	int i = 0;
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	607b      	str	r3, [r7, #4]
	int j = 0;
 800f7fe:	2300      	movs	r3, #0
 800f800:	603b      	str	r3, [r7, #0]
	do {
		if(i == 0){
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d111      	bne.n	800f82c <searchE+0x38>
			//====a前に壁が無い想定で問答無用で前進====
			half_sectionA();
 800f808:	f7f6 fa30 	bl	8005c6c <half_sectionA>
			adv_pos();
 800f80c:	f000 fc0c 	bl	8010028 <adv_pos>
			write_map();														//地図の初期化
 800f810:	f000 fcce 	bl	80101b0 <write_map>

			//====a歩数等初期化====
			m_step = r_cnt = 0;													//歩数と経路カウンタの初期化
 800f814:	4b44      	ldr	r3, [pc, #272]	; (800f928 <searchE+0x134>)
 800f816:	2200      	movs	r2, #0
 800f818:	701a      	strb	r2, [r3, #0]
 800f81a:	4b44      	ldr	r3, [pc, #272]	; (800f92c <searchE+0x138>)
 800f81c:	2200      	movs	r2, #0
 800f81e:	801a      	strh	r2, [r3, #0]
			find_pregoal();														//仮goalまでの歩数マップの初期化
 800f820:	f001 fbd8 	bl	8010fd4 <find_pregoal>
			make_smap2();
 800f824:	f001 fdca 	bl	80113bc <make_smap2>
			make_route();														//最短経路探索(route配列に動作が格納される)
 800f828:	f001 fa74 	bl	8010d14 <make_route>
		}

		//====a探索走行====
		do {
			//----a進行----
			switch (route[r_cnt++]) {										//route配列によって進行を決定。経路カウンタを進める
 800f82c:	4b3e      	ldr	r3, [pc, #248]	; (800f928 <searchE+0x134>)
 800f82e:	781b      	ldrb	r3, [r3, #0]
 800f830:	1c5a      	adds	r2, r3, #1
 800f832:	b2d1      	uxtb	r1, r2
 800f834:	4a3c      	ldr	r2, [pc, #240]	; (800f928 <searchE+0x134>)
 800f836:	7011      	strb	r1, [r2, #0]
 800f838:	461a      	mov	r2, r3
 800f83a:	4b3d      	ldr	r3, [pc, #244]	; (800f930 <searchE+0x13c>)
 800f83c:	5c9b      	ldrb	r3, [r3, r2]
 800f83e:	2b22      	cmp	r3, #34	; 0x22
 800f840:	d00e      	beq.n	800f860 <searchE+0x6c>
 800f842:	2b22      	cmp	r3, #34	; 0x22
 800f844:	dc02      	bgt.n	800f84c <searchE+0x58>
 800f846:	2b11      	cmp	r3, #17
 800f848:	d01a      	beq.n	800f880 <searchE+0x8c>
 800f84a:	e01c      	b.n	800f886 <searchE+0x92>
 800f84c:	2b44      	cmp	r3, #68	; 0x44
 800f84e:	d004      	beq.n	800f85a <searchE+0x66>
 800f850:	2b88      	cmp	r3, #136	; 0x88
 800f852:	d118      	bne.n	800f886 <searchE+0x92>
				//----a前進----
			case 0x88:
				one_sectionU();
 800f854:	f7f6 fdee 	bl	8006434 <one_sectionU>
				break;
 800f858:	e015      	b.n	800f886 <searchE+0x92>
				//----a右折----
			case 0x44:
				slalom_R90();
 800f85a:	f7f7 f895 	bl	8006988 <slalom_R90>
				break;
 800f85e:	e012      	b.n	800f886 <searchE+0x92>
				//----180回転----
			case 0x22:
				half_sectionD();
 800f860:	f7f6 fa6a 	bl	8005d38 <half_sectionD>
				rotate_180();
 800f864:	f7f6 ffb8 	bl	80067d8 <rotate_180>
				if(wall_info & 0x88){
 800f868:	4b32      	ldr	r3, [pc, #200]	; (800f934 <searchE+0x140>)
 800f86a:	781b      	ldrb	r3, [r3, #0]
 800f86c:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800f870:	2b00      	cmp	r3, #0
 800f872:	d002      	beq.n	800f87a <searchE+0x86>
					set_position();
 800f874:	f7f6 f894 	bl	80059a0 <set_position>
				}else{
					half_sectionA();
				}
				break;
 800f878:	e005      	b.n	800f886 <searchE+0x92>
					half_sectionA();
 800f87a:	f7f6 f9f7 	bl	8005c6c <half_sectionA>
				break;
 800f87e:	e002      	b.n	800f886 <searchE+0x92>
				//----a左折----
			case 0x11:
				slalom_L90();
 800f880:	f7f7 f9e4 	bl	8006c4c <slalom_L90>
				break;
 800f884:	bf00      	nop
			}
			adv_pos();														//aマイクロマウス内部位置情報でも前進処理
 800f886:	f000 fbcf 	bl	8010028 <adv_pos>
			j++;
 800f88a:	683b      	ldr	r3, [r7, #0]
 800f88c:	3301      	adds	r3, #1
 800f88e:	603b      	str	r3, [r7, #0]
			if (j > 150) break;												//a移動マス数が250以上になった場合全面探索を中止
 800f890:	683b      	ldr	r3, [r7, #0]
 800f892:	2b96      	cmp	r3, #150	; 0x96
 800f894:	dc0e      	bgt.n	800f8b4 <searchE+0xc0>

		} while ((mouse.x != pregoal_x) || (mouse.y != pregoal_y));			//a現在座標と仮goal座標が等しくなるまで実行
 800f896:	4b28      	ldr	r3, [pc, #160]	; (800f938 <searchE+0x144>)
 800f898:	781b      	ldrb	r3, [r3, #0]
 800f89a:	b2da      	uxtb	r2, r3
 800f89c:	4b27      	ldr	r3, [pc, #156]	; (800f93c <searchE+0x148>)
 800f89e:	781b      	ldrb	r3, [r3, #0]
 800f8a0:	429a      	cmp	r2, r3
 800f8a2:	d1c3      	bne.n	800f82c <searchE+0x38>
 800f8a4:	4b24      	ldr	r3, [pc, #144]	; (800f938 <searchE+0x144>)
 800f8a6:	785b      	ldrb	r3, [r3, #1]
 800f8a8:	b2da      	uxtb	r2, r3
 800f8aa:	4b25      	ldr	r3, [pc, #148]	; (800f940 <searchE+0x14c>)
 800f8ac:	781b      	ldrb	r3, [r3, #0]
 800f8ae:	429a      	cmp	r2, r3
 800f8b0:	d1bc      	bne.n	800f82c <searchE+0x38>
 800f8b2:	e000      	b.n	800f8b6 <searchE+0xc2>
			if (j > 150) break;												//a移動マス数が250以上になった場合全面探索を中止
 800f8b4:	bf00      	nop

		get_wall_info();													//a壁情報の初期化, 後壁はなくなる
 800f8b6:	f002 fbc3 	bl	8012040 <get_wall_info>
		write_map();														//a地図の初期化
 800f8ba:	f000 fc79 	bl	80101b0 <write_map>
		//printf("get pregoal, x = %d, y = %d\n", mouse.x, mouse.y);

		//====a歩数等初期化====
		m_step = r_cnt = 0;													//a歩数と経路カウンタの初期化
 800f8be:	4b1a      	ldr	r3, [pc, #104]	; (800f928 <searchE+0x134>)
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	701a      	strb	r2, [r3, #0]
 800f8c4:	4b19      	ldr	r3, [pc, #100]	; (800f92c <searchE+0x138>)
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	801a      	strh	r2, [r3, #0]

		find_pregoal();														//a仮goalまでの歩数マップの初期化
 800f8ca:	f001 fb83 	bl	8010fd4 <find_pregoal>
		if(MF2.FLAG.ALLMAP) {
 800f8ce:	4b1d      	ldr	r3, [pc, #116]	; (800f944 <searchE+0x150>)
 800f8d0:	881b      	ldrh	r3, [r3, #0]
 800f8d2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800f8d6:	b2db      	uxtb	r3, r3
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d002      	beq.n	800f8e2 <searchE+0xee>
			//printf("get MF2.FLAG.ALLMAP\n");
			half_sectionD();
 800f8dc:	f7f6 fa2c 	bl	8005d38 <half_sectionD>
			break;
 800f8e0:	e00e      	b.n	800f900 <searchE+0x10c>
		}
		make_smap2();
 800f8e2:	f001 fd6b 	bl	80113bc <make_smap2>
		make_route();														//a最短経路探索(route配列に動作が格納される)
 800f8e6:	f001 fa15 	bl	8010d14 <make_route>

		if (j > 150) {
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	2b96      	cmp	r3, #150	; 0x96
 800f8ee:	dc06      	bgt.n	800f8fe <searchE+0x10a>
			break;															//a移動マス数が250以上になった場合全面探索を中止
		}
		i++;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	3301      	adds	r3, #1
 800f8f4:	607b      	str	r3, [r7, #4]

	} while (i < 150);														//a仮goalへの到着が130回以上になった場合全面探索を中止
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	2b95      	cmp	r3, #149	; 0x95
 800f8fa:	dd82      	ble.n	800f802 <searchE+0xe>
 800f8fc:	e000      	b.n	800f900 <searchE+0x10c>
			break;															//a移動マス数が250以上になった場合全面探索を中止
 800f8fe:	bf00      	nop

	HAL_Delay(500);
 800f900:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f904:	f7f1 fb8a 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800f908:	f7f6 ff66 	bl	80067d8 <rotate_180>

	if(!MF.FLAG.SCND){
 800f90c:	4b0e      	ldr	r3, [pc, #56]	; (800f948 <searchE+0x154>)
 800f90e:	881b      	ldrh	r3, [r3, #0]
 800f910:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f914:	b2db      	uxtb	r3, r3
 800f916:	2b00      	cmp	r3, #0
 800f918:	d101      	bne.n	800f91e <searchE+0x12a>
		store_map_in_eeprom();
 800f91a:	f002 fadf 	bl	8011edc <store_map_in_eeprom>
	}
}
 800f91e:	bf00      	nop
 800f920:	3708      	adds	r7, #8
 800f922:	46bd      	mov	sp, r7
 800f924:	bd80      	pop	{r7, pc}
 800f926:	bf00      	nop
 800f928:	20001654 	.word	0x20001654
 800f92c:	2000034e 	.word	0x2000034e
 800f930:	20000c94 	.word	0x20000c94
 800f934:	200002c8 	.word	0x200002c8
 800f938:	20000c8c 	.word	0x20000c8c
 800f93c:	20000d9c 	.word	0x20000d9c
 800f940:	20001325 	.word	0x20001325
 800f944:	20000fa4 	.word	0x20000fa4
 800f948:	20000fa8 	.word	0x20000fa8

0800f94c <searchF3>:
//searchF3
//aスラローム(+既知区間加速探索走行)+pass圧縮+機体方向&位置未更新+半区画ベースでgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchF3(){
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b084      	sub	sp, #16
 800f950:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800f952:	4b62      	ldr	r3, [pc, #392]	; (800fadc <searchF3+0x190>)
 800f954:	881b      	ldrh	r3, [r3, #0]
 800f956:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f95a:	b2db      	uxtb	r3, r3
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d001      	beq.n	800f964 <searchF3+0x18>
		load_map_from_eeprom();
 800f960:	f002 faf6 	bl	8011f50 <load_map_from_eeprom>
	}
	pass_mode = 3;
 800f964:	4b5e      	ldr	r3, [pc, #376]	; (800fae0 <searchF3+0x194>)
 800f966:	2203      	movs	r2, #3
 800f968:	701a      	strb	r2, [r3, #0]

	//====a1区画前進====
	adv_pos();
 800f96a:	f000 fb5d 	bl	8010028 <adv_pos>

	//====a歩数マップ・経路作成====
	make_smap();											//a歩数マップ作成
 800f96e:	f000 fe13 	bl	8010598 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800f972:	f001 f9cf 	bl	8010d14 <make_route>

	//====pass圧縮====
	p_cnt = 0;												//a経路カウンタの初期化
 800f976:	4b5b      	ldr	r3, [pc, #364]	; (800fae4 <searchF3+0x198>)
 800f978:	2200      	movs	r2, #0
 800f97a:	701a      	strb	r2, [r3, #0]
	pass_route2();
 800f97c:	f001 fe42 	bl	8011604 <pass_route2>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800f980:	f7f6 f842 	bl	8005a08 <start_sectionA>

	MF2.FLAG.HACCEL = 0;
 800f984:	4a58      	ldr	r2, [pc, #352]	; (800fae8 <searchF3+0x19c>)
 800f986:	8813      	ldrh	r3, [r2, #0]
 800f988:	f36f 0341 	bfc	r3, #1, #1
 800f98c:	8013      	strh	r3, [r2, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(pass[p_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800f98e:	4b55      	ldr	r3, [pc, #340]	; (800fae4 <searchF3+0x198>)
 800f990:	781b      	ldrb	r3, [r3, #0]
 800f992:	1c5a      	adds	r2, r3, #1
 800f994:	b2d1      	uxtb	r1, r2
 800f996:	4a53      	ldr	r2, [pc, #332]	; (800fae4 <searchF3+0x198>)
 800f998:	7011      	strb	r1, [r2, #0]
 800f99a:	461a      	mov	r2, r3
 800f99c:	4b53      	ldr	r3, [pc, #332]	; (800faec <searchF3+0x1a0>)
 800f99e:	569b      	ldrsb	r3, [r3, r2]
 800f9a0:	f113 0f04 	cmn.w	r3, #4
 800f9a4:	d01e      	beq.n	800f9e4 <searchF3+0x98>
 800f9a6:	f113 0f04 	cmn.w	r3, #4
 800f9aa:	dc09      	bgt.n	800f9c0 <searchF3+0x74>
 800f9ac:	f113 0f06 	cmn.w	r3, #6
 800f9b0:	d01e      	beq.n	800f9f0 <searchF3+0xa4>
 800f9b2:	f113 0f06 	cmn.w	r3, #6
 800f9b6:	dc18      	bgt.n	800f9ea <searchF3+0x9e>
 800f9b8:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800f9bc:	d01b      	beq.n	800f9f6 <searchF3+0xaa>
 800f9be:	e01f      	b.n	800fa00 <searchF3+0xb4>
 800f9c0:	f113 0f02 	cmn.w	r3, #2
 800f9c4:	d008      	beq.n	800f9d8 <searchF3+0x8c>
 800f9c6:	f113 0f02 	cmn.w	r3, #2
 800f9ca:	db08      	blt.n	800f9de <searchF3+0x92>
 800f9cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9d0:	d116      	bne.n	800fa00 <searchF3+0xb4>
			//----a右スラローム----
			case -1:
				slalom_R90();
 800f9d2:	f7f6 ffd9 	bl	8006988 <slalom_R90>
				break;
 800f9d6:	e04c      	b.n	800fa72 <searchF3+0x126>

			//----a左スラローム----
			case -2:
				slalom_L90();
 800f9d8:	f7f7 f938 	bl	8006c4c <slalom_L90>
				break;
 800f9dc:	e049      	b.n	800fa72 <searchF3+0x126>

			//----a大回り右90----
			case -3:
				Lslalom_R90();
 800f9de:	f7f7 fa8d 	bl	8006efc <Lslalom_R90>
				break;
 800f9e2:	e046      	b.n	800fa72 <searchF3+0x126>

			//----a大回り左90----
			case -4:
				Lslalom_L90();
 800f9e4:	f7f7 fbc0 	bl	8007168 <Lslalom_L90>
				break;
 800f9e8:	e043      	b.n	800fa72 <searchF3+0x126>

			//----a大回り右180----
			case -5:
				Lslalom_R180();
 800f9ea:	f7f7 fce7 	bl	80073bc <Lslalom_R180>
				break;
 800f9ee:	e040      	b.n	800fa72 <searchF3+0x126>

			//----a大回り左180----
			case -6:
				Lslalom_L180();
 800f9f0:	f7f7 fe30 	bl	8007654 <Lslalom_L180>
				break;
 800f9f4:	e03d      	b.n	800fa72 <searchF3+0x126>

			//----pass配列最後(なお本来呼び出される前にゴールする)----
			case -114:
				rotate_180();
 800f9f6:	f7f6 feef 	bl	80067d8 <rotate_180>
				rotate_180();
 800f9fa:	f7f6 feed 	bl	80067d8 <rotate_180>
				while(1);
 800f9fe:	e7fe      	b.n	800f9fe <searchF3+0xb2>
				break;

			//----a前進----
			default:
				if(pass[p_cnt-1] < 4){
 800fa00:	4b38      	ldr	r3, [pc, #224]	; (800fae4 <searchF3+0x198>)
 800fa02:	781b      	ldrb	r3, [r3, #0]
 800fa04:	3b01      	subs	r3, #1
 800fa06:	4a39      	ldr	r2, [pc, #228]	; (800faec <searchF3+0x1a0>)
 800fa08:	56d3      	ldrsb	r3, [r2, r3]
 800fa0a:	2b03      	cmp	r3, #3
 800fa0c:	dc11      	bgt.n	800fa32 <searchF3+0xe6>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800fa0e:	2300      	movs	r3, #0
 800fa10:	60fb      	str	r3, [r7, #12]
 800fa12:	e004      	b.n	800fa1e <searchF3+0xd2>
						half_sectionU();
 800fa14:	f7f6 faaa 	bl	8005f6c <half_sectionU>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	3301      	adds	r3, #1
 800fa1c:	60fb      	str	r3, [r7, #12]
 800fa1e:	4b31      	ldr	r3, [pc, #196]	; (800fae4 <searchF3+0x198>)
 800fa20:	781b      	ldrb	r3, [r3, #0]
 800fa22:	3b01      	subs	r3, #1
 800fa24:	4a31      	ldr	r2, [pc, #196]	; (800faec <searchF3+0x1a0>)
 800fa26:	56d3      	ldrsb	r3, [r2, r3]
 800fa28:	461a      	mov	r2, r3
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	4293      	cmp	r3, r2
 800fa2e:	dbf1      	blt.n	800fa14 <searchF3+0xc8>
						half_sectionU();
					}
					one_sectionD();
					MF2.FLAG.HACCEL = 0;
				}
				break;
 800fa30:	e01e      	b.n	800fa70 <searchF3+0x124>
					one_sectionA();
 800fa32:	f7f6 fabb 	bl	8005fac <one_sectionA>
					MF2.FLAG.HACCEL = 1;
 800fa36:	4a2c      	ldr	r2, [pc, #176]	; (800fae8 <searchF3+0x19c>)
 800fa38:	8813      	ldrh	r3, [r2, #0]
 800fa3a:	f043 0302 	orr.w	r3, r3, #2
 800fa3e:	8013      	strh	r3, [r2, #0]
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800fa40:	2300      	movs	r3, #0
 800fa42:	60bb      	str	r3, [r7, #8]
 800fa44:	e004      	b.n	800fa50 <searchF3+0x104>
						half_sectionU();
 800fa46:	f7f6 fa91 	bl	8005f6c <half_sectionU>
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800fa4a:	68bb      	ldr	r3, [r7, #8]
 800fa4c:	3301      	adds	r3, #1
 800fa4e:	60bb      	str	r3, [r7, #8]
 800fa50:	4b24      	ldr	r3, [pc, #144]	; (800fae4 <searchF3+0x198>)
 800fa52:	781b      	ldrb	r3, [r3, #0]
 800fa54:	3b01      	subs	r3, #1
 800fa56:	4a25      	ldr	r2, [pc, #148]	; (800faec <searchF3+0x1a0>)
 800fa58:	56d3      	ldrsb	r3, [r2, r3]
 800fa5a:	3b04      	subs	r3, #4
 800fa5c:	68ba      	ldr	r2, [r7, #8]
 800fa5e:	429a      	cmp	r2, r3
 800fa60:	dbf1      	blt.n	800fa46 <searchF3+0xfa>
					one_sectionD();
 800fa62:	f7f6 fb2d 	bl	80060c0 <one_sectionD>
					MF2.FLAG.HACCEL = 0;
 800fa66:	4a20      	ldr	r2, [pc, #128]	; (800fae8 <searchF3+0x19c>)
 800fa68:	8813      	ldrh	r3, [r2, #0]
 800fa6a:	f36f 0341 	bfc	r3, #1, #1
 800fa6e:	8013      	strh	r3, [r2, #0]
				break;
 800fa70:	bf00      	nop
		}
	}while(pass[p_cnt] != -114);
 800fa72:	4b1c      	ldr	r3, [pc, #112]	; (800fae4 <searchF3+0x198>)
 800fa74:	781b      	ldrb	r3, [r3, #0]
 800fa76:	461a      	mov	r2, r3
 800fa78:	4b1c      	ldr	r3, [pc, #112]	; (800faec <searchF3+0x1a0>)
 800fa7a:	569b      	ldrsb	r3, [r3, r2]
 800fa7c:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800fa80:	d185      	bne.n	800f98e <searchF3+0x42>

	mouse.x = goal_x;
 800fa82:	4b1b      	ldr	r3, [pc, #108]	; (800faf0 <searchF3+0x1a4>)
 800fa84:	781a      	ldrb	r2, [r3, #0]
 800fa86:	4b1b      	ldr	r3, [pc, #108]	; (800faf4 <searchF3+0x1a8>)
 800fa88:	701a      	strb	r2, [r3, #0]
	mouse.y = goal_y;
 800fa8a:	4b1b      	ldr	r3, [pc, #108]	; (800faf8 <searchF3+0x1ac>)
 800fa8c:	781a      	ldrb	r2, [r3, #0]
 800fa8e:	4b19      	ldr	r3, [pc, #100]	; (800faf4 <searchF3+0x1a8>)
 800fa90:	705a      	strb	r2, [r3, #1]

	for(int j=0; j<goal_mode-1; j++){
 800fa92:	2300      	movs	r3, #0
 800fa94:	607b      	str	r3, [r7, #4]
 800fa96:	e006      	b.n	800faa6 <searchF3+0x15a>
		one_sectionU();
 800fa98:	f7f6 fccc 	bl	8006434 <one_sectionU>
		adv_pos();
 800fa9c:	f000 fac4 	bl	8010028 <adv_pos>
	for(int j=0; j<goal_mode-1; j++){
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	3301      	adds	r3, #1
 800faa4:	607b      	str	r3, [r7, #4]
 800faa6:	4b15      	ldr	r3, [pc, #84]	; (800fafc <searchF3+0x1b0>)
 800faa8:	781b      	ldrb	r3, [r3, #0]
 800faaa:	3b01      	subs	r3, #1
 800faac:	687a      	ldr	r2, [r7, #4]
 800faae:	429a      	cmp	r2, r3
 800fab0:	dbf2      	blt.n	800fa98 <searchF3+0x14c>
	}
	half_sectionD();
 800fab2:	f7f6 f941 	bl	8005d38 <half_sectionD>
	set_positionF();
 800fab6:	f7f5 ff89 	bl	80059cc <set_positionF>

	HAL_Delay(500);
 800faba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fabe:	f7f1 faad 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800fac2:	f7f6 fe89 	bl	80067d8 <rotate_180>
//	driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
//	degree_z = target_degree_z;
//	start_mode = 0;
	start_mode = 1;
 800fac6:	4b0e      	ldr	r3, [pc, #56]	; (800fb00 <searchF3+0x1b4>)
 800fac8:	2201      	movs	r2, #1
 800faca:	701a      	strb	r2, [r3, #0]
	goal_mode = 1;
 800facc:	4b0b      	ldr	r3, [pc, #44]	; (800fafc <searchF3+0x1b0>)
 800face:	2201      	movs	r2, #1
 800fad0:	701a      	strb	r2, [r3, #0]

}
 800fad2:	bf00      	nop
 800fad4:	3710      	adds	r7, #16
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bd80      	pop	{r7, pc}
 800fada:	bf00      	nop
 800fadc:	20000fa8 	.word	0x20000fa8
 800fae0:	20000457 	.word	0x20000457
 800fae4:	200002b0 	.word	0x200002b0
 800fae8:	20000fa4 	.word	0x20000fa4
 800faec:	20000350 	.word	0x20000350
 800faf0:	20000c30 	.word	0x20000c30
 800faf4:	20000c8c 	.word	0x20000c8c
 800faf8:	20000b8c 	.word	0x20000b8c
 800fafc:	20000c31 	.word	0x20000c31
 800fb00:	2000164c 	.word	0x2000164c

0800fb04 <searchF4>:
//searchF4
//aスラローム(+既知区間加速探索走行)+pass圧縮+機体方向&位置未更新+半区画ベース+斜め走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchF4(){
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b084      	sub	sp, #16
 800fb08:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800fb0a:	4bca      	ldr	r3, [pc, #808]	; (800fe34 <searchF4+0x330>)
 800fb0c:	881b      	ldrh	r3, [r3, #0]
 800fb0e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800fb12:	b2db      	uxtb	r3, r3
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d001      	beq.n	800fb1c <searchF4+0x18>
		load_map_from_eeprom();
 800fb18:	f002 fa1a 	bl	8011f50 <load_map_from_eeprom>
	}
	pass_mode = 4;
 800fb1c:	4bc6      	ldr	r3, [pc, #792]	; (800fe38 <searchF4+0x334>)
 800fb1e:	2204      	movs	r2, #4
 800fb20:	701a      	strb	r2, [r3, #0]

	//====a1区画前進====
	adv_pos();
 800fb22:	f000 fa81 	bl	8010028 <adv_pos>

	//====a歩数マップ・経路作成====
	full_led_write1(RED);
 800fb26:	2001      	movs	r0, #1
 800fb28:	f002 fafe 	bl	8012128 <full_led_write1>
	make_smap();											//a歩数マップ作成
 800fb2c:	f000 fd34 	bl	8010598 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800fb30:	f001 f8f0 	bl	8010d14 <make_route>

	//====pass圧縮====
	p_cnt = 0;												//a経路カウンタの初期化
 800fb34:	4bc1      	ldr	r3, [pc, #772]	; (800fe3c <searchF4+0x338>)
 800fb36:	2200      	movs	r2, #0
 800fb38:	701a      	strb	r2, [r3, #0]
	pass_route3();
 800fb3a:	f001 fe77 	bl	801182c <pass_route3>

	if(start_mode == 0 || start_mode == 1){					//a大回りではない場合、先頭の半区画直進をスキップ
 800fb3e:	4bc0      	ldr	r3, [pc, #768]	; (800fe40 <searchF4+0x33c>)
 800fb40:	781b      	ldrb	r3, [r3, #0]
 800fb42:	b2db      	uxtb	r3, r3
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d004      	beq.n	800fb52 <searchF4+0x4e>
 800fb48:	4bbd      	ldr	r3, [pc, #756]	; (800fe40 <searchF4+0x33c>)
 800fb4a:	781b      	ldrb	r3, [r3, #0]
 800fb4c:	b2db      	uxtb	r3, r3
 800fb4e:	2b01      	cmp	r3, #1
 800fb50:	d109      	bne.n	800fb66 <searchF4+0x62>
		pass[p_cnt]--;
 800fb52:	4bba      	ldr	r3, [pc, #744]	; (800fe3c <searchF4+0x338>)
 800fb54:	781b      	ldrb	r3, [r3, #0]
 800fb56:	4abb      	ldr	r2, [pc, #748]	; (800fe44 <searchF4+0x340>)
 800fb58:	56d2      	ldrsb	r2, [r2, r3]
 800fb5a:	b2d2      	uxtb	r2, r2
 800fb5c:	3a01      	subs	r2, #1
 800fb5e:	b2d2      	uxtb	r2, r2
 800fb60:	b251      	sxtb	r1, r2
 800fb62:	4ab8      	ldr	r2, [pc, #736]	; (800fe44 <searchF4+0x340>)
 800fb64:	54d1      	strb	r1, [r2, r3]
	}
	mouse.dir = mouse.dir * 2;
 800fb66:	4bb8      	ldr	r3, [pc, #736]	; (800fe48 <searchF4+0x344>)
 800fb68:	789b      	ldrb	r3, [r3, #2]
 800fb6a:	b2db      	uxtb	r3, r3
 800fb6c:	005b      	lsls	r3, r3, #1
 800fb6e:	b2da      	uxtb	r2, r3
 800fb70:	4bb5      	ldr	r3, [pc, #724]	; (800fe48 <searchF4+0x344>)
 800fb72:	709a      	strb	r2, [r3, #2]

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800fb74:	f7f5 ff48 	bl	8005a08 <start_sectionA>

	MF2.FLAG.HACCEL = 0;
 800fb78:	4ab4      	ldr	r2, [pc, #720]	; (800fe4c <searchF4+0x348>)
 800fb7a:	8813      	ldrh	r3, [r2, #0]
 800fb7c:	f36f 0341 	bfc	r3, #1, #1
 800fb80:	8013      	strh	r3, [r2, #0]
	MF.FLAG.XDIR = 1;
 800fb82:	4aac      	ldr	r2, [pc, #688]	; (800fe34 <searchF4+0x330>)
 800fb84:	8813      	ldrh	r3, [r2, #0]
 800fb86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800fb8a:	8013      	strh	r3, [r2, #0]
	//====a探索走行====
	do{
		//----a進行----
		switch(pass[p_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800fb8c:	4bab      	ldr	r3, [pc, #684]	; (800fe3c <searchF4+0x338>)
 800fb8e:	781b      	ldrb	r3, [r3, #0]
 800fb90:	1c5a      	adds	r2, r3, #1
 800fb92:	b2d1      	uxtb	r1, r2
 800fb94:	4aa9      	ldr	r2, [pc, #676]	; (800fe3c <searchF4+0x338>)
 800fb96:	7011      	strb	r1, [r2, #0]
 800fb98:	461a      	mov	r2, r3
 800fb9a:	4baa      	ldr	r3, [pc, #680]	; (800fe44 <searchF4+0x340>)
 800fb9c:	569b      	ldrsb	r3, [r3, r2]
 800fb9e:	3372      	adds	r3, #114	; 0x72
 800fba0:	2b71      	cmp	r3, #113	; 0x71
 800fba2:	f200 811c 	bhi.w	800fdde <searchF4+0x2da>
 800fba6:	a201      	add	r2, pc, #4	; (adr r2, 800fbac <searchF4+0xa8>)
 800fba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbac:	0800fdd5 	.word	0x0800fdd5
 800fbb0:	0800fddf 	.word	0x0800fddf
 800fbb4:	0800fddf 	.word	0x0800fddf
 800fbb8:	0800fddf 	.word	0x0800fddf
 800fbbc:	0800fddf 	.word	0x0800fddf
 800fbc0:	0800fddf 	.word	0x0800fddf
 800fbc4:	0800fddf 	.word	0x0800fddf
 800fbc8:	0800fddf 	.word	0x0800fddf
 800fbcc:	0800fddf 	.word	0x0800fddf
 800fbd0:	0800fddf 	.word	0x0800fddf
 800fbd4:	0800fddf 	.word	0x0800fddf
 800fbd8:	0800fddf 	.word	0x0800fddf
 800fbdc:	0800fddf 	.word	0x0800fddf
 800fbe0:	0800fddf 	.word	0x0800fddf
 800fbe4:	0800fddf 	.word	0x0800fddf
 800fbe8:	0800fddf 	.word	0x0800fddf
 800fbec:	0800fddf 	.word	0x0800fddf
 800fbf0:	0800fddf 	.word	0x0800fddf
 800fbf4:	0800fddf 	.word	0x0800fddf
 800fbf8:	0800fddf 	.word	0x0800fddf
 800fbfc:	0800fddf 	.word	0x0800fddf
 800fc00:	0800fddf 	.word	0x0800fddf
 800fc04:	0800fddf 	.word	0x0800fddf
 800fc08:	0800fddf 	.word	0x0800fddf
 800fc0c:	0800fddf 	.word	0x0800fddf
 800fc10:	0800fddf 	.word	0x0800fddf
 800fc14:	0800fddf 	.word	0x0800fddf
 800fc18:	0800fddf 	.word	0x0800fddf
 800fc1c:	0800fddf 	.word	0x0800fddf
 800fc20:	0800fddf 	.word	0x0800fddf
 800fc24:	0800fddf 	.word	0x0800fddf
 800fc28:	0800fddf 	.word	0x0800fddf
 800fc2c:	0800fddf 	.word	0x0800fddf
 800fc30:	0800fddf 	.word	0x0800fddf
 800fc34:	0800fddf 	.word	0x0800fddf
 800fc38:	0800fddf 	.word	0x0800fddf
 800fc3c:	0800fddf 	.word	0x0800fddf
 800fc40:	0800fddf 	.word	0x0800fddf
 800fc44:	0800fddf 	.word	0x0800fddf
 800fc48:	0800fddf 	.word	0x0800fddf
 800fc4c:	0800fddf 	.word	0x0800fddf
 800fc50:	0800fddf 	.word	0x0800fddf
 800fc54:	0800fddf 	.word	0x0800fddf
 800fc58:	0800fddf 	.word	0x0800fddf
 800fc5c:	0800fddf 	.word	0x0800fddf
 800fc60:	0800fddf 	.word	0x0800fddf
 800fc64:	0800fddf 	.word	0x0800fddf
 800fc68:	0800fddf 	.word	0x0800fddf
 800fc6c:	0800fddf 	.word	0x0800fddf
 800fc70:	0800fddf 	.word	0x0800fddf
 800fc74:	0800fddf 	.word	0x0800fddf
 800fc78:	0800fddf 	.word	0x0800fddf
 800fc7c:	0800fddf 	.word	0x0800fddf
 800fc80:	0800fddf 	.word	0x0800fddf
 800fc84:	0800fddf 	.word	0x0800fddf
 800fc88:	0800fddf 	.word	0x0800fddf
 800fc8c:	0800fddf 	.word	0x0800fddf
 800fc90:	0800fddf 	.word	0x0800fddf
 800fc94:	0800fddf 	.word	0x0800fddf
 800fc98:	0800fddf 	.word	0x0800fddf
 800fc9c:	0800fddf 	.word	0x0800fddf
 800fca0:	0800fddf 	.word	0x0800fddf
 800fca4:	0800fddf 	.word	0x0800fddf
 800fca8:	0800fddf 	.word	0x0800fddf
 800fcac:	0800fddf 	.word	0x0800fddf
 800fcb0:	0800fddf 	.word	0x0800fddf
 800fcb4:	0800fddf 	.word	0x0800fddf
 800fcb8:	0800fddf 	.word	0x0800fddf
 800fcbc:	0800fddf 	.word	0x0800fddf
 800fcc0:	0800fddf 	.word	0x0800fddf
 800fcc4:	0800fddf 	.word	0x0800fddf
 800fcc8:	0800fddf 	.word	0x0800fddf
 800fccc:	0800fddf 	.word	0x0800fddf
 800fcd0:	0800fddf 	.word	0x0800fddf
 800fcd4:	0800fddf 	.word	0x0800fddf
 800fcd8:	0800fddf 	.word	0x0800fddf
 800fcdc:	0800fddf 	.word	0x0800fddf
 800fce0:	0800fddf 	.word	0x0800fddf
 800fce4:	0800fddf 	.word	0x0800fddf
 800fce8:	0800fddf 	.word	0x0800fddf
 800fcec:	0800fddf 	.word	0x0800fddf
 800fcf0:	0800fddf 	.word	0x0800fddf
 800fcf4:	0800fddf 	.word	0x0800fddf
 800fcf8:	0800fddf 	.word	0x0800fddf
 800fcfc:	0800fddf 	.word	0x0800fddf
 800fd00:	0800fddf 	.word	0x0800fddf
 800fd04:	0800fddf 	.word	0x0800fddf
 800fd08:	0800fddf 	.word	0x0800fddf
 800fd0c:	0800fddf 	.word	0x0800fddf
 800fd10:	0800fddf 	.word	0x0800fddf
 800fd14:	0800fddf 	.word	0x0800fddf
 800fd18:	0800fddf 	.word	0x0800fddf
 800fd1c:	0800fddf 	.word	0x0800fddf
 800fd20:	0800fddf 	.word	0x0800fddf
 800fd24:	0800fddf 	.word	0x0800fddf
 800fd28:	0800fddf 	.word	0x0800fddf
 800fd2c:	0800fddf 	.word	0x0800fddf
 800fd30:	0800fddf 	.word	0x0800fddf
 800fd34:	0800fdcf 	.word	0x0800fdcf
 800fd38:	0800fdc9 	.word	0x0800fdc9
 800fd3c:	0800fdc3 	.word	0x0800fdc3
 800fd40:	0800fdbd 	.word	0x0800fdbd
 800fd44:	0800fdb7 	.word	0x0800fdb7
 800fd48:	0800fdb1 	.word	0x0800fdb1
 800fd4c:	0800fdab 	.word	0x0800fdab
 800fd50:	0800fda5 	.word	0x0800fda5
 800fd54:	0800fd9f 	.word	0x0800fd9f
 800fd58:	0800fd99 	.word	0x0800fd99
 800fd5c:	0800fd93 	.word	0x0800fd93
 800fd60:	0800fd8d 	.word	0x0800fd8d
 800fd64:	0800fd87 	.word	0x0800fd87
 800fd68:	0800fd81 	.word	0x0800fd81
 800fd6c:	0800fd7b 	.word	0x0800fd7b
 800fd70:	0800fd75 	.word	0x0800fd75
			//----a右スラローム----
			case -1:
				slalom_R90();
 800fd74:	f7f6 fe08 	bl	8006988 <slalom_R90>
				break;
 800fd78:	e0d1      	b.n	800ff1e <searchF4+0x41a>

			//----a左スラローム----
			case -2:
				slalom_L90();
 800fd7a:	f7f6 ff67 	bl	8006c4c <slalom_L90>
				break;
 800fd7e:	e0ce      	b.n	800ff1e <searchF4+0x41a>

			//----a大回り右90----
			case -3:
				Lslalom_R90();
 800fd80:	f7f7 f8bc 	bl	8006efc <Lslalom_R90>
				break;
 800fd84:	e0cb      	b.n	800ff1e <searchF4+0x41a>

			//----a大回り左90----
			case -4:
				Lslalom_L90();
 800fd86:	f7f7 f9ef 	bl	8007168 <Lslalom_L90>
				break;
 800fd8a:	e0c8      	b.n	800ff1e <searchF4+0x41a>

			//----a大回り右180----
			case -5:
				Lslalom_R180();
 800fd8c:	f7f7 fb16 	bl	80073bc <Lslalom_R180>
				break;
 800fd90:	e0c5      	b.n	800ff1e <searchF4+0x41a>

			//----a大回り左180----
			case -6:
				Lslalom_L180();
 800fd92:	f7f7 fc5f 	bl	8007654 <Lslalom_L180>
				break;
 800fd96:	e0c2      	b.n	800ff1e <searchF4+0x41a>

			//----a斜め右V45----
			case -7:
				v_R45();
 800fd98:	f7f7 fd9e 	bl	80078d8 <v_R45>
				break;
 800fd9c:	e0bf      	b.n	800ff1e <searchF4+0x41a>

			//----a斜め左V45----
			case -8:
				v_L45();
 800fd9e:	f7f7 ffd5 	bl	8007d4c <v_L45>
				break;
 800fda2:	e0bc      	b.n	800ff1e <searchF4+0x41a>

			//----a斜め右V90----
			case -9:
				v_R90();
 800fda4:	f7f8 fd20 	bl	80087e8 <v_R90>
				break;
 800fda8:	e0b9      	b.n	800ff1e <searchF4+0x41a>

			//----a斜め左V90----
			case -10:
				v_L90();
 800fdaa:	f7f8 fe0d 	bl	80089c8 <v_L90>
				break;
 800fdae:	e0b6      	b.n	800ff1e <searchF4+0x41a>

			//----a斜め右V135----
			case -11:
				v_R135();
 800fdb0:	f7f8 fef6 	bl	8008ba0 <v_R135>
				break;
 800fdb4:	e0b3      	b.n	800ff1e <searchF4+0x41a>

			//----a斜め左V135----
			case -12:
				v_L135();
 800fdb6:	f7f9 f931 	bl	800901c <v_L135>
				break;
 800fdba:	e0b0      	b.n	800ff1e <searchF4+0x41a>

			//----a斜め右V45Goal----
			case -13:
				v_R45D();
 800fdbc:	f7f8 f9fa 	bl	80081b4 <v_R45D>
				break;
 800fdc0:	e0ad      	b.n	800ff1e <searchF4+0x41a>

			//----a斜め左V45Goal----
			case -14:
				v_L45D();
 800fdc2:	f7f8 fb87 	bl	80084d4 <v_L45D>
				break;
 800fdc6:	e0aa      	b.n	800ff1e <searchF4+0x41a>

			//----a斜め右V135Goal----
			case -15:
				v_R135D();
 800fdc8:	f7f9 fb5c 	bl	8009484 <v_R135D>
				break;
 800fdcc:	e0a7      	b.n	800ff1e <searchF4+0x41a>

			//----a斜め左V135Goal----
			case -16:
				v_L135D();
 800fdce:	f7f9 fced 	bl	80097ac <v_L135D>
				break;
 800fdd2:	e0a4      	b.n	800ff1e <searchF4+0x41a>

			//----pass配列最後(なお本来呼び出される前にゴールする)----
			case -114:
				rotate_180();
 800fdd4:	f7f6 fd00 	bl	80067d8 <rotate_180>
				rotate_180();
 800fdd8:	f7f6 fcfe 	bl	80067d8 <rotate_180>
				while(1);
 800fddc:	e7fe      	b.n	800fddc <searchF4+0x2d8>
				break;

			//----a前進----
			default:
				if(pass[p_cnt-1] < 4){
 800fdde:	4b17      	ldr	r3, [pc, #92]	; (800fe3c <searchF4+0x338>)
 800fde0:	781b      	ldrb	r3, [r3, #0]
 800fde2:	3b01      	subs	r3, #1
 800fde4:	4a17      	ldr	r2, [pc, #92]	; (800fe44 <searchF4+0x340>)
 800fde6:	56d3      	ldrsb	r3, [r2, r3]
 800fde8:	2b03      	cmp	r3, #3
 800fdea:	dc11      	bgt.n	800fe10 <searchF4+0x30c>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800fdec:	2300      	movs	r3, #0
 800fdee:	60fb      	str	r3, [r7, #12]
 800fdf0:	e004      	b.n	800fdfc <searchF4+0x2f8>
						half_sectionU();
 800fdf2:	f7f6 f8bb 	bl	8005f6c <half_sectionU>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	3301      	adds	r3, #1
 800fdfa:	60fb      	str	r3, [r7, #12]
 800fdfc:	4b0f      	ldr	r3, [pc, #60]	; (800fe3c <searchF4+0x338>)
 800fdfe:	781b      	ldrb	r3, [r3, #0]
 800fe00:	3b01      	subs	r3, #1
 800fe02:	4a10      	ldr	r2, [pc, #64]	; (800fe44 <searchF4+0x340>)
 800fe04:	56d3      	ldrsb	r3, [r2, r3]
 800fe06:	461a      	mov	r2, r3
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	4293      	cmp	r3, r2
 800fe0c:	dbf1      	blt.n	800fdf2 <searchF4+0x2ee>
						p_cnt++;
					}else{
						half_sectionV();
					}
				}
				break;
 800fe0e:	e085      	b.n	800ff1c <searchF4+0x418>
				}else if(pass[p_cnt-1] < 64){
 800fe10:	4b0a      	ldr	r3, [pc, #40]	; (800fe3c <searchF4+0x338>)
 800fe12:	781b      	ldrb	r3, [r3, #0]
 800fe14:	3b01      	subs	r3, #1
 800fe16:	4a0b      	ldr	r2, [pc, #44]	; (800fe44 <searchF4+0x340>)
 800fe18:	56d3      	ldrsb	r3, [r2, r3]
 800fe1a:	2b3f      	cmp	r3, #63	; 0x3f
 800fe1c:	dc2e      	bgt.n	800fe7c <searchF4+0x378>
					one_sectionA();
 800fe1e:	f7f6 f8c5 	bl	8005fac <one_sectionA>
					MF2.FLAG.HACCEL = 1;
 800fe22:	4a0a      	ldr	r2, [pc, #40]	; (800fe4c <searchF4+0x348>)
 800fe24:	8813      	ldrh	r3, [r2, #0]
 800fe26:	f043 0302 	orr.w	r3, r3, #2
 800fe2a:	8013      	strh	r3, [r2, #0]
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	60bb      	str	r3, [r7, #8]
 800fe30:	e013      	b.n	800fe5a <searchF4+0x356>
 800fe32:	bf00      	nop
 800fe34:	20000fa8 	.word	0x20000fa8
 800fe38:	20000457 	.word	0x20000457
 800fe3c:	200002b0 	.word	0x200002b0
 800fe40:	2000164c 	.word	0x2000164c
 800fe44:	20000350 	.word	0x20000350
 800fe48:	20000c8c 	.word	0x20000c8c
 800fe4c:	20000fa4 	.word	0x20000fa4
						half_sectionU();
 800fe50:	f7f6 f88c 	bl	8005f6c <half_sectionU>
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800fe54:	68bb      	ldr	r3, [r7, #8]
 800fe56:	3301      	adds	r3, #1
 800fe58:	60bb      	str	r3, [r7, #8]
 800fe5a:	4b6a      	ldr	r3, [pc, #424]	; (8010004 <searchF4+0x500>)
 800fe5c:	781b      	ldrb	r3, [r3, #0]
 800fe5e:	3b01      	subs	r3, #1
 800fe60:	4a69      	ldr	r2, [pc, #420]	; (8010008 <searchF4+0x504>)
 800fe62:	56d3      	ldrsb	r3, [r2, r3]
 800fe64:	3b04      	subs	r3, #4
 800fe66:	68ba      	ldr	r2, [r7, #8]
 800fe68:	429a      	cmp	r2, r3
 800fe6a:	dbf1      	blt.n	800fe50 <searchF4+0x34c>
					one_sectionD();
 800fe6c:	f7f6 f928 	bl	80060c0 <one_sectionD>
					MF2.FLAG.HACCEL = 0;
 800fe70:	4a66      	ldr	r2, [pc, #408]	; (801000c <searchF4+0x508>)
 800fe72:	8813      	ldrh	r3, [r2, #0]
 800fe74:	f36f 0341 	bfc	r3, #1, #1
 800fe78:	8013      	strh	r3, [r2, #0]
				break;
 800fe7a:	e04f      	b.n	800ff1c <searchF4+0x418>
					if((pass[p_cnt] == 64) && (pass[p_cnt+1] == 64) && (pass[p_cnt+2] == 64) && (MF2.FLAG.HACCEL == 0)){
 800fe7c:	4b61      	ldr	r3, [pc, #388]	; (8010004 <searchF4+0x500>)
 800fe7e:	781b      	ldrb	r3, [r3, #0]
 800fe80:	461a      	mov	r2, r3
 800fe82:	4b61      	ldr	r3, [pc, #388]	; (8010008 <searchF4+0x504>)
 800fe84:	569b      	ldrsb	r3, [r3, r2]
 800fe86:	2b40      	cmp	r3, #64	; 0x40
 800fe88:	d122      	bne.n	800fed0 <searchF4+0x3cc>
 800fe8a:	4b5e      	ldr	r3, [pc, #376]	; (8010004 <searchF4+0x500>)
 800fe8c:	781b      	ldrb	r3, [r3, #0]
 800fe8e:	3301      	adds	r3, #1
 800fe90:	4a5d      	ldr	r2, [pc, #372]	; (8010008 <searchF4+0x504>)
 800fe92:	56d3      	ldrsb	r3, [r2, r3]
 800fe94:	2b40      	cmp	r3, #64	; 0x40
 800fe96:	d11b      	bne.n	800fed0 <searchF4+0x3cc>
 800fe98:	4b5a      	ldr	r3, [pc, #360]	; (8010004 <searchF4+0x500>)
 800fe9a:	781b      	ldrb	r3, [r3, #0]
 800fe9c:	3302      	adds	r3, #2
 800fe9e:	4a5a      	ldr	r2, [pc, #360]	; (8010008 <searchF4+0x504>)
 800fea0:	56d3      	ldrsb	r3, [r2, r3]
 800fea2:	2b40      	cmp	r3, #64	; 0x40
 800fea4:	d114      	bne.n	800fed0 <searchF4+0x3cc>
 800fea6:	4b59      	ldr	r3, [pc, #356]	; (801000c <searchF4+0x508>)
 800fea8:	881b      	ldrh	r3, [r3, #0]
 800feaa:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800feae:	b2db      	uxtb	r3, r3
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d10d      	bne.n	800fed0 <searchF4+0x3cc>
						one_sectionVA();
 800feb4:	f7f6 f9a0 	bl	80061f8 <one_sectionVA>
						MF2.FLAG.HACCEL = 1;
 800feb8:	4a54      	ldr	r2, [pc, #336]	; (801000c <searchF4+0x508>)
 800feba:	8813      	ldrh	r3, [r2, #0]
 800febc:	f043 0302 	orr.w	r3, r3, #2
 800fec0:	8013      	strh	r3, [r2, #0]
						p_cnt++;
 800fec2:	4b50      	ldr	r3, [pc, #320]	; (8010004 <searchF4+0x500>)
 800fec4:	781b      	ldrb	r3, [r3, #0]
 800fec6:	3301      	adds	r3, #1
 800fec8:	b2da      	uxtb	r2, r3
 800feca:	4b4e      	ldr	r3, [pc, #312]	; (8010004 <searchF4+0x500>)
 800fecc:	701a      	strb	r2, [r3, #0]
 800fece:	e025      	b.n	800ff1c <searchF4+0x418>
					else if((pass[p_cnt] == 64) && (pass[p_cnt+1] != 64) && (MF2.FLAG.HACCEL == 1)){
 800fed0:	4b4c      	ldr	r3, [pc, #304]	; (8010004 <searchF4+0x500>)
 800fed2:	781b      	ldrb	r3, [r3, #0]
 800fed4:	461a      	mov	r2, r3
 800fed6:	4b4c      	ldr	r3, [pc, #304]	; (8010008 <searchF4+0x504>)
 800fed8:	569b      	ldrsb	r3, [r3, r2]
 800feda:	2b40      	cmp	r3, #64	; 0x40
 800fedc:	d11b      	bne.n	800ff16 <searchF4+0x412>
 800fede:	4b49      	ldr	r3, [pc, #292]	; (8010004 <searchF4+0x500>)
 800fee0:	781b      	ldrb	r3, [r3, #0]
 800fee2:	3301      	adds	r3, #1
 800fee4:	4a48      	ldr	r2, [pc, #288]	; (8010008 <searchF4+0x504>)
 800fee6:	56d3      	ldrsb	r3, [r2, r3]
 800fee8:	2b40      	cmp	r3, #64	; 0x40
 800feea:	d014      	beq.n	800ff16 <searchF4+0x412>
 800feec:	4b47      	ldr	r3, [pc, #284]	; (801000c <searchF4+0x508>)
 800feee:	881b      	ldrh	r3, [r3, #0]
 800fef0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800fef4:	b2db      	uxtb	r3, r3
 800fef6:	2b01      	cmp	r3, #1
 800fef8:	d10d      	bne.n	800ff16 <searchF4+0x412>
						one_sectionVD();
 800fefa:	f7f6 fa03 	bl	8006304 <one_sectionVD>
						MF2.FLAG.HACCEL = 0;
 800fefe:	4a43      	ldr	r2, [pc, #268]	; (801000c <searchF4+0x508>)
 800ff00:	8813      	ldrh	r3, [r2, #0]
 800ff02:	f36f 0341 	bfc	r3, #1, #1
 800ff06:	8013      	strh	r3, [r2, #0]
						p_cnt++;
 800ff08:	4b3e      	ldr	r3, [pc, #248]	; (8010004 <searchF4+0x500>)
 800ff0a:	781b      	ldrb	r3, [r3, #0]
 800ff0c:	3301      	adds	r3, #1
 800ff0e:	b2da      	uxtb	r2, r3
 800ff10:	4b3c      	ldr	r3, [pc, #240]	; (8010004 <searchF4+0x500>)
 800ff12:	701a      	strb	r2, [r3, #0]
 800ff14:	e002      	b.n	800ff1c <searchF4+0x418>
						half_sectionV();
 800ff16:	f7f6 f835 	bl	8005f84 <half_sectionV>
				break;
 800ff1a:	e7ff      	b.n	800ff1c <searchF4+0x418>
 800ff1c:	bf00      	nop
		}

	}while(pass[p_cnt] != -114);
 800ff1e:	4b39      	ldr	r3, [pc, #228]	; (8010004 <searchF4+0x500>)
 800ff20:	781b      	ldrb	r3, [r3, #0]
 800ff22:	461a      	mov	r2, r3
 800ff24:	4b38      	ldr	r3, [pc, #224]	; (8010008 <searchF4+0x504>)
 800ff26:	569b      	ldrsb	r3, [r3, r2]
 800ff28:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800ff2c:	f47f ae2e 	bne.w	800fb8c <searchF4+0x88>

	mouse.x = goal_x;
 800ff30:	4b37      	ldr	r3, [pc, #220]	; (8010010 <searchF4+0x50c>)
 800ff32:	781a      	ldrb	r2, [r3, #0]
 800ff34:	4b37      	ldr	r3, [pc, #220]	; (8010014 <searchF4+0x510>)
 800ff36:	701a      	strb	r2, [r3, #0]
	mouse.y = goal_y;
 800ff38:	4b37      	ldr	r3, [pc, #220]	; (8010018 <searchF4+0x514>)
 800ff3a:	781a      	ldrb	r2, [r3, #0]
 800ff3c:	4b35      	ldr	r3, [pc, #212]	; (8010014 <searchF4+0x510>)
 800ff3e:	705a      	strb	r2, [r3, #1]
	mouse.dir = mouse.dir / 2;
 800ff40:	4b34      	ldr	r3, [pc, #208]	; (8010014 <searchF4+0x510>)
 800ff42:	789b      	ldrb	r3, [r3, #2]
 800ff44:	b2db      	uxtb	r3, r3
 800ff46:	085b      	lsrs	r3, r3, #1
 800ff48:	b2da      	uxtb	r2, r3
 800ff4a:	4b32      	ldr	r3, [pc, #200]	; (8010014 <searchF4+0x510>)
 800ff4c:	709a      	strb	r2, [r3, #2]
	MF.FLAG.XDIR = 0;
 800ff4e:	4a33      	ldr	r2, [pc, #204]	; (801001c <searchF4+0x518>)
 800ff50:	8813      	ldrh	r3, [r2, #0]
 800ff52:	f36f 330c 	bfc	r3, #12, #1
 800ff56:	8013      	strh	r3, [r2, #0]

	if(pass[p_cnt-1] != -13 && pass[p_cnt-1] != -14 && pass[p_cnt-1] != -15 && pass[p_cnt-1] != -16){
 800ff58:	4b2a      	ldr	r3, [pc, #168]	; (8010004 <searchF4+0x500>)
 800ff5a:	781b      	ldrb	r3, [r3, #0]
 800ff5c:	3b01      	subs	r3, #1
 800ff5e:	4a2a      	ldr	r2, [pc, #168]	; (8010008 <searchF4+0x504>)
 800ff60:	56d3      	ldrsb	r3, [r2, r3]
 800ff62:	f113 0f0d 	cmn.w	r3, #13
 800ff66:	d02c      	beq.n	800ffc2 <searchF4+0x4be>
 800ff68:	4b26      	ldr	r3, [pc, #152]	; (8010004 <searchF4+0x500>)
 800ff6a:	781b      	ldrb	r3, [r3, #0]
 800ff6c:	3b01      	subs	r3, #1
 800ff6e:	4a26      	ldr	r2, [pc, #152]	; (8010008 <searchF4+0x504>)
 800ff70:	56d3      	ldrsb	r3, [r2, r3]
 800ff72:	f113 0f0e 	cmn.w	r3, #14
 800ff76:	d024      	beq.n	800ffc2 <searchF4+0x4be>
 800ff78:	4b22      	ldr	r3, [pc, #136]	; (8010004 <searchF4+0x500>)
 800ff7a:	781b      	ldrb	r3, [r3, #0]
 800ff7c:	3b01      	subs	r3, #1
 800ff7e:	4a22      	ldr	r2, [pc, #136]	; (8010008 <searchF4+0x504>)
 800ff80:	56d3      	ldrsb	r3, [r2, r3]
 800ff82:	f113 0f0f 	cmn.w	r3, #15
 800ff86:	d01c      	beq.n	800ffc2 <searchF4+0x4be>
 800ff88:	4b1e      	ldr	r3, [pc, #120]	; (8010004 <searchF4+0x500>)
 800ff8a:	781b      	ldrb	r3, [r3, #0]
 800ff8c:	3b01      	subs	r3, #1
 800ff8e:	4a1e      	ldr	r2, [pc, #120]	; (8010008 <searchF4+0x504>)
 800ff90:	56d3      	ldrsb	r3, [r2, r3]
 800ff92:	f113 0f10 	cmn.w	r3, #16
 800ff96:	d014      	beq.n	800ffc2 <searchF4+0x4be>
		for(int j=0; j<goal_mode-1; j++){
 800ff98:	2300      	movs	r3, #0
 800ff9a:	607b      	str	r3, [r7, #4]
 800ff9c:	e006      	b.n	800ffac <searchF4+0x4a8>
			one_sectionU();
 800ff9e:	f7f6 fa49 	bl	8006434 <one_sectionU>
			adv_pos();
 800ffa2:	f000 f841 	bl	8010028 <adv_pos>
		for(int j=0; j<goal_mode-1; j++){
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	3301      	adds	r3, #1
 800ffaa:	607b      	str	r3, [r7, #4]
 800ffac:	4b1c      	ldr	r3, [pc, #112]	; (8010020 <searchF4+0x51c>)
 800ffae:	781b      	ldrb	r3, [r3, #0]
 800ffb0:	3b01      	subs	r3, #1
 800ffb2:	687a      	ldr	r2, [r7, #4]
 800ffb4:	429a      	cmp	r2, r3
 800ffb6:	dbf2      	blt.n	800ff9e <searchF4+0x49a>
		}
		half_sectionD();
 800ffb8:	f7f5 febe 	bl	8005d38 <half_sectionD>
		set_positionF();
 800ffbc:	f7f5 fd06 	bl	80059cc <set_positionF>
 800ffc0:	e00f      	b.n	800ffe2 <searchF4+0x4de>
	}else{														//a減速斜めでgoalする場合
		for(int j=0; j<goal_mode-1; j++){
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	603b      	str	r3, [r7, #0]
 800ffc6:	e006      	b.n	800ffd6 <searchF4+0x4d2>
			one_section();
 800ffc8:	f7f5 ffe8 	bl	8005f9c <one_section>
			adv_pos();
 800ffcc:	f000 f82c 	bl	8010028 <adv_pos>
		for(int j=0; j<goal_mode-1; j++){
 800ffd0:	683b      	ldr	r3, [r7, #0]
 800ffd2:	3301      	adds	r3, #1
 800ffd4:	603b      	str	r3, [r7, #0]
 800ffd6:	4b12      	ldr	r3, [pc, #72]	; (8010020 <searchF4+0x51c>)
 800ffd8:	781b      	ldrb	r3, [r3, #0]
 800ffda:	3b01      	subs	r3, #1
 800ffdc:	683a      	ldr	r2, [r7, #0]
 800ffde:	429a      	cmp	r2, r3
 800ffe0:	dbf2      	blt.n	800ffc8 <searchF4+0x4c4>
		}
	}
	HAL_Delay(500);
 800ffe2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ffe6:	f7f1 f819 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800ffea:	f7f6 fbf5 	bl	80067d8 <rotate_180>
//	driveC2(SETPOS_BACK); 							        //a尻を当てる程度に後退。回転後に停止する
//	degree_z = target_degree_z;
//	start_mode = 0;
	start_mode = 1;
 800ffee:	4b0d      	ldr	r3, [pc, #52]	; (8010024 <searchF4+0x520>)
 800fff0:	2201      	movs	r2, #1
 800fff2:	701a      	strb	r2, [r3, #0]
	goal_mode = 1;
 800fff4:	4b0a      	ldr	r3, [pc, #40]	; (8010020 <searchF4+0x51c>)
 800fff6:	2201      	movs	r2, #1
 800fff8:	701a      	strb	r2, [r3, #0]
}
 800fffa:	bf00      	nop
 800fffc:	3710      	adds	r7, #16
 800fffe:	46bd      	mov	sp, r7
 8010000:	bd80      	pop	{r7, pc}
 8010002:	bf00      	nop
 8010004:	200002b0 	.word	0x200002b0
 8010008:	20000350 	.word	0x20000350
 801000c:	20000fa4 	.word	0x20000fa4
 8010010:	20000c30 	.word	0x20000c30
 8010014:	20000c8c 	.word	0x20000c8c
 8010018:	20000b8c 	.word	0x20000b8c
 801001c:	20000fa8 	.word	0x20000fa8
 8010020:	20000c31 	.word	0x20000c31
 8010024:	2000164c 	.word	0x2000164c

08010028 <adv_pos>:
//adv_pos
//aマイクロマウス内部位置情報で前進させる
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void adv_pos(){
 8010028:	b480      	push	{r7}
 801002a:	af00      	add	r7, sp, #0

	switch(mouse.dir){										//aマイクロマウスが現在向いている方向で判定
 801002c:	4b1a      	ldr	r3, [pc, #104]	; (8010098 <adv_pos+0x70>)
 801002e:	789b      	ldrb	r3, [r3, #2]
 8010030:	b2db      	uxtb	r3, r3
 8010032:	2b03      	cmp	r3, #3
 8010034:	d82a      	bhi.n	801008c <adv_pos+0x64>
 8010036:	a201      	add	r2, pc, #4	; (adr r2, 801003c <adv_pos+0x14>)
 8010038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801003c:	0801004d 	.word	0x0801004d
 8010040:	0801005d 	.word	0x0801005d
 8010044:	0801006d 	.word	0x0801006d
 8010048:	0801007d 	.word	0x0801007d
	case 0x00:												//a北方向に向いている場合
		mouse.y++;											//Y座標をインクリメント
 801004c:	4b12      	ldr	r3, [pc, #72]	; (8010098 <adv_pos+0x70>)
 801004e:	785b      	ldrb	r3, [r3, #1]
 8010050:	b2db      	uxtb	r3, r3
 8010052:	3301      	adds	r3, #1
 8010054:	b2da      	uxtb	r2, r3
 8010056:	4b10      	ldr	r3, [pc, #64]	; (8010098 <adv_pos+0x70>)
 8010058:	705a      	strb	r2, [r3, #1]
		break;
 801005a:	e017      	b.n	801008c <adv_pos+0x64>
	case 0x01:												//a東方向に向いている場合
		mouse.x++;											//X座標をインクリメント
 801005c:	4b0e      	ldr	r3, [pc, #56]	; (8010098 <adv_pos+0x70>)
 801005e:	781b      	ldrb	r3, [r3, #0]
 8010060:	b2db      	uxtb	r3, r3
 8010062:	3301      	adds	r3, #1
 8010064:	b2da      	uxtb	r2, r3
 8010066:	4b0c      	ldr	r3, [pc, #48]	; (8010098 <adv_pos+0x70>)
 8010068:	701a      	strb	r2, [r3, #0]
		break;
 801006a:	e00f      	b.n	801008c <adv_pos+0x64>
	case 0x02:												//a南方向に向いている場合
		mouse.y--;											//Y座標をデクリメント
 801006c:	4b0a      	ldr	r3, [pc, #40]	; (8010098 <adv_pos+0x70>)
 801006e:	785b      	ldrb	r3, [r3, #1]
 8010070:	b2db      	uxtb	r3, r3
 8010072:	3b01      	subs	r3, #1
 8010074:	b2da      	uxtb	r2, r3
 8010076:	4b08      	ldr	r3, [pc, #32]	; (8010098 <adv_pos+0x70>)
 8010078:	705a      	strb	r2, [r3, #1]
		break;
 801007a:	e007      	b.n	801008c <adv_pos+0x64>
	case 0x03:												//a西方向に向いている場合
		mouse.x--;											//X座標をデクリメント
 801007c:	4b06      	ldr	r3, [pc, #24]	; (8010098 <adv_pos+0x70>)
 801007e:	781b      	ldrb	r3, [r3, #0]
 8010080:	b2db      	uxtb	r3, r3
 8010082:	3b01      	subs	r3, #1
 8010084:	b2da      	uxtb	r2, r3
 8010086:	4b04      	ldr	r3, [pc, #16]	; (8010098 <adv_pos+0x70>)
 8010088:	701a      	strb	r2, [r3, #0]
		break;
 801008a:	bf00      	nop
	}
}
 801008c:	bf00      	nop
 801008e:	46bd      	mov	sp, r7
 8010090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010094:	4770      	bx	lr
 8010096:	bf00      	nop
 8010098:	20000c8c 	.word	0x20000c8c

0801009c <conf_route>:
//conf_route
//a進路を判定する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void conf_route(){
 801009c:	b580      	push	{r7, lr}
 801009e:	af00      	add	r7, sp, #0

	//----a壁情報書き込み----
	write_map();
 80100a0:	f000 f886 	bl	80101b0 <write_map>

	//----a最短経路上に壁があれば進路変更----
	if(wall_info & route[r_cnt]){
 80100a4:	4b09      	ldr	r3, [pc, #36]	; (80100cc <conf_route+0x30>)
 80100a6:	781b      	ldrb	r3, [r3, #0]
 80100a8:	461a      	mov	r2, r3
 80100aa:	4b09      	ldr	r3, [pc, #36]	; (80100d0 <conf_route+0x34>)
 80100ac:	5c9a      	ldrb	r2, [r3, r2]
 80100ae:	4b09      	ldr	r3, [pc, #36]	; (80100d4 <conf_route+0x38>)
 80100b0:	781b      	ldrb	r3, [r3, #0]
 80100b2:	4013      	ands	r3, r2
 80100b4:	b2db      	uxtb	r3, r3
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d006      	beq.n	80100c8 <conf_route+0x2c>
		make_smap();										//a歩数マップを更新
 80100ba:	f000 fa6d 	bl	8010598 <make_smap>
		make_route();										//a最短経路を更新
 80100be:	f000 fe29 	bl	8010d14 <make_route>
		r_cnt = 0;											//a経路カウンタを0に
 80100c2:	4b02      	ldr	r3, [pc, #8]	; (80100cc <conf_route+0x30>)
 80100c4:	2200      	movs	r2, #0
 80100c6:	701a      	strb	r2, [r3, #0]
	}
}
 80100c8:	bf00      	nop
 80100ca:	bd80      	pop	{r7, pc}
 80100cc:	20001654 	.word	0x20001654
 80100d0:	20000c94 	.word	0x20000c94
 80100d4:	200002c8 	.word	0x200002c8

080100d8 <map_Init>:
//map_Init
//aマップ格納配列map[][]の初期化をする
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void map_Init(){
 80100d8:	b480      	push	{r7}
 80100da:	b083      	sub	sp, #12
 80100dc:	af00      	add	r7, sp, #0
	//====a変数宣言====
	uint8_t x, y;											//for文用変数

	//====a初期化開始====
	//aマップのクリア
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 80100de:	2300      	movs	r3, #0
 80100e0:	71bb      	strb	r3, [r7, #6]
 80100e2:	e013      	b.n	801010c <map_Init+0x34>
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 80100e4:	2300      	movs	r3, #0
 80100e6:	71fb      	strb	r3, [r7, #7]
 80100e8:	e00a      	b.n	8010100 <map_Init+0x28>
			map[y][x] = 0xf0;								//a上位4ビット（2次走行時）を壁あり，下位4ビット（1次走行時）を壁なしとする。
 80100ea:	79ba      	ldrb	r2, [r7, #6]
 80100ec:	79fb      	ldrb	r3, [r7, #7]
 80100ee:	492f      	ldr	r1, [pc, #188]	; (80101ac <map_Init+0xd4>)
 80100f0:	0112      	lsls	r2, r2, #4
 80100f2:	440a      	add	r2, r1
 80100f4:	4413      	add	r3, r2
 80100f6:	22f0      	movs	r2, #240	; 0xf0
 80100f8:	701a      	strb	r2, [r3, #0]
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 80100fa:	79fb      	ldrb	r3, [r7, #7]
 80100fc:	3301      	adds	r3, #1
 80100fe:	71fb      	strb	r3, [r7, #7]
 8010100:	79fb      	ldrb	r3, [r7, #7]
 8010102:	2b0f      	cmp	r3, #15
 8010104:	d9f1      	bls.n	80100ea <map_Init+0x12>
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 8010106:	79bb      	ldrb	r3, [r7, #6]
 8010108:	3301      	adds	r3, #1
 801010a:	71bb      	strb	r3, [r7, #6]
 801010c:	79bb      	ldrb	r3, [r7, #6]
 801010e:	2b0f      	cmp	r3, #15
 8010110:	d9e8      	bls.n	80100e4 <map_Init+0xc>
		}
	}

	//a確定壁の配置
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 8010112:	2300      	movs	r3, #0
 8010114:	71bb      	strb	r3, [r7, #6]
 8010116:	e020      	b.n	801015a <map_Init+0x82>
		map[y][0] |= 0xf1;									//a最西に壁を配置
 8010118:	79bb      	ldrb	r3, [r7, #6]
 801011a:	4a24      	ldr	r2, [pc, #144]	; (80101ac <map_Init+0xd4>)
 801011c:	011b      	lsls	r3, r3, #4
 801011e:	4413      	add	r3, r2
 8010120:	781a      	ldrb	r2, [r3, #0]
 8010122:	79bb      	ldrb	r3, [r7, #6]
 8010124:	f062 020e 	orn	r2, r2, #14
 8010128:	b2d1      	uxtb	r1, r2
 801012a:	4a20      	ldr	r2, [pc, #128]	; (80101ac <map_Init+0xd4>)
 801012c:	011b      	lsls	r3, r3, #4
 801012e:	4413      	add	r3, r2
 8010130:	460a      	mov	r2, r1
 8010132:	701a      	strb	r2, [r3, #0]
		map[y][15] |= 0xf4;									//a最東に壁を配置
 8010134:	79bb      	ldrb	r3, [r7, #6]
 8010136:	4a1d      	ldr	r2, [pc, #116]	; (80101ac <map_Init+0xd4>)
 8010138:	011b      	lsls	r3, r3, #4
 801013a:	4413      	add	r3, r2
 801013c:	330f      	adds	r3, #15
 801013e:	781a      	ldrb	r2, [r3, #0]
 8010140:	79bb      	ldrb	r3, [r7, #6]
 8010142:	f062 020b 	orn	r2, r2, #11
 8010146:	b2d1      	uxtb	r1, r2
 8010148:	4a18      	ldr	r2, [pc, #96]	; (80101ac <map_Init+0xd4>)
 801014a:	011b      	lsls	r3, r3, #4
 801014c:	4413      	add	r3, r2
 801014e:	330f      	adds	r3, #15
 8010150:	460a      	mov	r2, r1
 8010152:	701a      	strb	r2, [r3, #0]
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 8010154:	79bb      	ldrb	r3, [r7, #6]
 8010156:	3301      	adds	r3, #1
 8010158:	71bb      	strb	r3, [r7, #6]
 801015a:	79bb      	ldrb	r3, [r7, #6]
 801015c:	2b0f      	cmp	r3, #15
 801015e:	d9db      	bls.n	8010118 <map_Init+0x40>
	}
	for(x = 0; x <= 15; x++){								//a各X座標で実行
 8010160:	2300      	movs	r3, #0
 8010162:	71fb      	strb	r3, [r7, #7]
 8010164:	e019      	b.n	801019a <map_Init+0xc2>
		map[0][x] |= 0xf2;									//a最南に壁を配置
 8010166:	79fb      	ldrb	r3, [r7, #7]
 8010168:	4a10      	ldr	r2, [pc, #64]	; (80101ac <map_Init+0xd4>)
 801016a:	5cd2      	ldrb	r2, [r2, r3]
 801016c:	79fb      	ldrb	r3, [r7, #7]
 801016e:	f062 020d 	orn	r2, r2, #13
 8010172:	b2d1      	uxtb	r1, r2
 8010174:	4a0d      	ldr	r2, [pc, #52]	; (80101ac <map_Init+0xd4>)
 8010176:	54d1      	strb	r1, [r2, r3]
		map[15][x] |= 0xf8;									//a最北に壁を配置
 8010178:	79fb      	ldrb	r3, [r7, #7]
 801017a:	4a0c      	ldr	r2, [pc, #48]	; (80101ac <map_Init+0xd4>)
 801017c:	4413      	add	r3, r2
 801017e:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 8010182:	79fb      	ldrb	r3, [r7, #7]
 8010184:	f062 0207 	orn	r2, r2, #7
 8010188:	b2d1      	uxtb	r1, r2
 801018a:	4a08      	ldr	r2, [pc, #32]	; (80101ac <map_Init+0xd4>)
 801018c:	4413      	add	r3, r2
 801018e:	460a      	mov	r2, r1
 8010190:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	for(x = 0; x <= 15; x++){								//a各X座標で実行
 8010194:	79fb      	ldrb	r3, [r7, #7]
 8010196:	3301      	adds	r3, #1
 8010198:	71fb      	strb	r3, [r7, #7]
 801019a:	79fb      	ldrb	r3, [r7, #7]
 801019c:	2b0f      	cmp	r3, #15
 801019e:	d9e2      	bls.n	8010166 <map_Init+0x8e>
	}
}
 80101a0:	bf00      	nop
 80101a2:	370c      	adds	r7, #12
 80101a4:	46bd      	mov	sp, r7
 80101a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101aa:	4770      	bx	lr
 80101ac:	200001ac 	.word	0x200001ac

080101b0 <write_map>:
//write_map
//aマップデータを書き込む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void write_map(){
 80101b0:	b490      	push	{r4, r7}
 80101b2:	b082      	sub	sp, #8
 80101b4:	af00      	add	r7, sp, #0

	//====a変数宣言====
	uint8_t m_temp;											//a向きを補正した壁情報

	//====a壁情報の補正格納====
	m_temp = (wall_info >> mouse.dir) & 0x0f;				//aセンサ壁情報をmouse.dirで向きを補正させて下位4bit分を残す
 80101b6:	4b8f      	ldr	r3, [pc, #572]	; (80103f4 <write_map+0x244>)
 80101b8:	781b      	ldrb	r3, [r3, #0]
 80101ba:	461a      	mov	r2, r3
 80101bc:	4b8e      	ldr	r3, [pc, #568]	; (80103f8 <write_map+0x248>)
 80101be:	789b      	ldrb	r3, [r3, #2]
 80101c0:	b2db      	uxtb	r3, r3
 80101c2:	fa42 f303 	asr.w	r3, r2, r3
 80101c6:	b2db      	uxtb	r3, r3
 80101c8:	f003 030f 	and.w	r3, r3, #15
 80101cc:	71fb      	strb	r3, [r7, #7]
	m_temp |= (m_temp << 4);								//a上位4bitに下位4bitをコピー。この作業でm_tempにNESW順で壁が格納
 80101ce:	79fb      	ldrb	r3, [r7, #7]
 80101d0:	011b      	lsls	r3, r3, #4
 80101d2:	b25a      	sxtb	r2, r3
 80101d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80101d8:	4313      	orrs	r3, r2
 80101da:	b25b      	sxtb	r3, r3
 80101dc:	71fb      	strb	r3, [r7, #7]

	//====aデータの書き込み====
	map[mouse.y][mouse.x] = m_temp; 						//a現在地に壁情報書き込み
 80101de:	4b86      	ldr	r3, [pc, #536]	; (80103f8 <write_map+0x248>)
 80101e0:	785b      	ldrb	r3, [r3, #1]
 80101e2:	b2db      	uxtb	r3, r3
 80101e4:	4618      	mov	r0, r3
 80101e6:	4b84      	ldr	r3, [pc, #528]	; (80103f8 <write_map+0x248>)
 80101e8:	781b      	ldrb	r3, [r3, #0]
 80101ea:	b2db      	uxtb	r3, r3
 80101ec:	4619      	mov	r1, r3
 80101ee:	4a83      	ldr	r2, [pc, #524]	; (80103fc <write_map+0x24c>)
 80101f0:	0103      	lsls	r3, r0, #4
 80101f2:	4413      	add	r3, r2
 80101f4:	440b      	add	r3, r1
 80101f6:	79fa      	ldrb	r2, [r7, #7]
 80101f8:	701a      	strb	r2, [r3, #0]
	//----a周辺に書き込む----
	//a北側について
	if(mouse.y != 15){										//a現在最北端でないとき
 80101fa:	4b7f      	ldr	r3, [pc, #508]	; (80103f8 <write_map+0x248>)
 80101fc:	785b      	ldrb	r3, [r3, #1]
 80101fe:	b2db      	uxtb	r3, r3
 8010200:	2b0f      	cmp	r3, #15
 8010202:	d039      	beq.n	8010278 <write_map+0xc8>
		if(m_temp & 0x88){									//a北壁がある場合
 8010204:	79fb      	ldrb	r3, [r7, #7]
 8010206:	f003 0388 	and.w	r3, r3, #136	; 0x88
 801020a:	2b00      	cmp	r3, #0
 801020c:	d01a      	beq.n	8010244 <write_map+0x94>
			map[mouse.y + 1][mouse.x] |= 0x22;				//a北側の区画から見て南壁ありを書き込む
 801020e:	4b7a      	ldr	r3, [pc, #488]	; (80103f8 <write_map+0x248>)
 8010210:	785b      	ldrb	r3, [r3, #1]
 8010212:	b2d8      	uxtb	r0, r3
 8010214:	4603      	mov	r3, r0
 8010216:	3301      	adds	r3, #1
 8010218:	4a77      	ldr	r2, [pc, #476]	; (80103f8 <write_map+0x248>)
 801021a:	7812      	ldrb	r2, [r2, #0]
 801021c:	b2d1      	uxtb	r1, r2
 801021e:	460c      	mov	r4, r1
 8010220:	4a76      	ldr	r2, [pc, #472]	; (80103fc <write_map+0x24c>)
 8010222:	011b      	lsls	r3, r3, #4
 8010224:	4413      	add	r3, r2
 8010226:	4423      	add	r3, r4
 8010228:	781a      	ldrb	r2, [r3, #0]
 801022a:	4603      	mov	r3, r0
 801022c:	3301      	adds	r3, #1
 801022e:	4608      	mov	r0, r1
 8010230:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 8010234:	b2d1      	uxtb	r1, r2
 8010236:	4a71      	ldr	r2, [pc, #452]	; (80103fc <write_map+0x24c>)
 8010238:	011b      	lsls	r3, r3, #4
 801023a:	4413      	add	r3, r2
 801023c:	4403      	add	r3, r0
 801023e:	460a      	mov	r2, r1
 8010240:	701a      	strb	r2, [r3, #0]
 8010242:	e019      	b.n	8010278 <write_map+0xc8>
		}else{												//a北壁がない場合
			map[mouse.y + 1][mouse.x] &= 0xDD;				//a北側の区画から見て南壁なしを書き込む
 8010244:	4b6c      	ldr	r3, [pc, #432]	; (80103f8 <write_map+0x248>)
 8010246:	785b      	ldrb	r3, [r3, #1]
 8010248:	b2d8      	uxtb	r0, r3
 801024a:	4603      	mov	r3, r0
 801024c:	3301      	adds	r3, #1
 801024e:	4a6a      	ldr	r2, [pc, #424]	; (80103f8 <write_map+0x248>)
 8010250:	7812      	ldrb	r2, [r2, #0]
 8010252:	b2d1      	uxtb	r1, r2
 8010254:	460c      	mov	r4, r1
 8010256:	4a69      	ldr	r2, [pc, #420]	; (80103fc <write_map+0x24c>)
 8010258:	011b      	lsls	r3, r3, #4
 801025a:	4413      	add	r3, r2
 801025c:	4423      	add	r3, r4
 801025e:	781a      	ldrb	r2, [r3, #0]
 8010260:	4603      	mov	r3, r0
 8010262:	3301      	adds	r3, #1
 8010264:	4608      	mov	r0, r1
 8010266:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 801026a:	b2d1      	uxtb	r1, r2
 801026c:	4a63      	ldr	r2, [pc, #396]	; (80103fc <write_map+0x24c>)
 801026e:	011b      	lsls	r3, r3, #4
 8010270:	4413      	add	r3, r2
 8010272:	4403      	add	r3, r0
 8010274:	460a      	mov	r2, r1
 8010276:	701a      	strb	r2, [r3, #0]
		}
	}
	//a東側について
	if(mouse.x != 15){										//a現在最東端でないとき
 8010278:	4b5f      	ldr	r3, [pc, #380]	; (80103f8 <write_map+0x248>)
 801027a:	781b      	ldrb	r3, [r3, #0]
 801027c:	b2db      	uxtb	r3, r3
 801027e:	2b0f      	cmp	r3, #15
 8010280:	d037      	beq.n	80102f2 <write_map+0x142>
		if(m_temp & 0x44){									//a東壁がある場合
 8010282:	79fb      	ldrb	r3, [r7, #7]
 8010284:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010288:	2b00      	cmp	r3, #0
 801028a:	d019      	beq.n	80102c0 <write_map+0x110>
			map[mouse.y][mouse.x + 1] |= 0x11;				//a東側の区画から見て西壁ありを書き込む
 801028c:	4b5a      	ldr	r3, [pc, #360]	; (80103f8 <write_map+0x248>)
 801028e:	785b      	ldrb	r3, [r3, #1]
 8010290:	b2dc      	uxtb	r4, r3
 8010292:	4622      	mov	r2, r4
 8010294:	4b58      	ldr	r3, [pc, #352]	; (80103f8 <write_map+0x248>)
 8010296:	781b      	ldrb	r3, [r3, #0]
 8010298:	b2d8      	uxtb	r0, r3
 801029a:	4603      	mov	r3, r0
 801029c:	3301      	adds	r3, #1
 801029e:	4957      	ldr	r1, [pc, #348]	; (80103fc <write_map+0x24c>)
 80102a0:	0112      	lsls	r2, r2, #4
 80102a2:	440a      	add	r2, r1
 80102a4:	4413      	add	r3, r2
 80102a6:	781a      	ldrb	r2, [r3, #0]
 80102a8:	4603      	mov	r3, r0
 80102aa:	3301      	adds	r3, #1
 80102ac:	f042 0211 	orr.w	r2, r2, #17
 80102b0:	b2d0      	uxtb	r0, r2
 80102b2:	4952      	ldr	r1, [pc, #328]	; (80103fc <write_map+0x24c>)
 80102b4:	0122      	lsls	r2, r4, #4
 80102b6:	440a      	add	r2, r1
 80102b8:	4413      	add	r3, r2
 80102ba:	4602      	mov	r2, r0
 80102bc:	701a      	strb	r2, [r3, #0]
 80102be:	e018      	b.n	80102f2 <write_map+0x142>
		}else{												//a北壁がない場合
			map[mouse.y][mouse.x + 1] &= 0xEE;				//a東側の区画から見て西壁なしを書き込む
 80102c0:	4b4d      	ldr	r3, [pc, #308]	; (80103f8 <write_map+0x248>)
 80102c2:	785b      	ldrb	r3, [r3, #1]
 80102c4:	b2dc      	uxtb	r4, r3
 80102c6:	4622      	mov	r2, r4
 80102c8:	4b4b      	ldr	r3, [pc, #300]	; (80103f8 <write_map+0x248>)
 80102ca:	781b      	ldrb	r3, [r3, #0]
 80102cc:	b2d8      	uxtb	r0, r3
 80102ce:	4603      	mov	r3, r0
 80102d0:	3301      	adds	r3, #1
 80102d2:	494a      	ldr	r1, [pc, #296]	; (80103fc <write_map+0x24c>)
 80102d4:	0112      	lsls	r2, r2, #4
 80102d6:	440a      	add	r2, r1
 80102d8:	4413      	add	r3, r2
 80102da:	781a      	ldrb	r2, [r3, #0]
 80102dc:	4603      	mov	r3, r0
 80102de:	3301      	adds	r3, #1
 80102e0:	f022 0211 	bic.w	r2, r2, #17
 80102e4:	b2d0      	uxtb	r0, r2
 80102e6:	4945      	ldr	r1, [pc, #276]	; (80103fc <write_map+0x24c>)
 80102e8:	0122      	lsls	r2, r4, #4
 80102ea:	440a      	add	r2, r1
 80102ec:	4413      	add	r3, r2
 80102ee:	4602      	mov	r2, r0
 80102f0:	701a      	strb	r2, [r3, #0]
		}
	}
	//a南壁について
	if(mouse.y != 0){										//a現在最南端でないとき
 80102f2:	4b41      	ldr	r3, [pc, #260]	; (80103f8 <write_map+0x248>)
 80102f4:	785b      	ldrb	r3, [r3, #1]
 80102f6:	b2db      	uxtb	r3, r3
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d039      	beq.n	8010370 <write_map+0x1c0>
		if(m_temp & 0x22){									//a南壁がある場合
 80102fc:	79fb      	ldrb	r3, [r7, #7]
 80102fe:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8010302:	2b00      	cmp	r3, #0
 8010304:	d01a      	beq.n	801033c <write_map+0x18c>
			map[mouse.y - 1][mouse.x] |= 0x88;				//a南側の区画から見て北壁ありを書き込む
 8010306:	4b3c      	ldr	r3, [pc, #240]	; (80103f8 <write_map+0x248>)
 8010308:	785b      	ldrb	r3, [r3, #1]
 801030a:	b2d8      	uxtb	r0, r3
 801030c:	4603      	mov	r3, r0
 801030e:	3b01      	subs	r3, #1
 8010310:	4a39      	ldr	r2, [pc, #228]	; (80103f8 <write_map+0x248>)
 8010312:	7812      	ldrb	r2, [r2, #0]
 8010314:	b2d1      	uxtb	r1, r2
 8010316:	460c      	mov	r4, r1
 8010318:	4a38      	ldr	r2, [pc, #224]	; (80103fc <write_map+0x24c>)
 801031a:	011b      	lsls	r3, r3, #4
 801031c:	4413      	add	r3, r2
 801031e:	4423      	add	r3, r4
 8010320:	781a      	ldrb	r2, [r3, #0]
 8010322:	4603      	mov	r3, r0
 8010324:	3b01      	subs	r3, #1
 8010326:	4608      	mov	r0, r1
 8010328:	f062 0277 	orn	r2, r2, #119	; 0x77
 801032c:	b2d1      	uxtb	r1, r2
 801032e:	4a33      	ldr	r2, [pc, #204]	; (80103fc <write_map+0x24c>)
 8010330:	011b      	lsls	r3, r3, #4
 8010332:	4413      	add	r3, r2
 8010334:	4403      	add	r3, r0
 8010336:	460a      	mov	r2, r1
 8010338:	701a      	strb	r2, [r3, #0]
 801033a:	e019      	b.n	8010370 <write_map+0x1c0>
		}else{												//a南壁がない場合
			map[mouse.y - 1][mouse.x] &= 0x77;				//a南側の区画から見て北壁なしを書き込む
 801033c:	4b2e      	ldr	r3, [pc, #184]	; (80103f8 <write_map+0x248>)
 801033e:	785b      	ldrb	r3, [r3, #1]
 8010340:	b2d8      	uxtb	r0, r3
 8010342:	4603      	mov	r3, r0
 8010344:	3b01      	subs	r3, #1
 8010346:	4a2c      	ldr	r2, [pc, #176]	; (80103f8 <write_map+0x248>)
 8010348:	7812      	ldrb	r2, [r2, #0]
 801034a:	b2d1      	uxtb	r1, r2
 801034c:	460c      	mov	r4, r1
 801034e:	4a2b      	ldr	r2, [pc, #172]	; (80103fc <write_map+0x24c>)
 8010350:	011b      	lsls	r3, r3, #4
 8010352:	4413      	add	r3, r2
 8010354:	4423      	add	r3, r4
 8010356:	781a      	ldrb	r2, [r3, #0]
 8010358:	4603      	mov	r3, r0
 801035a:	3b01      	subs	r3, #1
 801035c:	4608      	mov	r0, r1
 801035e:	f002 0277 	and.w	r2, r2, #119	; 0x77
 8010362:	b2d1      	uxtb	r1, r2
 8010364:	4a25      	ldr	r2, [pc, #148]	; (80103fc <write_map+0x24c>)
 8010366:	011b      	lsls	r3, r3, #4
 8010368:	4413      	add	r3, r2
 801036a:	4403      	add	r3, r0
 801036c:	460a      	mov	r2, r1
 801036e:	701a      	strb	r2, [r3, #0]
		}
	}
	//a西側について
	if(mouse.x != 0){										//a現在最西端でないとき
 8010370:	4b21      	ldr	r3, [pc, #132]	; (80103f8 <write_map+0x248>)
 8010372:	781b      	ldrb	r3, [r3, #0]
 8010374:	b2db      	uxtb	r3, r3
 8010376:	2b00      	cmp	r3, #0
 8010378:	d037      	beq.n	80103ea <write_map+0x23a>
		if(m_temp & 0x11){									//a西壁がある場合
 801037a:	79fb      	ldrb	r3, [r7, #7]
 801037c:	f003 0311 	and.w	r3, r3, #17
 8010380:	2b00      	cmp	r3, #0
 8010382:	d019      	beq.n	80103b8 <write_map+0x208>
			map[mouse.y][mouse.x - 1] |= 0x44;				//a西側の区画から見て東壁ありを書き込む
 8010384:	4b1c      	ldr	r3, [pc, #112]	; (80103f8 <write_map+0x248>)
 8010386:	785b      	ldrb	r3, [r3, #1]
 8010388:	b2dc      	uxtb	r4, r3
 801038a:	4622      	mov	r2, r4
 801038c:	4b1a      	ldr	r3, [pc, #104]	; (80103f8 <write_map+0x248>)
 801038e:	781b      	ldrb	r3, [r3, #0]
 8010390:	b2d8      	uxtb	r0, r3
 8010392:	4603      	mov	r3, r0
 8010394:	3b01      	subs	r3, #1
 8010396:	4919      	ldr	r1, [pc, #100]	; (80103fc <write_map+0x24c>)
 8010398:	0112      	lsls	r2, r2, #4
 801039a:	440a      	add	r2, r1
 801039c:	4413      	add	r3, r2
 801039e:	781a      	ldrb	r2, [r3, #0]
 80103a0:	4603      	mov	r3, r0
 80103a2:	3b01      	subs	r3, #1
 80103a4:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 80103a8:	b2d0      	uxtb	r0, r2
 80103aa:	4914      	ldr	r1, [pc, #80]	; (80103fc <write_map+0x24c>)
 80103ac:	0122      	lsls	r2, r4, #4
 80103ae:	440a      	add	r2, r1
 80103b0:	4413      	add	r3, r2
 80103b2:	4602      	mov	r2, r0
 80103b4:	701a      	strb	r2, [r3, #0]
		}else{												//a西壁がない場合
			map[mouse.y][mouse.x - 1] &= 0xBB;				//a西側の区画から見て東側なしを書き込む
		}
	}
}
 80103b6:	e018      	b.n	80103ea <write_map+0x23a>
			map[mouse.y][mouse.x - 1] &= 0xBB;				//a西側の区画から見て東側なしを書き込む
 80103b8:	4b0f      	ldr	r3, [pc, #60]	; (80103f8 <write_map+0x248>)
 80103ba:	785b      	ldrb	r3, [r3, #1]
 80103bc:	b2dc      	uxtb	r4, r3
 80103be:	4622      	mov	r2, r4
 80103c0:	4b0d      	ldr	r3, [pc, #52]	; (80103f8 <write_map+0x248>)
 80103c2:	781b      	ldrb	r3, [r3, #0]
 80103c4:	b2d8      	uxtb	r0, r3
 80103c6:	4603      	mov	r3, r0
 80103c8:	3b01      	subs	r3, #1
 80103ca:	490c      	ldr	r1, [pc, #48]	; (80103fc <write_map+0x24c>)
 80103cc:	0112      	lsls	r2, r2, #4
 80103ce:	440a      	add	r2, r1
 80103d0:	4413      	add	r3, r2
 80103d2:	781a      	ldrb	r2, [r3, #0]
 80103d4:	4603      	mov	r3, r0
 80103d6:	3b01      	subs	r3, #1
 80103d8:	f022 0244 	bic.w	r2, r2, #68	; 0x44
 80103dc:	b2d0      	uxtb	r0, r2
 80103de:	4907      	ldr	r1, [pc, #28]	; (80103fc <write_map+0x24c>)
 80103e0:	0122      	lsls	r2, r4, #4
 80103e2:	440a      	add	r2, r1
 80103e4:	4413      	add	r3, r2
 80103e6:	4602      	mov	r2, r0
 80103e8:	701a      	strb	r2, [r3, #0]
}
 80103ea:	bf00      	nop
 80103ec:	3708      	adds	r7, #8
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bc90      	pop	{r4, r7}
 80103f2:	4770      	bx	lr
 80103f4:	200002c8 	.word	0x200002c8
 80103f8:	20000c8c 	.word	0x20000c8c
 80103fc:	200001ac 	.word	0x200001ac

08010400 <turn_dir>:
//turn_dir
//aマウスの方向を変更する
//a引数1：t_pat …… 回転方向(search.hでマクロ定義)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void turn_dir(uint8_t t_pat, uint8_t t_mode){
 8010400:	b480      	push	{r7}
 8010402:	b083      	sub	sp, #12
 8010404:	af00      	add	r7, sp, #0
 8010406:	4603      	mov	r3, r0
 8010408:	460a      	mov	r2, r1
 801040a:	71fb      	strb	r3, [r7, #7]
 801040c:	4613      	mov	r3, r2
 801040e:	71bb      	strb	r3, [r7, #6]

	//====a方向を変更====
	if(t_mode < 2){												//4方位モード
 8010410:	79bb      	ldrb	r3, [r7, #6]
 8010412:	2b01      	cmp	r3, #1
 8010414:	d837      	bhi.n	8010486 <turn_dir+0x86>
		mouse.dir = (mouse.dir + t_pat) & 0x03;					//a指定された分mouse.dirを回転させる
 8010416:	4b5a      	ldr	r3, [pc, #360]	; (8010580 <turn_dir+0x180>)
 8010418:	789b      	ldrb	r3, [r3, #2]
 801041a:	b2da      	uxtb	r2, r3
 801041c:	79fb      	ldrb	r3, [r7, #7]
 801041e:	4413      	add	r3, r2
 8010420:	b2db      	uxtb	r3, r3
 8010422:	f003 0303 	and.w	r3, r3, #3
 8010426:	b2da      	uxtb	r2, r3
 8010428:	4b55      	ldr	r3, [pc, #340]	; (8010580 <turn_dir+0x180>)
 801042a:	709a      	strb	r2, [r3, #2]
		if(t_mode == 1){
 801042c:	79bb      	ldrb	r3, [r7, #6]
 801042e:	2b01      	cmp	r3, #1
 8010430:	f040 809f 	bne.w	8010572 <turn_dir+0x172>
			if(t_pat == 0x01) target_degree_z -= 90;			//a目標角度+右90度
 8010434:	79fb      	ldrb	r3, [r7, #7]
 8010436:	2b01      	cmp	r3, #1
 8010438:	d109      	bne.n	801044e <turn_dir+0x4e>
 801043a:	4b52      	ldr	r3, [pc, #328]	; (8010584 <turn_dir+0x184>)
 801043c:	edd3 7a00 	vldr	s15, [r3]
 8010440:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8010588 <turn_dir+0x188>
 8010444:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010448:	4b4e      	ldr	r3, [pc, #312]	; (8010584 <turn_dir+0x184>)
 801044a:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xff) target_degree_z += 90;			//a目標角度+左90度
 801044e:	79fb      	ldrb	r3, [r7, #7]
 8010450:	2bff      	cmp	r3, #255	; 0xff
 8010452:	d109      	bne.n	8010468 <turn_dir+0x68>
 8010454:	4b4b      	ldr	r3, [pc, #300]	; (8010584 <turn_dir+0x184>)
 8010456:	edd3 7a00 	vldr	s15, [r3]
 801045a:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8010588 <turn_dir+0x188>
 801045e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010462:	4b48      	ldr	r3, [pc, #288]	; (8010584 <turn_dir+0x184>)
 8010464:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x02) target_degree_z -= 180;			//a目標角度+右180度
 8010468:	79fb      	ldrb	r3, [r7, #7]
 801046a:	2b02      	cmp	r3, #2
 801046c:	f040 8081 	bne.w	8010572 <turn_dir+0x172>
 8010470:	4b44      	ldr	r3, [pc, #272]	; (8010584 <turn_dir+0x184>)
 8010472:	edd3 7a00 	vldr	s15, [r3]
 8010476:	ed9f 7a45 	vldr	s14, [pc, #276]	; 801058c <turn_dir+0x18c>
 801047a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801047e:	4b41      	ldr	r3, [pc, #260]	; (8010584 <turn_dir+0x184>)
 8010480:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfe) target_degree_z += 90;			//a目標角度+左90度
			if(t_pat == 0xfd) target_degree_z += 135;			//a目標角度+右180度
			if(t_pat == 0xfc) target_degree_z += 180;			//a目標角度+右180度
		}
	}
}
 8010484:	e075      	b.n	8010572 <turn_dir+0x172>
		mouse.dir = (mouse.dir + t_pat) & 0x07;					//a指定された分mouse.dirを回転させる
 8010486:	4b3e      	ldr	r3, [pc, #248]	; (8010580 <turn_dir+0x180>)
 8010488:	789b      	ldrb	r3, [r3, #2]
 801048a:	b2da      	uxtb	r2, r3
 801048c:	79fb      	ldrb	r3, [r7, #7]
 801048e:	4413      	add	r3, r2
 8010490:	b2db      	uxtb	r3, r3
 8010492:	f003 0307 	and.w	r3, r3, #7
 8010496:	b2da      	uxtb	r2, r3
 8010498:	4b39      	ldr	r3, [pc, #228]	; (8010580 <turn_dir+0x180>)
 801049a:	709a      	strb	r2, [r3, #2]
		if(t_mode == 3){
 801049c:	79bb      	ldrb	r3, [r7, #6]
 801049e:	2b03      	cmp	r3, #3
 80104a0:	d167      	bne.n	8010572 <turn_dir+0x172>
			if(t_pat == 0x01) target_degree_z -= 45;			//a目標角度+右90度
 80104a2:	79fb      	ldrb	r3, [r7, #7]
 80104a4:	2b01      	cmp	r3, #1
 80104a6:	d109      	bne.n	80104bc <turn_dir+0xbc>
 80104a8:	4b36      	ldr	r3, [pc, #216]	; (8010584 <turn_dir+0x184>)
 80104aa:	edd3 7a00 	vldr	s15, [r3]
 80104ae:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8010590 <turn_dir+0x190>
 80104b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80104b6:	4b33      	ldr	r3, [pc, #204]	; (8010584 <turn_dir+0x184>)
 80104b8:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x02) target_degree_z -= 90;			//a目標角度+左90度
 80104bc:	79fb      	ldrb	r3, [r7, #7]
 80104be:	2b02      	cmp	r3, #2
 80104c0:	d109      	bne.n	80104d6 <turn_dir+0xd6>
 80104c2:	4b30      	ldr	r3, [pc, #192]	; (8010584 <turn_dir+0x184>)
 80104c4:	edd3 7a00 	vldr	s15, [r3]
 80104c8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8010588 <turn_dir+0x188>
 80104cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80104d0:	4b2c      	ldr	r3, [pc, #176]	; (8010584 <turn_dir+0x184>)
 80104d2:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x03) target_degree_z -= 135;			//a目標角度+右180度
 80104d6:	79fb      	ldrb	r3, [r7, #7]
 80104d8:	2b03      	cmp	r3, #3
 80104da:	d109      	bne.n	80104f0 <turn_dir+0xf0>
 80104dc:	4b29      	ldr	r3, [pc, #164]	; (8010584 <turn_dir+0x184>)
 80104de:	edd3 7a00 	vldr	s15, [r3]
 80104e2:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8010594 <turn_dir+0x194>
 80104e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80104ea:	4b26      	ldr	r3, [pc, #152]	; (8010584 <turn_dir+0x184>)
 80104ec:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x04) target_degree_z -= 180;			//a目標角度+右180度
 80104f0:	79fb      	ldrb	r3, [r7, #7]
 80104f2:	2b04      	cmp	r3, #4
 80104f4:	d109      	bne.n	801050a <turn_dir+0x10a>
 80104f6:	4b23      	ldr	r3, [pc, #140]	; (8010584 <turn_dir+0x184>)
 80104f8:	edd3 7a00 	vldr	s15, [r3]
 80104fc:	ed9f 7a23 	vldr	s14, [pc, #140]	; 801058c <turn_dir+0x18c>
 8010500:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010504:	4b1f      	ldr	r3, [pc, #124]	; (8010584 <turn_dir+0x184>)
 8010506:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xff) target_degree_z += 45;			//a目標角度+右90度
 801050a:	79fb      	ldrb	r3, [r7, #7]
 801050c:	2bff      	cmp	r3, #255	; 0xff
 801050e:	d109      	bne.n	8010524 <turn_dir+0x124>
 8010510:	4b1c      	ldr	r3, [pc, #112]	; (8010584 <turn_dir+0x184>)
 8010512:	edd3 7a00 	vldr	s15, [r3]
 8010516:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8010590 <turn_dir+0x190>
 801051a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801051e:	4b19      	ldr	r3, [pc, #100]	; (8010584 <turn_dir+0x184>)
 8010520:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfe) target_degree_z += 90;			//a目標角度+左90度
 8010524:	79fb      	ldrb	r3, [r7, #7]
 8010526:	2bfe      	cmp	r3, #254	; 0xfe
 8010528:	d109      	bne.n	801053e <turn_dir+0x13e>
 801052a:	4b16      	ldr	r3, [pc, #88]	; (8010584 <turn_dir+0x184>)
 801052c:	edd3 7a00 	vldr	s15, [r3]
 8010530:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8010588 <turn_dir+0x188>
 8010534:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010538:	4b12      	ldr	r3, [pc, #72]	; (8010584 <turn_dir+0x184>)
 801053a:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfd) target_degree_z += 135;			//a目標角度+右180度
 801053e:	79fb      	ldrb	r3, [r7, #7]
 8010540:	2bfd      	cmp	r3, #253	; 0xfd
 8010542:	d109      	bne.n	8010558 <turn_dir+0x158>
 8010544:	4b0f      	ldr	r3, [pc, #60]	; (8010584 <turn_dir+0x184>)
 8010546:	edd3 7a00 	vldr	s15, [r3]
 801054a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8010594 <turn_dir+0x194>
 801054e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010552:	4b0c      	ldr	r3, [pc, #48]	; (8010584 <turn_dir+0x184>)
 8010554:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfc) target_degree_z += 180;			//a目標角度+右180度
 8010558:	79fb      	ldrb	r3, [r7, #7]
 801055a:	2bfc      	cmp	r3, #252	; 0xfc
 801055c:	d109      	bne.n	8010572 <turn_dir+0x172>
 801055e:	4b09      	ldr	r3, [pc, #36]	; (8010584 <turn_dir+0x184>)
 8010560:	edd3 7a00 	vldr	s15, [r3]
 8010564:	ed9f 7a09 	vldr	s14, [pc, #36]	; 801058c <turn_dir+0x18c>
 8010568:	ee77 7a87 	vadd.f32	s15, s15, s14
 801056c:	4b05      	ldr	r3, [pc, #20]	; (8010584 <turn_dir+0x184>)
 801056e:	edc3 7a00 	vstr	s15, [r3]
}
 8010572:	bf00      	nop
 8010574:	370c      	adds	r7, #12
 8010576:	46bd      	mov	sp, r7
 8010578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057c:	4770      	bx	lr
 801057e:	bf00      	nop
 8010580:	20000c8c 	.word	0x20000c8c
 8010584:	20000c78 	.word	0x20000c78
 8010588:	42b40000 	.word	0x42b40000
 801058c:	43340000 	.word	0x43340000
 8010590:	42340000 	.word	0x42340000
 8010594:	43070000 	.word	0x43070000

08010598 <make_smap>:
//make_smap
//a歩数マップを作成する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap(void){
 8010598:	b590      	push	{r4, r7, lr}
 801059a:	b08f      	sub	sp, #60	; 0x3c
 801059c:	af00      	add	r7, sp, #0
	//====a変数宣言====
	uint8_t x, y;											//for文用変数
	uint8_t m_temp_sample[16];

	//====a歩数マップのクリア====
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 801059e:	2300      	movs	r3, #0
 80105a0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80105a4:	e01c      	b.n	80105e0 <make_smap+0x48>
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 80105a6:	2300      	movs	r3, #0
 80105a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80105ac:	e00f      	b.n	80105ce <make_smap+0x36>
			smap[y][x] = 0x03e7;							//a未記入部分は歩数最大とする
 80105ae:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80105b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80105b6:	49be      	ldr	r1, [pc, #760]	; (80108b0 <make_smap+0x318>)
 80105b8:	0112      	lsls	r2, r2, #4
 80105ba:	4413      	add	r3, r2
 80105bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80105c0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 80105c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80105c8:	3301      	adds	r3, #1
 80105ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80105ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80105d2:	2b0f      	cmp	r3, #15
 80105d4:	d9eb      	bls.n	80105ae <make_smap+0x16>
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 80105d6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80105da:	3301      	adds	r3, #1
 80105dc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80105e0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80105e4:	2b0f      	cmp	r3, #15
 80105e6:	d9de      	bls.n	80105a6 <make_smap+0xe>
		}
	}

	//====aゴール座標を0にする====
	m_step = 0;												//a歩数カウンタを0にする
 80105e8:	4bb2      	ldr	r3, [pc, #712]	; (80108b4 <make_smap+0x31c>)
 80105ea:	2200      	movs	r2, #0
 80105ec:	801a      	strh	r2, [r3, #0]

	for(int j=0; j<goal_mode; j++){
 80105ee:	2300      	movs	r3, #0
 80105f0:	633b      	str	r3, [r7, #48]	; 0x30
 80105f2:	e01e      	b.n	8010632 <make_smap+0x9a>
		for(int k=0; k<goal_mode; k++){
 80105f4:	2300      	movs	r3, #0
 80105f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80105f8:	e012      	b.n	8010620 <make_smap+0x88>
		smap[goal_y+j][goal_x+k] = 0;
 80105fa:	4baf      	ldr	r3, [pc, #700]	; (80108b8 <make_smap+0x320>)
 80105fc:	781b      	ldrb	r3, [r3, #0]
 80105fe:	461a      	mov	r2, r3
 8010600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010602:	441a      	add	r2, r3
 8010604:	4bad      	ldr	r3, [pc, #692]	; (80108bc <make_smap+0x324>)
 8010606:	781b      	ldrb	r3, [r3, #0]
 8010608:	4619      	mov	r1, r3
 801060a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801060c:	440b      	add	r3, r1
 801060e:	49a8      	ldr	r1, [pc, #672]	; (80108b0 <make_smap+0x318>)
 8010610:	0112      	lsls	r2, r2, #4
 8010612:	4413      	add	r3, r2
 8010614:	2200      	movs	r2, #0
 8010616:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int k=0; k<goal_mode; k++){
 801061a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801061c:	3301      	adds	r3, #1
 801061e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010620:	4ba7      	ldr	r3, [pc, #668]	; (80108c0 <make_smap+0x328>)
 8010622:	781b      	ldrb	r3, [r3, #0]
 8010624:	461a      	mov	r2, r3
 8010626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010628:	4293      	cmp	r3, r2
 801062a:	dbe6      	blt.n	80105fa <make_smap+0x62>
	for(int j=0; j<goal_mode; j++){
 801062c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801062e:	3301      	adds	r3, #1
 8010630:	633b      	str	r3, [r7, #48]	; 0x30
 8010632:	4ba3      	ldr	r3, [pc, #652]	; (80108c0 <make_smap+0x328>)
 8010634:	781b      	ldrb	r3, [r3, #0]
 8010636:	461a      	mov	r2, r3
 8010638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801063a:	4293      	cmp	r3, r2
 801063c:	dbda      	blt.n	80105f4 <make_smap+0x5c>
	}

//	smap[goal_y][goal_x] = 0;

	//====a歩数カウンタの重みづけ====
	int straight = 2;
 801063e:	2302      	movs	r3, #2
 8010640:	617b      	str	r3, [r7, #20]
	int turn = 5;
 8010642:	2305      	movs	r3, #5
 8010644:	613b      	str	r3, [r7, #16]
	full_led_write1(GREEN);
 8010646:	2002      	movs	r0, #2
 8010648:	f001 fd6e 	bl	8012128 <full_led_write1>
	//====a自分の座標にたどり着くまでループ====
	do{
		//----aマップ全域を捜索----
		for(y = 0; y <= 15; y++){							//a各Y座標で実行
 801064c:	2300      	movs	r3, #0
 801064e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8010652:	e334      	b.n	8010cbe <make_smap+0x726>
			for(x = 0; x <= 15; x++){						//a各X座標で実行
 8010654:	2300      	movs	r3, #0
 8010656:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801065a:	e326      	b.n	8010caa <make_smap+0x712>
				//----a現在最大の歩数を発見したとき----
				if(smap[y][x] == m_step){					//a歩数カウンタm_stepの値が現在最大の歩数
 801065c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010660:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010664:	4992      	ldr	r1, [pc, #584]	; (80108b0 <make_smap+0x318>)
 8010666:	0112      	lsls	r2, r2, #4
 8010668:	4413      	add	r3, r2
 801066a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 801066e:	4b91      	ldr	r3, [pc, #580]	; (80108b4 <make_smap+0x31c>)
 8010670:	881b      	ldrh	r3, [r3, #0]
 8010672:	429a      	cmp	r2, r3
 8010674:	f040 8314 	bne.w	8010ca0 <make_smap+0x708>
					uint8_t m_temp = map[y][x];				//map配列からマップデータを取り出す
 8010678:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801067c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010680:	4990      	ldr	r1, [pc, #576]	; (80108c4 <make_smap+0x32c>)
 8010682:	0112      	lsls	r2, r2, #4
 8010684:	440a      	add	r2, r1
 8010686:	4413      	add	r3, r2
 8010688:	781b      	ldrb	r3, [r3, #0]
 801068a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					if(MF.FLAG.SCND){						//a二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 801068e:	4b8e      	ldr	r3, [pc, #568]	; (80108c8 <make_smap+0x330>)
 8010690:	881b      	ldrh	r3, [r3, #0]
 8010692:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010696:	b2db      	uxtb	r3, r3
 8010698:	2b00      	cmp	r3, #0
 801069a:	d004      	beq.n	80106a6 <make_smap+0x10e>
						m_temp >>= 4;						//a上位4bitを使うので4bit分右にシフトさせる
 801069c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80106a0:	091b      	lsrs	r3, r3, #4
 80106a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					}
					//----a北壁についての処理----
					if(!(m_temp & 0x08) && y != 15){		//a北壁がなく現在最北端でないとき
 80106a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80106aa:	f003 0308 	and.w	r3, r3, #8
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	f040 80b4 	bne.w	801081c <make_smap+0x284>
 80106b4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80106b8:	2b0f      	cmp	r3, #15
 80106ba:	f000 80af 	beq.w	801081c <make_smap+0x284>
						if(smap[y+1][x] >= (smap[y][x]+turn)){		//a北側が記入後より大きいなら
 80106be:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80106c2:	1c5a      	adds	r2, r3, #1
 80106c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80106c8:	4979      	ldr	r1, [pc, #484]	; (80108b0 <make_smap+0x318>)
 80106ca:	0112      	lsls	r2, r2, #4
 80106cc:	4413      	add	r3, r2
 80106ce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80106d2:	4618      	mov	r0, r3
 80106d4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80106d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80106dc:	4974      	ldr	r1, [pc, #464]	; (80108b0 <make_smap+0x318>)
 80106de:	0112      	lsls	r2, r2, #4
 80106e0:	4413      	add	r3, r2
 80106e2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80106e6:	461a      	mov	r2, r3
 80106e8:	693b      	ldr	r3, [r7, #16]
 80106ea:	4413      	add	r3, r2
 80106ec:	4298      	cmp	r0, r3
 80106ee:	f2c0 8095 	blt.w	801081c <make_smap+0x284>
							smap[y+1][x] = smap[y][x] + turn;		//a次の歩数を書き込む
 80106f2:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80106f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80106fa:	496d      	ldr	r1, [pc, #436]	; (80108b0 <make_smap+0x318>)
 80106fc:	0112      	lsls	r2, r2, #4
 80106fe:	4413      	add	r3, r2
 8010700:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010704:	693b      	ldr	r3, [r7, #16]
 8010706:	b299      	uxth	r1, r3
 8010708:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801070c:	1c5a      	adds	r2, r3, #1
 801070e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010712:	4401      	add	r1, r0
 8010714:	b288      	uxth	r0, r1
 8010716:	4966      	ldr	r1, [pc, #408]	; (80108b0 <make_smap+0x318>)
 8010718:	0112      	lsls	r2, r2, #4
 801071a:	4413      	add	r3, r2
 801071c:	4602      	mov	r2, r0
 801071e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 8010722:	4b69      	ldr	r3, [pc, #420]	; (80108c8 <make_smap+0x330>)
 8010724:	881b      	ldrh	r3, [r3, #0]
 8010726:	f3c3 2380 	ubfx	r3, r3, #10, #1
 801072a:	b2db      	uxtb	r3, r3
 801072c:	2b00      	cmp	r3, #0
 801072e:	d075      	beq.n	801081c <make_smap+0x284>
								//----a直線優先処理----
								for(int k=1; k<16-y; k++) {					//a現在座標から見て北のマスすべてにおいて
 8010730:	2301      	movs	r3, #1
 8010732:	627b      	str	r3, [r7, #36]	; 0x24
 8010734:	e06b      	b.n	801080e <make_smap+0x276>
									m_temp_sample[k] = map[y+k][x];				//map配列からマップデータを取り出す
 8010736:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801073a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801073c:	441a      	add	r2, r3
 801073e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010742:	4960      	ldr	r1, [pc, #384]	; (80108c4 <make_smap+0x32c>)
 8010744:	0112      	lsls	r2, r2, #4
 8010746:	440a      	add	r2, r1
 8010748:	4413      	add	r3, r2
 801074a:	7819      	ldrb	r1, [r3, #0]
 801074c:	463a      	mov	r2, r7
 801074e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010750:	4413      	add	r3, r2
 8010752:	460a      	mov	r2, r1
 8010754:	701a      	strb	r2, [r3, #0]
									if(MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 8010756:	4b5c      	ldr	r3, [pc, #368]	; (80108c8 <make_smap+0x330>)
 8010758:	881b      	ldrh	r3, [r3, #0]
 801075a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801075e:	b2db      	uxtb	r3, r3
 8010760:	2b00      	cmp	r3, #0
 8010762:	d00a      	beq.n	801077a <make_smap+0x1e2>
 8010764:	463a      	mov	r2, r7
 8010766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010768:	4413      	add	r3, r2
 801076a:	781b      	ldrb	r3, [r3, #0]
 801076c:	091b      	lsrs	r3, r3, #4
 801076e:	b2d9      	uxtb	r1, r3
 8010770:	463a      	mov	r2, r7
 8010772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010774:	4413      	add	r3, r2
 8010776:	460a      	mov	r2, r1
 8010778:	701a      	strb	r2, [r3, #0]
									if(!(m_temp_sample[k] & 0x08) && (y+k) != 15) {		//a北壁がなく現在最北端でないとき
 801077a:	463a      	mov	r2, r7
 801077c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801077e:	4413      	add	r3, r2
 8010780:	781b      	ldrb	r3, [r3, #0]
 8010782:	f003 0308 	and.w	r3, r3, #8
 8010786:	2b00      	cmp	r3, #0
 8010788:	d148      	bne.n	801081c <make_smap+0x284>
 801078a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801078e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010790:	4413      	add	r3, r2
 8010792:	2b0f      	cmp	r3, #15
 8010794:	d042      	beq.n	801081c <make_smap+0x284>
										if(smap[y+k+1][x] >= (smap[y+k][x]+straight)){		//a北側が記入後より大きいなら
 8010796:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801079a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801079c:	4413      	add	r3, r2
 801079e:	1c5a      	adds	r2, r3, #1
 80107a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80107a4:	4942      	ldr	r1, [pc, #264]	; (80108b0 <make_smap+0x318>)
 80107a6:	0112      	lsls	r2, r2, #4
 80107a8:	4413      	add	r3, r2
 80107aa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80107ae:	4618      	mov	r0, r3
 80107b0:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80107b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107b6:	441a      	add	r2, r3
 80107b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80107bc:	493c      	ldr	r1, [pc, #240]	; (80108b0 <make_smap+0x318>)
 80107be:	0112      	lsls	r2, r2, #4
 80107c0:	4413      	add	r3, r2
 80107c2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80107c6:	461a      	mov	r2, r3
 80107c8:	697b      	ldr	r3, [r7, #20]
 80107ca:	4413      	add	r3, r2
 80107cc:	4298      	cmp	r0, r3
 80107ce:	db1b      	blt.n	8010808 <make_smap+0x270>
											smap[y+k+1][x] = smap[y+k][x] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 80107d0:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80107d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107d6:	441a      	add	r2, r3
 80107d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80107dc:	4934      	ldr	r1, [pc, #208]	; (80108b0 <make_smap+0x318>)
 80107de:	0112      	lsls	r2, r2, #4
 80107e0:	4413      	add	r3, r2
 80107e2:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80107e6:	697b      	ldr	r3, [r7, #20]
 80107e8:	b299      	uxth	r1, r3
 80107ea:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80107ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107f0:	4413      	add	r3, r2
 80107f2:	1c5a      	adds	r2, r3, #1
 80107f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80107f8:	4401      	add	r1, r0
 80107fa:	b288      	uxth	r0, r1
 80107fc:	492c      	ldr	r1, [pc, #176]	; (80108b0 <make_smap+0x318>)
 80107fe:	0112      	lsls	r2, r2, #4
 8010800:	4413      	add	r3, r2
 8010802:	4602      	mov	r2, r0
 8010804:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for(int k=1; k<16-y; k++) {					//a現在座標から見て北のマスすべてにおいて
 8010808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801080a:	3301      	adds	r3, #1
 801080c:	627b      	str	r3, [r7, #36]	; 0x24
 801080e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010812:	f1c3 0310 	rsb	r3, r3, #16
 8010816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010818:	429a      	cmp	r2, r3
 801081a:	db8c      	blt.n	8010736 <make_smap+0x19e>
								}
							}
						}
					}
					//----a東壁についての処理----
					if(!(m_temp & 0x04) && x != 15){		//a東壁がなく現在最東端でないとき
 801081c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010820:	f003 0304 	and.w	r3, r3, #4
 8010824:	2b00      	cmp	r3, #0
 8010826:	f040 80c4 	bne.w	80109b2 <make_smap+0x41a>
 801082a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801082e:	2b0f      	cmp	r3, #15
 8010830:	f000 80bf 	beq.w	80109b2 <make_smap+0x41a>
						if(smap[y][x+1] >= (smap[y][x]+turn)){	//a東側が記入後より大きいなら
 8010834:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010838:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801083c:	3301      	adds	r3, #1
 801083e:	491c      	ldr	r1, [pc, #112]	; (80108b0 <make_smap+0x318>)
 8010840:	0112      	lsls	r2, r2, #4
 8010842:	4413      	add	r3, r2
 8010844:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010848:	4618      	mov	r0, r3
 801084a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801084e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010852:	4917      	ldr	r1, [pc, #92]	; (80108b0 <make_smap+0x318>)
 8010854:	0112      	lsls	r2, r2, #4
 8010856:	4413      	add	r3, r2
 8010858:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801085c:	461a      	mov	r2, r3
 801085e:	693b      	ldr	r3, [r7, #16]
 8010860:	4413      	add	r3, r2
 8010862:	4298      	cmp	r0, r3
 8010864:	f2c0 80a5 	blt.w	80109b2 <make_smap+0x41a>
							smap[y][x+1] = smap[y][x] + turn;	//a次の歩数を書き込む
 8010868:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801086c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010870:	490f      	ldr	r1, [pc, #60]	; (80108b0 <make_smap+0x318>)
 8010872:	0112      	lsls	r2, r2, #4
 8010874:	4413      	add	r3, r2
 8010876:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 801087a:	693b      	ldr	r3, [r7, #16]
 801087c:	b299      	uxth	r1, r3
 801087e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010882:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010886:	3301      	adds	r3, #1
 8010888:	4401      	add	r1, r0
 801088a:	b288      	uxth	r0, r1
 801088c:	4908      	ldr	r1, [pc, #32]	; (80108b0 <make_smap+0x318>)
 801088e:	0112      	lsls	r2, r2, #4
 8010890:	4413      	add	r3, r2
 8010892:	4602      	mov	r2, r0
 8010894:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 8010898:	4b0b      	ldr	r3, [pc, #44]	; (80108c8 <make_smap+0x330>)
 801089a:	881b      	ldrh	r3, [r3, #0]
 801089c:	f3c3 2380 	ubfx	r3, r3, #10, #1
 80108a0:	b2db      	uxtb	r3, r3
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	f000 8085 	beq.w	80109b2 <make_smap+0x41a>
								//----a直線優先処理----
								for(int k=1; k<16-x; k++) {					//a現在座標から見て東のマスすべてにおいて
 80108a8:	2301      	movs	r3, #1
 80108aa:	623b      	str	r3, [r7, #32]
 80108ac:	e07a      	b.n	80109a4 <make_smap+0x40c>
 80108ae:	bf00      	nop
 80108b0:	20000da0 	.word	0x20000da0
 80108b4:	2000034e 	.word	0x2000034e
 80108b8:	20000b8c 	.word	0x20000b8c
 80108bc:	20000c30 	.word	0x20000c30
 80108c0:	20000c31 	.word	0x20000c31
 80108c4:	200001ac 	.word	0x200001ac
 80108c8:	20000fa8 	.word	0x20000fa8
									m_temp_sample[k] = map[y][x+k];				//map配列からマップデータを取り出す
 80108cc:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80108d0:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 80108d4:	6a3b      	ldr	r3, [r7, #32]
 80108d6:	440b      	add	r3, r1
 80108d8:	49b6      	ldr	r1, [pc, #728]	; (8010bb4 <make_smap+0x61c>)
 80108da:	0112      	lsls	r2, r2, #4
 80108dc:	440a      	add	r2, r1
 80108de:	4413      	add	r3, r2
 80108e0:	7819      	ldrb	r1, [r3, #0]
 80108e2:	463a      	mov	r2, r7
 80108e4:	6a3b      	ldr	r3, [r7, #32]
 80108e6:	4413      	add	r3, r2
 80108e8:	460a      	mov	r2, r1
 80108ea:	701a      	strb	r2, [r3, #0]
									if(MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 80108ec:	4bb2      	ldr	r3, [pc, #712]	; (8010bb8 <make_smap+0x620>)
 80108ee:	881b      	ldrh	r3, [r3, #0]
 80108f0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80108f4:	b2db      	uxtb	r3, r3
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d00a      	beq.n	8010910 <make_smap+0x378>
 80108fa:	463a      	mov	r2, r7
 80108fc:	6a3b      	ldr	r3, [r7, #32]
 80108fe:	4413      	add	r3, r2
 8010900:	781b      	ldrb	r3, [r3, #0]
 8010902:	091b      	lsrs	r3, r3, #4
 8010904:	b2d9      	uxtb	r1, r3
 8010906:	463a      	mov	r2, r7
 8010908:	6a3b      	ldr	r3, [r7, #32]
 801090a:	4413      	add	r3, r2
 801090c:	460a      	mov	r2, r1
 801090e:	701a      	strb	r2, [r3, #0]
									if(!(m_temp_sample[k] & 0x04) && (x+k) != 15) {		//a東壁がなく現在最東端でないとき
 8010910:	463a      	mov	r2, r7
 8010912:	6a3b      	ldr	r3, [r7, #32]
 8010914:	4413      	add	r3, r2
 8010916:	781b      	ldrb	r3, [r3, #0]
 8010918:	f003 0304 	and.w	r3, r3, #4
 801091c:	2b00      	cmp	r3, #0
 801091e:	d148      	bne.n	80109b2 <make_smap+0x41a>
 8010920:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010924:	6a3b      	ldr	r3, [r7, #32]
 8010926:	4413      	add	r3, r2
 8010928:	2b0f      	cmp	r3, #15
 801092a:	d042      	beq.n	80109b2 <make_smap+0x41a>
										if(smap[y][x+k+1] >= (smap[y][x+k]+straight)){		//a東側が記入後より大きいなら
 801092c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010930:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8010934:	6a3b      	ldr	r3, [r7, #32]
 8010936:	440b      	add	r3, r1
 8010938:	3301      	adds	r3, #1
 801093a:	49a0      	ldr	r1, [pc, #640]	; (8010bbc <make_smap+0x624>)
 801093c:	0112      	lsls	r2, r2, #4
 801093e:	4413      	add	r3, r2
 8010940:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010944:	4618      	mov	r0, r3
 8010946:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801094a:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 801094e:	6a3b      	ldr	r3, [r7, #32]
 8010950:	440b      	add	r3, r1
 8010952:	499a      	ldr	r1, [pc, #616]	; (8010bbc <make_smap+0x624>)
 8010954:	0112      	lsls	r2, r2, #4
 8010956:	4413      	add	r3, r2
 8010958:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801095c:	461a      	mov	r2, r3
 801095e:	697b      	ldr	r3, [r7, #20]
 8010960:	4413      	add	r3, r2
 8010962:	4298      	cmp	r0, r3
 8010964:	db1b      	blt.n	801099e <make_smap+0x406>
											smap[y][x+k+1] = smap[y][x+k] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 8010966:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801096a:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 801096e:	6a3b      	ldr	r3, [r7, #32]
 8010970:	440b      	add	r3, r1
 8010972:	4992      	ldr	r1, [pc, #584]	; (8010bbc <make_smap+0x624>)
 8010974:	0112      	lsls	r2, r2, #4
 8010976:	4413      	add	r3, r2
 8010978:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 801097c:	697b      	ldr	r3, [r7, #20]
 801097e:	b299      	uxth	r1, r3
 8010980:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010984:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8010988:	6a3b      	ldr	r3, [r7, #32]
 801098a:	4423      	add	r3, r4
 801098c:	3301      	adds	r3, #1
 801098e:	4401      	add	r1, r0
 8010990:	b288      	uxth	r0, r1
 8010992:	498a      	ldr	r1, [pc, #552]	; (8010bbc <make_smap+0x624>)
 8010994:	0112      	lsls	r2, r2, #4
 8010996:	4413      	add	r3, r2
 8010998:	4602      	mov	r2, r0
 801099a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for(int k=1; k<16-x; k++) {					//a現在座標から見て東のマスすべてにおいて
 801099e:	6a3b      	ldr	r3, [r7, #32]
 80109a0:	3301      	adds	r3, #1
 80109a2:	623b      	str	r3, [r7, #32]
 80109a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80109a8:	f1c3 0310 	rsb	r3, r3, #16
 80109ac:	6a3a      	ldr	r2, [r7, #32]
 80109ae:	429a      	cmp	r2, r3
 80109b0:	db8c      	blt.n	80108cc <make_smap+0x334>
								}
							}
						}
					}
					//----a南壁についての処理----
					if(!(m_temp & 0x02) && y != 0){			//a南壁がなく現在最南端でないとき
 80109b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80109b6:	f003 0302 	and.w	r3, r3, #2
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	f040 80b1 	bne.w	8010b22 <make_smap+0x58a>
 80109c0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	f000 80ac 	beq.w	8010b22 <make_smap+0x58a>
						if(smap[y-1][x] >= (smap[y][x]+turn)){	//a南側が記入後より大きいなら
 80109ca:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80109ce:	1e5a      	subs	r2, r3, #1
 80109d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80109d4:	4979      	ldr	r1, [pc, #484]	; (8010bbc <make_smap+0x624>)
 80109d6:	0112      	lsls	r2, r2, #4
 80109d8:	4413      	add	r3, r2
 80109da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80109de:	4618      	mov	r0, r3
 80109e0:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80109e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80109e8:	4974      	ldr	r1, [pc, #464]	; (8010bbc <make_smap+0x624>)
 80109ea:	0112      	lsls	r2, r2, #4
 80109ec:	4413      	add	r3, r2
 80109ee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80109f2:	461a      	mov	r2, r3
 80109f4:	693b      	ldr	r3, [r7, #16]
 80109f6:	4413      	add	r3, r2
 80109f8:	4298      	cmp	r0, r3
 80109fa:	f2c0 8092 	blt.w	8010b22 <make_smap+0x58a>
							smap[y-1][x] = smap[y][x] + turn;	//a次の歩数を書き込む
 80109fe:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010a02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010a06:	496d      	ldr	r1, [pc, #436]	; (8010bbc <make_smap+0x624>)
 8010a08:	0112      	lsls	r2, r2, #4
 8010a0a:	4413      	add	r3, r2
 8010a0c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010a10:	693b      	ldr	r3, [r7, #16]
 8010a12:	b299      	uxth	r1, r3
 8010a14:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010a18:	1e5a      	subs	r2, r3, #1
 8010a1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010a1e:	4401      	add	r1, r0
 8010a20:	b288      	uxth	r0, r1
 8010a22:	4966      	ldr	r1, [pc, #408]	; (8010bbc <make_smap+0x624>)
 8010a24:	0112      	lsls	r2, r2, #4
 8010a26:	4413      	add	r3, r2
 8010a28:	4602      	mov	r2, r0
 8010a2a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 8010a2e:	4b62      	ldr	r3, [pc, #392]	; (8010bb8 <make_smap+0x620>)
 8010a30:	881b      	ldrh	r3, [r3, #0]
 8010a32:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8010a36:	b2db      	uxtb	r3, r3
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d072      	beq.n	8010b22 <make_smap+0x58a>
								//----a直線優先処理----
								for(int k=1; k<y; k++) {						//a現在座標から見て南のマスすべてにおいて
 8010a3c:	2301      	movs	r3, #1
 8010a3e:	61fb      	str	r3, [r7, #28]
 8010a40:	e06a      	b.n	8010b18 <make_smap+0x580>
									m_temp_sample[k] = map[y-k][x];				//map配列からマップデータを取り出す
 8010a42:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010a46:	69fb      	ldr	r3, [r7, #28]
 8010a48:	1ad2      	subs	r2, r2, r3
 8010a4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010a4e:	4959      	ldr	r1, [pc, #356]	; (8010bb4 <make_smap+0x61c>)
 8010a50:	0112      	lsls	r2, r2, #4
 8010a52:	440a      	add	r2, r1
 8010a54:	4413      	add	r3, r2
 8010a56:	7819      	ldrb	r1, [r3, #0]
 8010a58:	463a      	mov	r2, r7
 8010a5a:	69fb      	ldr	r3, [r7, #28]
 8010a5c:	4413      	add	r3, r2
 8010a5e:	460a      	mov	r2, r1
 8010a60:	701a      	strb	r2, [r3, #0]
									if(MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 8010a62:	4b55      	ldr	r3, [pc, #340]	; (8010bb8 <make_smap+0x620>)
 8010a64:	881b      	ldrh	r3, [r3, #0]
 8010a66:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010a6a:	b2db      	uxtb	r3, r3
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d00a      	beq.n	8010a86 <make_smap+0x4ee>
 8010a70:	463a      	mov	r2, r7
 8010a72:	69fb      	ldr	r3, [r7, #28]
 8010a74:	4413      	add	r3, r2
 8010a76:	781b      	ldrb	r3, [r3, #0]
 8010a78:	091b      	lsrs	r3, r3, #4
 8010a7a:	b2d9      	uxtb	r1, r3
 8010a7c:	463a      	mov	r2, r7
 8010a7e:	69fb      	ldr	r3, [r7, #28]
 8010a80:	4413      	add	r3, r2
 8010a82:	460a      	mov	r2, r1
 8010a84:	701a      	strb	r2, [r3, #0]
									if(!(m_temp_sample[k] & 0x02) && (y-k) != 0) {		//a南壁がなく現在最南端でないとき
 8010a86:	463a      	mov	r2, r7
 8010a88:	69fb      	ldr	r3, [r7, #28]
 8010a8a:	4413      	add	r3, r2
 8010a8c:	781b      	ldrb	r3, [r3, #0]
 8010a8e:	f003 0302 	and.w	r3, r3, #2
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d145      	bne.n	8010b22 <make_smap+0x58a>
 8010a96:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010a9a:	69fa      	ldr	r2, [r7, #28]
 8010a9c:	429a      	cmp	r2, r3
 8010a9e:	d040      	beq.n	8010b22 <make_smap+0x58a>
										if(smap[y-k-1][x] >= (smap[y-k][x]+straight)){		//a南側が記入後より大きいなら
 8010aa0:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010aa4:	69fb      	ldr	r3, [r7, #28]
 8010aa6:	1ad3      	subs	r3, r2, r3
 8010aa8:	1e5a      	subs	r2, r3, #1
 8010aaa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010aae:	4943      	ldr	r1, [pc, #268]	; (8010bbc <make_smap+0x624>)
 8010ab0:	0112      	lsls	r2, r2, #4
 8010ab2:	4413      	add	r3, r2
 8010ab4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010ab8:	4618      	mov	r0, r3
 8010aba:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010abe:	69fb      	ldr	r3, [r7, #28]
 8010ac0:	1ad2      	subs	r2, r2, r3
 8010ac2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ac6:	493d      	ldr	r1, [pc, #244]	; (8010bbc <make_smap+0x624>)
 8010ac8:	0112      	lsls	r2, r2, #4
 8010aca:	4413      	add	r3, r2
 8010acc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010ad0:	461a      	mov	r2, r3
 8010ad2:	697b      	ldr	r3, [r7, #20]
 8010ad4:	4413      	add	r3, r2
 8010ad6:	4298      	cmp	r0, r3
 8010ad8:	db1b      	blt.n	8010b12 <make_smap+0x57a>
											smap[y-k-1][x] = smap[y-k][x] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 8010ada:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010ade:	69fb      	ldr	r3, [r7, #28]
 8010ae0:	1ad2      	subs	r2, r2, r3
 8010ae2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ae6:	4935      	ldr	r1, [pc, #212]	; (8010bbc <make_smap+0x624>)
 8010ae8:	0112      	lsls	r2, r2, #4
 8010aea:	4413      	add	r3, r2
 8010aec:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010af0:	697b      	ldr	r3, [r7, #20]
 8010af2:	b299      	uxth	r1, r3
 8010af4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010af8:	69fb      	ldr	r3, [r7, #28]
 8010afa:	1ad3      	subs	r3, r2, r3
 8010afc:	1e5a      	subs	r2, r3, #1
 8010afe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010b02:	4401      	add	r1, r0
 8010b04:	b288      	uxth	r0, r1
 8010b06:	492d      	ldr	r1, [pc, #180]	; (8010bbc <make_smap+0x624>)
 8010b08:	0112      	lsls	r2, r2, #4
 8010b0a:	4413      	add	r3, r2
 8010b0c:	4602      	mov	r2, r0
 8010b0e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for(int k=1; k<y; k++) {						//a現在座標から見て南のマスすべてにおいて
 8010b12:	69fb      	ldr	r3, [r7, #28]
 8010b14:	3301      	adds	r3, #1
 8010b16:	61fb      	str	r3, [r7, #28]
 8010b18:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010b1c:	69fa      	ldr	r2, [r7, #28]
 8010b1e:	429a      	cmp	r2, r3
 8010b20:	db8f      	blt.n	8010a42 <make_smap+0x4aa>
								}
							}
						}
					}
					//----a西壁についての処理----
					if(!(m_temp & 0x01) && x != 0){			//a西壁がなく現在最西端でないとき
 8010b22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010b26:	f003 0301 	and.w	r3, r3, #1
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	f040 80b8 	bne.w	8010ca0 <make_smap+0x708>
 8010b30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	f000 80b3 	beq.w	8010ca0 <make_smap+0x708>
						if(smap[y][x-1] >= (smap[y][x]+turn)){	//a西側が記入後より大きいなら
 8010b3a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010b3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010b42:	3b01      	subs	r3, #1
 8010b44:	491d      	ldr	r1, [pc, #116]	; (8010bbc <make_smap+0x624>)
 8010b46:	0112      	lsls	r2, r2, #4
 8010b48:	4413      	add	r3, r2
 8010b4a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010b4e:	4618      	mov	r0, r3
 8010b50:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010b54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010b58:	4918      	ldr	r1, [pc, #96]	; (8010bbc <make_smap+0x624>)
 8010b5a:	0112      	lsls	r2, r2, #4
 8010b5c:	4413      	add	r3, r2
 8010b5e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010b62:	461a      	mov	r2, r3
 8010b64:	693b      	ldr	r3, [r7, #16]
 8010b66:	4413      	add	r3, r2
 8010b68:	4298      	cmp	r0, r3
 8010b6a:	f2c0 8099 	blt.w	8010ca0 <make_smap+0x708>
							smap[y][x-1] = smap[y][x] + turn;	//a次の歩数を書き込む
 8010b6e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010b72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010b76:	4911      	ldr	r1, [pc, #68]	; (8010bbc <make_smap+0x624>)
 8010b78:	0112      	lsls	r2, r2, #4
 8010b7a:	4413      	add	r3, r2
 8010b7c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010b80:	693b      	ldr	r3, [r7, #16]
 8010b82:	b299      	uxth	r1, r3
 8010b84:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010b88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010b8c:	3b01      	subs	r3, #1
 8010b8e:	4401      	add	r1, r0
 8010b90:	b288      	uxth	r0, r1
 8010b92:	490a      	ldr	r1, [pc, #40]	; (8010bbc <make_smap+0x624>)
 8010b94:	0112      	lsls	r2, r2, #4
 8010b96:	4413      	add	r3, r2
 8010b98:	4602      	mov	r2, r0
 8010b9a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 8010b9e:	4b06      	ldr	r3, [pc, #24]	; (8010bb8 <make_smap+0x620>)
 8010ba0:	881b      	ldrh	r3, [r3, #0]
 8010ba2:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8010ba6:	b2db      	uxtb	r3, r3
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d079      	beq.n	8010ca0 <make_smap+0x708>
								//----a直線優先処理----
								for(int k=1; k<x; k++) {						//a現在座標から見て西のマスすべてにおいて
 8010bac:	2301      	movs	r3, #1
 8010bae:	61bb      	str	r3, [r7, #24]
 8010bb0:	e071      	b.n	8010c96 <make_smap+0x6fe>
 8010bb2:	bf00      	nop
 8010bb4:	200001ac 	.word	0x200001ac
 8010bb8:	20000fa8 	.word	0x20000fa8
 8010bbc:	20000da0 	.word	0x20000da0
									m_temp_sample[k] = map[y][x-k];				//map配列からマップデータを取り出す
 8010bc0:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010bc4:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8010bc8:	69bb      	ldr	r3, [r7, #24]
 8010bca:	1acb      	subs	r3, r1, r3
 8010bcc:	494c      	ldr	r1, [pc, #304]	; (8010d00 <make_smap+0x768>)
 8010bce:	0112      	lsls	r2, r2, #4
 8010bd0:	440a      	add	r2, r1
 8010bd2:	4413      	add	r3, r2
 8010bd4:	7819      	ldrb	r1, [r3, #0]
 8010bd6:	463a      	mov	r2, r7
 8010bd8:	69bb      	ldr	r3, [r7, #24]
 8010bda:	4413      	add	r3, r2
 8010bdc:	460a      	mov	r2, r1
 8010bde:	701a      	strb	r2, [r3, #0]
									if(MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 8010be0:	4b48      	ldr	r3, [pc, #288]	; (8010d04 <make_smap+0x76c>)
 8010be2:	881b      	ldrh	r3, [r3, #0]
 8010be4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010be8:	b2db      	uxtb	r3, r3
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d00a      	beq.n	8010c04 <make_smap+0x66c>
 8010bee:	463a      	mov	r2, r7
 8010bf0:	69bb      	ldr	r3, [r7, #24]
 8010bf2:	4413      	add	r3, r2
 8010bf4:	781b      	ldrb	r3, [r3, #0]
 8010bf6:	091b      	lsrs	r3, r3, #4
 8010bf8:	b2d9      	uxtb	r1, r3
 8010bfa:	463a      	mov	r2, r7
 8010bfc:	69bb      	ldr	r3, [r7, #24]
 8010bfe:	4413      	add	r3, r2
 8010c00:	460a      	mov	r2, r1
 8010c02:	701a      	strb	r2, [r3, #0]
									if(!(m_temp_sample[k] & 0x01) && (x-k) != 0) {		//a西壁がなく現在最西端でないとき
 8010c04:	463a      	mov	r2, r7
 8010c06:	69bb      	ldr	r3, [r7, #24]
 8010c08:	4413      	add	r3, r2
 8010c0a:	781b      	ldrb	r3, [r3, #0]
 8010c0c:	f003 0301 	and.w	r3, r3, #1
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d145      	bne.n	8010ca0 <make_smap+0x708>
 8010c14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c18:	69ba      	ldr	r2, [r7, #24]
 8010c1a:	429a      	cmp	r2, r3
 8010c1c:	d040      	beq.n	8010ca0 <make_smap+0x708>
										if(smap[y][x-k-1] >= (smap[y][x-k]+straight)){		//a西側が記入後より大きいなら
 8010c1e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010c22:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8010c26:	69bb      	ldr	r3, [r7, #24]
 8010c28:	1acb      	subs	r3, r1, r3
 8010c2a:	3b01      	subs	r3, #1
 8010c2c:	4936      	ldr	r1, [pc, #216]	; (8010d08 <make_smap+0x770>)
 8010c2e:	0112      	lsls	r2, r2, #4
 8010c30:	4413      	add	r3, r2
 8010c32:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010c36:	4618      	mov	r0, r3
 8010c38:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010c3c:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8010c40:	69bb      	ldr	r3, [r7, #24]
 8010c42:	1acb      	subs	r3, r1, r3
 8010c44:	4930      	ldr	r1, [pc, #192]	; (8010d08 <make_smap+0x770>)
 8010c46:	0112      	lsls	r2, r2, #4
 8010c48:	4413      	add	r3, r2
 8010c4a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010c4e:	461a      	mov	r2, r3
 8010c50:	697b      	ldr	r3, [r7, #20]
 8010c52:	4413      	add	r3, r2
 8010c54:	4298      	cmp	r0, r3
 8010c56:	db1b      	blt.n	8010c90 <make_smap+0x6f8>
											smap[y][x-k-1] = smap[y][x-k] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 8010c58:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010c5c:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8010c60:	69bb      	ldr	r3, [r7, #24]
 8010c62:	1acb      	subs	r3, r1, r3
 8010c64:	4928      	ldr	r1, [pc, #160]	; (8010d08 <make_smap+0x770>)
 8010c66:	0112      	lsls	r2, r2, #4
 8010c68:	4413      	add	r3, r2
 8010c6a:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010c6e:	697b      	ldr	r3, [r7, #20]
 8010c70:	b299      	uxth	r1, r3
 8010c72:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010c76:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8010c7a:	69bb      	ldr	r3, [r7, #24]
 8010c7c:	1ae3      	subs	r3, r4, r3
 8010c7e:	3b01      	subs	r3, #1
 8010c80:	4401      	add	r1, r0
 8010c82:	b288      	uxth	r0, r1
 8010c84:	4920      	ldr	r1, [pc, #128]	; (8010d08 <make_smap+0x770>)
 8010c86:	0112      	lsls	r2, r2, #4
 8010c88:	4413      	add	r3, r2
 8010c8a:	4602      	mov	r2, r0
 8010c8c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for(int k=1; k<x; k++) {						//a現在座標から見て西のマスすべてにおいて
 8010c90:	69bb      	ldr	r3, [r7, #24]
 8010c92:	3301      	adds	r3, #1
 8010c94:	61bb      	str	r3, [r7, #24]
 8010c96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c9a:	69ba      	ldr	r2, [r7, #24]
 8010c9c:	429a      	cmp	r2, r3
 8010c9e:	db8f      	blt.n	8010bc0 <make_smap+0x628>
			for(x = 0; x <= 15; x++){						//a各X座標で実行
 8010ca0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ca4:	3301      	adds	r3, #1
 8010ca6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010caa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010cae:	2b0f      	cmp	r3, #15
 8010cb0:	f67f acd4 	bls.w	801065c <make_smap+0xc4>
		for(y = 0; y <= 15; y++){							//a各Y座標で実行
 8010cb4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010cb8:	3301      	adds	r3, #1
 8010cba:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8010cbe:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010cc2:	2b0f      	cmp	r3, #15
 8010cc4:	f67f acc6 	bls.w	8010654 <make_smap+0xbc>
					}
				}
			}
		}
		//====a歩数カウンタのインクリメント====
		m_step++;
 8010cc8:	4b10      	ldr	r3, [pc, #64]	; (8010d0c <make_smap+0x774>)
 8010cca:	881b      	ldrh	r3, [r3, #0]
 8010ccc:	3301      	adds	r3, #1
 8010cce:	b29a      	uxth	r2, r3
 8010cd0:	4b0e      	ldr	r3, [pc, #56]	; (8010d0c <make_smap+0x774>)
 8010cd2:	801a      	strh	r2, [r3, #0]
	}while(smap[mouse.y][mouse.x] == 0x03e7);					//a現在座標が未記入ではなくなるまで実行
 8010cd4:	4b0e      	ldr	r3, [pc, #56]	; (8010d10 <make_smap+0x778>)
 8010cd6:	785b      	ldrb	r3, [r3, #1]
 8010cd8:	b2db      	uxtb	r3, r3
 8010cda:	4618      	mov	r0, r3
 8010cdc:	4b0c      	ldr	r3, [pc, #48]	; (8010d10 <make_smap+0x778>)
 8010cde:	781b      	ldrb	r3, [r3, #0]
 8010ce0:	b2db      	uxtb	r3, r3
 8010ce2:	4619      	mov	r1, r3
 8010ce4:	4a08      	ldr	r2, [pc, #32]	; (8010d08 <make_smap+0x770>)
 8010ce6:	0103      	lsls	r3, r0, #4
 8010ce8:	440b      	add	r3, r1
 8010cea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010cee:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010cf2:	4293      	cmp	r3, r2
 8010cf4:	f43f acaa 	beq.w	801064c <make_smap+0xb4>
}
 8010cf8:	bf00      	nop
 8010cfa:	373c      	adds	r7, #60	; 0x3c
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	bd90      	pop	{r4, r7, pc}
 8010d00:	200001ac 	.word	0x200001ac
 8010d04:	20000fa8 	.word	0x20000fa8
 8010d08:	20000da0 	.word	0x20000da0
 8010d0c:	2000034e 	.word	0x2000034e
 8010d10:	20000c8c 	.word	0x20000c8c

08010d14 <make_route>:
//make_route
//a最短経路を導出する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_route(){
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b082      	sub	sp, #8
 8010d18:	af00      	add	r7, sp, #0

	//====a変数宣言====
	uint8_t x, y;												//X，Y座標
	uint8_t dir_temp =  mouse.dir;								//aマウスの方角を表すmouse.dirの値をdir_temp変数に退避させる
 8010d1a:	4ba6      	ldr	r3, [pc, #664]	; (8010fb4 <make_route+0x2a0>)
 8010d1c:	789b      	ldrb	r3, [r3, #2]
 8010d1e:	703b      	strb	r3, [r7, #0]

	//====a最短経路を初期化====
	uint16_t i;
	for(i = 0; i < 256; i++){
 8010d20:	2300      	movs	r3, #0
 8010d22:	80bb      	strh	r3, [r7, #4]
 8010d24:	e006      	b.n	8010d34 <make_route+0x20>
		route[i] = 0xff;										//routeを0xffで初期化
 8010d26:	88bb      	ldrh	r3, [r7, #4]
 8010d28:	4aa3      	ldr	r2, [pc, #652]	; (8010fb8 <make_route+0x2a4>)
 8010d2a:	21ff      	movs	r1, #255	; 0xff
 8010d2c:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < 256; i++){
 8010d2e:	88bb      	ldrh	r3, [r7, #4]
 8010d30:	3301      	adds	r3, #1
 8010d32:	80bb      	strh	r3, [r7, #4]
 8010d34:	88bb      	ldrh	r3, [r7, #4]
 8010d36:	2bff      	cmp	r3, #255	; 0xff
 8010d38:	d9f5      	bls.n	8010d26 <make_route+0x12>
	}

	//====a歩数カウンタをセット====
	uint16_t m_step = smap[mouse.y][mouse.x];					//a現在座標の歩数マップ値を取得
 8010d3a:	4b9e      	ldr	r3, [pc, #632]	; (8010fb4 <make_route+0x2a0>)
 8010d3c:	785b      	ldrb	r3, [r3, #1]
 8010d3e:	b2db      	uxtb	r3, r3
 8010d40:	4618      	mov	r0, r3
 8010d42:	4b9c      	ldr	r3, [pc, #624]	; (8010fb4 <make_route+0x2a0>)
 8010d44:	781b      	ldrb	r3, [r3, #0]
 8010d46:	b2db      	uxtb	r3, r3
 8010d48:	4619      	mov	r1, r3
 8010d4a:	4a9c      	ldr	r2, [pc, #624]	; (8010fbc <make_route+0x2a8>)
 8010d4c:	0103      	lsls	r3, r0, #4
 8010d4e:	440b      	add	r3, r1
 8010d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d54:	807b      	strh	r3, [r7, #2]

	//====x, yに現在座標を書き込み====
	x = mouse.x;
 8010d56:	4b97      	ldr	r3, [pc, #604]	; (8010fb4 <make_route+0x2a0>)
 8010d58:	781b      	ldrb	r3, [r3, #0]
 8010d5a:	71fb      	strb	r3, [r7, #7]
	y = mouse.y;
 8010d5c:	4b95      	ldr	r3, [pc, #596]	; (8010fb4 <make_route+0x2a0>)
 8010d5e:	785b      	ldrb	r3, [r3, #1]
 8010d60:	71bb      	strb	r3, [r7, #6]

	//====a最短経路を導出====
	if(pass_mode == 4){
 8010d62:	4b97      	ldr	r3, [pc, #604]	; (8010fc0 <make_route+0x2ac>)
 8010d64:	781b      	ldrb	r3, [r3, #0]
 8010d66:	2b04      	cmp	r3, #4
 8010d68:	d105      	bne.n	8010d76 <make_route+0x62>
		route[0] = 0x77;
 8010d6a:	4b93      	ldr	r3, [pc, #588]	; (8010fb8 <make_route+0x2a4>)
 8010d6c:	2277      	movs	r2, #119	; 0x77
 8010d6e:	701a      	strb	r2, [r3, #0]
		i = 1;
 8010d70:	2301      	movs	r3, #1
 8010d72:	80bb      	strh	r3, [r7, #4]
 8010d74:	e001      	b.n	8010d7a <make_route+0x66>
	}else{
		i = 0;
 8010d76:	2300      	movs	r3, #0
 8010d78:	80bb      	strh	r3, [r7, #4]
	}

	do{
		uint8_t m_temp = map[y][x];								//a比較用マップ情報の格納
 8010d7a:	79ba      	ldrb	r2, [r7, #6]
 8010d7c:	79fb      	ldrb	r3, [r7, #7]
 8010d7e:	4991      	ldr	r1, [pc, #580]	; (8010fc4 <make_route+0x2b0>)
 8010d80:	0112      	lsls	r2, r2, #4
 8010d82:	440a      	add	r2, r1
 8010d84:	4413      	add	r3, r2
 8010d86:	781b      	ldrb	r3, [r3, #0]
 8010d88:	707b      	strb	r3, [r7, #1]
		if(MF.FLAG.SCND){										//a二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 8010d8a:	4b8f      	ldr	r3, [pc, #572]	; (8010fc8 <make_route+0x2b4>)
 8010d8c:	881b      	ldrh	r3, [r3, #0]
 8010d8e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010d92:	b2db      	uxtb	r3, r3
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d002      	beq.n	8010d9e <make_route+0x8a>
			m_temp >>= 4;										//a上位4bitを使うので4bit分右にシフトさせる
 8010d98:	787b      	ldrb	r3, [r7, #1]
 8010d9a:	091b      	lsrs	r3, r3, #4
 8010d9c:	707b      	strb	r3, [r7, #1]
		}
		//----a北を見る----
		if(!(m_temp & 0x08) && (smap[y+1][x] < m_step)){		//a北側に壁が無く、現在地より小さい歩数マップ値であれば
 8010d9e:	787b      	ldrb	r3, [r7, #1]
 8010da0:	f003 0308 	and.w	r3, r3, #8
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d122      	bne.n	8010dee <make_route+0xda>
 8010da8:	79bb      	ldrb	r3, [r7, #6]
 8010daa:	1c5a      	adds	r2, r3, #1
 8010dac:	79fb      	ldrb	r3, [r7, #7]
 8010dae:	4983      	ldr	r1, [pc, #524]	; (8010fbc <make_route+0x2a8>)
 8010db0:	0112      	lsls	r2, r2, #4
 8010db2:	4413      	add	r3, r2
 8010db4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010db8:	887a      	ldrh	r2, [r7, #2]
 8010dba:	429a      	cmp	r2, r3
 8010dbc:	d917      	bls.n	8010dee <make_route+0xda>
			route[i] = (0x00 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 8010dbe:	4b7d      	ldr	r3, [pc, #500]	; (8010fb4 <make_route+0x2a0>)
 8010dc0:	789b      	ldrb	r3, [r3, #2]
 8010dc2:	b2db      	uxtb	r3, r3
 8010dc4:	425b      	negs	r3, r3
 8010dc6:	b2da      	uxtb	r2, r3
 8010dc8:	88bb      	ldrh	r3, [r7, #4]
 8010dca:	f002 0203 	and.w	r2, r2, #3
 8010dce:	b2d1      	uxtb	r1, r2
 8010dd0:	4a79      	ldr	r2, [pc, #484]	; (8010fb8 <make_route+0x2a4>)
 8010dd2:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y+1][x];								//a最大歩数マップ値を更新
 8010dd4:	79bb      	ldrb	r3, [r7, #6]
 8010dd6:	1c5a      	adds	r2, r3, #1
 8010dd8:	79fb      	ldrb	r3, [r7, #7]
 8010dda:	4978      	ldr	r1, [pc, #480]	; (8010fbc <make_route+0x2a8>)
 8010ddc:	0112      	lsls	r2, r2, #4
 8010dde:	4413      	add	r3, r2
 8010de0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010de4:	807b      	strh	r3, [r7, #2]
			y++;												//a北に進んだのでY座標をインクリメント
 8010de6:	79bb      	ldrb	r3, [r7, #6]
 8010de8:	3301      	adds	r3, #1
 8010dea:	71bb      	strb	r3, [r7, #6]
 8010dec:	e079      	b.n	8010ee2 <make_route+0x1ce>
		}
		//----a東を見る----
		else if(!(m_temp & 0x04) && (smap[y][x+1] < m_step)){	//a東側に壁が無く、現在地より小さい歩数マップ値であれば
 8010dee:	787b      	ldrb	r3, [r7, #1]
 8010df0:	f003 0304 	and.w	r3, r3, #4
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d123      	bne.n	8010e40 <make_route+0x12c>
 8010df8:	79ba      	ldrb	r2, [r7, #6]
 8010dfa:	79fb      	ldrb	r3, [r7, #7]
 8010dfc:	3301      	adds	r3, #1
 8010dfe:	496f      	ldr	r1, [pc, #444]	; (8010fbc <make_route+0x2a8>)
 8010e00:	0112      	lsls	r2, r2, #4
 8010e02:	4413      	add	r3, r2
 8010e04:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010e08:	887a      	ldrh	r2, [r7, #2]
 8010e0a:	429a      	cmp	r2, r3
 8010e0c:	d918      	bls.n	8010e40 <make_route+0x12c>
			route[i] = (0x01 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 8010e0e:	4b69      	ldr	r3, [pc, #420]	; (8010fb4 <make_route+0x2a0>)
 8010e10:	789b      	ldrb	r3, [r3, #2]
 8010e12:	b2db      	uxtb	r3, r3
 8010e14:	f1c3 0301 	rsb	r3, r3, #1
 8010e18:	b2da      	uxtb	r2, r3
 8010e1a:	88bb      	ldrh	r3, [r7, #4]
 8010e1c:	f002 0203 	and.w	r2, r2, #3
 8010e20:	b2d1      	uxtb	r1, r2
 8010e22:	4a65      	ldr	r2, [pc, #404]	; (8010fb8 <make_route+0x2a4>)
 8010e24:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x+1];								//a最大歩数マップ値を更新
 8010e26:	79ba      	ldrb	r2, [r7, #6]
 8010e28:	79fb      	ldrb	r3, [r7, #7]
 8010e2a:	3301      	adds	r3, #1
 8010e2c:	4963      	ldr	r1, [pc, #396]	; (8010fbc <make_route+0x2a8>)
 8010e2e:	0112      	lsls	r2, r2, #4
 8010e30:	4413      	add	r3, r2
 8010e32:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010e36:	807b      	strh	r3, [r7, #2]
			x++;												//a東に進んだのでX座標をインクリメント
 8010e38:	79fb      	ldrb	r3, [r7, #7]
 8010e3a:	3301      	adds	r3, #1
 8010e3c:	71fb      	strb	r3, [r7, #7]
 8010e3e:	e050      	b.n	8010ee2 <make_route+0x1ce>
		}
		//----a南を見る----
		else if(!(m_temp & 0x02) && (smap[y-1][x] < m_step)){	//a南側に壁が無く、現在地より小さい歩数マップ値であれば
 8010e40:	787b      	ldrb	r3, [r7, #1]
 8010e42:	f003 0302 	and.w	r3, r3, #2
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d123      	bne.n	8010e92 <make_route+0x17e>
 8010e4a:	79bb      	ldrb	r3, [r7, #6]
 8010e4c:	1e5a      	subs	r2, r3, #1
 8010e4e:	79fb      	ldrb	r3, [r7, #7]
 8010e50:	495a      	ldr	r1, [pc, #360]	; (8010fbc <make_route+0x2a8>)
 8010e52:	0112      	lsls	r2, r2, #4
 8010e54:	4413      	add	r3, r2
 8010e56:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010e5a:	887a      	ldrh	r2, [r7, #2]
 8010e5c:	429a      	cmp	r2, r3
 8010e5e:	d918      	bls.n	8010e92 <make_route+0x17e>
			route[i] = (0x02 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 8010e60:	4b54      	ldr	r3, [pc, #336]	; (8010fb4 <make_route+0x2a0>)
 8010e62:	789b      	ldrb	r3, [r3, #2]
 8010e64:	b2db      	uxtb	r3, r3
 8010e66:	f1c3 0302 	rsb	r3, r3, #2
 8010e6a:	b2da      	uxtb	r2, r3
 8010e6c:	88bb      	ldrh	r3, [r7, #4]
 8010e6e:	f002 0203 	and.w	r2, r2, #3
 8010e72:	b2d1      	uxtb	r1, r2
 8010e74:	4a50      	ldr	r2, [pc, #320]	; (8010fb8 <make_route+0x2a4>)
 8010e76:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y-1][x];								//a最大歩数マップ値を更新
 8010e78:	79bb      	ldrb	r3, [r7, #6]
 8010e7a:	1e5a      	subs	r2, r3, #1
 8010e7c:	79fb      	ldrb	r3, [r7, #7]
 8010e7e:	494f      	ldr	r1, [pc, #316]	; (8010fbc <make_route+0x2a8>)
 8010e80:	0112      	lsls	r2, r2, #4
 8010e82:	4413      	add	r3, r2
 8010e84:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010e88:	807b      	strh	r3, [r7, #2]
			y--;												//a南に進んだのでY座標をデクリメント
 8010e8a:	79bb      	ldrb	r3, [r7, #6]
 8010e8c:	3b01      	subs	r3, #1
 8010e8e:	71bb      	strb	r3, [r7, #6]
 8010e90:	e027      	b.n	8010ee2 <make_route+0x1ce>
		}
		//----a西を見る----
		else if(!(m_temp & 0x01) && (smap[y][x-1] < m_step)){	//a西側に壁が無く、現在地より小さい歩数マップ値であれば
 8010e92:	787b      	ldrb	r3, [r7, #1]
 8010e94:	f003 0301 	and.w	r3, r3, #1
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d122      	bne.n	8010ee2 <make_route+0x1ce>
 8010e9c:	79ba      	ldrb	r2, [r7, #6]
 8010e9e:	79fb      	ldrb	r3, [r7, #7]
 8010ea0:	3b01      	subs	r3, #1
 8010ea2:	4946      	ldr	r1, [pc, #280]	; (8010fbc <make_route+0x2a8>)
 8010ea4:	0112      	lsls	r2, r2, #4
 8010ea6:	4413      	add	r3, r2
 8010ea8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010eac:	887a      	ldrh	r2, [r7, #2]
 8010eae:	429a      	cmp	r2, r3
 8010eb0:	d917      	bls.n	8010ee2 <make_route+0x1ce>
			route[i] = (0x03 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 8010eb2:	4b40      	ldr	r3, [pc, #256]	; (8010fb4 <make_route+0x2a0>)
 8010eb4:	789b      	ldrb	r3, [r3, #2]
 8010eb6:	b2db      	uxtb	r3, r3
 8010eb8:	f1c3 0303 	rsb	r3, r3, #3
 8010ebc:	b2da      	uxtb	r2, r3
 8010ebe:	88bb      	ldrh	r3, [r7, #4]
 8010ec0:	f002 0203 	and.w	r2, r2, #3
 8010ec4:	b2d1      	uxtb	r1, r2
 8010ec6:	4a3c      	ldr	r2, [pc, #240]	; (8010fb8 <make_route+0x2a4>)
 8010ec8:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x-1];								//a最大歩数マップ値を更新
 8010eca:	79ba      	ldrb	r2, [r7, #6]
 8010ecc:	79fb      	ldrb	r3, [r7, #7]
 8010ece:	3b01      	subs	r3, #1
 8010ed0:	493a      	ldr	r1, [pc, #232]	; (8010fbc <make_route+0x2a8>)
 8010ed2:	0112      	lsls	r2, r2, #4
 8010ed4:	4413      	add	r3, r2
 8010ed6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010eda:	807b      	strh	r3, [r7, #2]
			x--;												//a西に進んだのでX座標をデクリメント
 8010edc:	79fb      	ldrb	r3, [r7, #7]
 8010ede:	3b01      	subs	r3, #1
 8010ee0:	71fb      	strb	r3, [r7, #7]
				y--;												//a南に進んだのでY座標をデクリメント
			}*/

		}
		//----a格納データ形式変更----
		switch(route[i]){										//route配列に格納した要素値で分岐
 8010ee2:	88bb      	ldrh	r3, [r7, #4]
 8010ee4:	4a34      	ldr	r2, [pc, #208]	; (8010fb8 <make_route+0x2a4>)
 8010ee6:	5cd3      	ldrb	r3, [r2, r3]
 8010ee8:	2b03      	cmp	r3, #3
 8010eea:	d83c      	bhi.n	8010f66 <make_route+0x252>
 8010eec:	a201      	add	r2, pc, #4	; (adr r2, 8010ef4 <make_route+0x1e0>)
 8010eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ef2:	bf00      	nop
 8010ef4:	08010f05 	.word	0x08010f05
 8010ef8:	08010f31 	.word	0x08010f31
 8010efc:	08010f43 	.word	0x08010f43
 8010f00:	08010f55 	.word	0x08010f55
		case 0x00:												//a前進する場合
			if(pass_mode < 3){
 8010f04:	4b2e      	ldr	r3, [pc, #184]	; (8010fc0 <make_route+0x2ac>)
 8010f06:	781b      	ldrb	r3, [r3, #0]
 8010f08:	2b02      	cmp	r3, #2
 8010f0a:	d804      	bhi.n	8010f16 <make_route+0x202>
				route[i] = 0x88;									//a格納データ形式を変更
 8010f0c:	88bb      	ldrh	r3, [r7, #4]
 8010f0e:	4a2a      	ldr	r2, [pc, #168]	; (8010fb8 <make_route+0x2a4>)
 8010f10:	2188      	movs	r1, #136	; 0x88
 8010f12:	54d1      	strb	r1, [r2, r3]
			}else{
				route[i] = 0x77;
				route[i+1] = 0x77;
				i++;
			}
			break;
 8010f14:	e02c      	b.n	8010f70 <make_route+0x25c>
				route[i] = 0x77;
 8010f16:	88bb      	ldrh	r3, [r7, #4]
 8010f18:	4a27      	ldr	r2, [pc, #156]	; (8010fb8 <make_route+0x2a4>)
 8010f1a:	2177      	movs	r1, #119	; 0x77
 8010f1c:	54d1      	strb	r1, [r2, r3]
				route[i+1] = 0x77;
 8010f1e:	88bb      	ldrh	r3, [r7, #4]
 8010f20:	3301      	adds	r3, #1
 8010f22:	4a25      	ldr	r2, [pc, #148]	; (8010fb8 <make_route+0x2a4>)
 8010f24:	2177      	movs	r1, #119	; 0x77
 8010f26:	54d1      	strb	r1, [r2, r3]
				i++;
 8010f28:	88bb      	ldrh	r3, [r7, #4]
 8010f2a:	3301      	adds	r3, #1
 8010f2c:	80bb      	strh	r3, [r7, #4]
			break;
 8010f2e:	e01f      	b.n	8010f70 <make_route+0x25c>
		case 0x01:												//a右折する場合
			turn_dir(DIR_TURN_R90, 0);							//a内部情報の方向を90度右回転
 8010f30:	2100      	movs	r1, #0
 8010f32:	2001      	movs	r0, #1
 8010f34:	f7ff fa64 	bl	8010400 <turn_dir>
			route[i] = 0x44;									//a格納データ形式を変更
 8010f38:	88bb      	ldrh	r3, [r7, #4]
 8010f3a:	4a1f      	ldr	r2, [pc, #124]	; (8010fb8 <make_route+0x2a4>)
 8010f3c:	2144      	movs	r1, #68	; 0x44
 8010f3e:	54d1      	strb	r1, [r2, r3]
			break;
 8010f40:	e016      	b.n	8010f70 <make_route+0x25c>
		case 0x02:												//Uターンする場合
			turn_dir(DIR_TURN_180, 0);							//a内部情報の方向を180度回転
 8010f42:	2100      	movs	r1, #0
 8010f44:	2002      	movs	r0, #2
 8010f46:	f7ff fa5b 	bl	8010400 <turn_dir>
			route[i] = 0x22;									//a格納データ形式を変更
 8010f4a:	88bb      	ldrh	r3, [r7, #4]
 8010f4c:	4a1a      	ldr	r2, [pc, #104]	; (8010fb8 <make_route+0x2a4>)
 8010f4e:	2122      	movs	r1, #34	; 0x22
 8010f50:	54d1      	strb	r1, [r2, r3]
			break;
 8010f52:	e00d      	b.n	8010f70 <make_route+0x25c>
		case 0x03:												//a左折する場合
			turn_dir(DIR_TURN_L90, 0);							//a内部情報の方向を90度左回転
 8010f54:	2100      	movs	r1, #0
 8010f56:	20ff      	movs	r0, #255	; 0xff
 8010f58:	f7ff fa52 	bl	8010400 <turn_dir>
			route[i] = 0x11;									//a格納データ形式を変更
 8010f5c:	88bb      	ldrh	r3, [r7, #4]
 8010f5e:	4a16      	ldr	r2, [pc, #88]	; (8010fb8 <make_route+0x2a4>)
 8010f60:	2111      	movs	r1, #17
 8010f62:	54d1      	strb	r1, [r2, r3]
			break;
 8010f64:	e004      	b.n	8010f70 <make_route+0x25c>
		default:												//aそれ以外の場合
			route[i] = 0x00;									//a格納データ形式を変更
 8010f66:	88bb      	ldrh	r3, [r7, #4]
 8010f68:	4a13      	ldr	r2, [pc, #76]	; (8010fb8 <make_route+0x2a4>)
 8010f6a:	2100      	movs	r1, #0
 8010f6c:	54d1      	strb	r1, [r2, r3]
			break;
 8010f6e:	bf00      	nop
		}
		i++;													//aカウンタをインクリメント
 8010f70:	88bb      	ldrh	r3, [r7, #4]
 8010f72:	3301      	adds	r3, #1
 8010f74:	80bb      	strh	r3, [r7, #4]
	}while(smap[y][x] != 0);									//a進んだ先の歩数マップ値が0（=ゴール）になるまで実行
 8010f76:	79ba      	ldrb	r2, [r7, #6]
 8010f78:	79fb      	ldrb	r3, [r7, #7]
 8010f7a:	4910      	ldr	r1, [pc, #64]	; (8010fbc <make_route+0x2a8>)
 8010f7c:	0112      	lsls	r2, r2, #4
 8010f7e:	4413      	add	r3, r2
 8010f80:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	f47f aef8 	bne.w	8010d7a <make_route+0x66>

	if(MF.FLAG.SCND){
 8010f8a:	4b0f      	ldr	r3, [pc, #60]	; (8010fc8 <make_route+0x2b4>)
 8010f8c:	881b      	ldrh	r3, [r3, #0]
 8010f8e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010f92:	b2db      	uxtb	r3, r3
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d005      	beq.n	8010fa4 <make_route+0x290>
		goal_x = x;
 8010f98:	4a0c      	ldr	r2, [pc, #48]	; (8010fcc <make_route+0x2b8>)
 8010f9a:	79fb      	ldrb	r3, [r7, #7]
 8010f9c:	7013      	strb	r3, [r2, #0]
		goal_y = y;												//a二次走行でgoal後自己座標をgoal座標にするのでその時用
 8010f9e:	4a0c      	ldr	r2, [pc, #48]	; (8010fd0 <make_route+0x2bc>)
 8010fa0:	79bb      	ldrb	r3, [r7, #6]
 8010fa2:	7013      	strb	r3, [r2, #0]
	}
	mouse.dir = dir_temp;										//dir_tempに退避させた値をmouse.dirにリストア
 8010fa4:	4a03      	ldr	r2, [pc, #12]	; (8010fb4 <make_route+0x2a0>)
 8010fa6:	783b      	ldrb	r3, [r7, #0]
 8010fa8:	7093      	strb	r3, [r2, #2]
}
 8010faa:	bf00      	nop
 8010fac:	3708      	adds	r7, #8
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	bd80      	pop	{r7, pc}
 8010fb2:	bf00      	nop
 8010fb4:	20000c8c 	.word	0x20000c8c
 8010fb8:	20000c94 	.word	0x20000c94
 8010fbc:	20000da0 	.word	0x20000da0
 8010fc0:	20000457 	.word	0x20000457
 8010fc4:	200001ac 	.word	0x200001ac
 8010fc8:	20000fa8 	.word	0x20000fa8
 8010fcc:	20000c30 	.word	0x20000c30
 8010fd0:	20000b8c 	.word	0x20000b8c

08010fd4 <find_pregoal>:
//	未探索壁を含む＆現在座標から最も近いマス(=仮goal)を探す
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void find_pregoal()
{
 8010fd4:	b480      	push	{r7}
 8010fd6:	b085      	sub	sp, #20
 8010fd8:	af00      	add	r7, sp, #0
	//====変数宣言====
	uint8_t x, y;															//for文用変数
	uint8_t m_temp;															//マップデータ一時保持
	//uint8_t m_temp_sample[16];
	uint8_t break_flag = 0;													//未知壁マスを見つけた時のループ脱出フラグ
 8010fda:	2300      	movs	r3, #0
 8010fdc:	737b      	strb	r3, [r7, #13]

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 8010fde:	2300      	movs	r3, #0
 8010fe0:	73bb      	strb	r3, [r7, #14]
 8010fe2:	e014      	b.n	801100e <find_pregoal+0x3a>
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	73fb      	strb	r3, [r7, #15]
 8010fe8:	e00b      	b.n	8011002 <find_pregoal+0x2e>
			smap[y][x] = 0x03e7;											//未記入部分は歩数最大とする
 8010fea:	7bba      	ldrb	r2, [r7, #14]
 8010fec:	7bfb      	ldrb	r3, [r7, #15]
 8010fee:	49a0      	ldr	r1, [pc, #640]	; (8011270 <find_pregoal+0x29c>)
 8010ff0:	0112      	lsls	r2, r2, #4
 8010ff2:	4413      	add	r3, r2
 8010ff4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010ff8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 8010ffc:	7bfb      	ldrb	r3, [r7, #15]
 8010ffe:	3301      	adds	r3, #1
 8011000:	73fb      	strb	r3, [r7, #15]
 8011002:	7bfb      	ldrb	r3, [r7, #15]
 8011004:	2b0f      	cmp	r3, #15
 8011006:	d9f0      	bls.n	8010fea <find_pregoal+0x16>
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 8011008:	7bbb      	ldrb	r3, [r7, #14]
 801100a:	3301      	adds	r3, #1
 801100c:	73bb      	strb	r3, [r7, #14]
 801100e:	7bbb      	ldrb	r3, [r7, #14]
 8011010:	2b0f      	cmp	r3, #15
 8011012:	d9e7      	bls.n	8010fe4 <find_pregoal+0x10>
		}
	}

	//====探索完了フラグのクリア====
	MF2.FLAG.ALLMAP = 0;
 8011014:	4a97      	ldr	r2, [pc, #604]	; (8011274 <find_pregoal+0x2a0>)
 8011016:	8813      	ldrh	r3, [r2, #0]
 8011018:	f36f 0382 	bfc	r3, #2, #1
 801101c:	8013      	strh	r3, [r2, #0]

	//====現在座標を0にする====
	smap[mouse.y][mouse.x] = 0;
 801101e:	4b96      	ldr	r3, [pc, #600]	; (8011278 <find_pregoal+0x2a4>)
 8011020:	785b      	ldrb	r3, [r3, #1]
 8011022:	b2db      	uxtb	r3, r3
 8011024:	4618      	mov	r0, r3
 8011026:	4b94      	ldr	r3, [pc, #592]	; (8011278 <find_pregoal+0x2a4>)
 8011028:	781b      	ldrb	r3, [r3, #0]
 801102a:	b2db      	uxtb	r3, r3
 801102c:	4619      	mov	r1, r3
 801102e:	4a90      	ldr	r2, [pc, #576]	; (8011270 <find_pregoal+0x29c>)
 8011030:	0103      	lsls	r3, r0, #4
 8011032:	440b      	add	r3, r1
 8011034:	2100      	movs	r1, #0
 8011036:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====歩数カウンタを0にする====
	m_step = 0;																//現在記入した最大の歩数となる
 801103a:	4b90      	ldr	r3, [pc, #576]	; (801127c <find_pregoal+0x2a8>)
 801103c:	2200      	movs	r2, #0
 801103e:	801a      	strh	r2, [r3, #0]

	//====歩数カウンタの重みづけ====
	int straight = 3;
 8011040:	2303      	movs	r3, #3
 8011042:	60bb      	str	r3, [r7, #8]
	int turn = 1;
 8011044:	2301      	movs	r3, #1
 8011046:	607b      	str	r3, [r7, #4]

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 8011048:	2300      	movs	r3, #0
 801104a:	73bb      	strb	r3, [r7, #14]
 801104c:	e180      	b.n	8011350 <find_pregoal+0x37c>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 801104e:	2300      	movs	r3, #0
 8011050:	73fb      	strb	r3, [r7, #15]
 8011052:	e173      	b.n	801133c <find_pregoal+0x368>
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {									//歩数格納変数m_stepの値が現在最大の歩数のとき
 8011054:	7bba      	ldrb	r2, [r7, #14]
 8011056:	7bfb      	ldrb	r3, [r7, #15]
 8011058:	4985      	ldr	r1, [pc, #532]	; (8011270 <find_pregoal+0x29c>)
 801105a:	0112      	lsls	r2, r2, #4
 801105c:	4413      	add	r3, r2
 801105e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8011062:	4b86      	ldr	r3, [pc, #536]	; (801127c <find_pregoal+0x2a8>)
 8011064:	881b      	ldrh	r3, [r3, #0]
 8011066:	429a      	cmp	r2, r3
 8011068:	f040 8165 	bne.w	8011336 <find_pregoal+0x362>
					m_temp = map[y][x];										//map配列からマップデータを取り出す
 801106c:	7bba      	ldrb	r2, [r7, #14]
 801106e:	7bfb      	ldrb	r3, [r7, #15]
 8011070:	4983      	ldr	r1, [pc, #524]	; (8011280 <find_pregoal+0x2ac>)
 8011072:	0112      	lsls	r2, r2, #4
 8011074:	440a      	add	r2, r1
 8011076:	4413      	add	r3, r2
 8011078:	781b      	ldrb	r3, [r3, #0]
 801107a:	70fb      	strb	r3, [r7, #3]
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {					//北壁がなく現在最北端でないとき
 801107c:	78fb      	ldrb	r3, [r7, #3]
 801107e:	f003 0308 	and.w	r3, r3, #8
 8011082:	2b00      	cmp	r3, #0
 8011084:	d14d      	bne.n	8011122 <find_pregoal+0x14e>
 8011086:	7bbb      	ldrb	r3, [r7, #14]
 8011088:	2b0f      	cmp	r3, #15
 801108a:	d04a      	beq.n	8011122 <find_pregoal+0x14e>
						if (smap[y + 1][x] == 0x03e7) {						//北側が未記入なら
 801108c:	7bbb      	ldrb	r3, [r7, #14]
 801108e:	1c5a      	adds	r2, r3, #1
 8011090:	7bfb      	ldrb	r3, [r7, #15]
 8011092:	4977      	ldr	r1, [pc, #476]	; (8011270 <find_pregoal+0x29c>)
 8011094:	0112      	lsls	r2, r2, #4
 8011096:	4413      	add	r3, r2
 8011098:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801109c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80110a0:	4293      	cmp	r3, r2
 80110a2:	d13e      	bne.n	8011122 <find_pregoal+0x14e>
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 80110a4:	7bba      	ldrb	r2, [r7, #14]
 80110a6:	7bfb      	ldrb	r3, [r7, #15]
 80110a8:	4971      	ldr	r1, [pc, #452]	; (8011270 <find_pregoal+0x29c>)
 80110aa:	0112      	lsls	r2, r2, #4
 80110ac:	4413      	add	r3, r2
 80110ae:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	b299      	uxth	r1, r3
 80110b6:	7bbb      	ldrb	r3, [r7, #14]
 80110b8:	1c5a      	adds	r2, r3, #1
 80110ba:	7bfb      	ldrb	r3, [r7, #15]
 80110bc:	4401      	add	r1, r0
 80110be:	b288      	uxth	r0, r1
 80110c0:	496b      	ldr	r1, [pc, #428]	; (8011270 <find_pregoal+0x29c>)
 80110c2:	0112      	lsls	r2, r2, #4
 80110c4:	4413      	add	r3, r2
 80110c6:	4602      	mov	r2, r0
 80110c8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y + 1][x] & 0x0f ) << 4) != (map[y + 1][x] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 80110cc:	7bbb      	ldrb	r3, [r7, #14]
 80110ce:	1c5a      	adds	r2, r3, #1
 80110d0:	7bfb      	ldrb	r3, [r7, #15]
 80110d2:	496b      	ldr	r1, [pc, #428]	; (8011280 <find_pregoal+0x2ac>)
 80110d4:	0112      	lsls	r2, r2, #4
 80110d6:	440a      	add	r2, r1
 80110d8:	4413      	add	r3, r2
 80110da:	781b      	ldrb	r3, [r3, #0]
 80110dc:	011b      	lsls	r3, r3, #4
 80110de:	b2da      	uxtb	r2, r3
 80110e0:	7bbb      	ldrb	r3, [r7, #14]
 80110e2:	1c59      	adds	r1, r3, #1
 80110e4:	7bfb      	ldrb	r3, [r7, #15]
 80110e6:	4866      	ldr	r0, [pc, #408]	; (8011280 <find_pregoal+0x2ac>)
 80110e8:	0109      	lsls	r1, r1, #4
 80110ea:	4401      	add	r1, r0
 80110ec:	440b      	add	r3, r1
 80110ee:	781b      	ldrb	r3, [r3, #0]
 80110f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80110f4:	429a      	cmp	r2, r3
 80110f6:	d014      	beq.n	8011122 <find_pregoal+0x14e>
								break_flag = 1;								//for文を抜けるフラグを立てて
 80110f8:	2301      	movs	r3, #1
 80110fa:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y + 1][x];					//仮goalの歩数を記録
 80110fc:	7bbb      	ldrb	r3, [r7, #14]
 80110fe:	1c5a      	adds	r2, r3, #1
 8011100:	7bfb      	ldrb	r3, [r7, #15]
 8011102:	495b      	ldr	r1, [pc, #364]	; (8011270 <find_pregoal+0x29c>)
 8011104:	0112      	lsls	r2, r2, #4
 8011106:	4413      	add	r3, r2
 8011108:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 801110c:	4b5d      	ldr	r3, [pc, #372]	; (8011284 <find_pregoal+0x2b0>)
 801110e:	801a      	strh	r2, [r3, #0]
								pregoal_x = x;
 8011110:	4a5d      	ldr	r2, [pc, #372]	; (8011288 <find_pregoal+0x2b4>)
 8011112:	7bfb      	ldrb	r3, [r7, #15]
 8011114:	7013      	strb	r3, [r2, #0]
								pregoal_y = y + 1;							//仮goalの座標を記録
 8011116:	7bbb      	ldrb	r3, [r7, #14]
 8011118:	3301      	adds	r3, #1
 801111a:	b2da      	uxtb	r2, r3
 801111c:	4b5b      	ldr	r3, [pc, #364]	; (801128c <find_pregoal+0x2b8>)
 801111e:	701a      	strb	r2, [r3, #0]
								break;
 8011120:	e110      	b.n	8011344 <find_pregoal+0x370>
							}
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {					//東壁がなく現在最東端でないとき
 8011122:	78fb      	ldrb	r3, [r7, #3]
 8011124:	f003 0304 	and.w	r3, r3, #4
 8011128:	2b00      	cmp	r3, #0
 801112a:	d14d      	bne.n	80111c8 <find_pregoal+0x1f4>
 801112c:	7bfb      	ldrb	r3, [r7, #15]
 801112e:	2b0f      	cmp	r3, #15
 8011130:	d04a      	beq.n	80111c8 <find_pregoal+0x1f4>
						if (smap[y][x + 1] == 0x03e7) {						//東側が未記入なら
 8011132:	7bba      	ldrb	r2, [r7, #14]
 8011134:	7bfb      	ldrb	r3, [r7, #15]
 8011136:	3301      	adds	r3, #1
 8011138:	494d      	ldr	r1, [pc, #308]	; (8011270 <find_pregoal+0x29c>)
 801113a:	0112      	lsls	r2, r2, #4
 801113c:	4413      	add	r3, r2
 801113e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011142:	f240 32e7 	movw	r2, #999	; 0x3e7
 8011146:	4293      	cmp	r3, r2
 8011148:	d13e      	bne.n	80111c8 <find_pregoal+0x1f4>
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 801114a:	7bba      	ldrb	r2, [r7, #14]
 801114c:	7bfb      	ldrb	r3, [r7, #15]
 801114e:	4948      	ldr	r1, [pc, #288]	; (8011270 <find_pregoal+0x29c>)
 8011150:	0112      	lsls	r2, r2, #4
 8011152:	4413      	add	r3, r2
 8011154:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	b299      	uxth	r1, r3
 801115c:	7bba      	ldrb	r2, [r7, #14]
 801115e:	7bfb      	ldrb	r3, [r7, #15]
 8011160:	3301      	adds	r3, #1
 8011162:	4401      	add	r1, r0
 8011164:	b288      	uxth	r0, r1
 8011166:	4942      	ldr	r1, [pc, #264]	; (8011270 <find_pregoal+0x29c>)
 8011168:	0112      	lsls	r2, r2, #4
 801116a:	4413      	add	r3, r2
 801116c:	4602      	mov	r2, r0
 801116e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y][x + 1] & 0x0f) << 4) != (map[y][x + 1] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 8011172:	7bba      	ldrb	r2, [r7, #14]
 8011174:	7bfb      	ldrb	r3, [r7, #15]
 8011176:	3301      	adds	r3, #1
 8011178:	4941      	ldr	r1, [pc, #260]	; (8011280 <find_pregoal+0x2ac>)
 801117a:	0112      	lsls	r2, r2, #4
 801117c:	440a      	add	r2, r1
 801117e:	4413      	add	r3, r2
 8011180:	781b      	ldrb	r3, [r3, #0]
 8011182:	011b      	lsls	r3, r3, #4
 8011184:	b2da      	uxtb	r2, r3
 8011186:	7bb9      	ldrb	r1, [r7, #14]
 8011188:	7bfb      	ldrb	r3, [r7, #15]
 801118a:	3301      	adds	r3, #1
 801118c:	483c      	ldr	r0, [pc, #240]	; (8011280 <find_pregoal+0x2ac>)
 801118e:	0109      	lsls	r1, r1, #4
 8011190:	4401      	add	r1, r0
 8011192:	440b      	add	r3, r1
 8011194:	781b      	ldrb	r3, [r3, #0]
 8011196:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801119a:	429a      	cmp	r2, r3
 801119c:	d014      	beq.n	80111c8 <find_pregoal+0x1f4>
								break_flag = 1;								//for文を抜けるフラグを立てて
 801119e:	2301      	movs	r3, #1
 80111a0:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y][x + 1];					//仮ゴールの歩数を記録
 80111a2:	7bba      	ldrb	r2, [r7, #14]
 80111a4:	7bfb      	ldrb	r3, [r7, #15]
 80111a6:	3301      	adds	r3, #1
 80111a8:	4931      	ldr	r1, [pc, #196]	; (8011270 <find_pregoal+0x29c>)
 80111aa:	0112      	lsls	r2, r2, #4
 80111ac:	4413      	add	r3, r2
 80111ae:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80111b2:	4b34      	ldr	r3, [pc, #208]	; (8011284 <find_pregoal+0x2b0>)
 80111b4:	801a      	strh	r2, [r3, #0]
								pregoal_x = x + 1;
 80111b6:	7bfb      	ldrb	r3, [r7, #15]
 80111b8:	3301      	adds	r3, #1
 80111ba:	b2da      	uxtb	r2, r3
 80111bc:	4b32      	ldr	r3, [pc, #200]	; (8011288 <find_pregoal+0x2b4>)
 80111be:	701a      	strb	r2, [r3, #0]
								pregoal_y = y;								//仮goalの座標を記録
 80111c0:	4a32      	ldr	r2, [pc, #200]	; (801128c <find_pregoal+0x2b8>)
 80111c2:	7bbb      	ldrb	r3, [r7, #14]
 80111c4:	7013      	strb	r3, [r2, #0]
								break;
 80111c6:	e0bd      	b.n	8011344 <find_pregoal+0x370>
							}
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {						//南壁がなく現在最南端でないとき
 80111c8:	78fb      	ldrb	r3, [r7, #3]
 80111ca:	f003 0302 	and.w	r3, r3, #2
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d15e      	bne.n	8011290 <find_pregoal+0x2bc>
 80111d2:	7bbb      	ldrb	r3, [r7, #14]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d05b      	beq.n	8011290 <find_pregoal+0x2bc>
						if (smap[y - 1][x] == 0x03e7) {						//南側が未記入なら
 80111d8:	7bbb      	ldrb	r3, [r7, #14]
 80111da:	1e5a      	subs	r2, r3, #1
 80111dc:	7bfb      	ldrb	r3, [r7, #15]
 80111de:	4924      	ldr	r1, [pc, #144]	; (8011270 <find_pregoal+0x29c>)
 80111e0:	0112      	lsls	r2, r2, #4
 80111e2:	4413      	add	r3, r2
 80111e4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80111e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80111ec:	4293      	cmp	r3, r2
 80111ee:	d14f      	bne.n	8011290 <find_pregoal+0x2bc>
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 80111f0:	7bba      	ldrb	r2, [r7, #14]
 80111f2:	7bfb      	ldrb	r3, [r7, #15]
 80111f4:	491e      	ldr	r1, [pc, #120]	; (8011270 <find_pregoal+0x29c>)
 80111f6:	0112      	lsls	r2, r2, #4
 80111f8:	4413      	add	r3, r2
 80111fa:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	b299      	uxth	r1, r3
 8011202:	7bbb      	ldrb	r3, [r7, #14]
 8011204:	1e5a      	subs	r2, r3, #1
 8011206:	7bfb      	ldrb	r3, [r7, #15]
 8011208:	4401      	add	r1, r0
 801120a:	b288      	uxth	r0, r1
 801120c:	4918      	ldr	r1, [pc, #96]	; (8011270 <find_pregoal+0x29c>)
 801120e:	0112      	lsls	r2, r2, #4
 8011210:	4413      	add	r3, r2
 8011212:	4602      	mov	r2, r0
 8011214:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y - 1][x] & 0x0f) << 4) != (map[y - 1][x] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 8011218:	7bbb      	ldrb	r3, [r7, #14]
 801121a:	1e5a      	subs	r2, r3, #1
 801121c:	7bfb      	ldrb	r3, [r7, #15]
 801121e:	4918      	ldr	r1, [pc, #96]	; (8011280 <find_pregoal+0x2ac>)
 8011220:	0112      	lsls	r2, r2, #4
 8011222:	440a      	add	r2, r1
 8011224:	4413      	add	r3, r2
 8011226:	781b      	ldrb	r3, [r3, #0]
 8011228:	011b      	lsls	r3, r3, #4
 801122a:	b2da      	uxtb	r2, r3
 801122c:	7bbb      	ldrb	r3, [r7, #14]
 801122e:	1e59      	subs	r1, r3, #1
 8011230:	7bfb      	ldrb	r3, [r7, #15]
 8011232:	4813      	ldr	r0, [pc, #76]	; (8011280 <find_pregoal+0x2ac>)
 8011234:	0109      	lsls	r1, r1, #4
 8011236:	4401      	add	r1, r0
 8011238:	440b      	add	r3, r1
 801123a:	781b      	ldrb	r3, [r3, #0]
 801123c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011240:	429a      	cmp	r2, r3
 8011242:	d025      	beq.n	8011290 <find_pregoal+0x2bc>
								break_flag = 1;								//for文を抜けるフラグを立てて
 8011244:	2301      	movs	r3, #1
 8011246:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y - 1][x];					//仮ゴールの歩数を記録
 8011248:	7bbb      	ldrb	r3, [r7, #14]
 801124a:	1e5a      	subs	r2, r3, #1
 801124c:	7bfb      	ldrb	r3, [r7, #15]
 801124e:	4908      	ldr	r1, [pc, #32]	; (8011270 <find_pregoal+0x29c>)
 8011250:	0112      	lsls	r2, r2, #4
 8011252:	4413      	add	r3, r2
 8011254:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8011258:	4b0a      	ldr	r3, [pc, #40]	; (8011284 <find_pregoal+0x2b0>)
 801125a:	801a      	strh	r2, [r3, #0]
								pregoal_x = x;
 801125c:	4a0a      	ldr	r2, [pc, #40]	; (8011288 <find_pregoal+0x2b4>)
 801125e:	7bfb      	ldrb	r3, [r7, #15]
 8011260:	7013      	strb	r3, [r2, #0]
								pregoal_y = y - 1;							//仮goalの座標を記録
 8011262:	7bbb      	ldrb	r3, [r7, #14]
 8011264:	3b01      	subs	r3, #1
 8011266:	b2da      	uxtb	r2, r3
 8011268:	4b08      	ldr	r3, [pc, #32]	; (801128c <find_pregoal+0x2b8>)
 801126a:	701a      	strb	r2, [r3, #0]
								break;
 801126c:	e06a      	b.n	8011344 <find_pregoal+0x370>
 801126e:	bf00      	nop
 8011270:	20000da0 	.word	0x20000da0
 8011274:	20000fa4 	.word	0x20000fa4
 8011278:	20000c8c 	.word	0x20000c8c
 801127c:	2000034e 	.word	0x2000034e
 8011280:	200001ac 	.word	0x200001ac
 8011284:	20000c84 	.word	0x20000c84
 8011288:	20000d9c 	.word	0x20000d9c
 801128c:	20001325 	.word	0x20001325
							}
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {						//西壁がなく現在最西端でないとき
 8011290:	78fb      	ldrb	r3, [r7, #3]
 8011292:	f003 0301 	and.w	r3, r3, #1
 8011296:	2b00      	cmp	r3, #0
 8011298:	d14d      	bne.n	8011336 <find_pregoal+0x362>
 801129a:	7bfb      	ldrb	r3, [r7, #15]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d04a      	beq.n	8011336 <find_pregoal+0x362>
						if (smap[y][x - 1] == 0x03e7) {						//西側が未記入なら
 80112a0:	7bba      	ldrb	r2, [r7, #14]
 80112a2:	7bfb      	ldrb	r3, [r7, #15]
 80112a4:	3b01      	subs	r3, #1
 80112a6:	493e      	ldr	r1, [pc, #248]	; (80113a0 <find_pregoal+0x3cc>)
 80112a8:	0112      	lsls	r2, r2, #4
 80112aa:	4413      	add	r3, r2
 80112ac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80112b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80112b4:	4293      	cmp	r3, r2
 80112b6:	d13e      	bne.n	8011336 <find_pregoal+0x362>
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
 80112b8:	7bba      	ldrb	r2, [r7, #14]
 80112ba:	7bfb      	ldrb	r3, [r7, #15]
 80112bc:	4938      	ldr	r1, [pc, #224]	; (80113a0 <find_pregoal+0x3cc>)
 80112be:	0112      	lsls	r2, r2, #4
 80112c0:	4413      	add	r3, r2
 80112c2:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	b299      	uxth	r1, r3
 80112ca:	7bba      	ldrb	r2, [r7, #14]
 80112cc:	7bfb      	ldrb	r3, [r7, #15]
 80112ce:	3b01      	subs	r3, #1
 80112d0:	4401      	add	r1, r0
 80112d2:	b288      	uxth	r0, r1
 80112d4:	4932      	ldr	r1, [pc, #200]	; (80113a0 <find_pregoal+0x3cc>)
 80112d6:	0112      	lsls	r2, r2, #4
 80112d8:	4413      	add	r3, r2
 80112da:	4602      	mov	r2, r0
 80112dc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y][x - 1] & 0x0f) << 4) != (map[y][x - 1] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 80112e0:	7bba      	ldrb	r2, [r7, #14]
 80112e2:	7bfb      	ldrb	r3, [r7, #15]
 80112e4:	3b01      	subs	r3, #1
 80112e6:	492f      	ldr	r1, [pc, #188]	; (80113a4 <find_pregoal+0x3d0>)
 80112e8:	0112      	lsls	r2, r2, #4
 80112ea:	440a      	add	r2, r1
 80112ec:	4413      	add	r3, r2
 80112ee:	781b      	ldrb	r3, [r3, #0]
 80112f0:	011b      	lsls	r3, r3, #4
 80112f2:	b2da      	uxtb	r2, r3
 80112f4:	7bb9      	ldrb	r1, [r7, #14]
 80112f6:	7bfb      	ldrb	r3, [r7, #15]
 80112f8:	3b01      	subs	r3, #1
 80112fa:	482a      	ldr	r0, [pc, #168]	; (80113a4 <find_pregoal+0x3d0>)
 80112fc:	0109      	lsls	r1, r1, #4
 80112fe:	4401      	add	r1, r0
 8011300:	440b      	add	r3, r1
 8011302:	781b      	ldrb	r3, [r3, #0]
 8011304:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011308:	429a      	cmp	r2, r3
 801130a:	d014      	beq.n	8011336 <find_pregoal+0x362>
								break_flag = 1;								//for文を抜けるフラグを立てて
 801130c:	2301      	movs	r3, #1
 801130e:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y][x - 1];					//仮ゴールの歩数を記録
 8011310:	7bba      	ldrb	r2, [r7, #14]
 8011312:	7bfb      	ldrb	r3, [r7, #15]
 8011314:	3b01      	subs	r3, #1
 8011316:	4922      	ldr	r1, [pc, #136]	; (80113a0 <find_pregoal+0x3cc>)
 8011318:	0112      	lsls	r2, r2, #4
 801131a:	4413      	add	r3, r2
 801131c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8011320:	4b21      	ldr	r3, [pc, #132]	; (80113a8 <find_pregoal+0x3d4>)
 8011322:	801a      	strh	r2, [r3, #0]
								pregoal_x = x - 1;
 8011324:	7bfb      	ldrb	r3, [r7, #15]
 8011326:	3b01      	subs	r3, #1
 8011328:	b2da      	uxtb	r2, r3
 801132a:	4b20      	ldr	r3, [pc, #128]	; (80113ac <find_pregoal+0x3d8>)
 801132c:	701a      	strb	r2, [r3, #0]
								pregoal_y = y;								//仮goalの座標を記録
 801132e:	4a20      	ldr	r2, [pc, #128]	; (80113b0 <find_pregoal+0x3dc>)
 8011330:	7bbb      	ldrb	r3, [r7, #14]
 8011332:	7013      	strb	r3, [r2, #0]
								break;							}
 8011334:	e006      	b.n	8011344 <find_pregoal+0x370>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 8011336:	7bfb      	ldrb	r3, [r7, #15]
 8011338:	3301      	adds	r3, #1
 801133a:	73fb      	strb	r3, [r7, #15]
 801133c:	7bfb      	ldrb	r3, [r7, #15]
 801133e:	2b0f      	cmp	r3, #15
 8011340:	f67f ae88 	bls.w	8011054 <find_pregoal+0x80>
						}
					}
				}
			}
			if (break_flag) break;		//map内の上位4bitと下位4bitが異なる場合、for文を抜ける
 8011344:	7b7b      	ldrb	r3, [r7, #13]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d107      	bne.n	801135a <find_pregoal+0x386>
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 801134a:	7bbb      	ldrb	r3, [r7, #14]
 801134c:	3301      	adds	r3, #1
 801134e:	73bb      	strb	r3, [r7, #14]
 8011350:	7bbb      	ldrb	r3, [r7, #14]
 8011352:	2b0f      	cmp	r3, #15
 8011354:	f67f ae7b 	bls.w	801104e <find_pregoal+0x7a>
 8011358:	e000      	b.n	801135c <find_pregoal+0x388>
			if (break_flag) break;		//map内の上位4bitと下位4bitが異なる場合、for文を抜ける
 801135a:	bf00      	nop
		}
		//====歩数カウンタのインクリメント====
		m_step++;
 801135c:	4b15      	ldr	r3, [pc, #84]	; (80113b4 <find_pregoal+0x3e0>)
 801135e:	881b      	ldrh	r3, [r3, #0]
 8011360:	3301      	adds	r3, #1
 8011362:	b29a      	uxth	r2, r3
 8011364:	4b13      	ldr	r3, [pc, #76]	; (80113b4 <find_pregoal+0x3e0>)
 8011366:	801a      	strh	r2, [r3, #0]
		if(m_step > 500) MF2.FLAG.ALLMAP = 1;
 8011368:	4b12      	ldr	r3, [pc, #72]	; (80113b4 <find_pregoal+0x3e0>)
 801136a:	881b      	ldrh	r3, [r3, #0]
 801136c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8011370:	d904      	bls.n	801137c <find_pregoal+0x3a8>
 8011372:	4a11      	ldr	r2, [pc, #68]	; (80113b8 <find_pregoal+0x3e4>)
 8011374:	8813      	ldrh	r3, [r2, #0]
 8011376:	f043 0304 	orr.w	r3, r3, #4
 801137a:	8013      	strh	r3, [r2, #0]
	} while(break_flag == 0 && MF2.FLAG.ALLMAP != 1);		//未探索壁ありマスを見つけるまで実行
 801137c:	7b7b      	ldrb	r3, [r7, #13]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d107      	bne.n	8011392 <find_pregoal+0x3be>
 8011382:	4b0d      	ldr	r3, [pc, #52]	; (80113b8 <find_pregoal+0x3e4>)
 8011384:	881b      	ldrh	r3, [r3, #0]
 8011386:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801138a:	b2db      	uxtb	r3, r3
 801138c:	2b01      	cmp	r3, #1
 801138e:	f47f ae5b 	bne.w	8011048 <find_pregoal+0x74>
}
 8011392:	bf00      	nop
 8011394:	3714      	adds	r7, #20
 8011396:	46bd      	mov	sp, r7
 8011398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801139c:	4770      	bx	lr
 801139e:	bf00      	nop
 80113a0:	20000da0 	.word	0x20000da0
 80113a4:	200001ac 	.word	0x200001ac
 80113a8:	20000c84 	.word	0x20000c84
 80113ac:	20000d9c 	.word	0x20000d9c
 80113b0:	20001325 	.word	0x20001325
 80113b4:	2000034e 	.word	0x2000034e
 80113b8:	20000fa4 	.word	0x20000fa4

080113bc <make_smap2>:
//	歩数マップを作成する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap2()
{
 80113bc:	b480      	push	{r7}
 80113be:	b085      	sub	sp, #20
 80113c0:	af00      	add	r7, sp, #0
	//====変数宣言====
	uint8_t x, y;															//for文用変数
	uint8_t m_temp;															//マップデータ一時保持

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 80113c2:	2300      	movs	r3, #0
 80113c4:	73bb      	strb	r3, [r7, #14]
 80113c6:	e014      	b.n	80113f2 <make_smap2+0x36>
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 80113c8:	2300      	movs	r3, #0
 80113ca:	73fb      	strb	r3, [r7, #15]
 80113cc:	e00b      	b.n	80113e6 <make_smap2+0x2a>
			smap[y][x] = 0x03e7;											//未記入部分は歩数最大とする
 80113ce:	7bba      	ldrb	r2, [r7, #14]
 80113d0:	7bfb      	ldrb	r3, [r7, #15]
 80113d2:	4986      	ldr	r1, [pc, #536]	; (80115ec <make_smap2+0x230>)
 80113d4:	0112      	lsls	r2, r2, #4
 80113d6:	4413      	add	r3, r2
 80113d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80113dc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 80113e0:	7bfb      	ldrb	r3, [r7, #15]
 80113e2:	3301      	adds	r3, #1
 80113e4:	73fb      	strb	r3, [r7, #15]
 80113e6:	7bfb      	ldrb	r3, [r7, #15]
 80113e8:	2b0f      	cmp	r3, #15
 80113ea:	d9f0      	bls.n	80113ce <make_smap2+0x12>
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 80113ec:	7bbb      	ldrb	r3, [r7, #14]
 80113ee:	3301      	adds	r3, #1
 80113f0:	73bb      	strb	r3, [r7, #14]
 80113f2:	7bbb      	ldrb	r3, [r7, #14]
 80113f4:	2b0f      	cmp	r3, #15
 80113f6:	d9e7      	bls.n	80113c8 <make_smap2+0xc>
		}
	}

	//====仮ゴール座標を0にする====
	smap[pregoal_y][pregoal_x] = 0;
 80113f8:	4b7d      	ldr	r3, [pc, #500]	; (80115f0 <make_smap2+0x234>)
 80113fa:	781b      	ldrb	r3, [r3, #0]
 80113fc:	4618      	mov	r0, r3
 80113fe:	4b7d      	ldr	r3, [pc, #500]	; (80115f4 <make_smap2+0x238>)
 8011400:	781b      	ldrb	r3, [r3, #0]
 8011402:	4619      	mov	r1, r3
 8011404:	4a79      	ldr	r2, [pc, #484]	; (80115ec <make_smap2+0x230>)
 8011406:	0103      	lsls	r3, r0, #4
 8011408:	440b      	add	r3, r1
 801140a:	2100      	movs	r1, #0
 801140c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====歩数カウンタを0にする====
	m_step = 0;																//現在記入した最大の歩数となる
 8011410:	4b79      	ldr	r3, [pc, #484]	; (80115f8 <make_smap2+0x23c>)
 8011412:	2200      	movs	r2, #0
 8011414:	801a      	strh	r2, [r3, #0]

	//====歩数カウンタの重みづけ====
	int straight = 3;
 8011416:	2303      	movs	r3, #3
 8011418:	60bb      	str	r3, [r7, #8]
	int turn = 5;
 801141a:	2305      	movs	r3, #5
 801141c:	607b      	str	r3, [r7, #4]

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 801141e:	2300      	movs	r3, #0
 8011420:	73bb      	strb	r3, [r7, #14]
 8011422:	e0c0      	b.n	80115a6 <make_smap2+0x1ea>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 8011424:	2300      	movs	r3, #0
 8011426:	73fb      	strb	r3, [r7, #15]
 8011428:	e0b6      	b.n	8011598 <make_smap2+0x1dc>
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {									//歩数格納変数m_stepの値が現在最大の歩数のとき
 801142a:	7bba      	ldrb	r2, [r7, #14]
 801142c:	7bfb      	ldrb	r3, [r7, #15]
 801142e:	496f      	ldr	r1, [pc, #444]	; (80115ec <make_smap2+0x230>)
 8011430:	0112      	lsls	r2, r2, #4
 8011432:	4413      	add	r3, r2
 8011434:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8011438:	4b6f      	ldr	r3, [pc, #444]	; (80115f8 <make_smap2+0x23c>)
 801143a:	881b      	ldrh	r3, [r3, #0]
 801143c:	429a      	cmp	r2, r3
 801143e:	f040 80a8 	bne.w	8011592 <make_smap2+0x1d6>
					m_temp = map[y][x];										//map配列からマップデータを取り出す
 8011442:	7bba      	ldrb	r2, [r7, #14]
 8011444:	7bfb      	ldrb	r3, [r7, #15]
 8011446:	496d      	ldr	r1, [pc, #436]	; (80115fc <make_smap2+0x240>)
 8011448:	0112      	lsls	r2, r2, #4
 801144a:	440a      	add	r2, r1
 801144c:	4413      	add	r3, r2
 801144e:	781b      	ldrb	r3, [r3, #0]
 8011450:	70fb      	strb	r3, [r7, #3]
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {					//北壁がなく現在最北端でないとき
 8011452:	78fb      	ldrb	r3, [r7, #3]
 8011454:	f003 0308 	and.w	r3, r3, #8
 8011458:	2b00      	cmp	r3, #0
 801145a:	d122      	bne.n	80114a2 <make_smap2+0xe6>
 801145c:	7bbb      	ldrb	r3, [r7, #14]
 801145e:	2b0f      	cmp	r3, #15
 8011460:	d01f      	beq.n	80114a2 <make_smap2+0xe6>
						if (smap[y + 1][x] == 0x03e7) {						//北側が未記入なら
 8011462:	7bbb      	ldrb	r3, [r7, #14]
 8011464:	1c5a      	adds	r2, r3, #1
 8011466:	7bfb      	ldrb	r3, [r7, #15]
 8011468:	4960      	ldr	r1, [pc, #384]	; (80115ec <make_smap2+0x230>)
 801146a:	0112      	lsls	r2, r2, #4
 801146c:	4413      	add	r3, r2
 801146e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011472:	f240 32e7 	movw	r2, #999	; 0x3e7
 8011476:	4293      	cmp	r3, r2
 8011478:	d113      	bne.n	80114a2 <make_smap2+0xe6>
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 801147a:	7bba      	ldrb	r2, [r7, #14]
 801147c:	7bfb      	ldrb	r3, [r7, #15]
 801147e:	495b      	ldr	r1, [pc, #364]	; (80115ec <make_smap2+0x230>)
 8011480:	0112      	lsls	r2, r2, #4
 8011482:	4413      	add	r3, r2
 8011484:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	b299      	uxth	r1, r3
 801148c:	7bbb      	ldrb	r3, [r7, #14]
 801148e:	1c5a      	adds	r2, r3, #1
 8011490:	7bfb      	ldrb	r3, [r7, #15]
 8011492:	4401      	add	r1, r0
 8011494:	b288      	uxth	r0, r1
 8011496:	4955      	ldr	r1, [pc, #340]	; (80115ec <make_smap2+0x230>)
 8011498:	0112      	lsls	r2, r2, #4
 801149a:	4413      	add	r3, r2
 801149c:	4602      	mov	r2, r0
 801149e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {					//東壁がなく現在最東端でないとき
 80114a2:	78fb      	ldrb	r3, [r7, #3]
 80114a4:	f003 0304 	and.w	r3, r3, #4
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d122      	bne.n	80114f2 <make_smap2+0x136>
 80114ac:	7bfb      	ldrb	r3, [r7, #15]
 80114ae:	2b0f      	cmp	r3, #15
 80114b0:	d01f      	beq.n	80114f2 <make_smap2+0x136>
						if (smap[y][x + 1] == 0x03e7) {						//東側が未記入なら
 80114b2:	7bba      	ldrb	r2, [r7, #14]
 80114b4:	7bfb      	ldrb	r3, [r7, #15]
 80114b6:	3301      	adds	r3, #1
 80114b8:	494c      	ldr	r1, [pc, #304]	; (80115ec <make_smap2+0x230>)
 80114ba:	0112      	lsls	r2, r2, #4
 80114bc:	4413      	add	r3, r2
 80114be:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80114c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80114c6:	4293      	cmp	r3, r2
 80114c8:	d113      	bne.n	80114f2 <make_smap2+0x136>
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 80114ca:	7bba      	ldrb	r2, [r7, #14]
 80114cc:	7bfb      	ldrb	r3, [r7, #15]
 80114ce:	4947      	ldr	r1, [pc, #284]	; (80115ec <make_smap2+0x230>)
 80114d0:	0112      	lsls	r2, r2, #4
 80114d2:	4413      	add	r3, r2
 80114d4:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	b299      	uxth	r1, r3
 80114dc:	7bba      	ldrb	r2, [r7, #14]
 80114de:	7bfb      	ldrb	r3, [r7, #15]
 80114e0:	3301      	adds	r3, #1
 80114e2:	4401      	add	r1, r0
 80114e4:	b288      	uxth	r0, r1
 80114e6:	4941      	ldr	r1, [pc, #260]	; (80115ec <make_smap2+0x230>)
 80114e8:	0112      	lsls	r2, r2, #4
 80114ea:	4413      	add	r3, r2
 80114ec:	4602      	mov	r2, r0
 80114ee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {						//南壁がなく現在最南端でないとき
 80114f2:	78fb      	ldrb	r3, [r7, #3]
 80114f4:	f003 0302 	and.w	r3, r3, #2
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d122      	bne.n	8011542 <make_smap2+0x186>
 80114fc:	7bbb      	ldrb	r3, [r7, #14]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d01f      	beq.n	8011542 <make_smap2+0x186>
						if (smap[y - 1][x] == 0x03e7) {						//南側が未記入なら
 8011502:	7bbb      	ldrb	r3, [r7, #14]
 8011504:	1e5a      	subs	r2, r3, #1
 8011506:	7bfb      	ldrb	r3, [r7, #15]
 8011508:	4938      	ldr	r1, [pc, #224]	; (80115ec <make_smap2+0x230>)
 801150a:	0112      	lsls	r2, r2, #4
 801150c:	4413      	add	r3, r2
 801150e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011512:	f240 32e7 	movw	r2, #999	; 0x3e7
 8011516:	4293      	cmp	r3, r2
 8011518:	d113      	bne.n	8011542 <make_smap2+0x186>
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 801151a:	7bba      	ldrb	r2, [r7, #14]
 801151c:	7bfb      	ldrb	r3, [r7, #15]
 801151e:	4933      	ldr	r1, [pc, #204]	; (80115ec <make_smap2+0x230>)
 8011520:	0112      	lsls	r2, r2, #4
 8011522:	4413      	add	r3, r2
 8011524:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	b299      	uxth	r1, r3
 801152c:	7bbb      	ldrb	r3, [r7, #14]
 801152e:	1e5a      	subs	r2, r3, #1
 8011530:	7bfb      	ldrb	r3, [r7, #15]
 8011532:	4401      	add	r1, r0
 8011534:	b288      	uxth	r0, r1
 8011536:	492d      	ldr	r1, [pc, #180]	; (80115ec <make_smap2+0x230>)
 8011538:	0112      	lsls	r2, r2, #4
 801153a:	4413      	add	r3, r2
 801153c:	4602      	mov	r2, r0
 801153e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {						//西壁がなく現在最西端でないとき
 8011542:	78fb      	ldrb	r3, [r7, #3]
 8011544:	f003 0301 	and.w	r3, r3, #1
 8011548:	2b00      	cmp	r3, #0
 801154a:	d122      	bne.n	8011592 <make_smap2+0x1d6>
 801154c:	7bfb      	ldrb	r3, [r7, #15]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d01f      	beq.n	8011592 <make_smap2+0x1d6>
						if (smap[y][x - 1] == 0x03e7) {						//西側が未記入なら
 8011552:	7bba      	ldrb	r2, [r7, #14]
 8011554:	7bfb      	ldrb	r3, [r7, #15]
 8011556:	3b01      	subs	r3, #1
 8011558:	4924      	ldr	r1, [pc, #144]	; (80115ec <make_smap2+0x230>)
 801155a:	0112      	lsls	r2, r2, #4
 801155c:	4413      	add	r3, r2
 801155e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011562:	f240 32e7 	movw	r2, #999	; 0x3e7
 8011566:	4293      	cmp	r3, r2
 8011568:	d113      	bne.n	8011592 <make_smap2+0x1d6>
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
 801156a:	7bba      	ldrb	r2, [r7, #14]
 801156c:	7bfb      	ldrb	r3, [r7, #15]
 801156e:	491f      	ldr	r1, [pc, #124]	; (80115ec <make_smap2+0x230>)
 8011570:	0112      	lsls	r2, r2, #4
 8011572:	4413      	add	r3, r2
 8011574:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	b299      	uxth	r1, r3
 801157c:	7bba      	ldrb	r2, [r7, #14]
 801157e:	7bfb      	ldrb	r3, [r7, #15]
 8011580:	3b01      	subs	r3, #1
 8011582:	4401      	add	r1, r0
 8011584:	b288      	uxth	r0, r1
 8011586:	4919      	ldr	r1, [pc, #100]	; (80115ec <make_smap2+0x230>)
 8011588:	0112      	lsls	r2, r2, #4
 801158a:	4413      	add	r3, r2
 801158c:	4602      	mov	r2, r0
 801158e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 8011592:	7bfb      	ldrb	r3, [r7, #15]
 8011594:	3301      	adds	r3, #1
 8011596:	73fb      	strb	r3, [r7, #15]
 8011598:	7bfb      	ldrb	r3, [r7, #15]
 801159a:	2b0f      	cmp	r3, #15
 801159c:	f67f af45 	bls.w	801142a <make_smap2+0x6e>
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 80115a0:	7bbb      	ldrb	r3, [r7, #14]
 80115a2:	3301      	adds	r3, #1
 80115a4:	73bb      	strb	r3, [r7, #14]
 80115a6:	7bbb      	ldrb	r3, [r7, #14]
 80115a8:	2b0f      	cmp	r3, #15
 80115aa:	f67f af3b 	bls.w	8011424 <make_smap2+0x68>
					}
				}
			}
		}
		//====歩数カウンタのインクリメント====
		m_step++;
 80115ae:	4b12      	ldr	r3, [pc, #72]	; (80115f8 <make_smap2+0x23c>)
 80115b0:	881b      	ldrh	r3, [r3, #0]
 80115b2:	3301      	adds	r3, #1
 80115b4:	b29a      	uxth	r2, r3
 80115b6:	4b10      	ldr	r3, [pc, #64]	; (80115f8 <make_smap2+0x23c>)
 80115b8:	801a      	strh	r2, [r3, #0]
	} while (smap[mouse.y][mouse.x] == 0x03e7);		//現在座標が未記入ではなくなるまで実行
 80115ba:	4b11      	ldr	r3, [pc, #68]	; (8011600 <make_smap2+0x244>)
 80115bc:	785b      	ldrb	r3, [r3, #1]
 80115be:	b2db      	uxtb	r3, r3
 80115c0:	4618      	mov	r0, r3
 80115c2:	4b0f      	ldr	r3, [pc, #60]	; (8011600 <make_smap2+0x244>)
 80115c4:	781b      	ldrb	r3, [r3, #0]
 80115c6:	b2db      	uxtb	r3, r3
 80115c8:	4619      	mov	r1, r3
 80115ca:	4a08      	ldr	r2, [pc, #32]	; (80115ec <make_smap2+0x230>)
 80115cc:	0103      	lsls	r3, r0, #4
 80115ce:	440b      	add	r3, r1
 80115d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80115d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80115d8:	4293      	cmp	r3, r2
 80115da:	f43f af20 	beq.w	801141e <make_smap2+0x62>
}
 80115de:	bf00      	nop
 80115e0:	3714      	adds	r7, #20
 80115e2:	46bd      	mov	sp, r7
 80115e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e8:	4770      	bx	lr
 80115ea:	bf00      	nop
 80115ec:	20000da0 	.word	0x20000da0
 80115f0:	20001325 	.word	0x20001325
 80115f4:	20000d9c 	.word	0x20000d9c
 80115f8:	2000034e 	.word	0x2000034e
 80115fc:	200001ac 	.word	0x200001ac
 8011600:	20000c8c 	.word	0x20000c8c

08011604 <pass_route2>:
//pass_route2
// route配列をpass圧縮する(半区画ベース)
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_route2(void){
 8011604:	b480      	push	{r7}
 8011606:	b083      	sub	sp, #12
 8011608:	af00      	add	r7, sp, #0
	int i;
	uint8_t s_flag = 0;
 801160a:	2300      	movs	r3, #0
 801160c:	70fb      	strb	r3, [r7, #3]
	for(i = 0; i < 256; i++){
 801160e:	2300      	movs	r3, #0
 8011610:	607b      	str	r3, [r7, #4]
 8011612:	e007      	b.n	8011624 <pass_route2+0x20>
		pass[i] = 0;								//pass配列の初期化
 8011614:	4a83      	ldr	r2, [pc, #524]	; (8011824 <pass_route2+0x220>)
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	4413      	add	r3, r2
 801161a:	2200      	movs	r2, #0
 801161c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 256; i++){
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	3301      	adds	r3, #1
 8011622:	607b      	str	r3, [r7, #4]
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	2bff      	cmp	r3, #255	; 0xff
 8011628:	ddf4      	ble.n	8011614 <pass_route2+0x10>
	}
	uint8_t p = 0;									//pass配列の配列番号用変数
 801162a:	2300      	movs	r3, #0
 801162c:	70bb      	strb	r3, [r7, #2]
	i = 0;
 801162e:	2300      	movs	r3, #0
 8011630:	607b      	str	r3, [r7, #4]
	uint8_t s = 0;									//a直線数カウント用変数
 8011632:	2300      	movs	r3, #0
 8011634:	707b      	strb	r3, [r7, #1]
	while(route[i-1] != 0xff){
 8011636:	e0e8      	b.n	801180a <pass_route2+0x206>
		s = 0;
 8011638:	2300      	movs	r3, #0
 801163a:	707b      	strb	r3, [r7, #1]
		if(route[i] == 0x44){
 801163c:	4a7a      	ldr	r2, [pc, #488]	; (8011828 <pass_route2+0x224>)
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	4413      	add	r3, r2
 8011642:	781b      	ldrb	r3, [r3, #0]
 8011644:	2b44      	cmp	r3, #68	; 0x44
 8011646:	d107      	bne.n	8011658 <pass_route2+0x54>
			pass[p] = -1;							//a右スラローム
 8011648:	78bb      	ldrb	r3, [r7, #2]
 801164a:	4a76      	ldr	r2, [pc, #472]	; (8011824 <pass_route2+0x220>)
 801164c:	21ff      	movs	r1, #255	; 0xff
 801164e:	54d1      	strb	r1, [r2, r3]
			i++;
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	3301      	adds	r3, #1
 8011654:	607b      	str	r3, [r7, #4]
 8011656:	e0d5      	b.n	8011804 <pass_route2+0x200>
		}else if(route[i] == 0x11){
 8011658:	4a73      	ldr	r2, [pc, #460]	; (8011828 <pass_route2+0x224>)
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	4413      	add	r3, r2
 801165e:	781b      	ldrb	r3, [r3, #0]
 8011660:	2b11      	cmp	r3, #17
 8011662:	d107      	bne.n	8011674 <pass_route2+0x70>
			pass[p] = -2;							//a左スラローム
 8011664:	78bb      	ldrb	r3, [r7, #2]
 8011666:	4a6f      	ldr	r2, [pc, #444]	; (8011824 <pass_route2+0x220>)
 8011668:	21fe      	movs	r1, #254	; 0xfe
 801166a:	54d1      	strb	r1, [r2, r3]
			i++;
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	3301      	adds	r3, #1
 8011670:	607b      	str	r3, [r7, #4]
 8011672:	e0c7      	b.n	8011804 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x77){
 8011674:	4a6c      	ldr	r2, [pc, #432]	; (8011828 <pass_route2+0x224>)
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	4413      	add	r3, r2
 801167a:	781b      	ldrb	r3, [r3, #0]
 801167c:	2b77      	cmp	r3, #119	; 0x77
 801167e:	d115      	bne.n	80116ac <pass_route2+0xa8>
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	3301      	adds	r3, #1
 8011684:	4a68      	ldr	r2, [pc, #416]	; (8011828 <pass_route2+0x224>)
 8011686:	5cd3      	ldrb	r3, [r2, r3]
 8011688:	2b44      	cmp	r3, #68	; 0x44
 801168a:	d10f      	bne.n	80116ac <pass_route2+0xa8>
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	3302      	adds	r3, #2
 8011690:	4a65      	ldr	r2, [pc, #404]	; (8011828 <pass_route2+0x224>)
 8011692:	5cd3      	ldrb	r3, [r2, r3]
 8011694:	2b77      	cmp	r3, #119	; 0x77
 8011696:	d109      	bne.n	80116ac <pass_route2+0xa8>
			s_flag = 0;
 8011698:	2300      	movs	r3, #0
 801169a:	70fb      	strb	r3, [r7, #3]
			pass[p] = -3;							//a大回り右スラローム
 801169c:	78bb      	ldrb	r3, [r7, #2]
 801169e:	4a61      	ldr	r2, [pc, #388]	; (8011824 <pass_route2+0x220>)
 80116a0:	21fd      	movs	r1, #253	; 0xfd
 80116a2:	54d1      	strb	r1, [r2, r3]
			i = i + 3;
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	3303      	adds	r3, #3
 80116a8:	607b      	str	r3, [r7, #4]
 80116aa:	e0ab      	b.n	8011804 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x77){
 80116ac:	4a5e      	ldr	r2, [pc, #376]	; (8011828 <pass_route2+0x224>)
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	4413      	add	r3, r2
 80116b2:	781b      	ldrb	r3, [r3, #0]
 80116b4:	2b77      	cmp	r3, #119	; 0x77
 80116b6:	d115      	bne.n	80116e4 <pass_route2+0xe0>
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	3301      	adds	r3, #1
 80116bc:	4a5a      	ldr	r2, [pc, #360]	; (8011828 <pass_route2+0x224>)
 80116be:	5cd3      	ldrb	r3, [r2, r3]
 80116c0:	2b11      	cmp	r3, #17
 80116c2:	d10f      	bne.n	80116e4 <pass_route2+0xe0>
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	3302      	adds	r3, #2
 80116c8:	4a57      	ldr	r2, [pc, #348]	; (8011828 <pass_route2+0x224>)
 80116ca:	5cd3      	ldrb	r3, [r2, r3]
 80116cc:	2b77      	cmp	r3, #119	; 0x77
 80116ce:	d109      	bne.n	80116e4 <pass_route2+0xe0>
			s_flag = 0;
 80116d0:	2300      	movs	r3, #0
 80116d2:	70fb      	strb	r3, [r7, #3]
			pass[p] = -4;							//a大回り左スラローム
 80116d4:	78bb      	ldrb	r3, [r7, #2]
 80116d6:	4a53      	ldr	r2, [pc, #332]	; (8011824 <pass_route2+0x220>)
 80116d8:	21fc      	movs	r1, #252	; 0xfc
 80116da:	54d1      	strb	r1, [r2, r3]
			i = i + 3;
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	3303      	adds	r3, #3
 80116e0:	607b      	str	r3, [r7, #4]
 80116e2:	e08f      	b.n	8011804 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x77){
 80116e4:	4a50      	ldr	r2, [pc, #320]	; (8011828 <pass_route2+0x224>)
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	4413      	add	r3, r2
 80116ea:	781b      	ldrb	r3, [r3, #0]
 80116ec:	2b77      	cmp	r3, #119	; 0x77
 80116ee:	d11b      	bne.n	8011728 <pass_route2+0x124>
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	3301      	adds	r3, #1
 80116f4:	4a4c      	ldr	r2, [pc, #304]	; (8011828 <pass_route2+0x224>)
 80116f6:	5cd3      	ldrb	r3, [r2, r3]
 80116f8:	2b44      	cmp	r3, #68	; 0x44
 80116fa:	d115      	bne.n	8011728 <pass_route2+0x124>
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	3302      	adds	r3, #2
 8011700:	4a49      	ldr	r2, [pc, #292]	; (8011828 <pass_route2+0x224>)
 8011702:	5cd3      	ldrb	r3, [r2, r3]
 8011704:	2b44      	cmp	r3, #68	; 0x44
 8011706:	d10f      	bne.n	8011728 <pass_route2+0x124>
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	3303      	adds	r3, #3
 801170c:	4a46      	ldr	r2, [pc, #280]	; (8011828 <pass_route2+0x224>)
 801170e:	5cd3      	ldrb	r3, [r2, r3]
 8011710:	2b77      	cmp	r3, #119	; 0x77
 8011712:	d109      	bne.n	8011728 <pass_route2+0x124>
			s_flag = 0;
 8011714:	2300      	movs	r3, #0
 8011716:	70fb      	strb	r3, [r7, #3]
			pass[p] = -5;							//a大回り右180スラローム
 8011718:	78bb      	ldrb	r3, [r7, #2]
 801171a:	4a42      	ldr	r2, [pc, #264]	; (8011824 <pass_route2+0x220>)
 801171c:	21fb      	movs	r1, #251	; 0xfb
 801171e:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	3304      	adds	r3, #4
 8011724:	607b      	str	r3, [r7, #4]
 8011726:	e06d      	b.n	8011804 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x77){
 8011728:	4a3f      	ldr	r2, [pc, #252]	; (8011828 <pass_route2+0x224>)
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	4413      	add	r3, r2
 801172e:	781b      	ldrb	r3, [r3, #0]
 8011730:	2b77      	cmp	r3, #119	; 0x77
 8011732:	d11b      	bne.n	801176c <pass_route2+0x168>
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	3301      	adds	r3, #1
 8011738:	4a3b      	ldr	r2, [pc, #236]	; (8011828 <pass_route2+0x224>)
 801173a:	5cd3      	ldrb	r3, [r2, r3]
 801173c:	2b11      	cmp	r3, #17
 801173e:	d115      	bne.n	801176c <pass_route2+0x168>
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	3302      	adds	r3, #2
 8011744:	4a38      	ldr	r2, [pc, #224]	; (8011828 <pass_route2+0x224>)
 8011746:	5cd3      	ldrb	r3, [r2, r3]
 8011748:	2b11      	cmp	r3, #17
 801174a:	d10f      	bne.n	801176c <pass_route2+0x168>
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	3303      	adds	r3, #3
 8011750:	4a35      	ldr	r2, [pc, #212]	; (8011828 <pass_route2+0x224>)
 8011752:	5cd3      	ldrb	r3, [r2, r3]
 8011754:	2b77      	cmp	r3, #119	; 0x77
 8011756:	d109      	bne.n	801176c <pass_route2+0x168>
			s_flag = 0;
 8011758:	2300      	movs	r3, #0
 801175a:	70fb      	strb	r3, [r7, #3]
			pass[p] = -6;							//a大回り左180スラローム
 801175c:	78bb      	ldrb	r3, [r7, #2]
 801175e:	4a31      	ldr	r2, [pc, #196]	; (8011824 <pass_route2+0x220>)
 8011760:	21fa      	movs	r1, #250	; 0xfa
 8011762:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	3304      	adds	r3, #4
 8011768:	607b      	str	r3, [r7, #4]
 801176a:	e04b      	b.n	8011804 <pass_route2+0x200>
		}else if(route[i] == 0xff){
 801176c:	4a2e      	ldr	r2, [pc, #184]	; (8011828 <pass_route2+0x224>)
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	4413      	add	r3, r2
 8011772:	781b      	ldrb	r3, [r3, #0]
 8011774:	2bff      	cmp	r3, #255	; 0xff
 8011776:	d107      	bne.n	8011788 <pass_route2+0x184>
			pass[p] = -114;							//a終了条件用
 8011778:	78bb      	ldrb	r3, [r7, #2]
 801177a:	4a2a      	ldr	r2, [pc, #168]	; (8011824 <pass_route2+0x220>)
 801177c:	218e      	movs	r1, #142	; 0x8e
 801177e:	54d1      	strb	r1, [r2, r3]
			i++;
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	3301      	adds	r3, #1
 8011784:	607b      	str	r3, [r7, #4]
 8011786:	e03d      	b.n	8011804 <pass_route2+0x200>
		}else if(route[i] == 0x77){
 8011788:	4a27      	ldr	r2, [pc, #156]	; (8011828 <pass_route2+0x224>)
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	4413      	add	r3, r2
 801178e:	781b      	ldrb	r3, [r3, #0]
 8011790:	2b77      	cmp	r3, #119	; 0x77
 8011792:	d137      	bne.n	8011804 <pass_route2+0x200>
			if(s_flag){
 8011794:	78fb      	ldrb	r3, [r7, #3]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d012      	beq.n	80117c0 <pass_route2+0x1bc>
				pass[p-1]++;
 801179a:	78bb      	ldrb	r3, [r7, #2]
 801179c:	3b01      	subs	r3, #1
 801179e:	4a21      	ldr	r2, [pc, #132]	; (8011824 <pass_route2+0x220>)
 80117a0:	56d2      	ldrsb	r2, [r2, r3]
 80117a2:	b2d2      	uxtb	r2, r2
 80117a4:	3201      	adds	r2, #1
 80117a6:	b2d2      	uxtb	r2, r2
 80117a8:	b251      	sxtb	r1, r2
 80117aa:	4a1e      	ldr	r2, [pc, #120]	; (8011824 <pass_route2+0x220>)
 80117ac:	54d1      	strb	r1, [r2, r3]
				p--;
 80117ae:	78bb      	ldrb	r3, [r7, #2]
 80117b0:	3b01      	subs	r3, #1
 80117b2:	70bb      	strb	r3, [r7, #2]
				s_flag = 0;
 80117b4:	2300      	movs	r3, #0
 80117b6:	70fb      	strb	r3, [r7, #3]
				i++;
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	3301      	adds	r3, #1
 80117bc:	607b      	str	r3, [r7, #4]
 80117be:	e021      	b.n	8011804 <pass_route2+0x200>
			}else{
				s++;
 80117c0:	787b      	ldrb	r3, [r7, #1]
 80117c2:	3301      	adds	r3, #1
 80117c4:	707b      	strb	r3, [r7, #1]
				pass[p] = s;
 80117c6:	78bb      	ldrb	r3, [r7, #2]
 80117c8:	f997 1001 	ldrsb.w	r1, [r7, #1]
 80117cc:	4a15      	ldr	r2, [pc, #84]	; (8011824 <pass_route2+0x220>)
 80117ce:	54d1      	strb	r1, [r2, r3]
				while(route[i+1] == 0x77){
 80117d0:	e00c      	b.n	80117ec <pass_route2+0x1e8>
					s_flag = 1;
 80117d2:	2301      	movs	r3, #1
 80117d4:	70fb      	strb	r3, [r7, #3]
					pass[p] = s;
 80117d6:	78bb      	ldrb	r3, [r7, #2]
 80117d8:	f997 1001 	ldrsb.w	r1, [r7, #1]
 80117dc:	4a11      	ldr	r2, [pc, #68]	; (8011824 <pass_route2+0x220>)
 80117de:	54d1      	strb	r1, [r2, r3]
					i++;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	3301      	adds	r3, #1
 80117e4:	607b      	str	r3, [r7, #4]
					s++;
 80117e6:	787b      	ldrb	r3, [r7, #1]
 80117e8:	3301      	adds	r3, #1
 80117ea:	707b      	strb	r3, [r7, #1]
				while(route[i+1] == 0x77){
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	3301      	adds	r3, #1
 80117f0:	4a0d      	ldr	r2, [pc, #52]	; (8011828 <pass_route2+0x224>)
 80117f2:	5cd3      	ldrb	r3, [r2, r3]
 80117f4:	2b77      	cmp	r3, #119	; 0x77
 80117f6:	d0ec      	beq.n	80117d2 <pass_route2+0x1ce>
				}
				if(!s_flag){
 80117f8:	78fb      	ldrb	r3, [r7, #3]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d102      	bne.n	8011804 <pass_route2+0x200>
					i++;
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	3301      	adds	r3, #1
 8011802:	607b      	str	r3, [r7, #4]
				}
			}
		}
		p++;
 8011804:	78bb      	ldrb	r3, [r7, #2]
 8011806:	3301      	adds	r3, #1
 8011808:	70bb      	strb	r3, [r7, #2]
	while(route[i-1] != 0xff){
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	3b01      	subs	r3, #1
 801180e:	4a06      	ldr	r2, [pc, #24]	; (8011828 <pass_route2+0x224>)
 8011810:	5cd3      	ldrb	r3, [r2, r3]
 8011812:	2bff      	cmp	r3, #255	; 0xff
 8011814:	f47f af10 	bne.w	8011638 <pass_route2+0x34>
	}
}
 8011818:	bf00      	nop
 801181a:	370c      	adds	r7, #12
 801181c:	46bd      	mov	sp, r7
 801181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011822:	4770      	bx	lr
 8011824:	20000350 	.word	0x20000350
 8011828:	20000c94 	.word	0x20000c94

0801182c <pass_route3>:
//pass_route3
// route配列をpass圧縮する(半区画ベース+斜めあり)
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_route3(void){
 801182c:	b480      	push	{r7}
 801182e:	b083      	sub	sp, #12
 8011830:	af00      	add	r7, sp, #0
	int i;
	uint8_t s_flag = 0;
 8011832:	2300      	movs	r3, #0
 8011834:	70fb      	strb	r3, [r7, #3]
	MF2.FLAG.V = 0;										//a斜めフラグの初期化
 8011836:	4a98      	ldr	r2, [pc, #608]	; (8011a98 <pass_route3+0x26c>)
 8011838:	8813      	ldrh	r3, [r2, #0]
 801183a:	f36f 03c3 	bfc	r3, #3, #1
 801183e:	8013      	strh	r3, [r2, #0]
	for(i = 0; i < 256; i++){
 8011840:	2300      	movs	r3, #0
 8011842:	607b      	str	r3, [r7, #4]
 8011844:	e007      	b.n	8011856 <pass_route3+0x2a>
		pass[i] = 0;								//pass配列の初期化
 8011846:	4a95      	ldr	r2, [pc, #596]	; (8011a9c <pass_route3+0x270>)
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	4413      	add	r3, r2
 801184c:	2200      	movs	r2, #0
 801184e:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 256; i++){
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	3301      	adds	r3, #1
 8011854:	607b      	str	r3, [r7, #4]
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	2bff      	cmp	r3, #255	; 0xff
 801185a:	ddf4      	ble.n	8011846 <pass_route3+0x1a>
	}
	uint8_t p = 0;									//pass配列の配列番号用変数
 801185c:	2300      	movs	r3, #0
 801185e:	70bb      	strb	r3, [r7, #2]
	i = 0;
 8011860:	2300      	movs	r3, #0
 8011862:	607b      	str	r3, [r7, #4]
	uint8_t s = 0;									//a直線数カウント用変数
 8011864:	2300      	movs	r3, #0
 8011866:	707b      	strb	r3, [r7, #1]
	while(route[i-1] != 0xff){
 8011868:	e324      	b.n	8011eb4 <pass_route3+0x688>
		s = 0;
 801186a:	2300      	movs	r3, #0
 801186c:	707b      	strb	r3, [r7, #1]
		if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x77){
 801186e:	4a8c      	ldr	r2, [pc, #560]	; (8011aa0 <pass_route3+0x274>)
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	4413      	add	r3, r2
 8011874:	781b      	ldrb	r3, [r3, #0]
 8011876:	2b77      	cmp	r3, #119	; 0x77
 8011878:	d11b      	bne.n	80118b2 <pass_route3+0x86>
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	3301      	adds	r3, #1
 801187e:	4a88      	ldr	r2, [pc, #544]	; (8011aa0 <pass_route3+0x274>)
 8011880:	5cd3      	ldrb	r3, [r2, r3]
 8011882:	2b44      	cmp	r3, #68	; 0x44
 8011884:	d115      	bne.n	80118b2 <pass_route3+0x86>
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	3302      	adds	r3, #2
 801188a:	4a85      	ldr	r2, [pc, #532]	; (8011aa0 <pass_route3+0x274>)
 801188c:	5cd3      	ldrb	r3, [r2, r3]
 801188e:	2b77      	cmp	r3, #119	; 0x77
 8011890:	d10f      	bne.n	80118b2 <pass_route3+0x86>
			s_flag = 0;
 8011892:	2300      	movs	r3, #0
 8011894:	70fb      	strb	r3, [r7, #3]
			pass[p] = -3;							//a大回り右90
 8011896:	78bb      	ldrb	r3, [r7, #2]
 8011898:	4a80      	ldr	r2, [pc, #512]	; (8011a9c <pass_route3+0x270>)
 801189a:	21fd      	movs	r1, #253	; 0xfd
 801189c:	54d1      	strb	r1, [r2, r3]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d102      	bne.n	80118aa <pass_route3+0x7e>
				start_mode = 2;
 80118a4:	4b7f      	ldr	r3, [pc, #508]	; (8011aa4 <pass_route3+0x278>)
 80118a6:	2202      	movs	r2, #2
 80118a8:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	3303      	adds	r3, #3
 80118ae:	607b      	str	r3, [r7, #4]
 80118b0:	e2fd      	b.n	8011eae <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x77){
 80118b2:	4a7b      	ldr	r2, [pc, #492]	; (8011aa0 <pass_route3+0x274>)
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	4413      	add	r3, r2
 80118b8:	781b      	ldrb	r3, [r3, #0]
 80118ba:	2b77      	cmp	r3, #119	; 0x77
 80118bc:	d11b      	bne.n	80118f6 <pass_route3+0xca>
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	3301      	adds	r3, #1
 80118c2:	4a77      	ldr	r2, [pc, #476]	; (8011aa0 <pass_route3+0x274>)
 80118c4:	5cd3      	ldrb	r3, [r2, r3]
 80118c6:	2b11      	cmp	r3, #17
 80118c8:	d115      	bne.n	80118f6 <pass_route3+0xca>
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	3302      	adds	r3, #2
 80118ce:	4a74      	ldr	r2, [pc, #464]	; (8011aa0 <pass_route3+0x274>)
 80118d0:	5cd3      	ldrb	r3, [r2, r3]
 80118d2:	2b77      	cmp	r3, #119	; 0x77
 80118d4:	d10f      	bne.n	80118f6 <pass_route3+0xca>
			s_flag = 0;
 80118d6:	2300      	movs	r3, #0
 80118d8:	70fb      	strb	r3, [r7, #3]
			pass[p] = -4;							//a大回り左90
 80118da:	78bb      	ldrb	r3, [r7, #2]
 80118dc:	4a6f      	ldr	r2, [pc, #444]	; (8011a9c <pass_route3+0x270>)
 80118de:	21fc      	movs	r1, #252	; 0xfc
 80118e0:	54d1      	strb	r1, [r2, r3]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d102      	bne.n	80118ee <pass_route3+0xc2>
				start_mode = 2;
 80118e8:	4b6e      	ldr	r3, [pc, #440]	; (8011aa4 <pass_route3+0x278>)
 80118ea:	2202      	movs	r2, #2
 80118ec:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	3303      	adds	r3, #3
 80118f2:	607b      	str	r3, [r7, #4]
 80118f4:	e2db      	b.n	8011eae <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x77){
 80118f6:	4a6a      	ldr	r2, [pc, #424]	; (8011aa0 <pass_route3+0x274>)
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	4413      	add	r3, r2
 80118fc:	781b      	ldrb	r3, [r3, #0]
 80118fe:	2b77      	cmp	r3, #119	; 0x77
 8011900:	d11b      	bne.n	801193a <pass_route3+0x10e>
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	3301      	adds	r3, #1
 8011906:	4a66      	ldr	r2, [pc, #408]	; (8011aa0 <pass_route3+0x274>)
 8011908:	5cd3      	ldrb	r3, [r2, r3]
 801190a:	2b44      	cmp	r3, #68	; 0x44
 801190c:	d115      	bne.n	801193a <pass_route3+0x10e>
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	3302      	adds	r3, #2
 8011912:	4a63      	ldr	r2, [pc, #396]	; (8011aa0 <pass_route3+0x274>)
 8011914:	5cd3      	ldrb	r3, [r2, r3]
 8011916:	2b44      	cmp	r3, #68	; 0x44
 8011918:	d10f      	bne.n	801193a <pass_route3+0x10e>
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	3303      	adds	r3, #3
 801191e:	4a60      	ldr	r2, [pc, #384]	; (8011aa0 <pass_route3+0x274>)
 8011920:	5cd3      	ldrb	r3, [r2, r3]
 8011922:	2b77      	cmp	r3, #119	; 0x77
 8011924:	d109      	bne.n	801193a <pass_route3+0x10e>
			s_flag = 0;
 8011926:	2300      	movs	r3, #0
 8011928:	70fb      	strb	r3, [r7, #3]
			pass[p] = -5;							//a大回り右180
 801192a:	78bb      	ldrb	r3, [r7, #2]
 801192c:	4a5b      	ldr	r2, [pc, #364]	; (8011a9c <pass_route3+0x270>)
 801192e:	21fb      	movs	r1, #251	; 0xfb
 8011930:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	3304      	adds	r3, #4
 8011936:	607b      	str	r3, [r7, #4]
 8011938:	e2b9      	b.n	8011eae <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x77){
 801193a:	4a59      	ldr	r2, [pc, #356]	; (8011aa0 <pass_route3+0x274>)
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	4413      	add	r3, r2
 8011940:	781b      	ldrb	r3, [r3, #0]
 8011942:	2b77      	cmp	r3, #119	; 0x77
 8011944:	d11b      	bne.n	801197e <pass_route3+0x152>
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	3301      	adds	r3, #1
 801194a:	4a55      	ldr	r2, [pc, #340]	; (8011aa0 <pass_route3+0x274>)
 801194c:	5cd3      	ldrb	r3, [r2, r3]
 801194e:	2b11      	cmp	r3, #17
 8011950:	d115      	bne.n	801197e <pass_route3+0x152>
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	3302      	adds	r3, #2
 8011956:	4a52      	ldr	r2, [pc, #328]	; (8011aa0 <pass_route3+0x274>)
 8011958:	5cd3      	ldrb	r3, [r2, r3]
 801195a:	2b11      	cmp	r3, #17
 801195c:	d10f      	bne.n	801197e <pass_route3+0x152>
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	3303      	adds	r3, #3
 8011962:	4a4f      	ldr	r2, [pc, #316]	; (8011aa0 <pass_route3+0x274>)
 8011964:	5cd3      	ldrb	r3, [r2, r3]
 8011966:	2b77      	cmp	r3, #119	; 0x77
 8011968:	d109      	bne.n	801197e <pass_route3+0x152>
			s_flag = 0;
 801196a:	2300      	movs	r3, #0
 801196c:	70fb      	strb	r3, [r7, #3]
			pass[p] = -6;							//a大回り左180
 801196e:	78bb      	ldrb	r3, [r7, #2]
 8011970:	4a4a      	ldr	r2, [pc, #296]	; (8011a9c <pass_route3+0x270>)
 8011972:	21fa      	movs	r1, #250	; 0xfa
 8011974:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	3304      	adds	r3, #4
 801197a:	607b      	str	r3, [r7, #4]
 801197c:	e297      	b.n	8011eae <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x11){
 801197e:	4a48      	ldr	r2, [pc, #288]	; (8011aa0 <pass_route3+0x274>)
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	4413      	add	r3, r2
 8011984:	781b      	ldrb	r3, [r3, #0]
 8011986:	2b77      	cmp	r3, #119	; 0x77
 8011988:	d120      	bne.n	80119cc <pass_route3+0x1a0>
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	3301      	adds	r3, #1
 801198e:	4a44      	ldr	r2, [pc, #272]	; (8011aa0 <pass_route3+0x274>)
 8011990:	5cd3      	ldrb	r3, [r2, r3]
 8011992:	2b44      	cmp	r3, #68	; 0x44
 8011994:	d11a      	bne.n	80119cc <pass_route3+0x1a0>
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	3302      	adds	r3, #2
 801199a:	4a41      	ldr	r2, [pc, #260]	; (8011aa0 <pass_route3+0x274>)
 801199c:	5cd3      	ldrb	r3, [r2, r3]
 801199e:	2b11      	cmp	r3, #17
 80119a0:	d114      	bne.n	80119cc <pass_route3+0x1a0>
			s_flag = 0;
 80119a2:	2300      	movs	r3, #0
 80119a4:	70fb      	strb	r3, [r7, #3]
			pass[p] = -7;							//a斜め右V45in
 80119a6:	78bb      	ldrb	r3, [r7, #2]
 80119a8:	4a3c      	ldr	r2, [pc, #240]	; (8011a9c <pass_route3+0x270>)
 80119aa:	21f9      	movs	r1, #249	; 0xf9
 80119ac:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 80119ae:	4a3a      	ldr	r2, [pc, #232]	; (8011a98 <pass_route3+0x26c>)
 80119b0:	8813      	ldrh	r3, [r2, #0]
 80119b2:	f043 0308 	orr.w	r3, r3, #8
 80119b6:	8013      	strh	r3, [r2, #0]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d102      	bne.n	80119c4 <pass_route3+0x198>
				start_mode = 2;
 80119be:	4b39      	ldr	r3, [pc, #228]	; (8011aa4 <pass_route3+0x278>)
 80119c0:	2202      	movs	r2, #2
 80119c2:	701a      	strb	r2, [r3, #0]
			}
			i = i + 2;
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	3302      	adds	r3, #2
 80119c8:	607b      	str	r3, [r7, #4]
 80119ca:	e270      	b.n	8011eae <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x44 && route[i+1] == 0x77){
 80119cc:	4b32      	ldr	r3, [pc, #200]	; (8011a98 <pass_route3+0x26c>)
 80119ce:	881b      	ldrh	r3, [r3, #0]
 80119d0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80119d4:	b2db      	uxtb	r3, r3
 80119d6:	2b01      	cmp	r3, #1
 80119d8:	d11a      	bne.n	8011a10 <pass_route3+0x1e4>
 80119da:	4a31      	ldr	r2, [pc, #196]	; (8011aa0 <pass_route3+0x274>)
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	4413      	add	r3, r2
 80119e0:	781b      	ldrb	r3, [r3, #0]
 80119e2:	2b44      	cmp	r3, #68	; 0x44
 80119e4:	d114      	bne.n	8011a10 <pass_route3+0x1e4>
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	3301      	adds	r3, #1
 80119ea:	4a2d      	ldr	r2, [pc, #180]	; (8011aa0 <pass_route3+0x274>)
 80119ec:	5cd3      	ldrb	r3, [r2, r3]
 80119ee:	2b77      	cmp	r3, #119	; 0x77
 80119f0:	d10e      	bne.n	8011a10 <pass_route3+0x1e4>
			s_flag = 0;
 80119f2:	2300      	movs	r3, #0
 80119f4:	70fb      	strb	r3, [r7, #3]
			pass[p] = -7;							//a斜め右V45out
 80119f6:	78bb      	ldrb	r3, [r7, #2]
 80119f8:	4a28      	ldr	r2, [pc, #160]	; (8011a9c <pass_route3+0x270>)
 80119fa:	21f9      	movs	r1, #249	; 0xf9
 80119fc:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 0;
 80119fe:	4a26      	ldr	r2, [pc, #152]	; (8011a98 <pass_route3+0x26c>)
 8011a00:	8813      	ldrh	r3, [r2, #0]
 8011a02:	f36f 03c3 	bfc	r3, #3, #1
 8011a06:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	3302      	adds	r3, #2
 8011a0c:	607b      	str	r3, [r7, #4]
 8011a0e:	e24e      	b.n	8011eae <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x44){
 8011a10:	4a23      	ldr	r2, [pc, #140]	; (8011aa0 <pass_route3+0x274>)
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	4413      	add	r3, r2
 8011a16:	781b      	ldrb	r3, [r3, #0]
 8011a18:	2b77      	cmp	r3, #119	; 0x77
 8011a1a:	d11a      	bne.n	8011a52 <pass_route3+0x226>
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	3301      	adds	r3, #1
 8011a20:	4a1f      	ldr	r2, [pc, #124]	; (8011aa0 <pass_route3+0x274>)
 8011a22:	5cd3      	ldrb	r3, [r2, r3]
 8011a24:	2b11      	cmp	r3, #17
 8011a26:	d114      	bne.n	8011a52 <pass_route3+0x226>
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	3302      	adds	r3, #2
 8011a2c:	4a1c      	ldr	r2, [pc, #112]	; (8011aa0 <pass_route3+0x274>)
 8011a2e:	5cd3      	ldrb	r3, [r2, r3]
 8011a30:	2b44      	cmp	r3, #68	; 0x44
 8011a32:	d10e      	bne.n	8011a52 <pass_route3+0x226>
			s_flag = 0;
 8011a34:	2300      	movs	r3, #0
 8011a36:	70fb      	strb	r3, [r7, #3]
			pass[p] = -8;							//a斜め左V45in
 8011a38:	78bb      	ldrb	r3, [r7, #2]
 8011a3a:	4a18      	ldr	r2, [pc, #96]	; (8011a9c <pass_route3+0x270>)
 8011a3c:	21f8      	movs	r1, #248	; 0xf8
 8011a3e:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8011a40:	4a15      	ldr	r2, [pc, #84]	; (8011a98 <pass_route3+0x26c>)
 8011a42:	8813      	ldrh	r3, [r2, #0]
 8011a44:	f043 0308 	orr.w	r3, r3, #8
 8011a48:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	3302      	adds	r3, #2
 8011a4e:	607b      	str	r3, [r7, #4]
 8011a50:	e22d      	b.n	8011eae <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x11 && route[i+1] == 0x77){
 8011a52:	4b11      	ldr	r3, [pc, #68]	; (8011a98 <pass_route3+0x26c>)
 8011a54:	881b      	ldrh	r3, [r3, #0]
 8011a56:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011a5a:	b2db      	uxtb	r3, r3
 8011a5c:	2b01      	cmp	r3, #1
 8011a5e:	d123      	bne.n	8011aa8 <pass_route3+0x27c>
 8011a60:	4a0f      	ldr	r2, [pc, #60]	; (8011aa0 <pass_route3+0x274>)
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	4413      	add	r3, r2
 8011a66:	781b      	ldrb	r3, [r3, #0]
 8011a68:	2b11      	cmp	r3, #17
 8011a6a:	d11d      	bne.n	8011aa8 <pass_route3+0x27c>
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	3301      	adds	r3, #1
 8011a70:	4a0b      	ldr	r2, [pc, #44]	; (8011aa0 <pass_route3+0x274>)
 8011a72:	5cd3      	ldrb	r3, [r2, r3]
 8011a74:	2b77      	cmp	r3, #119	; 0x77
 8011a76:	d117      	bne.n	8011aa8 <pass_route3+0x27c>
			s_flag = 0;
 8011a78:	2300      	movs	r3, #0
 8011a7a:	70fb      	strb	r3, [r7, #3]
			pass[p] = -8;							//a斜め左V45out
 8011a7c:	78bb      	ldrb	r3, [r7, #2]
 8011a7e:	4a07      	ldr	r2, [pc, #28]	; (8011a9c <pass_route3+0x270>)
 8011a80:	21f8      	movs	r1, #248	; 0xf8
 8011a82:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 0;
 8011a84:	4a04      	ldr	r2, [pc, #16]	; (8011a98 <pass_route3+0x26c>)
 8011a86:	8813      	ldrh	r3, [r2, #0]
 8011a88:	f36f 03c3 	bfc	r3, #3, #1
 8011a8c:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	3302      	adds	r3, #2
 8011a92:	607b      	str	r3, [r7, #4]
 8011a94:	e20b      	b.n	8011eae <pass_route3+0x682>
 8011a96:	bf00      	nop
 8011a98:	20000fa4 	.word	0x20000fa4
 8011a9c:	20000350 	.word	0x20000350
 8011aa0:	20000c94 	.word	0x20000c94
 8011aa4:	2000164c 	.word	0x2000164c
		}else if(MF2.FLAG.V == 1 && route[i] == 0x44 && route[i+1] == 0x44 && route[i+2] == 0x11){
 8011aa8:	4b99      	ldr	r3, [pc, #612]	; (8011d10 <pass_route3+0x4e4>)
 8011aaa:	881b      	ldrh	r3, [r3, #0]
 8011aac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011ab0:	b2db      	uxtb	r3, r3
 8011ab2:	2b01      	cmp	r3, #1
 8011ab4:	d120      	bne.n	8011af8 <pass_route3+0x2cc>
 8011ab6:	4a97      	ldr	r2, [pc, #604]	; (8011d14 <pass_route3+0x4e8>)
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	4413      	add	r3, r2
 8011abc:	781b      	ldrb	r3, [r3, #0]
 8011abe:	2b44      	cmp	r3, #68	; 0x44
 8011ac0:	d11a      	bne.n	8011af8 <pass_route3+0x2cc>
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	3301      	adds	r3, #1
 8011ac6:	4a93      	ldr	r2, [pc, #588]	; (8011d14 <pass_route3+0x4e8>)
 8011ac8:	5cd3      	ldrb	r3, [r2, r3]
 8011aca:	2b44      	cmp	r3, #68	; 0x44
 8011acc:	d114      	bne.n	8011af8 <pass_route3+0x2cc>
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	3302      	adds	r3, #2
 8011ad2:	4a90      	ldr	r2, [pc, #576]	; (8011d14 <pass_route3+0x4e8>)
 8011ad4:	5cd3      	ldrb	r3, [r2, r3]
 8011ad6:	2b11      	cmp	r3, #17
 8011ad8:	d10e      	bne.n	8011af8 <pass_route3+0x2cc>
			s_flag = 0;
 8011ada:	2300      	movs	r3, #0
 8011adc:	70fb      	strb	r3, [r7, #3]
			pass[p] = -9;							//a斜め右V90
 8011ade:	78bb      	ldrb	r3, [r7, #2]
 8011ae0:	4a8d      	ldr	r2, [pc, #564]	; (8011d18 <pass_route3+0x4ec>)
 8011ae2:	21f7      	movs	r1, #247	; 0xf7
 8011ae4:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8011ae6:	4a8a      	ldr	r2, [pc, #552]	; (8011d10 <pass_route3+0x4e4>)
 8011ae8:	8813      	ldrh	r3, [r2, #0]
 8011aea:	f043 0308 	orr.w	r3, r3, #8
 8011aee:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	3302      	adds	r3, #2
 8011af4:	607b      	str	r3, [r7, #4]
 8011af6:	e1da      	b.n	8011eae <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x11 && route[i+1] == 0x11 && route[i+2] == 0x44){
 8011af8:	4b85      	ldr	r3, [pc, #532]	; (8011d10 <pass_route3+0x4e4>)
 8011afa:	881b      	ldrh	r3, [r3, #0]
 8011afc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011b00:	b2db      	uxtb	r3, r3
 8011b02:	2b01      	cmp	r3, #1
 8011b04:	d120      	bne.n	8011b48 <pass_route3+0x31c>
 8011b06:	4a83      	ldr	r2, [pc, #524]	; (8011d14 <pass_route3+0x4e8>)
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	4413      	add	r3, r2
 8011b0c:	781b      	ldrb	r3, [r3, #0]
 8011b0e:	2b11      	cmp	r3, #17
 8011b10:	d11a      	bne.n	8011b48 <pass_route3+0x31c>
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	3301      	adds	r3, #1
 8011b16:	4a7f      	ldr	r2, [pc, #508]	; (8011d14 <pass_route3+0x4e8>)
 8011b18:	5cd3      	ldrb	r3, [r2, r3]
 8011b1a:	2b11      	cmp	r3, #17
 8011b1c:	d114      	bne.n	8011b48 <pass_route3+0x31c>
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	3302      	adds	r3, #2
 8011b22:	4a7c      	ldr	r2, [pc, #496]	; (8011d14 <pass_route3+0x4e8>)
 8011b24:	5cd3      	ldrb	r3, [r2, r3]
 8011b26:	2b44      	cmp	r3, #68	; 0x44
 8011b28:	d10e      	bne.n	8011b48 <pass_route3+0x31c>
			s_flag = 0;
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	70fb      	strb	r3, [r7, #3]
			pass[p] = -10;							//a斜め左V90
 8011b2e:	78bb      	ldrb	r3, [r7, #2]
 8011b30:	4a79      	ldr	r2, [pc, #484]	; (8011d18 <pass_route3+0x4ec>)
 8011b32:	21f6      	movs	r1, #246	; 0xf6
 8011b34:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8011b36:	4a76      	ldr	r2, [pc, #472]	; (8011d10 <pass_route3+0x4e4>)
 8011b38:	8813      	ldrh	r3, [r2, #0]
 8011b3a:	f043 0308 	orr.w	r3, r3, #8
 8011b3e:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	3302      	adds	r3, #2
 8011b44:	607b      	str	r3, [r7, #4]
 8011b46:	e1b2      	b.n	8011eae <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x11){
 8011b48:	4a72      	ldr	r2, [pc, #456]	; (8011d14 <pass_route3+0x4e8>)
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	4413      	add	r3, r2
 8011b4e:	781b      	ldrb	r3, [r3, #0]
 8011b50:	2b77      	cmp	r3, #119	; 0x77
 8011b52:	d126      	bne.n	8011ba2 <pass_route3+0x376>
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	3301      	adds	r3, #1
 8011b58:	4a6e      	ldr	r2, [pc, #440]	; (8011d14 <pass_route3+0x4e8>)
 8011b5a:	5cd3      	ldrb	r3, [r2, r3]
 8011b5c:	2b44      	cmp	r3, #68	; 0x44
 8011b5e:	d120      	bne.n	8011ba2 <pass_route3+0x376>
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	3302      	adds	r3, #2
 8011b64:	4a6b      	ldr	r2, [pc, #428]	; (8011d14 <pass_route3+0x4e8>)
 8011b66:	5cd3      	ldrb	r3, [r2, r3]
 8011b68:	2b44      	cmp	r3, #68	; 0x44
 8011b6a:	d11a      	bne.n	8011ba2 <pass_route3+0x376>
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	3303      	adds	r3, #3
 8011b70:	4a68      	ldr	r2, [pc, #416]	; (8011d14 <pass_route3+0x4e8>)
 8011b72:	5cd3      	ldrb	r3, [r2, r3]
 8011b74:	2b11      	cmp	r3, #17
 8011b76:	d114      	bne.n	8011ba2 <pass_route3+0x376>
			s_flag = 0;
 8011b78:	2300      	movs	r3, #0
 8011b7a:	70fb      	strb	r3, [r7, #3]
			pass[p] = -11;							//a斜め右V135in
 8011b7c:	78bb      	ldrb	r3, [r7, #2]
 8011b7e:	4a66      	ldr	r2, [pc, #408]	; (8011d18 <pass_route3+0x4ec>)
 8011b80:	21f5      	movs	r1, #245	; 0xf5
 8011b82:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8011b84:	4a62      	ldr	r2, [pc, #392]	; (8011d10 <pass_route3+0x4e4>)
 8011b86:	8813      	ldrh	r3, [r2, #0]
 8011b88:	f043 0308 	orr.w	r3, r3, #8
 8011b8c:	8013      	strh	r3, [r2, #0]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d102      	bne.n	8011b9a <pass_route3+0x36e>
				start_mode = 2;
 8011b94:	4b61      	ldr	r3, [pc, #388]	; (8011d1c <pass_route3+0x4f0>)
 8011b96:	2202      	movs	r2, #2
 8011b98:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	3303      	adds	r3, #3
 8011b9e:	607b      	str	r3, [r7, #4]
 8011ba0:	e185      	b.n	8011eae <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x44 && route[i+1] == 0x44 && route[i+2] == 0x77){
 8011ba2:	4b5b      	ldr	r3, [pc, #364]	; (8011d10 <pass_route3+0x4e4>)
 8011ba4:	881b      	ldrh	r3, [r3, #0]
 8011ba6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011baa:	b2db      	uxtb	r3, r3
 8011bac:	2b01      	cmp	r3, #1
 8011bae:	d120      	bne.n	8011bf2 <pass_route3+0x3c6>
 8011bb0:	4a58      	ldr	r2, [pc, #352]	; (8011d14 <pass_route3+0x4e8>)
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	4413      	add	r3, r2
 8011bb6:	781b      	ldrb	r3, [r3, #0]
 8011bb8:	2b44      	cmp	r3, #68	; 0x44
 8011bba:	d11a      	bne.n	8011bf2 <pass_route3+0x3c6>
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	3301      	adds	r3, #1
 8011bc0:	4a54      	ldr	r2, [pc, #336]	; (8011d14 <pass_route3+0x4e8>)
 8011bc2:	5cd3      	ldrb	r3, [r2, r3]
 8011bc4:	2b44      	cmp	r3, #68	; 0x44
 8011bc6:	d114      	bne.n	8011bf2 <pass_route3+0x3c6>
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	3302      	adds	r3, #2
 8011bcc:	4a51      	ldr	r2, [pc, #324]	; (8011d14 <pass_route3+0x4e8>)
 8011bce:	5cd3      	ldrb	r3, [r2, r3]
 8011bd0:	2b77      	cmp	r3, #119	; 0x77
 8011bd2:	d10e      	bne.n	8011bf2 <pass_route3+0x3c6>
			s_flag = 0;
 8011bd4:	2300      	movs	r3, #0
 8011bd6:	70fb      	strb	r3, [r7, #3]
			pass[p] = -11;							//a斜め右V135out
 8011bd8:	78bb      	ldrb	r3, [r7, #2]
 8011bda:	4a4f      	ldr	r2, [pc, #316]	; (8011d18 <pass_route3+0x4ec>)
 8011bdc:	21f5      	movs	r1, #245	; 0xf5
 8011bde:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 0;
 8011be0:	4a4b      	ldr	r2, [pc, #300]	; (8011d10 <pass_route3+0x4e4>)
 8011be2:	8813      	ldrh	r3, [r2, #0]
 8011be4:	f36f 03c3 	bfc	r3, #3, #1
 8011be8:	8013      	strh	r3, [r2, #0]
			i = i + 3;
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	3303      	adds	r3, #3
 8011bee:	607b      	str	r3, [r7, #4]
 8011bf0:	e15d      	b.n	8011eae <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x44){
 8011bf2:	4a48      	ldr	r2, [pc, #288]	; (8011d14 <pass_route3+0x4e8>)
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	4413      	add	r3, r2
 8011bf8:	781b      	ldrb	r3, [r3, #0]
 8011bfa:	2b77      	cmp	r3, #119	; 0x77
 8011bfc:	d120      	bne.n	8011c40 <pass_route3+0x414>
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	3301      	adds	r3, #1
 8011c02:	4a44      	ldr	r2, [pc, #272]	; (8011d14 <pass_route3+0x4e8>)
 8011c04:	5cd3      	ldrb	r3, [r2, r3]
 8011c06:	2b11      	cmp	r3, #17
 8011c08:	d11a      	bne.n	8011c40 <pass_route3+0x414>
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	3302      	adds	r3, #2
 8011c0e:	4a41      	ldr	r2, [pc, #260]	; (8011d14 <pass_route3+0x4e8>)
 8011c10:	5cd3      	ldrb	r3, [r2, r3]
 8011c12:	2b11      	cmp	r3, #17
 8011c14:	d114      	bne.n	8011c40 <pass_route3+0x414>
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	3303      	adds	r3, #3
 8011c1a:	4a3e      	ldr	r2, [pc, #248]	; (8011d14 <pass_route3+0x4e8>)
 8011c1c:	5cd3      	ldrb	r3, [r2, r3]
 8011c1e:	2b44      	cmp	r3, #68	; 0x44
 8011c20:	d10e      	bne.n	8011c40 <pass_route3+0x414>
			s_flag = 0;
 8011c22:	2300      	movs	r3, #0
 8011c24:	70fb      	strb	r3, [r7, #3]
			pass[p] = -12;							//a斜め左V135in
 8011c26:	78bb      	ldrb	r3, [r7, #2]
 8011c28:	4a3b      	ldr	r2, [pc, #236]	; (8011d18 <pass_route3+0x4ec>)
 8011c2a:	21f4      	movs	r1, #244	; 0xf4
 8011c2c:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8011c2e:	4a38      	ldr	r2, [pc, #224]	; (8011d10 <pass_route3+0x4e4>)
 8011c30:	8813      	ldrh	r3, [r2, #0]
 8011c32:	f043 0308 	orr.w	r3, r3, #8
 8011c36:	8013      	strh	r3, [r2, #0]
			i = i + 3;
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	3303      	adds	r3, #3
 8011c3c:	607b      	str	r3, [r7, #4]
 8011c3e:	e136      	b.n	8011eae <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x11 && route[i+1] == 0x11 && route[i+2] == 0x77){
 8011c40:	4b33      	ldr	r3, [pc, #204]	; (8011d10 <pass_route3+0x4e4>)
 8011c42:	881b      	ldrh	r3, [r3, #0]
 8011c44:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011c48:	b2db      	uxtb	r3, r3
 8011c4a:	2b01      	cmp	r3, #1
 8011c4c:	d120      	bne.n	8011c90 <pass_route3+0x464>
 8011c4e:	4a31      	ldr	r2, [pc, #196]	; (8011d14 <pass_route3+0x4e8>)
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	4413      	add	r3, r2
 8011c54:	781b      	ldrb	r3, [r3, #0]
 8011c56:	2b11      	cmp	r3, #17
 8011c58:	d11a      	bne.n	8011c90 <pass_route3+0x464>
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	3301      	adds	r3, #1
 8011c5e:	4a2d      	ldr	r2, [pc, #180]	; (8011d14 <pass_route3+0x4e8>)
 8011c60:	5cd3      	ldrb	r3, [r2, r3]
 8011c62:	2b11      	cmp	r3, #17
 8011c64:	d114      	bne.n	8011c90 <pass_route3+0x464>
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	3302      	adds	r3, #2
 8011c6a:	4a2a      	ldr	r2, [pc, #168]	; (8011d14 <pass_route3+0x4e8>)
 8011c6c:	5cd3      	ldrb	r3, [r2, r3]
 8011c6e:	2b77      	cmp	r3, #119	; 0x77
 8011c70:	d10e      	bne.n	8011c90 <pass_route3+0x464>
			s_flag = 0;
 8011c72:	2300      	movs	r3, #0
 8011c74:	70fb      	strb	r3, [r7, #3]
			pass[p] = -12;							//a斜め左V135out
 8011c76:	78bb      	ldrb	r3, [r7, #2]
 8011c78:	4a27      	ldr	r2, [pc, #156]	; (8011d18 <pass_route3+0x4ec>)
 8011c7a:	21f4      	movs	r1, #244	; 0xf4
 8011c7c:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 0;
 8011c7e:	4a24      	ldr	r2, [pc, #144]	; (8011d10 <pass_route3+0x4e4>)
 8011c80:	8813      	ldrh	r3, [r2, #0]
 8011c82:	f36f 03c3 	bfc	r3, #3, #1
 8011c86:	8013      	strh	r3, [r2, #0]
			i = i + 3;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	3303      	adds	r3, #3
 8011c8c:	607b      	str	r3, [r7, #4]
 8011c8e:	e10e      	b.n	8011eae <pass_route3+0x682>
		}else if(route[i] == 0xff){
 8011c90:	4a20      	ldr	r2, [pc, #128]	; (8011d14 <pass_route3+0x4e8>)
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	4413      	add	r3, r2
 8011c96:	781b      	ldrb	r3, [r3, #0]
 8011c98:	2bff      	cmp	r3, #255	; 0xff
 8011c9a:	d16a      	bne.n	8011d72 <pass_route3+0x546>
			if(MF2.FLAG.V == 1){
 8011c9c:	4b1c      	ldr	r3, [pc, #112]	; (8011d10 <pass_route3+0x4e4>)
 8011c9e:	881b      	ldrh	r3, [r3, #0]
 8011ca0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011ca4:	b2db      	uxtb	r3, r3
 8011ca6:	2b01      	cmp	r3, #1
 8011ca8:	d15b      	bne.n	8011d62 <pass_route3+0x536>
				if(pass[p-1] == -1 && pass[p-2] == -1){
 8011caa:	78bb      	ldrb	r3, [r7, #2]
 8011cac:	3b01      	subs	r3, #1
 8011cae:	4a1a      	ldr	r2, [pc, #104]	; (8011d18 <pass_route3+0x4ec>)
 8011cb0:	56d3      	ldrsb	r3, [r2, r3]
 8011cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cb6:	d111      	bne.n	8011cdc <pass_route3+0x4b0>
 8011cb8:	78bb      	ldrb	r3, [r7, #2]
 8011cba:	3b02      	subs	r3, #2
 8011cbc:	4a16      	ldr	r2, [pc, #88]	; (8011d18 <pass_route3+0x4ec>)
 8011cbe:	56d3      	ldrsb	r3, [r2, r3]
 8011cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cc4:	d10a      	bne.n	8011cdc <pass_route3+0x4b0>
					pass[p-2] = -15;
 8011cc6:	78bb      	ldrb	r3, [r7, #2]
 8011cc8:	3b02      	subs	r3, #2
 8011cca:	4a13      	ldr	r2, [pc, #76]	; (8011d18 <pass_route3+0x4ec>)
 8011ccc:	21f1      	movs	r1, #241	; 0xf1
 8011cce:	54d1      	strb	r1, [r2, r3]
					pass[p-1] = -114;
 8011cd0:	78bb      	ldrb	r3, [r7, #2]
 8011cd2:	3b01      	subs	r3, #1
 8011cd4:	4a10      	ldr	r2, [pc, #64]	; (8011d18 <pass_route3+0x4ec>)
 8011cd6:	218e      	movs	r1, #142	; 0x8e
 8011cd8:	54d1      	strb	r1, [r2, r3]
 8011cda:	e042      	b.n	8011d62 <pass_route3+0x536>
				}else if(pass[p-1] == -2 && pass[p-2] == -2){
 8011cdc:	78bb      	ldrb	r3, [r7, #2]
 8011cde:	3b01      	subs	r3, #1
 8011ce0:	4a0d      	ldr	r2, [pc, #52]	; (8011d18 <pass_route3+0x4ec>)
 8011ce2:	56d3      	ldrsb	r3, [r2, r3]
 8011ce4:	f113 0f02 	cmn.w	r3, #2
 8011ce8:	d11a      	bne.n	8011d20 <pass_route3+0x4f4>
 8011cea:	78bb      	ldrb	r3, [r7, #2]
 8011cec:	3b02      	subs	r3, #2
 8011cee:	4a0a      	ldr	r2, [pc, #40]	; (8011d18 <pass_route3+0x4ec>)
 8011cf0:	56d3      	ldrsb	r3, [r2, r3]
 8011cf2:	f113 0f02 	cmn.w	r3, #2
 8011cf6:	d113      	bne.n	8011d20 <pass_route3+0x4f4>
					pass[p-2] = -16;
 8011cf8:	78bb      	ldrb	r3, [r7, #2]
 8011cfa:	3b02      	subs	r3, #2
 8011cfc:	4a06      	ldr	r2, [pc, #24]	; (8011d18 <pass_route3+0x4ec>)
 8011cfe:	21f0      	movs	r1, #240	; 0xf0
 8011d00:	54d1      	strb	r1, [r2, r3]
					pass[p-1] = -114;
 8011d02:	78bb      	ldrb	r3, [r7, #2]
 8011d04:	3b01      	subs	r3, #1
 8011d06:	4a04      	ldr	r2, [pc, #16]	; (8011d18 <pass_route3+0x4ec>)
 8011d08:	218e      	movs	r1, #142	; 0x8e
 8011d0a:	54d1      	strb	r1, [r2, r3]
 8011d0c:	e029      	b.n	8011d62 <pass_route3+0x536>
 8011d0e:	bf00      	nop
 8011d10:	20000fa4 	.word	0x20000fa4
 8011d14:	20000c94 	.word	0x20000c94
 8011d18:	20000350 	.word	0x20000350
 8011d1c:	2000164c 	.word	0x2000164c
				}else if(pass[p-1] == -1){
 8011d20:	78bb      	ldrb	r3, [r7, #2]
 8011d22:	3b01      	subs	r3, #1
 8011d24:	4a6a      	ldr	r2, [pc, #424]	; (8011ed0 <pass_route3+0x6a4>)
 8011d26:	56d3      	ldrsb	r3, [r2, r3]
 8011d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d2c:	d109      	bne.n	8011d42 <pass_route3+0x516>
					pass[p-1] = -13;
 8011d2e:	78bb      	ldrb	r3, [r7, #2]
 8011d30:	3b01      	subs	r3, #1
 8011d32:	4a67      	ldr	r2, [pc, #412]	; (8011ed0 <pass_route3+0x6a4>)
 8011d34:	21f3      	movs	r1, #243	; 0xf3
 8011d36:	54d1      	strb	r1, [r2, r3]
					pass[p] = -114;
 8011d38:	78bb      	ldrb	r3, [r7, #2]
 8011d3a:	4a65      	ldr	r2, [pc, #404]	; (8011ed0 <pass_route3+0x6a4>)
 8011d3c:	218e      	movs	r1, #142	; 0x8e
 8011d3e:	54d1      	strb	r1, [r2, r3]
 8011d40:	e00f      	b.n	8011d62 <pass_route3+0x536>
				}else if(pass[p-1] == -2){
 8011d42:	78bb      	ldrb	r3, [r7, #2]
 8011d44:	3b01      	subs	r3, #1
 8011d46:	4a62      	ldr	r2, [pc, #392]	; (8011ed0 <pass_route3+0x6a4>)
 8011d48:	56d3      	ldrsb	r3, [r2, r3]
 8011d4a:	f113 0f02 	cmn.w	r3, #2
 8011d4e:	d108      	bne.n	8011d62 <pass_route3+0x536>
					pass[p-1] = -14;
 8011d50:	78bb      	ldrb	r3, [r7, #2]
 8011d52:	3b01      	subs	r3, #1
 8011d54:	4a5e      	ldr	r2, [pc, #376]	; (8011ed0 <pass_route3+0x6a4>)
 8011d56:	21f2      	movs	r1, #242	; 0xf2
 8011d58:	54d1      	strb	r1, [r2, r3]
					pass[p] = -114;
 8011d5a:	78bb      	ldrb	r3, [r7, #2]
 8011d5c:	4a5c      	ldr	r2, [pc, #368]	; (8011ed0 <pass_route3+0x6a4>)
 8011d5e:	218e      	movs	r1, #142	; 0x8e
 8011d60:	54d1      	strb	r1, [r2, r3]
				}
			}
			pass[p] = -114;							//a終了用配列
 8011d62:	78bb      	ldrb	r3, [r7, #2]
 8011d64:	4a5a      	ldr	r2, [pc, #360]	; (8011ed0 <pass_route3+0x6a4>)
 8011d66:	218e      	movs	r1, #142	; 0x8e
 8011d68:	54d1      	strb	r1, [r2, r3]
			i++;
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	3301      	adds	r3, #1
 8011d6e:	607b      	str	r3, [r7, #4]
 8011d70:	e09d      	b.n	8011eae <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x44 && route[i+1] == 0x11){
 8011d72:	4b58      	ldr	r3, [pc, #352]	; (8011ed4 <pass_route3+0x6a8>)
 8011d74:	881b      	ldrh	r3, [r3, #0]
 8011d76:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011d7a:	b2db      	uxtb	r3, r3
 8011d7c:	2b01      	cmp	r3, #1
 8011d7e:	d11a      	bne.n	8011db6 <pass_route3+0x58a>
 8011d80:	4a55      	ldr	r2, [pc, #340]	; (8011ed8 <pass_route3+0x6ac>)
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	4413      	add	r3, r2
 8011d86:	781b      	ldrb	r3, [r3, #0]
 8011d88:	2b44      	cmp	r3, #68	; 0x44
 8011d8a:	d114      	bne.n	8011db6 <pass_route3+0x58a>
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	3301      	adds	r3, #1
 8011d90:	4a51      	ldr	r2, [pc, #324]	; (8011ed8 <pass_route3+0x6ac>)
 8011d92:	5cd3      	ldrb	r3, [r2, r3]
 8011d94:	2b11      	cmp	r3, #17
 8011d96:	d10e      	bne.n	8011db6 <pass_route3+0x58a>
			s_flag = 0;
 8011d98:	2300      	movs	r3, #0
 8011d9a:	70fb      	strb	r3, [r7, #3]
			pass[p] = 64;							//a斜め半直線
 8011d9c:	78bb      	ldrb	r3, [r7, #2]
 8011d9e:	4a4c      	ldr	r2, [pc, #304]	; (8011ed0 <pass_route3+0x6a4>)
 8011da0:	2140      	movs	r1, #64	; 0x40
 8011da2:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8011da4:	4a4b      	ldr	r2, [pc, #300]	; (8011ed4 <pass_route3+0x6a8>)
 8011da6:	8813      	ldrh	r3, [r2, #0]
 8011da8:	f043 0308 	orr.w	r3, r3, #8
 8011dac:	8013      	strh	r3, [r2, #0]
			i++;
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	3301      	adds	r3, #1
 8011db2:	607b      	str	r3, [r7, #4]
 8011db4:	e07b      	b.n	8011eae <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x11 && route[i+1] == 0x44){
 8011db6:	4b47      	ldr	r3, [pc, #284]	; (8011ed4 <pass_route3+0x6a8>)
 8011db8:	881b      	ldrh	r3, [r3, #0]
 8011dba:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011dbe:	b2db      	uxtb	r3, r3
 8011dc0:	2b01      	cmp	r3, #1
 8011dc2:	d11a      	bne.n	8011dfa <pass_route3+0x5ce>
 8011dc4:	4a44      	ldr	r2, [pc, #272]	; (8011ed8 <pass_route3+0x6ac>)
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	4413      	add	r3, r2
 8011dca:	781b      	ldrb	r3, [r3, #0]
 8011dcc:	2b11      	cmp	r3, #17
 8011dce:	d114      	bne.n	8011dfa <pass_route3+0x5ce>
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	3301      	adds	r3, #1
 8011dd4:	4a40      	ldr	r2, [pc, #256]	; (8011ed8 <pass_route3+0x6ac>)
 8011dd6:	5cd3      	ldrb	r3, [r2, r3]
 8011dd8:	2b44      	cmp	r3, #68	; 0x44
 8011dda:	d10e      	bne.n	8011dfa <pass_route3+0x5ce>
			s_flag = 0;
 8011ddc:	2300      	movs	r3, #0
 8011dde:	70fb      	strb	r3, [r7, #3]
			pass[p] = 64;							//a斜め半直線
 8011de0:	78bb      	ldrb	r3, [r7, #2]
 8011de2:	4a3b      	ldr	r2, [pc, #236]	; (8011ed0 <pass_route3+0x6a4>)
 8011de4:	2140      	movs	r1, #64	; 0x40
 8011de6:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8011de8:	4a3a      	ldr	r2, [pc, #232]	; (8011ed4 <pass_route3+0x6a8>)
 8011dea:	8813      	ldrh	r3, [r2, #0]
 8011dec:	f043 0308 	orr.w	r3, r3, #8
 8011df0:	8013      	strh	r3, [r2, #0]
			i++;
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	3301      	adds	r3, #1
 8011df6:	607b      	str	r3, [r7, #4]
 8011df8:	e059      	b.n	8011eae <pass_route3+0x682>
		}else if(route[i] == 0x44){
 8011dfa:	4a37      	ldr	r2, [pc, #220]	; (8011ed8 <pass_route3+0x6ac>)
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	4413      	add	r3, r2
 8011e00:	781b      	ldrb	r3, [r3, #0]
 8011e02:	2b44      	cmp	r3, #68	; 0x44
 8011e04:	d107      	bne.n	8011e16 <pass_route3+0x5ea>
			pass[p] = -1;							//a右スラローム
 8011e06:	78bb      	ldrb	r3, [r7, #2]
 8011e08:	4a31      	ldr	r2, [pc, #196]	; (8011ed0 <pass_route3+0x6a4>)
 8011e0a:	21ff      	movs	r1, #255	; 0xff
 8011e0c:	54d1      	strb	r1, [r2, r3]
			i++;
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	3301      	adds	r3, #1
 8011e12:	607b      	str	r3, [r7, #4]
 8011e14:	e04b      	b.n	8011eae <pass_route3+0x682>
		}else if(route[i] == 0x11){
 8011e16:	4a30      	ldr	r2, [pc, #192]	; (8011ed8 <pass_route3+0x6ac>)
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	4413      	add	r3, r2
 8011e1c:	781b      	ldrb	r3, [r3, #0]
 8011e1e:	2b11      	cmp	r3, #17
 8011e20:	d107      	bne.n	8011e32 <pass_route3+0x606>
			pass[p] = -2;							//a左スラローム
 8011e22:	78bb      	ldrb	r3, [r7, #2]
 8011e24:	4a2a      	ldr	r2, [pc, #168]	; (8011ed0 <pass_route3+0x6a4>)
 8011e26:	21fe      	movs	r1, #254	; 0xfe
 8011e28:	54d1      	strb	r1, [r2, r3]
			i++;
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	3301      	adds	r3, #1
 8011e2e:	607b      	str	r3, [r7, #4]
 8011e30:	e03d      	b.n	8011eae <pass_route3+0x682>
		}else if(route[i] == 0x77){
 8011e32:	4a29      	ldr	r2, [pc, #164]	; (8011ed8 <pass_route3+0x6ac>)
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	4413      	add	r3, r2
 8011e38:	781b      	ldrb	r3, [r3, #0]
 8011e3a:	2b77      	cmp	r3, #119	; 0x77
 8011e3c:	d137      	bne.n	8011eae <pass_route3+0x682>
			if(s_flag){
 8011e3e:	78fb      	ldrb	r3, [r7, #3]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d012      	beq.n	8011e6a <pass_route3+0x63e>
				pass[p-1]++;						//aスラローム前半直線追加
 8011e44:	78bb      	ldrb	r3, [r7, #2]
 8011e46:	3b01      	subs	r3, #1
 8011e48:	4a21      	ldr	r2, [pc, #132]	; (8011ed0 <pass_route3+0x6a4>)
 8011e4a:	56d2      	ldrsb	r2, [r2, r3]
 8011e4c:	b2d2      	uxtb	r2, r2
 8011e4e:	3201      	adds	r2, #1
 8011e50:	b2d2      	uxtb	r2, r2
 8011e52:	b251      	sxtb	r1, r2
 8011e54:	4a1e      	ldr	r2, [pc, #120]	; (8011ed0 <pass_route3+0x6a4>)
 8011e56:	54d1      	strb	r1, [r2, r3]
				p--;
 8011e58:	78bb      	ldrb	r3, [r7, #2]
 8011e5a:	3b01      	subs	r3, #1
 8011e5c:	70bb      	strb	r3, [r7, #2]
				s_flag = 0;
 8011e5e:	2300      	movs	r3, #0
 8011e60:	70fb      	strb	r3, [r7, #3]
				i++;
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	3301      	adds	r3, #1
 8011e66:	607b      	str	r3, [r7, #4]
 8011e68:	e021      	b.n	8011eae <pass_route3+0x682>
			}else{
				s++;
 8011e6a:	787b      	ldrb	r3, [r7, #1]
 8011e6c:	3301      	adds	r3, #1
 8011e6e:	707b      	strb	r3, [r7, #1]
				pass[p] = s;						//aもし半直線1つだけの場合whileには入らない
 8011e70:	78bb      	ldrb	r3, [r7, #2]
 8011e72:	f997 1001 	ldrsb.w	r1, [r7, #1]
 8011e76:	4a16      	ldr	r2, [pc, #88]	; (8011ed0 <pass_route3+0x6a4>)
 8011e78:	54d1      	strb	r1, [r2, r3]
				while(route[i+1] == 0x77){
 8011e7a:	e00c      	b.n	8011e96 <pass_route3+0x66a>
					s_flag = 1;
 8011e7c:	2301      	movs	r3, #1
 8011e7e:	70fb      	strb	r3, [r7, #3]
					pass[p] = s;					//a半直線2つ以上続く場合、最後半直線は大回り用に残す
 8011e80:	78bb      	ldrb	r3, [r7, #2]
 8011e82:	f997 1001 	ldrsb.w	r1, [r7, #1]
 8011e86:	4a12      	ldr	r2, [pc, #72]	; (8011ed0 <pass_route3+0x6a4>)
 8011e88:	54d1      	strb	r1, [r2, r3]
					i++;
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	3301      	adds	r3, #1
 8011e8e:	607b      	str	r3, [r7, #4]
					s++;
 8011e90:	787b      	ldrb	r3, [r7, #1]
 8011e92:	3301      	adds	r3, #1
 8011e94:	707b      	strb	r3, [r7, #1]
				while(route[i+1] == 0x77){
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	3301      	adds	r3, #1
 8011e9a:	4a0f      	ldr	r2, [pc, #60]	; (8011ed8 <pass_route3+0x6ac>)
 8011e9c:	5cd3      	ldrb	r3, [r2, r3]
 8011e9e:	2b77      	cmp	r3, #119	; 0x77
 8011ea0:	d0ec      	beq.n	8011e7c <pass_route3+0x650>
				}
				if(!s_flag){
 8011ea2:	78fb      	ldrb	r3, [r7, #3]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d102      	bne.n	8011eae <pass_route3+0x682>
					i++;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	3301      	adds	r3, #1
 8011eac:	607b      	str	r3, [r7, #4]
				}
			}
		}
		p++;
 8011eae:	78bb      	ldrb	r3, [r7, #2]
 8011eb0:	3301      	adds	r3, #1
 8011eb2:	70bb      	strb	r3, [r7, #2]
	while(route[i-1] != 0xff){
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	3b01      	subs	r3, #1
 8011eb8:	4a07      	ldr	r2, [pc, #28]	; (8011ed8 <pass_route3+0x6ac>)
 8011eba:	5cd3      	ldrb	r3, [r2, r3]
 8011ebc:	2bff      	cmp	r3, #255	; 0xff
 8011ebe:	f47f acd4 	bne.w	801186a <pass_route3+0x3e>
	}
}
 8011ec2:	bf00      	nop
 8011ec4:	370c      	adds	r7, #12
 8011ec6:	46bd      	mov	sp, r7
 8011ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ecc:	4770      	bx	lr
 8011ece:	bf00      	nop
 8011ed0:	20000350 	.word	0x20000350
 8011ed4:	20000fa4 	.word	0x20000fa4
 8011ed8:	20000c94 	.word	0x20000c94

08011edc <store_map_in_eeprom>:
//store_map_in_eeprom
// mapデータをeepromに格納する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void store_map_in_eeprom(void){
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b082      	sub	sp, #8
 8011ee0:	af00      	add	r7, sp, #0
	printf("eprom func start \n");
 8011ee2:	4818      	ldr	r0, [pc, #96]	; (8011f44 <store_map_in_eeprom+0x68>)
 8011ee4:	f001 f80e 	bl	8012f04 <puts>
	eeprom_enable_write();
 8011ee8:	f7fa febe 	bl	800cc68 <eeprom_enable_write>
	printf("eprom enable_write fin \n");
 8011eec:	4816      	ldr	r0, [pc, #88]	; (8011f48 <store_map_in_eeprom+0x6c>)
 8011eee:	f001 f809 	bl	8012f04 <puts>
	int i;
	for(i = 0; i < 16; i++){
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	607b      	str	r3, [r7, #4]
 8011ef6:	e01b      	b.n	8011f30 <store_map_in_eeprom+0x54>
		int j;
		for(j = 0; j < 16; j++){
 8011ef8:	2300      	movs	r3, #0
 8011efa:	603b      	str	r3, [r7, #0]
 8011efc:	e012      	b.n	8011f24 <store_map_in_eeprom+0x48>
			eeprom_write_halfword(i*16 + j, (uint16_t) map[i][j]);
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	011a      	lsls	r2, r3, #4
 8011f02:	683b      	ldr	r3, [r7, #0]
 8011f04:	4413      	add	r3, r2
 8011f06:	4618      	mov	r0, r3
 8011f08:	4a10      	ldr	r2, [pc, #64]	; (8011f4c <store_map_in_eeprom+0x70>)
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	011b      	lsls	r3, r3, #4
 8011f0e:	441a      	add	r2, r3
 8011f10:	683b      	ldr	r3, [r7, #0]
 8011f12:	4413      	add	r3, r2
 8011f14:	781b      	ldrb	r3, [r3, #0]
 8011f16:	b29b      	uxth	r3, r3
 8011f18:	4619      	mov	r1, r3
 8011f1a:	f7fa fed0 	bl	800ccbe <eeprom_write_halfword>
		for(j = 0; j < 16; j++){
 8011f1e:	683b      	ldr	r3, [r7, #0]
 8011f20:	3301      	adds	r3, #1
 8011f22:	603b      	str	r3, [r7, #0]
 8011f24:	683b      	ldr	r3, [r7, #0]
 8011f26:	2b0f      	cmp	r3, #15
 8011f28:	dde9      	ble.n	8011efe <store_map_in_eeprom+0x22>
	for(i = 0; i < 16; i++){
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	3301      	adds	r3, #1
 8011f2e:	607b      	str	r3, [r7, #4]
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	2b0f      	cmp	r3, #15
 8011f34:	dde0      	ble.n	8011ef8 <store_map_in_eeprom+0x1c>
		}
	}
	eeprom_disable_write();
 8011f36:	f7fa febb 	bl	800ccb0 <eeprom_disable_write>
}
 8011f3a:	bf00      	nop
 8011f3c:	3708      	adds	r7, #8
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	bd80      	pop	{r7, pc}
 8011f42:	bf00      	nop
 8011f44:	080144a4 	.word	0x080144a4
 8011f48:	080144b8 	.word	0x080144b8
 8011f4c:	200001ac 	.word	0x200001ac

08011f50 <load_map_from_eeprom>:
//load_map_in_eeprom
// mapデータをeepromから取得する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void load_map_from_eeprom(void){
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b082      	sub	sp, #8
 8011f54:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 16; i++){
 8011f56:	2300      	movs	r3, #0
 8011f58:	607b      	str	r3, [r7, #4]
 8011f5a:	e01c      	b.n	8011f96 <load_map_from_eeprom+0x46>
		int j;
		for(j = 0; j < 16; j++){
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	603b      	str	r3, [r7, #0]
 8011f60:	e013      	b.n	8011f8a <load_map_from_eeprom+0x3a>
			map[i][j] = (uint8_t) eeprom_read_halfword(i*16 + j);
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	011a      	lsls	r2, r3, #4
 8011f66:	683b      	ldr	r3, [r7, #0]
 8011f68:	4413      	add	r3, r2
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	f7fa fec4 	bl	800ccf8 <eeprom_read_halfword>
 8011f70:	4603      	mov	r3, r0
 8011f72:	b2d9      	uxtb	r1, r3
 8011f74:	4a0b      	ldr	r2, [pc, #44]	; (8011fa4 <load_map_from_eeprom+0x54>)
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	011b      	lsls	r3, r3, #4
 8011f7a:	441a      	add	r2, r3
 8011f7c:	683b      	ldr	r3, [r7, #0]
 8011f7e:	4413      	add	r3, r2
 8011f80:	460a      	mov	r2, r1
 8011f82:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 16; j++){
 8011f84:	683b      	ldr	r3, [r7, #0]
 8011f86:	3301      	adds	r3, #1
 8011f88:	603b      	str	r3, [r7, #0]
 8011f8a:	683b      	ldr	r3, [r7, #0]
 8011f8c:	2b0f      	cmp	r3, #15
 8011f8e:	dde8      	ble.n	8011f62 <load_map_from_eeprom+0x12>
	for(i = 0; i < 16; i++){
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	3301      	adds	r3, #1
 8011f94:	607b      	str	r3, [r7, #4]
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	2b0f      	cmp	r3, #15
 8011f9a:	dddf      	ble.n	8011f5c <load_map_from_eeprom+0xc>
		}
	}
}
 8011f9c:	bf00      	nop
 8011f9e:	3708      	adds	r7, #8
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	bd80      	pop	{r7, pc}
 8011fa4:	200001ac 	.word	0x200001ac

08011fa8 <sensor_init>:

#include "global.h"


void sensor_init(void){
 8011fa8:	b480      	push	{r7}
 8011faa:	af00      	add	r7, sp, #0
	tp = 0;
 8011fac:	4b0e      	ldr	r3, [pc, #56]	; (8011fe8 <sensor_init+0x40>)
 8011fae:	2200      	movs	r2, #0
 8011fb0:	701a      	strb	r2, [r3, #0]
	ad_l = ad_r = ad_fr = ad_fl = 0;
 8011fb2:	4b0e      	ldr	r3, [pc, #56]	; (8011fec <sensor_init+0x44>)
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	601a      	str	r2, [r3, #0]
 8011fb8:	4b0c      	ldr	r3, [pc, #48]	; (8011fec <sensor_init+0x44>)
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	4a0c      	ldr	r2, [pc, #48]	; (8011ff0 <sensor_init+0x48>)
 8011fbe:	6013      	str	r3, [r2, #0]
 8011fc0:	4b0b      	ldr	r3, [pc, #44]	; (8011ff0 <sensor_init+0x48>)
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	4a0b      	ldr	r2, [pc, #44]	; (8011ff4 <sensor_init+0x4c>)
 8011fc6:	6013      	str	r3, [r2, #0]
 8011fc8:	4b0a      	ldr	r3, [pc, #40]	; (8011ff4 <sensor_init+0x4c>)
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	4a0a      	ldr	r2, [pc, #40]	; (8011ff8 <sensor_init+0x50>)
 8011fce:	6013      	str	r3, [r2, #0]
	base_l = base_r = 0;
 8011fd0:	4b0a      	ldr	r3, [pc, #40]	; (8011ffc <sensor_init+0x54>)
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	801a      	strh	r2, [r3, #0]
 8011fd6:	4b09      	ldr	r3, [pc, #36]	; (8011ffc <sensor_init+0x54>)
 8011fd8:	881a      	ldrh	r2, [r3, #0]
 8011fda:	4b09      	ldr	r3, [pc, #36]	; (8012000 <sensor_init+0x58>)
 8011fdc:	801a      	strh	r2, [r3, #0]
}
 8011fde:	bf00      	nop
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe6:	4770      	bx	lr
 8011fe8:	20001324 	.word	0x20001324
 8011fec:	20000d94 	.word	0x20000d94
 8011ff0:	20000c80 	.word	0x20000c80
 8011ff4:	20000fa0 	.word	0x20000fa0
 8011ff8:	20000b3c 	.word	0x20000b3c
 8011ffc:	200002c0 	.word	0x200002c0
 8012000:	2000034c 	.word	0x2000034c

08012004 <get_base>:


uint8_t get_base(){
 8012004:	b480      	push	{r7}
 8012006:	b083      	sub	sp, #12
 8012008:	af00      	add	r7, sp, #0
	uint8_t res = 1;									//for return
 801200a:	2301      	movs	r3, #1
 801200c:	71fb      	strb	r3, [r7, #7]

	base_l = ad_l;										//sensor value base L
 801200e:	4b08      	ldr	r3, [pc, #32]	; (8012030 <get_base+0x2c>)
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	b29a      	uxth	r2, r3
 8012014:	4b07      	ldr	r3, [pc, #28]	; (8012034 <get_base+0x30>)
 8012016:	801a      	strh	r2, [r3, #0]
	base_r = ad_r;										//sensor value base R
 8012018:	4b07      	ldr	r3, [pc, #28]	; (8012038 <get_base+0x34>)
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	b29a      	uxth	r2, r3
 801201e:	4b07      	ldr	r3, [pc, #28]	; (801203c <get_base+0x38>)
 8012020:	801a      	strh	r2, [r3, #0]

	return res;											//
 8012022:	79fb      	ldrb	r3, [r7, #7]
}
 8012024:	4618      	mov	r0, r3
 8012026:	370c      	adds	r7, #12
 8012028:	46bd      	mov	sp, r7
 801202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202e:	4770      	bx	lr
 8012030:	20000b3c 	.word	0x20000b3c
 8012034:	2000034c 	.word	0x2000034c
 8012038:	20000fa0 	.word	0x20000fa0
 801203c:	200002c0 	.word	0x200002c0

08012040 <get_wall_info>:


void get_wall_info(){
 8012040:	b480      	push	{r7}
 8012042:	af00      	add	r7, sp, #0

	//----reset----
	wall_info = 0x00;									//wall
 8012044:	4b16      	ldr	r3, [pc, #88]	; (80120a0 <get_wall_info+0x60>)
 8012046:	2200      	movs	r2, #0
 8012048:	701a      	strb	r2, [r3, #0]
	//----look forward----
	if(ad_fr > WALL_BASE_FR || ad_fl > WALL_BASE_FL){
 801204a:	4b16      	ldr	r3, [pc, #88]	; (80120a4 <get_wall_info+0x64>)
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	2b78      	cmp	r3, #120	; 0x78
 8012050:	d803      	bhi.n	801205a <get_wall_info+0x1a>
 8012052:	4b15      	ldr	r3, [pc, #84]	; (80120a8 <get_wall_info+0x68>)
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	2bc8      	cmp	r3, #200	; 0xc8
 8012058:	d906      	bls.n	8012068 <get_wall_info+0x28>
		wall_info |= 0x88;								//forward check
 801205a:	4b11      	ldr	r3, [pc, #68]	; (80120a0 <get_wall_info+0x60>)
 801205c:	781b      	ldrb	r3, [r3, #0]
 801205e:	f063 0377 	orn	r3, r3, #119	; 0x77
 8012062:	b2da      	uxtb	r2, r3
 8012064:	4b0e      	ldr	r3, [pc, #56]	; (80120a0 <get_wall_info+0x60>)
 8012066:	701a      	strb	r2, [r3, #0]
	}
	//----look right----
	if(ad_r > WALL_BASE_R){
 8012068:	4b10      	ldr	r3, [pc, #64]	; (80120ac <get_wall_info+0x6c>)
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8012070:	d906      	bls.n	8012080 <get_wall_info+0x40>
		wall_info |= 0x44;								//right check
 8012072:	4b0b      	ldr	r3, [pc, #44]	; (80120a0 <get_wall_info+0x60>)
 8012074:	781b      	ldrb	r3, [r3, #0]
 8012076:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 801207a:	b2da      	uxtb	r2, r3
 801207c:	4b08      	ldr	r3, [pc, #32]	; (80120a0 <get_wall_info+0x60>)
 801207e:	701a      	strb	r2, [r3, #0]
	}
	//----look left----
	if(ad_l > WALL_BASE_L){
 8012080:	4b0b      	ldr	r3, [pc, #44]	; (80120b0 <get_wall_info+0x70>)
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	2bb4      	cmp	r3, #180	; 0xb4
 8012086:	d906      	bls.n	8012096 <get_wall_info+0x56>
		wall_info |= 0x11;								//light check
 8012088:	4b05      	ldr	r3, [pc, #20]	; (80120a0 <get_wall_info+0x60>)
 801208a:	781b      	ldrb	r3, [r3, #0]
 801208c:	f043 0311 	orr.w	r3, r3, #17
 8012090:	b2da      	uxtb	r2, r3
 8012092:	4b03      	ldr	r3, [pc, #12]	; (80120a0 <get_wall_info+0x60>)
 8012094:	701a      	strb	r2, [r3, #0]
	}
}
 8012096:	bf00      	nop
 8012098:	46bd      	mov	sp, r7
 801209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209e:	4770      	bx	lr
 80120a0:	200002c8 	.word	0x200002c8
 80120a4:	20000c80 	.word	0x20000c80
 80120a8:	20000d94 	.word	0x20000d94
 80120ac:	20000fa0 	.word	0x20000fa0
 80120b0:	20000b3c 	.word	0x20000b3c

080120b4 <led_write>:
//led_write
//aモード選択用LEDのON-OFF
//a引数：led1(0=>OFF, 1=>ON), led2(0=>OFF, 1=>ON), led3(0=>OFF, 1=>ON)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void led_write(uint8_t led3, uint8_t led2, uint8_t led1){
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b082      	sub	sp, #8
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	4603      	mov	r3, r0
 80120bc:	71fb      	strb	r3, [r7, #7]
 80120be:	460b      	mov	r3, r1
 80120c0:	71bb      	strb	r3, [r7, #6]
 80120c2:	4613      	mov	r3, r2
 80120c4:	717b      	strb	r3, [r7, #5]
	if(led1) HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80120c6:	797b      	ldrb	r3, [r7, #5]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d005      	beq.n	80120d8 <led_write+0x24>
 80120cc:	2201      	movs	r2, #1
 80120ce:	2180      	movs	r1, #128	; 0x80
 80120d0:	4814      	ldr	r0, [pc, #80]	; (8012124 <led_write+0x70>)
 80120d2:	f7f0 f917 	bl	8002304 <HAL_GPIO_WritePin>
 80120d6:	e004      	b.n	80120e2 <led_write+0x2e>
	else HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80120d8:	2200      	movs	r2, #0
 80120da:	2180      	movs	r1, #128	; 0x80
 80120dc:	4811      	ldr	r0, [pc, #68]	; (8012124 <led_write+0x70>)
 80120de:	f7f0 f911 	bl	8002304 <HAL_GPIO_WritePin>

	if(led2) HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80120e2:	79bb      	ldrb	r3, [r7, #6]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d005      	beq.n	80120f4 <led_write+0x40>
 80120e8:	2201      	movs	r2, #1
 80120ea:	2140      	movs	r1, #64	; 0x40
 80120ec:	480d      	ldr	r0, [pc, #52]	; (8012124 <led_write+0x70>)
 80120ee:	f7f0 f909 	bl	8002304 <HAL_GPIO_WritePin>
 80120f2:	e004      	b.n	80120fe <led_write+0x4a>
	else HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80120f4:	2200      	movs	r2, #0
 80120f6:	2140      	movs	r1, #64	; 0x40
 80120f8:	480a      	ldr	r0, [pc, #40]	; (8012124 <led_write+0x70>)
 80120fa:	f7f0 f903 	bl	8002304 <HAL_GPIO_WritePin>

	if(led3) HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80120fe:	79fb      	ldrb	r3, [r7, #7]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d005      	beq.n	8012110 <led_write+0x5c>
 8012104:	2201      	movs	r2, #1
 8012106:	2120      	movs	r1, #32
 8012108:	4806      	ldr	r0, [pc, #24]	; (8012124 <led_write+0x70>)
 801210a:	f7f0 f8fb 	bl	8002304 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
}
 801210e:	e004      	b.n	801211a <led_write+0x66>
	else HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8012110:	2200      	movs	r2, #0
 8012112:	2120      	movs	r1, #32
 8012114:	4803      	ldr	r0, [pc, #12]	; (8012124 <led_write+0x70>)
 8012116:	f7f0 f8f5 	bl	8002304 <HAL_GPIO_WritePin>
}
 801211a:	bf00      	nop
 801211c:	3708      	adds	r7, #8
 801211e:	46bd      	mov	sp, r7
 8012120:	bd80      	pop	{r7, pc}
 8012122:	bf00      	nop
 8012124:	40020000 	.word	0x40020000

08012128 <full_led_write1>:
//full_led_write1
//a頭部フルカラーLEDの色選択
//a引数：fulled(0=>OFF, 1=>a赤, 2=>緑, 3=>青, 4=>青緑, 5=>紫, 6=>黄, 7=>白)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void full_led_write1(uint8_t fulled){
 8012128:	b580      	push	{r7, lr}
 801212a:	b082      	sub	sp, #8
 801212c:	af00      	add	r7, sp, #0
 801212e:	4603      	mov	r3, r0
 8012130:	71fb      	strb	r3, [r7, #7]
	if(fulled == 0){
 8012132:	79fb      	ldrb	r3, [r7, #7]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d10f      	bne.n	8012158 <full_led_write1+0x30>
	    HAL_GPIO_WritePin(FLED1_RED_GPIO_Port, FLED1_RED_Pin, GPIO_PIN_SET);
 8012138:	2201      	movs	r2, #1
 801213a:	2140      	movs	r1, #64	; 0x40
 801213c:	484a      	ldr	r0, [pc, #296]	; (8012268 <full_led_write1+0x140>)
 801213e:	f7f0 f8e1 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED1_GREEN_GPIO_Port, FLED1_GREEN_Pin, GPIO_PIN_SET);
 8012142:	2201      	movs	r2, #1
 8012144:	2180      	movs	r1, #128	; 0x80
 8012146:	4848      	ldr	r0, [pc, #288]	; (8012268 <full_led_write1+0x140>)
 8012148:	f7f0 f8dc 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED1_BLUE_GPIO_Port, FLED1_BLUE_Pin, GPIO_PIN_SET);
 801214c:	2201      	movs	r2, #1
 801214e:	2120      	movs	r1, #32
 8012150:	4845      	ldr	r0, [pc, #276]	; (8012268 <full_led_write1+0x140>)
 8012152:	f7f0 f8d7 	bl	8002304 <HAL_GPIO_WritePin>
	else if(fulled == 7){
	    HAL_GPIO_WritePin(FLED1_RED_GPIO_Port, FLED1_RED_Pin, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(FLED1_GREEN_GPIO_Port, FLED1_GREEN_Pin, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(FLED1_BLUE_GPIO_Port, FLED1_BLUE_Pin, GPIO_PIN_RESET);
	}
}
 8012156:	e083      	b.n	8012260 <full_led_write1+0x138>
	else if(fulled == 1){
 8012158:	79fb      	ldrb	r3, [r7, #7]
 801215a:	2b01      	cmp	r3, #1
 801215c:	d10f      	bne.n	801217e <full_led_write1+0x56>
	    HAL_GPIO_WritePin(FLED1_RED_GPIO_Port, FLED1_RED_Pin, GPIO_PIN_RESET);
 801215e:	2200      	movs	r2, #0
 8012160:	2140      	movs	r1, #64	; 0x40
 8012162:	4841      	ldr	r0, [pc, #260]	; (8012268 <full_led_write1+0x140>)
 8012164:	f7f0 f8ce 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED1_GREEN_GPIO_Port, FLED1_GREEN_Pin, GPIO_PIN_SET);
 8012168:	2201      	movs	r2, #1
 801216a:	2180      	movs	r1, #128	; 0x80
 801216c:	483e      	ldr	r0, [pc, #248]	; (8012268 <full_led_write1+0x140>)
 801216e:	f7f0 f8c9 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED1_BLUE_GPIO_Port, FLED1_BLUE_Pin, GPIO_PIN_SET);
 8012172:	2201      	movs	r2, #1
 8012174:	2120      	movs	r1, #32
 8012176:	483c      	ldr	r0, [pc, #240]	; (8012268 <full_led_write1+0x140>)
 8012178:	f7f0 f8c4 	bl	8002304 <HAL_GPIO_WritePin>
}
 801217c:	e070      	b.n	8012260 <full_led_write1+0x138>
	else if(fulled == 2){
 801217e:	79fb      	ldrb	r3, [r7, #7]
 8012180:	2b02      	cmp	r3, #2
 8012182:	d10f      	bne.n	80121a4 <full_led_write1+0x7c>
	    HAL_GPIO_WritePin(FLED1_RED_GPIO_Port, FLED1_RED_Pin, GPIO_PIN_SET);
 8012184:	2201      	movs	r2, #1
 8012186:	2140      	movs	r1, #64	; 0x40
 8012188:	4837      	ldr	r0, [pc, #220]	; (8012268 <full_led_write1+0x140>)
 801218a:	f7f0 f8bb 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED1_GREEN_GPIO_Port, FLED1_GREEN_Pin, GPIO_PIN_RESET);
 801218e:	2200      	movs	r2, #0
 8012190:	2180      	movs	r1, #128	; 0x80
 8012192:	4835      	ldr	r0, [pc, #212]	; (8012268 <full_led_write1+0x140>)
 8012194:	f7f0 f8b6 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED1_BLUE_GPIO_Port, FLED1_BLUE_Pin, GPIO_PIN_SET);
 8012198:	2201      	movs	r2, #1
 801219a:	2120      	movs	r1, #32
 801219c:	4832      	ldr	r0, [pc, #200]	; (8012268 <full_led_write1+0x140>)
 801219e:	f7f0 f8b1 	bl	8002304 <HAL_GPIO_WritePin>
}
 80121a2:	e05d      	b.n	8012260 <full_led_write1+0x138>
	else if(fulled == 3){
 80121a4:	79fb      	ldrb	r3, [r7, #7]
 80121a6:	2b03      	cmp	r3, #3
 80121a8:	d10f      	bne.n	80121ca <full_led_write1+0xa2>
	    HAL_GPIO_WritePin(FLED1_RED_GPIO_Port, FLED1_RED_Pin, GPIO_PIN_SET);
 80121aa:	2201      	movs	r2, #1
 80121ac:	2140      	movs	r1, #64	; 0x40
 80121ae:	482e      	ldr	r0, [pc, #184]	; (8012268 <full_led_write1+0x140>)
 80121b0:	f7f0 f8a8 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED1_GREEN_GPIO_Port, FLED1_GREEN_Pin, GPIO_PIN_SET);
 80121b4:	2201      	movs	r2, #1
 80121b6:	2180      	movs	r1, #128	; 0x80
 80121b8:	482b      	ldr	r0, [pc, #172]	; (8012268 <full_led_write1+0x140>)
 80121ba:	f7f0 f8a3 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED1_BLUE_GPIO_Port, FLED1_BLUE_Pin, GPIO_PIN_RESET);
 80121be:	2200      	movs	r2, #0
 80121c0:	2120      	movs	r1, #32
 80121c2:	4829      	ldr	r0, [pc, #164]	; (8012268 <full_led_write1+0x140>)
 80121c4:	f7f0 f89e 	bl	8002304 <HAL_GPIO_WritePin>
}
 80121c8:	e04a      	b.n	8012260 <full_led_write1+0x138>
	else if(fulled == 4){
 80121ca:	79fb      	ldrb	r3, [r7, #7]
 80121cc:	2b04      	cmp	r3, #4
 80121ce:	d10f      	bne.n	80121f0 <full_led_write1+0xc8>
	    HAL_GPIO_WritePin(FLED1_RED_GPIO_Port, FLED1_RED_Pin, GPIO_PIN_SET);
 80121d0:	2201      	movs	r2, #1
 80121d2:	2140      	movs	r1, #64	; 0x40
 80121d4:	4824      	ldr	r0, [pc, #144]	; (8012268 <full_led_write1+0x140>)
 80121d6:	f7f0 f895 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED1_GREEN_GPIO_Port, FLED1_GREEN_Pin, GPIO_PIN_RESET);
 80121da:	2200      	movs	r2, #0
 80121dc:	2180      	movs	r1, #128	; 0x80
 80121de:	4822      	ldr	r0, [pc, #136]	; (8012268 <full_led_write1+0x140>)
 80121e0:	f7f0 f890 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED1_BLUE_GPIO_Port, FLED1_BLUE_Pin, GPIO_PIN_RESET);
 80121e4:	2200      	movs	r2, #0
 80121e6:	2120      	movs	r1, #32
 80121e8:	481f      	ldr	r0, [pc, #124]	; (8012268 <full_led_write1+0x140>)
 80121ea:	f7f0 f88b 	bl	8002304 <HAL_GPIO_WritePin>
}
 80121ee:	e037      	b.n	8012260 <full_led_write1+0x138>
	else if(fulled == 5){
 80121f0:	79fb      	ldrb	r3, [r7, #7]
 80121f2:	2b05      	cmp	r3, #5
 80121f4:	d10f      	bne.n	8012216 <full_led_write1+0xee>
	    HAL_GPIO_WritePin(FLED1_RED_GPIO_Port, FLED1_RED_Pin, GPIO_PIN_RESET);
 80121f6:	2200      	movs	r2, #0
 80121f8:	2140      	movs	r1, #64	; 0x40
 80121fa:	481b      	ldr	r0, [pc, #108]	; (8012268 <full_led_write1+0x140>)
 80121fc:	f7f0 f882 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED1_GREEN_GPIO_Port, FLED1_GREEN_Pin, GPIO_PIN_SET);
 8012200:	2201      	movs	r2, #1
 8012202:	2180      	movs	r1, #128	; 0x80
 8012204:	4818      	ldr	r0, [pc, #96]	; (8012268 <full_led_write1+0x140>)
 8012206:	f7f0 f87d 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED1_BLUE_GPIO_Port, FLED1_BLUE_Pin, GPIO_PIN_RESET);
 801220a:	2200      	movs	r2, #0
 801220c:	2120      	movs	r1, #32
 801220e:	4816      	ldr	r0, [pc, #88]	; (8012268 <full_led_write1+0x140>)
 8012210:	f7f0 f878 	bl	8002304 <HAL_GPIO_WritePin>
}
 8012214:	e024      	b.n	8012260 <full_led_write1+0x138>
	else if(fulled == 6){
 8012216:	79fb      	ldrb	r3, [r7, #7]
 8012218:	2b06      	cmp	r3, #6
 801221a:	d10f      	bne.n	801223c <full_led_write1+0x114>
	    HAL_GPIO_WritePin(FLED1_RED_GPIO_Port, FLED1_RED_Pin, GPIO_PIN_RESET);
 801221c:	2200      	movs	r2, #0
 801221e:	2140      	movs	r1, #64	; 0x40
 8012220:	4811      	ldr	r0, [pc, #68]	; (8012268 <full_led_write1+0x140>)
 8012222:	f7f0 f86f 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED1_GREEN_GPIO_Port, FLED1_GREEN_Pin, GPIO_PIN_RESET);
 8012226:	2200      	movs	r2, #0
 8012228:	2180      	movs	r1, #128	; 0x80
 801222a:	480f      	ldr	r0, [pc, #60]	; (8012268 <full_led_write1+0x140>)
 801222c:	f7f0 f86a 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED1_BLUE_GPIO_Port, FLED1_BLUE_Pin, GPIO_PIN_SET);
 8012230:	2201      	movs	r2, #1
 8012232:	2120      	movs	r1, #32
 8012234:	480c      	ldr	r0, [pc, #48]	; (8012268 <full_led_write1+0x140>)
 8012236:	f7f0 f865 	bl	8002304 <HAL_GPIO_WritePin>
}
 801223a:	e011      	b.n	8012260 <full_led_write1+0x138>
	else if(fulled == 7){
 801223c:	79fb      	ldrb	r3, [r7, #7]
 801223e:	2b07      	cmp	r3, #7
 8012240:	d10e      	bne.n	8012260 <full_led_write1+0x138>
	    HAL_GPIO_WritePin(FLED1_RED_GPIO_Port, FLED1_RED_Pin, GPIO_PIN_RESET);
 8012242:	2200      	movs	r2, #0
 8012244:	2140      	movs	r1, #64	; 0x40
 8012246:	4808      	ldr	r0, [pc, #32]	; (8012268 <full_led_write1+0x140>)
 8012248:	f7f0 f85c 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED1_GREEN_GPIO_Port, FLED1_GREEN_Pin, GPIO_PIN_RESET);
 801224c:	2200      	movs	r2, #0
 801224e:	2180      	movs	r1, #128	; 0x80
 8012250:	4805      	ldr	r0, [pc, #20]	; (8012268 <full_led_write1+0x140>)
 8012252:	f7f0 f857 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED1_BLUE_GPIO_Port, FLED1_BLUE_Pin, GPIO_PIN_RESET);
 8012256:	2200      	movs	r2, #0
 8012258:	2120      	movs	r1, #32
 801225a:	4803      	ldr	r0, [pc, #12]	; (8012268 <full_led_write1+0x140>)
 801225c:	f7f0 f852 	bl	8002304 <HAL_GPIO_WritePin>
}
 8012260:	bf00      	nop
 8012262:	3708      	adds	r7, #8
 8012264:	46bd      	mov	sp, r7
 8012266:	bd80      	pop	{r7, pc}
 8012268:	40020400 	.word	0x40020400

0801226c <full_led_write2>:
//full_led_write2
//a大フルカラーLEDの色選択
//a引数：fulled(0=>OFF, 1=>a赤, 2=>緑, 3=>青, 4=>青緑, 5=>紫, 6=>黄, 7=>白)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void full_led_write2(uint8_t fulled){
 801226c:	b580      	push	{r7, lr}
 801226e:	b082      	sub	sp, #8
 8012270:	af00      	add	r7, sp, #0
 8012272:	4603      	mov	r3, r0
 8012274:	71fb      	strb	r3, [r7, #7]
	if(fulled == 0){
 8012276:	79fb      	ldrb	r3, [r7, #7]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d112      	bne.n	80122a2 <full_led_write2+0x36>
	    HAL_GPIO_WritePin(FLED2_RED_GPIO_Port, FLED2_RED_Pin, GPIO_PIN_RESET);
 801227c:	2200      	movs	r2, #0
 801227e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012282:	4856      	ldr	r0, [pc, #344]	; (80123dc <full_led_write2+0x170>)
 8012284:	f7f0 f83e 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED2_GREEN_GPIO_Port, FLED2_GREEN_Pin, GPIO_PIN_RESET);
 8012288:	2200      	movs	r2, #0
 801228a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801228e:	4853      	ldr	r0, [pc, #332]	; (80123dc <full_led_write2+0x170>)
 8012290:	f7f0 f838 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED2_BLUE_GPIO_Port, FLED2_BLUE_Pin, GPIO_PIN_RESET);
 8012294:	2200      	movs	r2, #0
 8012296:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801229a:	4850      	ldr	r0, [pc, #320]	; (80123dc <full_led_write2+0x170>)
 801229c:	f7f0 f832 	bl	8002304 <HAL_GPIO_WritePin>
	else if(fulled == 7){
	    HAL_GPIO_WritePin(FLED2_RED_GPIO_Port, FLED2_RED_Pin, GPIO_PIN_SET);
	    HAL_GPIO_WritePin(FLED2_GREEN_GPIO_Port, FLED2_GREEN_Pin, GPIO_PIN_SET);
	    HAL_GPIO_WritePin(FLED2_BLUE_GPIO_Port, FLED2_BLUE_Pin, GPIO_PIN_SET);
	}
}
 80122a0:	e098      	b.n	80123d4 <full_led_write2+0x168>
	else if(fulled == 1){
 80122a2:	79fb      	ldrb	r3, [r7, #7]
 80122a4:	2b01      	cmp	r3, #1
 80122a6:	d112      	bne.n	80122ce <full_led_write2+0x62>
	    HAL_GPIO_WritePin(FLED2_RED_GPIO_Port, FLED2_RED_Pin, GPIO_PIN_SET);
 80122a8:	2201      	movs	r2, #1
 80122aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80122ae:	484b      	ldr	r0, [pc, #300]	; (80123dc <full_led_write2+0x170>)
 80122b0:	f7f0 f828 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED2_GREEN_GPIO_Port, FLED2_GREEN_Pin, GPIO_PIN_RESET);
 80122b4:	2200      	movs	r2, #0
 80122b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80122ba:	4848      	ldr	r0, [pc, #288]	; (80123dc <full_led_write2+0x170>)
 80122bc:	f7f0 f822 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED2_BLUE_GPIO_Port, FLED2_BLUE_Pin, GPIO_PIN_RESET);
 80122c0:	2200      	movs	r2, #0
 80122c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80122c6:	4845      	ldr	r0, [pc, #276]	; (80123dc <full_led_write2+0x170>)
 80122c8:	f7f0 f81c 	bl	8002304 <HAL_GPIO_WritePin>
}
 80122cc:	e082      	b.n	80123d4 <full_led_write2+0x168>
	else if(fulled == 2){
 80122ce:	79fb      	ldrb	r3, [r7, #7]
 80122d0:	2b02      	cmp	r3, #2
 80122d2:	d112      	bne.n	80122fa <full_led_write2+0x8e>
	    HAL_GPIO_WritePin(FLED2_RED_GPIO_Port, FLED2_RED_Pin, GPIO_PIN_RESET);
 80122d4:	2200      	movs	r2, #0
 80122d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80122da:	4840      	ldr	r0, [pc, #256]	; (80123dc <full_led_write2+0x170>)
 80122dc:	f7f0 f812 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED2_GREEN_GPIO_Port, FLED2_GREEN_Pin, GPIO_PIN_SET);
 80122e0:	2201      	movs	r2, #1
 80122e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80122e6:	483d      	ldr	r0, [pc, #244]	; (80123dc <full_led_write2+0x170>)
 80122e8:	f7f0 f80c 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED2_BLUE_GPIO_Port, FLED2_BLUE_Pin, GPIO_PIN_RESET);
 80122ec:	2200      	movs	r2, #0
 80122ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80122f2:	483a      	ldr	r0, [pc, #232]	; (80123dc <full_led_write2+0x170>)
 80122f4:	f7f0 f806 	bl	8002304 <HAL_GPIO_WritePin>
}
 80122f8:	e06c      	b.n	80123d4 <full_led_write2+0x168>
	else if(fulled == 3){
 80122fa:	79fb      	ldrb	r3, [r7, #7]
 80122fc:	2b03      	cmp	r3, #3
 80122fe:	d112      	bne.n	8012326 <full_led_write2+0xba>
	    HAL_GPIO_WritePin(FLED2_RED_GPIO_Port, FLED2_RED_Pin, GPIO_PIN_RESET);
 8012300:	2200      	movs	r2, #0
 8012302:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012306:	4835      	ldr	r0, [pc, #212]	; (80123dc <full_led_write2+0x170>)
 8012308:	f7ef fffc 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED2_GREEN_GPIO_Port, FLED2_GREEN_Pin, GPIO_PIN_RESET);
 801230c:	2200      	movs	r2, #0
 801230e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8012312:	4832      	ldr	r0, [pc, #200]	; (80123dc <full_led_write2+0x170>)
 8012314:	f7ef fff6 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED2_BLUE_GPIO_Port, FLED2_BLUE_Pin, GPIO_PIN_SET);
 8012318:	2201      	movs	r2, #1
 801231a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801231e:	482f      	ldr	r0, [pc, #188]	; (80123dc <full_led_write2+0x170>)
 8012320:	f7ef fff0 	bl	8002304 <HAL_GPIO_WritePin>
}
 8012324:	e056      	b.n	80123d4 <full_led_write2+0x168>
	else if(fulled == 4){
 8012326:	79fb      	ldrb	r3, [r7, #7]
 8012328:	2b04      	cmp	r3, #4
 801232a:	d112      	bne.n	8012352 <full_led_write2+0xe6>
	    HAL_GPIO_WritePin(FLED2_RED_GPIO_Port, FLED2_RED_Pin, GPIO_PIN_RESET);
 801232c:	2200      	movs	r2, #0
 801232e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012332:	482a      	ldr	r0, [pc, #168]	; (80123dc <full_led_write2+0x170>)
 8012334:	f7ef ffe6 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED2_GREEN_GPIO_Port, FLED2_GREEN_Pin, GPIO_PIN_SET);
 8012338:	2201      	movs	r2, #1
 801233a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801233e:	4827      	ldr	r0, [pc, #156]	; (80123dc <full_led_write2+0x170>)
 8012340:	f7ef ffe0 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED2_BLUE_GPIO_Port, FLED2_BLUE_Pin, GPIO_PIN_SET);
 8012344:	2201      	movs	r2, #1
 8012346:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801234a:	4824      	ldr	r0, [pc, #144]	; (80123dc <full_led_write2+0x170>)
 801234c:	f7ef ffda 	bl	8002304 <HAL_GPIO_WritePin>
}
 8012350:	e040      	b.n	80123d4 <full_led_write2+0x168>
	else if(fulled == 5){
 8012352:	79fb      	ldrb	r3, [r7, #7]
 8012354:	2b05      	cmp	r3, #5
 8012356:	d112      	bne.n	801237e <full_led_write2+0x112>
	    HAL_GPIO_WritePin(FLED2_RED_GPIO_Port, FLED2_RED_Pin, GPIO_PIN_SET);
 8012358:	2201      	movs	r2, #1
 801235a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801235e:	481f      	ldr	r0, [pc, #124]	; (80123dc <full_led_write2+0x170>)
 8012360:	f7ef ffd0 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED2_GREEN_GPIO_Port, FLED2_GREEN_Pin, GPIO_PIN_RESET);
 8012364:	2200      	movs	r2, #0
 8012366:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801236a:	481c      	ldr	r0, [pc, #112]	; (80123dc <full_led_write2+0x170>)
 801236c:	f7ef ffca 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED2_BLUE_GPIO_Port, FLED2_BLUE_Pin, GPIO_PIN_SET);
 8012370:	2201      	movs	r2, #1
 8012372:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8012376:	4819      	ldr	r0, [pc, #100]	; (80123dc <full_led_write2+0x170>)
 8012378:	f7ef ffc4 	bl	8002304 <HAL_GPIO_WritePin>
}
 801237c:	e02a      	b.n	80123d4 <full_led_write2+0x168>
	else if(fulled == 6){
 801237e:	79fb      	ldrb	r3, [r7, #7]
 8012380:	2b06      	cmp	r3, #6
 8012382:	d112      	bne.n	80123aa <full_led_write2+0x13e>
	    HAL_GPIO_WritePin(FLED2_RED_GPIO_Port, FLED2_RED_Pin, GPIO_PIN_SET);
 8012384:	2201      	movs	r2, #1
 8012386:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801238a:	4814      	ldr	r0, [pc, #80]	; (80123dc <full_led_write2+0x170>)
 801238c:	f7ef ffba 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED2_GREEN_GPIO_Port, FLED2_GREEN_Pin, GPIO_PIN_SET);
 8012390:	2201      	movs	r2, #1
 8012392:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8012396:	4811      	ldr	r0, [pc, #68]	; (80123dc <full_led_write2+0x170>)
 8012398:	f7ef ffb4 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED2_BLUE_GPIO_Port, FLED2_BLUE_Pin, GPIO_PIN_RESET);
 801239c:	2200      	movs	r2, #0
 801239e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80123a2:	480e      	ldr	r0, [pc, #56]	; (80123dc <full_led_write2+0x170>)
 80123a4:	f7ef ffae 	bl	8002304 <HAL_GPIO_WritePin>
}
 80123a8:	e014      	b.n	80123d4 <full_led_write2+0x168>
	else if(fulled == 7){
 80123aa:	79fb      	ldrb	r3, [r7, #7]
 80123ac:	2b07      	cmp	r3, #7
 80123ae:	d111      	bne.n	80123d4 <full_led_write2+0x168>
	    HAL_GPIO_WritePin(FLED2_RED_GPIO_Port, FLED2_RED_Pin, GPIO_PIN_SET);
 80123b0:	2201      	movs	r2, #1
 80123b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80123b6:	4809      	ldr	r0, [pc, #36]	; (80123dc <full_led_write2+0x170>)
 80123b8:	f7ef ffa4 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED2_GREEN_GPIO_Port, FLED2_GREEN_Pin, GPIO_PIN_SET);
 80123bc:	2201      	movs	r2, #1
 80123be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80123c2:	4806      	ldr	r0, [pc, #24]	; (80123dc <full_led_write2+0x170>)
 80123c4:	f7ef ff9e 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED2_BLUE_GPIO_Port, FLED2_BLUE_Pin, GPIO_PIN_SET);
 80123c8:	2201      	movs	r2, #1
 80123ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80123ce:	4803      	ldr	r0, [pc, #12]	; (80123dc <full_led_write2+0x170>)
 80123d0:	f7ef ff98 	bl	8002304 <HAL_GPIO_WritePin>
}
 80123d4:	bf00      	nop
 80123d6:	3708      	adds	r7, #8
 80123d8:	46bd      	mov	sp, r7
 80123da:	bd80      	pop	{r7, pc}
 80123dc:	40020800 	.word	0x40020800

080123e0 <sensor_test>:
//sensor_test
//a壁センサーとジャイロセンサーの値確認
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sensor_test(){
 80123e0:	b580      	push	{r7, lr}
 80123e2:	b08c      	sub	sp, #48	; 0x30
 80123e4:	af02      	add	r7, sp, #8

	int mode = 0;
 80123e6:	2300      	movs	r3, #0
 80123e8:	627b      	str	r3, [r7, #36]	; 0x24
	printf("Mode : %d\n", mode);
 80123ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80123ec:	4870      	ldr	r0, [pc, #448]	; (80125b0 <sensor_test+0x1d0>)
 80123ee:	f000 fd15 	bl	8012e1c <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80123f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123f4:	b2db      	uxtb	r3, r3
 80123f6:	f003 0301 	and.w	r3, r3, #1
 80123fa:	b2d8      	uxtb	r0, r3
 80123fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123fe:	b2db      	uxtb	r3, r3
 8012400:	f003 0302 	and.w	r3, r3, #2
 8012404:	b2d9      	uxtb	r1, r3
 8012406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012408:	b2db      	uxtb	r3, r3
 801240a:	f003 0304 	and.w	r3, r3, #4
 801240e:	b2db      	uxtb	r3, r3
 8012410:	461a      	mov	r2, r3
 8012412:	f7ff fe4f 	bl	80120b4 <led_write>
		  if(dist_r >= 20){
 8012416:	4b67      	ldr	r3, [pc, #412]	; (80125b4 <sensor_test+0x1d4>)
 8012418:	edd3 7a00 	vldr	s15, [r3]
 801241c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8012420:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012428:	db0f      	blt.n	801244a <sensor_test+0x6a>
			  mode++;
 801242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801242c:	3301      	adds	r3, #1
 801242e:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 8012430:	4b60      	ldr	r3, [pc, #384]	; (80125b4 <sensor_test+0x1d4>)
 8012432:	f04f 0200 	mov.w	r2, #0
 8012436:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8012438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801243a:	2b07      	cmp	r3, #7
 801243c:	dd01      	ble.n	8012442 <sensor_test+0x62>
				  mode = 0;
 801243e:	2300      	movs	r3, #0
 8012440:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 8012442:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012444:	485a      	ldr	r0, [pc, #360]	; (80125b0 <sensor_test+0x1d0>)
 8012446:	f000 fce9 	bl	8012e1c <iprintf>
		  }
		  if(dist_r <= -20){
 801244a:	4b5a      	ldr	r3, [pc, #360]	; (80125b4 <sensor_test+0x1d4>)
 801244c:	edd3 7a00 	vldr	s15, [r3]
 8012450:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8012454:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801245c:	d80f      	bhi.n	801247e <sensor_test+0x9e>
			  mode--;
 801245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012460:	3b01      	subs	r3, #1
 8012462:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 8012464:	4b53      	ldr	r3, [pc, #332]	; (80125b4 <sensor_test+0x1d4>)
 8012466:	f04f 0200 	mov.w	r2, #0
 801246a:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 801246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801246e:	2b00      	cmp	r3, #0
 8012470:	da01      	bge.n	8012476 <sensor_test+0x96>
				  mode = 7;
 8012472:	2307      	movs	r3, #7
 8012474:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 8012476:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012478:	484d      	ldr	r0, [pc, #308]	; (80125b0 <sensor_test+0x1d0>)
 801247a:	f000 fccf 	bl	8012e1c <iprintf>
		  }
		  if(dist_l <= -20){
 801247e:	4b4e      	ldr	r3, [pc, #312]	; (80125b8 <sensor_test+0x1d8>)
 8012480:	edd3 7a00 	vldr	s15, [r3]
 8012484:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8012488:	eef4 7ac7 	vcmpe.f32	s15, s14
 801248c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012490:	f200 808d 	bhi.w	80125ae <sensor_test+0x1ce>
			  dist_l = 0;
 8012494:	4b48      	ldr	r3, [pc, #288]	; (80125b8 <sensor_test+0x1d8>)
 8012496:	f04f 0200 	mov.w	r2, #0
 801249a:	601a      	str	r2, [r3, #0]
			  drive_ready();
 801249c:	f7f2 fbe6 	bl	8004c6c <drive_ready>

			  switch(mode){
 80124a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124a2:	2b07      	cmp	r3, #7
 80124a4:	d87f      	bhi.n	80125a6 <sensor_test+0x1c6>
 80124a6:	a201      	add	r2, pc, #4	; (adr r2, 80124ac <sensor_test+0xcc>)
 80124a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124ac:	080124cd 	.word	0x080124cd
 80124b0:	080124d3 	.word	0x080124d3
 80124b4:	08012525 	.word	0x08012525
 80124b8:	0801256d 	.word	0x0801256d
 80124bc:	080125a7 	.word	0x080125a7
 80124c0:	080125a7 	.word	0x080125a7
 80124c4:	080125a7 	.word	0x080125a7
 80124c8:	080125a7 	.word	0x080125a7
				case 0:
					get_base();
 80124cc:	f7ff fd9a 	bl	8012004 <get_base>
					break;
 80124d0:	e069      	b.n	80125a6 <sensor_test+0x1c6>
				case 1:
					  //----Wall sensor check----
					  printf("Wall Sensor Check.\n");
 80124d2:	483a      	ldr	r0, [pc, #232]	; (80125bc <sensor_test+0x1dc>)
 80124d4:	f000 fd16 	bl	8012f04 <puts>
					  while(1){
						  get_wall_info();
 80124d8:	f7ff fdb2 	bl	8012040 <get_wall_info>
						  led_write(wall_info & 0x11, wall_info & 0x88, wall_info & 0x44);
 80124dc:	4b38      	ldr	r3, [pc, #224]	; (80125c0 <sensor_test+0x1e0>)
 80124de:	781b      	ldrb	r3, [r3, #0]
 80124e0:	f003 0311 	and.w	r3, r3, #17
 80124e4:	b2d8      	uxtb	r0, r3
 80124e6:	4b36      	ldr	r3, [pc, #216]	; (80125c0 <sensor_test+0x1e0>)
 80124e8:	781b      	ldrb	r3, [r3, #0]
 80124ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80124ee:	b2d9      	uxtb	r1, r3
 80124f0:	4b33      	ldr	r3, [pc, #204]	; (80125c0 <sensor_test+0x1e0>)
 80124f2:	781b      	ldrb	r3, [r3, #0]
 80124f4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80124f8:	b2db      	uxtb	r3, r3
 80124fa:	461a      	mov	r2, r3
 80124fc:	f7ff fdda 	bl	80120b4 <led_write>
						  printf("ad_l : %d, ad_fl : %d, ad_fr : %d, ad_r : %d\n", ad_l, ad_fl, ad_fr, ad_r);
 8012500:	4b30      	ldr	r3, [pc, #192]	; (80125c4 <sensor_test+0x1e4>)
 8012502:	6819      	ldr	r1, [r3, #0]
 8012504:	4b30      	ldr	r3, [pc, #192]	; (80125c8 <sensor_test+0x1e8>)
 8012506:	681a      	ldr	r2, [r3, #0]
 8012508:	4b30      	ldr	r3, [pc, #192]	; (80125cc <sensor_test+0x1ec>)
 801250a:	6818      	ldr	r0, [r3, #0]
 801250c:	4b30      	ldr	r3, [pc, #192]	; (80125d0 <sensor_test+0x1f0>)
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	9300      	str	r3, [sp, #0]
 8012512:	4603      	mov	r3, r0
 8012514:	482f      	ldr	r0, [pc, #188]	; (80125d4 <sensor_test+0x1f4>)
 8012516:	f000 fc81 	bl	8012e1c <iprintf>
						  HAL_Delay(333);
 801251a:	f240 104d 	movw	r0, #333	; 0x14d
 801251e:	f7ee fd7d 	bl	800101c <HAL_Delay>
						  get_wall_info();
 8012522:	e7d9      	b.n	80124d8 <sensor_test+0xf8>
						}
					break;
				case 2:
					//----Gyro sensor check----
					printf("Gyro Sensor Check.\n");
 8012524:	482c      	ldr	r0, [pc, #176]	; (80125d8 <sensor_test+0x1f8>)
 8012526:	f000 fced 	bl	8012f04 <puts>
//						  accel_x = accel_read_x();
//						  accel_y = accel_read_y();
//						  accel_z = accel_read_z();
//						  gyro_x = gyro_read_x();
//						  gyro_y = gyro_read_y();
						  gyro_z = gyro_read_z();
 801252a:	f7fa fc8d 	bl	800ce48 <gyro_read_z>
 801252e:	eef0 7a40 	vmov.f32	s15, s0
 8012532:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012536:	ee17 3a90 	vmov	r3, s15
 801253a:	61bb      	str	r3, [r7, #24]
//						  deg_x = degree_x;
//						  deg_y = degree_y;
						  deg_z = degree_z;
 801253c:	4b27      	ldr	r3, [pc, #156]	; (80125dc <sensor_test+0x1fc>)
 801253e:	edd3 7a00 	vldr	s15, [r3]
 8012542:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012546:	ee17 3a90 	vmov	r3, s15
 801254a:	617b      	str	r3, [r7, #20]

						  //printf("Accel x: %3d, y: %3d, z: %3d\n", accel_x, accel_y, accel_z);
						  printf("Gyro  x: %3d, y: %3d, z: %3d\n", gyro_x, gyro_y, gyro_z);
 801254c:	69bb      	ldr	r3, [r7, #24]
 801254e:	68fa      	ldr	r2, [r7, #12]
 8012550:	6939      	ldr	r1, [r7, #16]
 8012552:	4823      	ldr	r0, [pc, #140]	; (80125e0 <sensor_test+0x200>)
 8012554:	f000 fc62 	bl	8012e1c <iprintf>
						  printf("Deg   x: %3d, y: %3d, z: %3d\n", deg_x, deg_y, deg_z);
 8012558:	697b      	ldr	r3, [r7, #20]
 801255a:	687a      	ldr	r2, [r7, #4]
 801255c:	68b9      	ldr	r1, [r7, #8]
 801255e:	4821      	ldr	r0, [pc, #132]	; (80125e4 <sensor_test+0x204>)
 8012560:	f000 fc5c 	bl	8012e1c <iprintf>
						  HAL_Delay(111);
 8012564:	206f      	movs	r0, #111	; 0x6f
 8012566:	f7ee fd59 	bl	800101c <HAL_Delay>
						  gyro_z = gyro_read_z();
 801256a:	e7de      	b.n	801252a <sensor_test+0x14a>
						}
					break;
				case 3:
					//----Gyro sensor check----
					printf("Gyro Sensor Check.\n");
 801256c:	481a      	ldr	r0, [pc, #104]	; (80125d8 <sensor_test+0x1f8>)
 801256e:	f000 fcc9 	bl	8012f04 <puts>

					int gyro_z3, deg_z3;
					  while(1){
						  gyro_z3 = gyro_read_z();
 8012572:	f7fa fc69 	bl	800ce48 <gyro_read_z>
 8012576:	eef0 7a40 	vmov.f32	s15, s0
 801257a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801257e:	ee17 3a90 	vmov	r3, s15
 8012582:	623b      	str	r3, [r7, #32]
						  deg_z3 = degree_z;
 8012584:	4b15      	ldr	r3, [pc, #84]	; (80125dc <sensor_test+0x1fc>)
 8012586:	edd3 7a00 	vldr	s15, [r3]
 801258a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801258e:	ee17 3a90 	vmov	r3, s15
 8012592:	61fb      	str	r3, [r7, #28]

						  printf("Gyro  z: %3d , Deg   z: %3d\n", gyro_z3, deg_z3);
 8012594:	69fa      	ldr	r2, [r7, #28]
 8012596:	6a39      	ldr	r1, [r7, #32]
 8012598:	4813      	ldr	r0, [pc, #76]	; (80125e8 <sensor_test+0x208>)
 801259a:	f000 fc3f 	bl	8012e1c <iprintf>
						  HAL_Delay(111);
 801259e:	206f      	movs	r0, #111	; 0x6f
 80125a0:	f7ee fd3c 	bl	800101c <HAL_Delay>
						  gyro_z3 = gyro_read_z();
 80125a4:	e7e5      	b.n	8012572 <sensor_test+0x192>
				case 6:
					break;
				case 7:
					break;
			  }
			  dist_l = 0;
 80125a6:	4b04      	ldr	r3, [pc, #16]	; (80125b8 <sensor_test+0x1d8>)
 80125a8:	f04f 0200 	mov.w	r2, #0
 80125ac:	601a      	str	r2, [r3, #0]
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80125ae:	e720      	b.n	80123f2 <sensor_test+0x12>
 80125b0:	080144d0 	.word	0x080144d0
 80125b4:	20000b2c 	.word	0x20000b2c
 80125b8:	20001648 	.word	0x20001648
 80125bc:	080144dc 	.word	0x080144dc
 80125c0:	200002c8 	.word	0x200002c8
 80125c4:	20000b3c 	.word	0x20000b3c
 80125c8:	20000d94 	.word	0x20000d94
 80125cc:	20000c80 	.word	0x20000c80
 80125d0:	20000fa0 	.word	0x20000fa0
 80125d4:	080144f0 	.word	0x080144f0
 80125d8:	08014520 	.word	0x08014520
 80125dc:	20000b9c 	.word	0x20000b9c
 80125e0:	08014534 	.word	0x08014534
 80125e4:	08014554 	.word	0x08014554
 80125e8:	08014574 	.word	0x08014574

080125ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80125ec:	b480      	push	{r7}
 80125ee:	b083      	sub	sp, #12
 80125f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80125f2:	2300      	movs	r3, #0
 80125f4:	607b      	str	r3, [r7, #4]
 80125f6:	4b10      	ldr	r3, [pc, #64]	; (8012638 <HAL_MspInit+0x4c>)
 80125f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80125fa:	4a0f      	ldr	r2, [pc, #60]	; (8012638 <HAL_MspInit+0x4c>)
 80125fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012600:	6453      	str	r3, [r2, #68]	; 0x44
 8012602:	4b0d      	ldr	r3, [pc, #52]	; (8012638 <HAL_MspInit+0x4c>)
 8012604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801260a:	607b      	str	r3, [r7, #4]
 801260c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801260e:	2300      	movs	r3, #0
 8012610:	603b      	str	r3, [r7, #0]
 8012612:	4b09      	ldr	r3, [pc, #36]	; (8012638 <HAL_MspInit+0x4c>)
 8012614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012616:	4a08      	ldr	r2, [pc, #32]	; (8012638 <HAL_MspInit+0x4c>)
 8012618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801261c:	6413      	str	r3, [r2, #64]	; 0x40
 801261e:	4b06      	ldr	r3, [pc, #24]	; (8012638 <HAL_MspInit+0x4c>)
 8012620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012626:	603b      	str	r3, [r7, #0]
 8012628:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801262a:	bf00      	nop
 801262c:	370c      	adds	r7, #12
 801262e:	46bd      	mov	sp, r7
 8012630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012634:	4770      	bx	lr
 8012636:	bf00      	nop
 8012638:	40023800 	.word	0x40023800

0801263c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 801263c:	b580      	push	{r7, lr}
 801263e:	b08a      	sub	sp, #40	; 0x28
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012644:	f107 0314 	add.w	r3, r7, #20
 8012648:	2200      	movs	r2, #0
 801264a:	601a      	str	r2, [r3, #0]
 801264c:	605a      	str	r2, [r3, #4]
 801264e:	609a      	str	r2, [r3, #8]
 8012650:	60da      	str	r2, [r3, #12]
 8012652:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	4a17      	ldr	r2, [pc, #92]	; (80126b8 <HAL_ADC_MspInit+0x7c>)
 801265a:	4293      	cmp	r3, r2
 801265c:	d127      	bne.n	80126ae <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 801265e:	2300      	movs	r3, #0
 8012660:	613b      	str	r3, [r7, #16]
 8012662:	4b16      	ldr	r3, [pc, #88]	; (80126bc <HAL_ADC_MspInit+0x80>)
 8012664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012666:	4a15      	ldr	r2, [pc, #84]	; (80126bc <HAL_ADC_MspInit+0x80>)
 8012668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801266c:	6453      	str	r3, [r2, #68]	; 0x44
 801266e:	4b13      	ldr	r3, [pc, #76]	; (80126bc <HAL_ADC_MspInit+0x80>)
 8012670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012676:	613b      	str	r3, [r7, #16]
 8012678:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801267a:	2300      	movs	r3, #0
 801267c:	60fb      	str	r3, [r7, #12]
 801267e:	4b0f      	ldr	r3, [pc, #60]	; (80126bc <HAL_ADC_MspInit+0x80>)
 8012680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012682:	4a0e      	ldr	r2, [pc, #56]	; (80126bc <HAL_ADC_MspInit+0x80>)
 8012684:	f043 0304 	orr.w	r3, r3, #4
 8012688:	6313      	str	r3, [r2, #48]	; 0x30
 801268a:	4b0c      	ldr	r3, [pc, #48]	; (80126bc <HAL_ADC_MspInit+0x80>)
 801268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801268e:	f003 0304 	and.w	r3, r3, #4
 8012692:	60fb      	str	r3, [r7, #12]
 8012694:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13 
    */
    GPIO_InitStruct.Pin = VAL_FR_Pin|VAL_R_Pin|VAL_L_Pin|VAL_FL_Pin;
 8012696:	230f      	movs	r3, #15
 8012698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801269a:	2303      	movs	r3, #3
 801269c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801269e:	2300      	movs	r3, #0
 80126a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80126a2:	f107 0314 	add.w	r3, r7, #20
 80126a6:	4619      	mov	r1, r3
 80126a8:	4805      	ldr	r0, [pc, #20]	; (80126c0 <HAL_ADC_MspInit+0x84>)
 80126aa:	f7ef fc79 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80126ae:	bf00      	nop
 80126b0:	3728      	adds	r7, #40	; 0x28
 80126b2:	46bd      	mov	sp, r7
 80126b4:	bd80      	pop	{r7, pc}
 80126b6:	bf00      	nop
 80126b8:	40012000 	.word	0x40012000
 80126bc:	40023800 	.word	0x40023800
 80126c0:	40020800 	.word	0x40020800

080126c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b08a      	sub	sp, #40	; 0x28
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80126cc:	f107 0314 	add.w	r3, r7, #20
 80126d0:	2200      	movs	r2, #0
 80126d2:	601a      	str	r2, [r3, #0]
 80126d4:	605a      	str	r2, [r3, #4]
 80126d6:	609a      	str	r2, [r3, #8]
 80126d8:	60da      	str	r2, [r3, #12]
 80126da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	4a19      	ldr	r2, [pc, #100]	; (8012748 <HAL_SPI_MspInit+0x84>)
 80126e2:	4293      	cmp	r3, r2
 80126e4:	d12c      	bne.n	8012740 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80126e6:	2300      	movs	r3, #0
 80126e8:	613b      	str	r3, [r7, #16]
 80126ea:	4b18      	ldr	r3, [pc, #96]	; (801274c <HAL_SPI_MspInit+0x88>)
 80126ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126ee:	4a17      	ldr	r2, [pc, #92]	; (801274c <HAL_SPI_MspInit+0x88>)
 80126f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80126f4:	6413      	str	r3, [r2, #64]	; 0x40
 80126f6:	4b15      	ldr	r3, [pc, #84]	; (801274c <HAL_SPI_MspInit+0x88>)
 80126f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80126fe:	613b      	str	r3, [r7, #16]
 8012700:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012702:	2300      	movs	r3, #0
 8012704:	60fb      	str	r3, [r7, #12]
 8012706:	4b11      	ldr	r3, [pc, #68]	; (801274c <HAL_SPI_MspInit+0x88>)
 8012708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801270a:	4a10      	ldr	r2, [pc, #64]	; (801274c <HAL_SPI_MspInit+0x88>)
 801270c:	f043 0304 	orr.w	r3, r3, #4
 8012710:	6313      	str	r3, [r2, #48]	; 0x30
 8012712:	4b0e      	ldr	r3, [pc, #56]	; (801274c <HAL_SPI_MspInit+0x88>)
 8012714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012716:	f003 0304 	and.w	r3, r3, #4
 801271a:	60fb      	str	r3, [r7, #12]
 801271c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 801271e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8012722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012724:	2302      	movs	r3, #2
 8012726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012728:	2300      	movs	r3, #0
 801272a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801272c:	2303      	movs	r3, #3
 801272e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8012730:	2306      	movs	r3, #6
 8012732:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012734:	f107 0314 	add.w	r3, r7, #20
 8012738:	4619      	mov	r1, r3
 801273a:	4805      	ldr	r0, [pc, #20]	; (8012750 <HAL_SPI_MspInit+0x8c>)
 801273c:	f7ef fc30 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8012740:	bf00      	nop
 8012742:	3728      	adds	r7, #40	; 0x28
 8012744:	46bd      	mov	sp, r7
 8012746:	bd80      	pop	{r7, pc}
 8012748:	40003c00 	.word	0x40003c00
 801274c:	40023800 	.word	0x40023800
 8012750:	40020800 	.word	0x40020800

08012754 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8012754:	b580      	push	{r7, lr}
 8012756:	b086      	sub	sp, #24
 8012758:	af00      	add	r7, sp, #0
 801275a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	4a2c      	ldr	r2, [pc, #176]	; (8012814 <HAL_TIM_Base_MspInit+0xc0>)
 8012762:	4293      	cmp	r3, r2
 8012764:	d10e      	bne.n	8012784 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8012766:	2300      	movs	r3, #0
 8012768:	617b      	str	r3, [r7, #20]
 801276a:	4b2b      	ldr	r3, [pc, #172]	; (8012818 <HAL_TIM_Base_MspInit+0xc4>)
 801276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801276e:	4a2a      	ldr	r2, [pc, #168]	; (8012818 <HAL_TIM_Base_MspInit+0xc4>)
 8012770:	f043 0302 	orr.w	r3, r3, #2
 8012774:	6413      	str	r3, [r2, #64]	; 0x40
 8012776:	4b28      	ldr	r3, [pc, #160]	; (8012818 <HAL_TIM_Base_MspInit+0xc4>)
 8012778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801277a:	f003 0302 	and.w	r3, r3, #2
 801277e:	617b      	str	r3, [r7, #20]
 8012780:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8012782:	e042      	b.n	801280a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM6)
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	4a24      	ldr	r2, [pc, #144]	; (801281c <HAL_TIM_Base_MspInit+0xc8>)
 801278a:	4293      	cmp	r3, r2
 801278c:	d116      	bne.n	80127bc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM6_CLK_ENABLE();
 801278e:	2300      	movs	r3, #0
 8012790:	613b      	str	r3, [r7, #16]
 8012792:	4b21      	ldr	r3, [pc, #132]	; (8012818 <HAL_TIM_Base_MspInit+0xc4>)
 8012794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012796:	4a20      	ldr	r2, [pc, #128]	; (8012818 <HAL_TIM_Base_MspInit+0xc4>)
 8012798:	f043 0310 	orr.w	r3, r3, #16
 801279c:	6413      	str	r3, [r2, #64]	; 0x40
 801279e:	4b1e      	ldr	r3, [pc, #120]	; (8012818 <HAL_TIM_Base_MspInit+0xc4>)
 80127a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127a2:	f003 0310 	and.w	r3, r3, #16
 80127a6:	613b      	str	r3, [r7, #16]
 80127a8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80127aa:	2200      	movs	r2, #0
 80127ac:	2100      	movs	r1, #0
 80127ae:	2036      	movs	r0, #54	; 0x36
 80127b0:	f7ef f8eb 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80127b4:	2036      	movs	r0, #54	; 0x36
 80127b6:	f7ef f904 	bl	80019c2 <HAL_NVIC_EnableIRQ>
}
 80127ba:	e026      	b.n	801280a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM11)
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	4a17      	ldr	r2, [pc, #92]	; (8012820 <HAL_TIM_Base_MspInit+0xcc>)
 80127c2:	4293      	cmp	r3, r2
 80127c4:	d10e      	bne.n	80127e4 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80127c6:	2300      	movs	r3, #0
 80127c8:	60fb      	str	r3, [r7, #12]
 80127ca:	4b13      	ldr	r3, [pc, #76]	; (8012818 <HAL_TIM_Base_MspInit+0xc4>)
 80127cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80127ce:	4a12      	ldr	r2, [pc, #72]	; (8012818 <HAL_TIM_Base_MspInit+0xc4>)
 80127d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80127d4:	6453      	str	r3, [r2, #68]	; 0x44
 80127d6:	4b10      	ldr	r3, [pc, #64]	; (8012818 <HAL_TIM_Base_MspInit+0xc4>)
 80127d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80127da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80127de:	60fb      	str	r3, [r7, #12]
 80127e0:	68fb      	ldr	r3, [r7, #12]
}
 80127e2:	e012      	b.n	801280a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM12)
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	4a0e      	ldr	r2, [pc, #56]	; (8012824 <HAL_TIM_Base_MspInit+0xd0>)
 80127ea:	4293      	cmp	r3, r2
 80127ec:	d10d      	bne.n	801280a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80127ee:	2300      	movs	r3, #0
 80127f0:	60bb      	str	r3, [r7, #8]
 80127f2:	4b09      	ldr	r3, [pc, #36]	; (8012818 <HAL_TIM_Base_MspInit+0xc4>)
 80127f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127f6:	4a08      	ldr	r2, [pc, #32]	; (8012818 <HAL_TIM_Base_MspInit+0xc4>)
 80127f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127fc:	6413      	str	r3, [r2, #64]	; 0x40
 80127fe:	4b06      	ldr	r3, [pc, #24]	; (8012818 <HAL_TIM_Base_MspInit+0xc4>)
 8012800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012806:	60bb      	str	r3, [r7, #8]
 8012808:	68bb      	ldr	r3, [r7, #8]
}
 801280a:	bf00      	nop
 801280c:	3718      	adds	r7, #24
 801280e:	46bd      	mov	sp, r7
 8012810:	bd80      	pop	{r7, pc}
 8012812:	bf00      	nop
 8012814:	40000400 	.word	0x40000400
 8012818:	40023800 	.word	0x40023800
 801281c:	40001000 	.word	0x40001000
 8012820:	40014800 	.word	0x40014800
 8012824:	40001800 	.word	0x40001800

08012828 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8012828:	b480      	push	{r7}
 801282a:	b085      	sub	sp, #20
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	4a0b      	ldr	r2, [pc, #44]	; (8012864 <HAL_TIM_PWM_MspInit+0x3c>)
 8012836:	4293      	cmp	r3, r2
 8012838:	d10d      	bne.n	8012856 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 801283a:	2300      	movs	r3, #0
 801283c:	60fb      	str	r3, [r7, #12]
 801283e:	4b0a      	ldr	r3, [pc, #40]	; (8012868 <HAL_TIM_PWM_MspInit+0x40>)
 8012840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012842:	4a09      	ldr	r2, [pc, #36]	; (8012868 <HAL_TIM_PWM_MspInit+0x40>)
 8012844:	f043 0304 	orr.w	r3, r3, #4
 8012848:	6413      	str	r3, [r2, #64]	; 0x40
 801284a:	4b07      	ldr	r3, [pc, #28]	; (8012868 <HAL_TIM_PWM_MspInit+0x40>)
 801284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801284e:	f003 0304 	and.w	r3, r3, #4
 8012852:	60fb      	str	r3, [r7, #12]
 8012854:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8012856:	bf00      	nop
 8012858:	3714      	adds	r7, #20
 801285a:	46bd      	mov	sp, r7
 801285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012860:	4770      	bx	lr
 8012862:	bf00      	nop
 8012864:	40000800 	.word	0x40000800
 8012868:	40023800 	.word	0x40023800

0801286c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 801286c:	b580      	push	{r7, lr}
 801286e:	b08c      	sub	sp, #48	; 0x30
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012874:	f107 031c 	add.w	r3, r7, #28
 8012878:	2200      	movs	r2, #0
 801287a:	601a      	str	r2, [r3, #0]
 801287c:	605a      	str	r2, [r3, #4]
 801287e:	609a      	str	r2, [r3, #8]
 8012880:	60da      	str	r2, [r3, #12]
 8012882:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	4a32      	ldr	r2, [pc, #200]	; (8012954 <HAL_TIM_Encoder_MspInit+0xe8>)
 801288a:	4293      	cmp	r3, r2
 801288c:	d12c      	bne.n	80128e8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 801288e:	2300      	movs	r3, #0
 8012890:	61bb      	str	r3, [r7, #24]
 8012892:	4b31      	ldr	r3, [pc, #196]	; (8012958 <HAL_TIM_Encoder_MspInit+0xec>)
 8012894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012896:	4a30      	ldr	r2, [pc, #192]	; (8012958 <HAL_TIM_Encoder_MspInit+0xec>)
 8012898:	f043 0308 	orr.w	r3, r3, #8
 801289c:	6413      	str	r3, [r2, #64]	; 0x40
 801289e:	4b2e      	ldr	r3, [pc, #184]	; (8012958 <HAL_TIM_Encoder_MspInit+0xec>)
 80128a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128a2:	f003 0308 	and.w	r3, r3, #8
 80128a6:	61bb      	str	r3, [r7, #24]
 80128a8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80128aa:	2300      	movs	r3, #0
 80128ac:	617b      	str	r3, [r7, #20]
 80128ae:	4b2a      	ldr	r3, [pc, #168]	; (8012958 <HAL_TIM_Encoder_MspInit+0xec>)
 80128b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80128b2:	4a29      	ldr	r2, [pc, #164]	; (8012958 <HAL_TIM_Encoder_MspInit+0xec>)
 80128b4:	f043 0301 	orr.w	r3, r3, #1
 80128b8:	6313      	str	r3, [r2, #48]	; 0x30
 80128ba:	4b27      	ldr	r3, [pc, #156]	; (8012958 <HAL_TIM_Encoder_MspInit+0xec>)
 80128bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80128be:	f003 0301 	and.w	r3, r3, #1
 80128c2:	617b      	str	r3, [r7, #20]
 80128c4:	697b      	ldr	r3, [r7, #20]
    /**TIM5 GPIO Configuration    
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2 
    */
    GPIO_InitStruct.Pin = EC_L_A_Pin|EC_L_B_Pin;
 80128c6:	2303      	movs	r3, #3
 80128c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80128ca:	2302      	movs	r3, #2
 80128cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80128ce:	2300      	movs	r3, #0
 80128d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80128d2:	2300      	movs	r3, #0
 80128d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80128d6:	2302      	movs	r3, #2
 80128d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80128da:	f107 031c 	add.w	r3, r7, #28
 80128de:	4619      	mov	r1, r3
 80128e0:	481e      	ldr	r0, [pc, #120]	; (801295c <HAL_TIM_Encoder_MspInit+0xf0>)
 80128e2:	f7ef fb5d 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80128e6:	e030      	b.n	801294a <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	4a1c      	ldr	r2, [pc, #112]	; (8012960 <HAL_TIM_Encoder_MspInit+0xf4>)
 80128ee:	4293      	cmp	r3, r2
 80128f0:	d12b      	bne.n	801294a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80128f2:	2300      	movs	r3, #0
 80128f4:	613b      	str	r3, [r7, #16]
 80128f6:	4b18      	ldr	r3, [pc, #96]	; (8012958 <HAL_TIM_Encoder_MspInit+0xec>)
 80128f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128fa:	4a17      	ldr	r2, [pc, #92]	; (8012958 <HAL_TIM_Encoder_MspInit+0xec>)
 80128fc:	f043 0302 	orr.w	r3, r3, #2
 8012900:	6453      	str	r3, [r2, #68]	; 0x44
 8012902:	4b15      	ldr	r3, [pc, #84]	; (8012958 <HAL_TIM_Encoder_MspInit+0xec>)
 8012904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012906:	f003 0302 	and.w	r3, r3, #2
 801290a:	613b      	str	r3, [r7, #16]
 801290c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801290e:	2300      	movs	r3, #0
 8012910:	60fb      	str	r3, [r7, #12]
 8012912:	4b11      	ldr	r3, [pc, #68]	; (8012958 <HAL_TIM_Encoder_MspInit+0xec>)
 8012914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012916:	4a10      	ldr	r2, [pc, #64]	; (8012958 <HAL_TIM_Encoder_MspInit+0xec>)
 8012918:	f043 0304 	orr.w	r3, r3, #4
 801291c:	6313      	str	r3, [r2, #48]	; 0x30
 801291e:	4b0e      	ldr	r3, [pc, #56]	; (8012958 <HAL_TIM_Encoder_MspInit+0xec>)
 8012920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012922:	f003 0304 	and.w	r3, r3, #4
 8012926:	60fb      	str	r3, [r7, #12]
 8012928:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EC_R_A_Pin|EC_R_B_Pin;
 801292a:	23c0      	movs	r3, #192	; 0xc0
 801292c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801292e:	2302      	movs	r3, #2
 8012930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012932:	2300      	movs	r3, #0
 8012934:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012936:	2300      	movs	r3, #0
 8012938:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 801293a:	2303      	movs	r3, #3
 801293c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801293e:	f107 031c 	add.w	r3, r7, #28
 8012942:	4619      	mov	r1, r3
 8012944:	4807      	ldr	r0, [pc, #28]	; (8012964 <HAL_TIM_Encoder_MspInit+0xf8>)
 8012946:	f7ef fb2b 	bl	8001fa0 <HAL_GPIO_Init>
}
 801294a:	bf00      	nop
 801294c:	3730      	adds	r7, #48	; 0x30
 801294e:	46bd      	mov	sp, r7
 8012950:	bd80      	pop	{r7, pc}
 8012952:	bf00      	nop
 8012954:	40000c00 	.word	0x40000c00
 8012958:	40023800 	.word	0x40023800
 801295c:	40020000 	.word	0x40020000
 8012960:	40010400 	.word	0x40010400
 8012964:	40020800 	.word	0x40020800

08012968 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8012968:	b580      	push	{r7, lr}
 801296a:	b08c      	sub	sp, #48	; 0x30
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012970:	f107 031c 	add.w	r3, r7, #28
 8012974:	2200      	movs	r2, #0
 8012976:	601a      	str	r2, [r3, #0]
 8012978:	605a      	str	r2, [r3, #4]
 801297a:	609a      	str	r2, [r3, #8]
 801297c:	60da      	str	r2, [r3, #12]
 801297e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	4a49      	ldr	r2, [pc, #292]	; (8012aac <HAL_TIM_MspPostInit+0x144>)
 8012986:	4293      	cmp	r3, r2
 8012988:	d11e      	bne.n	80129c8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801298a:	2300      	movs	r3, #0
 801298c:	61bb      	str	r3, [r7, #24]
 801298e:	4b48      	ldr	r3, [pc, #288]	; (8012ab0 <HAL_TIM_MspPostInit+0x148>)
 8012990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012992:	4a47      	ldr	r2, [pc, #284]	; (8012ab0 <HAL_TIM_MspPostInit+0x148>)
 8012994:	f043 0302 	orr.w	r3, r3, #2
 8012998:	6313      	str	r3, [r2, #48]	; 0x30
 801299a:	4b45      	ldr	r3, [pc, #276]	; (8012ab0 <HAL_TIM_MspPostInit+0x148>)
 801299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801299e:	f003 0302 	and.w	r3, r3, #2
 80129a2:	61bb      	str	r3, [r7, #24]
 80129a4:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3 
    */
    GPIO_InitStruct.Pin = MOTOR_L_PWM_Pin;
 80129a6:	2301      	movs	r3, #1
 80129a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80129aa:	2302      	movs	r3, #2
 80129ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80129ae:	2300      	movs	r3, #0
 80129b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80129b2:	2300      	movs	r3, #0
 80129b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80129b6:	2302      	movs	r3, #2
 80129b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MOTOR_L_PWM_GPIO_Port, &GPIO_InitStruct);
 80129ba:	f107 031c 	add.w	r3, r7, #28
 80129be:	4619      	mov	r1, r3
 80129c0:	483c      	ldr	r0, [pc, #240]	; (8012ab4 <HAL_TIM_MspPostInit+0x14c>)
 80129c2:	f7ef faed 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80129c6:	e06d      	b.n	8012aa4 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM4)
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	4a3a      	ldr	r2, [pc, #232]	; (8012ab8 <HAL_TIM_MspPostInit+0x150>)
 80129ce:	4293      	cmp	r3, r2
 80129d0:	d11f      	bne.n	8012a12 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80129d2:	2300      	movs	r3, #0
 80129d4:	617b      	str	r3, [r7, #20]
 80129d6:	4b36      	ldr	r3, [pc, #216]	; (8012ab0 <HAL_TIM_MspPostInit+0x148>)
 80129d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129da:	4a35      	ldr	r2, [pc, #212]	; (8012ab0 <HAL_TIM_MspPostInit+0x148>)
 80129dc:	f043 0302 	orr.w	r3, r3, #2
 80129e0:	6313      	str	r3, [r2, #48]	; 0x30
 80129e2:	4b33      	ldr	r3, [pc, #204]	; (8012ab0 <HAL_TIM_MspPostInit+0x148>)
 80129e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129e6:	f003 0302 	and.w	r3, r3, #2
 80129ea:	617b      	str	r3, [r7, #20]
 80129ec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BUZZER_PWM_Pin;
 80129ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80129f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80129f4:	2302      	movs	r3, #2
 80129f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80129f8:	2300      	movs	r3, #0
 80129fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80129fc:	2300      	movs	r3, #0
 80129fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8012a00:	2302      	movs	r3, #2
 8012a02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BUZZER_PWM_GPIO_Port, &GPIO_InitStruct);
 8012a04:	f107 031c 	add.w	r3, r7, #28
 8012a08:	4619      	mov	r1, r3
 8012a0a:	482a      	ldr	r0, [pc, #168]	; (8012ab4 <HAL_TIM_MspPostInit+0x14c>)
 8012a0c:	f7ef fac8 	bl	8001fa0 <HAL_GPIO_Init>
}
 8012a10:	e048      	b.n	8012aa4 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM11)
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	4a29      	ldr	r2, [pc, #164]	; (8012abc <HAL_TIM_MspPostInit+0x154>)
 8012a18:	4293      	cmp	r3, r2
 8012a1a:	d11f      	bne.n	8012a5c <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012a1c:	2300      	movs	r3, #0
 8012a1e:	613b      	str	r3, [r7, #16]
 8012a20:	4b23      	ldr	r3, [pc, #140]	; (8012ab0 <HAL_TIM_MspPostInit+0x148>)
 8012a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a24:	4a22      	ldr	r2, [pc, #136]	; (8012ab0 <HAL_TIM_MspPostInit+0x148>)
 8012a26:	f043 0302 	orr.w	r3, r3, #2
 8012a2a:	6313      	str	r3, [r2, #48]	; 0x30
 8012a2c:	4b20      	ldr	r3, [pc, #128]	; (8012ab0 <HAL_TIM_MspPostInit+0x148>)
 8012a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a30:	f003 0302 	and.w	r3, r3, #2
 8012a34:	613b      	str	r3, [r7, #16]
 8012a36:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VACUUM_PWM_Pin;
 8012a38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012a3e:	2302      	movs	r3, #2
 8012a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012a42:	2300      	movs	r3, #0
 8012a44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012a46:	2300      	movs	r3, #0
 8012a48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8012a4a:	2303      	movs	r3, #3
 8012a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VACUUM_PWM_GPIO_Port, &GPIO_InitStruct);
 8012a4e:	f107 031c 	add.w	r3, r7, #28
 8012a52:	4619      	mov	r1, r3
 8012a54:	4817      	ldr	r0, [pc, #92]	; (8012ab4 <HAL_TIM_MspPostInit+0x14c>)
 8012a56:	f7ef faa3 	bl	8001fa0 <HAL_GPIO_Init>
}
 8012a5a:	e023      	b.n	8012aa4 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM12)
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	4a17      	ldr	r2, [pc, #92]	; (8012ac0 <HAL_TIM_MspPostInit+0x158>)
 8012a62:	4293      	cmp	r3, r2
 8012a64:	d11e      	bne.n	8012aa4 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012a66:	2300      	movs	r3, #0
 8012a68:	60fb      	str	r3, [r7, #12]
 8012a6a:	4b11      	ldr	r3, [pc, #68]	; (8012ab0 <HAL_TIM_MspPostInit+0x148>)
 8012a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a6e:	4a10      	ldr	r2, [pc, #64]	; (8012ab0 <HAL_TIM_MspPostInit+0x148>)
 8012a70:	f043 0302 	orr.w	r3, r3, #2
 8012a74:	6313      	str	r3, [r2, #48]	; 0x30
 8012a76:	4b0e      	ldr	r3, [pc, #56]	; (8012ab0 <HAL_TIM_MspPostInit+0x148>)
 8012a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a7a:	f003 0302 	and.w	r3, r3, #2
 8012a7e:	60fb      	str	r3, [r7, #12]
 8012a80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8012a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012a88:	2302      	movs	r3, #2
 8012a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012a8c:	2300      	movs	r3, #0
 8012a8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012a90:	2300      	movs	r3, #0
 8012a92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8012a94:	2309      	movs	r3, #9
 8012a96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012a98:	f107 031c 	add.w	r3, r7, #28
 8012a9c:	4619      	mov	r1, r3
 8012a9e:	4805      	ldr	r0, [pc, #20]	; (8012ab4 <HAL_TIM_MspPostInit+0x14c>)
 8012aa0:	f7ef fa7e 	bl	8001fa0 <HAL_GPIO_Init>
}
 8012aa4:	bf00      	nop
 8012aa6:	3730      	adds	r7, #48	; 0x30
 8012aa8:	46bd      	mov	sp, r7
 8012aaa:	bd80      	pop	{r7, pc}
 8012aac:	40000400 	.word	0x40000400
 8012ab0:	40023800 	.word	0x40023800
 8012ab4:	40020400 	.word	0x40020400
 8012ab8:	40000800 	.word	0x40000800
 8012abc:	40014800 	.word	0x40014800
 8012ac0:	40001800 	.word	0x40001800

08012ac4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b08a      	sub	sp, #40	; 0x28
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012acc:	f107 0314 	add.w	r3, r7, #20
 8012ad0:	2200      	movs	r2, #0
 8012ad2:	601a      	str	r2, [r3, #0]
 8012ad4:	605a      	str	r2, [r3, #4]
 8012ad6:	609a      	str	r2, [r3, #8]
 8012ad8:	60da      	str	r2, [r3, #12]
 8012ada:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	4a19      	ldr	r2, [pc, #100]	; (8012b48 <HAL_UART_MspInit+0x84>)
 8012ae2:	4293      	cmp	r3, r2
 8012ae4:	d12c      	bne.n	8012b40 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	613b      	str	r3, [r7, #16]
 8012aea:	4b18      	ldr	r3, [pc, #96]	; (8012b4c <HAL_UART_MspInit+0x88>)
 8012aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012aee:	4a17      	ldr	r2, [pc, #92]	; (8012b4c <HAL_UART_MspInit+0x88>)
 8012af0:	f043 0310 	orr.w	r3, r3, #16
 8012af4:	6453      	str	r3, [r2, #68]	; 0x44
 8012af6:	4b15      	ldr	r3, [pc, #84]	; (8012b4c <HAL_UART_MspInit+0x88>)
 8012af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012afa:	f003 0310 	and.w	r3, r3, #16
 8012afe:	613b      	str	r3, [r7, #16]
 8012b00:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012b02:	2300      	movs	r3, #0
 8012b04:	60fb      	str	r3, [r7, #12]
 8012b06:	4b11      	ldr	r3, [pc, #68]	; (8012b4c <HAL_UART_MspInit+0x88>)
 8012b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b0a:	4a10      	ldr	r2, [pc, #64]	; (8012b4c <HAL_UART_MspInit+0x88>)
 8012b0c:	f043 0301 	orr.w	r3, r3, #1
 8012b10:	6313      	str	r3, [r2, #48]	; 0x30
 8012b12:	4b0e      	ldr	r3, [pc, #56]	; (8012b4c <HAL_UART_MspInit+0x88>)
 8012b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b16:	f003 0301 	and.w	r3, r3, #1
 8012b1a:	60fb      	str	r3, [r7, #12]
 8012b1c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8012b1e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8012b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012b24:	2302      	movs	r3, #2
 8012b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8012b28:	2301      	movs	r3, #1
 8012b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012b2c:	2303      	movs	r3, #3
 8012b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8012b30:	2307      	movs	r3, #7
 8012b32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012b34:	f107 0314 	add.w	r3, r7, #20
 8012b38:	4619      	mov	r1, r3
 8012b3a:	4805      	ldr	r0, [pc, #20]	; (8012b50 <HAL_UART_MspInit+0x8c>)
 8012b3c:	f7ef fa30 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8012b40:	bf00      	nop
 8012b42:	3728      	adds	r7, #40	; 0x28
 8012b44:	46bd      	mov	sp, r7
 8012b46:	bd80      	pop	{r7, pc}
 8012b48:	40011000 	.word	0x40011000
 8012b4c:	40023800 	.word	0x40023800
 8012b50:	40020000 	.word	0x40020000

08012b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8012b54:	b480      	push	{r7}
 8012b56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8012b58:	bf00      	nop
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b60:	4770      	bx	lr

08012b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8012b62:	b480      	push	{r7}
 8012b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012b66:	e7fe      	b.n	8012b66 <HardFault_Handler+0x4>

08012b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8012b68:	b480      	push	{r7}
 8012b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8012b6c:	e7fe      	b.n	8012b6c <MemManage_Handler+0x4>

08012b6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8012b6e:	b480      	push	{r7}
 8012b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8012b72:	e7fe      	b.n	8012b72 <BusFault_Handler+0x4>

08012b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8012b74:	b480      	push	{r7}
 8012b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8012b78:	e7fe      	b.n	8012b78 <UsageFault_Handler+0x4>

08012b7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8012b7a:	b480      	push	{r7}
 8012b7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8012b7e:	bf00      	nop
 8012b80:	46bd      	mov	sp, r7
 8012b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b86:	4770      	bx	lr

08012b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8012b88:	b480      	push	{r7}
 8012b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8012b8c:	bf00      	nop
 8012b8e:	46bd      	mov	sp, r7
 8012b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b94:	4770      	bx	lr

08012b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8012b96:	b480      	push	{r7}
 8012b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8012b9a:	bf00      	nop
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba2:	4770      	bx	lr

08012ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8012ba8:	f7ee fa18 	bl	8000fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8012bac:	bf00      	nop
 8012bae:	bd80      	pop	{r7, pc}

08012bb0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8012bb4:	4802      	ldr	r0, [pc, #8]	; (8012bc0 <TIM6_DAC_IRQHandler+0x10>)
 8012bb6:	f7f0 fef6 	bl	80039a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8012bba:	bf00      	nop
 8012bbc:	bd80      	pop	{r7, pc}
 8012bbe:	bf00      	nop
 8012bc0:	20000c34 	.word	0x20000c34

08012bc4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b086      	sub	sp, #24
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	60f8      	str	r0, [r7, #12]
 8012bcc:	60b9      	str	r1, [r7, #8]
 8012bce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	617b      	str	r3, [r7, #20]
 8012bd4:	e00a      	b.n	8012bec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8012bd6:	f3af 8000 	nop.w
 8012bda:	4601      	mov	r1, r0
 8012bdc:	68bb      	ldr	r3, [r7, #8]
 8012bde:	1c5a      	adds	r2, r3, #1
 8012be0:	60ba      	str	r2, [r7, #8]
 8012be2:	b2ca      	uxtb	r2, r1
 8012be4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012be6:	697b      	ldr	r3, [r7, #20]
 8012be8:	3301      	adds	r3, #1
 8012bea:	617b      	str	r3, [r7, #20]
 8012bec:	697a      	ldr	r2, [r7, #20]
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	429a      	cmp	r2, r3
 8012bf2:	dbf0      	blt.n	8012bd6 <_read+0x12>
	}

return len;
 8012bf4:	687b      	ldr	r3, [r7, #4]
}
 8012bf6:	4618      	mov	r0, r3
 8012bf8:	3718      	adds	r7, #24
 8012bfa:	46bd      	mov	sp, r7
 8012bfc:	bd80      	pop	{r7, pc}

08012bfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8012bfe:	b580      	push	{r7, lr}
 8012c00:	b086      	sub	sp, #24
 8012c02:	af00      	add	r7, sp, #0
 8012c04:	60f8      	str	r0, [r7, #12]
 8012c06:	60b9      	str	r1, [r7, #8]
 8012c08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	617b      	str	r3, [r7, #20]
 8012c0e:	e009      	b.n	8012c24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8012c10:	68bb      	ldr	r3, [r7, #8]
 8012c12:	1c5a      	adds	r2, r3, #1
 8012c14:	60ba      	str	r2, [r7, #8]
 8012c16:	781b      	ldrb	r3, [r3, #0]
 8012c18:	4618      	mov	r0, r3
 8012c1a:	f7fa f957 	bl	800cecc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012c1e:	697b      	ldr	r3, [r7, #20]
 8012c20:	3301      	adds	r3, #1
 8012c22:	617b      	str	r3, [r7, #20]
 8012c24:	697a      	ldr	r2, [r7, #20]
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	429a      	cmp	r2, r3
 8012c2a:	dbf1      	blt.n	8012c10 <_write+0x12>
	}
	return len;
 8012c2c:	687b      	ldr	r3, [r7, #4]
}
 8012c2e:	4618      	mov	r0, r3
 8012c30:	3718      	adds	r7, #24
 8012c32:	46bd      	mov	sp, r7
 8012c34:	bd80      	pop	{r7, pc}

08012c36 <_close>:

int _close(int file)
{
 8012c36:	b480      	push	{r7}
 8012c38:	b083      	sub	sp, #12
 8012c3a:	af00      	add	r7, sp, #0
 8012c3c:	6078      	str	r0, [r7, #4]
	return -1;
 8012c3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012c42:	4618      	mov	r0, r3
 8012c44:	370c      	adds	r7, #12
 8012c46:	46bd      	mov	sp, r7
 8012c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c4c:	4770      	bx	lr

08012c4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8012c4e:	b480      	push	{r7}
 8012c50:	b083      	sub	sp, #12
 8012c52:	af00      	add	r7, sp, #0
 8012c54:	6078      	str	r0, [r7, #4]
 8012c56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8012c58:	683b      	ldr	r3, [r7, #0]
 8012c5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8012c5e:	605a      	str	r2, [r3, #4]
	return 0;
 8012c60:	2300      	movs	r3, #0
}
 8012c62:	4618      	mov	r0, r3
 8012c64:	370c      	adds	r7, #12
 8012c66:	46bd      	mov	sp, r7
 8012c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c6c:	4770      	bx	lr

08012c6e <_isatty>:

int _isatty(int file)
{
 8012c6e:	b480      	push	{r7}
 8012c70:	b083      	sub	sp, #12
 8012c72:	af00      	add	r7, sp, #0
 8012c74:	6078      	str	r0, [r7, #4]
	return 1;
 8012c76:	2301      	movs	r3, #1
}
 8012c78:	4618      	mov	r0, r3
 8012c7a:	370c      	adds	r7, #12
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c82:	4770      	bx	lr

08012c84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8012c84:	b480      	push	{r7}
 8012c86:	b085      	sub	sp, #20
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	60f8      	str	r0, [r7, #12]
 8012c8c:	60b9      	str	r1, [r7, #8]
 8012c8e:	607a      	str	r2, [r7, #4]
	return 0;
 8012c90:	2300      	movs	r3, #0
}
 8012c92:	4618      	mov	r0, r3
 8012c94:	3714      	adds	r7, #20
 8012c96:	46bd      	mov	sp, r7
 8012c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c9c:	4770      	bx	lr
	...

08012ca0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8012ca0:	b580      	push	{r7, lr}
 8012ca2:	b084      	sub	sp, #16
 8012ca4:	af00      	add	r7, sp, #0
 8012ca6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8012ca8:	4b11      	ldr	r3, [pc, #68]	; (8012cf0 <_sbrk+0x50>)
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d102      	bne.n	8012cb6 <_sbrk+0x16>
		heap_end = &end;
 8012cb0:	4b0f      	ldr	r3, [pc, #60]	; (8012cf0 <_sbrk+0x50>)
 8012cb2:	4a10      	ldr	r2, [pc, #64]	; (8012cf4 <_sbrk+0x54>)
 8012cb4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8012cb6:	4b0e      	ldr	r3, [pc, #56]	; (8012cf0 <_sbrk+0x50>)
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8012cbc:	4b0c      	ldr	r3, [pc, #48]	; (8012cf0 <_sbrk+0x50>)
 8012cbe:	681a      	ldr	r2, [r3, #0]
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	4413      	add	r3, r2
 8012cc4:	466a      	mov	r2, sp
 8012cc6:	4293      	cmp	r3, r2
 8012cc8:	d907      	bls.n	8012cda <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8012cca:	f000 f875 	bl	8012db8 <__errno>
 8012cce:	4602      	mov	r2, r0
 8012cd0:	230c      	movs	r3, #12
 8012cd2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8012cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8012cd8:	e006      	b.n	8012ce8 <_sbrk+0x48>
	}

	heap_end += incr;
 8012cda:	4b05      	ldr	r3, [pc, #20]	; (8012cf0 <_sbrk+0x50>)
 8012cdc:	681a      	ldr	r2, [r3, #0]
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	4413      	add	r3, r2
 8012ce2:	4a03      	ldr	r2, [pc, #12]	; (8012cf0 <_sbrk+0x50>)
 8012ce4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8012ce6:	68fb      	ldr	r3, [r7, #12]
}
 8012ce8:	4618      	mov	r0, r3
 8012cea:	3710      	adds	r7, #16
 8012cec:	46bd      	mov	sp, r7
 8012cee:	bd80      	pop	{r7, pc}
 8012cf0:	20000114 	.word	0x20000114
 8012cf4:	20001660 	.word	0x20001660

08012cf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8012cf8:	b480      	push	{r7}
 8012cfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8012cfc:	4b16      	ldr	r3, [pc, #88]	; (8012d58 <SystemInit+0x60>)
 8012cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012d02:	4a15      	ldr	r2, [pc, #84]	; (8012d58 <SystemInit+0x60>)
 8012d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8012d0c:	4b13      	ldr	r3, [pc, #76]	; (8012d5c <SystemInit+0x64>)
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	4a12      	ldr	r2, [pc, #72]	; (8012d5c <SystemInit+0x64>)
 8012d12:	f043 0301 	orr.w	r3, r3, #1
 8012d16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8012d18:	4b10      	ldr	r3, [pc, #64]	; (8012d5c <SystemInit+0x64>)
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8012d1e:	4b0f      	ldr	r3, [pc, #60]	; (8012d5c <SystemInit+0x64>)
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	4a0e      	ldr	r2, [pc, #56]	; (8012d5c <SystemInit+0x64>)
 8012d24:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8012d28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012d2c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8012d2e:	4b0b      	ldr	r3, [pc, #44]	; (8012d5c <SystemInit+0x64>)
 8012d30:	4a0b      	ldr	r2, [pc, #44]	; (8012d60 <SystemInit+0x68>)
 8012d32:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8012d34:	4b09      	ldr	r3, [pc, #36]	; (8012d5c <SystemInit+0x64>)
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	4a08      	ldr	r2, [pc, #32]	; (8012d5c <SystemInit+0x64>)
 8012d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012d3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8012d40:	4b06      	ldr	r3, [pc, #24]	; (8012d5c <SystemInit+0x64>)
 8012d42:	2200      	movs	r2, #0
 8012d44:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8012d46:	4b04      	ldr	r3, [pc, #16]	; (8012d58 <SystemInit+0x60>)
 8012d48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8012d4c:	609a      	str	r2, [r3, #8]
#endif
}
 8012d4e:	bf00      	nop
 8012d50:	46bd      	mov	sp, r7
 8012d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d56:	4770      	bx	lr
 8012d58:	e000ed00 	.word	0xe000ed00
 8012d5c:	40023800 	.word	0x40023800
 8012d60:	24003010 	.word	0x24003010

08012d64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8012d64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8012d9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8012d68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8012d6a:	e003      	b.n	8012d74 <LoopCopyDataInit>

08012d6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8012d6c:	4b0c      	ldr	r3, [pc, #48]	; (8012da0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8012d6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8012d70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8012d72:	3104      	adds	r1, #4

08012d74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8012d74:	480b      	ldr	r0, [pc, #44]	; (8012da4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8012d76:	4b0c      	ldr	r3, [pc, #48]	; (8012da8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8012d78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8012d7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8012d7c:	d3f6      	bcc.n	8012d6c <CopyDataInit>
  ldr  r2, =_sbss
 8012d7e:	4a0b      	ldr	r2, [pc, #44]	; (8012dac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8012d80:	e002      	b.n	8012d88 <LoopFillZerobss>

08012d82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8012d82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8012d84:	f842 3b04 	str.w	r3, [r2], #4

08012d88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8012d88:	4b09      	ldr	r3, [pc, #36]	; (8012db0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8012d8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8012d8c:	d3f9      	bcc.n	8012d82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8012d8e:	f7ff ffb3 	bl	8012cf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8012d92:	f000 f817 	bl	8012dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8012d96:	f7fb fb5b 	bl	800e450 <main>
  bx  lr    
 8012d9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8012d9c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8012da0:	08014658 	.word	0x08014658
  ldr  r0, =_sdata
 8012da4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8012da8:	200000ec 	.word	0x200000ec
  ldr  r2, =_sbss
 8012dac:	200000ec 	.word	0x200000ec
  ldr  r3, = _ebss
 8012db0:	20001660 	.word	0x20001660

08012db4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8012db4:	e7fe      	b.n	8012db4 <ADC_IRQHandler>
	...

08012db8 <__errno>:
 8012db8:	4b01      	ldr	r3, [pc, #4]	; (8012dc0 <__errno+0x8>)
 8012dba:	6818      	ldr	r0, [r3, #0]
 8012dbc:	4770      	bx	lr
 8012dbe:	bf00      	nop
 8012dc0:	20000084 	.word	0x20000084

08012dc4 <__libc_init_array>:
 8012dc4:	b570      	push	{r4, r5, r6, lr}
 8012dc6:	4e0d      	ldr	r6, [pc, #52]	; (8012dfc <__libc_init_array+0x38>)
 8012dc8:	4c0d      	ldr	r4, [pc, #52]	; (8012e00 <__libc_init_array+0x3c>)
 8012dca:	1ba4      	subs	r4, r4, r6
 8012dcc:	10a4      	asrs	r4, r4, #2
 8012dce:	2500      	movs	r5, #0
 8012dd0:	42a5      	cmp	r5, r4
 8012dd2:	d109      	bne.n	8012de8 <__libc_init_array+0x24>
 8012dd4:	4e0b      	ldr	r6, [pc, #44]	; (8012e04 <__libc_init_array+0x40>)
 8012dd6:	4c0c      	ldr	r4, [pc, #48]	; (8012e08 <__libc_init_array+0x44>)
 8012dd8:	f001 f932 	bl	8014040 <_init>
 8012ddc:	1ba4      	subs	r4, r4, r6
 8012dde:	10a4      	asrs	r4, r4, #2
 8012de0:	2500      	movs	r5, #0
 8012de2:	42a5      	cmp	r5, r4
 8012de4:	d105      	bne.n	8012df2 <__libc_init_array+0x2e>
 8012de6:	bd70      	pop	{r4, r5, r6, pc}
 8012de8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012dec:	4798      	blx	r3
 8012dee:	3501      	adds	r5, #1
 8012df0:	e7ee      	b.n	8012dd0 <__libc_init_array+0xc>
 8012df2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012df6:	4798      	blx	r3
 8012df8:	3501      	adds	r5, #1
 8012dfa:	e7f2      	b.n	8012de2 <__libc_init_array+0x1e>
 8012dfc:	08014650 	.word	0x08014650
 8012e00:	08014650 	.word	0x08014650
 8012e04:	08014650 	.word	0x08014650
 8012e08:	08014654 	.word	0x08014654

08012e0c <memset>:
 8012e0c:	4402      	add	r2, r0
 8012e0e:	4603      	mov	r3, r0
 8012e10:	4293      	cmp	r3, r2
 8012e12:	d100      	bne.n	8012e16 <memset+0xa>
 8012e14:	4770      	bx	lr
 8012e16:	f803 1b01 	strb.w	r1, [r3], #1
 8012e1a:	e7f9      	b.n	8012e10 <memset+0x4>

08012e1c <iprintf>:
 8012e1c:	b40f      	push	{r0, r1, r2, r3}
 8012e1e:	4b0a      	ldr	r3, [pc, #40]	; (8012e48 <iprintf+0x2c>)
 8012e20:	b513      	push	{r0, r1, r4, lr}
 8012e22:	681c      	ldr	r4, [r3, #0]
 8012e24:	b124      	cbz	r4, 8012e30 <iprintf+0x14>
 8012e26:	69a3      	ldr	r3, [r4, #24]
 8012e28:	b913      	cbnz	r3, 8012e30 <iprintf+0x14>
 8012e2a:	4620      	mov	r0, r4
 8012e2c:	f000 fad8 	bl	80133e0 <__sinit>
 8012e30:	ab05      	add	r3, sp, #20
 8012e32:	9a04      	ldr	r2, [sp, #16]
 8012e34:	68a1      	ldr	r1, [r4, #8]
 8012e36:	9301      	str	r3, [sp, #4]
 8012e38:	4620      	mov	r0, r4
 8012e3a:	f000 fc99 	bl	8013770 <_vfiprintf_r>
 8012e3e:	b002      	add	sp, #8
 8012e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e44:	b004      	add	sp, #16
 8012e46:	4770      	bx	lr
 8012e48:	20000084 	.word	0x20000084

08012e4c <_puts_r>:
 8012e4c:	b570      	push	{r4, r5, r6, lr}
 8012e4e:	460e      	mov	r6, r1
 8012e50:	4605      	mov	r5, r0
 8012e52:	b118      	cbz	r0, 8012e5c <_puts_r+0x10>
 8012e54:	6983      	ldr	r3, [r0, #24]
 8012e56:	b90b      	cbnz	r3, 8012e5c <_puts_r+0x10>
 8012e58:	f000 fac2 	bl	80133e0 <__sinit>
 8012e5c:	69ab      	ldr	r3, [r5, #24]
 8012e5e:	68ac      	ldr	r4, [r5, #8]
 8012e60:	b913      	cbnz	r3, 8012e68 <_puts_r+0x1c>
 8012e62:	4628      	mov	r0, r5
 8012e64:	f000 fabc 	bl	80133e0 <__sinit>
 8012e68:	4b23      	ldr	r3, [pc, #140]	; (8012ef8 <_puts_r+0xac>)
 8012e6a:	429c      	cmp	r4, r3
 8012e6c:	d117      	bne.n	8012e9e <_puts_r+0x52>
 8012e6e:	686c      	ldr	r4, [r5, #4]
 8012e70:	89a3      	ldrh	r3, [r4, #12]
 8012e72:	071b      	lsls	r3, r3, #28
 8012e74:	d51d      	bpl.n	8012eb2 <_puts_r+0x66>
 8012e76:	6923      	ldr	r3, [r4, #16]
 8012e78:	b1db      	cbz	r3, 8012eb2 <_puts_r+0x66>
 8012e7a:	3e01      	subs	r6, #1
 8012e7c:	68a3      	ldr	r3, [r4, #8]
 8012e7e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012e82:	3b01      	subs	r3, #1
 8012e84:	60a3      	str	r3, [r4, #8]
 8012e86:	b9e9      	cbnz	r1, 8012ec4 <_puts_r+0x78>
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	da2e      	bge.n	8012eea <_puts_r+0x9e>
 8012e8c:	4622      	mov	r2, r4
 8012e8e:	210a      	movs	r1, #10
 8012e90:	4628      	mov	r0, r5
 8012e92:	f000 f8f5 	bl	8013080 <__swbuf_r>
 8012e96:	3001      	adds	r0, #1
 8012e98:	d011      	beq.n	8012ebe <_puts_r+0x72>
 8012e9a:	200a      	movs	r0, #10
 8012e9c:	e011      	b.n	8012ec2 <_puts_r+0x76>
 8012e9e:	4b17      	ldr	r3, [pc, #92]	; (8012efc <_puts_r+0xb0>)
 8012ea0:	429c      	cmp	r4, r3
 8012ea2:	d101      	bne.n	8012ea8 <_puts_r+0x5c>
 8012ea4:	68ac      	ldr	r4, [r5, #8]
 8012ea6:	e7e3      	b.n	8012e70 <_puts_r+0x24>
 8012ea8:	4b15      	ldr	r3, [pc, #84]	; (8012f00 <_puts_r+0xb4>)
 8012eaa:	429c      	cmp	r4, r3
 8012eac:	bf08      	it	eq
 8012eae:	68ec      	ldreq	r4, [r5, #12]
 8012eb0:	e7de      	b.n	8012e70 <_puts_r+0x24>
 8012eb2:	4621      	mov	r1, r4
 8012eb4:	4628      	mov	r0, r5
 8012eb6:	f000 f935 	bl	8013124 <__swsetup_r>
 8012eba:	2800      	cmp	r0, #0
 8012ebc:	d0dd      	beq.n	8012e7a <_puts_r+0x2e>
 8012ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8012ec2:	bd70      	pop	{r4, r5, r6, pc}
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	da04      	bge.n	8012ed2 <_puts_r+0x86>
 8012ec8:	69a2      	ldr	r2, [r4, #24]
 8012eca:	429a      	cmp	r2, r3
 8012ecc:	dc06      	bgt.n	8012edc <_puts_r+0x90>
 8012ece:	290a      	cmp	r1, #10
 8012ed0:	d004      	beq.n	8012edc <_puts_r+0x90>
 8012ed2:	6823      	ldr	r3, [r4, #0]
 8012ed4:	1c5a      	adds	r2, r3, #1
 8012ed6:	6022      	str	r2, [r4, #0]
 8012ed8:	7019      	strb	r1, [r3, #0]
 8012eda:	e7cf      	b.n	8012e7c <_puts_r+0x30>
 8012edc:	4622      	mov	r2, r4
 8012ede:	4628      	mov	r0, r5
 8012ee0:	f000 f8ce 	bl	8013080 <__swbuf_r>
 8012ee4:	3001      	adds	r0, #1
 8012ee6:	d1c9      	bne.n	8012e7c <_puts_r+0x30>
 8012ee8:	e7e9      	b.n	8012ebe <_puts_r+0x72>
 8012eea:	6823      	ldr	r3, [r4, #0]
 8012eec:	200a      	movs	r0, #10
 8012eee:	1c5a      	adds	r2, r3, #1
 8012ef0:	6022      	str	r2, [r4, #0]
 8012ef2:	7018      	strb	r0, [r3, #0]
 8012ef4:	e7e5      	b.n	8012ec2 <_puts_r+0x76>
 8012ef6:	bf00      	nop
 8012ef8:	080145d0 	.word	0x080145d0
 8012efc:	080145f0 	.word	0x080145f0
 8012f00:	080145b0 	.word	0x080145b0

08012f04 <puts>:
 8012f04:	4b02      	ldr	r3, [pc, #8]	; (8012f10 <puts+0xc>)
 8012f06:	4601      	mov	r1, r0
 8012f08:	6818      	ldr	r0, [r3, #0]
 8012f0a:	f7ff bf9f 	b.w	8012e4c <_puts_r>
 8012f0e:	bf00      	nop
 8012f10:	20000084 	.word	0x20000084

08012f14 <setbuf>:
 8012f14:	2900      	cmp	r1, #0
 8012f16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012f1a:	bf0c      	ite	eq
 8012f1c:	2202      	moveq	r2, #2
 8012f1e:	2200      	movne	r2, #0
 8012f20:	f000 b800 	b.w	8012f24 <setvbuf>

08012f24 <setvbuf>:
 8012f24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012f28:	461d      	mov	r5, r3
 8012f2a:	4b51      	ldr	r3, [pc, #324]	; (8013070 <setvbuf+0x14c>)
 8012f2c:	681e      	ldr	r6, [r3, #0]
 8012f2e:	4604      	mov	r4, r0
 8012f30:	460f      	mov	r7, r1
 8012f32:	4690      	mov	r8, r2
 8012f34:	b126      	cbz	r6, 8012f40 <setvbuf+0x1c>
 8012f36:	69b3      	ldr	r3, [r6, #24]
 8012f38:	b913      	cbnz	r3, 8012f40 <setvbuf+0x1c>
 8012f3a:	4630      	mov	r0, r6
 8012f3c:	f000 fa50 	bl	80133e0 <__sinit>
 8012f40:	4b4c      	ldr	r3, [pc, #304]	; (8013074 <setvbuf+0x150>)
 8012f42:	429c      	cmp	r4, r3
 8012f44:	d152      	bne.n	8012fec <setvbuf+0xc8>
 8012f46:	6874      	ldr	r4, [r6, #4]
 8012f48:	f1b8 0f02 	cmp.w	r8, #2
 8012f4c:	d006      	beq.n	8012f5c <setvbuf+0x38>
 8012f4e:	f1b8 0f01 	cmp.w	r8, #1
 8012f52:	f200 8089 	bhi.w	8013068 <setvbuf+0x144>
 8012f56:	2d00      	cmp	r5, #0
 8012f58:	f2c0 8086 	blt.w	8013068 <setvbuf+0x144>
 8012f5c:	4621      	mov	r1, r4
 8012f5e:	4630      	mov	r0, r6
 8012f60:	f000 f9d4 	bl	801330c <_fflush_r>
 8012f64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012f66:	b141      	cbz	r1, 8012f7a <setvbuf+0x56>
 8012f68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012f6c:	4299      	cmp	r1, r3
 8012f6e:	d002      	beq.n	8012f76 <setvbuf+0x52>
 8012f70:	4630      	mov	r0, r6
 8012f72:	f000 fb2b 	bl	80135cc <_free_r>
 8012f76:	2300      	movs	r3, #0
 8012f78:	6363      	str	r3, [r4, #52]	; 0x34
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	61a3      	str	r3, [r4, #24]
 8012f7e:	6063      	str	r3, [r4, #4]
 8012f80:	89a3      	ldrh	r3, [r4, #12]
 8012f82:	061b      	lsls	r3, r3, #24
 8012f84:	d503      	bpl.n	8012f8e <setvbuf+0x6a>
 8012f86:	6921      	ldr	r1, [r4, #16]
 8012f88:	4630      	mov	r0, r6
 8012f8a:	f000 fb1f 	bl	80135cc <_free_r>
 8012f8e:	89a3      	ldrh	r3, [r4, #12]
 8012f90:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8012f94:	f023 0303 	bic.w	r3, r3, #3
 8012f98:	f1b8 0f02 	cmp.w	r8, #2
 8012f9c:	81a3      	strh	r3, [r4, #12]
 8012f9e:	d05d      	beq.n	801305c <setvbuf+0x138>
 8012fa0:	ab01      	add	r3, sp, #4
 8012fa2:	466a      	mov	r2, sp
 8012fa4:	4621      	mov	r1, r4
 8012fa6:	4630      	mov	r0, r6
 8012fa8:	f000 faa4 	bl	80134f4 <__swhatbuf_r>
 8012fac:	89a3      	ldrh	r3, [r4, #12]
 8012fae:	4318      	orrs	r0, r3
 8012fb0:	81a0      	strh	r0, [r4, #12]
 8012fb2:	bb2d      	cbnz	r5, 8013000 <setvbuf+0xdc>
 8012fb4:	9d00      	ldr	r5, [sp, #0]
 8012fb6:	4628      	mov	r0, r5
 8012fb8:	f000 fb00 	bl	80135bc <malloc>
 8012fbc:	4607      	mov	r7, r0
 8012fbe:	2800      	cmp	r0, #0
 8012fc0:	d14e      	bne.n	8013060 <setvbuf+0x13c>
 8012fc2:	f8dd 9000 	ldr.w	r9, [sp]
 8012fc6:	45a9      	cmp	r9, r5
 8012fc8:	d13c      	bne.n	8013044 <setvbuf+0x120>
 8012fca:	f04f 30ff 	mov.w	r0, #4294967295
 8012fce:	89a3      	ldrh	r3, [r4, #12]
 8012fd0:	f043 0302 	orr.w	r3, r3, #2
 8012fd4:	81a3      	strh	r3, [r4, #12]
 8012fd6:	2300      	movs	r3, #0
 8012fd8:	60a3      	str	r3, [r4, #8]
 8012fda:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012fde:	6023      	str	r3, [r4, #0]
 8012fe0:	6123      	str	r3, [r4, #16]
 8012fe2:	2301      	movs	r3, #1
 8012fe4:	6163      	str	r3, [r4, #20]
 8012fe6:	b003      	add	sp, #12
 8012fe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012fec:	4b22      	ldr	r3, [pc, #136]	; (8013078 <setvbuf+0x154>)
 8012fee:	429c      	cmp	r4, r3
 8012ff0:	d101      	bne.n	8012ff6 <setvbuf+0xd2>
 8012ff2:	68b4      	ldr	r4, [r6, #8]
 8012ff4:	e7a8      	b.n	8012f48 <setvbuf+0x24>
 8012ff6:	4b21      	ldr	r3, [pc, #132]	; (801307c <setvbuf+0x158>)
 8012ff8:	429c      	cmp	r4, r3
 8012ffa:	bf08      	it	eq
 8012ffc:	68f4      	ldreq	r4, [r6, #12]
 8012ffe:	e7a3      	b.n	8012f48 <setvbuf+0x24>
 8013000:	2f00      	cmp	r7, #0
 8013002:	d0d8      	beq.n	8012fb6 <setvbuf+0x92>
 8013004:	69b3      	ldr	r3, [r6, #24]
 8013006:	b913      	cbnz	r3, 801300e <setvbuf+0xea>
 8013008:	4630      	mov	r0, r6
 801300a:	f000 f9e9 	bl	80133e0 <__sinit>
 801300e:	f1b8 0f01 	cmp.w	r8, #1
 8013012:	bf08      	it	eq
 8013014:	89a3      	ldrheq	r3, [r4, #12]
 8013016:	6027      	str	r7, [r4, #0]
 8013018:	bf04      	itt	eq
 801301a:	f043 0301 	orreq.w	r3, r3, #1
 801301e:	81a3      	strheq	r3, [r4, #12]
 8013020:	89a3      	ldrh	r3, [r4, #12]
 8013022:	f013 0008 	ands.w	r0, r3, #8
 8013026:	e9c4 7504 	strd	r7, r5, [r4, #16]
 801302a:	d01b      	beq.n	8013064 <setvbuf+0x140>
 801302c:	f013 0001 	ands.w	r0, r3, #1
 8013030:	bf18      	it	ne
 8013032:	426d      	negne	r5, r5
 8013034:	f04f 0300 	mov.w	r3, #0
 8013038:	bf1d      	ittte	ne
 801303a:	60a3      	strne	r3, [r4, #8]
 801303c:	61a5      	strne	r5, [r4, #24]
 801303e:	4618      	movne	r0, r3
 8013040:	60a5      	streq	r5, [r4, #8]
 8013042:	e7d0      	b.n	8012fe6 <setvbuf+0xc2>
 8013044:	4648      	mov	r0, r9
 8013046:	f000 fab9 	bl	80135bc <malloc>
 801304a:	4607      	mov	r7, r0
 801304c:	2800      	cmp	r0, #0
 801304e:	d0bc      	beq.n	8012fca <setvbuf+0xa6>
 8013050:	89a3      	ldrh	r3, [r4, #12]
 8013052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013056:	81a3      	strh	r3, [r4, #12]
 8013058:	464d      	mov	r5, r9
 801305a:	e7d3      	b.n	8013004 <setvbuf+0xe0>
 801305c:	2000      	movs	r0, #0
 801305e:	e7b6      	b.n	8012fce <setvbuf+0xaa>
 8013060:	46a9      	mov	r9, r5
 8013062:	e7f5      	b.n	8013050 <setvbuf+0x12c>
 8013064:	60a0      	str	r0, [r4, #8]
 8013066:	e7be      	b.n	8012fe6 <setvbuf+0xc2>
 8013068:	f04f 30ff 	mov.w	r0, #4294967295
 801306c:	e7bb      	b.n	8012fe6 <setvbuf+0xc2>
 801306e:	bf00      	nop
 8013070:	20000084 	.word	0x20000084
 8013074:	080145d0 	.word	0x080145d0
 8013078:	080145f0 	.word	0x080145f0
 801307c:	080145b0 	.word	0x080145b0

08013080 <__swbuf_r>:
 8013080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013082:	460e      	mov	r6, r1
 8013084:	4614      	mov	r4, r2
 8013086:	4605      	mov	r5, r0
 8013088:	b118      	cbz	r0, 8013092 <__swbuf_r+0x12>
 801308a:	6983      	ldr	r3, [r0, #24]
 801308c:	b90b      	cbnz	r3, 8013092 <__swbuf_r+0x12>
 801308e:	f000 f9a7 	bl	80133e0 <__sinit>
 8013092:	4b21      	ldr	r3, [pc, #132]	; (8013118 <__swbuf_r+0x98>)
 8013094:	429c      	cmp	r4, r3
 8013096:	d12a      	bne.n	80130ee <__swbuf_r+0x6e>
 8013098:	686c      	ldr	r4, [r5, #4]
 801309a:	69a3      	ldr	r3, [r4, #24]
 801309c:	60a3      	str	r3, [r4, #8]
 801309e:	89a3      	ldrh	r3, [r4, #12]
 80130a0:	071a      	lsls	r2, r3, #28
 80130a2:	d52e      	bpl.n	8013102 <__swbuf_r+0x82>
 80130a4:	6923      	ldr	r3, [r4, #16]
 80130a6:	b363      	cbz	r3, 8013102 <__swbuf_r+0x82>
 80130a8:	6923      	ldr	r3, [r4, #16]
 80130aa:	6820      	ldr	r0, [r4, #0]
 80130ac:	1ac0      	subs	r0, r0, r3
 80130ae:	6963      	ldr	r3, [r4, #20]
 80130b0:	b2f6      	uxtb	r6, r6
 80130b2:	4283      	cmp	r3, r0
 80130b4:	4637      	mov	r7, r6
 80130b6:	dc04      	bgt.n	80130c2 <__swbuf_r+0x42>
 80130b8:	4621      	mov	r1, r4
 80130ba:	4628      	mov	r0, r5
 80130bc:	f000 f926 	bl	801330c <_fflush_r>
 80130c0:	bb28      	cbnz	r0, 801310e <__swbuf_r+0x8e>
 80130c2:	68a3      	ldr	r3, [r4, #8]
 80130c4:	3b01      	subs	r3, #1
 80130c6:	60a3      	str	r3, [r4, #8]
 80130c8:	6823      	ldr	r3, [r4, #0]
 80130ca:	1c5a      	adds	r2, r3, #1
 80130cc:	6022      	str	r2, [r4, #0]
 80130ce:	701e      	strb	r6, [r3, #0]
 80130d0:	6963      	ldr	r3, [r4, #20]
 80130d2:	3001      	adds	r0, #1
 80130d4:	4283      	cmp	r3, r0
 80130d6:	d004      	beq.n	80130e2 <__swbuf_r+0x62>
 80130d8:	89a3      	ldrh	r3, [r4, #12]
 80130da:	07db      	lsls	r3, r3, #31
 80130dc:	d519      	bpl.n	8013112 <__swbuf_r+0x92>
 80130de:	2e0a      	cmp	r6, #10
 80130e0:	d117      	bne.n	8013112 <__swbuf_r+0x92>
 80130e2:	4621      	mov	r1, r4
 80130e4:	4628      	mov	r0, r5
 80130e6:	f000 f911 	bl	801330c <_fflush_r>
 80130ea:	b190      	cbz	r0, 8013112 <__swbuf_r+0x92>
 80130ec:	e00f      	b.n	801310e <__swbuf_r+0x8e>
 80130ee:	4b0b      	ldr	r3, [pc, #44]	; (801311c <__swbuf_r+0x9c>)
 80130f0:	429c      	cmp	r4, r3
 80130f2:	d101      	bne.n	80130f8 <__swbuf_r+0x78>
 80130f4:	68ac      	ldr	r4, [r5, #8]
 80130f6:	e7d0      	b.n	801309a <__swbuf_r+0x1a>
 80130f8:	4b09      	ldr	r3, [pc, #36]	; (8013120 <__swbuf_r+0xa0>)
 80130fa:	429c      	cmp	r4, r3
 80130fc:	bf08      	it	eq
 80130fe:	68ec      	ldreq	r4, [r5, #12]
 8013100:	e7cb      	b.n	801309a <__swbuf_r+0x1a>
 8013102:	4621      	mov	r1, r4
 8013104:	4628      	mov	r0, r5
 8013106:	f000 f80d 	bl	8013124 <__swsetup_r>
 801310a:	2800      	cmp	r0, #0
 801310c:	d0cc      	beq.n	80130a8 <__swbuf_r+0x28>
 801310e:	f04f 37ff 	mov.w	r7, #4294967295
 8013112:	4638      	mov	r0, r7
 8013114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013116:	bf00      	nop
 8013118:	080145d0 	.word	0x080145d0
 801311c:	080145f0 	.word	0x080145f0
 8013120:	080145b0 	.word	0x080145b0

08013124 <__swsetup_r>:
 8013124:	4b32      	ldr	r3, [pc, #200]	; (80131f0 <__swsetup_r+0xcc>)
 8013126:	b570      	push	{r4, r5, r6, lr}
 8013128:	681d      	ldr	r5, [r3, #0]
 801312a:	4606      	mov	r6, r0
 801312c:	460c      	mov	r4, r1
 801312e:	b125      	cbz	r5, 801313a <__swsetup_r+0x16>
 8013130:	69ab      	ldr	r3, [r5, #24]
 8013132:	b913      	cbnz	r3, 801313a <__swsetup_r+0x16>
 8013134:	4628      	mov	r0, r5
 8013136:	f000 f953 	bl	80133e0 <__sinit>
 801313a:	4b2e      	ldr	r3, [pc, #184]	; (80131f4 <__swsetup_r+0xd0>)
 801313c:	429c      	cmp	r4, r3
 801313e:	d10f      	bne.n	8013160 <__swsetup_r+0x3c>
 8013140:	686c      	ldr	r4, [r5, #4]
 8013142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013146:	b29a      	uxth	r2, r3
 8013148:	0715      	lsls	r5, r2, #28
 801314a:	d42c      	bmi.n	80131a6 <__swsetup_r+0x82>
 801314c:	06d0      	lsls	r0, r2, #27
 801314e:	d411      	bmi.n	8013174 <__swsetup_r+0x50>
 8013150:	2209      	movs	r2, #9
 8013152:	6032      	str	r2, [r6, #0]
 8013154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013158:	81a3      	strh	r3, [r4, #12]
 801315a:	f04f 30ff 	mov.w	r0, #4294967295
 801315e:	e03e      	b.n	80131de <__swsetup_r+0xba>
 8013160:	4b25      	ldr	r3, [pc, #148]	; (80131f8 <__swsetup_r+0xd4>)
 8013162:	429c      	cmp	r4, r3
 8013164:	d101      	bne.n	801316a <__swsetup_r+0x46>
 8013166:	68ac      	ldr	r4, [r5, #8]
 8013168:	e7eb      	b.n	8013142 <__swsetup_r+0x1e>
 801316a:	4b24      	ldr	r3, [pc, #144]	; (80131fc <__swsetup_r+0xd8>)
 801316c:	429c      	cmp	r4, r3
 801316e:	bf08      	it	eq
 8013170:	68ec      	ldreq	r4, [r5, #12]
 8013172:	e7e6      	b.n	8013142 <__swsetup_r+0x1e>
 8013174:	0751      	lsls	r1, r2, #29
 8013176:	d512      	bpl.n	801319e <__swsetup_r+0x7a>
 8013178:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801317a:	b141      	cbz	r1, 801318e <__swsetup_r+0x6a>
 801317c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013180:	4299      	cmp	r1, r3
 8013182:	d002      	beq.n	801318a <__swsetup_r+0x66>
 8013184:	4630      	mov	r0, r6
 8013186:	f000 fa21 	bl	80135cc <_free_r>
 801318a:	2300      	movs	r3, #0
 801318c:	6363      	str	r3, [r4, #52]	; 0x34
 801318e:	89a3      	ldrh	r3, [r4, #12]
 8013190:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013194:	81a3      	strh	r3, [r4, #12]
 8013196:	2300      	movs	r3, #0
 8013198:	6063      	str	r3, [r4, #4]
 801319a:	6923      	ldr	r3, [r4, #16]
 801319c:	6023      	str	r3, [r4, #0]
 801319e:	89a3      	ldrh	r3, [r4, #12]
 80131a0:	f043 0308 	orr.w	r3, r3, #8
 80131a4:	81a3      	strh	r3, [r4, #12]
 80131a6:	6923      	ldr	r3, [r4, #16]
 80131a8:	b94b      	cbnz	r3, 80131be <__swsetup_r+0x9a>
 80131aa:	89a3      	ldrh	r3, [r4, #12]
 80131ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80131b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80131b4:	d003      	beq.n	80131be <__swsetup_r+0x9a>
 80131b6:	4621      	mov	r1, r4
 80131b8:	4630      	mov	r0, r6
 80131ba:	f000 f9bf 	bl	801353c <__smakebuf_r>
 80131be:	89a2      	ldrh	r2, [r4, #12]
 80131c0:	f012 0301 	ands.w	r3, r2, #1
 80131c4:	d00c      	beq.n	80131e0 <__swsetup_r+0xbc>
 80131c6:	2300      	movs	r3, #0
 80131c8:	60a3      	str	r3, [r4, #8]
 80131ca:	6963      	ldr	r3, [r4, #20]
 80131cc:	425b      	negs	r3, r3
 80131ce:	61a3      	str	r3, [r4, #24]
 80131d0:	6923      	ldr	r3, [r4, #16]
 80131d2:	b953      	cbnz	r3, 80131ea <__swsetup_r+0xc6>
 80131d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80131d8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80131dc:	d1ba      	bne.n	8013154 <__swsetup_r+0x30>
 80131de:	bd70      	pop	{r4, r5, r6, pc}
 80131e0:	0792      	lsls	r2, r2, #30
 80131e2:	bf58      	it	pl
 80131e4:	6963      	ldrpl	r3, [r4, #20]
 80131e6:	60a3      	str	r3, [r4, #8]
 80131e8:	e7f2      	b.n	80131d0 <__swsetup_r+0xac>
 80131ea:	2000      	movs	r0, #0
 80131ec:	e7f7      	b.n	80131de <__swsetup_r+0xba>
 80131ee:	bf00      	nop
 80131f0:	20000084 	.word	0x20000084
 80131f4:	080145d0 	.word	0x080145d0
 80131f8:	080145f0 	.word	0x080145f0
 80131fc:	080145b0 	.word	0x080145b0

08013200 <__sflush_r>:
 8013200:	898a      	ldrh	r2, [r1, #12]
 8013202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013206:	4605      	mov	r5, r0
 8013208:	0710      	lsls	r0, r2, #28
 801320a:	460c      	mov	r4, r1
 801320c:	d458      	bmi.n	80132c0 <__sflush_r+0xc0>
 801320e:	684b      	ldr	r3, [r1, #4]
 8013210:	2b00      	cmp	r3, #0
 8013212:	dc05      	bgt.n	8013220 <__sflush_r+0x20>
 8013214:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013216:	2b00      	cmp	r3, #0
 8013218:	dc02      	bgt.n	8013220 <__sflush_r+0x20>
 801321a:	2000      	movs	r0, #0
 801321c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013220:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013222:	2e00      	cmp	r6, #0
 8013224:	d0f9      	beq.n	801321a <__sflush_r+0x1a>
 8013226:	2300      	movs	r3, #0
 8013228:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801322c:	682f      	ldr	r7, [r5, #0]
 801322e:	6a21      	ldr	r1, [r4, #32]
 8013230:	602b      	str	r3, [r5, #0]
 8013232:	d032      	beq.n	801329a <__sflush_r+0x9a>
 8013234:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013236:	89a3      	ldrh	r3, [r4, #12]
 8013238:	075a      	lsls	r2, r3, #29
 801323a:	d505      	bpl.n	8013248 <__sflush_r+0x48>
 801323c:	6863      	ldr	r3, [r4, #4]
 801323e:	1ac0      	subs	r0, r0, r3
 8013240:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013242:	b10b      	cbz	r3, 8013248 <__sflush_r+0x48>
 8013244:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013246:	1ac0      	subs	r0, r0, r3
 8013248:	2300      	movs	r3, #0
 801324a:	4602      	mov	r2, r0
 801324c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801324e:	6a21      	ldr	r1, [r4, #32]
 8013250:	4628      	mov	r0, r5
 8013252:	47b0      	blx	r6
 8013254:	1c43      	adds	r3, r0, #1
 8013256:	89a3      	ldrh	r3, [r4, #12]
 8013258:	d106      	bne.n	8013268 <__sflush_r+0x68>
 801325a:	6829      	ldr	r1, [r5, #0]
 801325c:	291d      	cmp	r1, #29
 801325e:	d848      	bhi.n	80132f2 <__sflush_r+0xf2>
 8013260:	4a29      	ldr	r2, [pc, #164]	; (8013308 <__sflush_r+0x108>)
 8013262:	40ca      	lsrs	r2, r1
 8013264:	07d6      	lsls	r6, r2, #31
 8013266:	d544      	bpl.n	80132f2 <__sflush_r+0xf2>
 8013268:	2200      	movs	r2, #0
 801326a:	6062      	str	r2, [r4, #4]
 801326c:	04d9      	lsls	r1, r3, #19
 801326e:	6922      	ldr	r2, [r4, #16]
 8013270:	6022      	str	r2, [r4, #0]
 8013272:	d504      	bpl.n	801327e <__sflush_r+0x7e>
 8013274:	1c42      	adds	r2, r0, #1
 8013276:	d101      	bne.n	801327c <__sflush_r+0x7c>
 8013278:	682b      	ldr	r3, [r5, #0]
 801327a:	b903      	cbnz	r3, 801327e <__sflush_r+0x7e>
 801327c:	6560      	str	r0, [r4, #84]	; 0x54
 801327e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013280:	602f      	str	r7, [r5, #0]
 8013282:	2900      	cmp	r1, #0
 8013284:	d0c9      	beq.n	801321a <__sflush_r+0x1a>
 8013286:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801328a:	4299      	cmp	r1, r3
 801328c:	d002      	beq.n	8013294 <__sflush_r+0x94>
 801328e:	4628      	mov	r0, r5
 8013290:	f000 f99c 	bl	80135cc <_free_r>
 8013294:	2000      	movs	r0, #0
 8013296:	6360      	str	r0, [r4, #52]	; 0x34
 8013298:	e7c0      	b.n	801321c <__sflush_r+0x1c>
 801329a:	2301      	movs	r3, #1
 801329c:	4628      	mov	r0, r5
 801329e:	47b0      	blx	r6
 80132a0:	1c41      	adds	r1, r0, #1
 80132a2:	d1c8      	bne.n	8013236 <__sflush_r+0x36>
 80132a4:	682b      	ldr	r3, [r5, #0]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d0c5      	beq.n	8013236 <__sflush_r+0x36>
 80132aa:	2b1d      	cmp	r3, #29
 80132ac:	d001      	beq.n	80132b2 <__sflush_r+0xb2>
 80132ae:	2b16      	cmp	r3, #22
 80132b0:	d101      	bne.n	80132b6 <__sflush_r+0xb6>
 80132b2:	602f      	str	r7, [r5, #0]
 80132b4:	e7b1      	b.n	801321a <__sflush_r+0x1a>
 80132b6:	89a3      	ldrh	r3, [r4, #12]
 80132b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80132bc:	81a3      	strh	r3, [r4, #12]
 80132be:	e7ad      	b.n	801321c <__sflush_r+0x1c>
 80132c0:	690f      	ldr	r7, [r1, #16]
 80132c2:	2f00      	cmp	r7, #0
 80132c4:	d0a9      	beq.n	801321a <__sflush_r+0x1a>
 80132c6:	0793      	lsls	r3, r2, #30
 80132c8:	680e      	ldr	r6, [r1, #0]
 80132ca:	bf08      	it	eq
 80132cc:	694b      	ldreq	r3, [r1, #20]
 80132ce:	600f      	str	r7, [r1, #0]
 80132d0:	bf18      	it	ne
 80132d2:	2300      	movne	r3, #0
 80132d4:	eba6 0807 	sub.w	r8, r6, r7
 80132d8:	608b      	str	r3, [r1, #8]
 80132da:	f1b8 0f00 	cmp.w	r8, #0
 80132de:	dd9c      	ble.n	801321a <__sflush_r+0x1a>
 80132e0:	4643      	mov	r3, r8
 80132e2:	463a      	mov	r2, r7
 80132e4:	6a21      	ldr	r1, [r4, #32]
 80132e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80132e8:	4628      	mov	r0, r5
 80132ea:	47b0      	blx	r6
 80132ec:	2800      	cmp	r0, #0
 80132ee:	dc06      	bgt.n	80132fe <__sflush_r+0xfe>
 80132f0:	89a3      	ldrh	r3, [r4, #12]
 80132f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80132f6:	81a3      	strh	r3, [r4, #12]
 80132f8:	f04f 30ff 	mov.w	r0, #4294967295
 80132fc:	e78e      	b.n	801321c <__sflush_r+0x1c>
 80132fe:	4407      	add	r7, r0
 8013300:	eba8 0800 	sub.w	r8, r8, r0
 8013304:	e7e9      	b.n	80132da <__sflush_r+0xda>
 8013306:	bf00      	nop
 8013308:	20400001 	.word	0x20400001

0801330c <_fflush_r>:
 801330c:	b538      	push	{r3, r4, r5, lr}
 801330e:	690b      	ldr	r3, [r1, #16]
 8013310:	4605      	mov	r5, r0
 8013312:	460c      	mov	r4, r1
 8013314:	b1db      	cbz	r3, 801334e <_fflush_r+0x42>
 8013316:	b118      	cbz	r0, 8013320 <_fflush_r+0x14>
 8013318:	6983      	ldr	r3, [r0, #24]
 801331a:	b90b      	cbnz	r3, 8013320 <_fflush_r+0x14>
 801331c:	f000 f860 	bl	80133e0 <__sinit>
 8013320:	4b0c      	ldr	r3, [pc, #48]	; (8013354 <_fflush_r+0x48>)
 8013322:	429c      	cmp	r4, r3
 8013324:	d109      	bne.n	801333a <_fflush_r+0x2e>
 8013326:	686c      	ldr	r4, [r5, #4]
 8013328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801332c:	b17b      	cbz	r3, 801334e <_fflush_r+0x42>
 801332e:	4621      	mov	r1, r4
 8013330:	4628      	mov	r0, r5
 8013332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013336:	f7ff bf63 	b.w	8013200 <__sflush_r>
 801333a:	4b07      	ldr	r3, [pc, #28]	; (8013358 <_fflush_r+0x4c>)
 801333c:	429c      	cmp	r4, r3
 801333e:	d101      	bne.n	8013344 <_fflush_r+0x38>
 8013340:	68ac      	ldr	r4, [r5, #8]
 8013342:	e7f1      	b.n	8013328 <_fflush_r+0x1c>
 8013344:	4b05      	ldr	r3, [pc, #20]	; (801335c <_fflush_r+0x50>)
 8013346:	429c      	cmp	r4, r3
 8013348:	bf08      	it	eq
 801334a:	68ec      	ldreq	r4, [r5, #12]
 801334c:	e7ec      	b.n	8013328 <_fflush_r+0x1c>
 801334e:	2000      	movs	r0, #0
 8013350:	bd38      	pop	{r3, r4, r5, pc}
 8013352:	bf00      	nop
 8013354:	080145d0 	.word	0x080145d0
 8013358:	080145f0 	.word	0x080145f0
 801335c:	080145b0 	.word	0x080145b0

08013360 <std>:
 8013360:	2300      	movs	r3, #0
 8013362:	b510      	push	{r4, lr}
 8013364:	4604      	mov	r4, r0
 8013366:	e9c0 3300 	strd	r3, r3, [r0]
 801336a:	6083      	str	r3, [r0, #8]
 801336c:	8181      	strh	r1, [r0, #12]
 801336e:	6643      	str	r3, [r0, #100]	; 0x64
 8013370:	81c2      	strh	r2, [r0, #14]
 8013372:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013376:	6183      	str	r3, [r0, #24]
 8013378:	4619      	mov	r1, r3
 801337a:	2208      	movs	r2, #8
 801337c:	305c      	adds	r0, #92	; 0x5c
 801337e:	f7ff fd45 	bl	8012e0c <memset>
 8013382:	4b05      	ldr	r3, [pc, #20]	; (8013398 <std+0x38>)
 8013384:	6263      	str	r3, [r4, #36]	; 0x24
 8013386:	4b05      	ldr	r3, [pc, #20]	; (801339c <std+0x3c>)
 8013388:	62a3      	str	r3, [r4, #40]	; 0x28
 801338a:	4b05      	ldr	r3, [pc, #20]	; (80133a0 <std+0x40>)
 801338c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801338e:	4b05      	ldr	r3, [pc, #20]	; (80133a4 <std+0x44>)
 8013390:	6224      	str	r4, [r4, #32]
 8013392:	6323      	str	r3, [r4, #48]	; 0x30
 8013394:	bd10      	pop	{r4, pc}
 8013396:	bf00      	nop
 8013398:	08013ccd 	.word	0x08013ccd
 801339c:	08013cef 	.word	0x08013cef
 80133a0:	08013d27 	.word	0x08013d27
 80133a4:	08013d4b 	.word	0x08013d4b

080133a8 <_cleanup_r>:
 80133a8:	4901      	ldr	r1, [pc, #4]	; (80133b0 <_cleanup_r+0x8>)
 80133aa:	f000 b885 	b.w	80134b8 <_fwalk_reent>
 80133ae:	bf00      	nop
 80133b0:	0801330d 	.word	0x0801330d

080133b4 <__sfmoreglue>:
 80133b4:	b570      	push	{r4, r5, r6, lr}
 80133b6:	1e4a      	subs	r2, r1, #1
 80133b8:	2568      	movs	r5, #104	; 0x68
 80133ba:	4355      	muls	r5, r2
 80133bc:	460e      	mov	r6, r1
 80133be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80133c2:	f000 f951 	bl	8013668 <_malloc_r>
 80133c6:	4604      	mov	r4, r0
 80133c8:	b140      	cbz	r0, 80133dc <__sfmoreglue+0x28>
 80133ca:	2100      	movs	r1, #0
 80133cc:	e9c0 1600 	strd	r1, r6, [r0]
 80133d0:	300c      	adds	r0, #12
 80133d2:	60a0      	str	r0, [r4, #8]
 80133d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80133d8:	f7ff fd18 	bl	8012e0c <memset>
 80133dc:	4620      	mov	r0, r4
 80133de:	bd70      	pop	{r4, r5, r6, pc}

080133e0 <__sinit>:
 80133e0:	6983      	ldr	r3, [r0, #24]
 80133e2:	b510      	push	{r4, lr}
 80133e4:	4604      	mov	r4, r0
 80133e6:	bb33      	cbnz	r3, 8013436 <__sinit+0x56>
 80133e8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80133ec:	6503      	str	r3, [r0, #80]	; 0x50
 80133ee:	4b12      	ldr	r3, [pc, #72]	; (8013438 <__sinit+0x58>)
 80133f0:	4a12      	ldr	r2, [pc, #72]	; (801343c <__sinit+0x5c>)
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	6282      	str	r2, [r0, #40]	; 0x28
 80133f6:	4298      	cmp	r0, r3
 80133f8:	bf04      	itt	eq
 80133fa:	2301      	moveq	r3, #1
 80133fc:	6183      	streq	r3, [r0, #24]
 80133fe:	f000 f81f 	bl	8013440 <__sfp>
 8013402:	6060      	str	r0, [r4, #4]
 8013404:	4620      	mov	r0, r4
 8013406:	f000 f81b 	bl	8013440 <__sfp>
 801340a:	60a0      	str	r0, [r4, #8]
 801340c:	4620      	mov	r0, r4
 801340e:	f000 f817 	bl	8013440 <__sfp>
 8013412:	2200      	movs	r2, #0
 8013414:	60e0      	str	r0, [r4, #12]
 8013416:	2104      	movs	r1, #4
 8013418:	6860      	ldr	r0, [r4, #4]
 801341a:	f7ff ffa1 	bl	8013360 <std>
 801341e:	2201      	movs	r2, #1
 8013420:	2109      	movs	r1, #9
 8013422:	68a0      	ldr	r0, [r4, #8]
 8013424:	f7ff ff9c 	bl	8013360 <std>
 8013428:	2202      	movs	r2, #2
 801342a:	2112      	movs	r1, #18
 801342c:	68e0      	ldr	r0, [r4, #12]
 801342e:	f7ff ff97 	bl	8013360 <std>
 8013432:	2301      	movs	r3, #1
 8013434:	61a3      	str	r3, [r4, #24]
 8013436:	bd10      	pop	{r4, pc}
 8013438:	080145ac 	.word	0x080145ac
 801343c:	080133a9 	.word	0x080133a9

08013440 <__sfp>:
 8013440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013442:	4b1b      	ldr	r3, [pc, #108]	; (80134b0 <__sfp+0x70>)
 8013444:	681e      	ldr	r6, [r3, #0]
 8013446:	69b3      	ldr	r3, [r6, #24]
 8013448:	4607      	mov	r7, r0
 801344a:	b913      	cbnz	r3, 8013452 <__sfp+0x12>
 801344c:	4630      	mov	r0, r6
 801344e:	f7ff ffc7 	bl	80133e0 <__sinit>
 8013452:	3648      	adds	r6, #72	; 0x48
 8013454:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013458:	3b01      	subs	r3, #1
 801345a:	d503      	bpl.n	8013464 <__sfp+0x24>
 801345c:	6833      	ldr	r3, [r6, #0]
 801345e:	b133      	cbz	r3, 801346e <__sfp+0x2e>
 8013460:	6836      	ldr	r6, [r6, #0]
 8013462:	e7f7      	b.n	8013454 <__sfp+0x14>
 8013464:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013468:	b16d      	cbz	r5, 8013486 <__sfp+0x46>
 801346a:	3468      	adds	r4, #104	; 0x68
 801346c:	e7f4      	b.n	8013458 <__sfp+0x18>
 801346e:	2104      	movs	r1, #4
 8013470:	4638      	mov	r0, r7
 8013472:	f7ff ff9f 	bl	80133b4 <__sfmoreglue>
 8013476:	6030      	str	r0, [r6, #0]
 8013478:	2800      	cmp	r0, #0
 801347a:	d1f1      	bne.n	8013460 <__sfp+0x20>
 801347c:	230c      	movs	r3, #12
 801347e:	603b      	str	r3, [r7, #0]
 8013480:	4604      	mov	r4, r0
 8013482:	4620      	mov	r0, r4
 8013484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013486:	4b0b      	ldr	r3, [pc, #44]	; (80134b4 <__sfp+0x74>)
 8013488:	6665      	str	r5, [r4, #100]	; 0x64
 801348a:	e9c4 5500 	strd	r5, r5, [r4]
 801348e:	60a5      	str	r5, [r4, #8]
 8013490:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8013494:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013498:	2208      	movs	r2, #8
 801349a:	4629      	mov	r1, r5
 801349c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80134a0:	f7ff fcb4 	bl	8012e0c <memset>
 80134a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80134a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80134ac:	e7e9      	b.n	8013482 <__sfp+0x42>
 80134ae:	bf00      	nop
 80134b0:	080145ac 	.word	0x080145ac
 80134b4:	ffff0001 	.word	0xffff0001

080134b8 <_fwalk_reent>:
 80134b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80134bc:	4680      	mov	r8, r0
 80134be:	4689      	mov	r9, r1
 80134c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80134c4:	2600      	movs	r6, #0
 80134c6:	b914      	cbnz	r4, 80134ce <_fwalk_reent+0x16>
 80134c8:	4630      	mov	r0, r6
 80134ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134ce:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80134d2:	3f01      	subs	r7, #1
 80134d4:	d501      	bpl.n	80134da <_fwalk_reent+0x22>
 80134d6:	6824      	ldr	r4, [r4, #0]
 80134d8:	e7f5      	b.n	80134c6 <_fwalk_reent+0xe>
 80134da:	89ab      	ldrh	r3, [r5, #12]
 80134dc:	2b01      	cmp	r3, #1
 80134de:	d907      	bls.n	80134f0 <_fwalk_reent+0x38>
 80134e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80134e4:	3301      	adds	r3, #1
 80134e6:	d003      	beq.n	80134f0 <_fwalk_reent+0x38>
 80134e8:	4629      	mov	r1, r5
 80134ea:	4640      	mov	r0, r8
 80134ec:	47c8      	blx	r9
 80134ee:	4306      	orrs	r6, r0
 80134f0:	3568      	adds	r5, #104	; 0x68
 80134f2:	e7ee      	b.n	80134d2 <_fwalk_reent+0x1a>

080134f4 <__swhatbuf_r>:
 80134f4:	b570      	push	{r4, r5, r6, lr}
 80134f6:	460e      	mov	r6, r1
 80134f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134fc:	2900      	cmp	r1, #0
 80134fe:	b096      	sub	sp, #88	; 0x58
 8013500:	4614      	mov	r4, r2
 8013502:	461d      	mov	r5, r3
 8013504:	da07      	bge.n	8013516 <__swhatbuf_r+0x22>
 8013506:	2300      	movs	r3, #0
 8013508:	602b      	str	r3, [r5, #0]
 801350a:	89b3      	ldrh	r3, [r6, #12]
 801350c:	061a      	lsls	r2, r3, #24
 801350e:	d410      	bmi.n	8013532 <__swhatbuf_r+0x3e>
 8013510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013514:	e00e      	b.n	8013534 <__swhatbuf_r+0x40>
 8013516:	466a      	mov	r2, sp
 8013518:	f000 fc3e 	bl	8013d98 <_fstat_r>
 801351c:	2800      	cmp	r0, #0
 801351e:	dbf2      	blt.n	8013506 <__swhatbuf_r+0x12>
 8013520:	9a01      	ldr	r2, [sp, #4]
 8013522:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013526:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801352a:	425a      	negs	r2, r3
 801352c:	415a      	adcs	r2, r3
 801352e:	602a      	str	r2, [r5, #0]
 8013530:	e7ee      	b.n	8013510 <__swhatbuf_r+0x1c>
 8013532:	2340      	movs	r3, #64	; 0x40
 8013534:	2000      	movs	r0, #0
 8013536:	6023      	str	r3, [r4, #0]
 8013538:	b016      	add	sp, #88	; 0x58
 801353a:	bd70      	pop	{r4, r5, r6, pc}

0801353c <__smakebuf_r>:
 801353c:	898b      	ldrh	r3, [r1, #12]
 801353e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013540:	079d      	lsls	r5, r3, #30
 8013542:	4606      	mov	r6, r0
 8013544:	460c      	mov	r4, r1
 8013546:	d507      	bpl.n	8013558 <__smakebuf_r+0x1c>
 8013548:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801354c:	6023      	str	r3, [r4, #0]
 801354e:	6123      	str	r3, [r4, #16]
 8013550:	2301      	movs	r3, #1
 8013552:	6163      	str	r3, [r4, #20]
 8013554:	b002      	add	sp, #8
 8013556:	bd70      	pop	{r4, r5, r6, pc}
 8013558:	ab01      	add	r3, sp, #4
 801355a:	466a      	mov	r2, sp
 801355c:	f7ff ffca 	bl	80134f4 <__swhatbuf_r>
 8013560:	9900      	ldr	r1, [sp, #0]
 8013562:	4605      	mov	r5, r0
 8013564:	4630      	mov	r0, r6
 8013566:	f000 f87f 	bl	8013668 <_malloc_r>
 801356a:	b948      	cbnz	r0, 8013580 <__smakebuf_r+0x44>
 801356c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013570:	059a      	lsls	r2, r3, #22
 8013572:	d4ef      	bmi.n	8013554 <__smakebuf_r+0x18>
 8013574:	f023 0303 	bic.w	r3, r3, #3
 8013578:	f043 0302 	orr.w	r3, r3, #2
 801357c:	81a3      	strh	r3, [r4, #12]
 801357e:	e7e3      	b.n	8013548 <__smakebuf_r+0xc>
 8013580:	4b0d      	ldr	r3, [pc, #52]	; (80135b8 <__smakebuf_r+0x7c>)
 8013582:	62b3      	str	r3, [r6, #40]	; 0x28
 8013584:	89a3      	ldrh	r3, [r4, #12]
 8013586:	6020      	str	r0, [r4, #0]
 8013588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801358c:	81a3      	strh	r3, [r4, #12]
 801358e:	9b00      	ldr	r3, [sp, #0]
 8013590:	6163      	str	r3, [r4, #20]
 8013592:	9b01      	ldr	r3, [sp, #4]
 8013594:	6120      	str	r0, [r4, #16]
 8013596:	b15b      	cbz	r3, 80135b0 <__smakebuf_r+0x74>
 8013598:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801359c:	4630      	mov	r0, r6
 801359e:	f000 fc0d 	bl	8013dbc <_isatty_r>
 80135a2:	b128      	cbz	r0, 80135b0 <__smakebuf_r+0x74>
 80135a4:	89a3      	ldrh	r3, [r4, #12]
 80135a6:	f023 0303 	bic.w	r3, r3, #3
 80135aa:	f043 0301 	orr.w	r3, r3, #1
 80135ae:	81a3      	strh	r3, [r4, #12]
 80135b0:	89a3      	ldrh	r3, [r4, #12]
 80135b2:	431d      	orrs	r5, r3
 80135b4:	81a5      	strh	r5, [r4, #12]
 80135b6:	e7cd      	b.n	8013554 <__smakebuf_r+0x18>
 80135b8:	080133a9 	.word	0x080133a9

080135bc <malloc>:
 80135bc:	4b02      	ldr	r3, [pc, #8]	; (80135c8 <malloc+0xc>)
 80135be:	4601      	mov	r1, r0
 80135c0:	6818      	ldr	r0, [r3, #0]
 80135c2:	f000 b851 	b.w	8013668 <_malloc_r>
 80135c6:	bf00      	nop
 80135c8:	20000084 	.word	0x20000084

080135cc <_free_r>:
 80135cc:	b538      	push	{r3, r4, r5, lr}
 80135ce:	4605      	mov	r5, r0
 80135d0:	2900      	cmp	r1, #0
 80135d2:	d045      	beq.n	8013660 <_free_r+0x94>
 80135d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80135d8:	1f0c      	subs	r4, r1, #4
 80135da:	2b00      	cmp	r3, #0
 80135dc:	bfb8      	it	lt
 80135de:	18e4      	addlt	r4, r4, r3
 80135e0:	f000 fc0e 	bl	8013e00 <__malloc_lock>
 80135e4:	4a1f      	ldr	r2, [pc, #124]	; (8013664 <_free_r+0x98>)
 80135e6:	6813      	ldr	r3, [r2, #0]
 80135e8:	4610      	mov	r0, r2
 80135ea:	b933      	cbnz	r3, 80135fa <_free_r+0x2e>
 80135ec:	6063      	str	r3, [r4, #4]
 80135ee:	6014      	str	r4, [r2, #0]
 80135f0:	4628      	mov	r0, r5
 80135f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80135f6:	f000 bc04 	b.w	8013e02 <__malloc_unlock>
 80135fa:	42a3      	cmp	r3, r4
 80135fc:	d90c      	bls.n	8013618 <_free_r+0x4c>
 80135fe:	6821      	ldr	r1, [r4, #0]
 8013600:	1862      	adds	r2, r4, r1
 8013602:	4293      	cmp	r3, r2
 8013604:	bf04      	itt	eq
 8013606:	681a      	ldreq	r2, [r3, #0]
 8013608:	685b      	ldreq	r3, [r3, #4]
 801360a:	6063      	str	r3, [r4, #4]
 801360c:	bf04      	itt	eq
 801360e:	1852      	addeq	r2, r2, r1
 8013610:	6022      	streq	r2, [r4, #0]
 8013612:	6004      	str	r4, [r0, #0]
 8013614:	e7ec      	b.n	80135f0 <_free_r+0x24>
 8013616:	4613      	mov	r3, r2
 8013618:	685a      	ldr	r2, [r3, #4]
 801361a:	b10a      	cbz	r2, 8013620 <_free_r+0x54>
 801361c:	42a2      	cmp	r2, r4
 801361e:	d9fa      	bls.n	8013616 <_free_r+0x4a>
 8013620:	6819      	ldr	r1, [r3, #0]
 8013622:	1858      	adds	r0, r3, r1
 8013624:	42a0      	cmp	r0, r4
 8013626:	d10b      	bne.n	8013640 <_free_r+0x74>
 8013628:	6820      	ldr	r0, [r4, #0]
 801362a:	4401      	add	r1, r0
 801362c:	1858      	adds	r0, r3, r1
 801362e:	4282      	cmp	r2, r0
 8013630:	6019      	str	r1, [r3, #0]
 8013632:	d1dd      	bne.n	80135f0 <_free_r+0x24>
 8013634:	6810      	ldr	r0, [r2, #0]
 8013636:	6852      	ldr	r2, [r2, #4]
 8013638:	605a      	str	r2, [r3, #4]
 801363a:	4401      	add	r1, r0
 801363c:	6019      	str	r1, [r3, #0]
 801363e:	e7d7      	b.n	80135f0 <_free_r+0x24>
 8013640:	d902      	bls.n	8013648 <_free_r+0x7c>
 8013642:	230c      	movs	r3, #12
 8013644:	602b      	str	r3, [r5, #0]
 8013646:	e7d3      	b.n	80135f0 <_free_r+0x24>
 8013648:	6820      	ldr	r0, [r4, #0]
 801364a:	1821      	adds	r1, r4, r0
 801364c:	428a      	cmp	r2, r1
 801364e:	bf04      	itt	eq
 8013650:	6811      	ldreq	r1, [r2, #0]
 8013652:	6852      	ldreq	r2, [r2, #4]
 8013654:	6062      	str	r2, [r4, #4]
 8013656:	bf04      	itt	eq
 8013658:	1809      	addeq	r1, r1, r0
 801365a:	6021      	streq	r1, [r4, #0]
 801365c:	605c      	str	r4, [r3, #4]
 801365e:	e7c7      	b.n	80135f0 <_free_r+0x24>
 8013660:	bd38      	pop	{r3, r4, r5, pc}
 8013662:	bf00      	nop
 8013664:	20000118 	.word	0x20000118

08013668 <_malloc_r>:
 8013668:	b570      	push	{r4, r5, r6, lr}
 801366a:	1ccd      	adds	r5, r1, #3
 801366c:	f025 0503 	bic.w	r5, r5, #3
 8013670:	3508      	adds	r5, #8
 8013672:	2d0c      	cmp	r5, #12
 8013674:	bf38      	it	cc
 8013676:	250c      	movcc	r5, #12
 8013678:	2d00      	cmp	r5, #0
 801367a:	4606      	mov	r6, r0
 801367c:	db01      	blt.n	8013682 <_malloc_r+0x1a>
 801367e:	42a9      	cmp	r1, r5
 8013680:	d903      	bls.n	801368a <_malloc_r+0x22>
 8013682:	230c      	movs	r3, #12
 8013684:	6033      	str	r3, [r6, #0]
 8013686:	2000      	movs	r0, #0
 8013688:	bd70      	pop	{r4, r5, r6, pc}
 801368a:	f000 fbb9 	bl	8013e00 <__malloc_lock>
 801368e:	4a21      	ldr	r2, [pc, #132]	; (8013714 <_malloc_r+0xac>)
 8013690:	6814      	ldr	r4, [r2, #0]
 8013692:	4621      	mov	r1, r4
 8013694:	b991      	cbnz	r1, 80136bc <_malloc_r+0x54>
 8013696:	4c20      	ldr	r4, [pc, #128]	; (8013718 <_malloc_r+0xb0>)
 8013698:	6823      	ldr	r3, [r4, #0]
 801369a:	b91b      	cbnz	r3, 80136a4 <_malloc_r+0x3c>
 801369c:	4630      	mov	r0, r6
 801369e:	f000 fb05 	bl	8013cac <_sbrk_r>
 80136a2:	6020      	str	r0, [r4, #0]
 80136a4:	4629      	mov	r1, r5
 80136a6:	4630      	mov	r0, r6
 80136a8:	f000 fb00 	bl	8013cac <_sbrk_r>
 80136ac:	1c43      	adds	r3, r0, #1
 80136ae:	d124      	bne.n	80136fa <_malloc_r+0x92>
 80136b0:	230c      	movs	r3, #12
 80136b2:	6033      	str	r3, [r6, #0]
 80136b4:	4630      	mov	r0, r6
 80136b6:	f000 fba4 	bl	8013e02 <__malloc_unlock>
 80136ba:	e7e4      	b.n	8013686 <_malloc_r+0x1e>
 80136bc:	680b      	ldr	r3, [r1, #0]
 80136be:	1b5b      	subs	r3, r3, r5
 80136c0:	d418      	bmi.n	80136f4 <_malloc_r+0x8c>
 80136c2:	2b0b      	cmp	r3, #11
 80136c4:	d90f      	bls.n	80136e6 <_malloc_r+0x7e>
 80136c6:	600b      	str	r3, [r1, #0]
 80136c8:	50cd      	str	r5, [r1, r3]
 80136ca:	18cc      	adds	r4, r1, r3
 80136cc:	4630      	mov	r0, r6
 80136ce:	f000 fb98 	bl	8013e02 <__malloc_unlock>
 80136d2:	f104 000b 	add.w	r0, r4, #11
 80136d6:	1d23      	adds	r3, r4, #4
 80136d8:	f020 0007 	bic.w	r0, r0, #7
 80136dc:	1ac3      	subs	r3, r0, r3
 80136de:	d0d3      	beq.n	8013688 <_malloc_r+0x20>
 80136e0:	425a      	negs	r2, r3
 80136e2:	50e2      	str	r2, [r4, r3]
 80136e4:	e7d0      	b.n	8013688 <_malloc_r+0x20>
 80136e6:	428c      	cmp	r4, r1
 80136e8:	684b      	ldr	r3, [r1, #4]
 80136ea:	bf16      	itet	ne
 80136ec:	6063      	strne	r3, [r4, #4]
 80136ee:	6013      	streq	r3, [r2, #0]
 80136f0:	460c      	movne	r4, r1
 80136f2:	e7eb      	b.n	80136cc <_malloc_r+0x64>
 80136f4:	460c      	mov	r4, r1
 80136f6:	6849      	ldr	r1, [r1, #4]
 80136f8:	e7cc      	b.n	8013694 <_malloc_r+0x2c>
 80136fa:	1cc4      	adds	r4, r0, #3
 80136fc:	f024 0403 	bic.w	r4, r4, #3
 8013700:	42a0      	cmp	r0, r4
 8013702:	d005      	beq.n	8013710 <_malloc_r+0xa8>
 8013704:	1a21      	subs	r1, r4, r0
 8013706:	4630      	mov	r0, r6
 8013708:	f000 fad0 	bl	8013cac <_sbrk_r>
 801370c:	3001      	adds	r0, #1
 801370e:	d0cf      	beq.n	80136b0 <_malloc_r+0x48>
 8013710:	6025      	str	r5, [r4, #0]
 8013712:	e7db      	b.n	80136cc <_malloc_r+0x64>
 8013714:	20000118 	.word	0x20000118
 8013718:	2000011c 	.word	0x2000011c

0801371c <__sfputc_r>:
 801371c:	6893      	ldr	r3, [r2, #8]
 801371e:	3b01      	subs	r3, #1
 8013720:	2b00      	cmp	r3, #0
 8013722:	b410      	push	{r4}
 8013724:	6093      	str	r3, [r2, #8]
 8013726:	da08      	bge.n	801373a <__sfputc_r+0x1e>
 8013728:	6994      	ldr	r4, [r2, #24]
 801372a:	42a3      	cmp	r3, r4
 801372c:	db01      	blt.n	8013732 <__sfputc_r+0x16>
 801372e:	290a      	cmp	r1, #10
 8013730:	d103      	bne.n	801373a <__sfputc_r+0x1e>
 8013732:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013736:	f7ff bca3 	b.w	8013080 <__swbuf_r>
 801373a:	6813      	ldr	r3, [r2, #0]
 801373c:	1c58      	adds	r0, r3, #1
 801373e:	6010      	str	r0, [r2, #0]
 8013740:	7019      	strb	r1, [r3, #0]
 8013742:	4608      	mov	r0, r1
 8013744:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013748:	4770      	bx	lr

0801374a <__sfputs_r>:
 801374a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801374c:	4606      	mov	r6, r0
 801374e:	460f      	mov	r7, r1
 8013750:	4614      	mov	r4, r2
 8013752:	18d5      	adds	r5, r2, r3
 8013754:	42ac      	cmp	r4, r5
 8013756:	d101      	bne.n	801375c <__sfputs_r+0x12>
 8013758:	2000      	movs	r0, #0
 801375a:	e007      	b.n	801376c <__sfputs_r+0x22>
 801375c:	463a      	mov	r2, r7
 801375e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013762:	4630      	mov	r0, r6
 8013764:	f7ff ffda 	bl	801371c <__sfputc_r>
 8013768:	1c43      	adds	r3, r0, #1
 801376a:	d1f3      	bne.n	8013754 <__sfputs_r+0xa>
 801376c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013770 <_vfiprintf_r>:
 8013770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013774:	460c      	mov	r4, r1
 8013776:	b09d      	sub	sp, #116	; 0x74
 8013778:	4617      	mov	r7, r2
 801377a:	461d      	mov	r5, r3
 801377c:	4606      	mov	r6, r0
 801377e:	b118      	cbz	r0, 8013788 <_vfiprintf_r+0x18>
 8013780:	6983      	ldr	r3, [r0, #24]
 8013782:	b90b      	cbnz	r3, 8013788 <_vfiprintf_r+0x18>
 8013784:	f7ff fe2c 	bl	80133e0 <__sinit>
 8013788:	4b7c      	ldr	r3, [pc, #496]	; (801397c <_vfiprintf_r+0x20c>)
 801378a:	429c      	cmp	r4, r3
 801378c:	d158      	bne.n	8013840 <_vfiprintf_r+0xd0>
 801378e:	6874      	ldr	r4, [r6, #4]
 8013790:	89a3      	ldrh	r3, [r4, #12]
 8013792:	0718      	lsls	r0, r3, #28
 8013794:	d55e      	bpl.n	8013854 <_vfiprintf_r+0xe4>
 8013796:	6923      	ldr	r3, [r4, #16]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d05b      	beq.n	8013854 <_vfiprintf_r+0xe4>
 801379c:	2300      	movs	r3, #0
 801379e:	9309      	str	r3, [sp, #36]	; 0x24
 80137a0:	2320      	movs	r3, #32
 80137a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80137a6:	2330      	movs	r3, #48	; 0x30
 80137a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80137ac:	9503      	str	r5, [sp, #12]
 80137ae:	f04f 0b01 	mov.w	fp, #1
 80137b2:	46b8      	mov	r8, r7
 80137b4:	4645      	mov	r5, r8
 80137b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80137ba:	b10b      	cbz	r3, 80137c0 <_vfiprintf_r+0x50>
 80137bc:	2b25      	cmp	r3, #37	; 0x25
 80137be:	d154      	bne.n	801386a <_vfiprintf_r+0xfa>
 80137c0:	ebb8 0a07 	subs.w	sl, r8, r7
 80137c4:	d00b      	beq.n	80137de <_vfiprintf_r+0x6e>
 80137c6:	4653      	mov	r3, sl
 80137c8:	463a      	mov	r2, r7
 80137ca:	4621      	mov	r1, r4
 80137cc:	4630      	mov	r0, r6
 80137ce:	f7ff ffbc 	bl	801374a <__sfputs_r>
 80137d2:	3001      	adds	r0, #1
 80137d4:	f000 80c2 	beq.w	801395c <_vfiprintf_r+0x1ec>
 80137d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137da:	4453      	add	r3, sl
 80137dc:	9309      	str	r3, [sp, #36]	; 0x24
 80137de:	f898 3000 	ldrb.w	r3, [r8]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	f000 80ba 	beq.w	801395c <_vfiprintf_r+0x1ec>
 80137e8:	2300      	movs	r3, #0
 80137ea:	f04f 32ff 	mov.w	r2, #4294967295
 80137ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80137f2:	9304      	str	r3, [sp, #16]
 80137f4:	9307      	str	r3, [sp, #28]
 80137f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80137fa:	931a      	str	r3, [sp, #104]	; 0x68
 80137fc:	46a8      	mov	r8, r5
 80137fe:	2205      	movs	r2, #5
 8013800:	f818 1b01 	ldrb.w	r1, [r8], #1
 8013804:	485e      	ldr	r0, [pc, #376]	; (8013980 <_vfiprintf_r+0x210>)
 8013806:	f7ec fce3 	bl	80001d0 <memchr>
 801380a:	9b04      	ldr	r3, [sp, #16]
 801380c:	bb78      	cbnz	r0, 801386e <_vfiprintf_r+0xfe>
 801380e:	06d9      	lsls	r1, r3, #27
 8013810:	bf44      	itt	mi
 8013812:	2220      	movmi	r2, #32
 8013814:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013818:	071a      	lsls	r2, r3, #28
 801381a:	bf44      	itt	mi
 801381c:	222b      	movmi	r2, #43	; 0x2b
 801381e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013822:	782a      	ldrb	r2, [r5, #0]
 8013824:	2a2a      	cmp	r2, #42	; 0x2a
 8013826:	d02a      	beq.n	801387e <_vfiprintf_r+0x10e>
 8013828:	9a07      	ldr	r2, [sp, #28]
 801382a:	46a8      	mov	r8, r5
 801382c:	2000      	movs	r0, #0
 801382e:	250a      	movs	r5, #10
 8013830:	4641      	mov	r1, r8
 8013832:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013836:	3b30      	subs	r3, #48	; 0x30
 8013838:	2b09      	cmp	r3, #9
 801383a:	d969      	bls.n	8013910 <_vfiprintf_r+0x1a0>
 801383c:	b360      	cbz	r0, 8013898 <_vfiprintf_r+0x128>
 801383e:	e024      	b.n	801388a <_vfiprintf_r+0x11a>
 8013840:	4b50      	ldr	r3, [pc, #320]	; (8013984 <_vfiprintf_r+0x214>)
 8013842:	429c      	cmp	r4, r3
 8013844:	d101      	bne.n	801384a <_vfiprintf_r+0xda>
 8013846:	68b4      	ldr	r4, [r6, #8]
 8013848:	e7a2      	b.n	8013790 <_vfiprintf_r+0x20>
 801384a:	4b4f      	ldr	r3, [pc, #316]	; (8013988 <_vfiprintf_r+0x218>)
 801384c:	429c      	cmp	r4, r3
 801384e:	bf08      	it	eq
 8013850:	68f4      	ldreq	r4, [r6, #12]
 8013852:	e79d      	b.n	8013790 <_vfiprintf_r+0x20>
 8013854:	4621      	mov	r1, r4
 8013856:	4630      	mov	r0, r6
 8013858:	f7ff fc64 	bl	8013124 <__swsetup_r>
 801385c:	2800      	cmp	r0, #0
 801385e:	d09d      	beq.n	801379c <_vfiprintf_r+0x2c>
 8013860:	f04f 30ff 	mov.w	r0, #4294967295
 8013864:	b01d      	add	sp, #116	; 0x74
 8013866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801386a:	46a8      	mov	r8, r5
 801386c:	e7a2      	b.n	80137b4 <_vfiprintf_r+0x44>
 801386e:	4a44      	ldr	r2, [pc, #272]	; (8013980 <_vfiprintf_r+0x210>)
 8013870:	1a80      	subs	r0, r0, r2
 8013872:	fa0b f000 	lsl.w	r0, fp, r0
 8013876:	4318      	orrs	r0, r3
 8013878:	9004      	str	r0, [sp, #16]
 801387a:	4645      	mov	r5, r8
 801387c:	e7be      	b.n	80137fc <_vfiprintf_r+0x8c>
 801387e:	9a03      	ldr	r2, [sp, #12]
 8013880:	1d11      	adds	r1, r2, #4
 8013882:	6812      	ldr	r2, [r2, #0]
 8013884:	9103      	str	r1, [sp, #12]
 8013886:	2a00      	cmp	r2, #0
 8013888:	db01      	blt.n	801388e <_vfiprintf_r+0x11e>
 801388a:	9207      	str	r2, [sp, #28]
 801388c:	e004      	b.n	8013898 <_vfiprintf_r+0x128>
 801388e:	4252      	negs	r2, r2
 8013890:	f043 0302 	orr.w	r3, r3, #2
 8013894:	9207      	str	r2, [sp, #28]
 8013896:	9304      	str	r3, [sp, #16]
 8013898:	f898 3000 	ldrb.w	r3, [r8]
 801389c:	2b2e      	cmp	r3, #46	; 0x2e
 801389e:	d10e      	bne.n	80138be <_vfiprintf_r+0x14e>
 80138a0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80138a4:	2b2a      	cmp	r3, #42	; 0x2a
 80138a6:	d138      	bne.n	801391a <_vfiprintf_r+0x1aa>
 80138a8:	9b03      	ldr	r3, [sp, #12]
 80138aa:	1d1a      	adds	r2, r3, #4
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	9203      	str	r2, [sp, #12]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	bfb8      	it	lt
 80138b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80138b8:	f108 0802 	add.w	r8, r8, #2
 80138bc:	9305      	str	r3, [sp, #20]
 80138be:	4d33      	ldr	r5, [pc, #204]	; (801398c <_vfiprintf_r+0x21c>)
 80138c0:	f898 1000 	ldrb.w	r1, [r8]
 80138c4:	2203      	movs	r2, #3
 80138c6:	4628      	mov	r0, r5
 80138c8:	f7ec fc82 	bl	80001d0 <memchr>
 80138cc:	b140      	cbz	r0, 80138e0 <_vfiprintf_r+0x170>
 80138ce:	2340      	movs	r3, #64	; 0x40
 80138d0:	1b40      	subs	r0, r0, r5
 80138d2:	fa03 f000 	lsl.w	r0, r3, r0
 80138d6:	9b04      	ldr	r3, [sp, #16]
 80138d8:	4303      	orrs	r3, r0
 80138da:	f108 0801 	add.w	r8, r8, #1
 80138de:	9304      	str	r3, [sp, #16]
 80138e0:	f898 1000 	ldrb.w	r1, [r8]
 80138e4:	482a      	ldr	r0, [pc, #168]	; (8013990 <_vfiprintf_r+0x220>)
 80138e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80138ea:	2206      	movs	r2, #6
 80138ec:	f108 0701 	add.w	r7, r8, #1
 80138f0:	f7ec fc6e 	bl	80001d0 <memchr>
 80138f4:	2800      	cmp	r0, #0
 80138f6:	d037      	beq.n	8013968 <_vfiprintf_r+0x1f8>
 80138f8:	4b26      	ldr	r3, [pc, #152]	; (8013994 <_vfiprintf_r+0x224>)
 80138fa:	bb1b      	cbnz	r3, 8013944 <_vfiprintf_r+0x1d4>
 80138fc:	9b03      	ldr	r3, [sp, #12]
 80138fe:	3307      	adds	r3, #7
 8013900:	f023 0307 	bic.w	r3, r3, #7
 8013904:	3308      	adds	r3, #8
 8013906:	9303      	str	r3, [sp, #12]
 8013908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801390a:	444b      	add	r3, r9
 801390c:	9309      	str	r3, [sp, #36]	; 0x24
 801390e:	e750      	b.n	80137b2 <_vfiprintf_r+0x42>
 8013910:	fb05 3202 	mla	r2, r5, r2, r3
 8013914:	2001      	movs	r0, #1
 8013916:	4688      	mov	r8, r1
 8013918:	e78a      	b.n	8013830 <_vfiprintf_r+0xc0>
 801391a:	2300      	movs	r3, #0
 801391c:	f108 0801 	add.w	r8, r8, #1
 8013920:	9305      	str	r3, [sp, #20]
 8013922:	4619      	mov	r1, r3
 8013924:	250a      	movs	r5, #10
 8013926:	4640      	mov	r0, r8
 8013928:	f810 2b01 	ldrb.w	r2, [r0], #1
 801392c:	3a30      	subs	r2, #48	; 0x30
 801392e:	2a09      	cmp	r2, #9
 8013930:	d903      	bls.n	801393a <_vfiprintf_r+0x1ca>
 8013932:	2b00      	cmp	r3, #0
 8013934:	d0c3      	beq.n	80138be <_vfiprintf_r+0x14e>
 8013936:	9105      	str	r1, [sp, #20]
 8013938:	e7c1      	b.n	80138be <_vfiprintf_r+0x14e>
 801393a:	fb05 2101 	mla	r1, r5, r1, r2
 801393e:	2301      	movs	r3, #1
 8013940:	4680      	mov	r8, r0
 8013942:	e7f0      	b.n	8013926 <_vfiprintf_r+0x1b6>
 8013944:	ab03      	add	r3, sp, #12
 8013946:	9300      	str	r3, [sp, #0]
 8013948:	4622      	mov	r2, r4
 801394a:	4b13      	ldr	r3, [pc, #76]	; (8013998 <_vfiprintf_r+0x228>)
 801394c:	a904      	add	r1, sp, #16
 801394e:	4630      	mov	r0, r6
 8013950:	f3af 8000 	nop.w
 8013954:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013958:	4681      	mov	r9, r0
 801395a:	d1d5      	bne.n	8013908 <_vfiprintf_r+0x198>
 801395c:	89a3      	ldrh	r3, [r4, #12]
 801395e:	065b      	lsls	r3, r3, #25
 8013960:	f53f af7e 	bmi.w	8013860 <_vfiprintf_r+0xf0>
 8013964:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013966:	e77d      	b.n	8013864 <_vfiprintf_r+0xf4>
 8013968:	ab03      	add	r3, sp, #12
 801396a:	9300      	str	r3, [sp, #0]
 801396c:	4622      	mov	r2, r4
 801396e:	4b0a      	ldr	r3, [pc, #40]	; (8013998 <_vfiprintf_r+0x228>)
 8013970:	a904      	add	r1, sp, #16
 8013972:	4630      	mov	r0, r6
 8013974:	f000 f888 	bl	8013a88 <_printf_i>
 8013978:	e7ec      	b.n	8013954 <_vfiprintf_r+0x1e4>
 801397a:	bf00      	nop
 801397c:	080145d0 	.word	0x080145d0
 8013980:	08014610 	.word	0x08014610
 8013984:	080145f0 	.word	0x080145f0
 8013988:	080145b0 	.word	0x080145b0
 801398c:	08014616 	.word	0x08014616
 8013990:	0801461a 	.word	0x0801461a
 8013994:	00000000 	.word	0x00000000
 8013998:	0801374b 	.word	0x0801374b

0801399c <_printf_common>:
 801399c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139a0:	4691      	mov	r9, r2
 80139a2:	461f      	mov	r7, r3
 80139a4:	688a      	ldr	r2, [r1, #8]
 80139a6:	690b      	ldr	r3, [r1, #16]
 80139a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80139ac:	4293      	cmp	r3, r2
 80139ae:	bfb8      	it	lt
 80139b0:	4613      	movlt	r3, r2
 80139b2:	f8c9 3000 	str.w	r3, [r9]
 80139b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80139ba:	4606      	mov	r6, r0
 80139bc:	460c      	mov	r4, r1
 80139be:	b112      	cbz	r2, 80139c6 <_printf_common+0x2a>
 80139c0:	3301      	adds	r3, #1
 80139c2:	f8c9 3000 	str.w	r3, [r9]
 80139c6:	6823      	ldr	r3, [r4, #0]
 80139c8:	0699      	lsls	r1, r3, #26
 80139ca:	bf42      	ittt	mi
 80139cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80139d0:	3302      	addmi	r3, #2
 80139d2:	f8c9 3000 	strmi.w	r3, [r9]
 80139d6:	6825      	ldr	r5, [r4, #0]
 80139d8:	f015 0506 	ands.w	r5, r5, #6
 80139dc:	d107      	bne.n	80139ee <_printf_common+0x52>
 80139de:	f104 0a19 	add.w	sl, r4, #25
 80139e2:	68e3      	ldr	r3, [r4, #12]
 80139e4:	f8d9 2000 	ldr.w	r2, [r9]
 80139e8:	1a9b      	subs	r3, r3, r2
 80139ea:	42ab      	cmp	r3, r5
 80139ec:	dc28      	bgt.n	8013a40 <_printf_common+0xa4>
 80139ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80139f2:	6822      	ldr	r2, [r4, #0]
 80139f4:	3300      	adds	r3, #0
 80139f6:	bf18      	it	ne
 80139f8:	2301      	movne	r3, #1
 80139fa:	0692      	lsls	r2, r2, #26
 80139fc:	d42d      	bmi.n	8013a5a <_printf_common+0xbe>
 80139fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013a02:	4639      	mov	r1, r7
 8013a04:	4630      	mov	r0, r6
 8013a06:	47c0      	blx	r8
 8013a08:	3001      	adds	r0, #1
 8013a0a:	d020      	beq.n	8013a4e <_printf_common+0xb2>
 8013a0c:	6823      	ldr	r3, [r4, #0]
 8013a0e:	68e5      	ldr	r5, [r4, #12]
 8013a10:	f8d9 2000 	ldr.w	r2, [r9]
 8013a14:	f003 0306 	and.w	r3, r3, #6
 8013a18:	2b04      	cmp	r3, #4
 8013a1a:	bf08      	it	eq
 8013a1c:	1aad      	subeq	r5, r5, r2
 8013a1e:	68a3      	ldr	r3, [r4, #8]
 8013a20:	6922      	ldr	r2, [r4, #16]
 8013a22:	bf0c      	ite	eq
 8013a24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013a28:	2500      	movne	r5, #0
 8013a2a:	4293      	cmp	r3, r2
 8013a2c:	bfc4      	itt	gt
 8013a2e:	1a9b      	subgt	r3, r3, r2
 8013a30:	18ed      	addgt	r5, r5, r3
 8013a32:	f04f 0900 	mov.w	r9, #0
 8013a36:	341a      	adds	r4, #26
 8013a38:	454d      	cmp	r5, r9
 8013a3a:	d11a      	bne.n	8013a72 <_printf_common+0xd6>
 8013a3c:	2000      	movs	r0, #0
 8013a3e:	e008      	b.n	8013a52 <_printf_common+0xb6>
 8013a40:	2301      	movs	r3, #1
 8013a42:	4652      	mov	r2, sl
 8013a44:	4639      	mov	r1, r7
 8013a46:	4630      	mov	r0, r6
 8013a48:	47c0      	blx	r8
 8013a4a:	3001      	adds	r0, #1
 8013a4c:	d103      	bne.n	8013a56 <_printf_common+0xba>
 8013a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8013a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a56:	3501      	adds	r5, #1
 8013a58:	e7c3      	b.n	80139e2 <_printf_common+0x46>
 8013a5a:	18e1      	adds	r1, r4, r3
 8013a5c:	1c5a      	adds	r2, r3, #1
 8013a5e:	2030      	movs	r0, #48	; 0x30
 8013a60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013a64:	4422      	add	r2, r4
 8013a66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013a6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013a6e:	3302      	adds	r3, #2
 8013a70:	e7c5      	b.n	80139fe <_printf_common+0x62>
 8013a72:	2301      	movs	r3, #1
 8013a74:	4622      	mov	r2, r4
 8013a76:	4639      	mov	r1, r7
 8013a78:	4630      	mov	r0, r6
 8013a7a:	47c0      	blx	r8
 8013a7c:	3001      	adds	r0, #1
 8013a7e:	d0e6      	beq.n	8013a4e <_printf_common+0xb2>
 8013a80:	f109 0901 	add.w	r9, r9, #1
 8013a84:	e7d8      	b.n	8013a38 <_printf_common+0x9c>
	...

08013a88 <_printf_i>:
 8013a88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013a8c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013a90:	460c      	mov	r4, r1
 8013a92:	7e09      	ldrb	r1, [r1, #24]
 8013a94:	b085      	sub	sp, #20
 8013a96:	296e      	cmp	r1, #110	; 0x6e
 8013a98:	4617      	mov	r7, r2
 8013a9a:	4606      	mov	r6, r0
 8013a9c:	4698      	mov	r8, r3
 8013a9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013aa0:	f000 80b3 	beq.w	8013c0a <_printf_i+0x182>
 8013aa4:	d822      	bhi.n	8013aec <_printf_i+0x64>
 8013aa6:	2963      	cmp	r1, #99	; 0x63
 8013aa8:	d036      	beq.n	8013b18 <_printf_i+0x90>
 8013aaa:	d80a      	bhi.n	8013ac2 <_printf_i+0x3a>
 8013aac:	2900      	cmp	r1, #0
 8013aae:	f000 80b9 	beq.w	8013c24 <_printf_i+0x19c>
 8013ab2:	2958      	cmp	r1, #88	; 0x58
 8013ab4:	f000 8083 	beq.w	8013bbe <_printf_i+0x136>
 8013ab8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013abc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013ac0:	e032      	b.n	8013b28 <_printf_i+0xa0>
 8013ac2:	2964      	cmp	r1, #100	; 0x64
 8013ac4:	d001      	beq.n	8013aca <_printf_i+0x42>
 8013ac6:	2969      	cmp	r1, #105	; 0x69
 8013ac8:	d1f6      	bne.n	8013ab8 <_printf_i+0x30>
 8013aca:	6820      	ldr	r0, [r4, #0]
 8013acc:	6813      	ldr	r3, [r2, #0]
 8013ace:	0605      	lsls	r5, r0, #24
 8013ad0:	f103 0104 	add.w	r1, r3, #4
 8013ad4:	d52a      	bpl.n	8013b2c <_printf_i+0xa4>
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	6011      	str	r1, [r2, #0]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	da03      	bge.n	8013ae6 <_printf_i+0x5e>
 8013ade:	222d      	movs	r2, #45	; 0x2d
 8013ae0:	425b      	negs	r3, r3
 8013ae2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8013ae6:	486f      	ldr	r0, [pc, #444]	; (8013ca4 <_printf_i+0x21c>)
 8013ae8:	220a      	movs	r2, #10
 8013aea:	e039      	b.n	8013b60 <_printf_i+0xd8>
 8013aec:	2973      	cmp	r1, #115	; 0x73
 8013aee:	f000 809d 	beq.w	8013c2c <_printf_i+0x1a4>
 8013af2:	d808      	bhi.n	8013b06 <_printf_i+0x7e>
 8013af4:	296f      	cmp	r1, #111	; 0x6f
 8013af6:	d020      	beq.n	8013b3a <_printf_i+0xb2>
 8013af8:	2970      	cmp	r1, #112	; 0x70
 8013afa:	d1dd      	bne.n	8013ab8 <_printf_i+0x30>
 8013afc:	6823      	ldr	r3, [r4, #0]
 8013afe:	f043 0320 	orr.w	r3, r3, #32
 8013b02:	6023      	str	r3, [r4, #0]
 8013b04:	e003      	b.n	8013b0e <_printf_i+0x86>
 8013b06:	2975      	cmp	r1, #117	; 0x75
 8013b08:	d017      	beq.n	8013b3a <_printf_i+0xb2>
 8013b0a:	2978      	cmp	r1, #120	; 0x78
 8013b0c:	d1d4      	bne.n	8013ab8 <_printf_i+0x30>
 8013b0e:	2378      	movs	r3, #120	; 0x78
 8013b10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013b14:	4864      	ldr	r0, [pc, #400]	; (8013ca8 <_printf_i+0x220>)
 8013b16:	e055      	b.n	8013bc4 <_printf_i+0x13c>
 8013b18:	6813      	ldr	r3, [r2, #0]
 8013b1a:	1d19      	adds	r1, r3, #4
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	6011      	str	r1, [r2, #0]
 8013b20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013b24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013b28:	2301      	movs	r3, #1
 8013b2a:	e08c      	b.n	8013c46 <_printf_i+0x1be>
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	6011      	str	r1, [r2, #0]
 8013b30:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013b34:	bf18      	it	ne
 8013b36:	b21b      	sxthne	r3, r3
 8013b38:	e7cf      	b.n	8013ada <_printf_i+0x52>
 8013b3a:	6813      	ldr	r3, [r2, #0]
 8013b3c:	6825      	ldr	r5, [r4, #0]
 8013b3e:	1d18      	adds	r0, r3, #4
 8013b40:	6010      	str	r0, [r2, #0]
 8013b42:	0628      	lsls	r0, r5, #24
 8013b44:	d501      	bpl.n	8013b4a <_printf_i+0xc2>
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	e002      	b.n	8013b50 <_printf_i+0xc8>
 8013b4a:	0668      	lsls	r0, r5, #25
 8013b4c:	d5fb      	bpl.n	8013b46 <_printf_i+0xbe>
 8013b4e:	881b      	ldrh	r3, [r3, #0]
 8013b50:	4854      	ldr	r0, [pc, #336]	; (8013ca4 <_printf_i+0x21c>)
 8013b52:	296f      	cmp	r1, #111	; 0x6f
 8013b54:	bf14      	ite	ne
 8013b56:	220a      	movne	r2, #10
 8013b58:	2208      	moveq	r2, #8
 8013b5a:	2100      	movs	r1, #0
 8013b5c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013b60:	6865      	ldr	r5, [r4, #4]
 8013b62:	60a5      	str	r5, [r4, #8]
 8013b64:	2d00      	cmp	r5, #0
 8013b66:	f2c0 8095 	blt.w	8013c94 <_printf_i+0x20c>
 8013b6a:	6821      	ldr	r1, [r4, #0]
 8013b6c:	f021 0104 	bic.w	r1, r1, #4
 8013b70:	6021      	str	r1, [r4, #0]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d13d      	bne.n	8013bf2 <_printf_i+0x16a>
 8013b76:	2d00      	cmp	r5, #0
 8013b78:	f040 808e 	bne.w	8013c98 <_printf_i+0x210>
 8013b7c:	4665      	mov	r5, ip
 8013b7e:	2a08      	cmp	r2, #8
 8013b80:	d10b      	bne.n	8013b9a <_printf_i+0x112>
 8013b82:	6823      	ldr	r3, [r4, #0]
 8013b84:	07db      	lsls	r3, r3, #31
 8013b86:	d508      	bpl.n	8013b9a <_printf_i+0x112>
 8013b88:	6923      	ldr	r3, [r4, #16]
 8013b8a:	6862      	ldr	r2, [r4, #4]
 8013b8c:	429a      	cmp	r2, r3
 8013b8e:	bfde      	ittt	le
 8013b90:	2330      	movle	r3, #48	; 0x30
 8013b92:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013b96:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013b9a:	ebac 0305 	sub.w	r3, ip, r5
 8013b9e:	6123      	str	r3, [r4, #16]
 8013ba0:	f8cd 8000 	str.w	r8, [sp]
 8013ba4:	463b      	mov	r3, r7
 8013ba6:	aa03      	add	r2, sp, #12
 8013ba8:	4621      	mov	r1, r4
 8013baa:	4630      	mov	r0, r6
 8013bac:	f7ff fef6 	bl	801399c <_printf_common>
 8013bb0:	3001      	adds	r0, #1
 8013bb2:	d14d      	bne.n	8013c50 <_printf_i+0x1c8>
 8013bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8013bb8:	b005      	add	sp, #20
 8013bba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013bbe:	4839      	ldr	r0, [pc, #228]	; (8013ca4 <_printf_i+0x21c>)
 8013bc0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013bc4:	6813      	ldr	r3, [r2, #0]
 8013bc6:	6821      	ldr	r1, [r4, #0]
 8013bc8:	1d1d      	adds	r5, r3, #4
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	6015      	str	r5, [r2, #0]
 8013bce:	060a      	lsls	r2, r1, #24
 8013bd0:	d50b      	bpl.n	8013bea <_printf_i+0x162>
 8013bd2:	07ca      	lsls	r2, r1, #31
 8013bd4:	bf44      	itt	mi
 8013bd6:	f041 0120 	orrmi.w	r1, r1, #32
 8013bda:	6021      	strmi	r1, [r4, #0]
 8013bdc:	b91b      	cbnz	r3, 8013be6 <_printf_i+0x15e>
 8013bde:	6822      	ldr	r2, [r4, #0]
 8013be0:	f022 0220 	bic.w	r2, r2, #32
 8013be4:	6022      	str	r2, [r4, #0]
 8013be6:	2210      	movs	r2, #16
 8013be8:	e7b7      	b.n	8013b5a <_printf_i+0xd2>
 8013bea:	064d      	lsls	r5, r1, #25
 8013bec:	bf48      	it	mi
 8013bee:	b29b      	uxthmi	r3, r3
 8013bf0:	e7ef      	b.n	8013bd2 <_printf_i+0x14a>
 8013bf2:	4665      	mov	r5, ip
 8013bf4:	fbb3 f1f2 	udiv	r1, r3, r2
 8013bf8:	fb02 3311 	mls	r3, r2, r1, r3
 8013bfc:	5cc3      	ldrb	r3, [r0, r3]
 8013bfe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013c02:	460b      	mov	r3, r1
 8013c04:	2900      	cmp	r1, #0
 8013c06:	d1f5      	bne.n	8013bf4 <_printf_i+0x16c>
 8013c08:	e7b9      	b.n	8013b7e <_printf_i+0xf6>
 8013c0a:	6813      	ldr	r3, [r2, #0]
 8013c0c:	6825      	ldr	r5, [r4, #0]
 8013c0e:	6961      	ldr	r1, [r4, #20]
 8013c10:	1d18      	adds	r0, r3, #4
 8013c12:	6010      	str	r0, [r2, #0]
 8013c14:	0628      	lsls	r0, r5, #24
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	d501      	bpl.n	8013c1e <_printf_i+0x196>
 8013c1a:	6019      	str	r1, [r3, #0]
 8013c1c:	e002      	b.n	8013c24 <_printf_i+0x19c>
 8013c1e:	066a      	lsls	r2, r5, #25
 8013c20:	d5fb      	bpl.n	8013c1a <_printf_i+0x192>
 8013c22:	8019      	strh	r1, [r3, #0]
 8013c24:	2300      	movs	r3, #0
 8013c26:	6123      	str	r3, [r4, #16]
 8013c28:	4665      	mov	r5, ip
 8013c2a:	e7b9      	b.n	8013ba0 <_printf_i+0x118>
 8013c2c:	6813      	ldr	r3, [r2, #0]
 8013c2e:	1d19      	adds	r1, r3, #4
 8013c30:	6011      	str	r1, [r2, #0]
 8013c32:	681d      	ldr	r5, [r3, #0]
 8013c34:	6862      	ldr	r2, [r4, #4]
 8013c36:	2100      	movs	r1, #0
 8013c38:	4628      	mov	r0, r5
 8013c3a:	f7ec fac9 	bl	80001d0 <memchr>
 8013c3e:	b108      	cbz	r0, 8013c44 <_printf_i+0x1bc>
 8013c40:	1b40      	subs	r0, r0, r5
 8013c42:	6060      	str	r0, [r4, #4]
 8013c44:	6863      	ldr	r3, [r4, #4]
 8013c46:	6123      	str	r3, [r4, #16]
 8013c48:	2300      	movs	r3, #0
 8013c4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013c4e:	e7a7      	b.n	8013ba0 <_printf_i+0x118>
 8013c50:	6923      	ldr	r3, [r4, #16]
 8013c52:	462a      	mov	r2, r5
 8013c54:	4639      	mov	r1, r7
 8013c56:	4630      	mov	r0, r6
 8013c58:	47c0      	blx	r8
 8013c5a:	3001      	adds	r0, #1
 8013c5c:	d0aa      	beq.n	8013bb4 <_printf_i+0x12c>
 8013c5e:	6823      	ldr	r3, [r4, #0]
 8013c60:	079b      	lsls	r3, r3, #30
 8013c62:	d413      	bmi.n	8013c8c <_printf_i+0x204>
 8013c64:	68e0      	ldr	r0, [r4, #12]
 8013c66:	9b03      	ldr	r3, [sp, #12]
 8013c68:	4298      	cmp	r0, r3
 8013c6a:	bfb8      	it	lt
 8013c6c:	4618      	movlt	r0, r3
 8013c6e:	e7a3      	b.n	8013bb8 <_printf_i+0x130>
 8013c70:	2301      	movs	r3, #1
 8013c72:	464a      	mov	r2, r9
 8013c74:	4639      	mov	r1, r7
 8013c76:	4630      	mov	r0, r6
 8013c78:	47c0      	blx	r8
 8013c7a:	3001      	adds	r0, #1
 8013c7c:	d09a      	beq.n	8013bb4 <_printf_i+0x12c>
 8013c7e:	3501      	adds	r5, #1
 8013c80:	68e3      	ldr	r3, [r4, #12]
 8013c82:	9a03      	ldr	r2, [sp, #12]
 8013c84:	1a9b      	subs	r3, r3, r2
 8013c86:	42ab      	cmp	r3, r5
 8013c88:	dcf2      	bgt.n	8013c70 <_printf_i+0x1e8>
 8013c8a:	e7eb      	b.n	8013c64 <_printf_i+0x1dc>
 8013c8c:	2500      	movs	r5, #0
 8013c8e:	f104 0919 	add.w	r9, r4, #25
 8013c92:	e7f5      	b.n	8013c80 <_printf_i+0x1f8>
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d1ac      	bne.n	8013bf2 <_printf_i+0x16a>
 8013c98:	7803      	ldrb	r3, [r0, #0]
 8013c9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013c9e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013ca2:	e76c      	b.n	8013b7e <_printf_i+0xf6>
 8013ca4:	08014621 	.word	0x08014621
 8013ca8:	08014632 	.word	0x08014632

08013cac <_sbrk_r>:
 8013cac:	b538      	push	{r3, r4, r5, lr}
 8013cae:	4c06      	ldr	r4, [pc, #24]	; (8013cc8 <_sbrk_r+0x1c>)
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	4605      	mov	r5, r0
 8013cb4:	4608      	mov	r0, r1
 8013cb6:	6023      	str	r3, [r4, #0]
 8013cb8:	f7fe fff2 	bl	8012ca0 <_sbrk>
 8013cbc:	1c43      	adds	r3, r0, #1
 8013cbe:	d102      	bne.n	8013cc6 <_sbrk_r+0x1a>
 8013cc0:	6823      	ldr	r3, [r4, #0]
 8013cc2:	b103      	cbz	r3, 8013cc6 <_sbrk_r+0x1a>
 8013cc4:	602b      	str	r3, [r5, #0]
 8013cc6:	bd38      	pop	{r3, r4, r5, pc}
 8013cc8:	2000165c 	.word	0x2000165c

08013ccc <__sread>:
 8013ccc:	b510      	push	{r4, lr}
 8013cce:	460c      	mov	r4, r1
 8013cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013cd4:	f000 f896 	bl	8013e04 <_read_r>
 8013cd8:	2800      	cmp	r0, #0
 8013cda:	bfab      	itete	ge
 8013cdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013cde:	89a3      	ldrhlt	r3, [r4, #12]
 8013ce0:	181b      	addge	r3, r3, r0
 8013ce2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013ce6:	bfac      	ite	ge
 8013ce8:	6563      	strge	r3, [r4, #84]	; 0x54
 8013cea:	81a3      	strhlt	r3, [r4, #12]
 8013cec:	bd10      	pop	{r4, pc}

08013cee <__swrite>:
 8013cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cf2:	461f      	mov	r7, r3
 8013cf4:	898b      	ldrh	r3, [r1, #12]
 8013cf6:	05db      	lsls	r3, r3, #23
 8013cf8:	4605      	mov	r5, r0
 8013cfa:	460c      	mov	r4, r1
 8013cfc:	4616      	mov	r6, r2
 8013cfe:	d505      	bpl.n	8013d0c <__swrite+0x1e>
 8013d00:	2302      	movs	r3, #2
 8013d02:	2200      	movs	r2, #0
 8013d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d08:	f000 f868 	bl	8013ddc <_lseek_r>
 8013d0c:	89a3      	ldrh	r3, [r4, #12]
 8013d0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013d12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013d16:	81a3      	strh	r3, [r4, #12]
 8013d18:	4632      	mov	r2, r6
 8013d1a:	463b      	mov	r3, r7
 8013d1c:	4628      	mov	r0, r5
 8013d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d22:	f000 b817 	b.w	8013d54 <_write_r>

08013d26 <__sseek>:
 8013d26:	b510      	push	{r4, lr}
 8013d28:	460c      	mov	r4, r1
 8013d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d2e:	f000 f855 	bl	8013ddc <_lseek_r>
 8013d32:	1c43      	adds	r3, r0, #1
 8013d34:	89a3      	ldrh	r3, [r4, #12]
 8013d36:	bf15      	itete	ne
 8013d38:	6560      	strne	r0, [r4, #84]	; 0x54
 8013d3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013d3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013d42:	81a3      	strheq	r3, [r4, #12]
 8013d44:	bf18      	it	ne
 8013d46:	81a3      	strhne	r3, [r4, #12]
 8013d48:	bd10      	pop	{r4, pc}

08013d4a <__sclose>:
 8013d4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d4e:	f000 b813 	b.w	8013d78 <_close_r>
	...

08013d54 <_write_r>:
 8013d54:	b538      	push	{r3, r4, r5, lr}
 8013d56:	4c07      	ldr	r4, [pc, #28]	; (8013d74 <_write_r+0x20>)
 8013d58:	4605      	mov	r5, r0
 8013d5a:	4608      	mov	r0, r1
 8013d5c:	4611      	mov	r1, r2
 8013d5e:	2200      	movs	r2, #0
 8013d60:	6022      	str	r2, [r4, #0]
 8013d62:	461a      	mov	r2, r3
 8013d64:	f7fe ff4b 	bl	8012bfe <_write>
 8013d68:	1c43      	adds	r3, r0, #1
 8013d6a:	d102      	bne.n	8013d72 <_write_r+0x1e>
 8013d6c:	6823      	ldr	r3, [r4, #0]
 8013d6e:	b103      	cbz	r3, 8013d72 <_write_r+0x1e>
 8013d70:	602b      	str	r3, [r5, #0]
 8013d72:	bd38      	pop	{r3, r4, r5, pc}
 8013d74:	2000165c 	.word	0x2000165c

08013d78 <_close_r>:
 8013d78:	b538      	push	{r3, r4, r5, lr}
 8013d7a:	4c06      	ldr	r4, [pc, #24]	; (8013d94 <_close_r+0x1c>)
 8013d7c:	2300      	movs	r3, #0
 8013d7e:	4605      	mov	r5, r0
 8013d80:	4608      	mov	r0, r1
 8013d82:	6023      	str	r3, [r4, #0]
 8013d84:	f7fe ff57 	bl	8012c36 <_close>
 8013d88:	1c43      	adds	r3, r0, #1
 8013d8a:	d102      	bne.n	8013d92 <_close_r+0x1a>
 8013d8c:	6823      	ldr	r3, [r4, #0]
 8013d8e:	b103      	cbz	r3, 8013d92 <_close_r+0x1a>
 8013d90:	602b      	str	r3, [r5, #0]
 8013d92:	bd38      	pop	{r3, r4, r5, pc}
 8013d94:	2000165c 	.word	0x2000165c

08013d98 <_fstat_r>:
 8013d98:	b538      	push	{r3, r4, r5, lr}
 8013d9a:	4c07      	ldr	r4, [pc, #28]	; (8013db8 <_fstat_r+0x20>)
 8013d9c:	2300      	movs	r3, #0
 8013d9e:	4605      	mov	r5, r0
 8013da0:	4608      	mov	r0, r1
 8013da2:	4611      	mov	r1, r2
 8013da4:	6023      	str	r3, [r4, #0]
 8013da6:	f7fe ff52 	bl	8012c4e <_fstat>
 8013daa:	1c43      	adds	r3, r0, #1
 8013dac:	d102      	bne.n	8013db4 <_fstat_r+0x1c>
 8013dae:	6823      	ldr	r3, [r4, #0]
 8013db0:	b103      	cbz	r3, 8013db4 <_fstat_r+0x1c>
 8013db2:	602b      	str	r3, [r5, #0]
 8013db4:	bd38      	pop	{r3, r4, r5, pc}
 8013db6:	bf00      	nop
 8013db8:	2000165c 	.word	0x2000165c

08013dbc <_isatty_r>:
 8013dbc:	b538      	push	{r3, r4, r5, lr}
 8013dbe:	4c06      	ldr	r4, [pc, #24]	; (8013dd8 <_isatty_r+0x1c>)
 8013dc0:	2300      	movs	r3, #0
 8013dc2:	4605      	mov	r5, r0
 8013dc4:	4608      	mov	r0, r1
 8013dc6:	6023      	str	r3, [r4, #0]
 8013dc8:	f7fe ff51 	bl	8012c6e <_isatty>
 8013dcc:	1c43      	adds	r3, r0, #1
 8013dce:	d102      	bne.n	8013dd6 <_isatty_r+0x1a>
 8013dd0:	6823      	ldr	r3, [r4, #0]
 8013dd2:	b103      	cbz	r3, 8013dd6 <_isatty_r+0x1a>
 8013dd4:	602b      	str	r3, [r5, #0]
 8013dd6:	bd38      	pop	{r3, r4, r5, pc}
 8013dd8:	2000165c 	.word	0x2000165c

08013ddc <_lseek_r>:
 8013ddc:	b538      	push	{r3, r4, r5, lr}
 8013dde:	4c07      	ldr	r4, [pc, #28]	; (8013dfc <_lseek_r+0x20>)
 8013de0:	4605      	mov	r5, r0
 8013de2:	4608      	mov	r0, r1
 8013de4:	4611      	mov	r1, r2
 8013de6:	2200      	movs	r2, #0
 8013de8:	6022      	str	r2, [r4, #0]
 8013dea:	461a      	mov	r2, r3
 8013dec:	f7fe ff4a 	bl	8012c84 <_lseek>
 8013df0:	1c43      	adds	r3, r0, #1
 8013df2:	d102      	bne.n	8013dfa <_lseek_r+0x1e>
 8013df4:	6823      	ldr	r3, [r4, #0]
 8013df6:	b103      	cbz	r3, 8013dfa <_lseek_r+0x1e>
 8013df8:	602b      	str	r3, [r5, #0]
 8013dfa:	bd38      	pop	{r3, r4, r5, pc}
 8013dfc:	2000165c 	.word	0x2000165c

08013e00 <__malloc_lock>:
 8013e00:	4770      	bx	lr

08013e02 <__malloc_unlock>:
 8013e02:	4770      	bx	lr

08013e04 <_read_r>:
 8013e04:	b538      	push	{r3, r4, r5, lr}
 8013e06:	4c07      	ldr	r4, [pc, #28]	; (8013e24 <_read_r+0x20>)
 8013e08:	4605      	mov	r5, r0
 8013e0a:	4608      	mov	r0, r1
 8013e0c:	4611      	mov	r1, r2
 8013e0e:	2200      	movs	r2, #0
 8013e10:	6022      	str	r2, [r4, #0]
 8013e12:	461a      	mov	r2, r3
 8013e14:	f7fe fed6 	bl	8012bc4 <_read>
 8013e18:	1c43      	adds	r3, r0, #1
 8013e1a:	d102      	bne.n	8013e22 <_read_r+0x1e>
 8013e1c:	6823      	ldr	r3, [r4, #0]
 8013e1e:	b103      	cbz	r3, 8013e22 <_read_r+0x1e>
 8013e20:	602b      	str	r3, [r5, #0]
 8013e22:	bd38      	pop	{r3, r4, r5, pc}
 8013e24:	2000165c 	.word	0x2000165c

08013e28 <sqrt>:
 8013e28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013e2c:	ed2d 8b02 	vpush	{d8}
 8013e30:	b08b      	sub	sp, #44	; 0x2c
 8013e32:	ec55 4b10 	vmov	r4, r5, d0
 8013e36:	f000 f851 	bl	8013edc <__ieee754_sqrt>
 8013e3a:	4b26      	ldr	r3, [pc, #152]	; (8013ed4 <sqrt+0xac>)
 8013e3c:	eeb0 8a40 	vmov.f32	s16, s0
 8013e40:	eef0 8a60 	vmov.f32	s17, s1
 8013e44:	f993 6000 	ldrsb.w	r6, [r3]
 8013e48:	1c73      	adds	r3, r6, #1
 8013e4a:	d02a      	beq.n	8013ea2 <sqrt+0x7a>
 8013e4c:	4622      	mov	r2, r4
 8013e4e:	462b      	mov	r3, r5
 8013e50:	4620      	mov	r0, r4
 8013e52:	4629      	mov	r1, r5
 8013e54:	f7ec fe62 	bl	8000b1c <__aeabi_dcmpun>
 8013e58:	4607      	mov	r7, r0
 8013e5a:	bb10      	cbnz	r0, 8013ea2 <sqrt+0x7a>
 8013e5c:	f04f 0800 	mov.w	r8, #0
 8013e60:	f04f 0900 	mov.w	r9, #0
 8013e64:	4642      	mov	r2, r8
 8013e66:	464b      	mov	r3, r9
 8013e68:	4620      	mov	r0, r4
 8013e6a:	4629      	mov	r1, r5
 8013e6c:	f7ec fe2e 	bl	8000acc <__aeabi_dcmplt>
 8013e70:	b1b8      	cbz	r0, 8013ea2 <sqrt+0x7a>
 8013e72:	2301      	movs	r3, #1
 8013e74:	9300      	str	r3, [sp, #0]
 8013e76:	4b18      	ldr	r3, [pc, #96]	; (8013ed8 <sqrt+0xb0>)
 8013e78:	9301      	str	r3, [sp, #4]
 8013e7a:	9708      	str	r7, [sp, #32]
 8013e7c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8013e80:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8013e84:	b9b6      	cbnz	r6, 8013eb4 <sqrt+0x8c>
 8013e86:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8013e8a:	4668      	mov	r0, sp
 8013e8c:	f000 f8d6 	bl	801403c <matherr>
 8013e90:	b1d0      	cbz	r0, 8013ec8 <sqrt+0xa0>
 8013e92:	9b08      	ldr	r3, [sp, #32]
 8013e94:	b11b      	cbz	r3, 8013e9e <sqrt+0x76>
 8013e96:	f7fe ff8f 	bl	8012db8 <__errno>
 8013e9a:	9b08      	ldr	r3, [sp, #32]
 8013e9c:	6003      	str	r3, [r0, #0]
 8013e9e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8013ea2:	eeb0 0a48 	vmov.f32	s0, s16
 8013ea6:	eef0 0a68 	vmov.f32	s1, s17
 8013eaa:	b00b      	add	sp, #44	; 0x2c
 8013eac:	ecbd 8b02 	vpop	{d8}
 8013eb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013eb4:	4642      	mov	r2, r8
 8013eb6:	464b      	mov	r3, r9
 8013eb8:	4640      	mov	r0, r8
 8013eba:	4649      	mov	r1, r9
 8013ebc:	f7ec fcbe 	bl	800083c <__aeabi_ddiv>
 8013ec0:	2e02      	cmp	r6, #2
 8013ec2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013ec6:	d1e0      	bne.n	8013e8a <sqrt+0x62>
 8013ec8:	f7fe ff76 	bl	8012db8 <__errno>
 8013ecc:	2321      	movs	r3, #33	; 0x21
 8013ece:	6003      	str	r3, [r0, #0]
 8013ed0:	e7df      	b.n	8013e92 <sqrt+0x6a>
 8013ed2:	bf00      	nop
 8013ed4:	200000e8 	.word	0x200000e8
 8013ed8:	08014643 	.word	0x08014643

08013edc <__ieee754_sqrt>:
 8013edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ee0:	4955      	ldr	r1, [pc, #340]	; (8014038 <__ieee754_sqrt+0x15c>)
 8013ee2:	ec55 4b10 	vmov	r4, r5, d0
 8013ee6:	43a9      	bics	r1, r5
 8013ee8:	462b      	mov	r3, r5
 8013eea:	462a      	mov	r2, r5
 8013eec:	d112      	bne.n	8013f14 <__ieee754_sqrt+0x38>
 8013eee:	ee10 2a10 	vmov	r2, s0
 8013ef2:	ee10 0a10 	vmov	r0, s0
 8013ef6:	4629      	mov	r1, r5
 8013ef8:	f7ec fb76 	bl	80005e8 <__aeabi_dmul>
 8013efc:	4602      	mov	r2, r0
 8013efe:	460b      	mov	r3, r1
 8013f00:	4620      	mov	r0, r4
 8013f02:	4629      	mov	r1, r5
 8013f04:	f7ec f9ba 	bl	800027c <__adddf3>
 8013f08:	4604      	mov	r4, r0
 8013f0a:	460d      	mov	r5, r1
 8013f0c:	ec45 4b10 	vmov	d0, r4, r5
 8013f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f14:	2d00      	cmp	r5, #0
 8013f16:	ee10 0a10 	vmov	r0, s0
 8013f1a:	4621      	mov	r1, r4
 8013f1c:	dc0f      	bgt.n	8013f3e <__ieee754_sqrt+0x62>
 8013f1e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013f22:	4330      	orrs	r0, r6
 8013f24:	d0f2      	beq.n	8013f0c <__ieee754_sqrt+0x30>
 8013f26:	b155      	cbz	r5, 8013f3e <__ieee754_sqrt+0x62>
 8013f28:	ee10 2a10 	vmov	r2, s0
 8013f2c:	4620      	mov	r0, r4
 8013f2e:	4629      	mov	r1, r5
 8013f30:	f7ec f9a2 	bl	8000278 <__aeabi_dsub>
 8013f34:	4602      	mov	r2, r0
 8013f36:	460b      	mov	r3, r1
 8013f38:	f7ec fc80 	bl	800083c <__aeabi_ddiv>
 8013f3c:	e7e4      	b.n	8013f08 <__ieee754_sqrt+0x2c>
 8013f3e:	151b      	asrs	r3, r3, #20
 8013f40:	d073      	beq.n	801402a <__ieee754_sqrt+0x14e>
 8013f42:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013f46:	07dd      	lsls	r5, r3, #31
 8013f48:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8013f4c:	bf48      	it	mi
 8013f4e:	0fc8      	lsrmi	r0, r1, #31
 8013f50:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8013f54:	bf44      	itt	mi
 8013f56:	0049      	lslmi	r1, r1, #1
 8013f58:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8013f5c:	2500      	movs	r5, #0
 8013f5e:	1058      	asrs	r0, r3, #1
 8013f60:	0fcb      	lsrs	r3, r1, #31
 8013f62:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8013f66:	0049      	lsls	r1, r1, #1
 8013f68:	2316      	movs	r3, #22
 8013f6a:	462c      	mov	r4, r5
 8013f6c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8013f70:	19a7      	adds	r7, r4, r6
 8013f72:	4297      	cmp	r7, r2
 8013f74:	bfde      	ittt	le
 8013f76:	19bc      	addle	r4, r7, r6
 8013f78:	1bd2      	suble	r2, r2, r7
 8013f7a:	19ad      	addle	r5, r5, r6
 8013f7c:	0fcf      	lsrs	r7, r1, #31
 8013f7e:	3b01      	subs	r3, #1
 8013f80:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8013f84:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013f88:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8013f8c:	d1f0      	bne.n	8013f70 <__ieee754_sqrt+0x94>
 8013f8e:	f04f 0c20 	mov.w	ip, #32
 8013f92:	469e      	mov	lr, r3
 8013f94:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8013f98:	42a2      	cmp	r2, r4
 8013f9a:	eb06 070e 	add.w	r7, r6, lr
 8013f9e:	dc02      	bgt.n	8013fa6 <__ieee754_sqrt+0xca>
 8013fa0:	d112      	bne.n	8013fc8 <__ieee754_sqrt+0xec>
 8013fa2:	428f      	cmp	r7, r1
 8013fa4:	d810      	bhi.n	8013fc8 <__ieee754_sqrt+0xec>
 8013fa6:	2f00      	cmp	r7, #0
 8013fa8:	eb07 0e06 	add.w	lr, r7, r6
 8013fac:	da42      	bge.n	8014034 <__ieee754_sqrt+0x158>
 8013fae:	f1be 0f00 	cmp.w	lr, #0
 8013fb2:	db3f      	blt.n	8014034 <__ieee754_sqrt+0x158>
 8013fb4:	f104 0801 	add.w	r8, r4, #1
 8013fb8:	1b12      	subs	r2, r2, r4
 8013fba:	428f      	cmp	r7, r1
 8013fbc:	bf88      	it	hi
 8013fbe:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8013fc2:	1bc9      	subs	r1, r1, r7
 8013fc4:	4433      	add	r3, r6
 8013fc6:	4644      	mov	r4, r8
 8013fc8:	0052      	lsls	r2, r2, #1
 8013fca:	f1bc 0c01 	subs.w	ip, ip, #1
 8013fce:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8013fd2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8013fd6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013fda:	d1dd      	bne.n	8013f98 <__ieee754_sqrt+0xbc>
 8013fdc:	430a      	orrs	r2, r1
 8013fde:	d006      	beq.n	8013fee <__ieee754_sqrt+0x112>
 8013fe0:	1c5c      	adds	r4, r3, #1
 8013fe2:	bf13      	iteet	ne
 8013fe4:	3301      	addne	r3, #1
 8013fe6:	3501      	addeq	r5, #1
 8013fe8:	4663      	moveq	r3, ip
 8013fea:	f023 0301 	bicne.w	r3, r3, #1
 8013fee:	106a      	asrs	r2, r5, #1
 8013ff0:	085b      	lsrs	r3, r3, #1
 8013ff2:	07e9      	lsls	r1, r5, #31
 8013ff4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8013ff8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8013ffc:	bf48      	it	mi
 8013ffe:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8014002:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8014006:	461c      	mov	r4, r3
 8014008:	e780      	b.n	8013f0c <__ieee754_sqrt+0x30>
 801400a:	0aca      	lsrs	r2, r1, #11
 801400c:	3815      	subs	r0, #21
 801400e:	0549      	lsls	r1, r1, #21
 8014010:	2a00      	cmp	r2, #0
 8014012:	d0fa      	beq.n	801400a <__ieee754_sqrt+0x12e>
 8014014:	02d6      	lsls	r6, r2, #11
 8014016:	d50a      	bpl.n	801402e <__ieee754_sqrt+0x152>
 8014018:	f1c3 0420 	rsb	r4, r3, #32
 801401c:	fa21 f404 	lsr.w	r4, r1, r4
 8014020:	1e5d      	subs	r5, r3, #1
 8014022:	4099      	lsls	r1, r3
 8014024:	4322      	orrs	r2, r4
 8014026:	1b43      	subs	r3, r0, r5
 8014028:	e78b      	b.n	8013f42 <__ieee754_sqrt+0x66>
 801402a:	4618      	mov	r0, r3
 801402c:	e7f0      	b.n	8014010 <__ieee754_sqrt+0x134>
 801402e:	0052      	lsls	r2, r2, #1
 8014030:	3301      	adds	r3, #1
 8014032:	e7ef      	b.n	8014014 <__ieee754_sqrt+0x138>
 8014034:	46a0      	mov	r8, r4
 8014036:	e7bf      	b.n	8013fb8 <__ieee754_sqrt+0xdc>
 8014038:	7ff00000 	.word	0x7ff00000

0801403c <matherr>:
 801403c:	2000      	movs	r0, #0
 801403e:	4770      	bx	lr

08014040 <_init>:
 8014040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014042:	bf00      	nop
 8014044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014046:	bc08      	pop	{r3}
 8014048:	469e      	mov	lr, r3
 801404a:	4770      	bx	lr

0801404c <_fini>:
 801404c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801404e:	bf00      	nop
 8014050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014052:	bc08      	pop	{r3}
 8014054:	469e      	mov	lr, r3
 8014056:	4770      	bx	lr
