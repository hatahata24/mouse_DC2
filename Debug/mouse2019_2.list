
mouse2019_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013f2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  080140bc  080140bc  000240bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801468c  0801468c  000300ec  2**0
                  CONTENTS
  4 .ARM          00000008  0801468c  0801468c  0002468c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014694  08014694  000300ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014694  08014694  00024694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014698  08014698  00024698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  0801469c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001570  200000ec  08014788  000300ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000165c  08014788  0003165c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f96  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030c6  00000000  00000000  000470b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001428  00000000  00000000  0004a178  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012d8  00000000  00000000  0004b5a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022ee5  00000000  00000000  0004c878  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010ea6  00000000  00000000  0006f75d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9514  00000000  00000000  00080603  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00149b17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e30  00000000  00000000  00149b94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000ec 	.word	0x200000ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080140a4 	.word	0x080140a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f0 	.word	0x200000f0
 80001cc:	080140a4 	.word	0x080140a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b972 	b.w	8000f34 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4688      	mov	r8, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14b      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4615      	mov	r5, r2
 8000c7a:	d967      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0720 	rsb	r7, r2, #32
 8000c86:	fa01 f302 	lsl.w	r3, r1, r2
 8000c8a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c8e:	4095      	lsls	r5, r2
 8000c90:	ea47 0803 	orr.w	r8, r7, r3
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ca0:	fa1f fc85 	uxth.w	ip, r5
 8000ca4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ca8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cac:	fb07 f10c 	mul.w	r1, r7, ip
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18eb      	adds	r3, r5, r3
 8000cb6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cba:	f080 811b 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8118 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cc4:	3f02      	subs	r7, #2
 8000cc6:	442b      	add	r3, r5
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cdc:	45a4      	cmp	ip, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	192c      	adds	r4, r5, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8107 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	f240 8104 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	442c      	add	r4, r5
 8000cf4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cf8:	eba4 040c 	sub.w	r4, r4, ip
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	b11e      	cbz	r6, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c6 4300 	strd	r4, r3, [r6]
 8000d08:	4639      	mov	r1, r7
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0xbe>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80eb 	beq.w	8000eee <__udivmoddi4+0x286>
 8000d18:	2700      	movs	r7, #0
 8000d1a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d1e:	4638      	mov	r0, r7
 8000d20:	4639      	mov	r1, r7
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f783 	clz	r7, r3
 8000d2a:	2f00      	cmp	r7, #0
 8000d2c:	d147      	bne.n	8000dbe <__udivmoddi4+0x156>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0xd0>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80fa 	bhi.w	8000f2c <__udivmoddi4+0x2c4>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	4698      	mov	r8, r3
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d0e0      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000d46:	e9c6 4800 	strd	r4, r8, [r6]
 8000d4a:	e7dd      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000d4c:	b902      	cbnz	r2, 8000d50 <__udivmoddi4+0xe8>
 8000d4e:	deff      	udf	#255	; 0xff
 8000d50:	fab2 f282 	clz	r2, r2
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f040 808f 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d5a:	1b49      	subs	r1, r1, r5
 8000d5c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d60:	fa1f f885 	uxth.w	r8, r5
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb08 f10c 	mul.w	r1, r8, ip
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7c:	18eb      	adds	r3, r5, r3
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4299      	cmp	r1, r3
 8000d86:	f200 80cd 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d98:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x14c>
 8000da4:	192c      	adds	r4, r5, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x14a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80b6 	bhi.w	8000f1e <__udivmoddi4+0x2b6>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e79f      	b.n	8000cfe <__udivmoddi4+0x96>
 8000dbe:	f1c7 0c20 	rsb	ip, r7, #32
 8000dc2:	40bb      	lsls	r3, r7
 8000dc4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dc8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dcc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dd0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dd4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dd8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ddc:	4325      	orrs	r5, r4
 8000dde:	fbb3 f9f8 	udiv	r9, r3, r8
 8000de2:	0c2c      	lsrs	r4, r5, #16
 8000de4:	fb08 3319 	mls	r3, r8, r9, r3
 8000de8:	fa1f fa8e 	uxth.w	sl, lr
 8000dec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000df0:	fb09 f40a 	mul.w	r4, r9, sl
 8000df4:	429c      	cmp	r4, r3
 8000df6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dfa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1e 0303 	adds.w	r3, lr, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	f080 8087 	bcs.w	8000f1a <__udivmoddi4+0x2b2>
 8000e0c:	429c      	cmp	r4, r3
 8000e0e:	f240 8084 	bls.w	8000f1a <__udivmoddi4+0x2b2>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4473      	add	r3, lr
 8000e18:	1b1b      	subs	r3, r3, r4
 8000e1a:	b2ad      	uxth	r5, r5
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3310 	mls	r3, r8, r0, r3
 8000e24:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e28:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e2c:	45a2      	cmp	sl, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1e 0404 	adds.w	r4, lr, r4
 8000e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e38:	d26b      	bcs.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3a:	45a2      	cmp	sl, r4
 8000e3c:	d969      	bls.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4474      	add	r4, lr
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	eba4 040a 	sub.w	r4, r4, sl
 8000e4e:	454c      	cmp	r4, r9
 8000e50:	46c2      	mov	sl, r8
 8000e52:	464b      	mov	r3, r9
 8000e54:	d354      	bcc.n	8000f00 <__udivmoddi4+0x298>
 8000e56:	d051      	beq.n	8000efc <__udivmoddi4+0x294>
 8000e58:	2e00      	cmp	r6, #0
 8000e5a:	d069      	beq.n	8000f30 <__udivmoddi4+0x2c8>
 8000e5c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e60:	eb64 0403 	sbc.w	r4, r4, r3
 8000e64:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e68:	40fd      	lsrs	r5, r7
 8000e6a:	40fc      	lsrs	r4, r7
 8000e6c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e70:	e9c6 5400 	strd	r5, r4, [r6]
 8000e74:	2700      	movs	r7, #0
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e80:	4095      	lsls	r5, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	fa21 f303 	lsr.w	r3, r1, r3
 8000e8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e8e:	4338      	orrs	r0, r7
 8000e90:	0c01      	lsrs	r1, r0, #16
 8000e92:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e96:	fa1f f885 	uxth.w	r8, r5
 8000e9a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb07 f308 	mul.w	r3, r7, r8
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x256>
 8000eae:	1869      	adds	r1, r5, r1
 8000eb0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000eb4:	d22f      	bcs.n	8000f16 <__udivmoddi4+0x2ae>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d92d      	bls.n	8000f16 <__udivmoddi4+0x2ae>
 8000eba:	3f02      	subs	r7, #2
 8000ebc:	4429      	add	r1, r5
 8000ebe:	1acb      	subs	r3, r1, r3
 8000ec0:	b281      	uxth	r1, r0
 8000ec2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ece:	fb00 f308 	mul.w	r3, r0, r8
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x27e>
 8000ed6:	1869      	adds	r1, r5, r1
 8000ed8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000edc:	d217      	bcs.n	8000f0e <__udivmoddi4+0x2a6>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d915      	bls.n	8000f0e <__udivmoddi4+0x2a6>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4429      	add	r1, r5
 8000ee6:	1ac9      	subs	r1, r1, r3
 8000ee8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eec:	e73b      	b.n	8000d66 <__udivmoddi4+0xfe>
 8000eee:	4637      	mov	r7, r6
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	e709      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef4:	4607      	mov	r7, r0
 8000ef6:	e6e7      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef8:	4618      	mov	r0, r3
 8000efa:	e6fb      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000efc:	4541      	cmp	r1, r8
 8000efe:	d2ab      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f00:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f04:	eb69 020e 	sbc.w	r2, r9, lr
 8000f08:	3801      	subs	r0, #1
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	e7a4      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f0e:	4660      	mov	r0, ip
 8000f10:	e7e9      	b.n	8000ee6 <__udivmoddi4+0x27e>
 8000f12:	4618      	mov	r0, r3
 8000f14:	e795      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f16:	4667      	mov	r7, ip
 8000f18:	e7d1      	b.n	8000ebe <__udivmoddi4+0x256>
 8000f1a:	4681      	mov	r9, r0
 8000f1c:	e77c      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	442c      	add	r4, r5
 8000f22:	e747      	b.n	8000db4 <__udivmoddi4+0x14c>
 8000f24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f28:	442b      	add	r3, r5
 8000f2a:	e72f      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	e708      	b.n	8000d42 <__udivmoddi4+0xda>
 8000f30:	4637      	mov	r7, r6
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0xa0>

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <HAL_Init+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0d      	ldr	r2, [pc, #52]	; (8000f78 <HAL_Init+0x40>)
 8000f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <HAL_Init+0x40>)
 8000f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <HAL_Init+0x40>)
 8000f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f60:	2003      	movs	r0, #3
 8000f62:	f000 fd07 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f000 f808 	bl	8000f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f6c:	f011 fb70 	bl	8012650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40023c00 	.word	0x40023c00

08000f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_InitTick+0x54>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_InitTick+0x58>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fd1f 	bl	80019de <HAL_SYSTICK_Config>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00e      	b.n	8000fc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d80a      	bhi.n	8000fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f000 fce7 	bl	800198a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <HAL_InitTick+0x5c>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e000      	b.n	8000fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000080 	.word	0x20000080
 8000fd4:	20000004 	.word	0x20000004
 8000fd8:	20000000 	.word	0x20000000

08000fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x20>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x24>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <HAL_IncTick+0x24>)
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000004 	.word	0x20000004
 8001000:	20000120 	.word	0x20000120

08001004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return uwTick;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <HAL_GetTick+0x14>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000120 	.word	0x20000120

0800101c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001024:	f7ff ffee 	bl	8001004 <HAL_GetTick>
 8001028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001034:	d005      	beq.n	8001042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <HAL_Delay+0x40>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4413      	add	r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001042:	bf00      	nop
 8001044:	f7ff ffde 	bl	8001004 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	429a      	cmp	r2, r3
 8001052:	d8f7      	bhi.n	8001044 <HAL_Delay+0x28>
  {
  }
}
 8001054:	bf00      	nop
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000004 	.word	0x20000004

08001060 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001068:	2300      	movs	r3, #0
 800106a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e033      	b.n	80010de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	2b00      	cmp	r3, #0
 800107c:	d109      	bne.n	8001092 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f011 fb0e 	bl	80126a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f003 0310 	and.w	r3, r3, #16
 800109a:	2b00      	cmp	r3, #0
 800109c:	d118      	bne.n	80010d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010a6:	f023 0302 	bic.w	r3, r3, #2
 80010aa:	f043 0202 	orr.w	r2, r3, #2
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 fa92 	bl	80015dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f023 0303 	bic.w	r3, r3, #3
 80010c6:	f043 0201 	orr.w	r2, r3, #1
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	641a      	str	r2, [r3, #64]	; 0x40
 80010ce:	e001      	b.n	80010d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d101      	bne.n	8001102 <HAL_ADC_Start+0x1a>
 80010fe:	2302      	movs	r3, #2
 8001100:	e0a5      	b.n	800124e <HAL_ADC_Start+0x166>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b01      	cmp	r3, #1
 8001116:	d018      	beq.n	800114a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 0201 	orr.w	r2, r2, #1
 8001126:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001128:	4b4c      	ldr	r3, [pc, #304]	; (800125c <HAL_ADC_Start+0x174>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a4c      	ldr	r2, [pc, #304]	; (8001260 <HAL_ADC_Start+0x178>)
 800112e:	fba2 2303 	umull	r2, r3, r2, r3
 8001132:	0c9a      	lsrs	r2, r3, #18
 8001134:	4613      	mov	r3, r2
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	4413      	add	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800113c:	e002      	b.n	8001144 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	3b01      	subs	r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f9      	bne.n	800113e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	2b01      	cmp	r3, #1
 8001156:	d179      	bne.n	800124c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001160:	f023 0301 	bic.w	r3, r3, #1
 8001164:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001176:	2b00      	cmp	r3, #0
 8001178:	d007      	beq.n	800118a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001182:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001196:	d106      	bne.n	80011a6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119c:	f023 0206 	bic.w	r2, r3, #6
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	645a      	str	r2, [r3, #68]	; 0x44
 80011a4:	e002      	b.n	80011ac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011b4:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011b6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011c0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 031f 	and.w	r3, r3, #31
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d12a      	bne.n	8001224 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a25      	ldr	r2, [pc, #148]	; (8001268 <HAL_ADC_Start+0x180>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d015      	beq.n	8001204 <HAL_ADC_Start+0x11c>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a23      	ldr	r2, [pc, #140]	; (800126c <HAL_ADC_Start+0x184>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d105      	bne.n	80011ee <HAL_ADC_Start+0x106>
 80011e2:	4b20      	ldr	r3, [pc, #128]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 031f 	and.w	r3, r3, #31
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00a      	beq.n	8001204 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a1f      	ldr	r2, [pc, #124]	; (8001270 <HAL_ADC_Start+0x188>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d129      	bne.n	800124c <HAL_ADC_Start+0x164>
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 031f 	and.w	r3, r3, #31
 8001200:	2b0f      	cmp	r3, #15
 8001202:	d823      	bhi.n	800124c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d11c      	bne.n	800124c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	e013      	b.n	800124c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <HAL_ADC_Start+0x180>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d10e      	bne.n	800124c <HAL_ADC_Start+0x164>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d107      	bne.n	800124c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800124a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000080 	.word	0x20000080
 8001260:	431bde83 	.word	0x431bde83
 8001264:	40012300 	.word	0x40012300
 8001268:	40012000 	.word	0x40012000
 800126c:	40012100 	.word	0x40012100
 8001270:	40012200 	.word	0x40012200

08001274 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800128c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001290:	d113      	bne.n	80012ba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800129c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012a0:	d10b      	bne.n	80012ba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f043 0220 	orr.w	r2, r3, #32
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e05c      	b.n	8001374 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80012ba:	f7ff fea3 	bl	8001004 <HAL_GetTick>
 80012be:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012c0:	e01a      	b.n	80012f8 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c8:	d016      	beq.n	80012f8 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d007      	beq.n	80012e0 <HAL_ADC_PollForConversion+0x6c>
 80012d0:	f7ff fe98 	bl	8001004 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	683a      	ldr	r2, [r7, #0]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d20b      	bcs.n	80012f8 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	f043 0204 	orr.w	r2, r3, #4
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e03d      	b.n	8001374 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b02      	cmp	r3, #2
 8001304:	d1dd      	bne.n	80012c2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f06f 0212 	mvn.w	r2, #18
 800130e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d123      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800132e:	2b00      	cmp	r3, #0
 8001330:	d11f      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800133c:	2b00      	cmp	r3, #0
 800133e:	d006      	beq.n	800134e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800134a:	2b00      	cmp	r3, #0
 800134c:	d111      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d105      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f043 0201 	orr.w	r2, r3, #1
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d101      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x1c>
 80013b0:	2302      	movs	r3, #2
 80013b2:	e105      	b.n	80015c0 <HAL_ADC_ConfigChannel+0x228>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b09      	cmp	r3, #9
 80013c2:	d925      	bls.n	8001410 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68d9      	ldr	r1, [r3, #12]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	461a      	mov	r2, r3
 80013d2:	4613      	mov	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	3b1e      	subs	r3, #30
 80013da:	2207      	movs	r2, #7
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43da      	mvns	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	400a      	ands	r2, r1
 80013e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68d9      	ldr	r1, [r3, #12]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	4603      	mov	r3, r0
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4403      	add	r3, r0
 8001402:	3b1e      	subs	r3, #30
 8001404:	409a      	lsls	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	e022      	b.n	8001456 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6919      	ldr	r1, [r3, #16]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	b29b      	uxth	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	4613      	mov	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4413      	add	r3, r2
 8001424:	2207      	movs	r2, #7
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43da      	mvns	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	400a      	ands	r2, r1
 8001432:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6919      	ldr	r1, [r3, #16]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	b29b      	uxth	r3, r3
 8001444:	4618      	mov	r0, r3
 8001446:	4603      	mov	r3, r0
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4403      	add	r3, r0
 800144c:	409a      	lsls	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b06      	cmp	r3, #6
 800145c:	d824      	bhi.n	80014a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	3b05      	subs	r3, #5
 8001470:	221f      	movs	r2, #31
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	400a      	ands	r2, r1
 800147e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b29b      	uxth	r3, r3
 800148c:	4618      	mov	r0, r3
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	3b05      	subs	r3, #5
 800149a:	fa00 f203 	lsl.w	r2, r0, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	635a      	str	r2, [r3, #52]	; 0x34
 80014a6:	e04c      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b0c      	cmp	r3, #12
 80014ae:	d824      	bhi.n	80014fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	3b23      	subs	r3, #35	; 0x23
 80014c2:	221f      	movs	r2, #31
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43da      	mvns	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	400a      	ands	r2, r1
 80014d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	3b23      	subs	r3, #35	; 0x23
 80014ec:	fa00 f203 	lsl.w	r2, r0, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	631a      	str	r2, [r3, #48]	; 0x30
 80014f8:	e023      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	3b41      	subs	r3, #65	; 0x41
 800150c:	221f      	movs	r2, #31
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	400a      	ands	r2, r1
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	b29b      	uxth	r3, r3
 8001528:	4618      	mov	r0, r3
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	3b41      	subs	r3, #65	; 0x41
 8001536:	fa00 f203 	lsl.w	r2, r0, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001542:	4b22      	ldr	r3, [pc, #136]	; (80015cc <HAL_ADC_ConfigChannel+0x234>)
 8001544:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a21      	ldr	r2, [pc, #132]	; (80015d0 <HAL_ADC_ConfigChannel+0x238>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d109      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1cc>
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b12      	cmp	r3, #18
 8001556:	d105      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a19      	ldr	r2, [pc, #100]	; (80015d0 <HAL_ADC_ConfigChannel+0x238>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d123      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b10      	cmp	r3, #16
 8001574:	d003      	beq.n	800157e <HAL_ADC_ConfigChannel+0x1e6>
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b11      	cmp	r3, #17
 800157c:	d11b      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b10      	cmp	r3, #16
 8001590:	d111      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <HAL_ADC_ConfigChannel+0x23c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a10      	ldr	r2, [pc, #64]	; (80015d8 <HAL_ADC_ConfigChannel+0x240>)
 8001598:	fba2 2303 	umull	r2, r3, r2, r3
 800159c:	0c9a      	lsrs	r2, r3, #18
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015a8:	e002      	b.n	80015b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f9      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	40012300 	.word	0x40012300
 80015d0:	40012000 	.word	0x40012000
 80015d4:	20000080 	.word	0x20000080
 80015d8:	431bde83 	.word	0x431bde83

080015dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015e4:	4b79      	ldr	r3, [pc, #484]	; (80017cc <ADC_Init+0x1f0>)
 80015e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	431a      	orrs	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001610:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6859      	ldr	r1, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	021a      	lsls	r2, r3, #8
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001634:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6859      	ldr	r1, [r3, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001656:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6899      	ldr	r1, [r3, #8]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166e:	4a58      	ldr	r2, [pc, #352]	; (80017d0 <ADC_Init+0x1f4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d022      	beq.n	80016ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001682:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6899      	ldr	r1, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6899      	ldr	r1, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	e00f      	b.n	80016da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0202 	bic.w	r2, r2, #2
 80016e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6899      	ldr	r1, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	7e1b      	ldrb	r3, [r3, #24]
 80016f4:	005a      	lsls	r2, r3, #1
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d01b      	beq.n	8001740 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001716:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001726:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6859      	ldr	r1, [r3, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	3b01      	subs	r3, #1
 8001734:	035a      	lsls	r2, r3, #13
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	e007      	b.n	8001750 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800174e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800175e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	3b01      	subs	r3, #1
 800176c:	051a      	lsls	r2, r3, #20
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001784:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6899      	ldr	r1, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001792:	025a      	lsls	r2, r3, #9
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6899      	ldr	r1, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	029a      	lsls	r2, r3, #10
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	609a      	str	r2, [r3, #8]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	40012300 	.word	0x40012300
 80017d0:	0f000001 	.word	0x0f000001

080017d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001806:	4a04      	ldr	r2, [pc, #16]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	60d3      	str	r3, [r2, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <__NVIC_GetPriorityGrouping+0x18>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 0307 	and.w	r3, r3, #7
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	2b00      	cmp	r3, #0
 8001848:	db0b      	blt.n	8001862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f003 021f 	and.w	r2, r3, #31
 8001850:	4907      	ldr	r1, [pc, #28]	; (8001870 <__NVIC_EnableIRQ+0x38>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	2001      	movs	r0, #1
 800185a:	fa00 f202 	lsl.w	r2, r0, r2
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000e100 	.word	0xe000e100

08001874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	6039      	str	r1, [r7, #0]
 800187e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	2b00      	cmp	r3, #0
 8001886:	db0a      	blt.n	800189e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	490c      	ldr	r1, [pc, #48]	; (80018c0 <__NVIC_SetPriority+0x4c>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	440b      	add	r3, r1
 8001898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800189c:	e00a      	b.n	80018b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4908      	ldr	r1, [pc, #32]	; (80018c4 <__NVIC_SetPriority+0x50>)
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	3b04      	subs	r3, #4
 80018ac:	0112      	lsls	r2, r2, #4
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	440b      	add	r3, r1
 80018b2:	761a      	strb	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000e100 	.word	0xe000e100
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f1c3 0307 	rsb	r3, r3, #7
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	bf28      	it	cs
 80018e6:	2304      	movcs	r3, #4
 80018e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3304      	adds	r3, #4
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d902      	bls.n	80018f8 <NVIC_EncodePriority+0x30>
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3b03      	subs	r3, #3
 80018f6:	e000      	b.n	80018fa <NVIC_EncodePriority+0x32>
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	401a      	ands	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	43d9      	mvns	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	4313      	orrs	r3, r2
         );
}
 8001922:	4618      	mov	r0, r3
 8001924:	3724      	adds	r7, #36	; 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001940:	d301      	bcc.n	8001946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001942:	2301      	movs	r3, #1
 8001944:	e00f      	b.n	8001966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <SysTick_Config+0x40>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194e:	210f      	movs	r1, #15
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f7ff ff8e 	bl	8001874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <SysTick_Config+0x40>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195e:	4b04      	ldr	r3, [pc, #16]	; (8001970 <SysTick_Config+0x40>)
 8001960:	2207      	movs	r2, #7
 8001962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	e000e010 	.word	0xe000e010

08001974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff29 	bl	80017d4 <__NVIC_SetPriorityGrouping>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800199c:	f7ff ff3e 	bl	800181c <__NVIC_GetPriorityGrouping>
 80019a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	6978      	ldr	r0, [r7, #20]
 80019a8:	f7ff ff8e 	bl	80018c8 <NVIC_EncodePriority>
 80019ac:	4602      	mov	r2, r0
 80019ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff5d 	bl	8001874 <__NVIC_SetPriority>
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff31 	bl	8001838 <__NVIC_EnableIRQ>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ffa2 	bl	8001930 <SysTick_Config>
 80019ec:	4603      	mov	r3, r0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a0a:	4b23      	ldr	r3, [pc, #140]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a0c:	7e1b      	ldrb	r3, [r3, #24]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_FLASH_Program+0x1e>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e03b      	b.n	8001a8e <HAL_FLASH_Program+0x96>
 8001a16:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a20:	f000 f870 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001a24:	4603      	mov	r3, r0
 8001a26:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d12b      	bne.n	8001a86 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d105      	bne.n	8001a40 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001a34:	783b      	ldrb	r3, [r7, #0]
 8001a36:	4619      	mov	r1, r3
 8001a38:	68b8      	ldr	r0, [r7, #8]
 8001a3a:	f000 f917 	bl	8001c6c <FLASH_Program_Byte>
 8001a3e:	e016      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d105      	bne.n	8001a52 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001a46:	883b      	ldrh	r3, [r7, #0]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	68b8      	ldr	r0, [r7, #8]
 8001a4c:	f000 f8ea 	bl	8001c24 <FLASH_Program_HalfWord>
 8001a50:	e00d      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d105      	bne.n	8001a64 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	68b8      	ldr	r0, [r7, #8]
 8001a5e:	f000 f8bf 	bl	8001be0 <FLASH_Program_Word>
 8001a62:	e004      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001a64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a68:	68b8      	ldr	r0, [r7, #8]
 8001a6a:	f000 f88b 	bl	8001b84 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a6e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a72:	f000 f847 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001a76:	4603      	mov	r3, r0
 8001a78:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_FLASH_Program+0xa4>)
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	4a07      	ldr	r2, [pc, #28]	; (8001a9c <HAL_FLASH_Program+0xa4>)
 8001a80:	f023 0301 	bic.w	r3, r3, #1
 8001a84:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a86:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000124 	.word	0x20000124
 8001a9c:	40023c00 	.word	0x40023c00

08001aa0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	da0b      	bge.n	8001aca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001ab4:	4a09      	ldr	r2, [pc, #36]	; (8001adc <HAL_FLASH_Unlock+0x3c>)
 8001ab6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001ab8:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001aba:	4a09      	ldr	r2, [pc, #36]	; (8001ae0 <HAL_FLASH_Unlock+0x40>)
 8001abc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	da01      	bge.n	8001aca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001aca:	79fb      	ldrb	r3, [r7, #7]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	40023c00 	.word	0x40023c00
 8001adc:	45670123 	.word	0x45670123
 8001ae0:	cdef89ab 	.word	0xcdef89ab

08001ae4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_FLASH_Lock+0x1c>)
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <HAL_FLASH_Lock+0x1c>)
 8001aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001af2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	40023c00 	.word	0x40023c00

08001b04 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b10:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <FLASH_WaitForLastOperation+0x78>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b16:	f7ff fa75 	bl	8001004 <HAL_GetTick>
 8001b1a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b1c:	e010      	b.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b24:	d00c      	beq.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d007      	beq.n	8001b3c <FLASH_WaitForLastOperation+0x38>
 8001b2c:	f7ff fa6a 	bl	8001004 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d201      	bcs.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e019      	b.n	8001b74 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1e8      	bne.n	8001b1e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001b6a:	f000 f8a1 	bl	8001cb0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
  
}  
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000124 	.word	0x20000124
 8001b80:	40023c00 	.word	0x40023c00

08001b84 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001b84:	b490      	push	{r4, r7}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	4a11      	ldr	r2, [pc, #68]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001ba2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001ba6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001bba:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	f04f 0400 	mov.w	r4, #0
 8001bc6:	0013      	movs	r3, r2
 8001bc8:	2400      	movs	r4, #0
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	3204      	adds	r2, #4
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc90      	pop	{r4, r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40023c00 	.word	0x40023c00

08001be0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	4a0c      	ldr	r2, [pc, #48]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bf4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	4a09      	ldr	r2, [pc, #36]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	4a06      	ldr	r2, [pc, #24]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	601a      	str	r2, [r3, #0]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	40023c00 	.word	0x40023c00

08001c24 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	4a0c      	ldr	r2, [pc, #48]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	4a09      	ldr	r2, [pc, #36]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c48:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	4a06      	ldr	r2, [pc, #24]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	887a      	ldrh	r2, [r7, #2]
 8001c58:	801a      	strh	r2, [r3, #0]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40023c00 	.word	0x40023c00

08001c6c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c8c:	4b07      	ldr	r3, [pc, #28]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	4a06      	ldr	r2, [pc, #24]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	78fa      	ldrb	r2, [r7, #3]
 8001c9c:	701a      	strb	r2, [r3, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40023c00 	.word	0x40023c00

08001cb0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001cb4:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f003 0310 	and.w	r3, r3, #16
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d008      	beq.n	8001cd2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001cc0:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	f043 0310 	orr.w	r3, r3, #16
 8001cc8:	4a23      	ldr	r2, [pc, #140]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cca:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001ccc:	4b21      	ldr	r3, [pc, #132]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cce:	2210      	movs	r2, #16
 8001cd0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f003 0320 	and.w	r3, r3, #32
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d008      	beq.n	8001cf0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001cde:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f043 0308 	orr.w	r3, r3, #8
 8001ce6:	4a1c      	ldr	r2, [pc, #112]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001ce8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001cea:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cec:	2220      	movs	r2, #32
 8001cee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001cf0:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d008      	beq.n	8001d0e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001cfc:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	4a14      	ldr	r2, [pc, #80]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d06:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d0a:	2240      	movs	r2, #64	; 0x40
 8001d0c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d008      	beq.n	8001d2c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f043 0302 	orr.w	r3, r3, #2
 8001d22:	4a0d      	ldr	r2, [pc, #52]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d24:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001d26:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d28:	2280      	movs	r2, #128	; 0x80
 8001d2a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	f043 0320 	orr.w	r3, r3, #32
 8001d40:	4a05      	ldr	r2, [pc, #20]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d42:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001d44:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d46:	2202      	movs	r2, #2
 8001d48:	60da      	str	r2, [r3, #12]
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	40023c00 	.word	0x40023c00
 8001d58:	20000124 	.word	0x20000124

08001d5c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d6e:	4b31      	ldr	r3, [pc, #196]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001d70:	7e1b      	ldrb	r3, [r3, #24]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_FLASHEx_Erase+0x1e>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e058      	b.n	8001e2c <HAL_FLASHEx_Erase+0xd0>
 8001d7a:	4b2e      	ldr	r3, [pc, #184]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d84:	f7ff febe 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d148      	bne.n	8001e24 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	f04f 32ff 	mov.w	r2, #4294967295
 8001d98:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d115      	bne.n	8001dce <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	4619      	mov	r1, r3
 8001dae:	4610      	mov	r0, r2
 8001db0:	f000 f844 	bl	8001e3c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001db4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001db8:	f7ff fea4 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	4a1c      	ldr	r2, [pc, #112]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001dc6:	f023 0304 	bic.w	r3, r3, #4
 8001dca:	6113      	str	r3, [r2, #16]
 8001dcc:	e028      	b.n	8001e20 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	e01c      	b.n	8001e10 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	4619      	mov	r1, r3
 8001dde:	68b8      	ldr	r0, [r7, #8]
 8001de0:	f000 f850 	bl	8001e84 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001de4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001de8:	f7ff fe8c 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001dec:	4603      	mov	r3, r0
 8001dee:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	4a10      	ldr	r2, [pc, #64]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001df6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001dfa:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	601a      	str	r2, [r3, #0]
          break;
 8001e08:	e00a      	b.n	8001e20 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4413      	add	r3, r2
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d3da      	bcc.n	8001dd6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8001e20:	f000 f878 	bl	8001f14 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	761a      	strb	r2, [r3, #24]

  return status;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000124 	.word	0x20000124
 8001e38:	40023c00 	.word	0x40023c00

08001e3c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e48:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	4a0c      	ldr	r2, [pc, #48]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001e54:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	4a09      	ldr	r2, [pc, #36]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e5a:	f043 0304 	orr.w	r3, r3, #4
 8001e5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e70:	6113      	str	r3, [r2, #16]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40023c00 	.word	0x40023c00

08001e84 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d102      	bne.n	8001ea0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	e010      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d103      	bne.n	8001eae <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001ea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	e009      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d103      	bne.n	8001ebc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	e002      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001ebc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ec0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ec2:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	4a12      	ldr	r2, [pc, #72]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ecc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ed0:	691a      	ldr	r2, [r3, #16]
 8001ed2:	490f      	ldr	r1, [pc, #60]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001eda:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	4a0c      	ldr	r2, [pc, #48]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ee0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ee4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ee8:	691a      	ldr	r2, [r3, #16]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ef2:	f043 0302 	orr.w	r3, r3, #2
 8001ef6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f02:	6113      	str	r3, [r2, #16]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	40023c00 	.word	0x40023c00

08001f14 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8001f18:	4b20      	ldr	r3, [pc, #128]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d017      	beq.n	8001f54 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a1c      	ldr	r2, [pc, #112]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f2a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f2e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f46:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a13      	ldr	r2, [pc, #76]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f52:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d017      	beq.n	8001f90 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001f60:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f6a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f82:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f8e:	6013      	str	r3, [r2, #0]
  }
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40023c00 	.word	0x40023c00

08001fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	e16b      	b.n	8002294 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	f040 815a 	bne.w	800228e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_Init+0x4a>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b12      	cmp	r3, #18
 8001fe8:	d123      	bne.n	8002032 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	08da      	lsrs	r2, r3, #3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3208      	adds	r2, #8
 8001ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	220f      	movs	r2, #15
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	691a      	ldr	r2, [r3, #16]
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	08da      	lsrs	r2, r3, #3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3208      	adds	r2, #8
 800202c:	69b9      	ldr	r1, [r7, #24]
 800202e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	2203      	movs	r2, #3
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 0203 	and.w	r2, r3, #3
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d00b      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d007      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800207a:	2b11      	cmp	r3, #17
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b12      	cmp	r3, #18
 8002084:	d130      	bne.n	80020e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	2203      	movs	r2, #3
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020bc:	2201      	movs	r2, #1
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	091b      	lsrs	r3, r3, #4
 80020d2:	f003 0201 	and.w	r2, r3, #1
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	2203      	movs	r2, #3
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80b4 	beq.w	800228e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	4b5f      	ldr	r3, [pc, #380]	; (80022a8 <HAL_GPIO_Init+0x308>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	4a5e      	ldr	r2, [pc, #376]	; (80022a8 <HAL_GPIO_Init+0x308>)
 8002130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002134:	6453      	str	r3, [r2, #68]	; 0x44
 8002136:	4b5c      	ldr	r3, [pc, #368]	; (80022a8 <HAL_GPIO_Init+0x308>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002142:	4a5a      	ldr	r2, [pc, #360]	; (80022ac <HAL_GPIO_Init+0x30c>)
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	3302      	adds	r3, #2
 800214a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	220f      	movs	r2, #15
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a51      	ldr	r2, [pc, #324]	; (80022b0 <HAL_GPIO_Init+0x310>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d02b      	beq.n	80021c6 <HAL_GPIO_Init+0x226>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a50      	ldr	r2, [pc, #320]	; (80022b4 <HAL_GPIO_Init+0x314>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d025      	beq.n	80021c2 <HAL_GPIO_Init+0x222>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a4f      	ldr	r2, [pc, #316]	; (80022b8 <HAL_GPIO_Init+0x318>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d01f      	beq.n	80021be <HAL_GPIO_Init+0x21e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4e      	ldr	r2, [pc, #312]	; (80022bc <HAL_GPIO_Init+0x31c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d019      	beq.n	80021ba <HAL_GPIO_Init+0x21a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a4d      	ldr	r2, [pc, #308]	; (80022c0 <HAL_GPIO_Init+0x320>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d013      	beq.n	80021b6 <HAL_GPIO_Init+0x216>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4c      	ldr	r2, [pc, #304]	; (80022c4 <HAL_GPIO_Init+0x324>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d00d      	beq.n	80021b2 <HAL_GPIO_Init+0x212>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a4b      	ldr	r2, [pc, #300]	; (80022c8 <HAL_GPIO_Init+0x328>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d007      	beq.n	80021ae <HAL_GPIO_Init+0x20e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a4a      	ldr	r2, [pc, #296]	; (80022cc <HAL_GPIO_Init+0x32c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d101      	bne.n	80021aa <HAL_GPIO_Init+0x20a>
 80021a6:	2307      	movs	r3, #7
 80021a8:	e00e      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021aa:	2308      	movs	r3, #8
 80021ac:	e00c      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021ae:	2306      	movs	r3, #6
 80021b0:	e00a      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021b2:	2305      	movs	r3, #5
 80021b4:	e008      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021b6:	2304      	movs	r3, #4
 80021b8:	e006      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021ba:	2303      	movs	r3, #3
 80021bc:	e004      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021be:	2302      	movs	r3, #2
 80021c0:	e002      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021c6:	2300      	movs	r3, #0
 80021c8:	69fa      	ldr	r2, [r7, #28]
 80021ca:	f002 0203 	and.w	r2, r2, #3
 80021ce:	0092      	lsls	r2, r2, #2
 80021d0:	4093      	lsls	r3, r2
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021d8:	4934      	ldr	r1, [pc, #208]	; (80022ac <HAL_GPIO_Init+0x30c>)
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	089b      	lsrs	r3, r3, #2
 80021de:	3302      	adds	r3, #2
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021e6:	4b3a      	ldr	r3, [pc, #232]	; (80022d0 <HAL_GPIO_Init+0x330>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800220a:	4a31      	ldr	r2, [pc, #196]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002210:	4b2f      	ldr	r3, [pc, #188]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002234:	4a26      	ldr	r2, [pc, #152]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223a:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800225e:	4a1c      	ldr	r2, [pc, #112]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002288:	4a11      	ldr	r2, [pc, #68]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3301      	adds	r3, #1
 8002292:	61fb      	str	r3, [r7, #28]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	2b0f      	cmp	r3, #15
 8002298:	f67f ae90 	bls.w	8001fbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800229c:	bf00      	nop
 800229e:	3724      	adds	r7, #36	; 0x24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40013800 	.word	0x40013800
 80022b0:	40020000 	.word	0x40020000
 80022b4:	40020400 	.word	0x40020400
 80022b8:	40020800 	.word	0x40020800
 80022bc:	40020c00 	.word	0x40020c00
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40021400 	.word	0x40021400
 80022c8:	40021800 	.word	0x40021800
 80022cc:	40021c00 	.word	0x40021c00
 80022d0:	40013c00 	.word	0x40013c00

080022d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	887b      	ldrh	r3, [r7, #2]
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
 80022f0:	e001      	b.n	80022f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	807b      	strh	r3, [r7, #2]
 8002310:	4613      	mov	r3, r2
 8002312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002314:	787b      	ldrb	r3, [r7, #1]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800231a:	887a      	ldrh	r2, [r7, #2]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002320:	e003      	b.n	800232a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002322:	887b      	ldrh	r3, [r7, #2]
 8002324:	041a      	lsls	r2, r3, #16
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	619a      	str	r2, [r3, #24]
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e22d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d075      	beq.n	8002442 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002356:	4ba3      	ldr	r3, [pc, #652]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b04      	cmp	r3, #4
 8002360:	d00c      	beq.n	800237c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002362:	4ba0      	ldr	r3, [pc, #640]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800236a:	2b08      	cmp	r3, #8
 800236c:	d112      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800236e:	4b9d      	ldr	r3, [pc, #628]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002376:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800237a:	d10b      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	4b99      	ldr	r3, [pc, #612]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d05b      	beq.n	8002440 <HAL_RCC_OscConfig+0x108>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d157      	bne.n	8002440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e208      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239c:	d106      	bne.n	80023ac <HAL_RCC_OscConfig+0x74>
 800239e:	4b91      	ldr	r3, [pc, #580]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a90      	ldr	r2, [pc, #576]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	e01d      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x98>
 80023b6:	4b8b      	ldr	r3, [pc, #556]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a8a      	ldr	r2, [pc, #552]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	4b88      	ldr	r3, [pc, #544]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a87      	ldr	r2, [pc, #540]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e00b      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023d0:	4b84      	ldr	r3, [pc, #528]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a83      	ldr	r2, [pc, #524]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	4b81      	ldr	r3, [pc, #516]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a80      	ldr	r2, [pc, #512]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d013      	beq.n	8002418 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7fe fe08 	bl	8001004 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f8:	f7fe fe04 	bl	8001004 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	; 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e1cd      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240a:	4b76      	ldr	r3, [pc, #472]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0xc0>
 8002416:	e014      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7fe fdf4 	bl	8001004 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002420:	f7fe fdf0 	bl	8001004 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	; 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e1b9      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002432:	4b6c      	ldr	r3, [pc, #432]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0xe8>
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d063      	beq.n	8002516 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800244e:	4b65      	ldr	r3, [pc, #404]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00b      	beq.n	8002472 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800245a:	4b62      	ldr	r3, [pc, #392]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002462:	2b08      	cmp	r3, #8
 8002464:	d11c      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002466:	4b5f      	ldr	r3, [pc, #380]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d116      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002472:	4b5c      	ldr	r3, [pc, #368]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d005      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d001      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e18d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248a:	4b56      	ldr	r3, [pc, #344]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4952      	ldr	r1, [pc, #328]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249e:	e03a      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d020      	beq.n	80024ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a8:	4b4f      	ldr	r3, [pc, #316]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ae:	f7fe fda9 	bl	8001004 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b6:	f7fe fda5 	bl	8001004 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e16e      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c8:	4b46      	ldr	r3, [pc, #280]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d4:	4b43      	ldr	r3, [pc, #268]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4940      	ldr	r1, [pc, #256]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	600b      	str	r3, [r1, #0]
 80024e8:	e015      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ea:	4b3f      	ldr	r3, [pc, #252]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7fe fd88 	bl	8001004 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f8:	f7fe fd84 	bl	8001004 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e14d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250a:	4b36      	ldr	r3, [pc, #216]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d030      	beq.n	8002584 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d016      	beq.n	8002558 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800252a:	4b30      	ldr	r3, [pc, #192]	; (80025ec <HAL_RCC_OscConfig+0x2b4>)
 800252c:	2201      	movs	r2, #1
 800252e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002530:	f7fe fd68 	bl	8001004 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002538:	f7fe fd64 	bl	8001004 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e12d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254a:	4b26      	ldr	r3, [pc, #152]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800254c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x200>
 8002556:	e015      	b.n	8002584 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002558:	4b24      	ldr	r3, [pc, #144]	; (80025ec <HAL_RCC_OscConfig+0x2b4>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7fe fd51 	bl	8001004 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002566:	f7fe fd4d 	bl	8001004 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e116      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002578:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800257a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f0      	bne.n	8002566 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80a0 	beq.w	80026d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002592:	2300      	movs	r3, #0
 8002594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10f      	bne.n	80025c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	4a0e      	ldr	r2, [pc, #56]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b0:	6413      	str	r3, [r2, #64]	; 0x40
 80025b2:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025be:	2301      	movs	r3, #1
 80025c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d121      	bne.n	8002612 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a07      	ldr	r2, [pc, #28]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025da:	f7fe fd13 	bl	8001004 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e0:	e011      	b.n	8002606 <HAL_RCC_OscConfig+0x2ce>
 80025e2:	bf00      	nop
 80025e4:	40023800 	.word	0x40023800
 80025e8:	42470000 	.word	0x42470000
 80025ec:	42470e80 	.word	0x42470e80
 80025f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f4:	f7fe fd06 	bl	8001004 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e0cf      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002606:	4b6a      	ldr	r3, [pc, #424]	; (80027b0 <HAL_RCC_OscConfig+0x478>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d106      	bne.n	8002628 <HAL_RCC_OscConfig+0x2f0>
 800261a:	4b66      	ldr	r3, [pc, #408]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261e:	4a65      	ldr	r2, [pc, #404]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6713      	str	r3, [r2, #112]	; 0x70
 8002626:	e01c      	b.n	8002662 <HAL_RCC_OscConfig+0x32a>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b05      	cmp	r3, #5
 800262e:	d10c      	bne.n	800264a <HAL_RCC_OscConfig+0x312>
 8002630:	4b60      	ldr	r3, [pc, #384]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	4a5f      	ldr	r2, [pc, #380]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002636:	f043 0304 	orr.w	r3, r3, #4
 800263a:	6713      	str	r3, [r2, #112]	; 0x70
 800263c:	4b5d      	ldr	r3, [pc, #372]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	4a5c      	ldr	r2, [pc, #368]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6713      	str	r3, [r2, #112]	; 0x70
 8002648:	e00b      	b.n	8002662 <HAL_RCC_OscConfig+0x32a>
 800264a:	4b5a      	ldr	r3, [pc, #360]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	4a59      	ldr	r2, [pc, #356]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	6713      	str	r3, [r2, #112]	; 0x70
 8002656:	4b57      	ldr	r3, [pc, #348]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	4a56      	ldr	r2, [pc, #344]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800265c:	f023 0304 	bic.w	r3, r3, #4
 8002660:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d015      	beq.n	8002696 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266a:	f7fe fccb 	bl	8001004 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7fe fcc7 	bl	8001004 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002680:	4293      	cmp	r3, r2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e08e      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002688:	4b4a      	ldr	r3, [pc, #296]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0ee      	beq.n	8002672 <HAL_RCC_OscConfig+0x33a>
 8002694:	e014      	b.n	80026c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002696:	f7fe fcb5 	bl	8001004 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269c:	e00a      	b.n	80026b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f7fe fcb1 	bl	8001004 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e078      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b4:	4b3f      	ldr	r3, [pc, #252]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ee      	bne.n	800269e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d105      	bne.n	80026d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c6:	4b3b      	ldr	r3, [pc, #236]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	4a3a      	ldr	r2, [pc, #232]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d064      	beq.n	80027a4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026da:	4b36      	ldr	r3, [pc, #216]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d05c      	beq.n	80027a0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d141      	bne.n	8002772 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ee:	4b32      	ldr	r3, [pc, #200]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7fe fc86 	bl	8001004 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fc:	f7fe fc82 	bl	8001004 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e04b      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270e:	4b29      	ldr	r3, [pc, #164]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69da      	ldr	r2, [r3, #28]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	019b      	lsls	r3, r3, #6
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	085b      	lsrs	r3, r3, #1
 8002732:	3b01      	subs	r3, #1
 8002734:	041b      	lsls	r3, r3, #16
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	061b      	lsls	r3, r3, #24
 800273e:	491d      	ldr	r1, [pc, #116]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002740:	4313      	orrs	r3, r2
 8002742:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002744:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 8002746:	2201      	movs	r2, #1
 8002748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7fe fc5b 	bl	8001004 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002752:	f7fe fc57 	bl	8001004 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e020      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x41a>
 8002770:	e018      	b.n	80027a4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002772:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002778:	f7fe fc44 	bl	8001004 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002780:	f7fe fc40 	bl	8001004 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e009      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002792:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x448>
 800279e:	e001      	b.n	80027a4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40007000 	.word	0x40007000
 80027b4:	40023800 	.word	0x40023800
 80027b8:	42470060 	.word	0x42470060

080027bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0ca      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027d0:	4b67      	ldr	r3, [pc, #412]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d90c      	bls.n	80027f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027de:	4b64      	ldr	r3, [pc, #400]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b62      	ldr	r3, [pc, #392]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0b6      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d020      	beq.n	8002846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002810:	4b58      	ldr	r3, [pc, #352]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	4a57      	ldr	r2, [pc, #348]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002816:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800281a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002828:	4b52      	ldr	r3, [pc, #328]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a51      	ldr	r2, [pc, #324]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800282e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002834:	4b4f      	ldr	r3, [pc, #316]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	494c      	ldr	r1, [pc, #304]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002842:	4313      	orrs	r3, r2
 8002844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d044      	beq.n	80028dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d107      	bne.n	800286a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285a:	4b46      	ldr	r3, [pc, #280]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d119      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e07d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d003      	beq.n	800287a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002876:	2b03      	cmp	r3, #3
 8002878:	d107      	bne.n	800288a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287a:	4b3e      	ldr	r3, [pc, #248]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e06d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288a:	4b3a      	ldr	r3, [pc, #232]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e065      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800289a:	4b36      	ldr	r3, [pc, #216]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f023 0203 	bic.w	r2, r3, #3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4933      	ldr	r1, [pc, #204]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028ac:	f7fe fbaa 	bl	8001004 <HAL_GetTick>
 80028b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b2:	e00a      	b.n	80028ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b4:	f7fe fba6 	bl	8001004 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e04d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ca:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 020c 	and.w	r2, r3, #12
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	429a      	cmp	r2, r3
 80028da:	d1eb      	bne.n	80028b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028dc:	4b24      	ldr	r3, [pc, #144]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d20c      	bcs.n	8002904 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ea:	4b21      	ldr	r3, [pc, #132]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f2:	4b1f      	ldr	r3, [pc, #124]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e030      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d008      	beq.n	8002922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002910:	4b18      	ldr	r3, [pc, #96]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4915      	ldr	r1, [pc, #84]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800291e:	4313      	orrs	r3, r2
 8002920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d009      	beq.n	8002942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800292e:	4b11      	ldr	r3, [pc, #68]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	490d      	ldr	r1, [pc, #52]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800293e:	4313      	orrs	r3, r2
 8002940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002942:	f000 f81d 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 8002946:	4601      	mov	r1, r0
 8002948:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	091b      	lsrs	r3, r3, #4
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	4a09      	ldr	r2, [pc, #36]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	5cd3      	ldrb	r3, [r2, r3]
 8002956:	fa21 f303 	lsr.w	r3, r1, r3
 800295a:	4a08      	ldr	r2, [pc, #32]	; (800297c <HAL_RCC_ClockConfig+0x1c0>)
 800295c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800295e:	2000      	movs	r0, #0
 8002960:	f7fe fb0c 	bl	8000f7c <HAL_InitTick>

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023c00 	.word	0x40023c00
 8002974:	40023800 	.word	0x40023800
 8002978:	080145d8 	.word	0x080145d8
 800297c:	20000080 	.word	0x20000080

08002980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	607b      	str	r3, [r7, #4]
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	2300      	movs	r3, #0
 8002990:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002992:	2300      	movs	r3, #0
 8002994:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002996:	4b50      	ldr	r3, [pc, #320]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d007      	beq.n	80029b2 <HAL_RCC_GetSysClockFreq+0x32>
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d008      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0x38>
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f040 808d 	bne.w	8002ac6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029ac:	4b4b      	ldr	r3, [pc, #300]	; (8002adc <HAL_RCC_GetSysClockFreq+0x15c>)
 80029ae:	60bb      	str	r3, [r7, #8]
       break;
 80029b0:	e08c      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029b2:	4b4b      	ldr	r3, [pc, #300]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029b4:	60bb      	str	r3, [r7, #8]
      break;
 80029b6:	e089      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029b8:	4b47      	ldr	r3, [pc, #284]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029c2:	4b45      	ldr	r3, [pc, #276]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d023      	beq.n	8002a16 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ce:	4b42      	ldr	r3, [pc, #264]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	099b      	lsrs	r3, r3, #6
 80029d4:	f04f 0400 	mov.w	r4, #0
 80029d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	ea03 0501 	and.w	r5, r3, r1
 80029e4:	ea04 0602 	and.w	r6, r4, r2
 80029e8:	4a3d      	ldr	r2, [pc, #244]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029ea:	fb02 f106 	mul.w	r1, r2, r6
 80029ee:	2200      	movs	r2, #0
 80029f0:	fb02 f205 	mul.w	r2, r2, r5
 80029f4:	440a      	add	r2, r1
 80029f6:	493a      	ldr	r1, [pc, #232]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029f8:	fba5 0101 	umull	r0, r1, r5, r1
 80029fc:	1853      	adds	r3, r2, r1
 80029fe:	4619      	mov	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f04f 0400 	mov.w	r4, #0
 8002a06:	461a      	mov	r2, r3
 8002a08:	4623      	mov	r3, r4
 8002a0a:	f7fe f915 	bl	8000c38 <__aeabi_uldivmod>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	460c      	mov	r4, r1
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	e049      	b.n	8002aaa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a16:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	099b      	lsrs	r3, r3, #6
 8002a1c:	f04f 0400 	mov.w	r4, #0
 8002a20:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	ea03 0501 	and.w	r5, r3, r1
 8002a2c:	ea04 0602 	and.w	r6, r4, r2
 8002a30:	4629      	mov	r1, r5
 8002a32:	4632      	mov	r2, r6
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	f04f 0400 	mov.w	r4, #0
 8002a3c:	0154      	lsls	r4, r2, #5
 8002a3e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a42:	014b      	lsls	r3, r1, #5
 8002a44:	4619      	mov	r1, r3
 8002a46:	4622      	mov	r2, r4
 8002a48:	1b49      	subs	r1, r1, r5
 8002a4a:	eb62 0206 	sbc.w	r2, r2, r6
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	f04f 0400 	mov.w	r4, #0
 8002a56:	0194      	lsls	r4, r2, #6
 8002a58:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a5c:	018b      	lsls	r3, r1, #6
 8002a5e:	1a5b      	subs	r3, r3, r1
 8002a60:	eb64 0402 	sbc.w	r4, r4, r2
 8002a64:	f04f 0100 	mov.w	r1, #0
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	00e2      	lsls	r2, r4, #3
 8002a6e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a72:	00d9      	lsls	r1, r3, #3
 8002a74:	460b      	mov	r3, r1
 8002a76:	4614      	mov	r4, r2
 8002a78:	195b      	adds	r3, r3, r5
 8002a7a:	eb44 0406 	adc.w	r4, r4, r6
 8002a7e:	f04f 0100 	mov.w	r1, #0
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	02a2      	lsls	r2, r4, #10
 8002a88:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a8c:	0299      	lsls	r1, r3, #10
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4614      	mov	r4, r2
 8002a92:	4618      	mov	r0, r3
 8002a94:	4621      	mov	r1, r4
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f04f 0400 	mov.w	r4, #0
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4623      	mov	r3, r4
 8002aa0:	f7fe f8ca 	bl	8000c38 <__aeabi_uldivmod>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	460c      	mov	r4, r1
 8002aa8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	0c1b      	lsrs	r3, r3, #16
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac2:	60bb      	str	r3, [r7, #8]
      break;
 8002ac4:	e002      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ac6:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_RCC_GetSysClockFreq+0x15c>)
 8002ac8:	60bb      	str	r3, [r7, #8]
      break;
 8002aca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002acc:	68bb      	ldr	r3, [r7, #8]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	00f42400 	.word	0x00f42400
 8002ae0:	017d7840 	.word	0x017d7840

08002ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20000080 	.word	0x20000080

08002afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b00:	f7ff fff0 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b04:	4601      	mov	r1, r0
 8002b06:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	0a9b      	lsrs	r3, r3, #10
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	4a03      	ldr	r2, [pc, #12]	; (8002b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b12:	5cd3      	ldrb	r3, [r2, r3]
 8002b14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	080145e8 	.word	0x080145e8

08002b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b28:	f7ff ffdc 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b2c:	4601      	mov	r1, r0
 8002b2e:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	0b5b      	lsrs	r3, r3, #13
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	4a03      	ldr	r2, [pc, #12]	; (8002b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b3a:	5cd3      	ldrb	r3, [r2, r3]
 8002b3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40023800 	.word	0x40023800
 8002b48:	080145e8 	.word	0x080145e8

08002b4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e056      	b.n	8002c0c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d106      	bne.n	8002b7e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f00f fdd5 	bl	8012728 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2202      	movs	r2, #2
 8002b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b94:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	ea42 0103 	orr.w	r1, r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	0c1b      	lsrs	r3, r3, #16
 8002bdc:	f003 0104 	and.w	r1, r3, #4
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69da      	ldr	r2, [r3, #28]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bfa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	4613      	mov	r3, r2
 8002c22:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_SPI_Transmit+0x22>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e11e      	b.n	8002e74 <HAL_SPI_Transmit+0x260>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c3e:	f7fe f9e1 	bl	8001004 <HAL_GetTick>
 8002c42:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d002      	beq.n	8002c5a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c54:	2302      	movs	r3, #2
 8002c56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c58:	e103      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <HAL_SPI_Transmit+0x52>
 8002c60:	88fb      	ldrh	r3, [r7, #6]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d102      	bne.n	8002c6c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c6a:	e0fa      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2203      	movs	r2, #3
 8002c70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	88fa      	ldrh	r2, [r7, #6]
 8002c84:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	88fa      	ldrh	r2, [r7, #6]
 8002c8a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cb2:	d107      	bne.n	8002cc4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cc2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cce:	2b40      	cmp	r3, #64	; 0x40
 8002cd0:	d007      	beq.n	8002ce2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ce0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cea:	d14b      	bne.n	8002d84 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <HAL_SPI_Transmit+0xe6>
 8002cf4:	8afb      	ldrh	r3, [r7, #22]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d13e      	bne.n	8002d78 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	881a      	ldrh	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	1c9a      	adds	r2, r3, #2
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d1e:	e02b      	b.n	8002d78 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d112      	bne.n	8002d54 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	881a      	ldrh	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	1c9a      	adds	r2, r3, #2
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d52:	e011      	b.n	8002d78 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d54:	f7fe f956 	bl	8001004 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d803      	bhi.n	8002d6c <HAL_SPI_Transmit+0x158>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6a:	d102      	bne.n	8002d72 <HAL_SPI_Transmit+0x15e>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d102      	bne.n	8002d78 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d76:	e074      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1ce      	bne.n	8002d20 <HAL_SPI_Transmit+0x10c>
 8002d82:	e04c      	b.n	8002e1e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <HAL_SPI_Transmit+0x17e>
 8002d8c:	8afb      	ldrh	r3, [r7, #22]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d140      	bne.n	8002e14 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	330c      	adds	r3, #12
 8002d9c:	7812      	ldrb	r2, [r2, #0]
 8002d9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002db8:	e02c      	b.n	8002e14 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d113      	bne.n	8002df0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	330c      	adds	r3, #12
 8002dd2:	7812      	ldrb	r2, [r2, #0]
 8002dd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	86da      	strh	r2, [r3, #54]	; 0x36
 8002dee:	e011      	b.n	8002e14 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002df0:	f7fe f908 	bl	8001004 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d803      	bhi.n	8002e08 <HAL_SPI_Transmit+0x1f4>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e06:	d102      	bne.n	8002e0e <HAL_SPI_Transmit+0x1fa>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d102      	bne.n	8002e14 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e12:	e026      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1cd      	bne.n	8002dba <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	6839      	ldr	r1, [r7, #0]
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 fba4 	bl	8003570 <SPI_EndRxTxTransaction>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2220      	movs	r2, #32
 8002e32:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10a      	bne.n	8002e52 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	77fb      	strb	r3, [r7, #31]
 8002e5e:	e000      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002e60:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e72:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3720      	adds	r7, #32
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e98:	d112      	bne.n	8002ec0 <HAL_SPI_Receive+0x44>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10e      	bne.n	8002ec0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002eaa:	88fa      	ldrh	r2, [r7, #6]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f8e9 	bl	800308e <HAL_SPI_TransmitReceive>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	e0e2      	b.n	8003086 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_SPI_Receive+0x52>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e0db      	b.n	8003086 <HAL_SPI_Receive+0x20a>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ed6:	f7fe f895 	bl	8001004 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d002      	beq.n	8002eee <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002eec:	e0c2      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <HAL_SPI_Receive+0x7e>
 8002ef4:	88fb      	ldrh	r3, [r7, #6]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d102      	bne.n	8002f00 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002efe:	e0b9      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2204      	movs	r2, #4
 8002f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	88fa      	ldrh	r2, [r7, #6]
 8002f18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	88fa      	ldrh	r2, [r7, #6]
 8002f1e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f46:	d107      	bne.n	8002f58 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f56:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f62:	2b40      	cmp	r3, #64	; 0x40
 8002f64:	d007      	beq.n	8002f76 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f74:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d162      	bne.n	8003044 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f7e:	e02e      	b.n	8002fde <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d115      	bne.n	8002fba <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f103 020c 	add.w	r2, r3, #12
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9a:	7812      	ldrb	r2, [r2, #0]
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fb8:	e011      	b.n	8002fde <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fba:	f7fe f823 	bl	8001004 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d803      	bhi.n	8002fd2 <HAL_SPI_Receive+0x156>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd0:	d102      	bne.n	8002fd8 <HAL_SPI_Receive+0x15c>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d102      	bne.n	8002fde <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002fdc:	e04a      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1cb      	bne.n	8002f80 <HAL_SPI_Receive+0x104>
 8002fe8:	e031      	b.n	800304e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d113      	bne.n	8003020 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003002:	b292      	uxth	r2, r2
 8003004:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	1c9a      	adds	r2, r3, #2
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800301e:	e011      	b.n	8003044 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003020:	f7fd fff0 	bl	8001004 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d803      	bhi.n	8003038 <HAL_SPI_Receive+0x1bc>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003036:	d102      	bne.n	800303e <HAL_SPI_Receive+0x1c2>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d102      	bne.n	8003044 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003042:	e017      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003048:	b29b      	uxth	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1cd      	bne.n	8002fea <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	6839      	ldr	r1, [r7, #0]
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 fa27 	bl	80034a6 <SPI_EndRxTransaction>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	75fb      	strb	r3, [r7, #23]
 8003070:	e000      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003072:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003084:	7dfb      	ldrb	r3, [r7, #23]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b08c      	sub	sp, #48	; 0x30
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800309c:	2301      	movs	r3, #1
 800309e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_SPI_TransmitReceive+0x26>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e18a      	b.n	80033ca <HAL_SPI_TransmitReceive+0x33c>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030bc:	f7fd ffa2 	bl	8001004 <HAL_GetTick>
 80030c0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80030d2:	887b      	ldrh	r3, [r7, #2]
 80030d4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d00f      	beq.n	80030fe <HAL_SPI_TransmitReceive+0x70>
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030e4:	d107      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d103      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x68>
 80030ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d003      	beq.n	80030fe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80030f6:	2302      	movs	r3, #2
 80030f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030fc:	e15b      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x82>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x82>
 800310a:	887b      	ldrh	r3, [r7, #2]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d103      	bne.n	8003118 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003116:	e14e      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b04      	cmp	r3, #4
 8003122:	d003      	beq.n	800312c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2205      	movs	r2, #5
 8003128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	887a      	ldrh	r2, [r7, #2]
 800313c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	887a      	ldrh	r2, [r7, #2]
 8003142:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	887a      	ldrh	r2, [r7, #2]
 800314e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	887a      	ldrh	r2, [r7, #2]
 8003154:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316c:	2b40      	cmp	r3, #64	; 0x40
 800316e:	d007      	beq.n	8003180 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800317e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003188:	d178      	bne.n	800327c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <HAL_SPI_TransmitReceive+0x10a>
 8003192:	8b7b      	ldrh	r3, [r7, #26]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d166      	bne.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	881a      	ldrh	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	1c9a      	adds	r2, r3, #2
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031bc:	e053      	b.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d11b      	bne.n	8003204 <HAL_SPI_TransmitReceive+0x176>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d016      	beq.n	8003204 <HAL_SPI_TransmitReceive+0x176>
 80031d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d113      	bne.n	8003204 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	881a      	ldrh	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	1c9a      	adds	r2, r3, #2
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b01      	cmp	r3, #1
 8003210:	d119      	bne.n	8003246 <HAL_SPI_TransmitReceive+0x1b8>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d014      	beq.n	8003246 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	b292      	uxth	r2, r2
 8003228:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	1c9a      	adds	r2, r3, #2
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003238:	b29b      	uxth	r3, r3
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003242:	2301      	movs	r3, #1
 8003244:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003246:	f7fd fedd 	bl	8001004 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003252:	429a      	cmp	r2, r3
 8003254:	d807      	bhi.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
 8003256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325c:	d003      	beq.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003264:	e0a7      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800326a:	b29b      	uxth	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1a6      	bne.n	80031be <HAL_SPI_TransmitReceive+0x130>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1a1      	bne.n	80031be <HAL_SPI_TransmitReceive+0x130>
 800327a:	e07c      	b.n	8003376 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <HAL_SPI_TransmitReceive+0x1fc>
 8003284:	8b7b      	ldrh	r3, [r7, #26]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d16b      	bne.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	330c      	adds	r3, #12
 8003294:	7812      	ldrb	r2, [r2, #0]
 8003296:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032b0:	e057      	b.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d11c      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d017      	beq.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
 80032ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d114      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	330c      	adds	r3, #12
 80032da:	7812      	ldrb	r2, [r2, #0]
 80032dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b01      	cmp	r3, #1
 8003306:	d119      	bne.n	800333c <HAL_SPI_TransmitReceive+0x2ae>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d014      	beq.n	800333c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003338:	2301      	movs	r3, #1
 800333a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800333c:	f7fd fe62 	bl	8001004 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003348:	429a      	cmp	r2, r3
 800334a:	d803      	bhi.n	8003354 <HAL_SPI_TransmitReceive+0x2c6>
 800334c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003352:	d102      	bne.n	800335a <HAL_SPI_TransmitReceive+0x2cc>
 8003354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003356:	2b00      	cmp	r3, #0
 8003358:	d103      	bne.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003360:	e029      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1a2      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x224>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d19d      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003378:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 f8f8 	bl	8003570 <SPI_EndRxTxTransaction>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d006      	beq.n	8003394 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003392:	e010      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10b      	bne.n	80033b4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	e000      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80033b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3730      	adds	r7, #48	; 0x30
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	4613      	mov	r3, r2
 80033e0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033e2:	e04c      	b.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ea:	d048      	beq.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80033ec:	f7fd fe0a 	bl	8001004 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d902      	bls.n	8003402 <SPI_WaitFlagStateUntilTimeout+0x30>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d13d      	bne.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003410:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800341a:	d111      	bne.n	8003440 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003424:	d004      	beq.n	8003430 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342e:	d107      	bne.n	8003440 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800343e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003448:	d10f      	bne.n	800346a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003468:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e00f      	b.n	800349e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4013      	ands	r3, r2
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	429a      	cmp	r2, r3
 800348c:	bf0c      	ite	eq
 800348e:	2301      	moveq	r3, #1
 8003490:	2300      	movne	r3, #0
 8003492:	b2db      	uxtb	r3, r3
 8003494:	461a      	mov	r2, r3
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	429a      	cmp	r2, r3
 800349a:	d1a3      	bne.n	80033e4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b086      	sub	sp, #24
 80034aa:	af02      	add	r7, sp, #8
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ba:	d111      	bne.n	80034e0 <SPI_EndRxTransaction+0x3a>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c4:	d004      	beq.n	80034d0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ce:	d107      	bne.n	80034e0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034de:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034e8:	d12a      	bne.n	8003540 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f2:	d012      	beq.n	800351a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2200      	movs	r2, #0
 80034fc:	2180      	movs	r1, #128	; 0x80
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f7ff ff67 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d02d      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350e:	f043 0220 	orr.w	r2, r3, #32
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e026      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2200      	movs	r2, #0
 8003522:	2101      	movs	r1, #1
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f7ff ff54 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01a      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003534:	f043 0220 	orr.w	r2, r3, #32
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e013      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2200      	movs	r2, #0
 8003548:	2101      	movs	r1, #1
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f7ff ff41 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d007      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355a:	f043 0220 	orr.w	r2, r3, #32
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e000      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800357c:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <SPI_EndRxTxTransaction+0x7c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1b      	ldr	r2, [pc, #108]	; (80035f0 <SPI_EndRxTxTransaction+0x80>)
 8003582:	fba2 2303 	umull	r2, r3, r2, r3
 8003586:	0d5b      	lsrs	r3, r3, #21
 8003588:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800358c:	fb02 f303 	mul.w	r3, r2, r3
 8003590:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800359a:	d112      	bne.n	80035c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2200      	movs	r2, #0
 80035a4:	2180      	movs	r1, #128	; 0x80
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f7ff ff13 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d016      	beq.n	80035e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	f043 0220 	orr.w	r2, r3, #32
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e00f      	b.n	80035e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d8:	2b80      	cmp	r3, #128	; 0x80
 80035da:	d0f2      	beq.n	80035c2 <SPI_EndRxTxTransaction+0x52>
 80035dc:	e000      	b.n	80035e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80035de:	bf00      	nop
  }

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20000080 	.word	0x20000080
 80035f0:	165e9f81 	.word	0x165e9f81

080035f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e01d      	b.n	8003642 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d106      	bne.n	8003620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f00f f8cc 	bl	80127b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3304      	adds	r3, #4
 8003630:	4619      	mov	r1, r3
 8003632:	4610      	mov	r0, r2
 8003634:	f000 fc66 	bl	8003f04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800364a:	b480      	push	{r7}
 800364c:	b085      	sub	sp, #20
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0201 	orr.w	r2, r2, #1
 8003660:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2b06      	cmp	r3, #6
 8003672:	d007      	beq.n	8003684 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0201 	orr.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e01d      	b.n	80036e0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d106      	bne.n	80036be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f00f f8e7 	bl	801288c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2202      	movs	r2, #2
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3304      	adds	r3, #4
 80036ce:	4619      	mov	r1, r3
 80036d0:	4610      	mov	r0, r2
 80036d2:	f000 fc17 	bl	8003f04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2201      	movs	r2, #1
 80036f8:	6839      	ldr	r1, [r7, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 feec 	bl	80044d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a15      	ldr	r2, [pc, #84]	; (800375c <HAL_TIM_PWM_Start+0x74>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d004      	beq.n	8003714 <HAL_TIM_PWM_Start+0x2c>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a14      	ldr	r2, [pc, #80]	; (8003760 <HAL_TIM_PWM_Start+0x78>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d101      	bne.n	8003718 <HAL_TIM_PWM_Start+0x30>
 8003714:	2301      	movs	r3, #1
 8003716:	e000      	b.n	800371a <HAL_TIM_PWM_Start+0x32>
 8003718:	2300      	movs	r3, #0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d007      	beq.n	800372e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800372c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2b06      	cmp	r3, #6
 800373e:	d007      	beq.n	8003750 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	40010000 	.word	0x40010000
 8003760:	40010400 	.word	0x40010400

08003764 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2200      	movs	r2, #0
 8003774:	6839      	ldr	r1, [r7, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f000 feae 	bl	80044d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a22      	ldr	r2, [pc, #136]	; (800380c <HAL_TIM_PWM_Stop+0xa8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d004      	beq.n	8003790 <HAL_TIM_PWM_Stop+0x2c>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a21      	ldr	r2, [pc, #132]	; (8003810 <HAL_TIM_PWM_Stop+0xac>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d101      	bne.n	8003794 <HAL_TIM_PWM_Stop+0x30>
 8003790:	2301      	movs	r3, #1
 8003792:	e000      	b.n	8003796 <HAL_TIM_PWM_Stop+0x32>
 8003794:	2300      	movs	r3, #0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d017      	beq.n	80037ca <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6a1a      	ldr	r2, [r3, #32]
 80037a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80037a4:	4013      	ands	r3, r2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10f      	bne.n	80037ca <HAL_TIM_PWM_Stop+0x66>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6a1a      	ldr	r2, [r3, #32]
 80037b0:	f240 4344 	movw	r3, #1092	; 0x444
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d107      	bne.n	80037ca <HAL_TIM_PWM_Stop+0x66>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6a1a      	ldr	r2, [r3, #32]
 80037d0:	f241 1311 	movw	r3, #4369	; 0x1111
 80037d4:	4013      	ands	r3, r2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10f      	bne.n	80037fa <HAL_TIM_PWM_Stop+0x96>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6a1a      	ldr	r2, [r3, #32]
 80037e0:	f240 4344 	movw	r3, #1092	; 0x444
 80037e4:	4013      	ands	r3, r2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d107      	bne.n	80037fa <HAL_TIM_PWM_Stop+0x96>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0201 	bic.w	r2, r2, #1
 80037f8:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40010000 	.word	0x40010000
 8003810:	40010400 	.word	0x40010400

08003814 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e083      	b.n	8003930 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b00      	cmp	r3, #0
 8003832:	d106      	bne.n	8003842 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f00f f847 	bl	80128d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2202      	movs	r2, #2
 8003846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6812      	ldr	r2, [r2, #0]
 8003854:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003858:	f023 0307 	bic.w	r3, r3, #7
 800385c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	3304      	adds	r3, #4
 8003866:	4619      	mov	r1, r3
 8003868:	4610      	mov	r0, r2
 800386a:	f000 fb4b 	bl	8003f04 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	4313      	orrs	r3, r2
 800388e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003896:	f023 0303 	bic.w	r3, r3, #3
 800389a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	021b      	lsls	r3, r3, #8
 80038a6:	4313      	orrs	r3, r2
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80038b4:	f023 030c 	bic.w	r3, r3, #12
 80038b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	021b      	lsls	r3, r3, #8
 80038d0:	4313      	orrs	r3, r2
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	011a      	lsls	r2, r3, #4
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	031b      	lsls	r3, r3, #12
 80038e4:	4313      	orrs	r3, r2
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80038f2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80038fa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	011b      	lsls	r3, r3, #4
 8003906:	4313      	orrs	r3, r2
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <HAL_TIM_Encoder_Start+0x16>
 8003948:	2b04      	cmp	r3, #4
 800394a:	d008      	beq.n	800395e <HAL_TIM_Encoder_Start+0x26>
 800394c:	e00f      	b.n	800396e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2201      	movs	r2, #1
 8003954:	2100      	movs	r1, #0
 8003956:	4618      	mov	r0, r3
 8003958:	f000 fdbe 	bl	80044d8 <TIM_CCxChannelCmd>
      break;
 800395c:	e016      	b.n	800398c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2201      	movs	r2, #1
 8003964:	2104      	movs	r1, #4
 8003966:	4618      	mov	r0, r3
 8003968:	f000 fdb6 	bl	80044d8 <TIM_CCxChannelCmd>
      break;
 800396c:	e00e      	b.n	800398c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2201      	movs	r2, #1
 8003974:	2100      	movs	r1, #0
 8003976:	4618      	mov	r0, r3
 8003978:	f000 fdae 	bl	80044d8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2201      	movs	r2, #1
 8003982:	2104      	movs	r1, #4
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fda7 	bl	80044d8 <TIM_CCxChannelCmd>
      break;
 800398a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f042 0201 	orr.w	r2, r2, #1
 800399a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b082      	sub	sp, #8
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d122      	bne.n	8003a02 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d11b      	bne.n	8003a02 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f06f 0202 	mvn.w	r2, #2
 80039d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	f003 0303 	and.w	r3, r3, #3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 fa6c 	bl	8003ec6 <HAL_TIM_IC_CaptureCallback>
 80039ee:	e005      	b.n	80039fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 fa5e 	bl	8003eb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 fa6f 	bl	8003eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b04      	cmp	r3, #4
 8003a0e:	d122      	bne.n	8003a56 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d11b      	bne.n	8003a56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f06f 0204 	mvn.w	r2, #4
 8003a26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 fa42 	bl	8003ec6 <HAL_TIM_IC_CaptureCallback>
 8003a42:	e005      	b.n	8003a50 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 fa34 	bl	8003eb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 fa45 	bl	8003eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	f003 0308 	and.w	r3, r3, #8
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d122      	bne.n	8003aaa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	2b08      	cmp	r3, #8
 8003a70:	d11b      	bne.n	8003aaa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f06f 0208 	mvn.w	r2, #8
 8003a7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2204      	movs	r2, #4
 8003a80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	f003 0303 	and.w	r3, r3, #3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 fa18 	bl	8003ec6 <HAL_TIM_IC_CaptureCallback>
 8003a96:	e005      	b.n	8003aa4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 fa0a 	bl	8003eb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 fa1b 	bl	8003eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	f003 0310 	and.w	r3, r3, #16
 8003ab4:	2b10      	cmp	r3, #16
 8003ab6:	d122      	bne.n	8003afe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f003 0310 	and.w	r3, r3, #16
 8003ac2:	2b10      	cmp	r3, #16
 8003ac4:	d11b      	bne.n	8003afe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f06f 0210 	mvn.w	r2, #16
 8003ace:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2208      	movs	r2, #8
 8003ad4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 f9ee 	bl	8003ec6 <HAL_TIM_IC_CaptureCallback>
 8003aea:	e005      	b.n	8003af8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f9e0 	bl	8003eb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f9f1 	bl	8003eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d10e      	bne.n	8003b2a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d107      	bne.n	8003b2a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f06f 0201 	mvn.w	r2, #1
 8003b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f009 fa9f 	bl	800d068 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b34:	2b80      	cmp	r3, #128	; 0x80
 8003b36:	d10e      	bne.n	8003b56 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b42:	2b80      	cmp	r3, #128	; 0x80
 8003b44:	d107      	bne.n	8003b56 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 fd35 	bl	80045c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b60:	2b40      	cmp	r3, #64	; 0x40
 8003b62:	d10e      	bne.n	8003b82 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6e:	2b40      	cmp	r3, #64	; 0x40
 8003b70:	d107      	bne.n	8003b82 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f9b6 	bl	8003eee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	f003 0320 	and.w	r3, r3, #32
 8003b8c:	2b20      	cmp	r3, #32
 8003b8e:	d10e      	bne.n	8003bae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	f003 0320 	and.w	r3, r3, #32
 8003b9a:	2b20      	cmp	r3, #32
 8003b9c:	d107      	bne.n	8003bae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f06f 0220 	mvn.w	r2, #32
 8003ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 fcff 	bl	80045ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bae:	bf00      	nop
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
	...

08003bb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e0b4      	b.n	8003d3c <HAL_TIM_PWM_ConfigChannel+0x184>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2202      	movs	r2, #2
 8003bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b0c      	cmp	r3, #12
 8003be6:	f200 809f 	bhi.w	8003d28 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003bea:	a201      	add	r2, pc, #4	; (adr r2, 8003bf0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf0:	08003c25 	.word	0x08003c25
 8003bf4:	08003d29 	.word	0x08003d29
 8003bf8:	08003d29 	.word	0x08003d29
 8003bfc:	08003d29 	.word	0x08003d29
 8003c00:	08003c65 	.word	0x08003c65
 8003c04:	08003d29 	.word	0x08003d29
 8003c08:	08003d29 	.word	0x08003d29
 8003c0c:	08003d29 	.word	0x08003d29
 8003c10:	08003ca7 	.word	0x08003ca7
 8003c14:	08003d29 	.word	0x08003d29
 8003c18:	08003d29 	.word	0x08003d29
 8003c1c:	08003d29 	.word	0x08003d29
 8003c20:	08003ce7 	.word	0x08003ce7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68b9      	ldr	r1, [r7, #8]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 fa0a 	bl	8004044 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	699a      	ldr	r2, [r3, #24]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0208 	orr.w	r2, r2, #8
 8003c3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699a      	ldr	r2, [r3, #24]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 0204 	bic.w	r2, r2, #4
 8003c4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6999      	ldr	r1, [r3, #24]
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	691a      	ldr	r2, [r3, #16]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	619a      	str	r2, [r3, #24]
      break;
 8003c62:	e062      	b.n	8003d2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68b9      	ldr	r1, [r7, #8]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 fa5a 	bl	8004124 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	699a      	ldr	r2, [r3, #24]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699a      	ldr	r2, [r3, #24]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6999      	ldr	r1, [r3, #24]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	021a      	lsls	r2, r3, #8
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	619a      	str	r2, [r3, #24]
      break;
 8003ca4:	e041      	b.n	8003d2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68b9      	ldr	r1, [r7, #8]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 faaf 	bl	8004210 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	69da      	ldr	r2, [r3, #28]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f042 0208 	orr.w	r2, r2, #8
 8003cc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	69da      	ldr	r2, [r3, #28]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0204 	bic.w	r2, r2, #4
 8003cd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	69d9      	ldr	r1, [r3, #28]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	691a      	ldr	r2, [r3, #16]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	61da      	str	r2, [r3, #28]
      break;
 8003ce4:	e021      	b.n	8003d2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68b9      	ldr	r1, [r7, #8]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 fb03 	bl	80042f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69da      	ldr	r2, [r3, #28]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	69da      	ldr	r2, [r3, #28]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69d9      	ldr	r1, [r3, #28]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	021a      	lsls	r2, r3, #8
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	61da      	str	r2, [r3, #28]
      break;
 8003d26:	e000      	b.n	8003d2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003d28:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <HAL_TIM_ConfigClockSource+0x18>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e0a6      	b.n	8003eaa <HAL_TIM_ConfigClockSource+0x166>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2202      	movs	r2, #2
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b40      	cmp	r3, #64	; 0x40
 8003d92:	d067      	beq.n	8003e64 <HAL_TIM_ConfigClockSource+0x120>
 8003d94:	2b40      	cmp	r3, #64	; 0x40
 8003d96:	d80b      	bhi.n	8003db0 <HAL_TIM_ConfigClockSource+0x6c>
 8003d98:	2b10      	cmp	r3, #16
 8003d9a:	d073      	beq.n	8003e84 <HAL_TIM_ConfigClockSource+0x140>
 8003d9c:	2b10      	cmp	r3, #16
 8003d9e:	d802      	bhi.n	8003da6 <HAL_TIM_ConfigClockSource+0x62>
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d06f      	beq.n	8003e84 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003da4:	e078      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003da6:	2b20      	cmp	r3, #32
 8003da8:	d06c      	beq.n	8003e84 <HAL_TIM_ConfigClockSource+0x140>
 8003daa:	2b30      	cmp	r3, #48	; 0x30
 8003dac:	d06a      	beq.n	8003e84 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003dae:	e073      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003db0:	2b70      	cmp	r3, #112	; 0x70
 8003db2:	d00d      	beq.n	8003dd0 <HAL_TIM_ConfigClockSource+0x8c>
 8003db4:	2b70      	cmp	r3, #112	; 0x70
 8003db6:	d804      	bhi.n	8003dc2 <HAL_TIM_ConfigClockSource+0x7e>
 8003db8:	2b50      	cmp	r3, #80	; 0x50
 8003dba:	d033      	beq.n	8003e24 <HAL_TIM_ConfigClockSource+0xe0>
 8003dbc:	2b60      	cmp	r3, #96	; 0x60
 8003dbe:	d041      	beq.n	8003e44 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003dc0:	e06a      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc6:	d066      	beq.n	8003e96 <HAL_TIM_ConfigClockSource+0x152>
 8003dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dcc:	d017      	beq.n	8003dfe <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003dce:	e063      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6818      	ldr	r0, [r3, #0]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	6899      	ldr	r1, [r3, #8]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f000 fb5a 	bl	8004498 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003df2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	609a      	str	r2, [r3, #8]
      break;
 8003dfc:	e04c      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6818      	ldr	r0, [r3, #0]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	6899      	ldr	r1, [r3, #8]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	f000 fb43 	bl	8004498 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e20:	609a      	str	r2, [r3, #8]
      break;
 8003e22:	e039      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6818      	ldr	r0, [r3, #0]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	6859      	ldr	r1, [r3, #4]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	461a      	mov	r2, r3
 8003e32:	f000 fab7 	bl	80043a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2150      	movs	r1, #80	; 0x50
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 fb10 	bl	8004462 <TIM_ITRx_SetConfig>
      break;
 8003e42:	e029      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6818      	ldr	r0, [r3, #0]
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	6859      	ldr	r1, [r3, #4]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	461a      	mov	r2, r3
 8003e52:	f000 fad6 	bl	8004402 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2160      	movs	r1, #96	; 0x60
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 fb00 	bl	8004462 <TIM_ITRx_SetConfig>
      break;
 8003e62:	e019      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6818      	ldr	r0, [r3, #0]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	6859      	ldr	r1, [r3, #4]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	461a      	mov	r2, r3
 8003e72:	f000 fa97 	bl	80043a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2140      	movs	r1, #64	; 0x40
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 faf0 	bl	8004462 <TIM_ITRx_SetConfig>
      break;
 8003e82:	e009      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4610      	mov	r0, r2
 8003e90:	f000 fae7 	bl	8004462 <TIM_ITRx_SetConfig>
      break;
 8003e94:	e000      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003e96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
	...

08003f04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a40      	ldr	r2, [pc, #256]	; (8004018 <TIM_Base_SetConfig+0x114>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d013      	beq.n	8003f44 <TIM_Base_SetConfig+0x40>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f22:	d00f      	beq.n	8003f44 <TIM_Base_SetConfig+0x40>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a3d      	ldr	r2, [pc, #244]	; (800401c <TIM_Base_SetConfig+0x118>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d00b      	beq.n	8003f44 <TIM_Base_SetConfig+0x40>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a3c      	ldr	r2, [pc, #240]	; (8004020 <TIM_Base_SetConfig+0x11c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d007      	beq.n	8003f44 <TIM_Base_SetConfig+0x40>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a3b      	ldr	r2, [pc, #236]	; (8004024 <TIM_Base_SetConfig+0x120>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d003      	beq.n	8003f44 <TIM_Base_SetConfig+0x40>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a3a      	ldr	r2, [pc, #232]	; (8004028 <TIM_Base_SetConfig+0x124>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d108      	bne.n	8003f56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a2f      	ldr	r2, [pc, #188]	; (8004018 <TIM_Base_SetConfig+0x114>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d02b      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f64:	d027      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a2c      	ldr	r2, [pc, #176]	; (800401c <TIM_Base_SetConfig+0x118>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d023      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a2b      	ldr	r2, [pc, #172]	; (8004020 <TIM_Base_SetConfig+0x11c>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d01f      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a2a      	ldr	r2, [pc, #168]	; (8004024 <TIM_Base_SetConfig+0x120>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d01b      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a29      	ldr	r2, [pc, #164]	; (8004028 <TIM_Base_SetConfig+0x124>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d017      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a28      	ldr	r2, [pc, #160]	; (800402c <TIM_Base_SetConfig+0x128>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d013      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a27      	ldr	r2, [pc, #156]	; (8004030 <TIM_Base_SetConfig+0x12c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d00f      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a26      	ldr	r2, [pc, #152]	; (8004034 <TIM_Base_SetConfig+0x130>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d00b      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a25      	ldr	r2, [pc, #148]	; (8004038 <TIM_Base_SetConfig+0x134>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d007      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a24      	ldr	r2, [pc, #144]	; (800403c <TIM_Base_SetConfig+0x138>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d003      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a23      	ldr	r2, [pc, #140]	; (8004040 <TIM_Base_SetConfig+0x13c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d108      	bne.n	8003fc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a0a      	ldr	r2, [pc, #40]	; (8004018 <TIM_Base_SetConfig+0x114>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d003      	beq.n	8003ffc <TIM_Base_SetConfig+0xf8>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a0c      	ldr	r2, [pc, #48]	; (8004028 <TIM_Base_SetConfig+0x124>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d103      	bne.n	8004004 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	615a      	str	r2, [r3, #20]
}
 800400a:	bf00      	nop
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	40010000 	.word	0x40010000
 800401c:	40000400 	.word	0x40000400
 8004020:	40000800 	.word	0x40000800
 8004024:	40000c00 	.word	0x40000c00
 8004028:	40010400 	.word	0x40010400
 800402c:	40014000 	.word	0x40014000
 8004030:	40014400 	.word	0x40014400
 8004034:	40014800 	.word	0x40014800
 8004038:	40001800 	.word	0x40001800
 800403c:	40001c00 	.word	0x40001c00
 8004040:	40002000 	.word	0x40002000

08004044 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004044:	b480      	push	{r7}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	f023 0201 	bic.w	r2, r3, #1
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f023 0303 	bic.w	r3, r3, #3
 800407a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	4313      	orrs	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f023 0302 	bic.w	r3, r3, #2
 800408c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4313      	orrs	r3, r2
 8004096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a20      	ldr	r2, [pc, #128]	; (800411c <TIM_OC1_SetConfig+0xd8>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d003      	beq.n	80040a8 <TIM_OC1_SetConfig+0x64>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a1f      	ldr	r2, [pc, #124]	; (8004120 <TIM_OC1_SetConfig+0xdc>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d10c      	bne.n	80040c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f023 0308 	bic.w	r3, r3, #8
 80040ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f023 0304 	bic.w	r3, r3, #4
 80040c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a15      	ldr	r2, [pc, #84]	; (800411c <TIM_OC1_SetConfig+0xd8>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d003      	beq.n	80040d2 <TIM_OC1_SetConfig+0x8e>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a14      	ldr	r2, [pc, #80]	; (8004120 <TIM_OC1_SetConfig+0xdc>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d111      	bne.n	80040f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	621a      	str	r2, [r3, #32]
}
 8004110:	bf00      	nop
 8004112:	371c      	adds	r7, #28
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	40010000 	.word	0x40010000
 8004120:	40010400 	.word	0x40010400

08004124 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004124:	b480      	push	{r7}
 8004126:	b087      	sub	sp, #28
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	f023 0210 	bic.w	r2, r3, #16
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800415a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	021b      	lsls	r3, r3, #8
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	4313      	orrs	r3, r2
 8004166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f023 0320 	bic.w	r3, r3, #32
 800416e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	4313      	orrs	r3, r2
 800417a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a22      	ldr	r2, [pc, #136]	; (8004208 <TIM_OC2_SetConfig+0xe4>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d003      	beq.n	800418c <TIM_OC2_SetConfig+0x68>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a21      	ldr	r2, [pc, #132]	; (800420c <TIM_OC2_SetConfig+0xe8>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d10d      	bne.n	80041a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	011b      	lsls	r3, r3, #4
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4313      	orrs	r3, r2
 800419e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a17      	ldr	r2, [pc, #92]	; (8004208 <TIM_OC2_SetConfig+0xe4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d003      	beq.n	80041b8 <TIM_OC2_SetConfig+0x94>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a16      	ldr	r2, [pc, #88]	; (800420c <TIM_OC2_SetConfig+0xe8>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d113      	bne.n	80041e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	4313      	orrs	r3, r2
 80041de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	621a      	str	r2, [r3, #32]
}
 80041fa:	bf00      	nop
 80041fc:	371c      	adds	r7, #28
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	40010000 	.word	0x40010000
 800420c:	40010400 	.word	0x40010400

08004210 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f023 0303 	bic.w	r3, r3, #3
 8004246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	4313      	orrs	r3, r2
 8004250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004258:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	021b      	lsls	r3, r3, #8
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	4313      	orrs	r3, r2
 8004264:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a21      	ldr	r2, [pc, #132]	; (80042f0 <TIM_OC3_SetConfig+0xe0>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d003      	beq.n	8004276 <TIM_OC3_SetConfig+0x66>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a20      	ldr	r2, [pc, #128]	; (80042f4 <TIM_OC3_SetConfig+0xe4>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d10d      	bne.n	8004292 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800427c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	4313      	orrs	r3, r2
 8004288:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004290:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a16      	ldr	r2, [pc, #88]	; (80042f0 <TIM_OC3_SetConfig+0xe0>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d003      	beq.n	80042a2 <TIM_OC3_SetConfig+0x92>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a15      	ldr	r2, [pc, #84]	; (80042f4 <TIM_OC3_SetConfig+0xe4>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d113      	bne.n	80042ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	011b      	lsls	r3, r3, #4
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	011b      	lsls	r3, r3, #4
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	621a      	str	r2, [r3, #32]
}
 80042e4:	bf00      	nop
 80042e6:	371c      	adds	r7, #28
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	40010000 	.word	0x40010000
 80042f4:	40010400 	.word	0x40010400

080042f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b087      	sub	sp, #28
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800432e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	021b      	lsls	r3, r3, #8
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	4313      	orrs	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004342:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	031b      	lsls	r3, r3, #12
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	4313      	orrs	r3, r2
 800434e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a12      	ldr	r2, [pc, #72]	; (800439c <TIM_OC4_SetConfig+0xa4>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d003      	beq.n	8004360 <TIM_OC4_SetConfig+0x68>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a11      	ldr	r2, [pc, #68]	; (80043a0 <TIM_OC4_SetConfig+0xa8>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d109      	bne.n	8004374 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004366:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	019b      	lsls	r3, r3, #6
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	4313      	orrs	r3, r2
 8004372:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	621a      	str	r2, [r3, #32]
}
 800438e:	bf00      	nop
 8004390:	371c      	adds	r7, #28
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	40010000 	.word	0x40010000
 80043a0:	40010400 	.word	0x40010400

080043a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	f023 0201 	bic.w	r2, r3, #1
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f023 030a 	bic.w	r3, r3, #10
 80043e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	621a      	str	r2, [r3, #32]
}
 80043f6:	bf00      	nop
 80043f8:	371c      	adds	r7, #28
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004402:	b480      	push	{r7}
 8004404:	b087      	sub	sp, #28
 8004406:	af00      	add	r7, sp, #0
 8004408:	60f8      	str	r0, [r7, #12]
 800440a:	60b9      	str	r1, [r7, #8]
 800440c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	f023 0210 	bic.w	r2, r3, #16
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800442c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	031b      	lsls	r3, r3, #12
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	4313      	orrs	r3, r2
 8004436:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800443e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	4313      	orrs	r3, r2
 8004448:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	621a      	str	r2, [r3, #32]
}
 8004456:	bf00      	nop
 8004458:	371c      	adds	r7, #28
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004462:	b480      	push	{r7}
 8004464:	b085      	sub	sp, #20
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
 800446a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004478:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4313      	orrs	r3, r2
 8004480:	f043 0307 	orr.w	r3, r3, #7
 8004484:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	609a      	str	r2, [r3, #8]
}
 800448c:	bf00      	nop
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
 80044a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	021a      	lsls	r2, r3, #8
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	431a      	orrs	r2, r3
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	4313      	orrs	r3, r2
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	609a      	str	r2, [r3, #8]
}
 80044cc:	bf00      	nop
 80044ce:	371c      	adds	r7, #28
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044d8:	b480      	push	{r7}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f003 031f 	and.w	r3, r3, #31
 80044ea:	2201      	movs	r2, #1
 80044ec:	fa02 f303 	lsl.w	r3, r2, r3
 80044f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6a1a      	ldr	r2, [r3, #32]
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	43db      	mvns	r3, r3
 80044fa:	401a      	ands	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6a1a      	ldr	r2, [r3, #32]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f003 031f 	and.w	r3, r3, #31
 800450a:	6879      	ldr	r1, [r7, #4]
 800450c:	fa01 f303 	lsl.w	r3, r1, r3
 8004510:	431a      	orrs	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	621a      	str	r2, [r3, #32]
}
 8004516:	bf00      	nop
 8004518:	371c      	adds	r7, #28
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004522:	b480      	push	{r7}
 8004524:	b085      	sub	sp, #20
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
 800452a:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004532:	2b01      	cmp	r3, #1
 8004534:	d101      	bne.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004536:	2302      	movs	r3, #2
 8004538:	e032      	b.n	80045a0 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2202      	movs	r2, #2
 8004546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004560:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	4313      	orrs	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004572:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	4313      	orrs	r3, r2
 800457c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e03f      	b.n	8004666 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d106      	bne.n	8004600 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f00e fa94 	bl	8012b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2224      	movs	r2, #36	; 0x24
 8004604:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004616:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 f90b 	bl	8004834 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	691a      	ldr	r2, [r3, #16]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800462c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	695a      	ldr	r2, [r3, #20]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800463c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68da      	ldr	r2, [r3, #12]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800464c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2220      	movs	r2, #32
 8004658:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2220      	movs	r2, #32
 8004660:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b088      	sub	sp, #32
 8004672:	af02      	add	r7, sp, #8
 8004674:	60f8      	str	r0, [r7, #12]
 8004676:	60b9      	str	r1, [r7, #8]
 8004678:	603b      	str	r3, [r7, #0]
 800467a:	4613      	mov	r3, r2
 800467c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800467e:	2300      	movs	r3, #0
 8004680:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b20      	cmp	r3, #32
 800468c:	f040 8083 	bne.w	8004796 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <HAL_UART_Transmit+0x2e>
 8004696:	88fb      	ldrh	r3, [r7, #6]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e07b      	b.n	8004798 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d101      	bne.n	80046ae <HAL_UART_Transmit+0x40>
 80046aa:	2302      	movs	r3, #2
 80046ac:	e074      	b.n	8004798 <HAL_UART_Transmit+0x12a>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2221      	movs	r2, #33	; 0x21
 80046c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80046c4:	f7fc fc9e 	bl	8001004 <HAL_GetTick>
 80046c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	88fa      	ldrh	r2, [r7, #6]
 80046ce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	88fa      	ldrh	r2, [r7, #6]
 80046d4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046d6:	e042      	b.n	800475e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046dc:	b29b      	uxth	r3, r3
 80046de:	3b01      	subs	r3, #1
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ee:	d122      	bne.n	8004736 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	9300      	str	r3, [sp, #0]
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	2200      	movs	r2, #0
 80046f8:	2180      	movs	r1, #128	; 0x80
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 f850 	bl	80047a0 <UART_WaitOnFlagUntilTimeout>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e046      	b.n	8004798 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	461a      	mov	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800471c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d103      	bne.n	800472e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	3302      	adds	r3, #2
 800472a:	60bb      	str	r3, [r7, #8]
 800472c:	e017      	b.n	800475e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	3301      	adds	r3, #1
 8004732:	60bb      	str	r3, [r7, #8]
 8004734:	e013      	b.n	800475e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	2200      	movs	r2, #0
 800473e:	2180      	movs	r1, #128	; 0x80
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 f82d 	bl	80047a0 <UART_WaitOnFlagUntilTimeout>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e023      	b.n	8004798 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	1c5a      	adds	r2, r3, #1
 8004754:	60ba      	str	r2, [r7, #8]
 8004756:	781a      	ldrb	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004762:	b29b      	uxth	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1b7      	bne.n	80046d8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	2200      	movs	r2, #0
 8004770:	2140      	movs	r1, #64	; 0x40
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 f814 	bl	80047a0 <UART_WaitOnFlagUntilTimeout>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e00a      	b.n	8004798 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2220      	movs	r2, #32
 8004786:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004792:	2300      	movs	r3, #0
 8004794:	e000      	b.n	8004798 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004796:	2302      	movs	r3, #2
  }
}
 8004798:	4618      	mov	r0, r3
 800479a:	3718      	adds	r7, #24
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	603b      	str	r3, [r7, #0]
 80047ac:	4613      	mov	r3, r2
 80047ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047b0:	e02c      	b.n	800480c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b8:	d028      	beq.n	800480c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d007      	beq.n	80047d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80047c0:	f7fc fc20 	bl	8001004 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d21d      	bcs.n	800480c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68da      	ldr	r2, [r3, #12]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047de:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695a      	ldr	r2, [r3, #20]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 0201 	bic.w	r2, r2, #1
 80047ee:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2220      	movs	r2, #32
 80047f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2220      	movs	r2, #32
 80047fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e00f      	b.n	800482c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	4013      	ands	r3, r2
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	429a      	cmp	r2, r3
 800481a:	bf0c      	ite	eq
 800481c:	2301      	moveq	r3, #1
 800481e:	2300      	movne	r3, #0
 8004820:	b2db      	uxtb	r3, r3
 8004822:	461a      	mov	r2, r3
 8004824:	79fb      	ldrb	r3, [r7, #7]
 8004826:	429a      	cmp	r2, r3
 8004828:	d0c3      	beq.n	80047b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004834:	b5b0      	push	{r4, r5, r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689a      	ldr	r2, [r3, #8]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	431a      	orrs	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	4313      	orrs	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004874:	f023 030c 	bic.w	r3, r3, #12
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6812      	ldr	r2, [r2, #0]
 800487c:	68f9      	ldr	r1, [r7, #12]
 800487e:	430b      	orrs	r3, r1
 8004880:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	699a      	ldr	r2, [r3, #24]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	69db      	ldr	r3, [r3, #28]
 800489c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048a0:	f040 80e4 	bne.w	8004a6c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4aab      	ldr	r2, [pc, #684]	; (8004b58 <UART_SetConfig+0x324>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d004      	beq.n	80048b8 <UART_SetConfig+0x84>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4aaa      	ldr	r2, [pc, #680]	; (8004b5c <UART_SetConfig+0x328>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d16c      	bne.n	8004992 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80048b8:	f7fe f934 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 80048bc:	4602      	mov	r2, r0
 80048be:	4613      	mov	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	009a      	lsls	r2, r3, #2
 80048c6:	441a      	add	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d2:	4aa3      	ldr	r2, [pc, #652]	; (8004b60 <UART_SetConfig+0x32c>)
 80048d4:	fba2 2303 	umull	r2, r3, r2, r3
 80048d8:	095b      	lsrs	r3, r3, #5
 80048da:	011c      	lsls	r4, r3, #4
 80048dc:	f7fe f922 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 80048e0:	4602      	mov	r2, r0
 80048e2:	4613      	mov	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	009a      	lsls	r2, r3, #2
 80048ea:	441a      	add	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	fbb2 f5f3 	udiv	r5, r2, r3
 80048f6:	f7fe f915 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 80048fa:	4602      	mov	r2, r0
 80048fc:	4613      	mov	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	009a      	lsls	r2, r3, #2
 8004904:	441a      	add	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004910:	4a93      	ldr	r2, [pc, #588]	; (8004b60 <UART_SetConfig+0x32c>)
 8004912:	fba2 2303 	umull	r2, r3, r2, r3
 8004916:	095b      	lsrs	r3, r3, #5
 8004918:	2264      	movs	r2, #100	; 0x64
 800491a:	fb02 f303 	mul.w	r3, r2, r3
 800491e:	1aeb      	subs	r3, r5, r3
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	3332      	adds	r3, #50	; 0x32
 8004924:	4a8e      	ldr	r2, [pc, #568]	; (8004b60 <UART_SetConfig+0x32c>)
 8004926:	fba2 2303 	umull	r2, r3, r2, r3
 800492a:	095b      	lsrs	r3, r3, #5
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004932:	441c      	add	r4, r3
 8004934:	f7fe f8f6 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004938:	4602      	mov	r2, r0
 800493a:	4613      	mov	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	009a      	lsls	r2, r3, #2
 8004942:	441a      	add	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	fbb2 f5f3 	udiv	r5, r2, r3
 800494e:	f7fe f8e9 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004952:	4602      	mov	r2, r0
 8004954:	4613      	mov	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	009a      	lsls	r2, r3, #2
 800495c:	441a      	add	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	fbb2 f3f3 	udiv	r3, r2, r3
 8004968:	4a7d      	ldr	r2, [pc, #500]	; (8004b60 <UART_SetConfig+0x32c>)
 800496a:	fba2 2303 	umull	r2, r3, r2, r3
 800496e:	095b      	lsrs	r3, r3, #5
 8004970:	2264      	movs	r2, #100	; 0x64
 8004972:	fb02 f303 	mul.w	r3, r2, r3
 8004976:	1aeb      	subs	r3, r5, r3
 8004978:	00db      	lsls	r3, r3, #3
 800497a:	3332      	adds	r3, #50	; 0x32
 800497c:	4a78      	ldr	r2, [pc, #480]	; (8004b60 <UART_SetConfig+0x32c>)
 800497e:	fba2 2303 	umull	r2, r3, r2, r3
 8004982:	095b      	lsrs	r3, r3, #5
 8004984:	f003 0207 	and.w	r2, r3, #7
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4422      	add	r2, r4
 800498e:	609a      	str	r2, [r3, #8]
 8004990:	e154      	b.n	8004c3c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004992:	f7fe f8b3 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004996:	4602      	mov	r2, r0
 8004998:	4613      	mov	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	009a      	lsls	r2, r3, #2
 80049a0:	441a      	add	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	005b      	lsls	r3, r3, #1
 80049a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ac:	4a6c      	ldr	r2, [pc, #432]	; (8004b60 <UART_SetConfig+0x32c>)
 80049ae:	fba2 2303 	umull	r2, r3, r2, r3
 80049b2:	095b      	lsrs	r3, r3, #5
 80049b4:	011c      	lsls	r4, r3, #4
 80049b6:	f7fe f8a1 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049ba:	4602      	mov	r2, r0
 80049bc:	4613      	mov	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	009a      	lsls	r2, r3, #2
 80049c4:	441a      	add	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	fbb2 f5f3 	udiv	r5, r2, r3
 80049d0:	f7fe f894 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049d4:	4602      	mov	r2, r0
 80049d6:	4613      	mov	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	009a      	lsls	r2, r3, #2
 80049de:	441a      	add	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	005b      	lsls	r3, r3, #1
 80049e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ea:	4a5d      	ldr	r2, [pc, #372]	; (8004b60 <UART_SetConfig+0x32c>)
 80049ec:	fba2 2303 	umull	r2, r3, r2, r3
 80049f0:	095b      	lsrs	r3, r3, #5
 80049f2:	2264      	movs	r2, #100	; 0x64
 80049f4:	fb02 f303 	mul.w	r3, r2, r3
 80049f8:	1aeb      	subs	r3, r5, r3
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	3332      	adds	r3, #50	; 0x32
 80049fe:	4a58      	ldr	r2, [pc, #352]	; (8004b60 <UART_SetConfig+0x32c>)
 8004a00:	fba2 2303 	umull	r2, r3, r2, r3
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a0c:	441c      	add	r4, r3
 8004a0e:	f7fe f875 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004a12:	4602      	mov	r2, r0
 8004a14:	4613      	mov	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	009a      	lsls	r2, r3, #2
 8004a1c:	441a      	add	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	fbb2 f5f3 	udiv	r5, r2, r3
 8004a28:	f7fe f868 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	4613      	mov	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	009a      	lsls	r2, r3, #2
 8004a36:	441a      	add	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a42:	4a47      	ldr	r2, [pc, #284]	; (8004b60 <UART_SetConfig+0x32c>)
 8004a44:	fba2 2303 	umull	r2, r3, r2, r3
 8004a48:	095b      	lsrs	r3, r3, #5
 8004a4a:	2264      	movs	r2, #100	; 0x64
 8004a4c:	fb02 f303 	mul.w	r3, r2, r3
 8004a50:	1aeb      	subs	r3, r5, r3
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	3332      	adds	r3, #50	; 0x32
 8004a56:	4a42      	ldr	r2, [pc, #264]	; (8004b60 <UART_SetConfig+0x32c>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	f003 0207 	and.w	r2, r3, #7
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4422      	add	r2, r4
 8004a68:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004a6a:	e0e7      	b.n	8004c3c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a39      	ldr	r2, [pc, #228]	; (8004b58 <UART_SetConfig+0x324>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d004      	beq.n	8004a80 <UART_SetConfig+0x24c>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a38      	ldr	r2, [pc, #224]	; (8004b5c <UART_SetConfig+0x328>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d171      	bne.n	8004b64 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004a80:	f7fe f850 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004a84:	4602      	mov	r2, r0
 8004a86:	4613      	mov	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	009a      	lsls	r2, r3, #2
 8004a8e:	441a      	add	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9a:	4a31      	ldr	r2, [pc, #196]	; (8004b60 <UART_SetConfig+0x32c>)
 8004a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa0:	095b      	lsrs	r3, r3, #5
 8004aa2:	011c      	lsls	r4, r3, #4
 8004aa4:	f7fe f83e 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	4613      	mov	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	009a      	lsls	r2, r3, #2
 8004ab2:	441a      	add	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	fbb2 f5f3 	udiv	r5, r2, r3
 8004abe:	f7fe f831 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	009a      	lsls	r2, r3, #2
 8004acc:	441a      	add	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad8:	4a21      	ldr	r2, [pc, #132]	; (8004b60 <UART_SetConfig+0x32c>)
 8004ada:	fba2 2303 	umull	r2, r3, r2, r3
 8004ade:	095b      	lsrs	r3, r3, #5
 8004ae0:	2264      	movs	r2, #100	; 0x64
 8004ae2:	fb02 f303 	mul.w	r3, r2, r3
 8004ae6:	1aeb      	subs	r3, r5, r3
 8004ae8:	011b      	lsls	r3, r3, #4
 8004aea:	3332      	adds	r3, #50	; 0x32
 8004aec:	4a1c      	ldr	r2, [pc, #112]	; (8004b60 <UART_SetConfig+0x32c>)
 8004aee:	fba2 2303 	umull	r2, r3, r2, r3
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004af8:	441c      	add	r4, r3
 8004afa:	f7fe f813 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004afe:	4602      	mov	r2, r0
 8004b00:	4613      	mov	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	009a      	lsls	r2, r3, #2
 8004b08:	441a      	add	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	fbb2 f5f3 	udiv	r5, r2, r3
 8004b14:	f7fe f806 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	009a      	lsls	r2, r3, #2
 8004b22:	441a      	add	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2e:	4a0c      	ldr	r2, [pc, #48]	; (8004b60 <UART_SetConfig+0x32c>)
 8004b30:	fba2 2303 	umull	r2, r3, r2, r3
 8004b34:	095b      	lsrs	r3, r3, #5
 8004b36:	2264      	movs	r2, #100	; 0x64
 8004b38:	fb02 f303 	mul.w	r3, r2, r3
 8004b3c:	1aeb      	subs	r3, r5, r3
 8004b3e:	011b      	lsls	r3, r3, #4
 8004b40:	3332      	adds	r3, #50	; 0x32
 8004b42:	4a07      	ldr	r2, [pc, #28]	; (8004b60 <UART_SetConfig+0x32c>)
 8004b44:	fba2 2303 	umull	r2, r3, r2, r3
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	f003 020f 	and.w	r2, r3, #15
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4422      	add	r2, r4
 8004b54:	609a      	str	r2, [r3, #8]
 8004b56:	e071      	b.n	8004c3c <UART_SetConfig+0x408>
 8004b58:	40011000 	.word	0x40011000
 8004b5c:	40011400 	.word	0x40011400
 8004b60:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004b64:	f7fd ffca 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4413      	add	r3, r2
 8004b70:	009a      	lsls	r2, r3, #2
 8004b72:	441a      	add	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7e:	4a31      	ldr	r2, [pc, #196]	; (8004c44 <UART_SetConfig+0x410>)
 8004b80:	fba2 2303 	umull	r2, r3, r2, r3
 8004b84:	095b      	lsrs	r3, r3, #5
 8004b86:	011c      	lsls	r4, r3, #4
 8004b88:	f7fd ffb8 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	4613      	mov	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	009a      	lsls	r2, r3, #2
 8004b96:	441a      	add	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004ba2:	f7fd ffab 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	009a      	lsls	r2, r3, #2
 8004bb0:	441a      	add	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bbc:	4a21      	ldr	r2, [pc, #132]	; (8004c44 <UART_SetConfig+0x410>)
 8004bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc2:	095b      	lsrs	r3, r3, #5
 8004bc4:	2264      	movs	r2, #100	; 0x64
 8004bc6:	fb02 f303 	mul.w	r3, r2, r3
 8004bca:	1aeb      	subs	r3, r5, r3
 8004bcc:	011b      	lsls	r3, r3, #4
 8004bce:	3332      	adds	r3, #50	; 0x32
 8004bd0:	4a1c      	ldr	r2, [pc, #112]	; (8004c44 <UART_SetConfig+0x410>)
 8004bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bdc:	441c      	add	r4, r3
 8004bde:	f7fd ff8d 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004be2:	4602      	mov	r2, r0
 8004be4:	4613      	mov	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	009a      	lsls	r2, r3, #2
 8004bec:	441a      	add	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	fbb2 f5f3 	udiv	r5, r2, r3
 8004bf8:	f7fd ff80 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	4613      	mov	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4413      	add	r3, r2
 8004c04:	009a      	lsls	r2, r3, #2
 8004c06:	441a      	add	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c12:	4a0c      	ldr	r2, [pc, #48]	; (8004c44 <UART_SetConfig+0x410>)
 8004c14:	fba2 2303 	umull	r2, r3, r2, r3
 8004c18:	095b      	lsrs	r3, r3, #5
 8004c1a:	2264      	movs	r2, #100	; 0x64
 8004c1c:	fb02 f303 	mul.w	r3, r2, r3
 8004c20:	1aeb      	subs	r3, r5, r3
 8004c22:	011b      	lsls	r3, r3, #4
 8004c24:	3332      	adds	r3, #50	; 0x32
 8004c26:	4a07      	ldr	r2, [pc, #28]	; (8004c44 <UART_SetConfig+0x410>)
 8004c28:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2c:	095b      	lsrs	r3, r3, #5
 8004c2e:	f003 020f 	and.w	r2, r3, #15
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4422      	add	r2, r4
 8004c38:	609a      	str	r2, [r3, #8]
}
 8004c3a:	e7ff      	b.n	8004c3c <UART_SetConfig+0x408>
 8004c3c:	bf00      	nop
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bdb0      	pop	{r4, r5, r7, pc}
 8004c44:	51eb851f 	.word	0x51eb851f

08004c48 <drive_init>:
//drive_init
// a走行系の変数の初期化
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_init(void){
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0
	MF.FLAGS = 0;
 8004c4c:	4b05      	ldr	r3, [pc, #20]	; (8004c64 <drive_init+0x1c>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	801a      	strh	r2, [r3, #0]
	MF2.FLAGS2 = 0;
 8004c52:	4b05      	ldr	r3, [pc, #20]	; (8004c68 <drive_init+0x20>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	801a      	strh	r2, [r3, #0]
}
 8004c58:	bf00      	nop
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	20000fa8 	.word	0x20000fa8
 8004c68:	20000fa4 	.word	0x20000fa4

08004c6c <drive_ready>:
//drive_ready
// a走行前のLED点滅&ジャイロのドリフト計算
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_ready(void){
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
	  while(ad_fl <= WALL_BASE_FL){
 8004c70:	e00f      	b.n	8004c92 <drive_ready+0x26>
		  led_write(1, 1, 1);
 8004c72:	2201      	movs	r2, #1
 8004c74:	2101      	movs	r1, #1
 8004c76:	2001      	movs	r0, #1
 8004c78:	f00d fae4 	bl	8012244 <led_write>
		  HAL_Delay(200);
 8004c7c:	20c8      	movs	r0, #200	; 0xc8
 8004c7e:	f7fc f9cd 	bl	800101c <HAL_Delay>
		  led_write(0, 0, 0);
 8004c82:	2200      	movs	r2, #0
 8004c84:	2100      	movs	r1, #0
 8004c86:	2000      	movs	r0, #0
 8004c88:	f00d fadc 	bl	8012244 <led_write>
		  HAL_Delay(200);
 8004c8c:	20c8      	movs	r0, #200	; 0xc8
 8004c8e:	f7fc f9c5 	bl	800101c <HAL_Delay>
	  while(ad_fl <= WALL_BASE_FL){
 8004c92:	4b09      	ldr	r3, [pc, #36]	; (8004cb8 <drive_ready+0x4c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2bc8      	cmp	r3, #200	; 0xc8
 8004c98:	d9eb      	bls.n	8004c72 <drive_ready+0x6>
	  }
	  MF2.FLAG.GDRIFT = 1;
 8004c9a:	4a08      	ldr	r2, [pc, #32]	; (8004cbc <drive_ready+0x50>)
 8004c9c:	8813      	ldrh	r3, [r2, #0]
 8004c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca2:	8013      	strh	r3, [r2, #0]
	  HAL_Delay(2000);
 8004ca4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004ca8:	f7fc f9b8 	bl	800101c <HAL_Delay>
	  degree_z = 0;
 8004cac:	4b04      	ldr	r3, [pc, #16]	; (8004cc0 <drive_ready+0x54>)
 8004cae:	f04f 0200 	mov.w	r2, #0
 8004cb2:	601a      	str	r2, [r3, #0]
}
 8004cb4:	bf00      	nop
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	20000d94 	.word	0x20000d94
 8004cbc:	20000fa4 	.word	0x20000fa4
 8004cc0:	20000b9c 	.word	0x20000b9c

08004cc4 <drive_start>:
//drive_start
// a走行開始前に走行距離と機体角度を初期化
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_start(void){
 8004cc4:	b480      	push	{r7}
 8004cc6:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//a走行距離の初期化
 8004cc8:	f04f 0300 	mov.w	r3, #0
 8004ccc:	4a0f      	ldr	r2, [pc, #60]	; (8004d0c <drive_start+0x48>)
 8004cce:	6013      	str	r3, [r2, #0]
 8004cd0:	4a0f      	ldr	r2, [pc, #60]	; (8004d10 <drive_start+0x4c>)
 8004cd2:	6013      	str	r3, [r2, #0]
	if(!MF2.FLAG.HACCEL) target_speed_l = target_speed_r = 0;		//aモータ出力の初期化
 8004cd4:	4b0f      	ldr	r3, [pc, #60]	; (8004d14 <drive_start+0x50>)
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d105      	bne.n	8004cee <drive_start+0x2a>
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	4a0c      	ldr	r2, [pc, #48]	; (8004d18 <drive_start+0x54>)
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	4a0c      	ldr	r2, [pc, #48]	; (8004d1c <drive_start+0x58>)
 8004cec:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 8004cee:	4a0c      	ldr	r2, [pc, #48]	; (8004d20 <drive_start+0x5c>)
 8004cf0:	8813      	ldrh	r3, [r2, #0]
 8004cf2:	f043 0302 	orr.w	r3, r3, #2
 8004cf6:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8004cf8:	4a09      	ldr	r2, [pc, #36]	; (8004d20 <drive_start+0x5c>)
 8004cfa:	8813      	ldrh	r3, [r2, #0]
 8004cfc:	f043 0304 	orr.w	r3, r3, #4
 8004d00:	8013      	strh	r3, [r2, #0]
}
 8004d02:	bf00      	nop
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	20000b2c 	.word	0x20000b2c
 8004d10:	20001644 	.word	0x20001644
 8004d14:	20000fa4 	.word	0x20000fa4
 8004d18:	200001a0 	.word	0x200001a0
 8004d1c:	20000c7c 	.word	0x20000c7c
 8004d20:	20000fa8 	.word	0x20000fa8

08004d24 <drive_stop>:
//drive_stop
// a走行を終了する
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_stop(void){
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//a走行距離の初期化
 8004d28:	f04f 0300 	mov.w	r3, #0
 8004d2c:	4a0c      	ldr	r2, [pc, #48]	; (8004d60 <drive_stop+0x3c>)
 8004d2e:	6013      	str	r3, [r2, #0]
 8004d30:	4a0c      	ldr	r2, [pc, #48]	; (8004d64 <drive_stop+0x40>)
 8004d32:	6013      	str	r3, [r2, #0]
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	4a0b      	ldr	r2, [pc, #44]	; (8004d68 <drive_stop+0x44>)
 8004d3a:	6013      	str	r3, [r2, #0]
 8004d3c:	4a0b      	ldr	r2, [pc, #44]	; (8004d6c <drive_stop+0x48>)
 8004d3e:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 0;
 8004d40:	4a0b      	ldr	r2, [pc, #44]	; (8004d70 <drive_stop+0x4c>)
 8004d42:	8813      	ldrh	r3, [r2, #0]
 8004d44:	f36f 0341 	bfc	r3, #1, #1
 8004d48:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 0;
 8004d4a:	4a09      	ldr	r2, [pc, #36]	; (8004d70 <drive_stop+0x4c>)
 8004d4c:	8813      	ldrh	r3, [r2, #0]
 8004d4e:	f36f 0382 	bfc	r3, #2, #1
 8004d52:	8013      	strh	r3, [r2, #0]
}
 8004d54:	bf00      	nop
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	20000b2c 	.word	0x20000b2c
 8004d64:	20001644 	.word	0x20001644
 8004d68:	20000780 	.word	0x20000780
 8004d6c:	20000c28 	.word	0x20000c28
 8004d70:	20000fa8 	.word	0x20000fa8

08004d74 <control_start>:
//control_start
// wallとgyroの姿勢制御を開始する
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void control_start(){
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0
	MF.FLAG.WCTRL = 1;										//wall制御を有効にする
 8004d78:	4a0f      	ldr	r2, [pc, #60]	; (8004db8 <control_start+0x44>)
 8004d7a:	8813      	ldrh	r3, [r2, #0]
 8004d7c:	f043 0308 	orr.w	r3, r3, #8
 8004d80:	8013      	strh	r3, [r2, #0]
	if(run_mode == 5 && MF2.FLAG.TEMP)MF.FLAG.WCTRL = 0;	//a高速走行時に壁制御を無効化し、ジャイロ制御のみに切り替え
 8004d82:	4b0e      	ldr	r3, [pc, #56]	; (8004dbc <control_start+0x48>)
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b05      	cmp	r3, #5
 8004d8a:	d10b      	bne.n	8004da4 <control_start+0x30>
 8004d8c:	4b0c      	ldr	r3, [pc, #48]	; (8004dc0 <control_start+0x4c>)
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	f3c3 2340 	ubfx	r3, r3, #9, #1
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d004      	beq.n	8004da4 <control_start+0x30>
 8004d9a:	4a07      	ldr	r2, [pc, #28]	; (8004db8 <control_start+0x44>)
 8004d9c:	8813      	ldrh	r3, [r2, #0]
 8004d9e:	f36f 03c3 	bfc	r3, #3, #1
 8004da2:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 1;										//gyro制御を有効にする
 8004da4:	4a04      	ldr	r2, [pc, #16]	; (8004db8 <control_start+0x44>)
 8004da6:	8813      	ldrh	r3, [r2, #0]
 8004da8:	f043 0310 	orr.w	r3, r3, #16
 8004dac:	8013      	strh	r3, [r2, #0]
}
 8004dae:	bf00      	nop
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	20000fa8 	.word	0x20000fa8
 8004dbc:	20000456 	.word	0x20000456
 8004dc0:	20000fa4 	.word	0x20000fa4

08004dc4 <control_stop>:
//control_stop
// wallとgyroの姿勢制御を停止する
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void control_stop(){
 8004dc4:	b480      	push	{r7}
 8004dc6:	af00      	add	r7, sp, #0
	MF.FLAG.WCTRL = 0;										//wall制御を無効にする
 8004dc8:	4a07      	ldr	r2, [pc, #28]	; (8004de8 <control_stop+0x24>)
 8004dca:	8813      	ldrh	r3, [r2, #0]
 8004dcc:	f36f 03c3 	bfc	r3, #3, #1
 8004dd0:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 0;										//gyro制御を無効にする
 8004dd2:	4a05      	ldr	r2, [pc, #20]	; (8004de8 <control_stop+0x24>)
 8004dd4:	8813      	ldrh	r3, [r2, #0]
 8004dd6:	f36f 1304 	bfc	r3, #4, #1
 8004dda:	8013      	strh	r3, [r2, #0]
}
 8004ddc:	bf00      	nop
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	20000fa8 	.word	0x20000fa8

08004dec <drive_dir>:
//drive_dir
// wheel turn dir for each wheel
// a引数:1車輪選択(0=>L, 1=>R), 2回転方向選択(0=>CW, 1=>CWW, 2=>ShortBrake, 3=>free)
// a戻り値: なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_dir(uint8_t wheel, uint8_t dir){
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	4603      	mov	r3, r0
 8004df4:	460a      	mov	r2, r1
 8004df6:	71fb      	strb	r3, [r7, #7]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	71bb      	strb	r3, [r7, #6]
	if(wheel == 0){
 8004dfc:	79fb      	ldrb	r3, [r7, #7]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d145      	bne.n	8004e8e <drive_dir+0xa2>
		if(dir == 0){
 8004e02:	79bb      	ldrb	r3, [r7, #6]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d111      	bne.n	8004e2c <drive_dir+0x40>
		    HAL_GPIO_WritePin(MOTOR_L_CW_GPIO_Port, MOTOR_L_CW_Pin, GPIO_PIN_SET);				//L_CW
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e0e:	4846      	ldr	r0, [pc, #280]	; (8004f28 <drive_dir+0x13c>)
 8004e10:	f7fd fa78 	bl	8002304 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(MOTOR_L_CCW_GPIO_Port, MOTOR_L_CCW_Pin, GPIO_PIN_RESET);			//L_CCW
 8004e14:	2200      	movs	r2, #0
 8004e16:	2102      	movs	r1, #2
 8004e18:	4843      	ldr	r0, [pc, #268]	; (8004f28 <drive_dir+0x13c>)
 8004e1a:	f7fd fa73 	bl	8002304 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(MOTOR_L_R_STBY_GPIO_Port, MOTOR_L_R_STBY_Pin, GPIO_PIN_SET);		//STBY
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e24:	4840      	ldr	r0, [pc, #256]	; (8004f28 <drive_dir+0x13c>)
 8004e26:	f7fd fa6d 	bl	8002304 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(MOTOR_L_R_STBY_GPIO_Port, MOTOR_L_R_STBY_Pin, GPIO_PIN_SET);		//STBY
		}else{
		    HAL_GPIO_WritePin(MOTOR_L_R_STBY_GPIO_Port, MOTOR_L_R_STBY_Pin, GPIO_PIN_SET);		//STBY
		}
	}
}
 8004e2a:	e078      	b.n	8004f1e <drive_dir+0x132>
		}else if(dir == 1){
 8004e2c:	79bb      	ldrb	r3, [r7, #6]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d111      	bne.n	8004e56 <drive_dir+0x6a>
		    HAL_GPIO_WritePin(MOTOR_L_CW_GPIO_Port, MOTOR_L_CW_Pin, GPIO_PIN_RESET);			//L_CW
 8004e32:	2200      	movs	r2, #0
 8004e34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e38:	483b      	ldr	r0, [pc, #236]	; (8004f28 <drive_dir+0x13c>)
 8004e3a:	f7fd fa63 	bl	8002304 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(MOTOR_L_CCW_GPIO_Port, MOTOR_L_CCW_Pin, GPIO_PIN_SET);			//L_CCW
 8004e3e:	2201      	movs	r2, #1
 8004e40:	2102      	movs	r1, #2
 8004e42:	4839      	ldr	r0, [pc, #228]	; (8004f28 <drive_dir+0x13c>)
 8004e44:	f7fd fa5e 	bl	8002304 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(MOTOR_L_R_STBY_GPIO_Port, MOTOR_L_R_STBY_Pin, GPIO_PIN_SET);		//STBY
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e4e:	4836      	ldr	r0, [pc, #216]	; (8004f28 <drive_dir+0x13c>)
 8004e50:	f7fd fa58 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e54:	e063      	b.n	8004f1e <drive_dir+0x132>
		}else if(dir == 2){
 8004e56:	79bb      	ldrb	r3, [r7, #6]
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d111      	bne.n	8004e80 <drive_dir+0x94>
		    HAL_GPIO_WritePin(MOTOR_L_CW_GPIO_Port, MOTOR_L_CW_Pin, GPIO_PIN_SET);				//L_CW
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e62:	4831      	ldr	r0, [pc, #196]	; (8004f28 <drive_dir+0x13c>)
 8004e64:	f7fd fa4e 	bl	8002304 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(MOTOR_L_CCW_GPIO_Port, MOTOR_L_CCW_Pin, GPIO_PIN_SET);			//L_CCW
 8004e68:	2201      	movs	r2, #1
 8004e6a:	2102      	movs	r1, #2
 8004e6c:	482e      	ldr	r0, [pc, #184]	; (8004f28 <drive_dir+0x13c>)
 8004e6e:	f7fd fa49 	bl	8002304 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(MOTOR_L_R_STBY_GPIO_Port, MOTOR_L_R_STBY_Pin, GPIO_PIN_SET);		//STBY
 8004e72:	2201      	movs	r2, #1
 8004e74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e78:	482b      	ldr	r0, [pc, #172]	; (8004f28 <drive_dir+0x13c>)
 8004e7a:	f7fd fa43 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e7e:	e04e      	b.n	8004f1e <drive_dir+0x132>
		    HAL_GPIO_WritePin(MOTOR_L_R_STBY_GPIO_Port, MOTOR_L_R_STBY_Pin, GPIO_PIN_SET);		//STBY
 8004e80:	2201      	movs	r2, #1
 8004e82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e86:	4828      	ldr	r0, [pc, #160]	; (8004f28 <drive_dir+0x13c>)
 8004e88:	f7fd fa3c 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e8c:	e047      	b.n	8004f1e <drive_dir+0x132>
		if(dir == 0){
 8004e8e:	79bb      	ldrb	r3, [r7, #6]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d112      	bne.n	8004eba <drive_dir+0xce>
		    HAL_GPIO_WritePin(MOTOR_R_CW_GPIO_Port, MOTOR_R_CW_Pin, GPIO_PIN_SET);				//R_CW
 8004e94:	2201      	movs	r2, #1
 8004e96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004e9a:	4823      	ldr	r0, [pc, #140]	; (8004f28 <drive_dir+0x13c>)
 8004e9c:	f7fd fa32 	bl	8002304 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(MOTOR_R_CCW_GPIO_Port, MOTOR_R_CCW_Pin, GPIO_PIN_RESET);			//R_CCW
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004ea6:	4820      	ldr	r0, [pc, #128]	; (8004f28 <drive_dir+0x13c>)
 8004ea8:	f7fd fa2c 	bl	8002304 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(MOTOR_L_R_STBY_GPIO_Port, MOTOR_L_R_STBY_Pin, GPIO_PIN_SET);		//STBY
 8004eac:	2201      	movs	r2, #1
 8004eae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004eb2:	481d      	ldr	r0, [pc, #116]	; (8004f28 <drive_dir+0x13c>)
 8004eb4:	f7fd fa26 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004eb8:	e031      	b.n	8004f1e <drive_dir+0x132>
		}else if(dir == 1){
 8004eba:	79bb      	ldrb	r3, [r7, #6]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d112      	bne.n	8004ee6 <drive_dir+0xfa>
		    HAL_GPIO_WritePin(MOTOR_R_CW_GPIO_Port, MOTOR_R_CW_Pin, GPIO_PIN_RESET);			//R_CW
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004ec6:	4818      	ldr	r0, [pc, #96]	; (8004f28 <drive_dir+0x13c>)
 8004ec8:	f7fd fa1c 	bl	8002304 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(MOTOR_R_CCW_GPIO_Port, MOTOR_R_CCW_Pin, GPIO_PIN_SET);			//R_CCW
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004ed2:	4815      	ldr	r0, [pc, #84]	; (8004f28 <drive_dir+0x13c>)
 8004ed4:	f7fd fa16 	bl	8002304 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(MOTOR_L_R_STBY_GPIO_Port, MOTOR_L_R_STBY_Pin, GPIO_PIN_SET);		//STBY
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ede:	4812      	ldr	r0, [pc, #72]	; (8004f28 <drive_dir+0x13c>)
 8004ee0:	f7fd fa10 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004ee4:	e01b      	b.n	8004f1e <drive_dir+0x132>
		}else if(dir == 2){
 8004ee6:	79bb      	ldrb	r3, [r7, #6]
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d112      	bne.n	8004f12 <drive_dir+0x126>
		    HAL_GPIO_WritePin(MOTOR_R_CW_GPIO_Port, MOTOR_R_CW_Pin, GPIO_PIN_SET);				//R_CW
 8004eec:	2201      	movs	r2, #1
 8004eee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004ef2:	480d      	ldr	r0, [pc, #52]	; (8004f28 <drive_dir+0x13c>)
 8004ef4:	f7fd fa06 	bl	8002304 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(MOTOR_R_CCW_GPIO_Port, MOTOR_R_CCW_Pin, GPIO_PIN_SET);			//R_CCW
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004efe:	480a      	ldr	r0, [pc, #40]	; (8004f28 <drive_dir+0x13c>)
 8004f00:	f7fd fa00 	bl	8002304 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(MOTOR_L_R_STBY_GPIO_Port, MOTOR_L_R_STBY_Pin, GPIO_PIN_SET);		//STBY
 8004f04:	2201      	movs	r2, #1
 8004f06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f0a:	4807      	ldr	r0, [pc, #28]	; (8004f28 <drive_dir+0x13c>)
 8004f0c:	f7fd f9fa 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004f10:	e005      	b.n	8004f1e <drive_dir+0x132>
		    HAL_GPIO_WritePin(MOTOR_L_R_STBY_GPIO_Port, MOTOR_L_R_STBY_Pin, GPIO_PIN_SET);		//STBY
 8004f12:	2201      	movs	r2, #1
 8004f14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f18:	4803      	ldr	r0, [pc, #12]	; (8004f28 <drive_dir+0x13c>)
 8004f1a:	f7fd f9f3 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004f1e:	bf00      	nop
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	40020400 	.word	0x40020400

08004f2c <run_select>:
//run_select
// a走行速度を選択する
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void run_select(){
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
	full_led_write1(YELLOW);
 8004f32:	2006      	movs	r0, #6
 8004f34:	f00d f9c0 	bl	80122b8 <full_led_write1>
	int mode = 0;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	607b      	str	r3, [r7, #4]

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	b2d8      	uxtb	r0, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	b2d9      	uxtb	r1, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	f003 0304 	and.w	r3, r3, #4
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	f00d f972 	bl	8012244 <led_write>
		if(dist_r >= 20){
 8004f60:	4b21      	ldr	r3, [pc, #132]	; (8004fe8 <run_select+0xbc>)
 8004f62:	edd3 7a00 	vldr	s15, [r3]
 8004f66:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004f6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f72:	db0f      	blt.n	8004f94 <run_select+0x68>
			  mode++;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	3301      	adds	r3, #1
 8004f78:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8004f7a:	4b1b      	ldr	r3, [pc, #108]	; (8004fe8 <run_select+0xbc>)
 8004f7c:	f04f 0200 	mov.w	r2, #0
 8004f80:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b07      	cmp	r3, #7
 8004f86:	dd01      	ble.n	8004f8c <run_select+0x60>
				  mode = 0;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8004f8c:	6879      	ldr	r1, [r7, #4]
 8004f8e:	4817      	ldr	r0, [pc, #92]	; (8004fec <run_select+0xc0>)
 8004f90:	f00d ff76 	bl	8012e80 <iprintf>
		}
		if(dist_r <= -20){
 8004f94:	4b14      	ldr	r3, [pc, #80]	; (8004fe8 <run_select+0xbc>)
 8004f96:	edd3 7a00 	vldr	s15, [r3]
 8004f9a:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8004f9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fa6:	d80f      	bhi.n	8004fc8 <run_select+0x9c>
			  mode--;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8004fae:	4b0e      	ldr	r3, [pc, #56]	; (8004fe8 <run_select+0xbc>)
 8004fb0:	f04f 0200 	mov.w	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	da01      	bge.n	8004fc0 <run_select+0x94>
				  mode = 7;
 8004fbc:	2307      	movs	r3, #7
 8004fbe:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8004fc0:	6879      	ldr	r1, [r7, #4]
 8004fc2:	480a      	ldr	r0, [pc, #40]	; (8004fec <run_select+0xc0>)
 8004fc4:	f00d ff5c 	bl	8012e80 <iprintf>
		}
		if(ad_fl >= WALL_BASE_FL){
 8004fc8:	4b09      	ldr	r3, [pc, #36]	; (8004ff0 <run_select+0xc4>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2bc7      	cmp	r3, #199	; 0xc7
 8004fce:	d9b5      	bls.n	8004f3c <run_select+0x10>
			  run_mode = mode;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	4b07      	ldr	r3, [pc, #28]	; (8004ff4 <run_select+0xc8>)
 8004fd6:	701a      	strb	r2, [r3, #0]
			  full_led_write1(BLUEGREEN);
 8004fd8:	2004      	movs	r0, #4
 8004fda:	f00d f96d 	bl	80122b8 <full_led_write1>
			  break;
 8004fde:	bf00      	nop
		}
	}
}
 8004fe0:	bf00      	nop
 8004fe2:	3708      	adds	r7, #8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	20000b2c 	.word	0x20000b2c
 8004fec:	080140bc 	.word	0x080140bc
 8004ff0:	20000d94 	.word	0x20000d94
 8004ff4:	20000456 	.word	0x20000456

08004ff8 <driveA>:
//driveA
// a指定距離、指定加速度で加速走行する
// a引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveA(uint16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 8004ff8:	b590      	push	{r4, r7, lr}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	4604      	mov	r4, r0
 8005000:	4608      	mov	r0, r1
 8005002:	4611      	mov	r1, r2
 8005004:	461a      	mov	r2, r3
 8005006:	4623      	mov	r3, r4
 8005008:	80fb      	strh	r3, [r7, #6]
 800500a:	4603      	mov	r3, r0
 800500c:	80bb      	strh	r3, [r7, #4]
 800500e:	460b      	mov	r3, r1
 8005010:	807b      	strh	r3, [r7, #2]
 8005012:	4613      	mov	r3, r2
 8005014:	803b      	strh	r3, [r7, #0]

	speed_min_l = speed_min_r = speed_min_p;
 8005016:	88bb      	ldrh	r3, [r7, #4]
 8005018:	ee07 3a90 	vmov	s15, r3
 800501c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005020:	4b27      	ldr	r3, [pc, #156]	; (80050c0 <driveA+0xc8>)
 8005022:	edc3 7a00 	vstr	s15, [r3]
 8005026:	4b27      	ldr	r3, [pc, #156]	; (80050c4 <driveA+0xcc>)
 8005028:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 800502c:	887b      	ldrh	r3, [r7, #2]
 800502e:	ee07 3a90 	vmov	s15, r3
 8005032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005036:	4b24      	ldr	r3, [pc, #144]	; (80050c8 <driveA+0xd0>)
 8005038:	edc3 7a00 	vstr	s15, [r3]
 800503c:	4b23      	ldr	r3, [pc, #140]	; (80050cc <driveA+0xd4>)
 800503e:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;							//a引数の各パラメータをグローバル変数化
 8005042:	88fb      	ldrh	r3, [r7, #6]
 8005044:	ee07 3a90 	vmov	s15, r3
 8005048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800504c:	4b20      	ldr	r3, [pc, #128]	; (80050d0 <driveA+0xd8>)
 800504e:	edc3 7a00 	vstr	s15, [r3]
 8005052:	4b20      	ldr	r3, [pc, #128]	; (80050d4 <driveA+0xdc>)
 8005054:	edc3 7a00 	vstr	s15, [r3]
	if(MF2.FLAG.HACCEL)target_speed_l = target_speed_r = speed_min_p;
 8005058:	4b1f      	ldr	r3, [pc, #124]	; (80050d8 <driveA+0xe0>)
 800505a:	881b      	ldrh	r3, [r3, #0]
 800505c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00a      	beq.n	800507c <driveA+0x84>
 8005066:	88bb      	ldrh	r3, [r7, #4]
 8005068:	ee07 3a90 	vmov	s15, r3
 800506c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005070:	4b1a      	ldr	r3, [pc, #104]	; (80050dc <driveA+0xe4>)
 8005072:	edc3 7a00 	vstr	s15, [r3]
 8005076:	4b1a      	ldr	r3, [pc, #104]	; (80050e0 <driveA+0xe8>)
 8005078:	edc3 7a00 	vstr	s15, [r3]

	drive_start();											//a走行開始
 800507c:	f7ff fe22 	bl	8004cc4 <drive_start>

	//----a走行----
	while((dist_l < dist) || (dist_r < dist));				//a左右のモータが指定距離以上進むまで待機
 8005080:	bf00      	nop
 8005082:	883b      	ldrh	r3, [r7, #0]
 8005084:	ee07 3a90 	vmov	s15, r3
 8005088:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800508c:	4b15      	ldr	r3, [pc, #84]	; (80050e4 <driveA+0xec>)
 800508e:	edd3 7a00 	vldr	s15, [r3]
 8005092:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800509a:	dcf2      	bgt.n	8005082 <driveA+0x8a>
 800509c:	883b      	ldrh	r3, [r7, #0]
 800509e:	ee07 3a90 	vmov	s15, r3
 80050a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050a6:	4b10      	ldr	r3, [pc, #64]	; (80050e8 <driveA+0xf0>)
 80050a8:	edd3 7a00 	vldr	s15, [r3]
 80050ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b4:	dce5      	bgt.n	8005082 <driveA+0x8a>
}
 80050b6:	bf00      	nop
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd90      	pop	{r4, r7, pc}
 80050be:	bf00      	nop
 80050c0:	20000fec 	.word	0x20000fec
 80050c4:	20000b94 	.word	0x20000b94
 80050c8:	200001a4 	.word	0x200001a4
 80050cc:	2000077c 	.word	0x2000077c
 80050d0:	20000b24 	.word	0x20000b24
 80050d4:	20000d98 	.word	0x20000d98
 80050d8:	20000fa4 	.word	0x20000fa4
 80050dc:	200001a0 	.word	0x200001a0
 80050e0:	20000c7c 	.word	0x20000c7c
 80050e4:	20001644 	.word	0x20001644
 80050e8:	20000b2c 	.word	0x20000b2c

080050ec <driveD>:
//driveD
// a指定距離、指定減速度で減速走行する
// a引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveD(int16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 80050ec:	b590      	push	{r4, r7, lr}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	4604      	mov	r4, r0
 80050f4:	4608      	mov	r0, r1
 80050f6:	4611      	mov	r1, r2
 80050f8:	461a      	mov	r2, r3
 80050fa:	4623      	mov	r3, r4
 80050fc:	80fb      	strh	r3, [r7, #6]
 80050fe:	4603      	mov	r3, r0
 8005100:	80bb      	strh	r3, [r7, #4]
 8005102:	460b      	mov	r3, r1
 8005104:	807b      	strh	r3, [r7, #2]
 8005106:	4613      	mov	r3, r2
 8005108:	803b      	strh	r3, [r7, #0]

	float speed_0 = (target_speed_l + target_speed_r) / 2;					//a等速走行距離を計算するためにmain.cより参照
 800510a:	4b5a      	ldr	r3, [pc, #360]	; (8005274 <driveD+0x188>)
 800510c:	ed93 7a00 	vldr	s14, [r3]
 8005110:	4b59      	ldr	r3, [pc, #356]	; (8005278 <driveD+0x18c>)
 8005112:	edd3 7a00 	vldr	s15, [r3]
 8005116:	ee37 7a27 	vadd.f32	s14, s14, s15
 800511a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800511e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005122:	edc7 7a03 	vstr	s15, [r7, #12]
	speed_min_l = speed_min_r = speed_min_p;
 8005126:	88bb      	ldrh	r3, [r7, #4]
 8005128:	ee07 3a90 	vmov	s15, r3
 800512c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005130:	4b52      	ldr	r3, [pc, #328]	; (800527c <driveD+0x190>)
 8005132:	edc3 7a00 	vstr	s15, [r3]
 8005136:	4b52      	ldr	r3, [pc, #328]	; (8005280 <driveD+0x194>)
 8005138:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 800513c:	887b      	ldrh	r3, [r7, #2]
 800513e:	ee07 3a90 	vmov	s15, r3
 8005142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005146:	4b4f      	ldr	r3, [pc, #316]	; (8005284 <driveD+0x198>)
 8005148:	edc3 7a00 	vstr	s15, [r3]
 800514c:	4b4e      	ldr	r3, [pc, #312]	; (8005288 <driveD+0x19c>)
 800514e:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;											//a引数の各パラメータをグローバル変数化
 8005152:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005156:	ee07 3a90 	vmov	s15, r3
 800515a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800515e:	4b4b      	ldr	r3, [pc, #300]	; (800528c <driveD+0x1a0>)
 8005160:	edc3 7a00 	vstr	s15, [r3]
 8005164:	4b4a      	ldr	r3, [pc, #296]	; (8005290 <driveD+0x1a4>)
 8005166:	edc3 7a00 	vstr	s15, [r3]

	int16_t c_dist = dist - (speed_min_l*speed_min_l  - speed_0*speed_0)/(2*accel_l);			//a等速走行距離 = 総距離 - 減速に必要な距離
 800516a:	883b      	ldrh	r3, [r7, #0]
 800516c:	ee07 3a90 	vmov	s15, r3
 8005170:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005174:	4b42      	ldr	r3, [pc, #264]	; (8005280 <driveD+0x194>)
 8005176:	edd3 6a00 	vldr	s13, [r3]
 800517a:	4b41      	ldr	r3, [pc, #260]	; (8005280 <driveD+0x194>)
 800517c:	edd3 7a00 	vldr	s15, [r3]
 8005180:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005184:	ed97 6a03 	vldr	s12, [r7, #12]
 8005188:	edd7 7a03 	vldr	s15, [r7, #12]
 800518c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005190:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8005194:	4b3e      	ldr	r3, [pc, #248]	; (8005290 <driveD+0x1a4>)
 8005196:	edd3 7a00 	vldr	s15, [r3]
 800519a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800519e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80051a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051aa:	ee17 3a90 	vmov	r3, s15
 80051ae:	817b      	strh	r3, [r7, #10]

	accel_l = accel_r = 0;
 80051b0:	f04f 0300 	mov.w	r3, #0
 80051b4:	4a35      	ldr	r2, [pc, #212]	; (800528c <driveD+0x1a0>)
 80051b6:	6013      	str	r3, [r2, #0]
 80051b8:	4a35      	ldr	r2, [pc, #212]	; (8005290 <driveD+0x1a4>)
 80051ba:	6013      	str	r3, [r2, #0]
	dist_l = dist_r = 0;
 80051bc:	f04f 0300 	mov.w	r3, #0
 80051c0:	4a34      	ldr	r2, [pc, #208]	; (8005294 <driveD+0x1a8>)
 80051c2:	6013      	str	r3, [r2, #0]
 80051c4:	4a34      	ldr	r2, [pc, #208]	; (8005298 <driveD+0x1ac>)
 80051c6:	6013      	str	r3, [r2, #0]
	if(c_dist > 0){
 80051c8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	dd1c      	ble.n	800520a <driveD+0x11e>
		//----a等速走行----
		while((dist_l < c_dist) || (dist_r < c_dist));						//a左右のモータが等速分の距離以上進むまで待機
 80051d0:	bf00      	nop
 80051d2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80051d6:	ee07 3a90 	vmov	s15, r3
 80051da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051de:	4b2e      	ldr	r3, [pc, #184]	; (8005298 <driveD+0x1ac>)
 80051e0:	edd3 7a00 	vldr	s15, [r3]
 80051e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ec:	dcf1      	bgt.n	80051d2 <driveD+0xe6>
 80051ee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80051f2:	ee07 3a90 	vmov	s15, r3
 80051f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051fa:	4b26      	ldr	r3, [pc, #152]	; (8005294 <driveD+0x1a8>)
 80051fc:	edd3 7a00 	vldr	s15, [r3]
 8005200:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005208:	dce3      	bgt.n	80051d2 <driveD+0xe6>
	}
	accel_l = accel_r = accel_p;
 800520a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800520e:	ee07 3a90 	vmov	s15, r3
 8005212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005216:	4b1d      	ldr	r3, [pc, #116]	; (800528c <driveD+0x1a0>)
 8005218:	edc3 7a00 	vstr	s15, [r3]
 800521c:	4b1c      	ldr	r3, [pc, #112]	; (8005290 <driveD+0x1a4>)
 800521e:	edc3 7a00 	vstr	s15, [r3]
	//----a減速走行----
	while((dist_l < dist) && (dist_r < dist));								//a左右のモータが減速分の距離以上進むまで待機
 8005222:	bf00      	nop
 8005224:	883b      	ldrh	r3, [r7, #0]
 8005226:	ee07 3a90 	vmov	s15, r3
 800522a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800522e:	4b1a      	ldr	r3, [pc, #104]	; (8005298 <driveD+0x1ac>)
 8005230:	edd3 7a00 	vldr	s15, [r3]
 8005234:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800523c:	dd0c      	ble.n	8005258 <driveD+0x16c>
 800523e:	883b      	ldrh	r3, [r7, #0]
 8005240:	ee07 3a90 	vmov	s15, r3
 8005244:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005248:	4b12      	ldr	r3, [pc, #72]	; (8005294 <driveD+0x1a8>)
 800524a:	edd3 7a00 	vldr	s15, [r3]
 800524e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005256:	dce5      	bgt.n	8005224 <driveD+0x138>

	if(!MF2.FLAG.HACCEL)drive_stop();										//a走行停止
 8005258:	4b10      	ldr	r3, [pc, #64]	; (800529c <driveD+0x1b0>)
 800525a:	881b      	ldrh	r3, [r3, #0]
 800525c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <driveD+0x17e>
 8005266:	f7ff fd5d 	bl	8004d24 <drive_stop>
}
 800526a:	bf00      	nop
 800526c:	3714      	adds	r7, #20
 800526e:	46bd      	mov	sp, r7
 8005270:	bd90      	pop	{r4, r7, pc}
 8005272:	bf00      	nop
 8005274:	20000c7c 	.word	0x20000c7c
 8005278:	200001a0 	.word	0x200001a0
 800527c:	20000fec 	.word	0x20000fec
 8005280:	20000b94 	.word	0x20000b94
 8005284:	200001a4 	.word	0x200001a4
 8005288:	2000077c 	.word	0x2000077c
 800528c:	20000b24 	.word	0x20000b24
 8005290:	20000d98 	.word	0x20000d98
 8005294:	20000b2c 	.word	0x20000b2c
 8005298:	20001644 	.word	0x20001644
 800529c:	20000fa4 	.word	0x20000fa4

080052a0 <driveU>:
//driveU
// a指定距離分等速走行して停止する
// a引数1：dist …… 走行距離
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveU(uint16_t dist){
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	4603      	mov	r3, r0
 80052a8:	80fb      	strh	r3, [r7, #6]

	accel_l = accel_r = 0;									//a等速走行のため加速度は0
 80052aa:	f04f 0300 	mov.w	r3, #0
 80052ae:	4a28      	ldr	r2, [pc, #160]	; (8005350 <driveU+0xb0>)
 80052b0:	6013      	str	r3, [r2, #0]
 80052b2:	4a28      	ldr	r2, [pc, #160]	; (8005354 <driveU+0xb4>)
 80052b4:	6013      	str	r3, [r2, #0]
	dist_l = dist_r = 0;
 80052b6:	f04f 0300 	mov.w	r3, #0
 80052ba:	4a27      	ldr	r2, [pc, #156]	; (8005358 <driveU+0xb8>)
 80052bc:	6013      	str	r3, [r2, #0]
 80052be:	4a27      	ldr	r2, [pc, #156]	; (800535c <driveU+0xbc>)
 80052c0:	6013      	str	r3, [r2, #0]

	//----a走行----
	while((dist_l < dist) || (dist_r < dist)){				//a左右のモータが指定パルス以上進むまで待機
 80052c2:	e024      	b.n	800530e <driveU+0x6e>
		if(MF.FLAG.WEDGE){
 80052c4:	4b26      	ldr	r3, [pc, #152]	; (8005360 <driveU+0xc0>)
 80052c6:	881b      	ldrh	r3, [r3, #0]
 80052c8:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d01d      	beq.n	800530e <driveU+0x6e>
			if(ad_l < WALL_BASE_L-40 || ad_r < WALL_BASE_R-40){
 80052d2:	4b24      	ldr	r3, [pc, #144]	; (8005364 <driveU+0xc4>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2b63      	cmp	r3, #99	; 0x63
 80052d8:	d903      	bls.n	80052e2 <driveU+0x42>
 80052da:	4b23      	ldr	r3, [pc, #140]	; (8005368 <driveU+0xc8>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2b4f      	cmp	r3, #79	; 0x4f
 80052e0:	d815      	bhi.n	800530e <driveU+0x6e>
				while((dist_l < W_DIST) || (dist_r < W_DIST));	//a左右のモータが壁切れ用指定距離以上進むまで待機
 80052e2:	bf00      	nop
 80052e4:	4b1d      	ldr	r3, [pc, #116]	; (800535c <driveU+0xbc>)
 80052e6:	edd3 7a00 	vldr	s15, [r3]
 80052ea:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800536c <driveU+0xcc>
 80052ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052f6:	d4f5      	bmi.n	80052e4 <driveU+0x44>
 80052f8:	4b17      	ldr	r3, [pc, #92]	; (8005358 <driveU+0xb8>)
 80052fa:	edd3 7a00 	vldr	s15, [r3]
 80052fe:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800536c <driveU+0xcc>
 8005302:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800530a:	d4eb      	bmi.n	80052e4 <driveU+0x44>
			break;
 800530c:	e019      	b.n	8005342 <driveU+0xa2>
	while((dist_l < dist) || (dist_r < dist)){				//a左右のモータが指定パルス以上進むまで待機
 800530e:	88fb      	ldrh	r3, [r7, #6]
 8005310:	ee07 3a90 	vmov	s15, r3
 8005314:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005318:	4b10      	ldr	r3, [pc, #64]	; (800535c <driveU+0xbc>)
 800531a:	edd3 7a00 	vldr	s15, [r3]
 800531e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005326:	dccd      	bgt.n	80052c4 <driveU+0x24>
 8005328:	88fb      	ldrh	r3, [r7, #6]
 800532a:	ee07 3a90 	vmov	s15, r3
 800532e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005332:	4b09      	ldr	r3, [pc, #36]	; (8005358 <driveU+0xb8>)
 8005334:	edd3 7a00 	vldr	s15, [r3]
 8005338:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800533c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005340:	dcc0      	bgt.n	80052c4 <driveU+0x24>
			}
		}
	}
}
 8005342:	bf00      	nop
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	20000b24 	.word	0x20000b24
 8005354:	20000d98 	.word	0x20000d98
 8005358:	20000b2c 	.word	0x20000b2c
 800535c:	20001644 	.word	0x20001644
 8005360:	20000fa8 	.word	0x20000fa8
 8005364:	20000b3c 	.word	0x20000b3c
 8005368:	20000fa0 	.word	0x20000fa0
 800536c:	428c0000 	.word	0x428c0000

08005370 <driveC>:
//driveC
// a指定距離分デフォルト速度で走行して停止する
// a引数1：dist …… 走行距離
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC(uint16_t dist){
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	4603      	mov	r3, r0
 8005378:	80fb      	strh	r3, [r7, #6]

	speed_min_l = speed_min_r = 150;
 800537a:	4b19      	ldr	r3, [pc, #100]	; (80053e0 <driveC+0x70>)
 800537c:	4a19      	ldr	r2, [pc, #100]	; (80053e4 <driveC+0x74>)
 800537e:	6013      	str	r3, [r2, #0]
 8005380:	4a19      	ldr	r2, [pc, #100]	; (80053e8 <driveC+0x78>)
 8005382:	6013      	str	r3, [r2, #0]
	speed_max_l = speed_max_r = 150;
 8005384:	4b16      	ldr	r3, [pc, #88]	; (80053e0 <driveC+0x70>)
 8005386:	4a19      	ldr	r2, [pc, #100]	; (80053ec <driveC+0x7c>)
 8005388:	6013      	str	r3, [r2, #0]
 800538a:	4a19      	ldr	r2, [pc, #100]	; (80053f0 <driveC+0x80>)
 800538c:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;									//a等速走行のため加速度は0
 800538e:	f04f 0300 	mov.w	r3, #0
 8005392:	4a18      	ldr	r2, [pc, #96]	; (80053f4 <driveC+0x84>)
 8005394:	6013      	str	r3, [r2, #0]
 8005396:	4a18      	ldr	r2, [pc, #96]	; (80053f8 <driveC+0x88>)
 8005398:	6013      	str	r3, [r2, #0]

	drive_start();											//a走行開始
 800539a:	f7ff fc93 	bl	8004cc4 <drive_start>
	//====a回転====
	while((dist_l < dist) || (dist_r < dist));				//a左右のモータが定速分の距離以上進むまで待機
 800539e:	bf00      	nop
 80053a0:	88fb      	ldrh	r3, [r7, #6]
 80053a2:	ee07 3a90 	vmov	s15, r3
 80053a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053aa:	4b14      	ldr	r3, [pc, #80]	; (80053fc <driveC+0x8c>)
 80053ac:	edd3 7a00 	vldr	s15, [r3]
 80053b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80053b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053b8:	dcf2      	bgt.n	80053a0 <driveC+0x30>
 80053ba:	88fb      	ldrh	r3, [r7, #6]
 80053bc:	ee07 3a90 	vmov	s15, r3
 80053c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053c4:	4b0e      	ldr	r3, [pc, #56]	; (8005400 <driveC+0x90>)
 80053c6:	edd3 7a00 	vldr	s15, [r3]
 80053ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80053ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d2:	dce5      	bgt.n	80053a0 <driveC+0x30>

	drive_stop();											//a走行停止
 80053d4:	f7ff fca6 	bl	8004d24 <drive_stop>
}
 80053d8:	bf00      	nop
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	43160000 	.word	0x43160000
 80053e4:	20000fec 	.word	0x20000fec
 80053e8:	20000b94 	.word	0x20000b94
 80053ec:	200001a4 	.word	0x200001a4
 80053f0:	2000077c 	.word	0x2000077c
 80053f4:	20000b24 	.word	0x20000b24
 80053f8:	20000d98 	.word	0x20000d98
 80053fc:	20001644 	.word	0x20001644
 8005400:	20000b2c 	.word	0x20000b2c

08005404 <driveC2>:
//driveC2
//a指定距離分デフォルト逆回転速度で走行して停止する
//a引数1：dist …… 走行距離
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC2(uint16_t dist){
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	4603      	mov	r3, r0
 800540c:	80fb      	strh	r3, [r7, #6]

	speed_min_l = speed_min_r = -250;
 800540e:	4b1a      	ldr	r3, [pc, #104]	; (8005478 <driveC2+0x74>)
 8005410:	4a1a      	ldr	r2, [pc, #104]	; (800547c <driveC2+0x78>)
 8005412:	6013      	str	r3, [r2, #0]
 8005414:	4a1a      	ldr	r2, [pc, #104]	; (8005480 <driveC2+0x7c>)
 8005416:	6013      	str	r3, [r2, #0]
	speed_max_l = speed_max_r = -250;
 8005418:	4b17      	ldr	r3, [pc, #92]	; (8005478 <driveC2+0x74>)
 800541a:	4a1a      	ldr	r2, [pc, #104]	; (8005484 <driveC2+0x80>)
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	4a1a      	ldr	r2, [pc, #104]	; (8005488 <driveC2+0x84>)
 8005420:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;									//a等速走行のため加速度は0
 8005422:	f04f 0300 	mov.w	r3, #0
 8005426:	4a19      	ldr	r2, [pc, #100]	; (800548c <driveC2+0x88>)
 8005428:	6013      	str	r3, [r2, #0]
 800542a:	4a19      	ldr	r2, [pc, #100]	; (8005490 <driveC2+0x8c>)
 800542c:	6013      	str	r3, [r2, #0]

	drive_start();											//a走行開始
 800542e:	f7ff fc49 	bl	8004cc4 <drive_start>
	//====a回転====
	while((dist_l > (-1*dist)) || (dist_r > (-1*dist)));	//a左右のモータが定速分の逆走距離以上進むまで待機
 8005432:	bf00      	nop
 8005434:	88fb      	ldrh	r3, [r7, #6]
 8005436:	425b      	negs	r3, r3
 8005438:	ee07 3a90 	vmov	s15, r3
 800543c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005440:	4b14      	ldr	r3, [pc, #80]	; (8005494 <driveC2+0x90>)
 8005442:	edd3 7a00 	vldr	s15, [r3]
 8005446:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800544a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800544e:	d4f1      	bmi.n	8005434 <driveC2+0x30>
 8005450:	88fb      	ldrh	r3, [r7, #6]
 8005452:	425b      	negs	r3, r3
 8005454:	ee07 3a90 	vmov	s15, r3
 8005458:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800545c:	4b0e      	ldr	r3, [pc, #56]	; (8005498 <driveC2+0x94>)
 800545e:	edd3 7a00 	vldr	s15, [r3]
 8005462:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800546a:	d4e3      	bmi.n	8005434 <driveC2+0x30>

	drive_stop();											//a走行停止
 800546c:	f7ff fc5a 	bl	8004d24 <drive_stop>
}
 8005470:	bf00      	nop
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	c37a0000 	.word	0xc37a0000
 800547c:	20000fec 	.word	0x20000fec
 8005480:	20000b94 	.word	0x20000b94
 8005484:	200001a4 	.word	0x200001a4
 8005488:	2000077c 	.word	0x2000077c
 800548c:	20000b24 	.word	0x20000b24
 8005490:	20000d98 	.word	0x20000d98
 8005494:	20001644 	.word	0x20001644
 8005498:	20000b2c 	.word	0x20000b2c

0800549c <slalomF>:
//slalomF
//aスラロームの前オフセット部分
//a引数1：
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalomF(int16_t accel_p, int16_t speed_p, uint8_t dist_p, uint16_t wall_fl, uint16_t wall_fr){
 800549c:	b590      	push	{r4, r7, lr}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	4604      	mov	r4, r0
 80054a4:	4608      	mov	r0, r1
 80054a6:	4611      	mov	r1, r2
 80054a8:	461a      	mov	r2, r3
 80054aa:	4623      	mov	r3, r4
 80054ac:	80fb      	strh	r3, [r7, #6]
 80054ae:	4603      	mov	r3, r0
 80054b0:	80bb      	strh	r3, [r7, #4]
 80054b2:	460b      	mov	r3, r1
 80054b4:	70fb      	strb	r3, [r7, #3]
 80054b6:	4613      	mov	r3, r2
 80054b8:	803b      	strh	r3, [r7, #0]
	MF.FLAG.GYRO = 0;
 80054ba:	4a48      	ldr	r2, [pc, #288]	; (80055dc <slalomF+0x140>)
 80054bc:	8813      	ldrh	r3, [r2, #0]
 80054be:	f36f 2308 	bfc	r3, #8, #1
 80054c2:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 80054c4:	4a45      	ldr	r2, [pc, #276]	; (80055dc <slalomF+0x140>)
 80054c6:	8813      	ldrh	r3, [r2, #0]
 80054c8:	f043 0304 	orr.w	r3, r3, #4
 80054cc:	8013      	strh	r3, [r2, #0]

	accel_l = accel_r = accel_p;
 80054ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054d2:	ee07 3a90 	vmov	s15, r3
 80054d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054da:	4b41      	ldr	r3, [pc, #260]	; (80055e0 <slalomF+0x144>)
 80054dc:	edc3 7a00 	vstr	s15, [r3]
 80054e0:	4b40      	ldr	r3, [pc, #256]	; (80055e4 <slalomF+0x148>)
 80054e2:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_p;
 80054e6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80054ea:	ee07 3a90 	vmov	s15, r3
 80054ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054f2:	4b3d      	ldr	r3, [pc, #244]	; (80055e8 <slalomF+0x14c>)
 80054f4:	edc3 7a00 	vstr	s15, [r3]
 80054f8:	4b3c      	ldr	r3, [pc, #240]	; (80055ec <slalomF+0x150>)
 80054fa:	edc3 7a00 	vstr	s15, [r3]

	control_start();
 80054fe:	f7ff fc39 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8005502:	f04f 0300 	mov.w	r3, #0
 8005506:	4a3a      	ldr	r2, [pc, #232]	; (80055f0 <slalomF+0x154>)
 8005508:	6013      	str	r3, [r2, #0]
 800550a:	4a3a      	ldr	r2, [pc, #232]	; (80055f4 <slalomF+0x158>)
 800550c:	6013      	str	r3, [r2, #0]
	if(run_mode == 5 && MF2.FLAG.TEMP){
 800550e:	4b3a      	ldr	r3, [pc, #232]	; (80055f8 <slalomF+0x15c>)
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b05      	cmp	r3, #5
 8005516:	d13f      	bne.n	8005598 <slalomF+0xfc>
 8005518:	4b38      	ldr	r3, [pc, #224]	; (80055fc <slalomF+0x160>)
 800551a:	881b      	ldrh	r3, [r3, #0]
 800551c:	f3c3 2340 	ubfx	r3, r3, #9, #1
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d038      	beq.n	8005598 <slalomF+0xfc>
		while(dist_l < dist_p || dist_r < dist_p){
 8005526:	e00e      	b.n	8005546 <slalomF+0xaa>
			if(ad_fl > wall_fl || ad_fr > wall_fr){
 8005528:	883a      	ldrh	r2, [r7, #0]
 800552a:	4b35      	ldr	r3, [pc, #212]	; (8005600 <slalomF+0x164>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	429a      	cmp	r2, r3
 8005530:	d304      	bcc.n	800553c <slalomF+0xa0>
 8005532:	8b3a      	ldrh	r2, [r7, #24]
 8005534:	4b33      	ldr	r3, [pc, #204]	; (8005604 <slalomF+0x168>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	429a      	cmp	r2, r3
 800553a:	d204      	bcs.n	8005546 <slalomF+0xaa>
				full_led_write1(RED);
 800553c:	2001      	movs	r0, #1
 800553e:	f00c febb 	bl	80122b8 <full_led_write1>
				break;
 8005542:	bf00      	nop
	if(run_mode == 5 && MF2.FLAG.TEMP){
 8005544:	e042      	b.n	80055cc <slalomF+0x130>
		while(dist_l < dist_p || dist_r < dist_p){
 8005546:	78fb      	ldrb	r3, [r7, #3]
 8005548:	ee07 3a90 	vmov	s15, r3
 800554c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005550:	4b28      	ldr	r3, [pc, #160]	; (80055f4 <slalomF+0x158>)
 8005552:	edd3 7a00 	vldr	s15, [r3]
 8005556:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800555a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800555e:	dce3      	bgt.n	8005528 <slalomF+0x8c>
 8005560:	78fb      	ldrb	r3, [r7, #3]
 8005562:	ee07 3a90 	vmov	s15, r3
 8005566:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800556a:	4b21      	ldr	r3, [pc, #132]	; (80055f0 <slalomF+0x154>)
 800556c:	edd3 7a00 	vldr	s15, [r3]
 8005570:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005578:	dcd6      	bgt.n	8005528 <slalomF+0x8c>
	if(run_mode == 5 && MF2.FLAG.TEMP){
 800557a:	e027      	b.n	80055cc <slalomF+0x130>
			}
		}
	}else{
		while(dist_l < dist_p && dist_r < dist_p){
			if(ad_fl > wall_fl || ad_fr > wall_fr){
 800557c:	883a      	ldrh	r2, [r7, #0]
 800557e:	4b20      	ldr	r3, [pc, #128]	; (8005600 <slalomF+0x164>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	429a      	cmp	r2, r3
 8005584:	d304      	bcc.n	8005590 <slalomF+0xf4>
 8005586:	8b3a      	ldrh	r2, [r7, #24]
 8005588:	4b1e      	ldr	r3, [pc, #120]	; (8005604 <slalomF+0x168>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	429a      	cmp	r2, r3
 800558e:	d203      	bcs.n	8005598 <slalomF+0xfc>
				full_led_write1(RED);
 8005590:	2001      	movs	r0, #1
 8005592:	f00c fe91 	bl	80122b8 <full_led_write1>
				break;
 8005596:	e019      	b.n	80055cc <slalomF+0x130>
		while(dist_l < dist_p && dist_r < dist_p){
 8005598:	78fb      	ldrb	r3, [r7, #3]
 800559a:	ee07 3a90 	vmov	s15, r3
 800559e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055a2:	4b14      	ldr	r3, [pc, #80]	; (80055f4 <slalomF+0x158>)
 80055a4:	edd3 7a00 	vldr	s15, [r3]
 80055a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055b0:	dd0c      	ble.n	80055cc <slalomF+0x130>
 80055b2:	78fb      	ldrb	r3, [r7, #3]
 80055b4:	ee07 3a90 	vmov	s15, r3
 80055b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055bc:	4b0c      	ldr	r3, [pc, #48]	; (80055f0 <slalomF+0x154>)
 80055be:	edd3 7a00 	vldr	s15, [r3]
 80055c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055ca:	dcd7      	bgt.n	800557c <slalomF+0xe0>
			}
		}
	}
	drive_stop();
 80055cc:	f7ff fbaa 	bl	8004d24 <drive_stop>
	control_stop();
 80055d0:	f7ff fbf8 	bl	8004dc4 <control_stop>
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd90      	pop	{r4, r7, pc}
 80055dc:	20000fa8 	.word	0x20000fa8
 80055e0:	20000b24 	.word	0x20000b24
 80055e4:	20000d98 	.word	0x20000d98
 80055e8:	200001a4 	.word	0x200001a4
 80055ec:	2000077c 	.word	0x2000077c
 80055f0:	20000b2c 	.word	0x20000b2c
 80055f4:	20001644 	.word	0x20001644
 80055f8:	20000456 	.word	0x20000456
 80055fc:	20000fa4 	.word	0x20000fa4
 8005600:	20000d94 	.word	0x20000d94
 8005604:	20000c80 	.word	0x20000c80

08005608 <slalomR>:
//slalomR
//aスラロームの旋回部分
//a引数1：
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalomR(int32_t degaccel_p, int16_t omega_p, int16_t degree_p, int16_t speed_p){
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	4608      	mov	r0, r1
 8005612:	4611      	mov	r1, r2
 8005614:	461a      	mov	r2, r3
 8005616:	4603      	mov	r3, r0
 8005618:	817b      	strh	r3, [r7, #10]
 800561a:	460b      	mov	r3, r1
 800561c:	813b      	strh	r3, [r7, #8]
 800561e:	4613      	mov	r3, r2
 8005620:	80fb      	strh	r3, [r7, #6]
	MF.FLAG.GYRO = 1;
 8005622:	4a82      	ldr	r2, [pc, #520]	; (800582c <slalomR+0x224>)
 8005624:	8813      	ldrh	r3, [r2, #0]
 8005626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800562a:	8013      	strh	r3, [r2, #0]
//	full_led_write(WHITE);
	target_degaccel_z = degaccel_p;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	ee07 3a90 	vmov	s15, r3
 8005632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005636:	4b7e      	ldr	r3, [pc, #504]	; (8005830 <slalomR+0x228>)
 8005638:	edc3 7a00 	vstr	s15, [r3]
	target_omega_z = 0;
 800563c:	4b7d      	ldr	r3, [pc, #500]	; (8005834 <slalomR+0x22c>)
 800563e:	f04f 0200 	mov.w	r2, #0
 8005642:	601a      	str	r2, [r3, #0]
	speed_G = speed_p;
 8005644:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005648:	ee07 3a90 	vmov	s15, r3
 800564c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005650:	4b79      	ldr	r3, [pc, #484]	; (8005838 <slalomR+0x230>)
 8005652:	edc3 7a00 	vstr	s15, [r3]

	int16_t c_degree;

	if(omega_p < 0){
 8005656:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800565a:	2b00      	cmp	r3, #0
 800565c:	da1f      	bge.n	800569e <slalomR+0x96>
		omega_min = omega_p;
 800565e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005662:	ee07 3a90 	vmov	s15, r3
 8005666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800566a:	4b74      	ldr	r3, [pc, #464]	; (800583c <slalomR+0x234>)
 800566c:	edc3 7a00 	vstr	s15, [r3]
		c_degree =  omega_min * omega_min / target_degaccel_z / 2;
 8005670:	4b72      	ldr	r3, [pc, #456]	; (800583c <slalomR+0x234>)
 8005672:	ed93 7a00 	vldr	s14, [r3]
 8005676:	4b71      	ldr	r3, [pc, #452]	; (800583c <slalomR+0x234>)
 8005678:	edd3 7a00 	vldr	s15, [r3]
 800567c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005680:	4b6b      	ldr	r3, [pc, #428]	; (8005830 <slalomR+0x228>)
 8005682:	edd3 7a00 	vldr	s15, [r3]
 8005686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800568a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800568e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005692:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005696:	ee17 3a90 	vmov	r3, s15
 800569a:	82fb      	strh	r3, [r7, #22]
 800569c:	e01e      	b.n	80056dc <slalomR+0xd4>
	}else{
		omega_max = omega_p;
 800569e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80056a2:	ee07 3a90 	vmov	s15, r3
 80056a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056aa:	4b65      	ldr	r3, [pc, #404]	; (8005840 <slalomR+0x238>)
 80056ac:	edc3 7a00 	vstr	s15, [r3]
		c_degree =  omega_max * omega_max / target_degaccel_z / 2;
 80056b0:	4b63      	ldr	r3, [pc, #396]	; (8005840 <slalomR+0x238>)
 80056b2:	ed93 7a00 	vldr	s14, [r3]
 80056b6:	4b62      	ldr	r3, [pc, #392]	; (8005840 <slalomR+0x238>)
 80056b8:	edd3 7a00 	vldr	s15, [r3]
 80056bc:	ee67 6a27 	vmul.f32	s13, s14, s15
 80056c0:	4b5b      	ldr	r3, [pc, #364]	; (8005830 <slalomR+0x228>)
 80056c2:	edd3 7a00 	vldr	s15, [r3]
 80056c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ca:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80056ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80056d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056d6:	ee17 3a90 	vmov	r3, s15
 80056da:	82fb      	strh	r3, [r7, #22]
	}

	MF.FLAG.DRV = 1;
 80056dc:	4a53      	ldr	r2, [pc, #332]	; (800582c <slalomR+0x224>)
 80056de:	8813      	ldrh	r3, [r2, #0]
 80056e0:	f043 0302 	orr.w	r3, r3, #2
 80056e4:	8013      	strh	r3, [r2, #0]
	if(omega_p < 0){
 80056e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	da14      	bge.n	8005718 <slalomR+0x110>
		while(degree_z > target_degree_z+c_degree);
 80056ee:	bf00      	nop
 80056f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80056f4:	ee07 3a90 	vmov	s15, r3
 80056f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056fc:	4b51      	ldr	r3, [pc, #324]	; (8005844 <slalomR+0x23c>)
 80056fe:	edd3 7a00 	vldr	s15, [r3]
 8005702:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005706:	4b50      	ldr	r3, [pc, #320]	; (8005848 <slalomR+0x240>)
 8005708:	edd3 7a00 	vldr	s15, [r3]
 800570c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005714:	d4ec      	bmi.n	80056f0 <slalomR+0xe8>
 8005716:	e013      	b.n	8005740 <slalomR+0x138>
	}else{
		while(degree_z < target_degree_z+c_degree);
 8005718:	bf00      	nop
 800571a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800571e:	ee07 3a90 	vmov	s15, r3
 8005722:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005726:	4b47      	ldr	r3, [pc, #284]	; (8005844 <slalomR+0x23c>)
 8005728:	edd3 7a00 	vldr	s15, [r3]
 800572c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005730:	4b45      	ldr	r3, [pc, #276]	; (8005848 <slalomR+0x240>)
 8005732:	edd3 7a00 	vldr	s15, [r3]
 8005736:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800573a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800573e:	dcec      	bgt.n	800571a <slalomR+0x112>
	}

	target_degaccel_z = 0;
 8005740:	4b3b      	ldr	r3, [pc, #236]	; (8005830 <slalomR+0x228>)
 8005742:	f04f 0200 	mov.w	r2, #0
 8005746:	601a      	str	r2, [r3, #0]

	if(omega_p < 0){
 8005748:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800574c:	2b00      	cmp	r3, #0
 800574e:	da18      	bge.n	8005782 <slalomR+0x17a>
		while(degree_z > target_degree_z+(degree_p-c_degree-4));
 8005750:	bf00      	nop
 8005752:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005756:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	3b04      	subs	r3, #4
 800575e:	ee07 3a90 	vmov	s15, r3
 8005762:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005766:	4b37      	ldr	r3, [pc, #220]	; (8005844 <slalomR+0x23c>)
 8005768:	edd3 7a00 	vldr	s15, [r3]
 800576c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005770:	4b35      	ldr	r3, [pc, #212]	; (8005848 <slalomR+0x240>)
 8005772:	edd3 7a00 	vldr	s15, [r3]
 8005776:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800577a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800577e:	d4e8      	bmi.n	8005752 <slalomR+0x14a>
 8005780:	e017      	b.n	80057b2 <slalomR+0x1aa>
	}else{
		while(degree_z < target_degree_z+(degree_p-c_degree+4));
 8005782:	bf00      	nop
 8005784:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005788:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	3304      	adds	r3, #4
 8005790:	ee07 3a90 	vmov	s15, r3
 8005794:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005798:	4b2a      	ldr	r3, [pc, #168]	; (8005844 <slalomR+0x23c>)
 800579a:	edd3 7a00 	vldr	s15, [r3]
 800579e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057a2:	4b29      	ldr	r3, [pc, #164]	; (8005848 <slalomR+0x240>)
 80057a4:	edd3 7a00 	vldr	s15, [r3]
 80057a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80057ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057b0:	dce8      	bgt.n	8005784 <slalomR+0x17c>
	}

	target_degaccel_z = -degaccel_p;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	425b      	negs	r3, r3
 80057b6:	ee07 3a90 	vmov	s15, r3
 80057ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057be:	4b1c      	ldr	r3, [pc, #112]	; (8005830 <slalomR+0x228>)
 80057c0:	edc3 7a00 	vstr	s15, [r3]

	if(omega_p < 0){
 80057c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	da14      	bge.n	80057f6 <slalomR+0x1ee>
		while(degree_z > target_degree_z+degree_p);
 80057cc:	bf00      	nop
 80057ce:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80057d2:	ee07 3a90 	vmov	s15, r3
 80057d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057da:	4b1a      	ldr	r3, [pc, #104]	; (8005844 <slalomR+0x23c>)
 80057dc:	edd3 7a00 	vldr	s15, [r3]
 80057e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057e4:	4b18      	ldr	r3, [pc, #96]	; (8005848 <slalomR+0x240>)
 80057e6:	edd3 7a00 	vldr	s15, [r3]
 80057ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80057ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057f2:	d4ec      	bmi.n	80057ce <slalomR+0x1c6>
	}else{
		while(degree_z < target_degree_z+degree_p);
	}
}
 80057f4:	e013      	b.n	800581e <slalomR+0x216>
		while(degree_z < target_degree_z+degree_p);
 80057f6:	bf00      	nop
 80057f8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80057fc:	ee07 3a90 	vmov	s15, r3
 8005800:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005804:	4b0f      	ldr	r3, [pc, #60]	; (8005844 <slalomR+0x23c>)
 8005806:	edd3 7a00 	vldr	s15, [r3]
 800580a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800580e:	4b0e      	ldr	r3, [pc, #56]	; (8005848 <slalomR+0x240>)
 8005810:	edd3 7a00 	vldr	s15, [r3]
 8005814:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800581c:	dcec      	bgt.n	80057f8 <slalomR+0x1f0>
}
 800581e:	bf00      	nop
 8005820:	371c      	adds	r7, #28
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	20000fa8 	.word	0x20000fa8
 8005830:	20000b98 	.word	0x20000b98
 8005834:	200001a8 	.word	0x200001a8
 8005838:	20000b34 	.word	0x20000b34
 800583c:	200002b8 	.word	0x200002b8
 8005840:	20000b28 	.word	0x20000b28
 8005844:	20000c78 	.word	0x20000c78
 8005848:	20000b9c 	.word	0x20000b9c

0800584c <slalomB>:
//slalomB
//aスラロームの後オフセット部分
//a引数1：
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalomB(int16_t accel_p, int16_t speed_p, uint8_t dist_p){
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	4603      	mov	r3, r0
 8005854:	80fb      	strh	r3, [r7, #6]
 8005856:	460b      	mov	r3, r1
 8005858:	80bb      	strh	r3, [r7, #4]
 800585a:	4613      	mov	r3, r2
 800585c:	70fb      	strb	r3, [r7, #3]
	MF.FLAG.GYRO = 0;
 800585e:	4a25      	ldr	r2, [pc, #148]	; (80058f4 <slalomB+0xa8>)
 8005860:	8813      	ldrh	r3, [r2, #0]
 8005862:	f36f 2308 	bfc	r3, #8, #1
 8005866:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8005868:	4a22      	ldr	r2, [pc, #136]	; (80058f4 <slalomB+0xa8>)
 800586a:	8813      	ldrh	r3, [r2, #0]
 800586c:	f043 0304 	orr.w	r3, r3, #4
 8005870:	8013      	strh	r3, [r2, #0]

	accel_l = accel_r = accel_p;
 8005872:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005876:	ee07 3a90 	vmov	s15, r3
 800587a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800587e:	4b1e      	ldr	r3, [pc, #120]	; (80058f8 <slalomB+0xac>)
 8005880:	edc3 7a00 	vstr	s15, [r3]
 8005884:	4b1d      	ldr	r3, [pc, #116]	; (80058fc <slalomB+0xb0>)
 8005886:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_p;
 800588a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800588e:	ee07 3a90 	vmov	s15, r3
 8005892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005896:	4b1a      	ldr	r3, [pc, #104]	; (8005900 <slalomB+0xb4>)
 8005898:	edc3 7a00 	vstr	s15, [r3]
 800589c:	4b19      	ldr	r3, [pc, #100]	; (8005904 <slalomB+0xb8>)
 800589e:	edc3 7a00 	vstr	s15, [r3]

	control_start();
 80058a2:	f7ff fa67 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 80058a6:	f04f 0300 	mov.w	r3, #0
 80058aa:	4a17      	ldr	r2, [pc, #92]	; (8005908 <slalomB+0xbc>)
 80058ac:	6013      	str	r3, [r2, #0]
 80058ae:	4a17      	ldr	r2, [pc, #92]	; (800590c <slalomB+0xc0>)
 80058b0:	6013      	str	r3, [r2, #0]
	while(dist_l < dist_p && dist_r < dist_p);
 80058b2:	bf00      	nop
 80058b4:	78fb      	ldrb	r3, [r7, #3]
 80058b6:	ee07 3a90 	vmov	s15, r3
 80058ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80058be:	4b13      	ldr	r3, [pc, #76]	; (800590c <slalomB+0xc0>)
 80058c0:	edd3 7a00 	vldr	s15, [r3]
 80058c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80058c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058cc:	dc00      	bgt.n	80058d0 <slalomB+0x84>
}
 80058ce:	e00c      	b.n	80058ea <slalomB+0x9e>
	while(dist_l < dist_p && dist_r < dist_p);
 80058d0:	78fb      	ldrb	r3, [r7, #3]
 80058d2:	ee07 3a90 	vmov	s15, r3
 80058d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80058da:	4b0b      	ldr	r3, [pc, #44]	; (8005908 <slalomB+0xbc>)
 80058dc:	edd3 7a00 	vldr	s15, [r3]
 80058e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80058e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058e8:	dce4      	bgt.n	80058b4 <slalomB+0x68>
}
 80058ea:	bf00      	nop
 80058ec:	3708      	adds	r7, #8
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	20000fa8 	.word	0x20000fa8
 80058f8:	20000b24 	.word	0x20000b24
 80058fc:	20000d98 	.word	0x20000d98
 8005900:	200001a4 	.word	0x200001a4
 8005904:	2000077c 	.word	0x2000077c
 8005908:	20000b2c 	.word	0x20000b2c
 800590c:	20001644 	.word	0x20001644

08005910 <set_position>:
//set_position
//a機体の尻を壁に当てて場所を区画中央に合わせる
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void set_position(){
 8005910:	b580      	push	{r7, lr}
 8005912:	af00      	add	r7, sp, #0

  driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 8005914:	2064      	movs	r0, #100	; 0x64
 8005916:	f7ff fd75 	bl	8005404 <driveC2>
  degree_z = target_degree_z;
 800591a:	4b05      	ldr	r3, [pc, #20]	; (8005930 <set_position+0x20>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a05      	ldr	r2, [pc, #20]	; (8005934 <set_position+0x24>)
 8005920:	6013      	str	r3, [r2, #0]
  start_mode = 0;
 8005922:	4b05      	ldr	r3, [pc, #20]	; (8005938 <set_position+0x28>)
 8005924:	2200      	movs	r2, #0
 8005926:	701a      	strb	r2, [r3, #0]
  start_sectionA();
 8005928:	f000 f826 	bl	8005978 <start_sectionA>
}
 800592c:	bf00      	nop
 800592e:	bd80      	pop	{r7, pc}
 8005930:	20000c78 	.word	0x20000c78
 8005934:	20000b9c 	.word	0x20000b9c
 8005938:	20001648 	.word	0x20001648

0800593c <set_positionF>:
//set_positionF
//a前壁との距離を測定し、場所を区画中央に合わせる
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void set_positionF(){
 800593c:	b580      	push	{r7, lr}
 800593e:	af00      	add	r7, sp, #0

	full_led_write1(RED);
 8005940:	2001      	movs	r0, #1
 8005942:	f00c fcb9 	bl	80122b8 <full_led_write1>
	HAL_Delay(100);
 8005946:	2064      	movs	r0, #100	; 0x64
 8005948:	f7fb fb68 	bl	800101c <HAL_Delay>

	MF.FLAG.DRV = 1;
 800594c:	4a09      	ldr	r2, [pc, #36]	; (8005974 <set_positionF+0x38>)
 800594e:	8813      	ldrh	r3, [r2, #0]
 8005950:	f043 0302 	orr.w	r3, r3, #2
 8005954:	8013      	strh	r3, [r2, #0]
//	MF.FLAG.FWALL = 1;
	MF.FLAG.GCTRL = 1;
 8005956:	4a07      	ldr	r2, [pc, #28]	; (8005974 <set_positionF+0x38>)
 8005958:	8813      	ldrh	r3, [r2, #0]
 800595a:	f043 0310 	orr.w	r3, r3, #16
 800595e:	8013      	strh	r3, [r2, #0]
//	while(MF.FLAG.FWALL);

	MF.FLAG.GCTRL = 0;
 8005960:	4a04      	ldr	r2, [pc, #16]	; (8005974 <set_positionF+0x38>)
 8005962:	8813      	ldrh	r3, [r2, #0]
 8005964:	f36f 1304 	bfc	r3, #4, #1
 8005968:	8013      	strh	r3, [r2, #0]
	drive_stop();
 800596a:	f7ff f9db 	bl	8004d24 <drive_stop>
}
 800596e:	bf00      	nop
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	20000fa8 	.word	0x20000fa8

08005978 <start_sectionA>:
//start_sectionA
// スタート区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void start_sectionA(void){
 8005978:	b580      	push	{r7, lr}
 800597a:	af00      	add	r7, sp, #0

	control_start();
 800597c:	f7ff f9fa 	bl	8004d74 <control_start>
	if(run_mode == 1){
 8005980:	4b93      	ldr	r3, [pc, #588]	; (8005bd0 <start_sectionA+0x258>)
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b01      	cmp	r3, #1
 8005988:	d127      	bne.n	80059da <start_sectionA+0x62>
		if(start_mode == 0){
 800598a:	4b92      	ldr	r3, [pc, #584]	; (8005bd4 <start_sectionA+0x25c>)
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b00      	cmp	r3, #0
 8005992:	d107      	bne.n	80059a4 <start_sectionA+0x2c>
			driveA(2000, SPEED_MIN, SPEED_1, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 8005994:	2387      	movs	r3, #135	; 0x87
 8005996:	22c8      	movs	r2, #200	; 0xc8
 8005998:	211e      	movs	r1, #30
 800599a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800599e:	f7ff fb2b 	bl	8004ff8 <driveA>
 80059a2:	e106      	b.n	8005bb2 <start_sectionA+0x23a>
		}else if(start_mode == 1){
 80059a4:	4b8b      	ldr	r3, [pc, #556]	; (8005bd4 <start_sectionA+0x25c>)
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d107      	bne.n	80059be <start_sectionA+0x46>
			driveA(2000, SPEED_MIN, SPEED_1, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 80059ae:	235a      	movs	r3, #90	; 0x5a
 80059b0:	22c8      	movs	r2, #200	; 0xc8
 80059b2:	211e      	movs	r1, #30
 80059b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80059b8:	f7ff fb1e 	bl	8004ff8 <driveA>
 80059bc:	e0f9      	b.n	8005bb2 <start_sectionA+0x23a>
		}else if(start_mode == 2){
 80059be:	4b85      	ldr	r3, [pc, #532]	; (8005bd4 <start_sectionA+0x25c>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	f040 80f4 	bne.w	8005bb2 <start_sectionA+0x23a>
			driveA(2000, SPEED_MIN, SPEED_1, SEC_START_HALF);				//aスタート半区画分加速しながら走行。走行後は停止しない
 80059ca:	232d      	movs	r3, #45	; 0x2d
 80059cc:	22c8      	movs	r2, #200	; 0xc8
 80059ce:	211e      	movs	r1, #30
 80059d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80059d4:	f7ff fb10 	bl	8004ff8 <driveA>
 80059d8:	e0eb      	b.n	8005bb2 <start_sectionA+0x23a>
		}
	}else if(run_mode == 2){
 80059da:	4b7d      	ldr	r3, [pc, #500]	; (8005bd0 <start_sectionA+0x258>)
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d12a      	bne.n	8005a3a <start_sectionA+0xc2>
		if(start_mode == 0){
 80059e4:	4b7b      	ldr	r3, [pc, #492]	; (8005bd4 <start_sectionA+0x25c>)
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d108      	bne.n	8005a00 <start_sectionA+0x88>
			driveA(4000, SPEED_MIN, SPEED_2, SEC_START);				//aスタート区画分加速しながら走行。走行後は停止しない
 80059ee:	2387      	movs	r3, #135	; 0x87
 80059f0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80059f4:	211e      	movs	r1, #30
 80059f6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80059fa:	f7ff fafd 	bl	8004ff8 <driveA>
 80059fe:	e0d8      	b.n	8005bb2 <start_sectionA+0x23a>
		}else if(start_mode == 1){
 8005a00:	4b74      	ldr	r3, [pc, #464]	; (8005bd4 <start_sectionA+0x25c>)
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d108      	bne.n	8005a1c <start_sectionA+0xa4>
			driveA(4000, SPEED_MIN, SPEED_2, SEC_HALF);				//a半区画分加速しながら走行。走行後は停止しない
 8005a0a:	235a      	movs	r3, #90	; 0x5a
 8005a0c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005a10:	211e      	movs	r1, #30
 8005a12:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005a16:	f7ff faef 	bl	8004ff8 <driveA>
 8005a1a:	e0ca      	b.n	8005bb2 <start_sectionA+0x23a>
		}else if(start_mode == 2){
 8005a1c:	4b6d      	ldr	r3, [pc, #436]	; (8005bd4 <start_sectionA+0x25c>)
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	f040 80c5 	bne.w	8005bb2 <start_sectionA+0x23a>
			driveA(4000, SPEED_MIN, SPEED_2, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 8005a28:	232d      	movs	r3, #45	; 0x2d
 8005a2a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005a2e:	211e      	movs	r1, #30
 8005a30:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005a34:	f7ff fae0 	bl	8004ff8 <driveA>
 8005a38:	e0bb      	b.n	8005bb2 <start_sectionA+0x23a>
		}
	}else if(run_mode == 3){
 8005a3a:	4b65      	ldr	r3, [pc, #404]	; (8005bd0 <start_sectionA+0x258>)
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b03      	cmp	r3, #3
 8005a42:	d12a      	bne.n	8005a9a <start_sectionA+0x122>
		if(start_mode == 0){
 8005a44:	4b63      	ldr	r3, [pc, #396]	; (8005bd4 <start_sectionA+0x25c>)
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d108      	bne.n	8005a60 <start_sectionA+0xe8>
			driveA(6000, SPEED_MIN, SPEED_3, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 8005a4e:	2387      	movs	r3, #135	; 0x87
 8005a50:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005a54:	211e      	movs	r1, #30
 8005a56:	f241 7070 	movw	r0, #6000	; 0x1770
 8005a5a:	f7ff facd 	bl	8004ff8 <driveA>
 8005a5e:	e0a8      	b.n	8005bb2 <start_sectionA+0x23a>
		}else if(start_mode == 1){
 8005a60:	4b5c      	ldr	r3, [pc, #368]	; (8005bd4 <start_sectionA+0x25c>)
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d108      	bne.n	8005a7c <start_sectionA+0x104>
			driveA(6000, SPEED_MIN, SPEED_3, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 8005a6a:	235a      	movs	r3, #90	; 0x5a
 8005a6c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005a70:	211e      	movs	r1, #30
 8005a72:	f241 7070 	movw	r0, #6000	; 0x1770
 8005a76:	f7ff fabf 	bl	8004ff8 <driveA>
 8005a7a:	e09a      	b.n	8005bb2 <start_sectionA+0x23a>
		}else if(start_mode == 2){
 8005a7c:	4b55      	ldr	r3, [pc, #340]	; (8005bd4 <start_sectionA+0x25c>)
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	f040 8095 	bne.w	8005bb2 <start_sectionA+0x23a>
			driveA(6000, SPEED_MIN, SPEED_3, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 8005a88:	232d      	movs	r3, #45	; 0x2d
 8005a8a:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005a8e:	211e      	movs	r1, #30
 8005a90:	f241 7070 	movw	r0, #6000	; 0x1770
 8005a94:	f7ff fab0 	bl	8004ff8 <driveA>
 8005a98:	e08b      	b.n	8005bb2 <start_sectionA+0x23a>
		}
	}else if(run_mode == 4){
 8005a9a:	4b4d      	ldr	r3, [pc, #308]	; (8005bd0 <start_sectionA+0x258>)
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b04      	cmp	r3, #4
 8005aa2:	d129      	bne.n	8005af8 <start_sectionA+0x180>
		if(start_mode == 0){
 8005aa4:	4b4b      	ldr	r3, [pc, #300]	; (8005bd4 <start_sectionA+0x25c>)
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d108      	bne.n	8005ac0 <start_sectionA+0x148>
			driveA(8000, SPEED_MIN, SPEED_4, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 8005aae:	2387      	movs	r3, #135	; 0x87
 8005ab0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005ab4:	211e      	movs	r1, #30
 8005ab6:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005aba:	f7ff fa9d 	bl	8004ff8 <driveA>
 8005abe:	e078      	b.n	8005bb2 <start_sectionA+0x23a>
		}else if(start_mode == 1){
 8005ac0:	4b44      	ldr	r3, [pc, #272]	; (8005bd4 <start_sectionA+0x25c>)
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d108      	bne.n	8005adc <start_sectionA+0x164>
			driveA(8000, SPEED_MIN, SPEED_4, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 8005aca:	235a      	movs	r3, #90	; 0x5a
 8005acc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005ad0:	211e      	movs	r1, #30
 8005ad2:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005ad6:	f7ff fa8f 	bl	8004ff8 <driveA>
 8005ada:	e06a      	b.n	8005bb2 <start_sectionA+0x23a>
		}else if(start_mode == 2){
 8005adc:	4b3d      	ldr	r3, [pc, #244]	; (8005bd4 <start_sectionA+0x25c>)
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d165      	bne.n	8005bb2 <start_sectionA+0x23a>
			driveA(10000, SPEED_MIN, SPEED_4, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 8005ae6:	232d      	movs	r3, #45	; 0x2d
 8005ae8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005aec:	211e      	movs	r1, #30
 8005aee:	f242 7010 	movw	r0, #10000	; 0x2710
 8005af2:	f7ff fa81 	bl	8004ff8 <driveA>
 8005af6:	e05c      	b.n	8005bb2 <start_sectionA+0x23a>
		}
	}else if(run_mode == 5){
 8005af8:	4b35      	ldr	r3, [pc, #212]	; (8005bd0 <start_sectionA+0x258>)
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b05      	cmp	r3, #5
 8005b00:	d129      	bne.n	8005b56 <start_sectionA+0x1de>
		if(start_mode == 0){
 8005b02:	4b34      	ldr	r3, [pc, #208]	; (8005bd4 <start_sectionA+0x25c>)
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d108      	bne.n	8005b1e <start_sectionA+0x1a6>
			driveA(10000, SPEED_MIN, SPEED_5, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 8005b0c:	2387      	movs	r3, #135	; 0x87
 8005b0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b12:	211e      	movs	r1, #30
 8005b14:	f242 7010 	movw	r0, #10000	; 0x2710
 8005b18:	f7ff fa6e 	bl	8004ff8 <driveA>
 8005b1c:	e049      	b.n	8005bb2 <start_sectionA+0x23a>
		}else if(start_mode == 1){
 8005b1e:	4b2d      	ldr	r3, [pc, #180]	; (8005bd4 <start_sectionA+0x25c>)
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d108      	bne.n	8005b3a <start_sectionA+0x1c2>
			driveA(10000, SPEED_MIN, SPEED_5, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 8005b28:	235a      	movs	r3, #90	; 0x5a
 8005b2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b2e:	211e      	movs	r1, #30
 8005b30:	f242 7010 	movw	r0, #10000	; 0x2710
 8005b34:	f7ff fa60 	bl	8004ff8 <driveA>
 8005b38:	e03b      	b.n	8005bb2 <start_sectionA+0x23a>
		}else if(start_mode == 2){
 8005b3a:	4b26      	ldr	r3, [pc, #152]	; (8005bd4 <start_sectionA+0x25c>)
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d136      	bne.n	8005bb2 <start_sectionA+0x23a>
			driveA(15000, SPEED_MIN, SPEED_5, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 8005b44:	232d      	movs	r3, #45	; 0x2d
 8005b46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b4a:	211e      	movs	r1, #30
 8005b4c:	f643 2098 	movw	r0, #15000	; 0x3a98
 8005b50:	f7ff fa52 	bl	8004ff8 <driveA>
 8005b54:	e02d      	b.n	8005bb2 <start_sectionA+0x23a>
		}
	}else if(run_mode == 6){
 8005b56:	4b1e      	ldr	r3, [pc, #120]	; (8005bd0 <start_sectionA+0x258>)
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	2b06      	cmp	r3, #6
 8005b5e:	d128      	bne.n	8005bb2 <start_sectionA+0x23a>
		if(start_mode == 0){
 8005b60:	4b1c      	ldr	r3, [pc, #112]	; (8005bd4 <start_sectionA+0x25c>)
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d108      	bne.n	8005b7c <start_sectionA+0x204>
			driveA(10000, SPEED_MIN, SPEED_5, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 8005b6a:	2387      	movs	r3, #135	; 0x87
 8005b6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b70:	211e      	movs	r1, #30
 8005b72:	f242 7010 	movw	r0, #10000	; 0x2710
 8005b76:	f7ff fa3f 	bl	8004ff8 <driveA>
 8005b7a:	e01a      	b.n	8005bb2 <start_sectionA+0x23a>
		}else if(start_mode == 1){
 8005b7c:	4b15      	ldr	r3, [pc, #84]	; (8005bd4 <start_sectionA+0x25c>)
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d108      	bne.n	8005b98 <start_sectionA+0x220>
			driveA(10000, SPEED_MIN, SPEED_5, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 8005b86:	235a      	movs	r3, #90	; 0x5a
 8005b88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b8c:	211e      	movs	r1, #30
 8005b8e:	f242 7010 	movw	r0, #10000	; 0x2710
 8005b92:	f7ff fa31 	bl	8004ff8 <driveA>
 8005b96:	e00c      	b.n	8005bb2 <start_sectionA+0x23a>
		}else if(start_mode == 2){
 8005b98:	4b0e      	ldr	r3, [pc, #56]	; (8005bd4 <start_sectionA+0x25c>)
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d107      	bne.n	8005bb2 <start_sectionA+0x23a>
			driveA(25000, SPEED_MIN, SPEED_5, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 8005ba2:	232d      	movs	r3, #45	; 0x2d
 8005ba4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ba8:	211e      	movs	r1, #30
 8005baa:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8005bae:	f7ff fa23 	bl	8004ff8 <driveA>
		}
	}
	start_mode = 1;
 8005bb2:	4b08      	ldr	r3, [pc, #32]	; (8005bd4 <start_sectionA+0x25c>)
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005bb8:	4b07      	ldr	r3, [pc, #28]	; (8005bd8 <start_sectionA+0x260>)
 8005bba:	881b      	ldrh	r3, [r3, #0]
 8005bbc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d101      	bne.n	8005bca <start_sectionA+0x252>
 8005bc6:	f00c fb03 	bl	80121d0 <get_wall_info>
}
 8005bca:	bf00      	nop
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	20000456 	.word	0x20000456
 8005bd4:	20001648 	.word	0x20001648
 8005bd8:	20000fa8 	.word	0x20000fa8

08005bdc <half_sectionA>:
//half_sectionA
// a半区画分加速しながら走行する
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionA(void){
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	af00      	add	r7, sp, #0

	control_start();
 8005be0:	f7ff f8c8 	bl	8004d74 <control_start>
	if(run_mode == 1){
 8005be4:	4b2e      	ldr	r3, [pc, #184]	; (8005ca0 <half_sectionA+0xc4>)
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d107      	bne.n	8005bfe <half_sectionA+0x22>
		driveA(4000, SPEED_MIN, SPEED_1, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005bee:	235a      	movs	r3, #90	; 0x5a
 8005bf0:	22c8      	movs	r2, #200	; 0xc8
 8005bf2:	211e      	movs	r1, #30
 8005bf4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005bf8:	f7ff f9fe 	bl	8004ff8 <driveA>
 8005bfc:	e044      	b.n	8005c88 <half_sectionA+0xac>
	}else if(run_mode == 2){
 8005bfe:	4b28      	ldr	r3, [pc, #160]	; (8005ca0 <half_sectionA+0xc4>)
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d108      	bne.n	8005c1a <half_sectionA+0x3e>
		driveA(4000, SPEED_MIN, SPEED_2, SEC_HALF);					//半区画分加速しながら走行。走行後は停止しない
 8005c08:	235a      	movs	r3, #90	; 0x5a
 8005c0a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005c0e:	211e      	movs	r1, #30
 8005c10:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005c14:	f7ff f9f0 	bl	8004ff8 <driveA>
 8005c18:	e036      	b.n	8005c88 <half_sectionA+0xac>
	}else if(run_mode == 3){
 8005c1a:	4b21      	ldr	r3, [pc, #132]	; (8005ca0 <half_sectionA+0xc4>)
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b03      	cmp	r3, #3
 8005c22:	d108      	bne.n	8005c36 <half_sectionA+0x5a>
		driveA(6000, SPEED_MIN, SPEED_3, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005c24:	235a      	movs	r3, #90	; 0x5a
 8005c26:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005c2a:	211e      	movs	r1, #30
 8005c2c:	f241 7070 	movw	r0, #6000	; 0x1770
 8005c30:	f7ff f9e2 	bl	8004ff8 <driveA>
 8005c34:	e028      	b.n	8005c88 <half_sectionA+0xac>
	}else if(run_mode == 4){
 8005c36:	4b1a      	ldr	r3, [pc, #104]	; (8005ca0 <half_sectionA+0xc4>)
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b04      	cmp	r3, #4
 8005c3e:	d108      	bne.n	8005c52 <half_sectionA+0x76>
		driveA(8000, SPEED_MIN, SPEED_4, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005c40:	235a      	movs	r3, #90	; 0x5a
 8005c42:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005c46:	211e      	movs	r1, #30
 8005c48:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005c4c:	f7ff f9d4 	bl	8004ff8 <driveA>
 8005c50:	e01a      	b.n	8005c88 <half_sectionA+0xac>
	}else if(run_mode == 5){
 8005c52:	4b13      	ldr	r3, [pc, #76]	; (8005ca0 <half_sectionA+0xc4>)
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	2b05      	cmp	r3, #5
 8005c5a:	d108      	bne.n	8005c6e <half_sectionA+0x92>
		driveA(10000, SPEED_MIN, SPEED_5, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005c5c:	235a      	movs	r3, #90	; 0x5a
 8005c5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c62:	211e      	movs	r1, #30
 8005c64:	f242 7010 	movw	r0, #10000	; 0x2710
 8005c68:	f7ff f9c6 	bl	8004ff8 <driveA>
 8005c6c:	e00c      	b.n	8005c88 <half_sectionA+0xac>
	}else if(run_mode == 6){
 8005c6e:	4b0c      	ldr	r3, [pc, #48]	; (8005ca0 <half_sectionA+0xc4>)
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b06      	cmp	r3, #6
 8005c76:	d107      	bne.n	8005c88 <half_sectionA+0xac>
		driveA(10000, SPEED_MIN, SPEED_6, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005c78:	235a      	movs	r3, #90	; 0x5a
 8005c7a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005c7e:	211e      	movs	r1, #30
 8005c80:	f242 7010 	movw	r0, #10000	; 0x2710
 8005c84:	f7ff f9b8 	bl	8004ff8 <driveA>
	}
	if(!MF.FLAG.SCND)get_wall_info();										//壁情報を取得，片壁制御の有効・無効の判断
 8005c88:	4b06      	ldr	r3, [pc, #24]	; (8005ca4 <half_sectionA+0xc8>)
 8005c8a:	881b      	ldrh	r3, [r3, #0]
 8005c8c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d101      	bne.n	8005c9a <half_sectionA+0xbe>
 8005c96:	f00c fa9b 	bl	80121d0 <get_wall_info>
}
 8005c9a:	bf00      	nop
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	20000456 	.word	0x20000456
 8005ca4:	20000fa8 	.word	0x20000fa8

08005ca8 <half_sectionD>:
//half_sectionD
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionD(void){
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	af00      	add	r7, sp, #0
	full_led_write1(BLUE);
 8005cac:	2003      	movs	r0, #3
 8005cae:	f00c fb03 	bl	80122b8 <full_led_write1>

	control_start();
 8005cb2:	f7ff f85f 	bl	8004d74 <control_start>
	if(run_mode == 1){
 8005cb6:	4b27      	ldr	r3, [pc, #156]	; (8005d54 <half_sectionD+0xac>)
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d106      	bne.n	8005cce <half_sectionD+0x26>
		driveD(-4000, SPEED_MIN, SPEED_1, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 8005cc0:	235a      	movs	r3, #90	; 0x5a
 8005cc2:	22c8      	movs	r2, #200	; 0xc8
 8005cc4:	211e      	movs	r1, #30
 8005cc6:	4824      	ldr	r0, [pc, #144]	; (8005d58 <half_sectionD+0xb0>)
 8005cc8:	f7ff fa10 	bl	80050ec <driveD>
	}else if(run_mode == 5){
		driveD(-10000, SPEED_MIN, SPEED_5, SEC_HALF);				//半区画分指定減速度で減速走行。走行後は停止する
	}else if(run_mode == 6){
		driveD(-10000, SPEED_MIN, SPEED_6, SEC_HALF);				//半区画分指定減速度で減速走行。走行後は停止する
	}
}
 8005ccc:	e03f      	b.n	8005d4e <half_sectionD+0xa6>
	}else if(run_mode == 2){
 8005cce:	4b21      	ldr	r3, [pc, #132]	; (8005d54 <half_sectionD+0xac>)
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d107      	bne.n	8005ce8 <half_sectionD+0x40>
		driveD(-4000, SPEED_MIN, SPEED_2, SEC_HALF);					//半区画分指定減速度で減速走行。走行後は停止する
 8005cd8:	235a      	movs	r3, #90	; 0x5a
 8005cda:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005cde:	211e      	movs	r1, #30
 8005ce0:	481d      	ldr	r0, [pc, #116]	; (8005d58 <half_sectionD+0xb0>)
 8005ce2:	f7ff fa03 	bl	80050ec <driveD>
}
 8005ce6:	e032      	b.n	8005d4e <half_sectionD+0xa6>
	}else if(run_mode == 3){
 8005ce8:	4b1a      	ldr	r3, [pc, #104]	; (8005d54 <half_sectionD+0xac>)
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	2b03      	cmp	r3, #3
 8005cf0:	d107      	bne.n	8005d02 <half_sectionD+0x5a>
		driveD(-6000, SPEED_MIN, SPEED_3, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 8005cf2:	235a      	movs	r3, #90	; 0x5a
 8005cf4:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005cf8:	211e      	movs	r1, #30
 8005cfa:	4818      	ldr	r0, [pc, #96]	; (8005d5c <half_sectionD+0xb4>)
 8005cfc:	f7ff f9f6 	bl	80050ec <driveD>
}
 8005d00:	e025      	b.n	8005d4e <half_sectionD+0xa6>
	}else if(run_mode == 4){
 8005d02:	4b14      	ldr	r3, [pc, #80]	; (8005d54 <half_sectionD+0xac>)
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	2b04      	cmp	r3, #4
 8005d0a:	d107      	bne.n	8005d1c <half_sectionD+0x74>
		driveD(-8000, SPEED_MIN, SPEED_4, SEC_HALF);				//半区画分指定減速度で減速走行。走行後は停止する
 8005d0c:	235a      	movs	r3, #90	; 0x5a
 8005d0e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005d12:	211e      	movs	r1, #30
 8005d14:	4812      	ldr	r0, [pc, #72]	; (8005d60 <half_sectionD+0xb8>)
 8005d16:	f7ff f9e9 	bl	80050ec <driveD>
}
 8005d1a:	e018      	b.n	8005d4e <half_sectionD+0xa6>
	}else if(run_mode == 5){
 8005d1c:	4b0d      	ldr	r3, [pc, #52]	; (8005d54 <half_sectionD+0xac>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b05      	cmp	r3, #5
 8005d24:	d107      	bne.n	8005d36 <half_sectionD+0x8e>
		driveD(-10000, SPEED_MIN, SPEED_5, SEC_HALF);				//半区画分指定減速度で減速走行。走行後は停止する
 8005d26:	235a      	movs	r3, #90	; 0x5a
 8005d28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005d2c:	211e      	movs	r1, #30
 8005d2e:	480d      	ldr	r0, [pc, #52]	; (8005d64 <half_sectionD+0xbc>)
 8005d30:	f7ff f9dc 	bl	80050ec <driveD>
}
 8005d34:	e00b      	b.n	8005d4e <half_sectionD+0xa6>
	}else if(run_mode == 6){
 8005d36:	4b07      	ldr	r3, [pc, #28]	; (8005d54 <half_sectionD+0xac>)
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	2b06      	cmp	r3, #6
 8005d3e:	d106      	bne.n	8005d4e <half_sectionD+0xa6>
		driveD(-10000, SPEED_MIN, SPEED_6, SEC_HALF);				//半区画分指定減速度で減速走行。走行後は停止する
 8005d40:	235a      	movs	r3, #90	; 0x5a
 8005d42:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005d46:	211e      	movs	r1, #30
 8005d48:	4806      	ldr	r0, [pc, #24]	; (8005d64 <half_sectionD+0xbc>)
 8005d4a:	f7ff f9cf 	bl	80050ec <driveD>
}
 8005d4e:	bf00      	nop
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	20000456 	.word	0x20000456
 8005d58:	fffff060 	.word	0xfffff060
 8005d5c:	ffffe890 	.word	0xffffe890
 8005d60:	ffffe0c0 	.word	0xffffe0c0
 8005d64:	ffffd8f0 	.word	0xffffd8f0

08005d68 <half_sectionVA>:
//half_sectionVA
// 半区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionVA(void){
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	af00      	add	r7, sp, #0

	control_start();
 8005d6c:	f7ff f802 	bl	8004d74 <control_start>
	if(run_mode == 1){
 8005d70:	4b29      	ldr	r3, [pc, #164]	; (8005e18 <half_sectionVA+0xb0>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d107      	bne.n	8005d8a <half_sectionVA+0x22>
		driveA(4000, SPEED_MIN, SPEED_1, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
 8005d7a:	2382      	movs	r3, #130	; 0x82
 8005d7c:	22c8      	movs	r2, #200	; 0xc8
 8005d7e:	211e      	movs	r1, #30
 8005d80:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005d84:	f7ff f938 	bl	8004ff8 <driveA>
	}else if(run_mode == 5){
		driveA(10000, SPEED_MIN, SPEED_5, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
	}else if(run_mode == 6){
		driveA(10000, SPEED_MIN, SPEED_6, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
	}
}
 8005d88:	e044      	b.n	8005e14 <half_sectionVA+0xac>
	}else if(run_mode == 2){
 8005d8a:	4b23      	ldr	r3, [pc, #140]	; (8005e18 <half_sectionVA+0xb0>)
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d108      	bne.n	8005da6 <half_sectionVA+0x3e>
		driveA(4000, SPEED_MIN, SPEED_2, SEC_HALF_V);					//半区画分加速しながら走行。走行後は停止しない
 8005d94:	2382      	movs	r3, #130	; 0x82
 8005d96:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005d9a:	211e      	movs	r1, #30
 8005d9c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005da0:	f7ff f92a 	bl	8004ff8 <driveA>
}
 8005da4:	e036      	b.n	8005e14 <half_sectionVA+0xac>
	}else if(run_mode == 3){
 8005da6:	4b1c      	ldr	r3, [pc, #112]	; (8005e18 <half_sectionVA+0xb0>)
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	d108      	bne.n	8005dc2 <half_sectionVA+0x5a>
		driveA(6000, SPEED_MIN, SPEED_3, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
 8005db0:	2382      	movs	r3, #130	; 0x82
 8005db2:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005db6:	211e      	movs	r1, #30
 8005db8:	f241 7070 	movw	r0, #6000	; 0x1770
 8005dbc:	f7ff f91c 	bl	8004ff8 <driveA>
}
 8005dc0:	e028      	b.n	8005e14 <half_sectionVA+0xac>
	}else if(run_mode == 4){
 8005dc2:	4b15      	ldr	r3, [pc, #84]	; (8005e18 <half_sectionVA+0xb0>)
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b04      	cmp	r3, #4
 8005dca:	d108      	bne.n	8005dde <half_sectionVA+0x76>
		driveA(8000, SPEED_MIN, SPEED_4, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
 8005dcc:	2382      	movs	r3, #130	; 0x82
 8005dce:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005dd2:	211e      	movs	r1, #30
 8005dd4:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005dd8:	f7ff f90e 	bl	8004ff8 <driveA>
}
 8005ddc:	e01a      	b.n	8005e14 <half_sectionVA+0xac>
	}else if(run_mode == 5){
 8005dde:	4b0e      	ldr	r3, [pc, #56]	; (8005e18 <half_sectionVA+0xb0>)
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	2b05      	cmp	r3, #5
 8005de6:	d108      	bne.n	8005dfa <half_sectionVA+0x92>
		driveA(10000, SPEED_MIN, SPEED_5, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
 8005de8:	2382      	movs	r3, #130	; 0x82
 8005dea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005dee:	211e      	movs	r1, #30
 8005df0:	f242 7010 	movw	r0, #10000	; 0x2710
 8005df4:	f7ff f900 	bl	8004ff8 <driveA>
}
 8005df8:	e00c      	b.n	8005e14 <half_sectionVA+0xac>
	}else if(run_mode == 6){
 8005dfa:	4b07      	ldr	r3, [pc, #28]	; (8005e18 <half_sectionVA+0xb0>)
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b06      	cmp	r3, #6
 8005e02:	d107      	bne.n	8005e14 <half_sectionVA+0xac>
		driveA(10000, SPEED_MIN, SPEED_6, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
 8005e04:	2382      	movs	r3, #130	; 0x82
 8005e06:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005e0a:	211e      	movs	r1, #30
 8005e0c:	f242 7010 	movw	r0, #10000	; 0x2710
 8005e10:	f7ff f8f2 	bl	8004ff8 <driveA>
}
 8005e14:	bf00      	nop
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	20000456 	.word	0x20000456

08005e1c <half_sectionVD>:
//half_sectionVD
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionVD(void){
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	af00      	add	r7, sp, #0
	full_led_write1(BLUE);
 8005e20:	2003      	movs	r0, #3
 8005e22:	f00c fa49 	bl	80122b8 <full_led_write1>

	control_start();
 8005e26:	f7fe ffa5 	bl	8004d74 <control_start>
	if(run_mode == 1){
 8005e2a:	4b27      	ldr	r3, [pc, #156]	; (8005ec8 <half_sectionVD+0xac>)
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d106      	bne.n	8005e42 <half_sectionVD+0x26>
		driveD(-4000, SPEED_MIN, SPEED_1, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
 8005e34:	2382      	movs	r3, #130	; 0x82
 8005e36:	22c8      	movs	r2, #200	; 0xc8
 8005e38:	211e      	movs	r1, #30
 8005e3a:	4824      	ldr	r0, [pc, #144]	; (8005ecc <half_sectionVD+0xb0>)
 8005e3c:	f7ff f956 	bl	80050ec <driveD>
	}else if(run_mode == 5){
		driveD(-10000, SPEED_MIN, SPEED_5, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
	}else if(run_mode == 6){
		driveD(-10000, SPEED_MIN, SPEED_6, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
	}
}
 8005e40:	e03f      	b.n	8005ec2 <half_sectionVD+0xa6>
	}else if(run_mode == 2){
 8005e42:	4b21      	ldr	r3, [pc, #132]	; (8005ec8 <half_sectionVD+0xac>)
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d107      	bne.n	8005e5c <half_sectionVD+0x40>
		driveD(-4000, SPEED_MIN, SPEED_2, SEC_HALF_V);					//半区画分指定減速度で減速走行。走行後は停止する
 8005e4c:	2382      	movs	r3, #130	; 0x82
 8005e4e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005e52:	211e      	movs	r1, #30
 8005e54:	481d      	ldr	r0, [pc, #116]	; (8005ecc <half_sectionVD+0xb0>)
 8005e56:	f7ff f949 	bl	80050ec <driveD>
}
 8005e5a:	e032      	b.n	8005ec2 <half_sectionVD+0xa6>
	}else if(run_mode == 3){
 8005e5c:	4b1a      	ldr	r3, [pc, #104]	; (8005ec8 <half_sectionVD+0xac>)
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	2b03      	cmp	r3, #3
 8005e64:	d107      	bne.n	8005e76 <half_sectionVD+0x5a>
		driveD(-6000, SPEED_MIN, SPEED_3, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
 8005e66:	2382      	movs	r3, #130	; 0x82
 8005e68:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005e6c:	211e      	movs	r1, #30
 8005e6e:	4818      	ldr	r0, [pc, #96]	; (8005ed0 <half_sectionVD+0xb4>)
 8005e70:	f7ff f93c 	bl	80050ec <driveD>
}
 8005e74:	e025      	b.n	8005ec2 <half_sectionVD+0xa6>
	}else if(run_mode == 4){
 8005e76:	4b14      	ldr	r3, [pc, #80]	; (8005ec8 <half_sectionVD+0xac>)
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b04      	cmp	r3, #4
 8005e7e:	d107      	bne.n	8005e90 <half_sectionVD+0x74>
		driveD(-8000, SPEED_MIN, SPEED_4, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
 8005e80:	2382      	movs	r3, #130	; 0x82
 8005e82:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005e86:	211e      	movs	r1, #30
 8005e88:	4812      	ldr	r0, [pc, #72]	; (8005ed4 <half_sectionVD+0xb8>)
 8005e8a:	f7ff f92f 	bl	80050ec <driveD>
}
 8005e8e:	e018      	b.n	8005ec2 <half_sectionVD+0xa6>
	}else if(run_mode == 5){
 8005e90:	4b0d      	ldr	r3, [pc, #52]	; (8005ec8 <half_sectionVD+0xac>)
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b05      	cmp	r3, #5
 8005e98:	d107      	bne.n	8005eaa <half_sectionVD+0x8e>
		driveD(-10000, SPEED_MIN, SPEED_5, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
 8005e9a:	2382      	movs	r3, #130	; 0x82
 8005e9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ea0:	211e      	movs	r1, #30
 8005ea2:	480d      	ldr	r0, [pc, #52]	; (8005ed8 <half_sectionVD+0xbc>)
 8005ea4:	f7ff f922 	bl	80050ec <driveD>
}
 8005ea8:	e00b      	b.n	8005ec2 <half_sectionVD+0xa6>
	}else if(run_mode == 6){
 8005eaa:	4b07      	ldr	r3, [pc, #28]	; (8005ec8 <half_sectionVD+0xac>)
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b06      	cmp	r3, #6
 8005eb2:	d106      	bne.n	8005ec2 <half_sectionVD+0xa6>
		driveD(-10000, SPEED_MIN, SPEED_6, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
 8005eb4:	2382      	movs	r3, #130	; 0x82
 8005eb6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005eba:	211e      	movs	r1, #30
 8005ebc:	4806      	ldr	r0, [pc, #24]	; (8005ed8 <half_sectionVD+0xbc>)
 8005ebe:	f7ff f915 	bl	80050ec <driveD>
}
 8005ec2:	bf00      	nop
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	20000456 	.word	0x20000456
 8005ecc:	fffff060 	.word	0xfffff060
 8005ed0:	ffffe890 	.word	0xffffe890
 8005ed4:	ffffe0c0 	.word	0xffffe0c0
 8005ed8:	ffffd8f0 	.word	0xffffd8f0

08005edc <half_sectionU>:
//half_sectionU
// 等速で半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionU(void){
 8005edc:	b580      	push	{r7, lr}
 8005ede:	af00      	add	r7, sp, #0
	full_led_write1(WHITE);
 8005ee0:	2007      	movs	r0, #7
 8005ee2:	f00c f9e9 	bl	80122b8 <full_led_write1>
	control_start();
 8005ee6:	f7fe ff45 	bl	8004d74 <control_start>
	driveU(SEC_HALF);													//半区画分等速走行。走行後は停止しない
 8005eea:	205a      	movs	r0, #90	; 0x5a
 8005eec:	f7ff f9d8 	bl	80052a0 <driveU>
}
 8005ef0:	bf00      	nop
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <half_sectionV>:
//half_sectionV
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionV(void){
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	af00      	add	r7, sp, #0
	full_led_write1(WHITE);
 8005ef8:	2007      	movs	r0, #7
 8005efa:	f00c f9dd 	bl	80122b8 <full_led_write1>
	control_start();
 8005efe:	f7fe ff39 	bl	8004d74 <control_start>
	driveU(SEC_HALF_V);													//半区画分等速走行。走行後は停止しない
 8005f02:	2082      	movs	r0, #130	; 0x82
 8005f04:	f7ff f9cc 	bl	80052a0 <driveU>
}
 8005f08:	bf00      	nop
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <one_section>:
//one_section
// 1区画分進んで停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_section(void){
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	af00      	add	r7, sp, #0

	half_sectionA();													//半区画分加速走行
 8005f10:	f7ff fe64 	bl	8005bdc <half_sectionA>
	half_sectionD();													//半区画分減速走行のち停止
 8005f14:	f7ff fec8 	bl	8005ca8 <half_sectionD>
}
 8005f18:	bf00      	nop
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <one_sectionA>:
//one_sectionA
// 1区画分加速する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionA(void){
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	af00      	add	r7, sp, #0
	full_led_write1(BLUEGREEN);
 8005f20:	2004      	movs	r0, #4
 8005f22:	f00c f9c9 	bl	80122b8 <full_led_write1>
	control_start();
 8005f26:	f7fe ff25 	bl	8004d74 <control_start>
	if(run_mode == 1){
 8005f2a:	4b3d      	ldr	r3, [pc, #244]	; (8006020 <one_sectionA+0x104>)
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d10c      	bne.n	8005f4e <one_sectionA+0x32>
		driveA(accel_hs, SPEED_1, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005f34:	4b3b      	ldr	r3, [pc, #236]	; (8006024 <one_sectionA+0x108>)
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	b21b      	sxth	r3, r3
 8005f3a:	b298      	uxth	r0, r3
 8005f3c:	4b3a      	ldr	r3, [pc, #232]	; (8006028 <one_sectionA+0x10c>)
 8005f3e:	881b      	ldrh	r3, [r3, #0]
 8005f40:	b21b      	sxth	r3, r3
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	23b4      	movs	r3, #180	; 0xb4
 8005f46:	21c8      	movs	r1, #200	; 0xc8
 8005f48:	f7ff f856 	bl	8004ff8 <driveA>
 8005f4c:	e05d      	b.n	800600a <one_sectionA+0xee>
	}else if(run_mode == 2){
 8005f4e:	4b34      	ldr	r3, [pc, #208]	; (8006020 <one_sectionA+0x104>)
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d10d      	bne.n	8005f74 <one_sectionA+0x58>
		driveA(accel_hs, SPEED_2, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005f58:	4b32      	ldr	r3, [pc, #200]	; (8006024 <one_sectionA+0x108>)
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	b21b      	sxth	r3, r3
 8005f5e:	b298      	uxth	r0, r3
 8005f60:	4b31      	ldr	r3, [pc, #196]	; (8006028 <one_sectionA+0x10c>)
 8005f62:	881b      	ldrh	r3, [r3, #0]
 8005f64:	b21b      	sxth	r3, r3
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	23b4      	movs	r3, #180	; 0xb4
 8005f6a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005f6e:	f7ff f843 	bl	8004ff8 <driveA>
 8005f72:	e04a      	b.n	800600a <one_sectionA+0xee>
	}else if(run_mode == 3){
 8005f74:	4b2a      	ldr	r3, [pc, #168]	; (8006020 <one_sectionA+0x104>)
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b03      	cmp	r3, #3
 8005f7c:	d10d      	bne.n	8005f9a <one_sectionA+0x7e>
		driveA(accel_hs, SPEED_3, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005f7e:	4b29      	ldr	r3, [pc, #164]	; (8006024 <one_sectionA+0x108>)
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	b21b      	sxth	r3, r3
 8005f84:	b298      	uxth	r0, r3
 8005f86:	4b28      	ldr	r3, [pc, #160]	; (8006028 <one_sectionA+0x10c>)
 8005f88:	881b      	ldrh	r3, [r3, #0]
 8005f8a:	b21b      	sxth	r3, r3
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	23b4      	movs	r3, #180	; 0xb4
 8005f90:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005f94:	f7ff f830 	bl	8004ff8 <driveA>
 8005f98:	e037      	b.n	800600a <one_sectionA+0xee>
	}else if(run_mode == 4){
 8005f9a:	4b21      	ldr	r3, [pc, #132]	; (8006020 <one_sectionA+0x104>)
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	2b04      	cmp	r3, #4
 8005fa2:	d10d      	bne.n	8005fc0 <one_sectionA+0xa4>
		driveA(accel_hs, SPEED_4, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005fa4:	4b1f      	ldr	r3, [pc, #124]	; (8006024 <one_sectionA+0x108>)
 8005fa6:	881b      	ldrh	r3, [r3, #0]
 8005fa8:	b21b      	sxth	r3, r3
 8005faa:	b298      	uxth	r0, r3
 8005fac:	4b1e      	ldr	r3, [pc, #120]	; (8006028 <one_sectionA+0x10c>)
 8005fae:	881b      	ldrh	r3, [r3, #0]
 8005fb0:	b21b      	sxth	r3, r3
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	23b4      	movs	r3, #180	; 0xb4
 8005fb6:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8005fba:	f7ff f81d 	bl	8004ff8 <driveA>
 8005fbe:	e024      	b.n	800600a <one_sectionA+0xee>
	}else if(run_mode == 5){
 8005fc0:	4b17      	ldr	r3, [pc, #92]	; (8006020 <one_sectionA+0x104>)
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b05      	cmp	r3, #5
 8005fc8:	d10d      	bne.n	8005fe6 <one_sectionA+0xca>
		driveA(accel_hs, SPEED_5, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005fca:	4b16      	ldr	r3, [pc, #88]	; (8006024 <one_sectionA+0x108>)
 8005fcc:	881b      	ldrh	r3, [r3, #0]
 8005fce:	b21b      	sxth	r3, r3
 8005fd0:	b298      	uxth	r0, r3
 8005fd2:	4b15      	ldr	r3, [pc, #84]	; (8006028 <one_sectionA+0x10c>)
 8005fd4:	881b      	ldrh	r3, [r3, #0]
 8005fd6:	b21b      	sxth	r3, r3
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	23b4      	movs	r3, #180	; 0xb4
 8005fdc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005fe0:	f7ff f80a 	bl	8004ff8 <driveA>
 8005fe4:	e011      	b.n	800600a <one_sectionA+0xee>
	}else if(run_mode == 6){
 8005fe6:	4b0e      	ldr	r3, [pc, #56]	; (8006020 <one_sectionA+0x104>)
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b06      	cmp	r3, #6
 8005fee:	d10c      	bne.n	800600a <one_sectionA+0xee>
		driveA(accel_hs, SPEED_6, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005ff0:	4b0c      	ldr	r3, [pc, #48]	; (8006024 <one_sectionA+0x108>)
 8005ff2:	881b      	ldrh	r3, [r3, #0]
 8005ff4:	b21b      	sxth	r3, r3
 8005ff6:	b298      	uxth	r0, r3
 8005ff8:	4b0b      	ldr	r3, [pc, #44]	; (8006028 <one_sectionA+0x10c>)
 8005ffa:	881b      	ldrh	r3, [r3, #0]
 8005ffc:	b21b      	sxth	r3, r3
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	23b4      	movs	r3, #180	; 0xb4
 8006002:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006006:	f7fe fff7 	bl	8004ff8 <driveA>
	}
	if(!MF.FLAG.SCND)get_wall_info();										//a壁情報を取得，片壁制御の有効・無効の判断
 800600a:	4b08      	ldr	r3, [pc, #32]	; (800602c <one_sectionA+0x110>)
 800600c:	881b      	ldrh	r3, [r3, #0]
 800600e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006012:	b2db      	uxtb	r3, r3
 8006014:	2b00      	cmp	r3, #0
 8006016:	d101      	bne.n	800601c <one_sectionA+0x100>
 8006018:	f00c f8da 	bl	80121d0 <get_wall_info>
}
 800601c:	bf00      	nop
 800601e:	bd80      	pop	{r7, pc}
 8006020:	20000456 	.word	0x20000456
 8006024:	20000454 	.word	0x20000454
 8006028:	20000ffc 	.word	0x20000ffc
 800602c:	20000fa8 	.word	0x20000fa8

08006030 <one_sectionD>:
//one_sectionD
// 1区画分減速する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionD(void){
 8006030:	b580      	push	{r7, lr}
 8006032:	af00      	add	r7, sp, #0
	full_led_write1(BLUE);
 8006034:	2003      	movs	r0, #3
 8006036:	f00c f93f 	bl	80122b8 <full_led_write1>
	control_start();
 800603a:	f7fe fe9b 	bl	8004d74 <control_start>
	if(run_mode == 1){
 800603e:	4b46      	ldr	r3, [pc, #280]	; (8006158 <one_sectionD+0x128>)
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b01      	cmp	r3, #1
 8006046:	d10f      	bne.n	8006068 <one_sectionD+0x38>
		driveD(-accel_hs, SPEED_1, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 8006048:	4b44      	ldr	r3, [pc, #272]	; (800615c <one_sectionD+0x12c>)
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	b21b      	sxth	r3, r3
 800604e:	b29b      	uxth	r3, r3
 8006050:	425b      	negs	r3, r3
 8006052:	b29b      	uxth	r3, r3
 8006054:	b218      	sxth	r0, r3
 8006056:	4b42      	ldr	r3, [pc, #264]	; (8006160 <one_sectionD+0x130>)
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	b21b      	sxth	r3, r3
 800605c:	b29a      	uxth	r2, r3
 800605e:	23b4      	movs	r3, #180	; 0xb4
 8006060:	21c8      	movs	r1, #200	; 0xc8
 8006062:	f7ff f843 	bl	80050ec <driveD>
 8006066:	e06c      	b.n	8006142 <one_sectionD+0x112>
	}else if(run_mode == 2){
 8006068:	4b3b      	ldr	r3, [pc, #236]	; (8006158 <one_sectionD+0x128>)
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b02      	cmp	r3, #2
 8006070:	d110      	bne.n	8006094 <one_sectionD+0x64>
		driveD(-accel_hs, SPEED_2, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 8006072:	4b3a      	ldr	r3, [pc, #232]	; (800615c <one_sectionD+0x12c>)
 8006074:	881b      	ldrh	r3, [r3, #0]
 8006076:	b21b      	sxth	r3, r3
 8006078:	b29b      	uxth	r3, r3
 800607a:	425b      	negs	r3, r3
 800607c:	b29b      	uxth	r3, r3
 800607e:	b218      	sxth	r0, r3
 8006080:	4b37      	ldr	r3, [pc, #220]	; (8006160 <one_sectionD+0x130>)
 8006082:	881b      	ldrh	r3, [r3, #0]
 8006084:	b21b      	sxth	r3, r3
 8006086:	b29a      	uxth	r2, r3
 8006088:	23b4      	movs	r3, #180	; 0xb4
 800608a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800608e:	f7ff f82d 	bl	80050ec <driveD>
 8006092:	e056      	b.n	8006142 <one_sectionD+0x112>
	}else if(run_mode == 3){
 8006094:	4b30      	ldr	r3, [pc, #192]	; (8006158 <one_sectionD+0x128>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b03      	cmp	r3, #3
 800609c:	d110      	bne.n	80060c0 <one_sectionD+0x90>
		driveD(-accel_hs, SPEED_3, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 800609e:	4b2f      	ldr	r3, [pc, #188]	; (800615c <one_sectionD+0x12c>)
 80060a0:	881b      	ldrh	r3, [r3, #0]
 80060a2:	b21b      	sxth	r3, r3
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	425b      	negs	r3, r3
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	b218      	sxth	r0, r3
 80060ac:	4b2c      	ldr	r3, [pc, #176]	; (8006160 <one_sectionD+0x130>)
 80060ae:	881b      	ldrh	r3, [r3, #0]
 80060b0:	b21b      	sxth	r3, r3
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	23b4      	movs	r3, #180	; 0xb4
 80060b6:	f44f 7116 	mov.w	r1, #600	; 0x258
 80060ba:	f7ff f817 	bl	80050ec <driveD>
 80060be:	e040      	b.n	8006142 <one_sectionD+0x112>
	}else if(run_mode == 4){
 80060c0:	4b25      	ldr	r3, [pc, #148]	; (8006158 <one_sectionD+0x128>)
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b04      	cmp	r3, #4
 80060c8:	d110      	bne.n	80060ec <one_sectionD+0xbc>
		driveD(-accel_hs, SPEED_4, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 80060ca:	4b24      	ldr	r3, [pc, #144]	; (800615c <one_sectionD+0x12c>)
 80060cc:	881b      	ldrh	r3, [r3, #0]
 80060ce:	b21b      	sxth	r3, r3
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	425b      	negs	r3, r3
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	b218      	sxth	r0, r3
 80060d8:	4b21      	ldr	r3, [pc, #132]	; (8006160 <one_sectionD+0x130>)
 80060da:	881b      	ldrh	r3, [r3, #0]
 80060dc:	b21b      	sxth	r3, r3
 80060de:	b29a      	uxth	r2, r3
 80060e0:	23b4      	movs	r3, #180	; 0xb4
 80060e2:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80060e6:	f7ff f801 	bl	80050ec <driveD>
 80060ea:	e02a      	b.n	8006142 <one_sectionD+0x112>
	}else if(run_mode == 5){
 80060ec:	4b1a      	ldr	r3, [pc, #104]	; (8006158 <one_sectionD+0x128>)
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b05      	cmp	r3, #5
 80060f4:	d110      	bne.n	8006118 <one_sectionD+0xe8>
		driveD(-accel_hs, SPEED_5, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 80060f6:	4b19      	ldr	r3, [pc, #100]	; (800615c <one_sectionD+0x12c>)
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	b21b      	sxth	r3, r3
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	425b      	negs	r3, r3
 8006100:	b29b      	uxth	r3, r3
 8006102:	b218      	sxth	r0, r3
 8006104:	4b16      	ldr	r3, [pc, #88]	; (8006160 <one_sectionD+0x130>)
 8006106:	881b      	ldrh	r3, [r3, #0]
 8006108:	b21b      	sxth	r3, r3
 800610a:	b29a      	uxth	r2, r3
 800610c:	23b4      	movs	r3, #180	; 0xb4
 800610e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006112:	f7fe ffeb 	bl	80050ec <driveD>
 8006116:	e014      	b.n	8006142 <one_sectionD+0x112>
	}else if(run_mode == 6){
 8006118:	4b0f      	ldr	r3, [pc, #60]	; (8006158 <one_sectionD+0x128>)
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b06      	cmp	r3, #6
 8006120:	d10f      	bne.n	8006142 <one_sectionD+0x112>
		driveD(-accel_hs, SPEED_6, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 8006122:	4b0e      	ldr	r3, [pc, #56]	; (800615c <one_sectionD+0x12c>)
 8006124:	881b      	ldrh	r3, [r3, #0]
 8006126:	b21b      	sxth	r3, r3
 8006128:	b29b      	uxth	r3, r3
 800612a:	425b      	negs	r3, r3
 800612c:	b29b      	uxth	r3, r3
 800612e:	b218      	sxth	r0, r3
 8006130:	4b0b      	ldr	r3, [pc, #44]	; (8006160 <one_sectionD+0x130>)
 8006132:	881b      	ldrh	r3, [r3, #0]
 8006134:	b21b      	sxth	r3, r3
 8006136:	b29a      	uxth	r2, r3
 8006138:	23b4      	movs	r3, #180	; 0xb4
 800613a:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800613e:	f7fe ffd5 	bl	80050ec <driveD>
	}
	if(!MF.FLAG.SCND)get_wall_info();									//a壁情報を取得，片壁制御の有効・無効の判断
 8006142:	4b08      	ldr	r3, [pc, #32]	; (8006164 <one_sectionD+0x134>)
 8006144:	881b      	ldrh	r3, [r3, #0]
 8006146:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	d101      	bne.n	8006154 <one_sectionD+0x124>
 8006150:	f00c f83e 	bl	80121d0 <get_wall_info>
}
 8006154:	bf00      	nop
 8006156:	bd80      	pop	{r7, pc}
 8006158:	20000456 	.word	0x20000456
 800615c:	20000454 	.word	0x20000454
 8006160:	20000ffc 	.word	0x20000ffc
 8006164:	20000fa8 	.word	0x20000fa8

08006168 <one_sectionVA>:
//one_sectionVA
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionVA(void){
 8006168:	b580      	push	{r7, lr}
 800616a:	af00      	add	r7, sp, #0
	full_led_write1(BLUEGREEN);
 800616c:	2004      	movs	r0, #4
 800616e:	f00c f8a3 	bl	80122b8 <full_led_write1>
	control_start();
 8006172:	f7fe fdff 	bl	8004d74 <control_start>
	if(run_mode == 1){
 8006176:	4b3c      	ldr	r3, [pc, #240]	; (8006268 <one_sectionVA+0x100>)
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b01      	cmp	r3, #1
 800617e:	d10d      	bne.n	800619c <one_sectionVA+0x34>
		driveA(accel_hs, SPEED_1, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 8006180:	4b3a      	ldr	r3, [pc, #232]	; (800626c <one_sectionVA+0x104>)
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	b21b      	sxth	r3, r3
 8006186:	b298      	uxth	r0, r3
 8006188:	4b39      	ldr	r3, [pc, #228]	; (8006270 <one_sectionVA+0x108>)
 800618a:	881b      	ldrh	r3, [r3, #0]
 800618c:	b21b      	sxth	r3, r3
 800618e:	b29a      	uxth	r2, r3
 8006190:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006194:	21c8      	movs	r1, #200	; 0xc8
 8006196:	f7fe ff2f 	bl	8004ff8 <driveA>
	}else if(run_mode == 5){
		driveA(accel_hs, SPEED_5, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
	}else if(run_mode == 6){
		driveA(accel_hs, SPEED_6, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
	}
}
 800619a:	e062      	b.n	8006262 <one_sectionVA+0xfa>
	}else if(run_mode == 2){
 800619c:	4b32      	ldr	r3, [pc, #200]	; (8006268 <one_sectionVA+0x100>)
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d10e      	bne.n	80061c4 <one_sectionVA+0x5c>
		driveA(accel_hs, SPEED_2, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 80061a6:	4b31      	ldr	r3, [pc, #196]	; (800626c <one_sectionVA+0x104>)
 80061a8:	881b      	ldrh	r3, [r3, #0]
 80061aa:	b21b      	sxth	r3, r3
 80061ac:	b298      	uxth	r0, r3
 80061ae:	4b30      	ldr	r3, [pc, #192]	; (8006270 <one_sectionVA+0x108>)
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	b21b      	sxth	r3, r3
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80061ba:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80061be:	f7fe ff1b 	bl	8004ff8 <driveA>
}
 80061c2:	e04e      	b.n	8006262 <one_sectionVA+0xfa>
	}else if(run_mode == 3){
 80061c4:	4b28      	ldr	r3, [pc, #160]	; (8006268 <one_sectionVA+0x100>)
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	2b03      	cmp	r3, #3
 80061cc:	d10e      	bne.n	80061ec <one_sectionVA+0x84>
		driveA(accel_hs, SPEED_3, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 80061ce:	4b27      	ldr	r3, [pc, #156]	; (800626c <one_sectionVA+0x104>)
 80061d0:	881b      	ldrh	r3, [r3, #0]
 80061d2:	b21b      	sxth	r3, r3
 80061d4:	b298      	uxth	r0, r3
 80061d6:	4b26      	ldr	r3, [pc, #152]	; (8006270 <one_sectionVA+0x108>)
 80061d8:	881b      	ldrh	r3, [r3, #0]
 80061da:	b21b      	sxth	r3, r3
 80061dc:	b29a      	uxth	r2, r3
 80061de:	f44f 7382 	mov.w	r3, #260	; 0x104
 80061e2:	f44f 7116 	mov.w	r1, #600	; 0x258
 80061e6:	f7fe ff07 	bl	8004ff8 <driveA>
}
 80061ea:	e03a      	b.n	8006262 <one_sectionVA+0xfa>
	}else if(run_mode == 4){
 80061ec:	4b1e      	ldr	r3, [pc, #120]	; (8006268 <one_sectionVA+0x100>)
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d10e      	bne.n	8006214 <one_sectionVA+0xac>
		driveA(accel_hs, SPEED_4, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 80061f6:	4b1d      	ldr	r3, [pc, #116]	; (800626c <one_sectionVA+0x104>)
 80061f8:	881b      	ldrh	r3, [r3, #0]
 80061fa:	b21b      	sxth	r3, r3
 80061fc:	b298      	uxth	r0, r3
 80061fe:	4b1c      	ldr	r3, [pc, #112]	; (8006270 <one_sectionVA+0x108>)
 8006200:	881b      	ldrh	r3, [r3, #0]
 8006202:	b21b      	sxth	r3, r3
 8006204:	b29a      	uxth	r2, r3
 8006206:	f44f 7382 	mov.w	r3, #260	; 0x104
 800620a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800620e:	f7fe fef3 	bl	8004ff8 <driveA>
}
 8006212:	e026      	b.n	8006262 <one_sectionVA+0xfa>
	}else if(run_mode == 5){
 8006214:	4b14      	ldr	r3, [pc, #80]	; (8006268 <one_sectionVA+0x100>)
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b05      	cmp	r3, #5
 800621c:	d10e      	bne.n	800623c <one_sectionVA+0xd4>
		driveA(accel_hs, SPEED_5, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 800621e:	4b13      	ldr	r3, [pc, #76]	; (800626c <one_sectionVA+0x104>)
 8006220:	881b      	ldrh	r3, [r3, #0]
 8006222:	b21b      	sxth	r3, r3
 8006224:	b298      	uxth	r0, r3
 8006226:	4b12      	ldr	r3, [pc, #72]	; (8006270 <one_sectionVA+0x108>)
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	b21b      	sxth	r3, r3
 800622c:	b29a      	uxth	r2, r3
 800622e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006232:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006236:	f7fe fedf 	bl	8004ff8 <driveA>
}
 800623a:	e012      	b.n	8006262 <one_sectionVA+0xfa>
	}else if(run_mode == 6){
 800623c:	4b0a      	ldr	r3, [pc, #40]	; (8006268 <one_sectionVA+0x100>)
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b06      	cmp	r3, #6
 8006244:	d10d      	bne.n	8006262 <one_sectionVA+0xfa>
		driveA(accel_hs, SPEED_6, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 8006246:	4b09      	ldr	r3, [pc, #36]	; (800626c <one_sectionVA+0x104>)
 8006248:	881b      	ldrh	r3, [r3, #0]
 800624a:	b21b      	sxth	r3, r3
 800624c:	b298      	uxth	r0, r3
 800624e:	4b08      	ldr	r3, [pc, #32]	; (8006270 <one_sectionVA+0x108>)
 8006250:	881b      	ldrh	r3, [r3, #0]
 8006252:	b21b      	sxth	r3, r3
 8006254:	b29a      	uxth	r2, r3
 8006256:	f44f 7382 	mov.w	r3, #260	; 0x104
 800625a:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800625e:	f7fe fecb 	bl	8004ff8 <driveA>
}
 8006262:	bf00      	nop
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	20000456 	.word	0x20000456
 800626c:	20000454 	.word	0x20000454
 8006270:	20000ffc 	.word	0x20000ffc

08006274 <one_sectionVD>:
//one_sectionVD
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionVD(void){
 8006274:	b580      	push	{r7, lr}
 8006276:	af00      	add	r7, sp, #0
	full_led_write1(BLUE);
 8006278:	2003      	movs	r0, #3
 800627a:	f00c f81d 	bl	80122b8 <full_led_write1>
	control_start();
 800627e:	f7fe fd79 	bl	8004d74 <control_start>
	if(run_mode == 1){
 8006282:	4b45      	ldr	r3, [pc, #276]	; (8006398 <one_sectionVD+0x124>)
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b01      	cmp	r3, #1
 800628a:	d110      	bne.n	80062ae <one_sectionVD+0x3a>
		driveD(-accel_hs, SPEED_1, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 800628c:	4b43      	ldr	r3, [pc, #268]	; (800639c <one_sectionVD+0x128>)
 800628e:	881b      	ldrh	r3, [r3, #0]
 8006290:	b21b      	sxth	r3, r3
 8006292:	b29b      	uxth	r3, r3
 8006294:	425b      	negs	r3, r3
 8006296:	b29b      	uxth	r3, r3
 8006298:	b218      	sxth	r0, r3
 800629a:	4b41      	ldr	r3, [pc, #260]	; (80063a0 <one_sectionVD+0x12c>)
 800629c:	881b      	ldrh	r3, [r3, #0]
 800629e:	b21b      	sxth	r3, r3
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80062a6:	21c8      	movs	r1, #200	; 0xc8
 80062a8:	f7fe ff20 	bl	80050ec <driveD>
	}else if(run_mode == 5){
		driveD(-accel_hs, SPEED_5, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
	}else if(run_mode == 6){
		driveD(-accel_hs, SPEED_6, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
	}
}
 80062ac:	e071      	b.n	8006392 <one_sectionVD+0x11e>
	}else if(run_mode == 2){
 80062ae:	4b3a      	ldr	r3, [pc, #232]	; (8006398 <one_sectionVD+0x124>)
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d111      	bne.n	80062dc <one_sectionVD+0x68>
		driveD(-accel_hs, SPEED_2, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 80062b8:	4b38      	ldr	r3, [pc, #224]	; (800639c <one_sectionVD+0x128>)
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	b21b      	sxth	r3, r3
 80062be:	b29b      	uxth	r3, r3
 80062c0:	425b      	negs	r3, r3
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	b218      	sxth	r0, r3
 80062c6:	4b36      	ldr	r3, [pc, #216]	; (80063a0 <one_sectionVD+0x12c>)
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	b21b      	sxth	r3, r3
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	f44f 7382 	mov.w	r3, #260	; 0x104
 80062d2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80062d6:	f7fe ff09 	bl	80050ec <driveD>
}
 80062da:	e05a      	b.n	8006392 <one_sectionVD+0x11e>
	}else if(run_mode == 3){
 80062dc:	4b2e      	ldr	r3, [pc, #184]	; (8006398 <one_sectionVD+0x124>)
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b03      	cmp	r3, #3
 80062e4:	d111      	bne.n	800630a <one_sectionVD+0x96>
		driveD(-accel_hs, SPEED_3, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 80062e6:	4b2d      	ldr	r3, [pc, #180]	; (800639c <one_sectionVD+0x128>)
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	b21b      	sxth	r3, r3
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	425b      	negs	r3, r3
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	b218      	sxth	r0, r3
 80062f4:	4b2a      	ldr	r3, [pc, #168]	; (80063a0 <one_sectionVD+0x12c>)
 80062f6:	881b      	ldrh	r3, [r3, #0]
 80062f8:	b21b      	sxth	r3, r3
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006300:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006304:	f7fe fef2 	bl	80050ec <driveD>
}
 8006308:	e043      	b.n	8006392 <one_sectionVD+0x11e>
	}else if(run_mode == 4){
 800630a:	4b23      	ldr	r3, [pc, #140]	; (8006398 <one_sectionVD+0x124>)
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	b2db      	uxtb	r3, r3
 8006310:	2b04      	cmp	r3, #4
 8006312:	d111      	bne.n	8006338 <one_sectionVD+0xc4>
		driveD(-accel_hs, SPEED_4, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 8006314:	4b21      	ldr	r3, [pc, #132]	; (800639c <one_sectionVD+0x128>)
 8006316:	881b      	ldrh	r3, [r3, #0]
 8006318:	b21b      	sxth	r3, r3
 800631a:	b29b      	uxth	r3, r3
 800631c:	425b      	negs	r3, r3
 800631e:	b29b      	uxth	r3, r3
 8006320:	b218      	sxth	r0, r3
 8006322:	4b1f      	ldr	r3, [pc, #124]	; (80063a0 <one_sectionVD+0x12c>)
 8006324:	881b      	ldrh	r3, [r3, #0]
 8006326:	b21b      	sxth	r3, r3
 8006328:	b29a      	uxth	r2, r3
 800632a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800632e:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8006332:	f7fe fedb 	bl	80050ec <driveD>
}
 8006336:	e02c      	b.n	8006392 <one_sectionVD+0x11e>
	}else if(run_mode == 5){
 8006338:	4b17      	ldr	r3, [pc, #92]	; (8006398 <one_sectionVD+0x124>)
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b05      	cmp	r3, #5
 8006340:	d111      	bne.n	8006366 <one_sectionVD+0xf2>
		driveD(-accel_hs, SPEED_5, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 8006342:	4b16      	ldr	r3, [pc, #88]	; (800639c <one_sectionVD+0x128>)
 8006344:	881b      	ldrh	r3, [r3, #0]
 8006346:	b21b      	sxth	r3, r3
 8006348:	b29b      	uxth	r3, r3
 800634a:	425b      	negs	r3, r3
 800634c:	b29b      	uxth	r3, r3
 800634e:	b218      	sxth	r0, r3
 8006350:	4b13      	ldr	r3, [pc, #76]	; (80063a0 <one_sectionVD+0x12c>)
 8006352:	881b      	ldrh	r3, [r3, #0]
 8006354:	b21b      	sxth	r3, r3
 8006356:	b29a      	uxth	r2, r3
 8006358:	f44f 7382 	mov.w	r3, #260	; 0x104
 800635c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006360:	f7fe fec4 	bl	80050ec <driveD>
}
 8006364:	e015      	b.n	8006392 <one_sectionVD+0x11e>
	}else if(run_mode == 6){
 8006366:	4b0c      	ldr	r3, [pc, #48]	; (8006398 <one_sectionVD+0x124>)
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b06      	cmp	r3, #6
 800636e:	d110      	bne.n	8006392 <one_sectionVD+0x11e>
		driveD(-accel_hs, SPEED_6, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 8006370:	4b0a      	ldr	r3, [pc, #40]	; (800639c <one_sectionVD+0x128>)
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	b21b      	sxth	r3, r3
 8006376:	b29b      	uxth	r3, r3
 8006378:	425b      	negs	r3, r3
 800637a:	b29b      	uxth	r3, r3
 800637c:	b218      	sxth	r0, r3
 800637e:	4b08      	ldr	r3, [pc, #32]	; (80063a0 <one_sectionVD+0x12c>)
 8006380:	881b      	ldrh	r3, [r3, #0]
 8006382:	b21b      	sxth	r3, r3
 8006384:	b29a      	uxth	r2, r3
 8006386:	f44f 7382 	mov.w	r3, #260	; 0x104
 800638a:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800638e:	f7fe fead 	bl	80050ec <driveD>
}
 8006392:	bf00      	nop
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	20000456 	.word	0x20000456
 800639c:	20000454 	.word	0x20000454
 80063a0:	20000ffc 	.word	0x20000ffc

080063a4 <one_sectionU>:
//one_sectionU
// 等速で1区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionU(void){
 80063a4:	b580      	push	{r7, lr}
 80063a6:	af00      	add	r7, sp, #0
	full_led_write1(WHITE);
 80063a8:	2007      	movs	r0, #7
 80063aa:	f00b ff85 	bl	80122b8 <full_led_write1>
	control_start();
 80063ae:	f7fe fce1 	bl	8004d74 <control_start>
	driveU(SEC_HALF*2);													//1区画分等速走行。走行後は停止しない
 80063b2:	20b4      	movs	r0, #180	; 0xb4
 80063b4:	f7fe ff74 	bl	80052a0 <driveU>
	if(!MF.FLAG.SCND)get_wall_info();									//a壁情報を取得
 80063b8:	4b05      	ldr	r3, [pc, #20]	; (80063d0 <one_sectionU+0x2c>)
 80063ba:	881b      	ldrh	r3, [r3, #0]
 80063bc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <one_sectionU+0x26>
 80063c6:	f00b ff03 	bl	80121d0 <get_wall_info>
}
 80063ca:	bf00      	nop
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	20000fa8 	.word	0x20000fa8
 80063d4:	00000000 	.word	0x00000000

080063d8 <rotate_R90>:
//rotate_R90
// 右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_R90(void){
 80063d8:	b598      	push	{r3, r4, r7, lr}
 80063da:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 80063dc:	4b56      	ldr	r3, [pc, #344]	; (8006538 <rotate_R90+0x160>)
 80063de:	4a57      	ldr	r2, [pc, #348]	; (800653c <rotate_R90+0x164>)
 80063e0:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 80063e2:	4b57      	ldr	r3, [pc, #348]	; (8006540 <rotate_R90+0x168>)
 80063e4:	4a57      	ldr	r2, [pc, #348]	; (8006544 <rotate_R90+0x16c>)
 80063e6:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 80063e8:	4b57      	ldr	r3, [pc, #348]	; (8006548 <rotate_R90+0x170>)
 80063ea:	4a58      	ldr	r2, [pc, #352]	; (800654c <rotate_R90+0x174>)
 80063ec:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 80063ee:	4b52      	ldr	r3, [pc, #328]	; (8006538 <rotate_R90+0x160>)
 80063f0:	edd3 7a00 	vldr	s15, [r3]
 80063f4:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8006550 <rotate_R90+0x178>
 80063f8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80063fc:	ee16 0a90 	vmov	r0, s13
 8006400:	f7fa f89a 	bl	8000538 <__aeabi_f2d>
 8006404:	a34a      	add	r3, pc, #296	; (adr r3, 8006530 <rotate_R90+0x158>)
 8006406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640a:	f7fa f8ed 	bl	80005e8 <__aeabi_dmul>
 800640e:	4603      	mov	r3, r0
 8006410:	460c      	mov	r4, r1
 8006412:	4618      	mov	r0, r3
 8006414:	4621      	mov	r1, r4
 8006416:	f04f 0200 	mov.w	r2, #0
 800641a:	4b4e      	ldr	r3, [pc, #312]	; (8006554 <rotate_R90+0x17c>)
 800641c:	f7fa f8e4 	bl	80005e8 <__aeabi_dmul>
 8006420:	4603      	mov	r3, r0
 8006422:	460c      	mov	r4, r1
 8006424:	4618      	mov	r0, r3
 8006426:	4621      	mov	r1, r4
 8006428:	f04f 0200 	mov.w	r2, #0
 800642c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006430:	f7fa fa04 	bl	800083c <__aeabi_ddiv>
 8006434:	4603      	mov	r3, r0
 8006436:	460c      	mov	r4, r1
 8006438:	4618      	mov	r0, r3
 800643a:	4621      	mov	r1, r4
 800643c:	f7fa fbac 	bl	8000b98 <__aeabi_d2f>
 8006440:	4602      	mov	r2, r0
 8006442:	4b45      	ldr	r3, [pc, #276]	; (8006558 <rotate_R90+0x180>)
 8006444:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 8006446:	4b3c      	ldr	r3, [pc, #240]	; (8006538 <rotate_R90+0x160>)
 8006448:	edd3 7a00 	vldr	s15, [r3]
 800644c:	eef1 7a67 	vneg.f32	s15, s15
 8006450:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8006550 <rotate_R90+0x178>
 8006454:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006458:	ee16 0a90 	vmov	r0, s13
 800645c:	f7fa f86c 	bl	8000538 <__aeabi_f2d>
 8006460:	a333      	add	r3, pc, #204	; (adr r3, 8006530 <rotate_R90+0x158>)
 8006462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006466:	f7fa f8bf 	bl	80005e8 <__aeabi_dmul>
 800646a:	4603      	mov	r3, r0
 800646c:	460c      	mov	r4, r1
 800646e:	4618      	mov	r0, r3
 8006470:	4621      	mov	r1, r4
 8006472:	f04f 0200 	mov.w	r2, #0
 8006476:	4b37      	ldr	r3, [pc, #220]	; (8006554 <rotate_R90+0x17c>)
 8006478:	f7fa f8b6 	bl	80005e8 <__aeabi_dmul>
 800647c:	4603      	mov	r3, r0
 800647e:	460c      	mov	r4, r1
 8006480:	4618      	mov	r0, r3
 8006482:	4621      	mov	r1, r4
 8006484:	f04f 0200 	mov.w	r2, #0
 8006488:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800648c:	f7fa f9d6 	bl	800083c <__aeabi_ddiv>
 8006490:	4603      	mov	r3, r0
 8006492:	460c      	mov	r4, r1
 8006494:	4618      	mov	r0, r3
 8006496:	4621      	mov	r1, r4
 8006498:	f7fa fb7e 	bl	8000b98 <__aeabi_d2f>
 800649c:	4602      	mov	r2, r0
 800649e:	4b2f      	ldr	r3, [pc, #188]	; (800655c <rotate_R90+0x184>)
 80064a0:	601a      	str	r2, [r3, #0]

	drive_start();														//a走行開始
 80064a2:	f7fe fc0f 	bl	8004cc4 <drive_start>
	control_stop();
 80064a6:	f7fe fc8d 	bl	8004dc4 <control_stop>
	while(degree_z > target_degree_z-80);
 80064aa:	bf00      	nop
 80064ac:	4b2c      	ldr	r3, [pc, #176]	; (8006560 <rotate_R90+0x188>)
 80064ae:	edd3 7a00 	vldr	s15, [r3]
 80064b2:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8006564 <rotate_R90+0x18c>
 80064b6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80064ba:	4b2b      	ldr	r3, [pc, #172]	; (8006568 <rotate_R90+0x190>)
 80064bc:	edd3 7a00 	vldr	s15, [r3]
 80064c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80064c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064c8:	d4f0      	bmi.n	80064ac <rotate_R90+0xd4>

	accel_l = -10000;
 80064ca:	4b1d      	ldr	r3, [pc, #116]	; (8006540 <rotate_R90+0x168>)
 80064cc:	4a27      	ldr	r2, [pc, #156]	; (800656c <rotate_R90+0x194>)
 80064ce:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80064d0:	4b1d      	ldr	r3, [pc, #116]	; (8006548 <rotate_R90+0x170>)
 80064d2:	4a27      	ldr	r2, [pc, #156]	; (8006570 <rotate_R90+0x198>)
 80064d4:	601a      	str	r2, [r3, #0]
	speed_min_l = 100;
 80064d6:	4b27      	ldr	r3, [pc, #156]	; (8006574 <rotate_R90+0x19c>)
 80064d8:	4a27      	ldr	r2, [pc, #156]	; (8006578 <rotate_R90+0x1a0>)
 80064da:	601a      	str	r2, [r3, #0]
	speed_max_r = -100;
 80064dc:	4b27      	ldr	r3, [pc, #156]	; (800657c <rotate_R90+0x1a4>)
 80064de:	4a28      	ldr	r2, [pc, #160]	; (8006580 <rotate_R90+0x1a8>)
 80064e0:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-90);
 80064e2:	bf00      	nop
 80064e4:	4b1e      	ldr	r3, [pc, #120]	; (8006560 <rotate_R90+0x188>)
 80064e6:	edd3 7a00 	vldr	s15, [r3]
 80064ea:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8006584 <rotate_R90+0x1ac>
 80064ee:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80064f2:	4b1d      	ldr	r3, [pc, #116]	; (8006568 <rotate_R90+0x190>)
 80064f4:	edd3 7a00 	vldr	s15, [r3]
 80064f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80064fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006500:	d4f0      	bmi.n	80064e4 <rotate_R90+0x10c>

	if(!MF.FLAG.XDIR){
 8006502:	4b21      	ldr	r3, [pc, #132]	; (8006588 <rotate_R90+0x1b0>)
 8006504:	881b      	ldrh	r3, [r3, #0]
 8006506:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800650a:	b2db      	uxtb	r3, r3
 800650c:	2b00      	cmp	r3, #0
 800650e:	d104      	bne.n	800651a <rotate_R90+0x142>
		turn_dir(DIR_TURN_R90, 1);										//aマイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006510:	2101      	movs	r1, #1
 8006512:	2001      	movs	r0, #1
 8006514:	f00a f83c 	bl	8010590 <turn_dir>
 8006518:	e003      	b.n	8006522 <rotate_R90+0x14a>
	}else{
		turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理&目標角度左90度
 800651a:	2103      	movs	r1, #3
 800651c:	2002      	movs	r0, #2
 800651e:	f00a f837 	bl	8010590 <turn_dir>
	}
	drive_stop();
 8006522:	f7fe fbff 	bl	8004d24 <drive_stop>
}
 8006526:	bf00      	nop
 8006528:	bd98      	pop	{r3, r4, r7, pc}
 800652a:	bf00      	nop
 800652c:	f3af 8000 	nop.w
 8006530:	54442d18 	.word	0x54442d18
 8006534:	400921fb 	.word	0x400921fb
 8006538:	200001a8 	.word	0x200001a8
 800653c:	44480000 	.word	0x44480000
 8006540:	20000d98 	.word	0x20000d98
 8006544:	453b8000 	.word	0x453b8000
 8006548:	20000b24 	.word	0x20000b24
 800654c:	c53b8000 	.word	0xc53b8000
 8006550:	43340000 	.word	0x43340000
 8006554:	40508000 	.word	0x40508000
 8006558:	2000077c 	.word	0x2000077c
 800655c:	20000fec 	.word	0x20000fec
 8006560:	20000c78 	.word	0x20000c78
 8006564:	42a00000 	.word	0x42a00000
 8006568:	20000b9c 	.word	0x20000b9c
 800656c:	c61c4000 	.word	0xc61c4000
 8006570:	461c4000 	.word	0x461c4000
 8006574:	20000b94 	.word	0x20000b94
 8006578:	42c80000 	.word	0x42c80000
 800657c:	200001a4 	.word	0x200001a4
 8006580:	c2c80000 	.word	0xc2c80000
 8006584:	42b40000 	.word	0x42b40000
 8006588:	20000fa8 	.word	0x20000fa8
 800658c:	00000000 	.word	0x00000000

08006590 <rotate_L90>:
//rotate_L90
// 左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_L90(void){
 8006590:	b598      	push	{r3, r4, r7, lr}
 8006592:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 8006594:	4b56      	ldr	r3, [pc, #344]	; (80066f0 <rotate_L90+0x160>)
 8006596:	4a57      	ldr	r2, [pc, #348]	; (80066f4 <rotate_L90+0x164>)
 8006598:	601a      	str	r2, [r3, #0]
	accel_l = -3000;
 800659a:	4b57      	ldr	r3, [pc, #348]	; (80066f8 <rotate_L90+0x168>)
 800659c:	4a57      	ldr	r2, [pc, #348]	; (80066fc <rotate_L90+0x16c>)
 800659e:	601a      	str	r2, [r3, #0]
	accel_r = 3000;
 80065a0:	4b57      	ldr	r3, [pc, #348]	; (8006700 <rotate_L90+0x170>)
 80065a2:	4a58      	ldr	r2, [pc, #352]	; (8006704 <rotate_L90+0x174>)
 80065a4:	601a      	str	r2, [r3, #0]
	speed_min_l = -1*target_omega_z/180*M_PI * TREAD/2;
 80065a6:	4b52      	ldr	r3, [pc, #328]	; (80066f0 <rotate_L90+0x160>)
 80065a8:	edd3 7a00 	vldr	s15, [r3]
 80065ac:	eef1 7a67 	vneg.f32	s15, s15
 80065b0:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8006708 <rotate_L90+0x178>
 80065b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80065b8:	ee16 0a90 	vmov	r0, s13
 80065bc:	f7f9 ffbc 	bl	8000538 <__aeabi_f2d>
 80065c0:	a349      	add	r3, pc, #292	; (adr r3, 80066e8 <rotate_L90+0x158>)
 80065c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c6:	f7fa f80f 	bl	80005e8 <__aeabi_dmul>
 80065ca:	4603      	mov	r3, r0
 80065cc:	460c      	mov	r4, r1
 80065ce:	4618      	mov	r0, r3
 80065d0:	4621      	mov	r1, r4
 80065d2:	f04f 0200 	mov.w	r2, #0
 80065d6:	4b4d      	ldr	r3, [pc, #308]	; (800670c <rotate_L90+0x17c>)
 80065d8:	f7fa f806 	bl	80005e8 <__aeabi_dmul>
 80065dc:	4603      	mov	r3, r0
 80065de:	460c      	mov	r4, r1
 80065e0:	4618      	mov	r0, r3
 80065e2:	4621      	mov	r1, r4
 80065e4:	f04f 0200 	mov.w	r2, #0
 80065e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80065ec:	f7fa f926 	bl	800083c <__aeabi_ddiv>
 80065f0:	4603      	mov	r3, r0
 80065f2:	460c      	mov	r4, r1
 80065f4:	4618      	mov	r0, r3
 80065f6:	4621      	mov	r1, r4
 80065f8:	f7fa face 	bl	8000b98 <__aeabi_d2f>
 80065fc:	4602      	mov	r2, r0
 80065fe:	4b44      	ldr	r3, [pc, #272]	; (8006710 <rotate_L90+0x180>)
 8006600:	601a      	str	r2, [r3, #0]
	speed_max_r = target_omega_z/180*M_PI * TREAD/2;
 8006602:	4b3b      	ldr	r3, [pc, #236]	; (80066f0 <rotate_L90+0x160>)
 8006604:	edd3 7a00 	vldr	s15, [r3]
 8006608:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8006708 <rotate_L90+0x178>
 800660c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006610:	ee16 0a90 	vmov	r0, s13
 8006614:	f7f9 ff90 	bl	8000538 <__aeabi_f2d>
 8006618:	a333      	add	r3, pc, #204	; (adr r3, 80066e8 <rotate_L90+0x158>)
 800661a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661e:	f7f9 ffe3 	bl	80005e8 <__aeabi_dmul>
 8006622:	4603      	mov	r3, r0
 8006624:	460c      	mov	r4, r1
 8006626:	4618      	mov	r0, r3
 8006628:	4621      	mov	r1, r4
 800662a:	f04f 0200 	mov.w	r2, #0
 800662e:	4b37      	ldr	r3, [pc, #220]	; (800670c <rotate_L90+0x17c>)
 8006630:	f7f9 ffda 	bl	80005e8 <__aeabi_dmul>
 8006634:	4603      	mov	r3, r0
 8006636:	460c      	mov	r4, r1
 8006638:	4618      	mov	r0, r3
 800663a:	4621      	mov	r1, r4
 800663c:	f04f 0200 	mov.w	r2, #0
 8006640:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006644:	f7fa f8fa 	bl	800083c <__aeabi_ddiv>
 8006648:	4603      	mov	r3, r0
 800664a:	460c      	mov	r4, r1
 800664c:	4618      	mov	r0, r3
 800664e:	4621      	mov	r1, r4
 8006650:	f7fa faa2 	bl	8000b98 <__aeabi_d2f>
 8006654:	4602      	mov	r2, r0
 8006656:	4b2f      	ldr	r3, [pc, #188]	; (8006714 <rotate_L90+0x184>)
 8006658:	601a      	str	r2, [r3, #0]

	drive_start();														//a走行開始
 800665a:	f7fe fb33 	bl	8004cc4 <drive_start>
	control_stop();
 800665e:	f7fe fbb1 	bl	8004dc4 <control_stop>
	while(degree_z < target_degree_z+80);
 8006662:	bf00      	nop
 8006664:	4b2c      	ldr	r3, [pc, #176]	; (8006718 <rotate_L90+0x188>)
 8006666:	edd3 7a00 	vldr	s15, [r3]
 800666a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800671c <rotate_L90+0x18c>
 800666e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006672:	4b2b      	ldr	r3, [pc, #172]	; (8006720 <rotate_L90+0x190>)
 8006674:	edd3 7a00 	vldr	s15, [r3]
 8006678:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800667c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006680:	dcf0      	bgt.n	8006664 <rotate_L90+0xd4>

	accel_l = 10000;
 8006682:	4b1d      	ldr	r3, [pc, #116]	; (80066f8 <rotate_L90+0x168>)
 8006684:	4a27      	ldr	r2, [pc, #156]	; (8006724 <rotate_L90+0x194>)
 8006686:	601a      	str	r2, [r3, #0]
	accel_r = -10000;
 8006688:	4b1d      	ldr	r3, [pc, #116]	; (8006700 <rotate_L90+0x170>)
 800668a:	4a27      	ldr	r2, [pc, #156]	; (8006728 <rotate_L90+0x198>)
 800668c:	601a      	str	r2, [r3, #0]
	speed_max_l = -100;
 800668e:	4b27      	ldr	r3, [pc, #156]	; (800672c <rotate_L90+0x19c>)
 8006690:	4a27      	ldr	r2, [pc, #156]	; (8006730 <rotate_L90+0x1a0>)
 8006692:	601a      	str	r2, [r3, #0]
	speed_min_r = 100;
 8006694:	4b27      	ldr	r3, [pc, #156]	; (8006734 <rotate_L90+0x1a4>)
 8006696:	4a28      	ldr	r2, [pc, #160]	; (8006738 <rotate_L90+0x1a8>)
 8006698:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+90);
 800669a:	bf00      	nop
 800669c:	4b1e      	ldr	r3, [pc, #120]	; (8006718 <rotate_L90+0x188>)
 800669e:	edd3 7a00 	vldr	s15, [r3]
 80066a2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800673c <rotate_L90+0x1ac>
 80066a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066aa:	4b1d      	ldr	r3, [pc, #116]	; (8006720 <rotate_L90+0x190>)
 80066ac:	edd3 7a00 	vldr	s15, [r3]
 80066b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80066b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066b8:	dcf0      	bgt.n	800669c <rotate_L90+0x10c>

	if(!MF.FLAG.XDIR){
 80066ba:	4b21      	ldr	r3, [pc, #132]	; (8006740 <rotate_L90+0x1b0>)
 80066bc:	881b      	ldrh	r3, [r3, #0]
 80066be:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d104      	bne.n	80066d2 <rotate_L90+0x142>
		turn_dir(DIR_TURN_L90, 1);										//aマイクロマウス内部位置情報でも右回転処理&目標角度右90度
 80066c8:	2101      	movs	r1, #1
 80066ca:	20ff      	movs	r0, #255	; 0xff
 80066cc:	f009 ff60 	bl	8010590 <turn_dir>
 80066d0:	e003      	b.n	80066da <rotate_L90+0x14a>
	}else{
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも右回転処理&目標角度右90度
 80066d2:	2103      	movs	r1, #3
 80066d4:	20fe      	movs	r0, #254	; 0xfe
 80066d6:	f009 ff5b 	bl	8010590 <turn_dir>
	}
	drive_stop();
 80066da:	f7fe fb23 	bl	8004d24 <drive_stop>
}
 80066de:	bf00      	nop
 80066e0:	bd98      	pop	{r3, r4, r7, pc}
 80066e2:	bf00      	nop
 80066e4:	f3af 8000 	nop.w
 80066e8:	54442d18 	.word	0x54442d18
 80066ec:	400921fb 	.word	0x400921fb
 80066f0:	200001a8 	.word	0x200001a8
 80066f4:	44480000 	.word	0x44480000
 80066f8:	20000d98 	.word	0x20000d98
 80066fc:	c53b8000 	.word	0xc53b8000
 8006700:	20000b24 	.word	0x20000b24
 8006704:	453b8000 	.word	0x453b8000
 8006708:	43340000 	.word	0x43340000
 800670c:	40508000 	.word	0x40508000
 8006710:	20000b94 	.word	0x20000b94
 8006714:	200001a4 	.word	0x200001a4
 8006718:	20000c78 	.word	0x20000c78
 800671c:	42a00000 	.word	0x42a00000
 8006720:	20000b9c 	.word	0x20000b9c
 8006724:	461c4000 	.word	0x461c4000
 8006728:	c61c4000 	.word	0xc61c4000
 800672c:	2000077c 	.word	0x2000077c
 8006730:	c2c80000 	.word	0xc2c80000
 8006734:	20000fec 	.word	0x20000fec
 8006738:	42c80000 	.word	0x42c80000
 800673c:	42b40000 	.word	0x42b40000
 8006740:	20000fa8 	.word	0x20000fa8
 8006744:	00000000 	.word	0x00000000

08006748 <rotate_180>:
//rotate_180
// 180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_180(void){
 8006748:	b598      	push	{r3, r4, r7, lr}
 800674a:	af00      	add	r7, sp, #0

	full_led_write1(GREEN);
 800674c:	2002      	movs	r0, #2
 800674e:	f00b fdb3 	bl	80122b8 <full_led_write1>
	target_omega_z = 800;
 8006752:	4b55      	ldr	r3, [pc, #340]	; (80068a8 <rotate_180+0x160>)
 8006754:	4a55      	ldr	r2, [pc, #340]	; (80068ac <rotate_180+0x164>)
 8006756:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 8006758:	4b55      	ldr	r3, [pc, #340]	; (80068b0 <rotate_180+0x168>)
 800675a:	4a56      	ldr	r2, [pc, #344]	; (80068b4 <rotate_180+0x16c>)
 800675c:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 800675e:	4b56      	ldr	r3, [pc, #344]	; (80068b8 <rotate_180+0x170>)
 8006760:	4a56      	ldr	r2, [pc, #344]	; (80068bc <rotate_180+0x174>)
 8006762:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 8006764:	4b50      	ldr	r3, [pc, #320]	; (80068a8 <rotate_180+0x160>)
 8006766:	edd3 7a00 	vldr	s15, [r3]
 800676a:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80068c0 <rotate_180+0x178>
 800676e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006772:	ee16 0a90 	vmov	r0, s13
 8006776:	f7f9 fedf 	bl	8000538 <__aeabi_f2d>
 800677a:	a349      	add	r3, pc, #292	; (adr r3, 80068a0 <rotate_180+0x158>)
 800677c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006780:	f7f9 ff32 	bl	80005e8 <__aeabi_dmul>
 8006784:	4603      	mov	r3, r0
 8006786:	460c      	mov	r4, r1
 8006788:	4618      	mov	r0, r3
 800678a:	4621      	mov	r1, r4
 800678c:	f04f 0200 	mov.w	r2, #0
 8006790:	4b4c      	ldr	r3, [pc, #304]	; (80068c4 <rotate_180+0x17c>)
 8006792:	f7f9 ff29 	bl	80005e8 <__aeabi_dmul>
 8006796:	4603      	mov	r3, r0
 8006798:	460c      	mov	r4, r1
 800679a:	4618      	mov	r0, r3
 800679c:	4621      	mov	r1, r4
 800679e:	f04f 0200 	mov.w	r2, #0
 80067a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80067a6:	f7fa f849 	bl	800083c <__aeabi_ddiv>
 80067aa:	4603      	mov	r3, r0
 80067ac:	460c      	mov	r4, r1
 80067ae:	4618      	mov	r0, r3
 80067b0:	4621      	mov	r1, r4
 80067b2:	f7fa f9f1 	bl	8000b98 <__aeabi_d2f>
 80067b6:	4602      	mov	r2, r0
 80067b8:	4b43      	ldr	r3, [pc, #268]	; (80068c8 <rotate_180+0x180>)
 80067ba:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 80067bc:	4b3a      	ldr	r3, [pc, #232]	; (80068a8 <rotate_180+0x160>)
 80067be:	edd3 7a00 	vldr	s15, [r3]
 80067c2:	eef1 7a67 	vneg.f32	s15, s15
 80067c6:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80068c0 <rotate_180+0x178>
 80067ca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80067ce:	ee16 0a90 	vmov	r0, s13
 80067d2:	f7f9 feb1 	bl	8000538 <__aeabi_f2d>
 80067d6:	a332      	add	r3, pc, #200	; (adr r3, 80068a0 <rotate_180+0x158>)
 80067d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067dc:	f7f9 ff04 	bl	80005e8 <__aeabi_dmul>
 80067e0:	4603      	mov	r3, r0
 80067e2:	460c      	mov	r4, r1
 80067e4:	4618      	mov	r0, r3
 80067e6:	4621      	mov	r1, r4
 80067e8:	f04f 0200 	mov.w	r2, #0
 80067ec:	4b35      	ldr	r3, [pc, #212]	; (80068c4 <rotate_180+0x17c>)
 80067ee:	f7f9 fefb 	bl	80005e8 <__aeabi_dmul>
 80067f2:	4603      	mov	r3, r0
 80067f4:	460c      	mov	r4, r1
 80067f6:	4618      	mov	r0, r3
 80067f8:	4621      	mov	r1, r4
 80067fa:	f04f 0200 	mov.w	r2, #0
 80067fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006802:	f7fa f81b 	bl	800083c <__aeabi_ddiv>
 8006806:	4603      	mov	r3, r0
 8006808:	460c      	mov	r4, r1
 800680a:	4618      	mov	r0, r3
 800680c:	4621      	mov	r1, r4
 800680e:	f7fa f9c3 	bl	8000b98 <__aeabi_d2f>
 8006812:	4602      	mov	r2, r0
 8006814:	4b2d      	ldr	r3, [pc, #180]	; (80068cc <rotate_180+0x184>)
 8006816:	601a      	str	r2, [r3, #0]

	drive_start();														//a走行開始
 8006818:	f7fe fa54 	bl	8004cc4 <drive_start>
	control_stop();
 800681c:	f7fe fad2 	bl	8004dc4 <control_stop>
	while(degree_z > target_degree_z-160);
 8006820:	bf00      	nop
 8006822:	4b2b      	ldr	r3, [pc, #172]	; (80068d0 <rotate_180+0x188>)
 8006824:	edd3 7a00 	vldr	s15, [r3]
 8006828:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80068d4 <rotate_180+0x18c>
 800682c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006830:	4b29      	ldr	r3, [pc, #164]	; (80068d8 <rotate_180+0x190>)
 8006832:	edd3 7a00 	vldr	s15, [r3]
 8006836:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800683a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800683e:	d4f0      	bmi.n	8006822 <rotate_180+0xda>

	accel_l = -10000;
 8006840:	4b1b      	ldr	r3, [pc, #108]	; (80068b0 <rotate_180+0x168>)
 8006842:	4a26      	ldr	r2, [pc, #152]	; (80068dc <rotate_180+0x194>)
 8006844:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8006846:	4b1c      	ldr	r3, [pc, #112]	; (80068b8 <rotate_180+0x170>)
 8006848:	4a25      	ldr	r2, [pc, #148]	; (80068e0 <rotate_180+0x198>)
 800684a:	601a      	str	r2, [r3, #0]
	speed_min_l = 100;
 800684c:	4b25      	ldr	r3, [pc, #148]	; (80068e4 <rotate_180+0x19c>)
 800684e:	4a26      	ldr	r2, [pc, #152]	; (80068e8 <rotate_180+0x1a0>)
 8006850:	601a      	str	r2, [r3, #0]
	speed_max_r = -100;
 8006852:	4b26      	ldr	r3, [pc, #152]	; (80068ec <rotate_180+0x1a4>)
 8006854:	4a26      	ldr	r2, [pc, #152]	; (80068f0 <rotate_180+0x1a8>)
 8006856:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-180);
 8006858:	bf00      	nop
 800685a:	4b1d      	ldr	r3, [pc, #116]	; (80068d0 <rotate_180+0x188>)
 800685c:	edd3 7a00 	vldr	s15, [r3]
 8006860:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80068c0 <rotate_180+0x178>
 8006864:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006868:	4b1b      	ldr	r3, [pc, #108]	; (80068d8 <rotate_180+0x190>)
 800686a:	edd3 7a00 	vldr	s15, [r3]
 800686e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006876:	d4f0      	bmi.n	800685a <rotate_180+0x112>

	if(!MF.FLAG.XDIR){
 8006878:	4b1e      	ldr	r3, [pc, #120]	; (80068f4 <rotate_180+0x1ac>)
 800687a:	881b      	ldrh	r3, [r3, #0]
 800687c:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b00      	cmp	r3, #0
 8006884:	d104      	bne.n	8006890 <rotate_180+0x148>
		turn_dir(DIR_TURN_180, 1);										//aマイクロマウス内部位置情報でも180度回転処理&目標角度左180度
 8006886:	2101      	movs	r1, #1
 8006888:	2002      	movs	r0, #2
 800688a:	f009 fe81 	bl	8010590 <turn_dir>
 800688e:	e003      	b.n	8006898 <rotate_180+0x150>
	}else{
		turn_dir(DIR_TURN_R180_8, 3);									//aマイクロマウス内部位置情報でも180度回転処理&目標角度左180度
 8006890:	2103      	movs	r1, #3
 8006892:	2004      	movs	r0, #4
 8006894:	f009 fe7c 	bl	8010590 <turn_dir>
	}
	drive_stop();
 8006898:	f7fe fa44 	bl	8004d24 <drive_stop>

}
 800689c:	bf00      	nop
 800689e:	bd98      	pop	{r3, r4, r7, pc}
 80068a0:	54442d18 	.word	0x54442d18
 80068a4:	400921fb 	.word	0x400921fb
 80068a8:	200001a8 	.word	0x200001a8
 80068ac:	44480000 	.word	0x44480000
 80068b0:	20000d98 	.word	0x20000d98
 80068b4:	453b8000 	.word	0x453b8000
 80068b8:	20000b24 	.word	0x20000b24
 80068bc:	c53b8000 	.word	0xc53b8000
 80068c0:	43340000 	.word	0x43340000
 80068c4:	40508000 	.word	0x40508000
 80068c8:	2000077c 	.word	0x2000077c
 80068cc:	20000fec 	.word	0x20000fec
 80068d0:	20000c78 	.word	0x20000c78
 80068d4:	43200000 	.word	0x43200000
 80068d8:	20000b9c 	.word	0x20000b9c
 80068dc:	c61c4000 	.word	0xc61c4000
 80068e0:	461c4000 	.word	0x461c4000
 80068e4:	20000b94 	.word	0x20000b94
 80068e8:	42c80000 	.word	0x42c80000
 80068ec:	200001a4 	.word	0x200001a4
 80068f0:	c2c80000 	.word	0xc2c80000
 80068f4:	20000fa8 	.word	0x20000fa8

080068f8 <slalom_R90>:
//slalom_R90
// スラロームで左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_R90(void){
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af02      	add	r7, sp, #8
	full_led_write1(PURPLE);
 80068fe:	2005      	movs	r0, #5
 8006900:	f00b fcda 	bl	80122b8 <full_led_write1>
	if(run_mode == 1){
 8006904:	4ba7      	ldr	r3, [pc, #668]	; (8006ba4 <slalom_R90+0x2ac>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	b2db      	uxtb	r3, r3
 800690a:	2b01      	cmp	r3, #1
 800690c:	d127      	bne.n	800695e <slalom_R90+0x66>
		slalomF(10000, SPEED_1, SLALOM_OFFSET_F, SLALOM_WALL_FL, SLALOM_WALL_FR);
 800690e:	23fa      	movs	r3, #250	; 0xfa
 8006910:	9300      	str	r3, [sp, #0]
 8006912:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006916:	2212      	movs	r2, #18
 8006918:	21c8      	movs	r1, #200	; 0xc8
 800691a:	f242 7010 	movw	r0, #10000	; 0x2710
 800691e:	f7fe fdbd 	bl	800549c <slalomF>
		slalomR(-SLALOM_DEGACCEL, -SLALOM_OMEGA, -90, SPEED_1);
 8006922:	23c8      	movs	r3, #200	; 0xc8
 8006924:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8006928:	499f      	ldr	r1, [pc, #636]	; (8006ba8 <slalom_R90+0x2b0>)
 800692a:	48a0      	ldr	r0, [pc, #640]	; (8006bac <slalom_R90+0x2b4>)
 800692c:	f7fe fe6c 	bl	8005608 <slalomR>

		if(!MF.FLAG.XDIR){
 8006930:	4b9f      	ldr	r3, [pc, #636]	; (8006bb0 <slalom_R90+0x2b8>)
 8006932:	881b      	ldrh	r3, [r3, #0]
 8006934:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d104      	bne.n	8006948 <slalom_R90+0x50>
			turn_dir(DIR_TURN_R90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度左90度
 800693e:	2101      	movs	r1, #1
 8006940:	2001      	movs	r0, #1
 8006942:	f009 fe25 	bl	8010590 <turn_dir>
 8006946:	e003      	b.n	8006950 <slalom_R90+0x58>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006948:	2103      	movs	r1, #3
 800694a:	2002      	movs	r0, #2
 800694c:	f009 fe20 	bl	8010590 <turn_dir>
		}
		slalomB(10000, SPEED_1, SLALOM_OFFSET_B);
 8006950:	2219      	movs	r2, #25
 8006952:	21c8      	movs	r1, #200	; 0xc8
 8006954:	f242 7010 	movw	r0, #10000	; 0x2710
 8006958:	f7fe ff78 	bl	800584c <slalomB>
 800695c:	e116      	b.n	8006b8c <slalom_R90+0x294>
	}else if(run_mode == 2){
 800695e:	4b91      	ldr	r3, [pc, #580]	; (8006ba4 <slalom_R90+0x2ac>)
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b02      	cmp	r3, #2
 8006966:	d12a      	bne.n	80069be <slalom_R90+0xc6>
		slalomF(10000, SPEED_2, SLALOM_2_OFFSET_F, SLALOM_2_WALL_FL, SLALOM_2_WALL_FR);
 8006968:	23fa      	movs	r3, #250	; 0xfa
 800696a:	9300      	str	r3, [sp, #0]
 800696c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006970:	2212      	movs	r2, #18
 8006972:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006976:	f242 7010 	movw	r0, #10000	; 0x2710
 800697a:	f7fe fd8f 	bl	800549c <slalomF>
		slalomR(-SLALOM_2_DEGACCEL, -SLALOM_2_OMEGA, -85, SPEED_2);
 800697e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006982:	f06f 0254 	mvn.w	r2, #84	; 0x54
 8006986:	4988      	ldr	r1, [pc, #544]	; (8006ba8 <slalom_R90+0x2b0>)
 8006988:	4888      	ldr	r0, [pc, #544]	; (8006bac <slalom_R90+0x2b4>)
 800698a:	f7fe fe3d 	bl	8005608 <slalomR>

		if(!MF.FLAG.XDIR){
 800698e:	4b88      	ldr	r3, [pc, #544]	; (8006bb0 <slalom_R90+0x2b8>)
 8006990:	881b      	ldrh	r3, [r3, #0]
 8006992:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b00      	cmp	r3, #0
 800699a:	d104      	bne.n	80069a6 <slalom_R90+0xae>
			turn_dir(DIR_TURN_R90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度左90度
 800699c:	2101      	movs	r1, #1
 800699e:	2001      	movs	r0, #1
 80069a0:	f009 fdf6 	bl	8010590 <turn_dir>
 80069a4:	e003      	b.n	80069ae <slalom_R90+0xb6>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80069a6:	2103      	movs	r1, #3
 80069a8:	2002      	movs	r0, #2
 80069aa:	f009 fdf1 	bl	8010590 <turn_dir>
		}
		slalomB(10000, SPEED_2, SLALOM_2_OFFSET_B);
 80069ae:	2219      	movs	r2, #25
 80069b0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80069b4:	f242 7010 	movw	r0, #10000	; 0x2710
 80069b8:	f7fe ff48 	bl	800584c <slalomB>
 80069bc:	e0e6      	b.n	8006b8c <slalom_R90+0x294>
	}else if(run_mode == 3){
 80069be:	4b79      	ldr	r3, [pc, #484]	; (8006ba4 <slalom_R90+0x2ac>)
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b03      	cmp	r3, #3
 80069c6:	d12a      	bne.n	8006a1e <slalom_R90+0x126>
		slalomF(10000, SPEED_3, SLALOM_3_OFFSET_F, SLALOM_3_WALL_FL, SLALOM_3_WALL_FR);
 80069c8:	23f0      	movs	r3, #240	; 0xf0
 80069ca:	9300      	str	r3, [sp, #0]
 80069cc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80069d0:	2219      	movs	r2, #25
 80069d2:	f44f 7116 	mov.w	r1, #600	; 0x258
 80069d6:	f242 7010 	movw	r0, #10000	; 0x2710
 80069da:	f7fe fd5f 	bl	800549c <slalomF>
		slalomR(-SLALOM_3_DEGACCEL, -SLALOM_3_OMEGA, -70, SPEED_3);
 80069de:	f44f 7316 	mov.w	r3, #600	; 0x258
 80069e2:	f06f 0245 	mvn.w	r2, #69	; 0x45
 80069e6:	4973      	ldr	r1, [pc, #460]	; (8006bb4 <slalom_R90+0x2bc>)
 80069e8:	4873      	ldr	r0, [pc, #460]	; (8006bb8 <slalom_R90+0x2c0>)
 80069ea:	f7fe fe0d 	bl	8005608 <slalomR>

		if(!MF.FLAG.XDIR){
 80069ee:	4b70      	ldr	r3, [pc, #448]	; (8006bb0 <slalom_R90+0x2b8>)
 80069f0:	881b      	ldrh	r3, [r3, #0]
 80069f2:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d104      	bne.n	8006a06 <slalom_R90+0x10e>
			turn_dir(DIR_TURN_R90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80069fc:	2101      	movs	r1, #1
 80069fe:	2001      	movs	r0, #1
 8006a00:	f009 fdc6 	bl	8010590 <turn_dir>
 8006a04:	e003      	b.n	8006a0e <slalom_R90+0x116>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006a06:	2103      	movs	r1, #3
 8006a08:	2002      	movs	r0, #2
 8006a0a:	f009 fdc1 	bl	8010590 <turn_dir>
		}
		slalomB(10000, SPEED_3, SLALOM_3_OFFSET_B);
 8006a0e:	223c      	movs	r2, #60	; 0x3c
 8006a10:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006a14:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a18:	f7fe ff18 	bl	800584c <slalomB>
 8006a1c:	e0b6      	b.n	8006b8c <slalom_R90+0x294>
	}else if(run_mode == 4){
 8006a1e:	4b61      	ldr	r3, [pc, #388]	; (8006ba4 <slalom_R90+0x2ac>)
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	2b04      	cmp	r3, #4
 8006a26:	d12a      	bne.n	8006a7e <slalom_R90+0x186>
		slalomF(10000, SPEED_4, SLALOM_4_OFFSET_F, SLALOM_4_WALL_FL, SLALOM_4_WALL_FR);
 8006a28:	23be      	movs	r3, #190	; 0xbe
 8006a2a:	9300      	str	r3, [sp, #0]
 8006a2c:	f44f 73be 	mov.w	r3, #380	; 0x17c
 8006a30:	2219      	movs	r2, #25
 8006a32:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8006a36:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a3a:	f7fe fd2f 	bl	800549c <slalomF>
		slalomR(-SLALOM_4_DEGACCEL, -SLALOM_4_OMEGA, -50, SPEED_4);
 8006a3e:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8006a42:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8006a46:	495d      	ldr	r1, [pc, #372]	; (8006bbc <slalom_R90+0x2c4>)
 8006a48:	485d      	ldr	r0, [pc, #372]	; (8006bc0 <slalom_R90+0x2c8>)
 8006a4a:	f7fe fddd 	bl	8005608 <slalomR>

		if(!MF.FLAG.XDIR){
 8006a4e:	4b58      	ldr	r3, [pc, #352]	; (8006bb0 <slalom_R90+0x2b8>)
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d104      	bne.n	8006a66 <slalom_R90+0x16e>
			turn_dir(DIR_TURN_R90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006a5c:	2101      	movs	r1, #1
 8006a5e:	2001      	movs	r0, #1
 8006a60:	f009 fd96 	bl	8010590 <turn_dir>
 8006a64:	e003      	b.n	8006a6e <slalom_R90+0x176>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006a66:	2103      	movs	r1, #3
 8006a68:	2002      	movs	r0, #2
 8006a6a:	f009 fd91 	bl	8010590 <turn_dir>
		}
		slalomB(10000, SPEED_4, SLALOM_4_OFFSET_B);
 8006a6e:	225a      	movs	r2, #90	; 0x5a
 8006a70:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8006a74:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a78:	f7fe fee8 	bl	800584c <slalomB>
 8006a7c:	e086      	b.n	8006b8c <slalom_R90+0x294>
	}else if(run_mode == 5){
 8006a7e:	4b49      	ldr	r3, [pc, #292]	; (8006ba4 <slalom_R90+0x2ac>)
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	2b05      	cmp	r3, #5
 8006a86:	d13e      	bne.n	8006b06 <slalom_R90+0x20e>
		MF2.FLAG.TEMP = 1;
 8006a88:	4a4e      	ldr	r2, [pc, #312]	; (8006bc4 <slalom_R90+0x2cc>)
 8006a8a:	8813      	ldrh	r3, [r2, #0]
 8006a8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a90:	8013      	strh	r3, [r2, #0]
		slalomF(10000, SPEED_5, SLALOM_5_OFFSET_F, SLALOM_5_WALL_FL, SLALOM_5_WALL_FR);
 8006a92:	23a0      	movs	r3, #160	; 0xa0
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006a9a:	220a      	movs	r2, #10
 8006a9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006aa0:	f242 7010 	movw	r0, #10000	; 0x2710
 8006aa4:	f7fe fcfa 	bl	800549c <slalomF>
		MF2.FLAG.TEMP = 0;
 8006aa8:	4a46      	ldr	r2, [pc, #280]	; (8006bc4 <slalom_R90+0x2cc>)
 8006aaa:	8813      	ldrh	r3, [r2, #0]
 8006aac:	f36f 2349 	bfc	r3, #9, #1
 8006ab0:	8013      	strh	r3, [r2, #0]
		slalomR(-SLALOM_5_DEGACCEL, -SLALOM_5_OMEGA, -20, SPEED_5);
 8006ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ab6:	f06f 0213 	mvn.w	r2, #19
 8006aba:	4940      	ldr	r1, [pc, #256]	; (8006bbc <slalom_R90+0x2c4>)
 8006abc:	4842      	ldr	r0, [pc, #264]	; (8006bc8 <slalom_R90+0x2d0>)
 8006abe:	f7fe fda3 	bl	8005608 <slalomR>

		if(!MF.FLAG.XDIR){
 8006ac2:	4b3b      	ldr	r3, [pc, #236]	; (8006bb0 <slalom_R90+0x2b8>)
 8006ac4:	881b      	ldrh	r3, [r3, #0]
 8006ac6:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d104      	bne.n	8006ada <slalom_R90+0x1e2>
			turn_dir(DIR_TURN_R90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006ad0:	2101      	movs	r1, #1
 8006ad2:	2001      	movs	r0, #1
 8006ad4:	f009 fd5c 	bl	8010590 <turn_dir>
 8006ad8:	e003      	b.n	8006ae2 <slalom_R90+0x1ea>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006ada:	2103      	movs	r1, #3
 8006adc:	2002      	movs	r0, #2
 8006ade:	f009 fd57 	bl	8010590 <turn_dir>
		}
		MF2.FLAG.TEMP = 1;
 8006ae2:	4a38      	ldr	r2, [pc, #224]	; (8006bc4 <slalom_R90+0x2cc>)
 8006ae4:	8813      	ldrh	r3, [r2, #0]
 8006ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006aea:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, SLALOM_5_OFFSET_B);
 8006aec:	2273      	movs	r2, #115	; 0x73
 8006aee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006af2:	f242 7010 	movw	r0, #10000	; 0x2710
 8006af6:	f7fe fea9 	bl	800584c <slalomB>
		MF2.FLAG.TEMP = 0;
 8006afa:	4a32      	ldr	r2, [pc, #200]	; (8006bc4 <slalom_R90+0x2cc>)
 8006afc:	8813      	ldrh	r3, [r2, #0]
 8006afe:	f36f 2349 	bfc	r3, #9, #1
 8006b02:	8013      	strh	r3, [r2, #0]
 8006b04:	e042      	b.n	8006b8c <slalom_R90+0x294>
	}else if(run_mode == 6){
 8006b06:	4b27      	ldr	r3, [pc, #156]	; (8006ba4 <slalom_R90+0x2ac>)
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	2b06      	cmp	r3, #6
 8006b0e:	d13d      	bne.n	8006b8c <slalom_R90+0x294>
		MF2.FLAG.TEMP = 1;
 8006b10:	4a2c      	ldr	r2, [pc, #176]	; (8006bc4 <slalom_R90+0x2cc>)
 8006b12:	8813      	ldrh	r3, [r2, #0]
 8006b14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b18:	8013      	strh	r3, [r2, #0]
		slalomF(10000, SPEED_5, SLALOM_5_OFFSET_F, SLALOM_5_WALL_FL, SLALOM_5_WALL_FR);
 8006b1a:	23a0      	movs	r3, #160	; 0xa0
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006b22:	220a      	movs	r2, #10
 8006b24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006b28:	f242 7010 	movw	r0, #10000	; 0x2710
 8006b2c:	f7fe fcb6 	bl	800549c <slalomF>
		MF2.FLAG.TEMP = 0;
 8006b30:	4a24      	ldr	r2, [pc, #144]	; (8006bc4 <slalom_R90+0x2cc>)
 8006b32:	8813      	ldrh	r3, [r2, #0]
 8006b34:	f36f 2349 	bfc	r3, #9, #1
 8006b38:	8013      	strh	r3, [r2, #0]
		slalomR(-SLALOM_5_DEGACCEL, -SLALOM_5_OMEGA, -20, SPEED_5);
 8006b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006b3e:	f06f 0213 	mvn.w	r2, #19
 8006b42:	491e      	ldr	r1, [pc, #120]	; (8006bbc <slalom_R90+0x2c4>)
 8006b44:	4820      	ldr	r0, [pc, #128]	; (8006bc8 <slalom_R90+0x2d0>)
 8006b46:	f7fe fd5f 	bl	8005608 <slalomR>

		if(!MF.FLAG.XDIR){
 8006b4a:	4b19      	ldr	r3, [pc, #100]	; (8006bb0 <slalom_R90+0x2b8>)
 8006b4c:	881b      	ldrh	r3, [r3, #0]
 8006b4e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d104      	bne.n	8006b62 <slalom_R90+0x26a>
			turn_dir(DIR_TURN_R90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006b58:	2101      	movs	r1, #1
 8006b5a:	2001      	movs	r0, #1
 8006b5c:	f009 fd18 	bl	8010590 <turn_dir>
 8006b60:	e003      	b.n	8006b6a <slalom_R90+0x272>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006b62:	2103      	movs	r1, #3
 8006b64:	2002      	movs	r0, #2
 8006b66:	f009 fd13 	bl	8010590 <turn_dir>
		}
		MF2.FLAG.TEMP = 1;
 8006b6a:	4a16      	ldr	r2, [pc, #88]	; (8006bc4 <slalom_R90+0x2cc>)
 8006b6c:	8813      	ldrh	r3, [r2, #0]
 8006b6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b72:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, SLALOM_5_OFFSET_B);
 8006b74:	2273      	movs	r2, #115	; 0x73
 8006b76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006b7a:	f242 7010 	movw	r0, #10000	; 0x2710
 8006b7e:	f7fe fe65 	bl	800584c <slalomB>
		MF2.FLAG.TEMP = 0;
 8006b82:	4a10      	ldr	r2, [pc, #64]	; (8006bc4 <slalom_R90+0x2cc>)
 8006b84:	8813      	ldrh	r3, [r2, #0]
 8006b86:	f36f 2349 	bfc	r3, #9, #1
 8006b8a:	8013      	strh	r3, [r2, #0]
	}
	if(!MF.FLAG.SCND)get_wall_info();									//a壁情報を取得，片壁制御の有効・無効の判断
 8006b8c:	4b08      	ldr	r3, [pc, #32]	; (8006bb0 <slalom_R90+0x2b8>)
 8006b8e:	881b      	ldrh	r3, [r3, #0]
 8006b90:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d101      	bne.n	8006b9e <slalom_R90+0x2a6>
 8006b9a:	f00b fb19 	bl	80121d0 <get_wall_info>
}
 8006b9e:	bf00      	nop
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	20000456 	.word	0x20000456
 8006ba8:	fffffdda 	.word	0xfffffdda
 8006bac:	fffff060 	.word	0xfffff060
 8006bb0:	20000fa8 	.word	0x20000fa8
 8006bb4:	fffffc7c 	.word	0xfffffc7c
 8006bb8:	ffffd120 	.word	0xffffd120
 8006bbc:	fffffb50 	.word	0xfffffb50
 8006bc0:	ffffa240 	.word	0xffffa240
 8006bc4:	20000fa4 	.word	0x20000fa4
 8006bc8:	ffff8300 	.word	0xffff8300

08006bcc <slalom_L90>:
//slalom_L90
// スラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_L90(void){
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af02      	add	r7, sp, #8
	full_led_write1(YELLOW);
 8006bd2:	2006      	movs	r0, #6
 8006bd4:	f00b fb70 	bl	80122b8 <full_led_write1>
	if(run_mode == 1){
 8006bd8:	4baa      	ldr	r3, [pc, #680]	; (8006e84 <slalom_L90+0x2b8>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d128      	bne.n	8006c34 <slalom_L90+0x68>
		slalomF(10000, SPEED_1, SLALOM_OFFSET_F, SLALOM_WALL_FL, SLALOM_WALL_FR);
 8006be2:	23fa      	movs	r3, #250	; 0xfa
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006bea:	2212      	movs	r2, #18
 8006bec:	21c8      	movs	r1, #200	; 0xc8
 8006bee:	f242 7010 	movw	r0, #10000	; 0x2710
 8006bf2:	f7fe fc53 	bl	800549c <slalomF>
		slalomR(SLALOM_DEGACCEL, SLALOM_OMEGA, 90, SPEED_1);
 8006bf6:	23c8      	movs	r3, #200	; 0xc8
 8006bf8:	225a      	movs	r2, #90	; 0x5a
 8006bfa:	f240 2126 	movw	r1, #550	; 0x226
 8006bfe:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8006c02:	f7fe fd01 	bl	8005608 <slalomR>

		if(!MF.FLAG.XDIR){
 8006c06:	4ba0      	ldr	r3, [pc, #640]	; (8006e88 <slalom_L90+0x2bc>)
 8006c08:	881b      	ldrh	r3, [r3, #0]
 8006c0a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d104      	bne.n	8006c1e <slalom_L90+0x52>
			turn_dir(DIR_TURN_L90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006c14:	2101      	movs	r1, #1
 8006c16:	20ff      	movs	r0, #255	; 0xff
 8006c18:	f009 fcba 	bl	8010590 <turn_dir>
 8006c1c:	e003      	b.n	8006c26 <slalom_L90+0x5a>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006c1e:	2103      	movs	r1, #3
 8006c20:	20fe      	movs	r0, #254	; 0xfe
 8006c22:	f009 fcb5 	bl	8010590 <turn_dir>
		}
		slalomB(10000, SPEED_1, SLALOM_OFFSET_B);
 8006c26:	2219      	movs	r2, #25
 8006c28:	21c8      	movs	r1, #200	; 0xc8
 8006c2a:	f242 7010 	movw	r0, #10000	; 0x2710
 8006c2e:	f7fe fe0d 	bl	800584c <slalomB>
 8006c32:	e11b      	b.n	8006e6c <slalom_L90+0x2a0>
	}else if(run_mode == 2){
 8006c34:	4b93      	ldr	r3, [pc, #588]	; (8006e84 <slalom_L90+0x2b8>)
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d12b      	bne.n	8006c96 <slalom_L90+0xca>
		slalomF(10000, SPEED_2, SLALOM_2_OFFSET_F, SLALOM_2_WALL_FL, SLALOM_2_WALL_FR);
 8006c3e:	23fa      	movs	r3, #250	; 0xfa
 8006c40:	9300      	str	r3, [sp, #0]
 8006c42:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006c46:	2212      	movs	r2, #18
 8006c48:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006c4c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006c50:	f7fe fc24 	bl	800549c <slalomF>
		slalomR(SLALOM_2_DEGACCEL, SLALOM_2_OMEGA, 85, SPEED_2);
 8006c54:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006c58:	2255      	movs	r2, #85	; 0x55
 8006c5a:	f240 2126 	movw	r1, #550	; 0x226
 8006c5e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8006c62:	f7fe fcd1 	bl	8005608 <slalomR>

		if(!MF.FLAG.XDIR){
 8006c66:	4b88      	ldr	r3, [pc, #544]	; (8006e88 <slalom_L90+0x2bc>)
 8006c68:	881b      	ldrh	r3, [r3, #0]
 8006c6a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d104      	bne.n	8006c7e <slalom_L90+0xb2>
			turn_dir(DIR_TURN_L90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006c74:	2101      	movs	r1, #1
 8006c76:	20ff      	movs	r0, #255	; 0xff
 8006c78:	f009 fc8a 	bl	8010590 <turn_dir>
 8006c7c:	e003      	b.n	8006c86 <slalom_L90+0xba>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006c7e:	2103      	movs	r1, #3
 8006c80:	20fe      	movs	r0, #254	; 0xfe
 8006c82:	f009 fc85 	bl	8010590 <turn_dir>
		}
		slalomB(10000, SPEED_2, SLALOM_2_OFFSET_B);
 8006c86:	2219      	movs	r2, #25
 8006c88:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006c8c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006c90:	f7fe fddc 	bl	800584c <slalomB>
 8006c94:	e0ea      	b.n	8006e6c <slalom_L90+0x2a0>
	}else if(run_mode == 3){
 8006c96:	4b7b      	ldr	r3, [pc, #492]	; (8006e84 <slalom_L90+0x2b8>)
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b03      	cmp	r3, #3
 8006c9e:	d12b      	bne.n	8006cf8 <slalom_L90+0x12c>
		slalomF(10000, SPEED_3, SLALOM_3_OFFSET_F, SLALOM_3_WALL_FL, SLALOM_3_WALL_FR);
 8006ca0:	23f0      	movs	r3, #240	; 0xf0
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006ca8:	2219      	movs	r2, #25
 8006caa:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006cae:	f242 7010 	movw	r0, #10000	; 0x2710
 8006cb2:	f7fe fbf3 	bl	800549c <slalomF>
		slalomR(SLALOM_3_DEGACCEL, SLALOM_3_OMEGA, 70, SPEED_3);
 8006cb6:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006cba:	2246      	movs	r2, #70	; 0x46
 8006cbc:	f44f 7161 	mov.w	r1, #900	; 0x384
 8006cc0:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 8006cc4:	f7fe fca0 	bl	8005608 <slalomR>

		if(!MF.FLAG.XDIR){
 8006cc8:	4b6f      	ldr	r3, [pc, #444]	; (8006e88 <slalom_L90+0x2bc>)
 8006cca:	881b      	ldrh	r3, [r3, #0]
 8006ccc:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d104      	bne.n	8006ce0 <slalom_L90+0x114>
			turn_dir(DIR_TURN_L90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006cd6:	2101      	movs	r1, #1
 8006cd8:	20ff      	movs	r0, #255	; 0xff
 8006cda:	f009 fc59 	bl	8010590 <turn_dir>
 8006cde:	e003      	b.n	8006ce8 <slalom_L90+0x11c>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006ce0:	2103      	movs	r1, #3
 8006ce2:	20fe      	movs	r0, #254	; 0xfe
 8006ce4:	f009 fc54 	bl	8010590 <turn_dir>
		}
		slalomB(10000, SPEED_3, SLALOM_3_OFFSET_B);
 8006ce8:	223c      	movs	r2, #60	; 0x3c
 8006cea:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006cee:	f242 7010 	movw	r0, #10000	; 0x2710
 8006cf2:	f7fe fdab 	bl	800584c <slalomB>
 8006cf6:	e0b9      	b.n	8006e6c <slalom_L90+0x2a0>
	}else if(run_mode == 4){
 8006cf8:	4b62      	ldr	r3, [pc, #392]	; (8006e84 <slalom_L90+0x2b8>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b04      	cmp	r3, #4
 8006d00:	d12b      	bne.n	8006d5a <slalom_L90+0x18e>
		slalomF(10000, SPEED_4, SLALOM_4_OFFSET_F, SLALOM_4_WALL_FL, SLALOM_4_WALL_FR);
 8006d02:	23be      	movs	r3, #190	; 0xbe
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	f44f 73be 	mov.w	r3, #380	; 0x17c
 8006d0a:	2219      	movs	r2, #25
 8006d0c:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8006d10:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d14:	f7fe fbc2 	bl	800549c <slalomF>
		slalomR(SLALOM_4_DEGACCEL, SLALOM_4_OMEGA, 50, SPEED_4);
 8006d18:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8006d1c:	2232      	movs	r2, #50	; 0x32
 8006d1e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006d22:	f645 50c0 	movw	r0, #24000	; 0x5dc0
 8006d26:	f7fe fc6f 	bl	8005608 <slalomR>

		if(!MF.FLAG.XDIR){
 8006d2a:	4b57      	ldr	r3, [pc, #348]	; (8006e88 <slalom_L90+0x2bc>)
 8006d2c:	881b      	ldrh	r3, [r3, #0]
 8006d2e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d104      	bne.n	8006d42 <slalom_L90+0x176>
			turn_dir(DIR_TURN_L90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006d38:	2101      	movs	r1, #1
 8006d3a:	20ff      	movs	r0, #255	; 0xff
 8006d3c:	f009 fc28 	bl	8010590 <turn_dir>
 8006d40:	e003      	b.n	8006d4a <slalom_L90+0x17e>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006d42:	2103      	movs	r1, #3
 8006d44:	20fe      	movs	r0, #254	; 0xfe
 8006d46:	f009 fc23 	bl	8010590 <turn_dir>
		}
		slalomB(10000, SPEED_4, SLALOM_4_OFFSET_B);
 8006d4a:	225a      	movs	r2, #90	; 0x5a
 8006d4c:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8006d50:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d54:	f7fe fd7a 	bl	800584c <slalomB>
 8006d58:	e088      	b.n	8006e6c <slalom_L90+0x2a0>
	}else if(run_mode == 5){
 8006d5a:	4b4a      	ldr	r3, [pc, #296]	; (8006e84 <slalom_L90+0x2b8>)
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	2b05      	cmp	r3, #5
 8006d62:	d13f      	bne.n	8006de4 <slalom_L90+0x218>
		MF2.FLAG.TEMP = 1;
 8006d64:	4a49      	ldr	r2, [pc, #292]	; (8006e8c <slalom_L90+0x2c0>)
 8006d66:	8813      	ldrh	r3, [r2, #0]
 8006d68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d6c:	8013      	strh	r3, [r2, #0]
		slalomF(10000, SPEED_5, SLALOM_5_OFFSET_F, SLALOM_5_WALL_FL, SLALOM_5_WALL_FR);
 8006d6e:	23a0      	movs	r3, #160	; 0xa0
 8006d70:	9300      	str	r3, [sp, #0]
 8006d72:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006d76:	220a      	movs	r2, #10
 8006d78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006d7c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d80:	f7fe fb8c 	bl	800549c <slalomF>
		MF2.FLAG.TEMP = 0;
 8006d84:	4a41      	ldr	r2, [pc, #260]	; (8006e8c <slalom_L90+0x2c0>)
 8006d86:	8813      	ldrh	r3, [r2, #0]
 8006d88:	f36f 2349 	bfc	r3, #9, #1
 8006d8c:	8013      	strh	r3, [r2, #0]
		slalomR(SLALOM_5_DEGACCEL, SLALOM_5_OMEGA, 20, SPEED_5);
 8006d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d92:	2214      	movs	r2, #20
 8006d94:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006d98:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8006d9c:	f7fe fc34 	bl	8005608 <slalomR>

		if(!MF.FLAG.XDIR){
 8006da0:	4b39      	ldr	r3, [pc, #228]	; (8006e88 <slalom_L90+0x2bc>)
 8006da2:	881b      	ldrh	r3, [r3, #0]
 8006da4:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d104      	bne.n	8006db8 <slalom_L90+0x1ec>
			turn_dir(DIR_TURN_L90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006dae:	2101      	movs	r1, #1
 8006db0:	20ff      	movs	r0, #255	; 0xff
 8006db2:	f009 fbed 	bl	8010590 <turn_dir>
 8006db6:	e003      	b.n	8006dc0 <slalom_L90+0x1f4>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006db8:	2103      	movs	r1, #3
 8006dba:	20fe      	movs	r0, #254	; 0xfe
 8006dbc:	f009 fbe8 	bl	8010590 <turn_dir>
		}
		MF2.FLAG.TEMP = 1;
 8006dc0:	4a32      	ldr	r2, [pc, #200]	; (8006e8c <slalom_L90+0x2c0>)
 8006dc2:	8813      	ldrh	r3, [r2, #0]
 8006dc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006dc8:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, SLALOM_5_OFFSET_B);
 8006dca:	2273      	movs	r2, #115	; 0x73
 8006dcc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006dd0:	f242 7010 	movw	r0, #10000	; 0x2710
 8006dd4:	f7fe fd3a 	bl	800584c <slalomB>
		MF2.FLAG.TEMP = 0;
 8006dd8:	4a2c      	ldr	r2, [pc, #176]	; (8006e8c <slalom_L90+0x2c0>)
 8006dda:	8813      	ldrh	r3, [r2, #0]
 8006ddc:	f36f 2349 	bfc	r3, #9, #1
 8006de0:	8013      	strh	r3, [r2, #0]
 8006de2:	e043      	b.n	8006e6c <slalom_L90+0x2a0>
	}else if(run_mode == 6){
 8006de4:	4b27      	ldr	r3, [pc, #156]	; (8006e84 <slalom_L90+0x2b8>)
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b06      	cmp	r3, #6
 8006dec:	d13e      	bne.n	8006e6c <slalom_L90+0x2a0>
		MF2.FLAG.TEMP = 1;
 8006dee:	4a27      	ldr	r2, [pc, #156]	; (8006e8c <slalom_L90+0x2c0>)
 8006df0:	8813      	ldrh	r3, [r2, #0]
 8006df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006df6:	8013      	strh	r3, [r2, #0]
		slalomF(10000, SPEED_5, SLALOM_5_OFFSET_F, SLALOM_5_WALL_FL, SLALOM_5_WALL_FR);
 8006df8:	23a0      	movs	r3, #160	; 0xa0
 8006dfa:	9300      	str	r3, [sp, #0]
 8006dfc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006e00:	220a      	movs	r2, #10
 8006e02:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006e06:	f242 7010 	movw	r0, #10000	; 0x2710
 8006e0a:	f7fe fb47 	bl	800549c <slalomF>
		MF2.FLAG.TEMP = 0;
 8006e0e:	4a1f      	ldr	r2, [pc, #124]	; (8006e8c <slalom_L90+0x2c0>)
 8006e10:	8813      	ldrh	r3, [r2, #0]
 8006e12:	f36f 2349 	bfc	r3, #9, #1
 8006e16:	8013      	strh	r3, [r2, #0]
		slalomR(SLALOM_5_DEGACCEL, SLALOM_5_OMEGA, 20, SPEED_5);
 8006e18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006e1c:	2214      	movs	r2, #20
 8006e1e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006e22:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8006e26:	f7fe fbef 	bl	8005608 <slalomR>

		if(!MF.FLAG.XDIR){
 8006e2a:	4b17      	ldr	r3, [pc, #92]	; (8006e88 <slalom_L90+0x2bc>)
 8006e2c:	881b      	ldrh	r3, [r3, #0]
 8006e2e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d104      	bne.n	8006e42 <slalom_L90+0x276>
			turn_dir(DIR_TURN_L90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006e38:	2101      	movs	r1, #1
 8006e3a:	20ff      	movs	r0, #255	; 0xff
 8006e3c:	f009 fba8 	bl	8010590 <turn_dir>
 8006e40:	e003      	b.n	8006e4a <slalom_L90+0x27e>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006e42:	2103      	movs	r1, #3
 8006e44:	20fe      	movs	r0, #254	; 0xfe
 8006e46:	f009 fba3 	bl	8010590 <turn_dir>
		}
		MF2.FLAG.TEMP = 1;
 8006e4a:	4a10      	ldr	r2, [pc, #64]	; (8006e8c <slalom_L90+0x2c0>)
 8006e4c:	8813      	ldrh	r3, [r2, #0]
 8006e4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e52:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, SLALOM_5_OFFSET_B);
 8006e54:	2273      	movs	r2, #115	; 0x73
 8006e56:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006e5a:	f242 7010 	movw	r0, #10000	; 0x2710
 8006e5e:	f7fe fcf5 	bl	800584c <slalomB>
		MF2.FLAG.TEMP = 0;
 8006e62:	4a0a      	ldr	r2, [pc, #40]	; (8006e8c <slalom_L90+0x2c0>)
 8006e64:	8813      	ldrh	r3, [r2, #0]
 8006e66:	f36f 2349 	bfc	r3, #9, #1
 8006e6a:	8013      	strh	r3, [r2, #0]
	}
	if(!MF.FLAG.SCND)get_wall_info();									//a壁情報を取得，片壁制御の有効・無効の判断
 8006e6c:	4b06      	ldr	r3, [pc, #24]	; (8006e88 <slalom_L90+0x2bc>)
 8006e6e:	881b      	ldrh	r3, [r3, #0]
 8006e70:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <slalom_L90+0x2b2>
 8006e7a:	f00b f9a9 	bl	80121d0 <get_wall_info>
}
 8006e7e:	bf00      	nop
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	20000456 	.word	0x20000456
 8006e88:	20000fa8 	.word	0x20000fa8
 8006e8c:	20000fa4 	.word	0x20000fa4

08006e90 <Lslalom_R90>:
//Lslalom_R90
// スラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R90(void){
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af02      	add	r7, sp, #8
	full_led_write1(PURPLE);
 8006e96:	2005      	movs	r0, #5
 8006e98:	f00b fa0e 	bl	80122b8 <full_led_write1>
	if(run_mode == 1){
 8006e9c:	4b8e      	ldr	r3, [pc, #568]	; (80070d8 <Lslalom_R90+0x248>)
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d127      	bne.n	8006ef6 <Lslalom_R90+0x66>
		slalomF(10000, SPEED_1, LSLALOM_OFFSET_F, LSLALOM_WALL_FL, LSLALOM_WALL_FR);
 8006ea6:	2364      	movs	r3, #100	; 0x64
 8006ea8:	9300      	str	r3, [sp, #0]
 8006eaa:	23c8      	movs	r3, #200	; 0xc8
 8006eac:	222d      	movs	r2, #45	; 0x2d
 8006eae:	21c8      	movs	r1, #200	; 0xc8
 8006eb0:	f242 7010 	movw	r0, #10000	; 0x2710
 8006eb4:	f7fe faf2 	bl	800549c <slalomF>
		slalomR(-LSLALOM_DEGACCEL, -LSLALOM_OMEGA, -90, SPEED_1);
 8006eb8:	23c8      	movs	r3, #200	; 0xc8
 8006eba:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8006ebe:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 8006ec2:	4886      	ldr	r0, [pc, #536]	; (80070dc <Lslalom_R90+0x24c>)
 8006ec4:	f7fe fba0 	bl	8005608 <slalomR>

		if(!MF.FLAG.XDIR){
 8006ec8:	4b85      	ldr	r3, [pc, #532]	; (80070e0 <Lslalom_R90+0x250>)
 8006eca:	881b      	ldrh	r3, [r3, #0]
 8006ecc:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d104      	bne.n	8006ee0 <Lslalom_R90+0x50>
			turn_dir(DIR_TURN_R90, 1);										//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006ed6:	2101      	movs	r1, #1
 8006ed8:	2001      	movs	r0, #1
 8006eda:	f009 fb59 	bl	8010590 <turn_dir>
 8006ede:	e003      	b.n	8006ee8 <Lslalom_R90+0x58>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006ee0:	2103      	movs	r1, #3
 8006ee2:	2002      	movs	r0, #2
 8006ee4:	f009 fb54 	bl	8010590 <turn_dir>
		}
		slalomB(10000, SPEED_1, LSLALOM_OFFSET_B);
 8006ee8:	2235      	movs	r2, #53	; 0x35
 8006eea:	21c8      	movs	r1, #200	; 0xc8
 8006eec:	f242 7010 	movw	r0, #10000	; 0x2710
 8006ef0:	f7fe fcac 	bl	800584c <slalomB>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_6, LSLALOM_6_OFFSET_B);
	}
}
 8006ef4:	e0ec      	b.n	80070d0 <Lslalom_R90+0x240>
	}else if(run_mode == 2){
 8006ef6:	4b78      	ldr	r3, [pc, #480]	; (80070d8 <Lslalom_R90+0x248>)
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d12a      	bne.n	8006f56 <Lslalom_R90+0xc6>
		slalomF(10000, SPEED_2, LSLALOM_2_OFFSET_F, LSLALOM_2_WALL_FL, LSLALOM_2_WALL_FR);
 8006f00:	2364      	movs	r3, #100	; 0x64
 8006f02:	9300      	str	r3, [sp, #0]
 8006f04:	23c8      	movs	r3, #200	; 0xc8
 8006f06:	222d      	movs	r2, #45	; 0x2d
 8006f08:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006f0c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f10:	f7fe fac4 	bl	800549c <slalomF>
		slalomR(-LSLALOM_2_DEGACCEL, -LSLALOM_2_OMEGA, -90, SPEED_2);
 8006f14:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006f18:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8006f1c:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 8006f20:	486e      	ldr	r0, [pc, #440]	; (80070dc <Lslalom_R90+0x24c>)
 8006f22:	f7fe fb71 	bl	8005608 <slalomR>
		if(!MF.FLAG.XDIR){
 8006f26:	4b6e      	ldr	r3, [pc, #440]	; (80070e0 <Lslalom_R90+0x250>)
 8006f28:	881b      	ldrh	r3, [r3, #0]
 8006f2a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d104      	bne.n	8006f3e <Lslalom_R90+0xae>
			turn_dir(DIR_TURN_R90, 1);										//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006f34:	2101      	movs	r1, #1
 8006f36:	2001      	movs	r0, #1
 8006f38:	f009 fb2a 	bl	8010590 <turn_dir>
 8006f3c:	e003      	b.n	8006f46 <Lslalom_R90+0xb6>
			turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006f3e:	2103      	movs	r1, #3
 8006f40:	2002      	movs	r0, #2
 8006f42:	f009 fb25 	bl	8010590 <turn_dir>
		slalomB(10000, SPEED_2, LSLALOM_2_OFFSET_B);
 8006f46:	2235      	movs	r2, #53	; 0x35
 8006f48:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006f4c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f50:	f7fe fc7c 	bl	800584c <slalomB>
}
 8006f54:	e0bc      	b.n	80070d0 <Lslalom_R90+0x240>
	}else if(run_mode == 3){
 8006f56:	4b60      	ldr	r3, [pc, #384]	; (80070d8 <Lslalom_R90+0x248>)
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	2b03      	cmp	r3, #3
 8006f5e:	d129      	bne.n	8006fb4 <Lslalom_R90+0x124>
		slalomF(10000, SPEED_3, LSLALOM_3_OFFSET_F, LSLALOM_3_WALL_FL, LSLALOM_3_WALL_FR);
 8006f60:	2378      	movs	r3, #120	; 0x78
 8006f62:	9300      	str	r3, [sp, #0]
 8006f64:	23f0      	movs	r3, #240	; 0xf0
 8006f66:	223c      	movs	r2, #60	; 0x3c
 8006f68:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006f6c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f70:	f7fe fa94 	bl	800549c <slalomF>
		slalomR(-LSLALOM_3_DEGACCEL, -LSLALOM_3_OMEGA, -90, SPEED_3);
 8006f74:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006f78:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8006f7c:	4959      	ldr	r1, [pc, #356]	; (80070e4 <Lslalom_R90+0x254>)
 8006f7e:	485a      	ldr	r0, [pc, #360]	; (80070e8 <Lslalom_R90+0x258>)
 8006f80:	f7fe fb42 	bl	8005608 <slalomR>
		if(!MF.FLAG.XDIR){
 8006f84:	4b56      	ldr	r3, [pc, #344]	; (80070e0 <Lslalom_R90+0x250>)
 8006f86:	881b      	ldrh	r3, [r3, #0]
 8006f88:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d104      	bne.n	8006f9c <Lslalom_R90+0x10c>
			turn_dir(DIR_TURN_R90, 1);										//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006f92:	2101      	movs	r1, #1
 8006f94:	2001      	movs	r0, #1
 8006f96:	f009 fafb 	bl	8010590 <turn_dir>
 8006f9a:	e003      	b.n	8006fa4 <Lslalom_R90+0x114>
			turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006f9c:	2103      	movs	r1, #3
 8006f9e:	2002      	movs	r0, #2
 8006fa0:	f009 faf6 	bl	8010590 <turn_dir>
		slalomB(10000, SPEED_3, LSLALOM_3_OFFSET_B);
 8006fa4:	2258      	movs	r2, #88	; 0x58
 8006fa6:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006faa:	f242 7010 	movw	r0, #10000	; 0x2710
 8006fae:	f7fe fc4d 	bl	800584c <slalomB>
}
 8006fb2:	e08d      	b.n	80070d0 <Lslalom_R90+0x240>
	}else if(run_mode == 4){
 8006fb4:	4b48      	ldr	r3, [pc, #288]	; (80070d8 <Lslalom_R90+0x248>)
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b04      	cmp	r3, #4
 8006fbc:	d12a      	bne.n	8007014 <Lslalom_R90+0x184>
		slalomF(10000, SPEED_4, LSLALOM_4_OFFSET_F, LSLALOM_4_WALL_FL, LSLALOM_4_WALL_FR);
 8006fbe:	2382      	movs	r3, #130	; 0x82
 8006fc0:	9300      	str	r3, [sp, #0]
 8006fc2:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006fc6:	222b      	movs	r2, #43	; 0x2b
 8006fc8:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8006fcc:	f242 7010 	movw	r0, #10000	; 0x2710
 8006fd0:	f7fe fa64 	bl	800549c <slalomF>
		slalomR(-LSLALOM_4_DEGACCEL, -LSLALOM_4_OMEGA, -85, SPEED_4);
 8006fd4:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8006fd8:	f06f 0254 	mvn.w	r2, #84	; 0x54
 8006fdc:	4943      	ldr	r1, [pc, #268]	; (80070ec <Lslalom_R90+0x25c>)
 8006fde:	4844      	ldr	r0, [pc, #272]	; (80070f0 <Lslalom_R90+0x260>)
 8006fe0:	f7fe fb12 	bl	8005608 <slalomR>
		if(!MF.FLAG.XDIR){
 8006fe4:	4b3e      	ldr	r3, [pc, #248]	; (80070e0 <Lslalom_R90+0x250>)
 8006fe6:	881b      	ldrh	r3, [r3, #0]
 8006fe8:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d104      	bne.n	8006ffc <Lslalom_R90+0x16c>
			turn_dir(DIR_TURN_R90, 1);										//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006ff2:	2101      	movs	r1, #1
 8006ff4:	2001      	movs	r0, #1
 8006ff6:	f009 facb 	bl	8010590 <turn_dir>
 8006ffa:	e003      	b.n	8007004 <Lslalom_R90+0x174>
			turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006ffc:	2103      	movs	r1, #3
 8006ffe:	2002      	movs	r0, #2
 8007000:	f009 fac6 	bl	8010590 <turn_dir>
		slalomB(10000, SPEED_4, LSLALOM_4_OFFSET_B);
 8007004:	225a      	movs	r2, #90	; 0x5a
 8007006:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800700a:	f242 7010 	movw	r0, #10000	; 0x2710
 800700e:	f7fe fc1d 	bl	800584c <slalomB>
}
 8007012:	e05d      	b.n	80070d0 <Lslalom_R90+0x240>
	}else if(run_mode == 5){
 8007014:	4b30      	ldr	r3, [pc, #192]	; (80070d8 <Lslalom_R90+0x248>)
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	b2db      	uxtb	r3, r3
 800701a:	2b05      	cmp	r3, #5
 800701c:	d12a      	bne.n	8007074 <Lslalom_R90+0x1e4>
		slalomF(10000, SPEED_5, LSLALOM_5_OFFSET_F, LSLALOM_5_WALL_FL, LSLALOM_5_WALL_FR);
 800701e:	2396      	movs	r3, #150	; 0x96
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8007026:	2232      	movs	r2, #50	; 0x32
 8007028:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800702c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007030:	f7fe fa34 	bl	800549c <slalomF>
		slalomR(-LSLALOM_5_DEGACCEL, -LSLALOM_5_OMEGA, -80, SPEED_5);
 8007034:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007038:	f06f 024f 	mvn.w	r2, #79	; 0x4f
 800703c:	492d      	ldr	r1, [pc, #180]	; (80070f4 <Lslalom_R90+0x264>)
 800703e:	482e      	ldr	r0, [pc, #184]	; (80070f8 <Lslalom_R90+0x268>)
 8007040:	f7fe fae2 	bl	8005608 <slalomR>
		if(!MF.FLAG.XDIR){
 8007044:	4b26      	ldr	r3, [pc, #152]	; (80070e0 <Lslalom_R90+0x250>)
 8007046:	881b      	ldrh	r3, [r3, #0]
 8007048:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800704c:	b2db      	uxtb	r3, r3
 800704e:	2b00      	cmp	r3, #0
 8007050:	d104      	bne.n	800705c <Lslalom_R90+0x1cc>
			turn_dir(DIR_TURN_R90, 1);										//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007052:	2101      	movs	r1, #1
 8007054:	2001      	movs	r0, #1
 8007056:	f009 fa9b 	bl	8010590 <turn_dir>
 800705a:	e003      	b.n	8007064 <Lslalom_R90+0x1d4>
			turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800705c:	2103      	movs	r1, #3
 800705e:	2002      	movs	r0, #2
 8007060:	f009 fa96 	bl	8010590 <turn_dir>
		slalomB(10000, SPEED_5, LSLALOM_5_OFFSET_B);
 8007064:	226e      	movs	r2, #110	; 0x6e
 8007066:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800706a:	f242 7010 	movw	r0, #10000	; 0x2710
 800706e:	f7fe fbed 	bl	800584c <slalomB>
}
 8007072:	e02d      	b.n	80070d0 <Lslalom_R90+0x240>
	}else if(run_mode == 6){
 8007074:	4b18      	ldr	r3, [pc, #96]	; (80070d8 <Lslalom_R90+0x248>)
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	b2db      	uxtb	r3, r3
 800707a:	2b06      	cmp	r3, #6
 800707c:	d128      	bne.n	80070d0 <Lslalom_R90+0x240>
		slalomF(10000, SPEED_6, LSLALOM_6_OFFSET_F, LSLALOM_6_WALL_FL, LSLALOM_6_WALL_FR);
 800707e:	2382      	movs	r3, #130	; 0x82
 8007080:	9300      	str	r3, [sp, #0]
 8007082:	23fa      	movs	r3, #250	; 0xfa
 8007084:	2211      	movs	r2, #17
 8007086:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800708a:	f242 7010 	movw	r0, #10000	; 0x2710
 800708e:	f7fe fa05 	bl	800549c <slalomF>
		slalomR(-LSLALOM_6_DEGACCEL, -LSLALOM_6_OMEGA, -70, SPEED_6);
 8007092:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8007096:	f06f 0245 	mvn.w	r2, #69	; 0x45
 800709a:	4916      	ldr	r1, [pc, #88]	; (80070f4 <Lslalom_R90+0x264>)
 800709c:	4816      	ldr	r0, [pc, #88]	; (80070f8 <Lslalom_R90+0x268>)
 800709e:	f7fe fab3 	bl	8005608 <slalomR>
		if(!MF.FLAG.XDIR){
 80070a2:	4b0f      	ldr	r3, [pc, #60]	; (80070e0 <Lslalom_R90+0x250>)
 80070a4:	881b      	ldrh	r3, [r3, #0]
 80070a6:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d104      	bne.n	80070ba <Lslalom_R90+0x22a>
			turn_dir(DIR_TURN_R90, 1);										//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80070b0:	2101      	movs	r1, #1
 80070b2:	2001      	movs	r0, #1
 80070b4:	f009 fa6c 	bl	8010590 <turn_dir>
 80070b8:	e003      	b.n	80070c2 <Lslalom_R90+0x232>
			turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80070ba:	2103      	movs	r1, #3
 80070bc:	2002      	movs	r0, #2
 80070be:	f009 fa67 	bl	8010590 <turn_dir>
		slalomB(10000, SPEED_6, LSLALOM_6_OFFSET_B);
 80070c2:	2278      	movs	r2, #120	; 0x78
 80070c4:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80070c8:	f242 7010 	movw	r0, #10000	; 0x2710
 80070cc:	f7fe fbbe 	bl	800584c <slalomB>
}
 80070d0:	bf00      	nop
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	20000456 	.word	0x20000456
 80070dc:	fffff830 	.word	0xfffff830
 80070e0:	20000fa8 	.word	0x20000fa8
 80070e4:	fffffe70 	.word	0xfffffe70
 80070e8:	fffff060 	.word	0xfffff060
 80070ec:	fffffda8 	.word	0xfffffda8
 80070f0:	ffffee6c 	.word	0xffffee6c
 80070f4:	fffffce0 	.word	0xfffffce0
 80070f8:	ffffe0c0 	.word	0xffffe0c0

080070fc <Lslalom_L90>:
//Lslalom_L90
// 大回りスラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L90(void){
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af02      	add	r7, sp, #8
	full_led_write1(YELLOW);
 8007102:	2006      	movs	r0, #6
 8007104:	f00b f8d8 	bl	80122b8 <full_led_write1>
	if(run_mode == 1){
 8007108:	4b8f      	ldr	r3, [pc, #572]	; (8007348 <Lslalom_L90+0x24c>)
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	b2db      	uxtb	r3, r3
 800710e:	2b01      	cmp	r3, #1
 8007110:	d126      	bne.n	8007160 <Lslalom_L90+0x64>
		slalomF(10000, SPEED_1, LSLALOM_OFFSET_F, LSLALOM_WALL_FL, LSLALOM_WALL_FR);
 8007112:	2364      	movs	r3, #100	; 0x64
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	23c8      	movs	r3, #200	; 0xc8
 8007118:	222d      	movs	r2, #45	; 0x2d
 800711a:	21c8      	movs	r1, #200	; 0xc8
 800711c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007120:	f7fe f9bc 	bl	800549c <slalomF>
		slalomR(LSLALOM_DEGACCEL, LSLALOM_OMEGA, 90, SPEED_1);
 8007124:	23c8      	movs	r3, #200	; 0xc8
 8007126:	225a      	movs	r2, #90	; 0x5a
 8007128:	21c8      	movs	r1, #200	; 0xc8
 800712a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800712e:	f7fe fa6b 	bl	8005608 <slalomR>

		if(!MF.FLAG.XDIR){
 8007132:	4b86      	ldr	r3, [pc, #536]	; (800734c <Lslalom_L90+0x250>)
 8007134:	881b      	ldrh	r3, [r3, #0]
 8007136:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800713a:	b2db      	uxtb	r3, r3
 800713c:	2b00      	cmp	r3, #0
 800713e:	d104      	bne.n	800714a <Lslalom_L90+0x4e>
			turn_dir(DIR_TURN_L90, 1);										//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007140:	2101      	movs	r1, #1
 8007142:	20ff      	movs	r0, #255	; 0xff
 8007144:	f009 fa24 	bl	8010590 <turn_dir>
 8007148:	e003      	b.n	8007152 <Lslalom_L90+0x56>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800714a:	2103      	movs	r1, #3
 800714c:	20fe      	movs	r0, #254	; 0xfe
 800714e:	f009 fa1f 	bl	8010590 <turn_dir>
		}
		slalomB(10000, SPEED_1, LSLALOM_OFFSET_B);
 8007152:	2235      	movs	r2, #53	; 0x35
 8007154:	21c8      	movs	r1, #200	; 0xc8
 8007156:	f242 7010 	movw	r0, #10000	; 0x2710
 800715a:	f7fe fb77 	bl	800584c <slalomB>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_6, LSLALOM_6_OFFSET_B);
	}
}
 800715e:	e0ef      	b.n	8007340 <Lslalom_L90+0x244>
	}else if(run_mode == 2){
 8007160:	4b79      	ldr	r3, [pc, #484]	; (8007348 <Lslalom_L90+0x24c>)
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	b2db      	uxtb	r3, r3
 8007166:	2b02      	cmp	r3, #2
 8007168:	d129      	bne.n	80071be <Lslalom_L90+0xc2>
		slalomF(10000, SPEED_2, LSLALOM_2_OFFSET_F, LSLALOM_2_WALL_FL, LSLALOM_2_WALL_FR);
 800716a:	2364      	movs	r3, #100	; 0x64
 800716c:	9300      	str	r3, [sp, #0]
 800716e:	23c8      	movs	r3, #200	; 0xc8
 8007170:	222d      	movs	r2, #45	; 0x2d
 8007172:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007176:	f242 7010 	movw	r0, #10000	; 0x2710
 800717a:	f7fe f98f 	bl	800549c <slalomF>
		slalomR(LSLALOM_2_DEGACCEL, LSLALOM_2_OMEGA, 90, SPEED_2);
 800717e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007182:	225a      	movs	r2, #90	; 0x5a
 8007184:	21c8      	movs	r1, #200	; 0xc8
 8007186:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800718a:	f7fe fa3d 	bl	8005608 <slalomR>
		if(!MF.FLAG.XDIR){
 800718e:	4b6f      	ldr	r3, [pc, #444]	; (800734c <Lslalom_L90+0x250>)
 8007190:	881b      	ldrh	r3, [r3, #0]
 8007192:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007196:	b2db      	uxtb	r3, r3
 8007198:	2b00      	cmp	r3, #0
 800719a:	d104      	bne.n	80071a6 <Lslalom_L90+0xaa>
			turn_dir(DIR_TURN_L90, 1);										//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800719c:	2101      	movs	r1, #1
 800719e:	20ff      	movs	r0, #255	; 0xff
 80071a0:	f009 f9f6 	bl	8010590 <turn_dir>
 80071a4:	e003      	b.n	80071ae <Lslalom_L90+0xb2>
			turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80071a6:	2103      	movs	r1, #3
 80071a8:	20fe      	movs	r0, #254	; 0xfe
 80071aa:	f009 f9f1 	bl	8010590 <turn_dir>
		slalomB(10000, SPEED_2, LSLALOM_2_OFFSET_B);
 80071ae:	2235      	movs	r2, #53	; 0x35
 80071b0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80071b4:	f242 7010 	movw	r0, #10000	; 0x2710
 80071b8:	f7fe fb48 	bl	800584c <slalomB>
}
 80071bc:	e0c0      	b.n	8007340 <Lslalom_L90+0x244>
	}else if(run_mode == 3){
 80071be:	4b62      	ldr	r3, [pc, #392]	; (8007348 <Lslalom_L90+0x24c>)
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	2b03      	cmp	r3, #3
 80071c6:	d12a      	bne.n	800721e <Lslalom_L90+0x122>
		slalomF(10000, SPEED_3, LSLALOM_3_OFFSET_F, LSLALOM_3_WALL_FL, LSLALOM_3_WALL_FR);
 80071c8:	2378      	movs	r3, #120	; 0x78
 80071ca:	9300      	str	r3, [sp, #0]
 80071cc:	23f0      	movs	r3, #240	; 0xf0
 80071ce:	223c      	movs	r2, #60	; 0x3c
 80071d0:	f44f 7116 	mov.w	r1, #600	; 0x258
 80071d4:	f242 7010 	movw	r0, #10000	; 0x2710
 80071d8:	f7fe f960 	bl	800549c <slalomF>
		slalomR(LSLALOM_3_DEGACCEL, LSLALOM_3_OMEGA, 90, SPEED_3);
 80071dc:	f44f 7316 	mov.w	r3, #600	; 0x258
 80071e0:	225a      	movs	r2, #90	; 0x5a
 80071e2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80071e6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80071ea:	f7fe fa0d 	bl	8005608 <slalomR>
		if(!MF.FLAG.XDIR){
 80071ee:	4b57      	ldr	r3, [pc, #348]	; (800734c <Lslalom_L90+0x250>)
 80071f0:	881b      	ldrh	r3, [r3, #0]
 80071f2:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d104      	bne.n	8007206 <Lslalom_L90+0x10a>
			turn_dir(DIR_TURN_L90, 1);										//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80071fc:	2101      	movs	r1, #1
 80071fe:	20ff      	movs	r0, #255	; 0xff
 8007200:	f009 f9c6 	bl	8010590 <turn_dir>
 8007204:	e003      	b.n	800720e <Lslalom_L90+0x112>
			turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007206:	2103      	movs	r1, #3
 8007208:	20fe      	movs	r0, #254	; 0xfe
 800720a:	f009 f9c1 	bl	8010590 <turn_dir>
		slalomB(10000, SPEED_3, LSLALOM_3_OFFSET_B);
 800720e:	2258      	movs	r2, #88	; 0x58
 8007210:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007214:	f242 7010 	movw	r0, #10000	; 0x2710
 8007218:	f7fe fb18 	bl	800584c <slalomB>
}
 800721c:	e090      	b.n	8007340 <Lslalom_L90+0x244>
	}else if(run_mode == 4){
 800721e:	4b4a      	ldr	r3, [pc, #296]	; (8007348 <Lslalom_L90+0x24c>)
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	b2db      	uxtb	r3, r3
 8007224:	2b04      	cmp	r3, #4
 8007226:	d12b      	bne.n	8007280 <Lslalom_L90+0x184>
		slalomF(10000, SPEED_4, LSLALOM_4_OFFSET_F, LSLALOM_4_WALL_FL, LSLALOM_4_WALL_FR);
 8007228:	2382      	movs	r3, #130	; 0x82
 800722a:	9300      	str	r3, [sp, #0]
 800722c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007230:	222b      	movs	r2, #43	; 0x2b
 8007232:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8007236:	f242 7010 	movw	r0, #10000	; 0x2710
 800723a:	f7fe f92f 	bl	800549c <slalomF>
		slalomR(LSLALOM_4_DEGACCEL, LSLALOM_4_OMEGA, 85, SPEED_4);
 800723e:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8007242:	2255      	movs	r2, #85	; 0x55
 8007244:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007248:	f241 1094 	movw	r0, #4500	; 0x1194
 800724c:	f7fe f9dc 	bl	8005608 <slalomR>
		if(!MF.FLAG.XDIR){
 8007250:	4b3e      	ldr	r3, [pc, #248]	; (800734c <Lslalom_L90+0x250>)
 8007252:	881b      	ldrh	r3, [r3, #0]
 8007254:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b00      	cmp	r3, #0
 800725c:	d104      	bne.n	8007268 <Lslalom_L90+0x16c>
			turn_dir(DIR_TURN_L90, 1);										//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800725e:	2101      	movs	r1, #1
 8007260:	20ff      	movs	r0, #255	; 0xff
 8007262:	f009 f995 	bl	8010590 <turn_dir>
 8007266:	e003      	b.n	8007270 <Lslalom_L90+0x174>
			turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007268:	2103      	movs	r1, #3
 800726a:	20fe      	movs	r0, #254	; 0xfe
 800726c:	f009 f990 	bl	8010590 <turn_dir>
		slalomB(10000, SPEED_4, LSLALOM_4_OFFSET_B);
 8007270:	225a      	movs	r2, #90	; 0x5a
 8007272:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8007276:	f242 7010 	movw	r0, #10000	; 0x2710
 800727a:	f7fe fae7 	bl	800584c <slalomB>
}
 800727e:	e05f      	b.n	8007340 <Lslalom_L90+0x244>
	}else if(run_mode == 5){
 8007280:	4b31      	ldr	r3, [pc, #196]	; (8007348 <Lslalom_L90+0x24c>)
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b05      	cmp	r3, #5
 8007288:	d12b      	bne.n	80072e2 <Lslalom_L90+0x1e6>
		slalomF(10000, SPEED_5, LSLALOM_5_OFFSET_F, LSLALOM_5_WALL_FL, LSLALOM_5_WALL_FR);
 800728a:	2396      	movs	r3, #150	; 0x96
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8007292:	2232      	movs	r2, #50	; 0x32
 8007294:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007298:	f242 7010 	movw	r0, #10000	; 0x2710
 800729c:	f7fe f8fe 	bl	800549c <slalomF>
		slalomR(LSLALOM_5_DEGACCEL, LSLALOM_5_OMEGA, 80, SPEED_5);
 80072a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80072a4:	2250      	movs	r2, #80	; 0x50
 80072a6:	f44f 7148 	mov.w	r1, #800	; 0x320
 80072aa:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80072ae:	f7fe f9ab 	bl	8005608 <slalomR>
		if(!MF.FLAG.XDIR){
 80072b2:	4b26      	ldr	r3, [pc, #152]	; (800734c <Lslalom_L90+0x250>)
 80072b4:	881b      	ldrh	r3, [r3, #0]
 80072b6:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d104      	bne.n	80072ca <Lslalom_L90+0x1ce>
			turn_dir(DIR_TURN_L90, 1);										//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80072c0:	2101      	movs	r1, #1
 80072c2:	20ff      	movs	r0, #255	; 0xff
 80072c4:	f009 f964 	bl	8010590 <turn_dir>
 80072c8:	e003      	b.n	80072d2 <Lslalom_L90+0x1d6>
			turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80072ca:	2103      	movs	r1, #3
 80072cc:	20fe      	movs	r0, #254	; 0xfe
 80072ce:	f009 f95f 	bl	8010590 <turn_dir>
		slalomB(10000, SPEED_5, LSLALOM_5_OFFSET_B);
 80072d2:	226e      	movs	r2, #110	; 0x6e
 80072d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80072d8:	f242 7010 	movw	r0, #10000	; 0x2710
 80072dc:	f7fe fab6 	bl	800584c <slalomB>
}
 80072e0:	e02e      	b.n	8007340 <Lslalom_L90+0x244>
	}else if(run_mode == 6){
 80072e2:	4b19      	ldr	r3, [pc, #100]	; (8007348 <Lslalom_L90+0x24c>)
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	2b06      	cmp	r3, #6
 80072ea:	d129      	bne.n	8007340 <Lslalom_L90+0x244>
		slalomF(10000, SPEED_6, LSLALOM_6_OFFSET_F, LSLALOM_6_WALL_FL, LSLALOM_6_WALL_FR);
 80072ec:	2382      	movs	r3, #130	; 0x82
 80072ee:	9300      	str	r3, [sp, #0]
 80072f0:	23fa      	movs	r3, #250	; 0xfa
 80072f2:	2211      	movs	r2, #17
 80072f4:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80072f8:	f242 7010 	movw	r0, #10000	; 0x2710
 80072fc:	f7fe f8ce 	bl	800549c <slalomF>
		slalomR(LSLALOM_6_DEGACCEL, LSLALOM_6_OMEGA, 70, SPEED_6);
 8007300:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8007304:	2246      	movs	r2, #70	; 0x46
 8007306:	f44f 7148 	mov.w	r1, #800	; 0x320
 800730a:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800730e:	f7fe f97b 	bl	8005608 <slalomR>
		if(!MF.FLAG.XDIR){
 8007312:	4b0e      	ldr	r3, [pc, #56]	; (800734c <Lslalom_L90+0x250>)
 8007314:	881b      	ldrh	r3, [r3, #0]
 8007316:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800731a:	b2db      	uxtb	r3, r3
 800731c:	2b00      	cmp	r3, #0
 800731e:	d104      	bne.n	800732a <Lslalom_L90+0x22e>
			turn_dir(DIR_TURN_L90, 1);										//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007320:	2101      	movs	r1, #1
 8007322:	20ff      	movs	r0, #255	; 0xff
 8007324:	f009 f934 	bl	8010590 <turn_dir>
 8007328:	e003      	b.n	8007332 <Lslalom_L90+0x236>
			turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800732a:	2103      	movs	r1, #3
 800732c:	20fe      	movs	r0, #254	; 0xfe
 800732e:	f009 f92f 	bl	8010590 <turn_dir>
		slalomB(10000, SPEED_6, LSLALOM_6_OFFSET_B);
 8007332:	2278      	movs	r2, #120	; 0x78
 8007334:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007338:	f242 7010 	movw	r0, #10000	; 0x2710
 800733c:	f7fe fa86 	bl	800584c <slalomB>
}
 8007340:	bf00      	nop
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	20000456 	.word	0x20000456
 800734c:	20000fa8 	.word	0x20000fa8

08007350 <Lslalom_R180>:
//Lslalom_R180
// スラロームで右に180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R180(void){
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af02      	add	r7, sp, #8
	full_led_write1(GREEN);
 8007356:	2002      	movs	r0, #2
 8007358:	f00a ffae 	bl	80122b8 <full_led_write1>
	if(run_mode == 1){
 800735c:	4b98      	ldr	r3, [pc, #608]	; (80075c0 <Lslalom_R180+0x270>)
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	b2db      	uxtb	r3, r3
 8007362:	2b01      	cmp	r3, #1
 8007364:	d12a      	bne.n	80073bc <Lslalom_R180+0x6c>
		slalomF(10000, SPEED_1, LROTATE_OFFSET_F, LROTATE_WALL_FL, LROTATE_WALL_FR);
 8007366:	2364      	movs	r3, #100	; 0x64
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	23c8      	movs	r3, #200	; 0xc8
 800736c:	223c      	movs	r2, #60	; 0x3c
 800736e:	21c8      	movs	r1, #200	; 0xc8
 8007370:	f242 7010 	movw	r0, #10000	; 0x2710
 8007374:	f7fe f892 	bl	800549c <slalomF>
		slalomR(-LROTATE_DEGACCEL, -LROTATE_OMEGA, -180, SPEED_1);
 8007378:	23c8      	movs	r3, #200	; 0xc8
 800737a:	f06f 02b3 	mvn.w	r2, #179	; 0xb3
 800737e:	4991      	ldr	r1, [pc, #580]	; (80075c4 <Lslalom_R180+0x274>)
 8007380:	4891      	ldr	r0, [pc, #580]	; (80075c8 <Lslalom_R180+0x278>)
 8007382:	f7fe f941 	bl	8005608 <slalomR>

		if(!MF.FLAG.XDIR){
 8007386:	4b91      	ldr	r3, [pc, #580]	; (80075cc <Lslalom_R180+0x27c>)
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800738e:	b2db      	uxtb	r3, r3
 8007390:	2b00      	cmp	r3, #0
 8007392:	d108      	bne.n	80073a6 <Lslalom_R180+0x56>
			turn_dir(DIR_TURN_R90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007394:	2101      	movs	r1, #1
 8007396:	2001      	movs	r0, #1
 8007398:	f009 f8fa 	bl	8010590 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800739c:	2101      	movs	r1, #1
 800739e:	2001      	movs	r0, #1
 80073a0:	f009 f8f6 	bl	8010590 <turn_dir>
 80073a4:	e003      	b.n	80073ae <Lslalom_R180+0x5e>
		}else{
			turn_dir(DIR_TURN_R180_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80073a6:	2103      	movs	r1, #3
 80073a8:	2004      	movs	r0, #4
 80073aa:	f009 f8f1 	bl	8010590 <turn_dir>
		}
		slalomB(10000, SPEED_1, LROTATE_OFFSET_B);
 80073ae:	2250      	movs	r2, #80	; 0x50
 80073b0:	21c8      	movs	r1, #200	; 0xc8
 80073b2:	f242 7010 	movw	r0, #10000	; 0x2710
 80073b6:	f7fe fa49 	bl	800584c <slalomB>
		}else{
			turn_dir(DIR_TURN_R180_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_6, LROTATE_6_OFFSET_B);
	}
}
 80073ba:	e0fd      	b.n	80075b8 <Lslalom_R180+0x268>
	}else if(run_mode == 2){
 80073bc:	4b80      	ldr	r3, [pc, #512]	; (80075c0 <Lslalom_R180+0x270>)
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d12d      	bne.n	8007422 <Lslalom_R180+0xd2>
		slalomF(10000, SPEED_2, LROTATE_2_OFFSET_F, LROTATE_2_WALL_FL, LROTATE_2_WALL_FR);
 80073c6:	2364      	movs	r3, #100	; 0x64
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	23c8      	movs	r3, #200	; 0xc8
 80073cc:	223c      	movs	r2, #60	; 0x3c
 80073ce:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80073d2:	f242 7010 	movw	r0, #10000	; 0x2710
 80073d6:	f7fe f861 	bl	800549c <slalomF>
		slalomR(-LROTATE_2_DEGACCEL, -LROTATE_2_OMEGA, -180, SPEED_2);
 80073da:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80073de:	f06f 02b3 	mvn.w	r2, #179	; 0xb3
 80073e2:	4978      	ldr	r1, [pc, #480]	; (80075c4 <Lslalom_R180+0x274>)
 80073e4:	4878      	ldr	r0, [pc, #480]	; (80075c8 <Lslalom_R180+0x278>)
 80073e6:	f7fe f90f 	bl	8005608 <slalomR>
		if(!MF.FLAG.XDIR){
 80073ea:	4b78      	ldr	r3, [pc, #480]	; (80075cc <Lslalom_R180+0x27c>)
 80073ec:	881b      	ldrh	r3, [r3, #0]
 80073ee:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d108      	bne.n	800740a <Lslalom_R180+0xba>
			turn_dir(DIR_TURN_R90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80073f8:	2101      	movs	r1, #1
 80073fa:	2001      	movs	r0, #1
 80073fc:	f009 f8c8 	bl	8010590 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007400:	2101      	movs	r1, #1
 8007402:	2001      	movs	r0, #1
 8007404:	f009 f8c4 	bl	8010590 <turn_dir>
 8007408:	e003      	b.n	8007412 <Lslalom_R180+0xc2>
			turn_dir(DIR_TURN_R180_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800740a:	2103      	movs	r1, #3
 800740c:	2004      	movs	r0, #4
 800740e:	f009 f8bf 	bl	8010590 <turn_dir>
		slalomB(10000, SPEED_2, LROTATE_2_OFFSET_B);
 8007412:	2250      	movs	r2, #80	; 0x50
 8007414:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007418:	f242 7010 	movw	r0, #10000	; 0x2710
 800741c:	f7fe fa16 	bl	800584c <slalomB>
}
 8007420:	e0ca      	b.n	80075b8 <Lslalom_R180+0x268>
	}else if(run_mode == 3){
 8007422:	4b67      	ldr	r3, [pc, #412]	; (80075c0 <Lslalom_R180+0x270>)
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	b2db      	uxtb	r3, r3
 8007428:	2b03      	cmp	r3, #3
 800742a:	d12d      	bne.n	8007488 <Lslalom_R180+0x138>
		slalomF(10000, SPEED_3, LROTATE_3_OFFSET_F, LROTATE_3_WALL_FL, LROTATE_3_WALL_FR);
 800742c:	2364      	movs	r3, #100	; 0x64
 800742e:	9300      	str	r3, [sp, #0]
 8007430:	23c8      	movs	r3, #200	; 0xc8
 8007432:	2232      	movs	r2, #50	; 0x32
 8007434:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007438:	f242 7010 	movw	r0, #10000	; 0x2710
 800743c:	f7fe f82e 	bl	800549c <slalomF>
		slalomR(-LROTATE_3_DEGACCEL, -LROTATE_3_OMEGA, -170, SPEED_3);
 8007440:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007444:	f06f 02a9 	mvn.w	r2, #169	; 0xa9
 8007448:	4961      	ldr	r1, [pc, #388]	; (80075d0 <Lslalom_R180+0x280>)
 800744a:	4862      	ldr	r0, [pc, #392]	; (80075d4 <Lslalom_R180+0x284>)
 800744c:	f7fe f8dc 	bl	8005608 <slalomR>
		if(!MF.FLAG.XDIR){
 8007450:	4b5e      	ldr	r3, [pc, #376]	; (80075cc <Lslalom_R180+0x27c>)
 8007452:	881b      	ldrh	r3, [r3, #0]
 8007454:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b00      	cmp	r3, #0
 800745c:	d108      	bne.n	8007470 <Lslalom_R180+0x120>
			turn_dir(DIR_TURN_R90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800745e:	2101      	movs	r1, #1
 8007460:	2001      	movs	r0, #1
 8007462:	f009 f895 	bl	8010590 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007466:	2101      	movs	r1, #1
 8007468:	2001      	movs	r0, #1
 800746a:	f009 f891 	bl	8010590 <turn_dir>
 800746e:	e003      	b.n	8007478 <Lslalom_R180+0x128>
			turn_dir(DIR_TURN_R180_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007470:	2103      	movs	r1, #3
 8007472:	2004      	movs	r0, #4
 8007474:	f009 f88c 	bl	8010590 <turn_dir>
		slalomB(10000, SPEED_3, LROTATE_3_OFFSET_B);
 8007478:	224e      	movs	r2, #78	; 0x4e
 800747a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800747e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007482:	f7fe f9e3 	bl	800584c <slalomB>
}
 8007486:	e097      	b.n	80075b8 <Lslalom_R180+0x268>
	}else if(run_mode == 4){
 8007488:	4b4d      	ldr	r3, [pc, #308]	; (80075c0 <Lslalom_R180+0x270>)
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b04      	cmp	r3, #4
 8007490:	d12d      	bne.n	80074ee <Lslalom_R180+0x19e>
		slalomF(10000, SPEED_4, LROTATE_4_OFFSET_F, LROTATE_4_WALL_FL, LROTATE_4_WALL_FR);
 8007492:	2364      	movs	r3, #100	; 0x64
 8007494:	9300      	str	r3, [sp, #0]
 8007496:	23c8      	movs	r3, #200	; 0xc8
 8007498:	221c      	movs	r2, #28
 800749a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800749e:	f242 7010 	movw	r0, #10000	; 0x2710
 80074a2:	f7fd fffb 	bl	800549c <slalomF>
		slalomR(-LROTATE_4_DEGACCEL, -LROTATE_4_OMEGA, -170, SPEED_4);
 80074a6:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80074aa:	f06f 02a9 	mvn.w	r2, #169	; 0xa9
 80074ae:	494a      	ldr	r1, [pc, #296]	; (80075d8 <Lslalom_R180+0x288>)
 80074b0:	4848      	ldr	r0, [pc, #288]	; (80075d4 <Lslalom_R180+0x284>)
 80074b2:	f7fe f8a9 	bl	8005608 <slalomR>
		if(!MF.FLAG.XDIR){
 80074b6:	4b45      	ldr	r3, [pc, #276]	; (80075cc <Lslalom_R180+0x27c>)
 80074b8:	881b      	ldrh	r3, [r3, #0]
 80074ba:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d108      	bne.n	80074d6 <Lslalom_R180+0x186>
			turn_dir(DIR_TURN_R90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80074c4:	2101      	movs	r1, #1
 80074c6:	2001      	movs	r0, #1
 80074c8:	f009 f862 	bl	8010590 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80074cc:	2101      	movs	r1, #1
 80074ce:	2001      	movs	r0, #1
 80074d0:	f009 f85e 	bl	8010590 <turn_dir>
 80074d4:	e003      	b.n	80074de <Lslalom_R180+0x18e>
			turn_dir(DIR_TURN_R180_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80074d6:	2103      	movs	r1, #3
 80074d8:	2004      	movs	r0, #4
 80074da:	f009 f859 	bl	8010590 <turn_dir>
		slalomB(10000, SPEED_4, LROTATE_4_OFFSET_B);
 80074de:	225f      	movs	r2, #95	; 0x5f
 80074e0:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80074e4:	f242 7010 	movw	r0, #10000	; 0x2710
 80074e8:	f7fe f9b0 	bl	800584c <slalomB>
}
 80074ec:	e064      	b.n	80075b8 <Lslalom_R180+0x268>
	}else if(run_mode == 5){
 80074ee:	4b34      	ldr	r3, [pc, #208]	; (80075c0 <Lslalom_R180+0x270>)
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b05      	cmp	r3, #5
 80074f6:	d12d      	bne.n	8007554 <Lslalom_R180+0x204>
		slalomF(10000, SPEED_5, LROTATE_5_OFFSET_F, LROTATE_5_WALL_FL, LROTATE_5_WALL_FR);
 80074f8:	236e      	movs	r3, #110	; 0x6e
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	23dc      	movs	r3, #220	; 0xdc
 80074fe:	2232      	movs	r2, #50	; 0x32
 8007500:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007504:	f242 7010 	movw	r0, #10000	; 0x2710
 8007508:	f7fd ffc8 	bl	800549c <slalomF>
		slalomR(-LROTATE_5_DEGACCEL, -LROTATE_5_OMEGA, -170, SPEED_5);
 800750c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007510:	f06f 02a9 	mvn.w	r2, #169	; 0xa9
 8007514:	4931      	ldr	r1, [pc, #196]	; (80075dc <Lslalom_R180+0x28c>)
 8007516:	4832      	ldr	r0, [pc, #200]	; (80075e0 <Lslalom_R180+0x290>)
 8007518:	f7fe f876 	bl	8005608 <slalomR>
		if(!MF.FLAG.XDIR){
 800751c:	4b2b      	ldr	r3, [pc, #172]	; (80075cc <Lslalom_R180+0x27c>)
 800751e:	881b      	ldrh	r3, [r3, #0]
 8007520:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d108      	bne.n	800753c <Lslalom_R180+0x1ec>
			turn_dir(DIR_TURN_R90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800752a:	2101      	movs	r1, #1
 800752c:	2001      	movs	r0, #1
 800752e:	f009 f82f 	bl	8010590 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007532:	2101      	movs	r1, #1
 8007534:	2001      	movs	r0, #1
 8007536:	f009 f82b 	bl	8010590 <turn_dir>
 800753a:	e003      	b.n	8007544 <Lslalom_R180+0x1f4>
			turn_dir(DIR_TURN_R180_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800753c:	2103      	movs	r1, #3
 800753e:	2004      	movs	r0, #4
 8007540:	f009 f826 	bl	8010590 <turn_dir>
		slalomB(10000, SPEED_5, LROTATE_5_OFFSET_B);
 8007544:	2282      	movs	r2, #130	; 0x82
 8007546:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800754a:	f242 7010 	movw	r0, #10000	; 0x2710
 800754e:	f7fe f97d 	bl	800584c <slalomB>
}
 8007552:	e031      	b.n	80075b8 <Lslalom_R180+0x268>
	}else if(run_mode == 6){
 8007554:	4b1a      	ldr	r3, [pc, #104]	; (80075c0 <Lslalom_R180+0x270>)
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	b2db      	uxtb	r3, r3
 800755a:	2b06      	cmp	r3, #6
 800755c:	d12c      	bne.n	80075b8 <Lslalom_R180+0x268>
		slalomF(10000, SPEED_6, LROTATE_6_OFFSET_F, LROTATE_6_WALL_FL, LROTATE_6_WALL_FR);
 800755e:	236e      	movs	r3, #110	; 0x6e
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	23dc      	movs	r3, #220	; 0xdc
 8007564:	221e      	movs	r2, #30
 8007566:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800756a:	f242 7010 	movw	r0, #10000	; 0x2710
 800756e:	f7fd ff95 	bl	800549c <slalomF>
		slalomR(-LROTATE_6_DEGACCEL, -LROTATE_6_OMEGA, -160, SPEED_6);
 8007572:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8007576:	f06f 029f 	mvn.w	r2, #159	; 0x9f
 800757a:	491a      	ldr	r1, [pc, #104]	; (80075e4 <Lslalom_R180+0x294>)
 800757c:	4818      	ldr	r0, [pc, #96]	; (80075e0 <Lslalom_R180+0x290>)
 800757e:	f7fe f843 	bl	8005608 <slalomR>
		if(!MF.FLAG.XDIR){
 8007582:	4b12      	ldr	r3, [pc, #72]	; (80075cc <Lslalom_R180+0x27c>)
 8007584:	881b      	ldrh	r3, [r3, #0]
 8007586:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800758a:	b2db      	uxtb	r3, r3
 800758c:	2b00      	cmp	r3, #0
 800758e:	d108      	bne.n	80075a2 <Lslalom_R180+0x252>
			turn_dir(DIR_TURN_R90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007590:	2101      	movs	r1, #1
 8007592:	2001      	movs	r0, #1
 8007594:	f008 fffc 	bl	8010590 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007598:	2101      	movs	r1, #1
 800759a:	2001      	movs	r0, #1
 800759c:	f008 fff8 	bl	8010590 <turn_dir>
 80075a0:	e003      	b.n	80075aa <Lslalom_R180+0x25a>
			turn_dir(DIR_TURN_R180_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80075a2:	2103      	movs	r1, #3
 80075a4:	2004      	movs	r0, #4
 80075a6:	f008 fff3 	bl	8010590 <turn_dir>
		slalomB(10000, SPEED_6, LROTATE_6_OFFSET_B);
 80075aa:	229b      	movs	r2, #155	; 0x9b
 80075ac:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80075b0:	f242 7010 	movw	r0, #10000	; 0x2710
 80075b4:	f7fe f94a 	bl	800584c <slalomB>
}
 80075b8:	bf00      	nop
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	20000456 	.word	0x20000456
 80075c4:	fffffefc 	.word	0xfffffefc
 80075c8:	fffff830 	.word	0xfffff830
 80075cc:	20000fa8 	.word	0x20000fa8
 80075d0:	fffffe74 	.word	0xfffffe74
 80075d4:	fffff448 	.word	0xfffff448
 80075d8:	fffffdc6 	.word	0xfffffdc6
 80075dc:	fffffd94 	.word	0xfffffd94
 80075e0:	ffffe0c0 	.word	0xffffe0c0
 80075e4:	fffffd08 	.word	0xfffffd08

080075e8 <Lslalom_L180>:
//Lslalom_L180
// 大回りスラロームで右に180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L180(void){
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af02      	add	r7, sp, #8
	full_led_write1(GREEN);
 80075ee:	2002      	movs	r0, #2
 80075f0:	f00a fe62 	bl	80122b8 <full_led_write1>
	if(run_mode == 1){
 80075f4:	4b9b      	ldr	r3, [pc, #620]	; (8007864 <Lslalom_L180+0x27c>)
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d12b      	bne.n	8007656 <Lslalom_L180+0x6e>
		slalomF(10000, SPEED_1, LROTATE_OFFSET_F, LROTATE_WALL_FL, LROTATE_WALL_FR);
 80075fe:	2364      	movs	r3, #100	; 0x64
 8007600:	9300      	str	r3, [sp, #0]
 8007602:	23c8      	movs	r3, #200	; 0xc8
 8007604:	223c      	movs	r2, #60	; 0x3c
 8007606:	21c8      	movs	r1, #200	; 0xc8
 8007608:	f242 7010 	movw	r0, #10000	; 0x2710
 800760c:	f7fd ff46 	bl	800549c <slalomF>
		slalomR(LROTATE_DEGACCEL, LROTATE_OMEGA, 180, SPEED_1);
 8007610:	23c8      	movs	r3, #200	; 0xc8
 8007612:	22b4      	movs	r2, #180	; 0xb4
 8007614:	f44f 7182 	mov.w	r1, #260	; 0x104
 8007618:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800761c:	f7fd fff4 	bl	8005608 <slalomR>

		if(!MF.FLAG.XDIR){
 8007620:	4b91      	ldr	r3, [pc, #580]	; (8007868 <Lslalom_L180+0x280>)
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007628:	b2db      	uxtb	r3, r3
 800762a:	2b00      	cmp	r3, #0
 800762c:	d108      	bne.n	8007640 <Lslalom_L180+0x58>
			turn_dir(DIR_TURN_L90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800762e:	2101      	movs	r1, #1
 8007630:	20ff      	movs	r0, #255	; 0xff
 8007632:	f008 ffad 	bl	8010590 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007636:	2101      	movs	r1, #1
 8007638:	20ff      	movs	r0, #255	; 0xff
 800763a:	f008 ffa9 	bl	8010590 <turn_dir>
 800763e:	e003      	b.n	8007648 <Lslalom_L180+0x60>
		}else{
			turn_dir(DIR_TURN_L180_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007640:	2103      	movs	r1, #3
 8007642:	20fc      	movs	r0, #252	; 0xfc
 8007644:	f008 ffa4 	bl	8010590 <turn_dir>
		}
		slalomB(10000, SPEED_1, LROTATE_OFFSET_B);
 8007648:	2250      	movs	r2, #80	; 0x50
 800764a:	21c8      	movs	r1, #200	; 0xc8
 800764c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007650:	f7fe f8fc 	bl	800584c <slalomB>
		}else{
			turn_dir(DIR_TURN_L180_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_6, LROTATE_6_OFFSET_B);
	}
}
 8007654:	e102      	b.n	800785c <Lslalom_L180+0x274>
	}else if(run_mode == 2){
 8007656:	4b83      	ldr	r3, [pc, #524]	; (8007864 <Lslalom_L180+0x27c>)
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	b2db      	uxtb	r3, r3
 800765c:	2b02      	cmp	r3, #2
 800765e:	d12e      	bne.n	80076be <Lslalom_L180+0xd6>
		slalomF(10000, SPEED_2, LROTATE_2_OFFSET_F, LROTATE_2_WALL_FL, LROTATE_2_WALL_FR);
 8007660:	2364      	movs	r3, #100	; 0x64
 8007662:	9300      	str	r3, [sp, #0]
 8007664:	23c8      	movs	r3, #200	; 0xc8
 8007666:	223c      	movs	r2, #60	; 0x3c
 8007668:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800766c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007670:	f7fd ff14 	bl	800549c <slalomF>
		slalomR(LROTATE_2_DEGACCEL, LROTATE_2_OMEGA, 180, SPEED_2);
 8007674:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007678:	22b4      	movs	r2, #180	; 0xb4
 800767a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800767e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007682:	f7fd ffc1 	bl	8005608 <slalomR>
		if(!MF.FLAG.XDIR){
 8007686:	4b78      	ldr	r3, [pc, #480]	; (8007868 <Lslalom_L180+0x280>)
 8007688:	881b      	ldrh	r3, [r3, #0]
 800768a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800768e:	b2db      	uxtb	r3, r3
 8007690:	2b00      	cmp	r3, #0
 8007692:	d108      	bne.n	80076a6 <Lslalom_L180+0xbe>
			turn_dir(DIR_TURN_L90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007694:	2101      	movs	r1, #1
 8007696:	20ff      	movs	r0, #255	; 0xff
 8007698:	f008 ff7a 	bl	8010590 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800769c:	2101      	movs	r1, #1
 800769e:	20ff      	movs	r0, #255	; 0xff
 80076a0:	f008 ff76 	bl	8010590 <turn_dir>
 80076a4:	e003      	b.n	80076ae <Lslalom_L180+0xc6>
			turn_dir(DIR_TURN_L180_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80076a6:	2103      	movs	r1, #3
 80076a8:	20fc      	movs	r0, #252	; 0xfc
 80076aa:	f008 ff71 	bl	8010590 <turn_dir>
		slalomB(10000, SPEED_2, LROTATE_2_OFFSET_B);
 80076ae:	2250      	movs	r2, #80	; 0x50
 80076b0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80076b4:	f242 7010 	movw	r0, #10000	; 0x2710
 80076b8:	f7fe f8c8 	bl	800584c <slalomB>
}
 80076bc:	e0ce      	b.n	800785c <Lslalom_L180+0x274>
	}else if(run_mode == 3){
 80076be:	4b69      	ldr	r3, [pc, #420]	; (8007864 <Lslalom_L180+0x27c>)
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	2b03      	cmp	r3, #3
 80076c6:	d12e      	bne.n	8007726 <Lslalom_L180+0x13e>
		slalomF(10000, SPEED_3, LROTATE_3_OFFSET_F, LROTATE_3_WALL_FL, LROTATE_3_WALL_FR);
 80076c8:	2364      	movs	r3, #100	; 0x64
 80076ca:	9300      	str	r3, [sp, #0]
 80076cc:	23c8      	movs	r3, #200	; 0xc8
 80076ce:	2232      	movs	r2, #50	; 0x32
 80076d0:	f44f 7116 	mov.w	r1, #600	; 0x258
 80076d4:	f242 7010 	movw	r0, #10000	; 0x2710
 80076d8:	f7fd fee0 	bl	800549c <slalomF>
		slalomR(LROTATE_3_DEGACCEL, LROTATE_3_OMEGA, 170, SPEED_3);
 80076dc:	f44f 7316 	mov.w	r3, #600	; 0x258
 80076e0:	22aa      	movs	r2, #170	; 0xaa
 80076e2:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80076e6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80076ea:	f7fd ff8d 	bl	8005608 <slalomR>
		if(!MF.FLAG.XDIR){
 80076ee:	4b5e      	ldr	r3, [pc, #376]	; (8007868 <Lslalom_L180+0x280>)
 80076f0:	881b      	ldrh	r3, [r3, #0]
 80076f2:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d108      	bne.n	800770e <Lslalom_L180+0x126>
			turn_dir(DIR_TURN_L90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80076fc:	2101      	movs	r1, #1
 80076fe:	20ff      	movs	r0, #255	; 0xff
 8007700:	f008 ff46 	bl	8010590 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007704:	2101      	movs	r1, #1
 8007706:	20ff      	movs	r0, #255	; 0xff
 8007708:	f008 ff42 	bl	8010590 <turn_dir>
 800770c:	e003      	b.n	8007716 <Lslalom_L180+0x12e>
			turn_dir(DIR_TURN_L180_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800770e:	2103      	movs	r1, #3
 8007710:	20fc      	movs	r0, #252	; 0xfc
 8007712:	f008 ff3d 	bl	8010590 <turn_dir>
		slalomB(10000, SPEED_3, LROTATE_3_OFFSET_B);
 8007716:	224e      	movs	r2, #78	; 0x4e
 8007718:	f44f 7116 	mov.w	r1, #600	; 0x258
 800771c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007720:	f7fe f894 	bl	800584c <slalomB>
}
 8007724:	e09a      	b.n	800785c <Lslalom_L180+0x274>
	}else if(run_mode == 4){
 8007726:	4b4f      	ldr	r3, [pc, #316]	; (8007864 <Lslalom_L180+0x27c>)
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	b2db      	uxtb	r3, r3
 800772c:	2b04      	cmp	r3, #4
 800772e:	d12e      	bne.n	800778e <Lslalom_L180+0x1a6>
		slalomF(10000, SPEED_4, LROTATE_4_OFFSET_F, LROTATE_4_WALL_FL, LROTATE_4_WALL_FR);
 8007730:	2364      	movs	r3, #100	; 0x64
 8007732:	9300      	str	r3, [sp, #0]
 8007734:	23c8      	movs	r3, #200	; 0xc8
 8007736:	221c      	movs	r2, #28
 8007738:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800773c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007740:	f7fd feac 	bl	800549c <slalomF>
		slalomR(LROTATE_4_DEGACCEL, LROTATE_4_OMEGA, 170, SPEED_4);
 8007744:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8007748:	22aa      	movs	r2, #170	; 0xaa
 800774a:	f240 213a 	movw	r1, #570	; 0x23a
 800774e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007752:	f7fd ff59 	bl	8005608 <slalomR>
		if(!MF.FLAG.XDIR){
 8007756:	4b44      	ldr	r3, [pc, #272]	; (8007868 <Lslalom_L180+0x280>)
 8007758:	881b      	ldrh	r3, [r3, #0]
 800775a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800775e:	b2db      	uxtb	r3, r3
 8007760:	2b00      	cmp	r3, #0
 8007762:	d108      	bne.n	8007776 <Lslalom_L180+0x18e>
			turn_dir(DIR_TURN_L90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007764:	2101      	movs	r1, #1
 8007766:	20ff      	movs	r0, #255	; 0xff
 8007768:	f008 ff12 	bl	8010590 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800776c:	2101      	movs	r1, #1
 800776e:	20ff      	movs	r0, #255	; 0xff
 8007770:	f008 ff0e 	bl	8010590 <turn_dir>
 8007774:	e003      	b.n	800777e <Lslalom_L180+0x196>
			turn_dir(DIR_TURN_L180_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007776:	2103      	movs	r1, #3
 8007778:	20fc      	movs	r0, #252	; 0xfc
 800777a:	f008 ff09 	bl	8010590 <turn_dir>
		slalomB(10000, SPEED_4, LROTATE_4_OFFSET_B);
 800777e:	225f      	movs	r2, #95	; 0x5f
 8007780:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8007784:	f242 7010 	movw	r0, #10000	; 0x2710
 8007788:	f7fe f860 	bl	800584c <slalomB>
}
 800778c:	e066      	b.n	800785c <Lslalom_L180+0x274>
	}else if(run_mode == 5){
 800778e:	4b35      	ldr	r3, [pc, #212]	; (8007864 <Lslalom_L180+0x27c>)
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	b2db      	uxtb	r3, r3
 8007794:	2b05      	cmp	r3, #5
 8007796:	d12e      	bne.n	80077f6 <Lslalom_L180+0x20e>
		slalomF(10000, SPEED_5, LROTATE_5_OFFSET_F, LROTATE_5_WALL_FL, LROTATE_5_WALL_FR);
 8007798:	236e      	movs	r3, #110	; 0x6e
 800779a:	9300      	str	r3, [sp, #0]
 800779c:	23dc      	movs	r3, #220	; 0xdc
 800779e:	2232      	movs	r2, #50	; 0x32
 80077a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80077a4:	f242 7010 	movw	r0, #10000	; 0x2710
 80077a8:	f7fd fe78 	bl	800549c <slalomF>
		slalomR(LROTATE_5_DEGACCEL, LROTATE_5_OMEGA, 170, SPEED_5);
 80077ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80077b0:	22aa      	movs	r2, #170	; 0xaa
 80077b2:	f44f 711b 	mov.w	r1, #620	; 0x26c
 80077b6:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80077ba:	f7fd ff25 	bl	8005608 <slalomR>
		if(!MF.FLAG.XDIR){
 80077be:	4b2a      	ldr	r3, [pc, #168]	; (8007868 <Lslalom_L180+0x280>)
 80077c0:	881b      	ldrh	r3, [r3, #0]
 80077c2:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d108      	bne.n	80077de <Lslalom_L180+0x1f6>
			turn_dir(DIR_TURN_L90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80077cc:	2101      	movs	r1, #1
 80077ce:	20ff      	movs	r0, #255	; 0xff
 80077d0:	f008 fede 	bl	8010590 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80077d4:	2101      	movs	r1, #1
 80077d6:	20ff      	movs	r0, #255	; 0xff
 80077d8:	f008 feda 	bl	8010590 <turn_dir>
 80077dc:	e003      	b.n	80077e6 <Lslalom_L180+0x1fe>
			turn_dir(DIR_TURN_L180_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80077de:	2103      	movs	r1, #3
 80077e0:	20fc      	movs	r0, #252	; 0xfc
 80077e2:	f008 fed5 	bl	8010590 <turn_dir>
		slalomB(10000, SPEED_5, LROTATE_5_OFFSET_B);
 80077e6:	2282      	movs	r2, #130	; 0x82
 80077e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80077ec:	f242 7010 	movw	r0, #10000	; 0x2710
 80077f0:	f7fe f82c 	bl	800584c <slalomB>
}
 80077f4:	e032      	b.n	800785c <Lslalom_L180+0x274>
	}else if(run_mode == 6){
 80077f6:	4b1b      	ldr	r3, [pc, #108]	; (8007864 <Lslalom_L180+0x27c>)
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	2b06      	cmp	r3, #6
 80077fe:	d12d      	bne.n	800785c <Lslalom_L180+0x274>
		slalomF(10000, SPEED_6, LROTATE_6_OFFSET_F, LROTATE_6_WALL_FL, LROTATE_6_WALL_FR);
 8007800:	236e      	movs	r3, #110	; 0x6e
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	23dc      	movs	r3, #220	; 0xdc
 8007806:	221e      	movs	r2, #30
 8007808:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800780c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007810:	f7fd fe44 	bl	800549c <slalomF>
		slalomR(LROTATE_6_DEGACCEL, LROTATE_6_OMEGA, 160, SPEED_6);
 8007814:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8007818:	22a0      	movs	r2, #160	; 0xa0
 800781a:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 800781e:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007822:	f7fd fef1 	bl	8005608 <slalomR>
		if(!MF.FLAG.XDIR){
 8007826:	4b10      	ldr	r3, [pc, #64]	; (8007868 <Lslalom_L180+0x280>)
 8007828:	881b      	ldrh	r3, [r3, #0]
 800782a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800782e:	b2db      	uxtb	r3, r3
 8007830:	2b00      	cmp	r3, #0
 8007832:	d108      	bne.n	8007846 <Lslalom_L180+0x25e>
			turn_dir(DIR_TURN_L90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007834:	2101      	movs	r1, #1
 8007836:	20ff      	movs	r0, #255	; 0xff
 8007838:	f008 feaa 	bl	8010590 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800783c:	2101      	movs	r1, #1
 800783e:	20ff      	movs	r0, #255	; 0xff
 8007840:	f008 fea6 	bl	8010590 <turn_dir>
 8007844:	e003      	b.n	800784e <Lslalom_L180+0x266>
			turn_dir(DIR_TURN_L180_8, 3);								//aマイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007846:	2103      	movs	r1, #3
 8007848:	20fc      	movs	r0, #252	; 0xfc
 800784a:	f008 fea1 	bl	8010590 <turn_dir>
		slalomB(10000, SPEED_6, LROTATE_6_OFFSET_B);
 800784e:	229b      	movs	r2, #155	; 0x9b
 8007850:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007854:	f242 7010 	movw	r0, #10000	; 0x2710
 8007858:	f7fd fff8 	bl	800584c <slalomB>
}
 800785c:	bf00      	nop
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	20000456 	.word	0x20000456
 8007868:	20000fa8 	.word	0x20000fa8

0800786c <v_R45>:
//v_R45
// 区画中心から右に45度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R45(void){
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af02      	add	r7, sp, #8
	full_led_write1(PURPLE);
 8007872:	2005      	movs	r0, #5
 8007874:	f00a fd20 	bl	80122b8 <full_led_write1>
	if(run_mode == 1){
 8007878:	4bbf      	ldr	r3, [pc, #764]	; (8007b78 <v_R45+0x30c>)
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	b2db      	uxtb	r3, r3
 800787e:	2b01      	cmp	r3, #1
 8007880:	d150      	bne.n	8007924 <v_R45+0xb8>
		if(!MF2.FLAG.V){
 8007882:	4bbe      	ldr	r3, [pc, #760]	; (8007b7c <v_R45+0x310>)
 8007884:	881b      	ldrh	r3, [r3, #0]
 8007886:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800788a:	b2db      	uxtb	r3, r3
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10b      	bne.n	80078a8 <v_R45+0x3c>
			slalomF(10000, SPEED_1, V45_OFFSET_F, NO_WALL, NO_WALL);
 8007890:	f241 3388 	movw	r3, #5000	; 0x1388
 8007894:	9300      	str	r3, [sp, #0]
 8007896:	f241 3388 	movw	r3, #5000	; 0x1388
 800789a:	2228      	movs	r2, #40	; 0x28
 800789c:	21c8      	movs	r1, #200	; 0xc8
 800789e:	f242 7010 	movw	r0, #10000	; 0x2710
 80078a2:	f7fd fdfb 	bl	800549c <slalomF>
 80078a6:	e00a      	b.n	80078be <v_R45+0x52>
		}else{
			slalomF(10000, SPEED_1, V45_OFFSET_VF, NO_WALL, NO_WALL);
 80078a8:	f241 3388 	movw	r3, #5000	; 0x1388
 80078ac:	9300      	str	r3, [sp, #0]
 80078ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80078b2:	2255      	movs	r2, #85	; 0x55
 80078b4:	21c8      	movs	r1, #200	; 0xc8
 80078b6:	f242 7010 	movw	r0, #10000	; 0x2710
 80078ba:	f7fd fdef 	bl	800549c <slalomF>
		}
		slalomR(-V45_DEGACCEL, -V45_OMEGA, -45, SPEED_1);
 80078be:	23c8      	movs	r3, #200	; 0xc8
 80078c0:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 80078c4:	49ae      	ldr	r1, [pc, #696]	; (8007b80 <v_R45+0x314>)
 80078c6:	48af      	ldr	r0, [pc, #700]	; (8007b84 <v_R45+0x318>)
 80078c8:	f7fd fe9e 	bl	8005608 <slalomR>

		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80078cc:	2103      	movs	r1, #3
 80078ce:	2001      	movs	r0, #1
 80078d0:	f008 fe5e 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80078d4:	4ba9      	ldr	r3, [pc, #676]	; (8007b7c <v_R45+0x310>)
 80078d6:	881b      	ldrh	r3, [r3, #0]
 80078d8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	3301      	adds	r3, #1
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	bfb8      	it	lt
 80078e8:	425b      	neglt	r3, r3
 80078ea:	f003 0301 	and.w	r3, r3, #1
 80078ee:	b2d9      	uxtb	r1, r3
 80078f0:	4aa2      	ldr	r2, [pc, #648]	; (8007b7c <v_R45+0x310>)
 80078f2:	8813      	ldrh	r3, [r2, #0]
 80078f4:	f361 03c3 	bfi	r3, r1, #3, #1
 80078f8:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 80078fa:	4ba0      	ldr	r3, [pc, #640]	; (8007b7c <v_R45+0x310>)
 80078fc:	881b      	ldrh	r3, [r3, #0]
 80078fe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007902:	b2db      	uxtb	r3, r3
 8007904:	2b00      	cmp	r3, #0
 8007906:	d106      	bne.n	8007916 <v_R45+0xaa>
			slalomB(10000, SPEED_1, V45_OFFSET_VB);
 8007908:	2228      	movs	r2, #40	; 0x28
 800790a:	21c8      	movs	r1, #200	; 0xc8
 800790c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007910:	f7fd ff9c 	bl	800584c <slalomB>
			slalomB(10000, SPEED_5, V45_5_OFFSET_VB);
		}else{
			slalomB(10000, SPEED_5, V45_5_OFFSET_B);
		}
	}
}
 8007914:	e1d8      	b.n	8007cc8 <v_R45+0x45c>
			slalomB(10000, SPEED_1, V45_OFFSET_B);
 8007916:	2255      	movs	r2, #85	; 0x55
 8007918:	21c8      	movs	r1, #200	; 0xc8
 800791a:	f242 7010 	movw	r0, #10000	; 0x2710
 800791e:	f7fd ff95 	bl	800584c <slalomB>
}
 8007922:	e1d1      	b.n	8007cc8 <v_R45+0x45c>
	}else if(run_mode == 2){
 8007924:	4b94      	ldr	r3, [pc, #592]	; (8007b78 <v_R45+0x30c>)
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b02      	cmp	r3, #2
 800792c:	d155      	bne.n	80079da <v_R45+0x16e>
		if(!MF2.FLAG.V){
 800792e:	4b93      	ldr	r3, [pc, #588]	; (8007b7c <v_R45+0x310>)
 8007930:	881b      	ldrh	r3, [r3, #0]
 8007932:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007936:	b2db      	uxtb	r3, r3
 8007938:	2b00      	cmp	r3, #0
 800793a:	d10c      	bne.n	8007956 <v_R45+0xea>
			slalomF(10000, SPEED_2, V45_2_OFFSET_F, NO_WALL, NO_WALL);
 800793c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007940:	9300      	str	r3, [sp, #0]
 8007942:	f241 3388 	movw	r3, #5000	; 0x1388
 8007946:	2228      	movs	r2, #40	; 0x28
 8007948:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800794c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007950:	f7fd fda4 	bl	800549c <slalomF>
 8007954:	e00b      	b.n	800796e <v_R45+0x102>
			slalomF(10000, SPEED_2, V45_2_OFFSET_VF, NO_WALL, NO_WALL);
 8007956:	f241 3388 	movw	r3, #5000	; 0x1388
 800795a:	9300      	str	r3, [sp, #0]
 800795c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007960:	2255      	movs	r2, #85	; 0x55
 8007962:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007966:	f242 7010 	movw	r0, #10000	; 0x2710
 800796a:	f7fd fd97 	bl	800549c <slalomF>
		slalomR(-V45_2_DEGACCEL, -V45_2_OMEGA, -45, SPEED_2);
 800796e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007972:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007976:	4982      	ldr	r1, [pc, #520]	; (8007b80 <v_R45+0x314>)
 8007978:	4882      	ldr	r0, [pc, #520]	; (8007b84 <v_R45+0x318>)
 800797a:	f7fd fe45 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800797e:	2103      	movs	r1, #3
 8007980:	2001      	movs	r0, #1
 8007982:	f008 fe05 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007986:	4b7d      	ldr	r3, [pc, #500]	; (8007b7c <v_R45+0x310>)
 8007988:	881b      	ldrh	r3, [r3, #0]
 800798a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800798e:	b2db      	uxtb	r3, r3
 8007990:	3301      	adds	r3, #1
 8007992:	2b00      	cmp	r3, #0
 8007994:	f003 0301 	and.w	r3, r3, #1
 8007998:	bfb8      	it	lt
 800799a:	425b      	neglt	r3, r3
 800799c:	f003 0301 	and.w	r3, r3, #1
 80079a0:	b2d9      	uxtb	r1, r3
 80079a2:	4a76      	ldr	r2, [pc, #472]	; (8007b7c <v_R45+0x310>)
 80079a4:	8813      	ldrh	r3, [r2, #0]
 80079a6:	f361 03c3 	bfi	r3, r1, #3, #1
 80079aa:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 80079ac:	4b73      	ldr	r3, [pc, #460]	; (8007b7c <v_R45+0x310>)
 80079ae:	881b      	ldrh	r3, [r3, #0]
 80079b0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d107      	bne.n	80079ca <v_R45+0x15e>
			slalomB(10000, SPEED_2, V45_2_OFFSET_VB);
 80079ba:	2228      	movs	r2, #40	; 0x28
 80079bc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80079c0:	f242 7010 	movw	r0, #10000	; 0x2710
 80079c4:	f7fd ff42 	bl	800584c <slalomB>
}
 80079c8:	e17e      	b.n	8007cc8 <v_R45+0x45c>
			slalomB(10000, SPEED_2, V45_2_OFFSET_B);
 80079ca:	2255      	movs	r2, #85	; 0x55
 80079cc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80079d0:	f242 7010 	movw	r0, #10000	; 0x2710
 80079d4:	f7fd ff3a 	bl	800584c <slalomB>
}
 80079d8:	e176      	b.n	8007cc8 <v_R45+0x45c>
	}else if(run_mode == 3){
 80079da:	4b67      	ldr	r3, [pc, #412]	; (8007b78 <v_R45+0x30c>)
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	2b03      	cmp	r3, #3
 80079e2:	d155      	bne.n	8007a90 <v_R45+0x224>
		if(!MF2.FLAG.V){
 80079e4:	4b65      	ldr	r3, [pc, #404]	; (8007b7c <v_R45+0x310>)
 80079e6:	881b      	ldrh	r3, [r3, #0]
 80079e8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10c      	bne.n	8007a0c <v_R45+0x1a0>
			slalomF(10000, SPEED_3, V45_3_OFFSET_F, NO_WALL, NO_WALL);
 80079f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80079f6:	9300      	str	r3, [sp, #0]
 80079f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80079fc:	2228      	movs	r2, #40	; 0x28
 80079fe:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007a02:	f242 7010 	movw	r0, #10000	; 0x2710
 8007a06:	f7fd fd49 	bl	800549c <slalomF>
 8007a0a:	e00b      	b.n	8007a24 <v_R45+0x1b8>
			slalomF(10000, SPEED_3, V45_3_OFFSET_VF, NO_WALL, NO_WALL);
 8007a0c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a10:	9300      	str	r3, [sp, #0]
 8007a12:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a16:	2249      	movs	r2, #73	; 0x49
 8007a18:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007a1c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007a20:	f7fd fd3c 	bl	800549c <slalomF>
		slalomR(-V45_3_DEGACCEL, -V45_3_OMEGA, -45, SPEED_3);
 8007a24:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007a28:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007a2c:	4956      	ldr	r1, [pc, #344]	; (8007b88 <v_R45+0x31c>)
 8007a2e:	4857      	ldr	r0, [pc, #348]	; (8007b8c <v_R45+0x320>)
 8007a30:	f7fd fdea 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007a34:	2103      	movs	r1, #3
 8007a36:	2001      	movs	r0, #1
 8007a38:	f008 fdaa 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007a3c:	4b4f      	ldr	r3, [pc, #316]	; (8007b7c <v_R45+0x310>)
 8007a3e:	881b      	ldrh	r3, [r3, #0]
 8007a40:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	3301      	adds	r3, #1
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f003 0301 	and.w	r3, r3, #1
 8007a4e:	bfb8      	it	lt
 8007a50:	425b      	neglt	r3, r3
 8007a52:	f003 0301 	and.w	r3, r3, #1
 8007a56:	b2d9      	uxtb	r1, r3
 8007a58:	4a48      	ldr	r2, [pc, #288]	; (8007b7c <v_R45+0x310>)
 8007a5a:	8813      	ldrh	r3, [r2, #0]
 8007a5c:	f361 03c3 	bfi	r3, r1, #3, #1
 8007a60:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007a62:	4b46      	ldr	r3, [pc, #280]	; (8007b7c <v_R45+0x310>)
 8007a64:	881b      	ldrh	r3, [r3, #0]
 8007a66:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d107      	bne.n	8007a80 <v_R45+0x214>
			slalomB(10000, SPEED_3, V45_3_OFFSET_VB);
 8007a70:	2237      	movs	r2, #55	; 0x37
 8007a72:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007a76:	f242 7010 	movw	r0, #10000	; 0x2710
 8007a7a:	f7fd fee7 	bl	800584c <slalomB>
}
 8007a7e:	e123      	b.n	8007cc8 <v_R45+0x45c>
			slalomB(10000, SPEED_3, V45_3_OFFSET_B);
 8007a80:	225d      	movs	r2, #93	; 0x5d
 8007a82:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007a86:	f242 7010 	movw	r0, #10000	; 0x2710
 8007a8a:	f7fd fedf 	bl	800584c <slalomB>
}
 8007a8e:	e11b      	b.n	8007cc8 <v_R45+0x45c>
	}else if(run_mode == 4){
 8007a90:	4b39      	ldr	r3, [pc, #228]	; (8007b78 <v_R45+0x30c>)
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b04      	cmp	r3, #4
 8007a98:	d155      	bne.n	8007b46 <v_R45+0x2da>
		if(!MF2.FLAG.V){
 8007a9a:	4b38      	ldr	r3, [pc, #224]	; (8007b7c <v_R45+0x310>)
 8007a9c:	881b      	ldrh	r3, [r3, #0]
 8007a9e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10c      	bne.n	8007ac2 <v_R45+0x256>
			slalomF(10000, SPEED_4, V45_4_OFFSET_F, NO_WALL, NO_WALL);
 8007aa8:	f241 3388 	movw	r3, #5000	; 0x1388
 8007aac:	9300      	str	r3, [sp, #0]
 8007aae:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ab2:	2217      	movs	r2, #23
 8007ab4:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8007ab8:	f242 7010 	movw	r0, #10000	; 0x2710
 8007abc:	f7fd fcee 	bl	800549c <slalomF>
 8007ac0:	e00b      	b.n	8007ada <v_R45+0x26e>
			slalomF(10000, SPEED_4, V45_4_OFFSET_VF, NO_WALL, NO_WALL);
 8007ac2:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ac6:	9300      	str	r3, [sp, #0]
 8007ac8:	f241 3388 	movw	r3, #5000	; 0x1388
 8007acc:	2237      	movs	r2, #55	; 0x37
 8007ace:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8007ad2:	f242 7010 	movw	r0, #10000	; 0x2710
 8007ad6:	f7fd fce1 	bl	800549c <slalomF>
		slalomR(-V45_4_DEGACCEL, -V45_4_OMEGA, -45, SPEED_4);
 8007ada:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8007ade:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007ae2:	4929      	ldr	r1, [pc, #164]	; (8007b88 <v_R45+0x31c>)
 8007ae4:	4829      	ldr	r0, [pc, #164]	; (8007b8c <v_R45+0x320>)
 8007ae6:	f7fd fd8f 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007aea:	2103      	movs	r1, #3
 8007aec:	2001      	movs	r0, #1
 8007aee:	f008 fd4f 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007af2:	4b22      	ldr	r3, [pc, #136]	; (8007b7c <v_R45+0x310>)
 8007af4:	881b      	ldrh	r3, [r3, #0]
 8007af6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	3301      	adds	r3, #1
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	f003 0301 	and.w	r3, r3, #1
 8007b04:	bfb8      	it	lt
 8007b06:	425b      	neglt	r3, r3
 8007b08:	f003 0301 	and.w	r3, r3, #1
 8007b0c:	b2d9      	uxtb	r1, r3
 8007b0e:	4a1b      	ldr	r2, [pc, #108]	; (8007b7c <v_R45+0x310>)
 8007b10:	8813      	ldrh	r3, [r2, #0]
 8007b12:	f361 03c3 	bfi	r3, r1, #3, #1
 8007b16:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007b18:	4b18      	ldr	r3, [pc, #96]	; (8007b7c <v_R45+0x310>)
 8007b1a:	881b      	ldrh	r3, [r3, #0]
 8007b1c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d107      	bne.n	8007b36 <v_R45+0x2ca>
			slalomB(10000, SPEED_4, V45_4_OFFSET_VB);
 8007b26:	2233      	movs	r2, #51	; 0x33
 8007b28:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8007b2c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007b30:	f7fd fe8c 	bl	800584c <slalomB>
}
 8007b34:	e0c8      	b.n	8007cc8 <v_R45+0x45c>
			slalomB(10000, SPEED_4, V45_4_OFFSET_B);
 8007b36:	224b      	movs	r2, #75	; 0x4b
 8007b38:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8007b3c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007b40:	f7fd fe84 	bl	800584c <slalomB>
}
 8007b44:	e0c0      	b.n	8007cc8 <v_R45+0x45c>
	}else if(run_mode == 5){
 8007b46:	4b0c      	ldr	r3, [pc, #48]	; (8007b78 <v_R45+0x30c>)
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	2b05      	cmp	r3, #5
 8007b4e:	d161      	bne.n	8007c14 <v_R45+0x3a8>
		if(!MF2.FLAG.V){
 8007b50:	4b0a      	ldr	r3, [pc, #40]	; (8007b7c <v_R45+0x310>)
 8007b52:	881b      	ldrh	r3, [r3, #0]
 8007b54:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d118      	bne.n	8007b90 <v_R45+0x324>
			slalomF(10000, SPEED_5, V45_5_OFFSET_F, NO_WALL, NO_WALL);
 8007b5e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b62:	9300      	str	r3, [sp, #0]
 8007b64:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b68:	2214      	movs	r2, #20
 8007b6a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007b6e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007b72:	f7fd fc93 	bl	800549c <slalomF>
 8007b76:	e017      	b.n	8007ba8 <v_R45+0x33c>
 8007b78:	20000456 	.word	0x20000456
 8007b7c:	20000fa4 	.word	0x20000fa4
 8007b80:	fffffed4 	.word	0xfffffed4
 8007b84:	fffff448 	.word	0xfffff448
 8007b88:	fffffe70 	.word	0xfffffe70
 8007b8c:	ffffe0c0 	.word	0xffffe0c0
			slalomF(10000, SPEED_5, V45_5_OFFSET_VF, NO_WALL, NO_WALL);
 8007b90:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b94:	9300      	str	r3, [sp, #0]
 8007b96:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b9a:	2214      	movs	r2, #20
 8007b9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007ba0:	f242 7010 	movw	r0, #10000	; 0x2710
 8007ba4:	f7fd fc7a 	bl	800549c <slalomF>
		slalomR(-V45_5_DEGACCEL, -V45_5_OMEGA, -45, SPEED_5);
 8007ba8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007bac:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007bb0:	4947      	ldr	r1, [pc, #284]	; (8007cd0 <v_R45+0x464>)
 8007bb2:	4848      	ldr	r0, [pc, #288]	; (8007cd4 <v_R45+0x468>)
 8007bb4:	f7fd fd28 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007bb8:	2103      	movs	r1, #3
 8007bba:	2001      	movs	r0, #1
 8007bbc:	f008 fce8 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007bc0:	4b45      	ldr	r3, [pc, #276]	; (8007cd8 <v_R45+0x46c>)
 8007bc2:	881b      	ldrh	r3, [r3, #0]
 8007bc4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	3301      	adds	r3, #1
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f003 0301 	and.w	r3, r3, #1
 8007bd2:	bfb8      	it	lt
 8007bd4:	425b      	neglt	r3, r3
 8007bd6:	f003 0301 	and.w	r3, r3, #1
 8007bda:	b2d9      	uxtb	r1, r3
 8007bdc:	4a3e      	ldr	r2, [pc, #248]	; (8007cd8 <v_R45+0x46c>)
 8007bde:	8813      	ldrh	r3, [r2, #0]
 8007be0:	f361 03c3 	bfi	r3, r1, #3, #1
 8007be4:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007be6:	4b3c      	ldr	r3, [pc, #240]	; (8007cd8 <v_R45+0x46c>)
 8007be8:	881b      	ldrh	r3, [r3, #0]
 8007bea:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d107      	bne.n	8007c04 <v_R45+0x398>
			slalomB(10000, SPEED_5, V45_5_OFFSET_VB);
 8007bf4:	223a      	movs	r2, #58	; 0x3a
 8007bf6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007bfa:	f242 7010 	movw	r0, #10000	; 0x2710
 8007bfe:	f7fd fe25 	bl	800584c <slalomB>
}
 8007c02:	e061      	b.n	8007cc8 <v_R45+0x45c>
			slalomB(10000, SPEED_5, V45_5_OFFSET_B);
 8007c04:	223a      	movs	r2, #58	; 0x3a
 8007c06:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007c0a:	f242 7010 	movw	r0, #10000	; 0x2710
 8007c0e:	f7fd fe1d 	bl	800584c <slalomB>
}
 8007c12:	e059      	b.n	8007cc8 <v_R45+0x45c>
	}else if(run_mode == 6){
 8007c14:	4b31      	ldr	r3, [pc, #196]	; (8007cdc <v_R45+0x470>)
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	2b06      	cmp	r3, #6
 8007c1c:	d154      	bne.n	8007cc8 <v_R45+0x45c>
		if(!MF2.FLAG.V){
 8007c1e:	4b2e      	ldr	r3, [pc, #184]	; (8007cd8 <v_R45+0x46c>)
 8007c20:	881b      	ldrh	r3, [r3, #0]
 8007c22:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d10c      	bne.n	8007c46 <v_R45+0x3da>
			slalomF(10000, SPEED_5, V45_5_OFFSET_F, NO_WALL, NO_WALL);
 8007c2c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c30:	9300      	str	r3, [sp, #0]
 8007c32:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c36:	2214      	movs	r2, #20
 8007c38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007c3c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007c40:	f7fd fc2c 	bl	800549c <slalomF>
 8007c44:	e00b      	b.n	8007c5e <v_R45+0x3f2>
			slalomF(10000, SPEED_5, V45_5_OFFSET_VF, NO_WALL, NO_WALL);
 8007c46:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c4a:	9300      	str	r3, [sp, #0]
 8007c4c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c50:	2214      	movs	r2, #20
 8007c52:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007c56:	f242 7010 	movw	r0, #10000	; 0x2710
 8007c5a:	f7fd fc1f 	bl	800549c <slalomF>
		slalomR(-V45_5_DEGACCEL, -V45_5_OMEGA, -45, SPEED_5);
 8007c5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c62:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007c66:	491a      	ldr	r1, [pc, #104]	; (8007cd0 <v_R45+0x464>)
 8007c68:	481a      	ldr	r0, [pc, #104]	; (8007cd4 <v_R45+0x468>)
 8007c6a:	f7fd fccd 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007c6e:	2103      	movs	r1, #3
 8007c70:	2001      	movs	r0, #1
 8007c72:	f008 fc8d 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007c76:	4b18      	ldr	r3, [pc, #96]	; (8007cd8 <v_R45+0x46c>)
 8007c78:	881b      	ldrh	r3, [r3, #0]
 8007c7a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	3301      	adds	r3, #1
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f003 0301 	and.w	r3, r3, #1
 8007c88:	bfb8      	it	lt
 8007c8a:	425b      	neglt	r3, r3
 8007c8c:	f003 0301 	and.w	r3, r3, #1
 8007c90:	b2d9      	uxtb	r1, r3
 8007c92:	4a11      	ldr	r2, [pc, #68]	; (8007cd8 <v_R45+0x46c>)
 8007c94:	8813      	ldrh	r3, [r2, #0]
 8007c96:	f361 03c3 	bfi	r3, r1, #3, #1
 8007c9a:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007c9c:	4b0e      	ldr	r3, [pc, #56]	; (8007cd8 <v_R45+0x46c>)
 8007c9e:	881b      	ldrh	r3, [r3, #0]
 8007ca0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d107      	bne.n	8007cba <v_R45+0x44e>
			slalomB(10000, SPEED_5, V45_5_OFFSET_VB);
 8007caa:	223a      	movs	r2, #58	; 0x3a
 8007cac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007cb0:	f242 7010 	movw	r0, #10000	; 0x2710
 8007cb4:	f7fd fdca 	bl	800584c <slalomB>
}
 8007cb8:	e006      	b.n	8007cc8 <v_R45+0x45c>
			slalomB(10000, SPEED_5, V45_5_OFFSET_B);
 8007cba:	223a      	movs	r2, #58	; 0x3a
 8007cbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007cc0:	f242 7010 	movw	r0, #10000	; 0x2710
 8007cc4:	f7fd fdc2 	bl	800584c <slalomB>
}
 8007cc8:	bf00      	nop
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	fffffda8 	.word	0xfffffda8
 8007cd4:	ffffd8f0 	.word	0xffffd8f0
 8007cd8:	20000fa4 	.word	0x20000fa4
 8007cdc:	20000456 	.word	0x20000456

08007ce0 <v_L45>:
//v_L45
// 区画中心から左に45度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L45(void){
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af02      	add	r7, sp, #8
	full_led_write1(YELLOW);
 8007ce6:	2006      	movs	r0, #6
 8007ce8:	f00a fae6 	bl	80122b8 <full_led_write1>
	if(run_mode == 1){
 8007cec:	4bc1      	ldr	r3, [pc, #772]	; (8007ff4 <v_L45+0x314>)
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d151      	bne.n	8007d9a <v_L45+0xba>
		if(!MF2.FLAG.V){
 8007cf6:	4bc0      	ldr	r3, [pc, #768]	; (8007ff8 <v_L45+0x318>)
 8007cf8:	881b      	ldrh	r3, [r3, #0]
 8007cfa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10b      	bne.n	8007d1c <v_L45+0x3c>
			slalomF(10000, SPEED_1, V45_OFFSET_F, NO_WALL, NO_WALL);
 8007d04:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d08:	9300      	str	r3, [sp, #0]
 8007d0a:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d0e:	2228      	movs	r2, #40	; 0x28
 8007d10:	21c8      	movs	r1, #200	; 0xc8
 8007d12:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d16:	f7fd fbc1 	bl	800549c <slalomF>
 8007d1a:	e00a      	b.n	8007d32 <v_L45+0x52>
		}else{
			slalomF(10000, SPEED_1, V45_OFFSET_VF, NO_WALL, NO_WALL);
 8007d1c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d20:	9300      	str	r3, [sp, #0]
 8007d22:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d26:	2255      	movs	r2, #85	; 0x55
 8007d28:	21c8      	movs	r1, #200	; 0xc8
 8007d2a:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d2e:	f7fd fbb5 	bl	800549c <slalomF>
		}
		slalomR(V45_DEGACCEL, V45_OMEGA, 45, SPEED_1);
 8007d32:	23c8      	movs	r3, #200	; 0xc8
 8007d34:	222d      	movs	r2, #45	; 0x2d
 8007d36:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007d3a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007d3e:	f7fd fc63 	bl	8005608 <slalomR>

		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007d42:	2103      	movs	r1, #3
 8007d44:	20ff      	movs	r0, #255	; 0xff
 8007d46:	f008 fc23 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007d4a:	4bab      	ldr	r3, [pc, #684]	; (8007ff8 <v_L45+0x318>)
 8007d4c:	881b      	ldrh	r3, [r3, #0]
 8007d4e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	3301      	adds	r3, #1
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	f003 0301 	and.w	r3, r3, #1
 8007d5c:	bfb8      	it	lt
 8007d5e:	425b      	neglt	r3, r3
 8007d60:	f003 0301 	and.w	r3, r3, #1
 8007d64:	b2d9      	uxtb	r1, r3
 8007d66:	4aa4      	ldr	r2, [pc, #656]	; (8007ff8 <v_L45+0x318>)
 8007d68:	8813      	ldrh	r3, [r2, #0]
 8007d6a:	f361 03c3 	bfi	r3, r1, #3, #1
 8007d6e:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 8007d70:	4ba1      	ldr	r3, [pc, #644]	; (8007ff8 <v_L45+0x318>)
 8007d72:	881b      	ldrh	r3, [r3, #0]
 8007d74:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d106      	bne.n	8007d8c <v_L45+0xac>
			slalomB(10000, SPEED_1, V45_OFFSET_VB);
 8007d7e:	2228      	movs	r2, #40	; 0x28
 8007d80:	21c8      	movs	r1, #200	; 0xc8
 8007d82:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d86:	f7fd fd61 	bl	800584c <slalomB>
			slalomB(10000, SPEED_5, V45_5_OFFSET_VB);
		}else{
			slalomB(10000, SPEED_5, V45_5_OFFSET_B);
		}
	}
}
 8007d8a:	e1d5      	b.n	8008138 <v_L45+0x458>
			slalomB(10000, SPEED_1, V45_OFFSET_B);
 8007d8c:	2255      	movs	r2, #85	; 0x55
 8007d8e:	21c8      	movs	r1, #200	; 0xc8
 8007d90:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d94:	f7fd fd5a 	bl	800584c <slalomB>
}
 8007d98:	e1ce      	b.n	8008138 <v_L45+0x458>
	}else if(run_mode == 2){
 8007d9a:	4b96      	ldr	r3, [pc, #600]	; (8007ff4 <v_L45+0x314>)
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d156      	bne.n	8007e52 <v_L45+0x172>
		if(!MF2.FLAG.V){
 8007da4:	4b94      	ldr	r3, [pc, #592]	; (8007ff8 <v_L45+0x318>)
 8007da6:	881b      	ldrh	r3, [r3, #0]
 8007da8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d10c      	bne.n	8007dcc <v_L45+0xec>
			slalomF(10000, SPEED_2, V45_2_OFFSET_F, NO_WALL, NO_WALL);
 8007db2:	f241 3388 	movw	r3, #5000	; 0x1388
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	f241 3388 	movw	r3, #5000	; 0x1388
 8007dbc:	2228      	movs	r2, #40	; 0x28
 8007dbe:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007dc2:	f242 7010 	movw	r0, #10000	; 0x2710
 8007dc6:	f7fd fb69 	bl	800549c <slalomF>
 8007dca:	e00b      	b.n	8007de4 <v_L45+0x104>
			slalomF(10000, SPEED_2, V45_2_OFFSET_VF, NO_WALL, NO_WALL);
 8007dcc:	f241 3388 	movw	r3, #5000	; 0x1388
 8007dd0:	9300      	str	r3, [sp, #0]
 8007dd2:	f241 3388 	movw	r3, #5000	; 0x1388
 8007dd6:	2255      	movs	r2, #85	; 0x55
 8007dd8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007ddc:	f242 7010 	movw	r0, #10000	; 0x2710
 8007de0:	f7fd fb5c 	bl	800549c <slalomF>
		slalomR(V45_2_DEGACCEL, V45_2_OMEGA, 45, SPEED_2);
 8007de4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007de8:	222d      	movs	r2, #45	; 0x2d
 8007dea:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007dee:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007df2:	f7fd fc09 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007df6:	2103      	movs	r1, #3
 8007df8:	20ff      	movs	r0, #255	; 0xff
 8007dfa:	f008 fbc9 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007dfe:	4b7e      	ldr	r3, [pc, #504]	; (8007ff8 <v_L45+0x318>)
 8007e00:	881b      	ldrh	r3, [r3, #0]
 8007e02:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	3301      	adds	r3, #1
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	f003 0301 	and.w	r3, r3, #1
 8007e10:	bfb8      	it	lt
 8007e12:	425b      	neglt	r3, r3
 8007e14:	f003 0301 	and.w	r3, r3, #1
 8007e18:	b2d9      	uxtb	r1, r3
 8007e1a:	4a77      	ldr	r2, [pc, #476]	; (8007ff8 <v_L45+0x318>)
 8007e1c:	8813      	ldrh	r3, [r2, #0]
 8007e1e:	f361 03c3 	bfi	r3, r1, #3, #1
 8007e22:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007e24:	4b74      	ldr	r3, [pc, #464]	; (8007ff8 <v_L45+0x318>)
 8007e26:	881b      	ldrh	r3, [r3, #0]
 8007e28:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d107      	bne.n	8007e42 <v_L45+0x162>
			slalomB(10000, SPEED_2, V45_2_OFFSET_VB);
 8007e32:	2228      	movs	r2, #40	; 0x28
 8007e34:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007e38:	f242 7010 	movw	r0, #10000	; 0x2710
 8007e3c:	f7fd fd06 	bl	800584c <slalomB>
}
 8007e40:	e17a      	b.n	8008138 <v_L45+0x458>
			slalomB(10000, SPEED_2, V45_2_OFFSET_B);
 8007e42:	2255      	movs	r2, #85	; 0x55
 8007e44:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007e48:	f242 7010 	movw	r0, #10000	; 0x2710
 8007e4c:	f7fd fcfe 	bl	800584c <slalomB>
}
 8007e50:	e172      	b.n	8008138 <v_L45+0x458>
	}else if(run_mode == 3){
 8007e52:	4b68      	ldr	r3, [pc, #416]	; (8007ff4 <v_L45+0x314>)
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	2b03      	cmp	r3, #3
 8007e5a:	d156      	bne.n	8007f0a <v_L45+0x22a>
		if(!MF2.FLAG.V){
 8007e5c:	4b66      	ldr	r3, [pc, #408]	; (8007ff8 <v_L45+0x318>)
 8007e5e:	881b      	ldrh	r3, [r3, #0]
 8007e60:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d10c      	bne.n	8007e84 <v_L45+0x1a4>
			slalomF(10000, SPEED_3, V45_3_OFFSET_F+5, NO_WALL, NO_WALL);
 8007e6a:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e6e:	9300      	str	r3, [sp, #0]
 8007e70:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e74:	222d      	movs	r2, #45	; 0x2d
 8007e76:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007e7a:	f242 7010 	movw	r0, #10000	; 0x2710
 8007e7e:	f7fd fb0d 	bl	800549c <slalomF>
 8007e82:	e00b      	b.n	8007e9c <v_L45+0x1bc>
			slalomF(10000, SPEED_3, V45_3_OFFSET_VF, NO_WALL, NO_WALL);
 8007e84:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e88:	9300      	str	r3, [sp, #0]
 8007e8a:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e8e:	2249      	movs	r2, #73	; 0x49
 8007e90:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007e94:	f242 7010 	movw	r0, #10000	; 0x2710
 8007e98:	f7fd fb00 	bl	800549c <slalomF>
		slalomR(V45_3_DEGACCEL, V45_3_OMEGA, 45, SPEED_3);
 8007e9c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007ea0:	222d      	movs	r2, #45	; 0x2d
 8007ea2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007ea6:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007eaa:	f7fd fbad 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007eae:	2103      	movs	r1, #3
 8007eb0:	20ff      	movs	r0, #255	; 0xff
 8007eb2:	f008 fb6d 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007eb6:	4b50      	ldr	r3, [pc, #320]	; (8007ff8 <v_L45+0x318>)
 8007eb8:	881b      	ldrh	r3, [r3, #0]
 8007eba:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f003 0301 	and.w	r3, r3, #1
 8007ec8:	bfb8      	it	lt
 8007eca:	425b      	neglt	r3, r3
 8007ecc:	f003 0301 	and.w	r3, r3, #1
 8007ed0:	b2d9      	uxtb	r1, r3
 8007ed2:	4a49      	ldr	r2, [pc, #292]	; (8007ff8 <v_L45+0x318>)
 8007ed4:	8813      	ldrh	r3, [r2, #0]
 8007ed6:	f361 03c3 	bfi	r3, r1, #3, #1
 8007eda:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007edc:	4b46      	ldr	r3, [pc, #280]	; (8007ff8 <v_L45+0x318>)
 8007ede:	881b      	ldrh	r3, [r3, #0]
 8007ee0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d107      	bne.n	8007efa <v_L45+0x21a>
			slalomB(10000, SPEED_3, V45_3_OFFSET_VB);
 8007eea:	2237      	movs	r2, #55	; 0x37
 8007eec:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007ef0:	f242 7010 	movw	r0, #10000	; 0x2710
 8007ef4:	f7fd fcaa 	bl	800584c <slalomB>
}
 8007ef8:	e11e      	b.n	8008138 <v_L45+0x458>
			slalomB(10000, SPEED_3, V45_3_OFFSET_B);
 8007efa:	225d      	movs	r2, #93	; 0x5d
 8007efc:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007f00:	f242 7010 	movw	r0, #10000	; 0x2710
 8007f04:	f7fd fca2 	bl	800584c <slalomB>
}
 8007f08:	e116      	b.n	8008138 <v_L45+0x458>
	}else if(run_mode == 4){
 8007f0a:	4b3a      	ldr	r3, [pc, #232]	; (8007ff4 <v_L45+0x314>)
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	2b04      	cmp	r3, #4
 8007f12:	d156      	bne.n	8007fc2 <v_L45+0x2e2>
		if(!MF2.FLAG.V){
 8007f14:	4b38      	ldr	r3, [pc, #224]	; (8007ff8 <v_L45+0x318>)
 8007f16:	881b      	ldrh	r3, [r3, #0]
 8007f18:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d10c      	bne.n	8007f3c <v_L45+0x25c>
			slalomF(10000, SPEED_4, V45_4_OFFSET_F, NO_WALL, NO_WALL);
 8007f22:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f26:	9300      	str	r3, [sp, #0]
 8007f28:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f2c:	2217      	movs	r2, #23
 8007f2e:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8007f32:	f242 7010 	movw	r0, #10000	; 0x2710
 8007f36:	f7fd fab1 	bl	800549c <slalomF>
 8007f3a:	e00b      	b.n	8007f54 <v_L45+0x274>
			slalomF(10000, SPEED_4, V45_4_OFFSET_VF, NO_WALL, NO_WALL);
 8007f3c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f46:	2237      	movs	r2, #55	; 0x37
 8007f48:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8007f4c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007f50:	f7fd faa4 	bl	800549c <slalomF>
		slalomR(V45_4_DEGACCEL, V45_4_OMEGA, 45, SPEED_4);
 8007f54:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8007f58:	222d      	movs	r2, #45	; 0x2d
 8007f5a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007f5e:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007f62:	f7fd fb51 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007f66:	2103      	movs	r1, #3
 8007f68:	20ff      	movs	r0, #255	; 0xff
 8007f6a:	f008 fb11 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007f6e:	4b22      	ldr	r3, [pc, #136]	; (8007ff8 <v_L45+0x318>)
 8007f70:	881b      	ldrh	r3, [r3, #0]
 8007f72:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	3301      	adds	r3, #1
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f003 0301 	and.w	r3, r3, #1
 8007f80:	bfb8      	it	lt
 8007f82:	425b      	neglt	r3, r3
 8007f84:	f003 0301 	and.w	r3, r3, #1
 8007f88:	b2d9      	uxtb	r1, r3
 8007f8a:	4a1b      	ldr	r2, [pc, #108]	; (8007ff8 <v_L45+0x318>)
 8007f8c:	8813      	ldrh	r3, [r2, #0]
 8007f8e:	f361 03c3 	bfi	r3, r1, #3, #1
 8007f92:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007f94:	4b18      	ldr	r3, [pc, #96]	; (8007ff8 <v_L45+0x318>)
 8007f96:	881b      	ldrh	r3, [r3, #0]
 8007f98:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d107      	bne.n	8007fb2 <v_L45+0x2d2>
			slalomB(10000, SPEED_4, V45_4_OFFSET_VB);
 8007fa2:	2233      	movs	r2, #51	; 0x33
 8007fa4:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8007fa8:	f242 7010 	movw	r0, #10000	; 0x2710
 8007fac:	f7fd fc4e 	bl	800584c <slalomB>
}
 8007fb0:	e0c2      	b.n	8008138 <v_L45+0x458>
			slalomB(10000, SPEED_4, V45_4_OFFSET_B);
 8007fb2:	224b      	movs	r2, #75	; 0x4b
 8007fb4:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8007fb8:	f242 7010 	movw	r0, #10000	; 0x2710
 8007fbc:	f7fd fc46 	bl	800584c <slalomB>
}
 8007fc0:	e0ba      	b.n	8008138 <v_L45+0x458>
	}else if(run_mode == 5){
 8007fc2:	4b0c      	ldr	r3, [pc, #48]	; (8007ff4 <v_L45+0x314>)
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	2b05      	cmp	r3, #5
 8007fca:	d15a      	bne.n	8008082 <v_L45+0x3a2>
		if(!MF2.FLAG.V){
 8007fcc:	4b0a      	ldr	r3, [pc, #40]	; (8007ff8 <v_L45+0x318>)
 8007fce:	881b      	ldrh	r3, [r3, #0]
 8007fd0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d110      	bne.n	8007ffc <v_L45+0x31c>
			slalomF(10000, SPEED_5, V45_5_OFFSET_F, NO_WALL, NO_WALL);
 8007fda:	f241 3388 	movw	r3, #5000	; 0x1388
 8007fde:	9300      	str	r3, [sp, #0]
 8007fe0:	f241 3388 	movw	r3, #5000	; 0x1388
 8007fe4:	2214      	movs	r2, #20
 8007fe6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007fea:	f242 7010 	movw	r0, #10000	; 0x2710
 8007fee:	f7fd fa55 	bl	800549c <slalomF>
 8007ff2:	e00f      	b.n	8008014 <v_L45+0x334>
 8007ff4:	20000456 	.word	0x20000456
 8007ff8:	20000fa4 	.word	0x20000fa4
			slalomF(10000, SPEED_5, V45_5_OFFSET_VF, NO_WALL, NO_WALL);
 8007ffc:	f241 3388 	movw	r3, #5000	; 0x1388
 8008000:	9300      	str	r3, [sp, #0]
 8008002:	f241 3388 	movw	r3, #5000	; 0x1388
 8008006:	2214      	movs	r2, #20
 8008008:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800800c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008010:	f7fd fa44 	bl	800549c <slalomF>
		slalomR(V45_5_DEGACCEL, V45_5_OMEGA, 45, SPEED_5);
 8008014:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008018:	222d      	movs	r2, #45	; 0x2d
 800801a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800801e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008022:	f7fd faf1 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008026:	2103      	movs	r1, #3
 8008028:	20ff      	movs	r0, #255	; 0xff
 800802a:	f008 fab1 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800802e:	4b44      	ldr	r3, [pc, #272]	; (8008140 <v_L45+0x460>)
 8008030:	881b      	ldrh	r3, [r3, #0]
 8008032:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008036:	b2db      	uxtb	r3, r3
 8008038:	3301      	adds	r3, #1
 800803a:	2b00      	cmp	r3, #0
 800803c:	f003 0301 	and.w	r3, r3, #1
 8008040:	bfb8      	it	lt
 8008042:	425b      	neglt	r3, r3
 8008044:	f003 0301 	and.w	r3, r3, #1
 8008048:	b2d9      	uxtb	r1, r3
 800804a:	4a3d      	ldr	r2, [pc, #244]	; (8008140 <v_L45+0x460>)
 800804c:	8813      	ldrh	r3, [r2, #0]
 800804e:	f361 03c3 	bfi	r3, r1, #3, #1
 8008052:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008054:	4b3a      	ldr	r3, [pc, #232]	; (8008140 <v_L45+0x460>)
 8008056:	881b      	ldrh	r3, [r3, #0]
 8008058:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800805c:	b2db      	uxtb	r3, r3
 800805e:	2b00      	cmp	r3, #0
 8008060:	d107      	bne.n	8008072 <v_L45+0x392>
			slalomB(10000, SPEED_5, V45_5_OFFSET_VB);
 8008062:	223a      	movs	r2, #58	; 0x3a
 8008064:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008068:	f242 7010 	movw	r0, #10000	; 0x2710
 800806c:	f7fd fbee 	bl	800584c <slalomB>
}
 8008070:	e062      	b.n	8008138 <v_L45+0x458>
			slalomB(10000, SPEED_5, V45_5_OFFSET_B);
 8008072:	223a      	movs	r2, #58	; 0x3a
 8008074:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008078:	f242 7010 	movw	r0, #10000	; 0x2710
 800807c:	f7fd fbe6 	bl	800584c <slalomB>
}
 8008080:	e05a      	b.n	8008138 <v_L45+0x458>
	}else if(run_mode == 6){
 8008082:	4b30      	ldr	r3, [pc, #192]	; (8008144 <v_L45+0x464>)
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	b2db      	uxtb	r3, r3
 8008088:	2b06      	cmp	r3, #6
 800808a:	d155      	bne.n	8008138 <v_L45+0x458>
		if(!MF2.FLAG.V){
 800808c:	4b2c      	ldr	r3, [pc, #176]	; (8008140 <v_L45+0x460>)
 800808e:	881b      	ldrh	r3, [r3, #0]
 8008090:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008094:	b2db      	uxtb	r3, r3
 8008096:	2b00      	cmp	r3, #0
 8008098:	d10c      	bne.n	80080b4 <v_L45+0x3d4>
			slalomF(10000, SPEED_5, V45_5_OFFSET_F, NO_WALL, NO_WALL);
 800809a:	f241 3388 	movw	r3, #5000	; 0x1388
 800809e:	9300      	str	r3, [sp, #0]
 80080a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80080a4:	2214      	movs	r2, #20
 80080a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80080aa:	f242 7010 	movw	r0, #10000	; 0x2710
 80080ae:	f7fd f9f5 	bl	800549c <slalomF>
 80080b2:	e00b      	b.n	80080cc <v_L45+0x3ec>
			slalomF(10000, SPEED_5, V45_5_OFFSET_VF, NO_WALL, NO_WALL);
 80080b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80080b8:	9300      	str	r3, [sp, #0]
 80080ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80080be:	2214      	movs	r2, #20
 80080c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80080c4:	f242 7010 	movw	r0, #10000	; 0x2710
 80080c8:	f7fd f9e8 	bl	800549c <slalomF>
		slalomR(V45_5_DEGACCEL, V45_5_OMEGA, 45, SPEED_5);
 80080cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80080d0:	222d      	movs	r2, #45	; 0x2d
 80080d2:	f44f 7116 	mov.w	r1, #600	; 0x258
 80080d6:	f242 7010 	movw	r0, #10000	; 0x2710
 80080da:	f7fd fa95 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80080de:	2103      	movs	r1, #3
 80080e0:	20ff      	movs	r0, #255	; 0xff
 80080e2:	f008 fa55 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80080e6:	4b16      	ldr	r3, [pc, #88]	; (8008140 <v_L45+0x460>)
 80080e8:	881b      	ldrh	r3, [r3, #0]
 80080ea:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	3301      	adds	r3, #1
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	f003 0301 	and.w	r3, r3, #1
 80080f8:	bfb8      	it	lt
 80080fa:	425b      	neglt	r3, r3
 80080fc:	f003 0301 	and.w	r3, r3, #1
 8008100:	b2d9      	uxtb	r1, r3
 8008102:	4a0f      	ldr	r2, [pc, #60]	; (8008140 <v_L45+0x460>)
 8008104:	8813      	ldrh	r3, [r2, #0]
 8008106:	f361 03c3 	bfi	r3, r1, #3, #1
 800810a:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 800810c:	4b0c      	ldr	r3, [pc, #48]	; (8008140 <v_L45+0x460>)
 800810e:	881b      	ldrh	r3, [r3, #0]
 8008110:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b00      	cmp	r3, #0
 8008118:	d107      	bne.n	800812a <v_L45+0x44a>
			slalomB(10000, SPEED_5, V45_5_OFFSET_VB);
 800811a:	223a      	movs	r2, #58	; 0x3a
 800811c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008120:	f242 7010 	movw	r0, #10000	; 0x2710
 8008124:	f7fd fb92 	bl	800584c <slalomB>
}
 8008128:	e006      	b.n	8008138 <v_L45+0x458>
			slalomB(10000, SPEED_5, V45_5_OFFSET_B);
 800812a:	223a      	movs	r2, #58	; 0x3a
 800812c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008130:	f242 7010 	movw	r0, #10000	; 0x2710
 8008134:	f7fd fb8a 	bl	800584c <slalomB>
}
 8008138:	bf00      	nop
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	20000fa4 	.word	0x20000fa4
 8008144:	20000456 	.word	0x20000456

08008148 <v_R45D>:
//v_R45D
//a区画中心から右に45度回転する　ゴール用
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R45D(void){
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af02      	add	r7, sp, #8
	full_led_write1(PURPLE);
 800814e:	2005      	movs	r0, #5
 8008150:	f00a f8b2 	bl	80122b8 <full_led_write1>
	if(run_mode == 1){
 8008154:	4bbb      	ldr	r3, [pc, #748]	; (8008444 <v_R45D+0x2fc>)
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	b2db      	uxtb	r3, r3
 800815a:	2b01      	cmp	r3, #1
 800815c:	d135      	bne.n	80081ca <v_R45D+0x82>
		slalomF(10000, SPEED_1, V45_OFFSET_VF, NO_WALL, NO_WALL);
 800815e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008162:	9300      	str	r3, [sp, #0]
 8008164:	f241 3388 	movw	r3, #5000	; 0x1388
 8008168:	2255      	movs	r2, #85	; 0x55
 800816a:	21c8      	movs	r1, #200	; 0xc8
 800816c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008170:	f7fd f994 	bl	800549c <slalomF>
		slalomR(-V45_DEGACCEL, -V45_OMEGA, -45, SPEED_1);
 8008174:	23c8      	movs	r3, #200	; 0xc8
 8008176:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 800817a:	49b3      	ldr	r1, [pc, #716]	; (8008448 <v_R45D+0x300>)
 800817c:	48b3      	ldr	r0, [pc, #716]	; (800844c <v_R45D+0x304>)
 800817e:	f7fd fa43 	bl	8005608 <slalomR>

		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008182:	2103      	movs	r1, #3
 8008184:	2001      	movs	r0, #1
 8008186:	f008 fa03 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800818a:	4bb1      	ldr	r3, [pc, #708]	; (8008450 <v_R45D+0x308>)
 800818c:	881b      	ldrh	r3, [r3, #0]
 800818e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008192:	b2db      	uxtb	r3, r3
 8008194:	3301      	adds	r3, #1
 8008196:	2b00      	cmp	r3, #0
 8008198:	f003 0301 	and.w	r3, r3, #1
 800819c:	bfb8      	it	lt
 800819e:	425b      	neglt	r3, r3
 80081a0:	f003 0301 	and.w	r3, r3, #1
 80081a4:	b2d9      	uxtb	r1, r3
 80081a6:	4aaa      	ldr	r2, [pc, #680]	; (8008450 <v_R45D+0x308>)
 80081a8:	8813      	ldrh	r3, [r2, #0]
 80081aa:	f361 03c3 	bfi	r3, r1, #3, #1
 80081ae:	8013      	strh	r3, [r2, #0]

		slalomB(10000, SPEED_1, V45_OFFSET_VB-30);
 80081b0:	220a      	movs	r2, #10
 80081b2:	21c8      	movs	r1, #200	; 0xc8
 80081b4:	f242 7010 	movw	r0, #10000	; 0x2710
 80081b8:	f7fd fb48 	bl	800584c <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_1, 30);
 80081bc:	231e      	movs	r3, #30
 80081be:	22c8      	movs	r2, #200	; 0xc8
 80081c0:	211e      	movs	r1, #30
 80081c2:	48a4      	ldr	r0, [pc, #656]	; (8008454 <v_R45D+0x30c>)
 80081c4:	f7fc ff92 	bl	80050ec <driveD>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;

		slalomB(10000, SPEED_5, V45_5_OFFSET_VB-30);
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
	}
}
 80081c8:	e139      	b.n	800843e <v_R45D+0x2f6>
	}else if(run_mode == 2){
 80081ca:	4b9e      	ldr	r3, [pc, #632]	; (8008444 <v_R45D+0x2fc>)
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	2b02      	cmp	r3, #2
 80081d2:	d139      	bne.n	8008248 <v_R45D+0x100>
		slalomF(10000, SPEED_2, V45_2_OFFSET_VF, NO_WALL, NO_WALL);
 80081d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80081d8:	9300      	str	r3, [sp, #0]
 80081da:	f241 3388 	movw	r3, #5000	; 0x1388
 80081de:	2255      	movs	r2, #85	; 0x55
 80081e0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80081e4:	f242 7010 	movw	r0, #10000	; 0x2710
 80081e8:	f7fd f958 	bl	800549c <slalomF>
		slalomR(-V45_2_DEGACCEL, -V45_2_OMEGA, -45, SPEED_2);
 80081ec:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80081f0:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 80081f4:	4994      	ldr	r1, [pc, #592]	; (8008448 <v_R45D+0x300>)
 80081f6:	4895      	ldr	r0, [pc, #596]	; (800844c <v_R45D+0x304>)
 80081f8:	f7fd fa06 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80081fc:	2103      	movs	r1, #3
 80081fe:	2001      	movs	r0, #1
 8008200:	f008 f9c6 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008204:	4b92      	ldr	r3, [pc, #584]	; (8008450 <v_R45D+0x308>)
 8008206:	881b      	ldrh	r3, [r3, #0]
 8008208:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800820c:	b2db      	uxtb	r3, r3
 800820e:	3301      	adds	r3, #1
 8008210:	2b00      	cmp	r3, #0
 8008212:	f003 0301 	and.w	r3, r3, #1
 8008216:	bfb8      	it	lt
 8008218:	425b      	neglt	r3, r3
 800821a:	f003 0301 	and.w	r3, r3, #1
 800821e:	b2d9      	uxtb	r1, r3
 8008220:	4a8b      	ldr	r2, [pc, #556]	; (8008450 <v_R45D+0x308>)
 8008222:	8813      	ldrh	r3, [r2, #0]
 8008224:	f361 03c3 	bfi	r3, r1, #3, #1
 8008228:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_2, V45_2_OFFSET_VB-30);
 800822a:	220a      	movs	r2, #10
 800822c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008230:	f242 7010 	movw	r0, #10000	; 0x2710
 8008234:	f7fd fb0a 	bl	800584c <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_2, 30);
 8008238:	231e      	movs	r3, #30
 800823a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800823e:	211e      	movs	r1, #30
 8008240:	4884      	ldr	r0, [pc, #528]	; (8008454 <v_R45D+0x30c>)
 8008242:	f7fc ff53 	bl	80050ec <driveD>
}
 8008246:	e0fa      	b.n	800843e <v_R45D+0x2f6>
	}else if(run_mode == 3){
 8008248:	4b7e      	ldr	r3, [pc, #504]	; (8008444 <v_R45D+0x2fc>)
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b03      	cmp	r3, #3
 8008250:	d139      	bne.n	80082c6 <v_R45D+0x17e>
		slalomF(10000, SPEED_3, V45_3_OFFSET_VF, NO_WALL, NO_WALL);
 8008252:	f241 3388 	movw	r3, #5000	; 0x1388
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	f241 3388 	movw	r3, #5000	; 0x1388
 800825c:	2249      	movs	r2, #73	; 0x49
 800825e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008262:	f242 7010 	movw	r0, #10000	; 0x2710
 8008266:	f7fd f919 	bl	800549c <slalomF>
		slalomR(-V45_3_DEGACCEL, -V45_3_OMEGA, -45, SPEED_3);
 800826a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800826e:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8008272:	4979      	ldr	r1, [pc, #484]	; (8008458 <v_R45D+0x310>)
 8008274:	4879      	ldr	r0, [pc, #484]	; (800845c <v_R45D+0x314>)
 8008276:	f7fd f9c7 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800827a:	2103      	movs	r1, #3
 800827c:	2001      	movs	r0, #1
 800827e:	f008 f987 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008282:	4b73      	ldr	r3, [pc, #460]	; (8008450 <v_R45D+0x308>)
 8008284:	881b      	ldrh	r3, [r3, #0]
 8008286:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800828a:	b2db      	uxtb	r3, r3
 800828c:	3301      	adds	r3, #1
 800828e:	2b00      	cmp	r3, #0
 8008290:	f003 0301 	and.w	r3, r3, #1
 8008294:	bfb8      	it	lt
 8008296:	425b      	neglt	r3, r3
 8008298:	f003 0301 	and.w	r3, r3, #1
 800829c:	b2d9      	uxtb	r1, r3
 800829e:	4a6c      	ldr	r2, [pc, #432]	; (8008450 <v_R45D+0x308>)
 80082a0:	8813      	ldrh	r3, [r2, #0]
 80082a2:	f361 03c3 	bfi	r3, r1, #3, #1
 80082a6:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_3, V45_3_OFFSET_VB-30);
 80082a8:	2219      	movs	r2, #25
 80082aa:	f44f 7116 	mov.w	r1, #600	; 0x258
 80082ae:	f242 7010 	movw	r0, #10000	; 0x2710
 80082b2:	f7fd facb 	bl	800584c <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_3, 30);
 80082b6:	231e      	movs	r3, #30
 80082b8:	f44f 7216 	mov.w	r2, #600	; 0x258
 80082bc:	211e      	movs	r1, #30
 80082be:	4865      	ldr	r0, [pc, #404]	; (8008454 <v_R45D+0x30c>)
 80082c0:	f7fc ff14 	bl	80050ec <driveD>
}
 80082c4:	e0bb      	b.n	800843e <v_R45D+0x2f6>
	}else if(run_mode == 4){
 80082c6:	4b5f      	ldr	r3, [pc, #380]	; (8008444 <v_R45D+0x2fc>)
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	2b04      	cmp	r3, #4
 80082ce:	d139      	bne.n	8008344 <v_R45D+0x1fc>
		slalomF(10000, SPEED_4, V45_4_OFFSET_VF, NO_WALL, NO_WALL);
 80082d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80082da:	2237      	movs	r2, #55	; 0x37
 80082dc:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80082e0:	f242 7010 	movw	r0, #10000	; 0x2710
 80082e4:	f7fd f8da 	bl	800549c <slalomF>
		slalomR(-V45_4_DEGACCEL, -V45_4_OMEGA, -45, SPEED_4);
 80082e8:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80082ec:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 80082f0:	4959      	ldr	r1, [pc, #356]	; (8008458 <v_R45D+0x310>)
 80082f2:	485a      	ldr	r0, [pc, #360]	; (800845c <v_R45D+0x314>)
 80082f4:	f7fd f988 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80082f8:	2103      	movs	r1, #3
 80082fa:	2001      	movs	r0, #1
 80082fc:	f008 f948 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008300:	4b53      	ldr	r3, [pc, #332]	; (8008450 <v_R45D+0x308>)
 8008302:	881b      	ldrh	r3, [r3, #0]
 8008304:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008308:	b2db      	uxtb	r3, r3
 800830a:	3301      	adds	r3, #1
 800830c:	2b00      	cmp	r3, #0
 800830e:	f003 0301 	and.w	r3, r3, #1
 8008312:	bfb8      	it	lt
 8008314:	425b      	neglt	r3, r3
 8008316:	f003 0301 	and.w	r3, r3, #1
 800831a:	b2d9      	uxtb	r1, r3
 800831c:	4a4c      	ldr	r2, [pc, #304]	; (8008450 <v_R45D+0x308>)
 800831e:	8813      	ldrh	r3, [r2, #0]
 8008320:	f361 03c3 	bfi	r3, r1, #3, #1
 8008324:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_4, V45_4_OFFSET_VB-30);
 8008326:	2215      	movs	r2, #21
 8008328:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800832c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008330:	f7fd fa8c 	bl	800584c <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_4, 30);
 8008334:	231e      	movs	r3, #30
 8008336:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800833a:	211e      	movs	r1, #30
 800833c:	4845      	ldr	r0, [pc, #276]	; (8008454 <v_R45D+0x30c>)
 800833e:	f7fc fed5 	bl	80050ec <driveD>
}
 8008342:	e07c      	b.n	800843e <v_R45D+0x2f6>
	}else if(run_mode == 5){
 8008344:	4b3f      	ldr	r3, [pc, #252]	; (8008444 <v_R45D+0x2fc>)
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	b2db      	uxtb	r3, r3
 800834a:	2b05      	cmp	r3, #5
 800834c:	d139      	bne.n	80083c2 <v_R45D+0x27a>
		slalomF(10000, SPEED_5, V45_5_OFFSET_VF, NO_WALL, NO_WALL);
 800834e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008352:	9300      	str	r3, [sp, #0]
 8008354:	f241 3388 	movw	r3, #5000	; 0x1388
 8008358:	2214      	movs	r2, #20
 800835a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800835e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008362:	f7fd f89b 	bl	800549c <slalomF>
		slalomR(-V45_5_DEGACCEL, -V45_5_OMEGA, -45, SPEED_5);
 8008366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800836a:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 800836e:	493c      	ldr	r1, [pc, #240]	; (8008460 <v_R45D+0x318>)
 8008370:	483c      	ldr	r0, [pc, #240]	; (8008464 <v_R45D+0x31c>)
 8008372:	f7fd f949 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008376:	2103      	movs	r1, #3
 8008378:	2001      	movs	r0, #1
 800837a:	f008 f909 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800837e:	4b34      	ldr	r3, [pc, #208]	; (8008450 <v_R45D+0x308>)
 8008380:	881b      	ldrh	r3, [r3, #0]
 8008382:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008386:	b2db      	uxtb	r3, r3
 8008388:	3301      	adds	r3, #1
 800838a:	2b00      	cmp	r3, #0
 800838c:	f003 0301 	and.w	r3, r3, #1
 8008390:	bfb8      	it	lt
 8008392:	425b      	neglt	r3, r3
 8008394:	f003 0301 	and.w	r3, r3, #1
 8008398:	b2d9      	uxtb	r1, r3
 800839a:	4a2d      	ldr	r2, [pc, #180]	; (8008450 <v_R45D+0x308>)
 800839c:	8813      	ldrh	r3, [r2, #0]
 800839e:	f361 03c3 	bfi	r3, r1, #3, #1
 80083a2:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, V45_5_OFFSET_VB-30);
 80083a4:	221c      	movs	r2, #28
 80083a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80083aa:	f242 7010 	movw	r0, #10000	; 0x2710
 80083ae:	f7fd fa4d 	bl	800584c <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
 80083b2:	231e      	movs	r3, #30
 80083b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80083b8:	211e      	movs	r1, #30
 80083ba:	4826      	ldr	r0, [pc, #152]	; (8008454 <v_R45D+0x30c>)
 80083bc:	f7fc fe96 	bl	80050ec <driveD>
}
 80083c0:	e03d      	b.n	800843e <v_R45D+0x2f6>
	}else if(run_mode == 6){
 80083c2:	4b20      	ldr	r3, [pc, #128]	; (8008444 <v_R45D+0x2fc>)
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	2b06      	cmp	r3, #6
 80083ca:	d138      	bne.n	800843e <v_R45D+0x2f6>
		slalomF(10000, SPEED_5, V45_5_OFFSET_VF, NO_WALL, NO_WALL);
 80083cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80083d0:	9300      	str	r3, [sp, #0]
 80083d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80083d6:	2214      	movs	r2, #20
 80083d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80083dc:	f242 7010 	movw	r0, #10000	; 0x2710
 80083e0:	f7fd f85c 	bl	800549c <slalomF>
		slalomR(-V45_5_DEGACCEL, -V45_5_OMEGA, -45, SPEED_5);
 80083e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80083e8:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 80083ec:	491c      	ldr	r1, [pc, #112]	; (8008460 <v_R45D+0x318>)
 80083ee:	481d      	ldr	r0, [pc, #116]	; (8008464 <v_R45D+0x31c>)
 80083f0:	f7fd f90a 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80083f4:	2103      	movs	r1, #3
 80083f6:	2001      	movs	r0, #1
 80083f8:	f008 f8ca 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80083fc:	4b14      	ldr	r3, [pc, #80]	; (8008450 <v_R45D+0x308>)
 80083fe:	881b      	ldrh	r3, [r3, #0]
 8008400:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008404:	b2db      	uxtb	r3, r3
 8008406:	3301      	adds	r3, #1
 8008408:	2b00      	cmp	r3, #0
 800840a:	f003 0301 	and.w	r3, r3, #1
 800840e:	bfb8      	it	lt
 8008410:	425b      	neglt	r3, r3
 8008412:	f003 0301 	and.w	r3, r3, #1
 8008416:	b2d9      	uxtb	r1, r3
 8008418:	4a0d      	ldr	r2, [pc, #52]	; (8008450 <v_R45D+0x308>)
 800841a:	8813      	ldrh	r3, [r2, #0]
 800841c:	f361 03c3 	bfi	r3, r1, #3, #1
 8008420:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, V45_5_OFFSET_VB-30);
 8008422:	221c      	movs	r2, #28
 8008424:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008428:	f242 7010 	movw	r0, #10000	; 0x2710
 800842c:	f7fd fa0e 	bl	800584c <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
 8008430:	231e      	movs	r3, #30
 8008432:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008436:	211e      	movs	r1, #30
 8008438:	4806      	ldr	r0, [pc, #24]	; (8008454 <v_R45D+0x30c>)
 800843a:	f7fc fe57 	bl	80050ec <driveD>
}
 800843e:	bf00      	nop
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}
 8008444:	20000456 	.word	0x20000456
 8008448:	fffffed4 	.word	0xfffffed4
 800844c:	fffff448 	.word	0xfffff448
 8008450:	20000fa4 	.word	0x20000fa4
 8008454:	ffff8ad0 	.word	0xffff8ad0
 8008458:	fffffe70 	.word	0xfffffe70
 800845c:	ffffe0c0 	.word	0xffffe0c0
 8008460:	fffffda8 	.word	0xfffffda8
 8008464:	ffffd8f0 	.word	0xffffd8f0

08008468 <v_L45D>:
//v_L45D
//a区画中心から左に45度回転する　ゴール用
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L45D(void){
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af02      	add	r7, sp, #8
	full_led_write1(YELLOW);
 800846e:	2006      	movs	r0, #6
 8008470:	f009 ff22 	bl	80122b8 <full_led_write1>
	if(run_mode == 1){
 8008474:	4bbe      	ldr	r3, [pc, #760]	; (8008770 <v_L45D+0x308>)
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	b2db      	uxtb	r3, r3
 800847a:	2b01      	cmp	r3, #1
 800847c:	d136      	bne.n	80084ec <v_L45D+0x84>
		slalomF(10000, SPEED_1, V45_OFFSET_VF, NO_WALL, NO_WALL);
 800847e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008482:	9300      	str	r3, [sp, #0]
 8008484:	f241 3388 	movw	r3, #5000	; 0x1388
 8008488:	2255      	movs	r2, #85	; 0x55
 800848a:	21c8      	movs	r1, #200	; 0xc8
 800848c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008490:	f7fd f804 	bl	800549c <slalomF>
		slalomR(V45_DEGACCEL, V45_OMEGA, 55, SPEED_1);
 8008494:	23c8      	movs	r3, #200	; 0xc8
 8008496:	2237      	movs	r2, #55	; 0x37
 8008498:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800849c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80084a0:	f7fd f8b2 	bl	8005608 <slalomR>

		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80084a4:	2103      	movs	r1, #3
 80084a6:	20ff      	movs	r0, #255	; 0xff
 80084a8:	f008 f872 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80084ac:	4bb1      	ldr	r3, [pc, #708]	; (8008774 <v_L45D+0x30c>)
 80084ae:	881b      	ldrh	r3, [r3, #0]
 80084b0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	3301      	adds	r3, #1
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	f003 0301 	and.w	r3, r3, #1
 80084be:	bfb8      	it	lt
 80084c0:	425b      	neglt	r3, r3
 80084c2:	f003 0301 	and.w	r3, r3, #1
 80084c6:	b2d9      	uxtb	r1, r3
 80084c8:	4aaa      	ldr	r2, [pc, #680]	; (8008774 <v_L45D+0x30c>)
 80084ca:	8813      	ldrh	r3, [r2, #0]
 80084cc:	f361 03c3 	bfi	r3, r1, #3, #1
 80084d0:	8013      	strh	r3, [r2, #0]

		slalomB(10000, SPEED_1, V45_OFFSET_VB-30);
 80084d2:	220a      	movs	r2, #10
 80084d4:	21c8      	movs	r1, #200	; 0xc8
 80084d6:	f242 7010 	movw	r0, #10000	; 0x2710
 80084da:	f7fd f9b7 	bl	800584c <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_1, 30);
 80084de:	231e      	movs	r3, #30
 80084e0:	22c8      	movs	r2, #200	; 0xc8
 80084e2:	211e      	movs	r1, #30
 80084e4:	48a4      	ldr	r0, [pc, #656]	; (8008778 <v_L45D+0x310>)
 80084e6:	f7fc fe01 	bl	80050ec <driveD>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;

		slalomB(10000, SPEED_5, V45_5_OFFSET_VB-30);
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
	}
}
 80084ea:	e13e      	b.n	800876a <v_L45D+0x302>
	}else if(run_mode == 2){
 80084ec:	4ba0      	ldr	r3, [pc, #640]	; (8008770 <v_L45D+0x308>)
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d13a      	bne.n	800856c <v_L45D+0x104>
		slalomF(10000, SPEED_2, V45_2_OFFSET_VF, NO_WALL, NO_WALL);
 80084f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	f241 3388 	movw	r3, #5000	; 0x1388
 8008500:	2255      	movs	r2, #85	; 0x55
 8008502:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008506:	f242 7010 	movw	r0, #10000	; 0x2710
 800850a:	f7fc ffc7 	bl	800549c <slalomF>
		slalomR(V45_2_DEGACCEL, V45_2_OMEGA, 45, SPEED_2);
 800850e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008512:	222d      	movs	r2, #45	; 0x2d
 8008514:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8008518:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800851c:	f7fd f874 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008520:	2103      	movs	r1, #3
 8008522:	20ff      	movs	r0, #255	; 0xff
 8008524:	f008 f834 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008528:	4b92      	ldr	r3, [pc, #584]	; (8008774 <v_L45D+0x30c>)
 800852a:	881b      	ldrh	r3, [r3, #0]
 800852c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008530:	b2db      	uxtb	r3, r3
 8008532:	3301      	adds	r3, #1
 8008534:	2b00      	cmp	r3, #0
 8008536:	f003 0301 	and.w	r3, r3, #1
 800853a:	bfb8      	it	lt
 800853c:	425b      	neglt	r3, r3
 800853e:	f003 0301 	and.w	r3, r3, #1
 8008542:	b2d9      	uxtb	r1, r3
 8008544:	4a8b      	ldr	r2, [pc, #556]	; (8008774 <v_L45D+0x30c>)
 8008546:	8813      	ldrh	r3, [r2, #0]
 8008548:	f361 03c3 	bfi	r3, r1, #3, #1
 800854c:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_2, V45_2_OFFSET_VB-30);
 800854e:	220a      	movs	r2, #10
 8008550:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008554:	f242 7010 	movw	r0, #10000	; 0x2710
 8008558:	f7fd f978 	bl	800584c <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_2, 30);
 800855c:	231e      	movs	r3, #30
 800855e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008562:	211e      	movs	r1, #30
 8008564:	4884      	ldr	r0, [pc, #528]	; (8008778 <v_L45D+0x310>)
 8008566:	f7fc fdc1 	bl	80050ec <driveD>
}
 800856a:	e0fe      	b.n	800876a <v_L45D+0x302>
	}else if(run_mode == 3){
 800856c:	4b80      	ldr	r3, [pc, #512]	; (8008770 <v_L45D+0x308>)
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	b2db      	uxtb	r3, r3
 8008572:	2b03      	cmp	r3, #3
 8008574:	d13a      	bne.n	80085ec <v_L45D+0x184>
		slalomF(10000, SPEED_3, V45_3_OFFSET_VF, NO_WALL, NO_WALL);
 8008576:	f241 3388 	movw	r3, #5000	; 0x1388
 800857a:	9300      	str	r3, [sp, #0]
 800857c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008580:	2249      	movs	r2, #73	; 0x49
 8008582:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008586:	f242 7010 	movw	r0, #10000	; 0x2710
 800858a:	f7fc ff87 	bl	800549c <slalomF>
		slalomR(V45_3_DEGACCEL, V45_3_OMEGA, 45, SPEED_3);
 800858e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008592:	222d      	movs	r2, #45	; 0x2d
 8008594:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008598:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800859c:	f7fd f834 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80085a0:	2103      	movs	r1, #3
 80085a2:	20ff      	movs	r0, #255	; 0xff
 80085a4:	f007 fff4 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80085a8:	4b72      	ldr	r3, [pc, #456]	; (8008774 <v_L45D+0x30c>)
 80085aa:	881b      	ldrh	r3, [r3, #0]
 80085ac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	3301      	adds	r3, #1
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f003 0301 	and.w	r3, r3, #1
 80085ba:	bfb8      	it	lt
 80085bc:	425b      	neglt	r3, r3
 80085be:	f003 0301 	and.w	r3, r3, #1
 80085c2:	b2d9      	uxtb	r1, r3
 80085c4:	4a6b      	ldr	r2, [pc, #428]	; (8008774 <v_L45D+0x30c>)
 80085c6:	8813      	ldrh	r3, [r2, #0]
 80085c8:	f361 03c3 	bfi	r3, r1, #3, #1
 80085cc:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_3, V45_3_OFFSET_VB-30);
 80085ce:	2219      	movs	r2, #25
 80085d0:	f44f 7116 	mov.w	r1, #600	; 0x258
 80085d4:	f242 7010 	movw	r0, #10000	; 0x2710
 80085d8:	f7fd f938 	bl	800584c <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_3, 30);
 80085dc:	231e      	movs	r3, #30
 80085de:	f44f 7216 	mov.w	r2, #600	; 0x258
 80085e2:	211e      	movs	r1, #30
 80085e4:	4864      	ldr	r0, [pc, #400]	; (8008778 <v_L45D+0x310>)
 80085e6:	f7fc fd81 	bl	80050ec <driveD>
}
 80085ea:	e0be      	b.n	800876a <v_L45D+0x302>
	}else if(run_mode == 4){
 80085ec:	4b60      	ldr	r3, [pc, #384]	; (8008770 <v_L45D+0x308>)
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	2b04      	cmp	r3, #4
 80085f4:	d13a      	bne.n	800866c <v_L45D+0x204>
		slalomF(10000, SPEED_4, V45_4_OFFSET_VF, NO_WALL, NO_WALL);
 80085f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80085fa:	9300      	str	r3, [sp, #0]
 80085fc:	f241 3388 	movw	r3, #5000	; 0x1388
 8008600:	2237      	movs	r2, #55	; 0x37
 8008602:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8008606:	f242 7010 	movw	r0, #10000	; 0x2710
 800860a:	f7fc ff47 	bl	800549c <slalomF>
		slalomR(V45_4_DEGACCEL, V45_4_OMEGA, 45, SPEED_4);
 800860e:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8008612:	222d      	movs	r2, #45	; 0x2d
 8008614:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008618:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800861c:	f7fc fff4 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008620:	2103      	movs	r1, #3
 8008622:	20ff      	movs	r0, #255	; 0xff
 8008624:	f007 ffb4 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008628:	4b52      	ldr	r3, [pc, #328]	; (8008774 <v_L45D+0x30c>)
 800862a:	881b      	ldrh	r3, [r3, #0]
 800862c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008630:	b2db      	uxtb	r3, r3
 8008632:	3301      	adds	r3, #1
 8008634:	2b00      	cmp	r3, #0
 8008636:	f003 0301 	and.w	r3, r3, #1
 800863a:	bfb8      	it	lt
 800863c:	425b      	neglt	r3, r3
 800863e:	f003 0301 	and.w	r3, r3, #1
 8008642:	b2d9      	uxtb	r1, r3
 8008644:	4a4b      	ldr	r2, [pc, #300]	; (8008774 <v_L45D+0x30c>)
 8008646:	8813      	ldrh	r3, [r2, #0]
 8008648:	f361 03c3 	bfi	r3, r1, #3, #1
 800864c:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_4, V45_4_OFFSET_VB-30);
 800864e:	2215      	movs	r2, #21
 8008650:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8008654:	f242 7010 	movw	r0, #10000	; 0x2710
 8008658:	f7fd f8f8 	bl	800584c <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_4, 30);
 800865c:	231e      	movs	r3, #30
 800865e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8008662:	211e      	movs	r1, #30
 8008664:	4844      	ldr	r0, [pc, #272]	; (8008778 <v_L45D+0x310>)
 8008666:	f7fc fd41 	bl	80050ec <driveD>
}
 800866a:	e07e      	b.n	800876a <v_L45D+0x302>
	}else if(run_mode == 5){
 800866c:	4b40      	ldr	r3, [pc, #256]	; (8008770 <v_L45D+0x308>)
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	b2db      	uxtb	r3, r3
 8008672:	2b05      	cmp	r3, #5
 8008674:	d13a      	bne.n	80086ec <v_L45D+0x284>
		slalomF(10000, SPEED_5, V45_5_OFFSET_VF, NO_WALL, NO_WALL);
 8008676:	f241 3388 	movw	r3, #5000	; 0x1388
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008680:	2214      	movs	r2, #20
 8008682:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008686:	f242 7010 	movw	r0, #10000	; 0x2710
 800868a:	f7fc ff07 	bl	800549c <slalomF>
		slalomR(V45_5_DEGACCEL, V45_5_OMEGA, 45, SPEED_5);
 800868e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008692:	222d      	movs	r2, #45	; 0x2d
 8008694:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008698:	f242 7010 	movw	r0, #10000	; 0x2710
 800869c:	f7fc ffb4 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80086a0:	2103      	movs	r1, #3
 80086a2:	20ff      	movs	r0, #255	; 0xff
 80086a4:	f007 ff74 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80086a8:	4b32      	ldr	r3, [pc, #200]	; (8008774 <v_L45D+0x30c>)
 80086aa:	881b      	ldrh	r3, [r3, #0]
 80086ac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	3301      	adds	r3, #1
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f003 0301 	and.w	r3, r3, #1
 80086ba:	bfb8      	it	lt
 80086bc:	425b      	neglt	r3, r3
 80086be:	f003 0301 	and.w	r3, r3, #1
 80086c2:	b2d9      	uxtb	r1, r3
 80086c4:	4a2b      	ldr	r2, [pc, #172]	; (8008774 <v_L45D+0x30c>)
 80086c6:	8813      	ldrh	r3, [r2, #0]
 80086c8:	f361 03c3 	bfi	r3, r1, #3, #1
 80086cc:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, V45_5_OFFSET_VB-30);
 80086ce:	221c      	movs	r2, #28
 80086d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80086d4:	f242 7010 	movw	r0, #10000	; 0x2710
 80086d8:	f7fd f8b8 	bl	800584c <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
 80086dc:	231e      	movs	r3, #30
 80086de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80086e2:	211e      	movs	r1, #30
 80086e4:	4824      	ldr	r0, [pc, #144]	; (8008778 <v_L45D+0x310>)
 80086e6:	f7fc fd01 	bl	80050ec <driveD>
}
 80086ea:	e03e      	b.n	800876a <v_L45D+0x302>
	}else if(run_mode == 6){
 80086ec:	4b20      	ldr	r3, [pc, #128]	; (8008770 <v_L45D+0x308>)
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	2b06      	cmp	r3, #6
 80086f4:	d139      	bne.n	800876a <v_L45D+0x302>
		slalomF(10000, SPEED_5, V45_5_OFFSET_VF, NO_WALL, NO_WALL);
 80086f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80086fa:	9300      	str	r3, [sp, #0]
 80086fc:	f241 3388 	movw	r3, #5000	; 0x1388
 8008700:	2214      	movs	r2, #20
 8008702:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008706:	f242 7010 	movw	r0, #10000	; 0x2710
 800870a:	f7fc fec7 	bl	800549c <slalomF>
		slalomR(V45_5_DEGACCEL, V45_5_OMEGA, 45, SPEED_5);
 800870e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008712:	222d      	movs	r2, #45	; 0x2d
 8008714:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008718:	f242 7010 	movw	r0, #10000	; 0x2710
 800871c:	f7fc ff74 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008720:	2103      	movs	r1, #3
 8008722:	20ff      	movs	r0, #255	; 0xff
 8008724:	f007 ff34 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008728:	4b12      	ldr	r3, [pc, #72]	; (8008774 <v_L45D+0x30c>)
 800872a:	881b      	ldrh	r3, [r3, #0]
 800872c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008730:	b2db      	uxtb	r3, r3
 8008732:	3301      	adds	r3, #1
 8008734:	2b00      	cmp	r3, #0
 8008736:	f003 0301 	and.w	r3, r3, #1
 800873a:	bfb8      	it	lt
 800873c:	425b      	neglt	r3, r3
 800873e:	f003 0301 	and.w	r3, r3, #1
 8008742:	b2d9      	uxtb	r1, r3
 8008744:	4a0b      	ldr	r2, [pc, #44]	; (8008774 <v_L45D+0x30c>)
 8008746:	8813      	ldrh	r3, [r2, #0]
 8008748:	f361 03c3 	bfi	r3, r1, #3, #1
 800874c:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, V45_5_OFFSET_VB-30);
 800874e:	221c      	movs	r2, #28
 8008750:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008754:	f242 7010 	movw	r0, #10000	; 0x2710
 8008758:	f7fd f878 	bl	800584c <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
 800875c:	231e      	movs	r3, #30
 800875e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008762:	211e      	movs	r1, #30
 8008764:	4804      	ldr	r0, [pc, #16]	; (8008778 <v_L45D+0x310>)
 8008766:	f7fc fcc1 	bl	80050ec <driveD>
}
 800876a:	bf00      	nop
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}
 8008770:	20000456 	.word	0x20000456
 8008774:	20000fa4 	.word	0x20000fa4
 8008778:	ffff8ad0 	.word	0xffff8ad0

0800877c <v_R90>:
//v_R90
// 柱中心から右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R90(void){
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af02      	add	r7, sp, #8
	full_led_write1(YELLOW);
 8008782:	2006      	movs	r0, #6
 8008784:	f009 fd98 	bl	80122b8 <full_led_write1>
	if(run_mode == 1){
 8008788:	4b6e      	ldr	r3, [pc, #440]	; (8008944 <v_R90+0x1c8>)
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	b2db      	uxtb	r3, r3
 800878e:	2b01      	cmp	r3, #1
 8008790:	d11c      	bne.n	80087cc <v_R90+0x50>
		slalomF(10000, SPEED_1, V90_OFFSET_F, NO_WALL, NO_WALL);
 8008792:	f241 3388 	movw	r3, #5000	; 0x1388
 8008796:	9300      	str	r3, [sp, #0]
 8008798:	f241 3388 	movw	r3, #5000	; 0x1388
 800879c:	222d      	movs	r2, #45	; 0x2d
 800879e:	21c8      	movs	r1, #200	; 0xc8
 80087a0:	f242 7010 	movw	r0, #10000	; 0x2710
 80087a4:	f7fc fe7a 	bl	800549c <slalomF>
		slalomR(-V90_DEGACCEL, -V90_OMEGA, -90, SPEED_1);
 80087a8:	23c8      	movs	r3, #200	; 0xc8
 80087aa:	f06f 0259 	mvn.w	r2, #89	; 0x59
 80087ae:	4966      	ldr	r1, [pc, #408]	; (8008948 <v_R90+0x1cc>)
 80087b0:	4866      	ldr	r0, [pc, #408]	; (800894c <v_R90+0x1d0>)
 80087b2:	f7fc ff29 	bl	8005608 <slalomR>

		turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80087b6:	2103      	movs	r1, #3
 80087b8:	2002      	movs	r0, #2
 80087ba:	f007 fee9 	bl	8010590 <turn_dir>

		slalomB(10000, SPEED_1, V90_OFFSET_B);
 80087be:	222d      	movs	r2, #45	; 0x2d
 80087c0:	21c8      	movs	r1, #200	; 0xc8
 80087c2:	f242 7010 	movw	r0, #10000	; 0x2710
 80087c6:	f7fd f841 	bl	800584c <slalomB>

		turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理

		slalomB(10000, SPEED_5, V90_5_OFFSET_B);
	}
}
 80087ca:	e0b7      	b.n	800893c <v_R90+0x1c0>
	}else if(run_mode == 2){
 80087cc:	4b5d      	ldr	r3, [pc, #372]	; (8008944 <v_R90+0x1c8>)
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	2b02      	cmp	r3, #2
 80087d4:	d11f      	bne.n	8008816 <v_R90+0x9a>
		slalomF(10000, SPEED_2, V90_2_OFFSET_F, NO_WALL, NO_WALL);
 80087d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80087da:	9300      	str	r3, [sp, #0]
 80087dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80087e0:	222d      	movs	r2, #45	; 0x2d
 80087e2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80087e6:	f242 7010 	movw	r0, #10000	; 0x2710
 80087ea:	f7fc fe57 	bl	800549c <slalomF>
		slalomR(-V90_2_DEGACCEL, -V90_2_OMEGA, -90, SPEED_2);
 80087ee:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80087f2:	f06f 0259 	mvn.w	r2, #89	; 0x59
 80087f6:	4954      	ldr	r1, [pc, #336]	; (8008948 <v_R90+0x1cc>)
 80087f8:	4854      	ldr	r0, [pc, #336]	; (800894c <v_R90+0x1d0>)
 80087fa:	f7fc ff05 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80087fe:	2103      	movs	r1, #3
 8008800:	2002      	movs	r0, #2
 8008802:	f007 fec5 	bl	8010590 <turn_dir>
		slalomB(10000, SPEED_2, V90_2_OFFSET_B);
 8008806:	222d      	movs	r2, #45	; 0x2d
 8008808:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800880c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008810:	f7fd f81c 	bl	800584c <slalomB>
}
 8008814:	e092      	b.n	800893c <v_R90+0x1c0>
	}else if(run_mode == 3){
 8008816:	4b4b      	ldr	r3, [pc, #300]	; (8008944 <v_R90+0x1c8>)
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	b2db      	uxtb	r3, r3
 800881c:	2b03      	cmp	r3, #3
 800881e:	d11f      	bne.n	8008860 <v_R90+0xe4>
		slalomF(10000, SPEED_3, V90_3_OFFSET_F, NO_WALL, NO_WALL);
 8008820:	f241 3388 	movw	r3, #5000	; 0x1388
 8008824:	9300      	str	r3, [sp, #0]
 8008826:	f241 3388 	movw	r3, #5000	; 0x1388
 800882a:	223a      	movs	r2, #58	; 0x3a
 800882c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008830:	f242 7010 	movw	r0, #10000	; 0x2710
 8008834:	f7fc fe32 	bl	800549c <slalomF>
		slalomR(-V90_3_DEGACCEL, -V90_3_OMEGA, -90, SPEED_3);
 8008838:	f44f 7316 	mov.w	r3, #600	; 0x258
 800883c:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8008840:	4943      	ldr	r1, [pc, #268]	; (8008950 <v_R90+0x1d4>)
 8008842:	4844      	ldr	r0, [pc, #272]	; (8008954 <v_R90+0x1d8>)
 8008844:	f7fc fee0 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008848:	2103      	movs	r1, #3
 800884a:	2002      	movs	r0, #2
 800884c:	f007 fea0 	bl	8010590 <turn_dir>
		slalomB(10000, SPEED_3, V90_3_OFFSET_B);
 8008850:	2252      	movs	r2, #82	; 0x52
 8008852:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008856:	f242 7010 	movw	r0, #10000	; 0x2710
 800885a:	f7fc fff7 	bl	800584c <slalomB>
}
 800885e:	e06d      	b.n	800893c <v_R90+0x1c0>
	}else if(run_mode == 4){
 8008860:	4b38      	ldr	r3, [pc, #224]	; (8008944 <v_R90+0x1c8>)
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	b2db      	uxtb	r3, r3
 8008866:	2b04      	cmp	r3, #4
 8008868:	d11f      	bne.n	80088aa <v_R90+0x12e>
		slalomF(10000, SPEED_4, V90_4_OFFSET_F, NO_WALL, NO_WALL);
 800886a:	f241 3388 	movw	r3, #5000	; 0x1388
 800886e:	9300      	str	r3, [sp, #0]
 8008870:	f241 3388 	movw	r3, #5000	; 0x1388
 8008874:	2223      	movs	r2, #35	; 0x23
 8008876:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800887a:	f242 7010 	movw	r0, #10000	; 0x2710
 800887e:	f7fc fe0d 	bl	800549c <slalomF>
		slalomR(-V90_4_DEGACCEL, -V90_4_OMEGA, -90, SPEED_4);
 8008882:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8008886:	f06f 0259 	mvn.w	r2, #89	; 0x59
 800888a:	4931      	ldr	r1, [pc, #196]	; (8008950 <v_R90+0x1d4>)
 800888c:	4831      	ldr	r0, [pc, #196]	; (8008954 <v_R90+0x1d8>)
 800888e:	f7fc febb 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008892:	2103      	movs	r1, #3
 8008894:	2002      	movs	r0, #2
 8008896:	f007 fe7b 	bl	8010590 <turn_dir>
		slalomB(10000, SPEED_4, V90_4_OFFSET_B);
 800889a:	2241      	movs	r2, #65	; 0x41
 800889c:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80088a0:	f242 7010 	movw	r0, #10000	; 0x2710
 80088a4:	f7fc ffd2 	bl	800584c <slalomB>
}
 80088a8:	e048      	b.n	800893c <v_R90+0x1c0>
	}else if(run_mode == 5){
 80088aa:	4b26      	ldr	r3, [pc, #152]	; (8008944 <v_R90+0x1c8>)
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	2b05      	cmp	r3, #5
 80088b2:	d11f      	bne.n	80088f4 <v_R90+0x178>
		slalomF(10000, SPEED_5, V90_5_OFFSET_F, NO_WALL, NO_WALL);
 80088b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80088b8:	9300      	str	r3, [sp, #0]
 80088ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80088be:	221e      	movs	r2, #30
 80088c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80088c4:	f242 7010 	movw	r0, #10000	; 0x2710
 80088c8:	f7fc fde8 	bl	800549c <slalomF>
		slalomR(-V90_5_DEGACCEL, -V90_5_OMEGA, -90, SPEED_5);
 80088cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80088d0:	f06f 0259 	mvn.w	r2, #89	; 0x59
 80088d4:	491e      	ldr	r1, [pc, #120]	; (8008950 <v_R90+0x1d4>)
 80088d6:	4820      	ldr	r0, [pc, #128]	; (8008958 <v_R90+0x1dc>)
 80088d8:	f7fc fe96 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80088dc:	2103      	movs	r1, #3
 80088de:	2002      	movs	r0, #2
 80088e0:	f007 fe56 	bl	8010590 <turn_dir>
		slalomB(10000, SPEED_5, V90_5_OFFSET_B);
 80088e4:	221e      	movs	r2, #30
 80088e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80088ea:	f242 7010 	movw	r0, #10000	; 0x2710
 80088ee:	f7fc ffad 	bl	800584c <slalomB>
}
 80088f2:	e023      	b.n	800893c <v_R90+0x1c0>
	}else if(run_mode == 6){
 80088f4:	4b13      	ldr	r3, [pc, #76]	; (8008944 <v_R90+0x1c8>)
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	2b06      	cmp	r3, #6
 80088fc:	d11e      	bne.n	800893c <v_R90+0x1c0>
		slalomF(10000, SPEED_5, V90_5_OFFSET_F, NO_WALL, NO_WALL);
 80088fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8008902:	9300      	str	r3, [sp, #0]
 8008904:	f241 3388 	movw	r3, #5000	; 0x1388
 8008908:	221e      	movs	r2, #30
 800890a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800890e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008912:	f7fc fdc3 	bl	800549c <slalomF>
		slalomR(-V90_5_DEGACCEL, -V90_5_OMEGA, -90, SPEED_5);
 8008916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800891a:	f06f 0259 	mvn.w	r2, #89	; 0x59
 800891e:	490c      	ldr	r1, [pc, #48]	; (8008950 <v_R90+0x1d4>)
 8008920:	480d      	ldr	r0, [pc, #52]	; (8008958 <v_R90+0x1dc>)
 8008922:	f7fc fe71 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008926:	2103      	movs	r1, #3
 8008928:	2002      	movs	r0, #2
 800892a:	f007 fe31 	bl	8010590 <turn_dir>
		slalomB(10000, SPEED_5, V90_5_OFFSET_B);
 800892e:	221e      	movs	r2, #30
 8008930:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008934:	f242 7010 	movw	r0, #10000	; 0x2710
 8008938:	f7fc ff88 	bl	800584c <slalomB>
}
 800893c:	bf00      	nop
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	20000456 	.word	0x20000456
 8008948:	fffffea2 	.word	0xfffffea2
 800894c:	fffff254 	.word	0xfffff254
 8008950:	fffffce0 	.word	0xfffffce0
 8008954:	ffffd8f0 	.word	0xffffd8f0
 8008958:	ffffc180 	.word	0xffffc180

0800895c <v_L90>:
//v_L90
// 柱中心から左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L90(void){
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af02      	add	r7, sp, #8
	full_led_write1(PURPLE);
 8008962:	2005      	movs	r0, #5
 8008964:	f009 fca8 	bl	80122b8 <full_led_write1>
	if(run_mode == 1){
 8008968:	4b71      	ldr	r3, [pc, #452]	; (8008b30 <v_L90+0x1d4>)
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	b2db      	uxtb	r3, r3
 800896e:	2b01      	cmp	r3, #1
 8008970:	d11d      	bne.n	80089ae <v_L90+0x52>
		slalomF(10000, SPEED_1, V90_OFFSET_F, NO_WALL, NO_WALL);
 8008972:	f241 3388 	movw	r3, #5000	; 0x1388
 8008976:	9300      	str	r3, [sp, #0]
 8008978:	f241 3388 	movw	r3, #5000	; 0x1388
 800897c:	222d      	movs	r2, #45	; 0x2d
 800897e:	21c8      	movs	r1, #200	; 0xc8
 8008980:	f242 7010 	movw	r0, #10000	; 0x2710
 8008984:	f7fc fd8a 	bl	800549c <slalomF>
		slalomR(V90_DEGACCEL, V90_OMEGA, 90, SPEED_1);
 8008988:	23c8      	movs	r3, #200	; 0xc8
 800898a:	225a      	movs	r2, #90	; 0x5a
 800898c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8008990:	f640 50ac 	movw	r0, #3500	; 0xdac
 8008994:	f7fc fe38 	bl	8005608 <slalomR>

		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008998:	2103      	movs	r1, #3
 800899a:	20fe      	movs	r0, #254	; 0xfe
 800899c:	f007 fdf8 	bl	8010590 <turn_dir>

		slalomB(10000, SPEED_1, V90_OFFSET_B);
 80089a0:	222d      	movs	r2, #45	; 0x2d
 80089a2:	21c8      	movs	r1, #200	; 0xc8
 80089a4:	f242 7010 	movw	r0, #10000	; 0x2710
 80089a8:	f7fc ff50 	bl	800584c <slalomB>

		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理

		slalomB(10000, SPEED_5, V90_5_OFFSET_B);
	}
}
 80089ac:	e0bc      	b.n	8008b28 <v_L90+0x1cc>
	}else if(run_mode == 2){
 80089ae:	4b60      	ldr	r3, [pc, #384]	; (8008b30 <v_L90+0x1d4>)
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	2b02      	cmp	r3, #2
 80089b6:	d120      	bne.n	80089fa <v_L90+0x9e>
		slalomF(10000, SPEED_2, V90_2_OFFSET_F, NO_WALL, NO_WALL);
 80089b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80089bc:	9300      	str	r3, [sp, #0]
 80089be:	f241 3388 	movw	r3, #5000	; 0x1388
 80089c2:	222d      	movs	r2, #45	; 0x2d
 80089c4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80089c8:	f242 7010 	movw	r0, #10000	; 0x2710
 80089cc:	f7fc fd66 	bl	800549c <slalomF>
		slalomR(V90_2_DEGACCEL, V90_2_OMEGA, 90, SPEED_2);
 80089d0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80089d4:	225a      	movs	r2, #90	; 0x5a
 80089d6:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80089da:	f640 50ac 	movw	r0, #3500	; 0xdac
 80089de:	f7fc fe13 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80089e2:	2103      	movs	r1, #3
 80089e4:	20fe      	movs	r0, #254	; 0xfe
 80089e6:	f007 fdd3 	bl	8010590 <turn_dir>
		slalomB(10000, SPEED_2, V90_2_OFFSET_B);
 80089ea:	222d      	movs	r2, #45	; 0x2d
 80089ec:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80089f0:	f242 7010 	movw	r0, #10000	; 0x2710
 80089f4:	f7fc ff2a 	bl	800584c <slalomB>
}
 80089f8:	e096      	b.n	8008b28 <v_L90+0x1cc>
	}else if(run_mode == 3){
 80089fa:	4b4d      	ldr	r3, [pc, #308]	; (8008b30 <v_L90+0x1d4>)
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	2b03      	cmp	r3, #3
 8008a02:	d120      	bne.n	8008a46 <v_L90+0xea>
		slalomF(10000, SPEED_3, V90_3_OFFSET_F, NO_WALL, NO_WALL);
 8008a04:	f241 3388 	movw	r3, #5000	; 0x1388
 8008a08:	9300      	str	r3, [sp, #0]
 8008a0a:	f241 3388 	movw	r3, #5000	; 0x1388
 8008a0e:	223a      	movs	r2, #58	; 0x3a
 8008a10:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008a14:	f242 7010 	movw	r0, #10000	; 0x2710
 8008a18:	f7fc fd40 	bl	800549c <slalomF>
		slalomR(V90_3_DEGACCEL, V90_3_OMEGA, 90, SPEED_3);
 8008a1c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008a20:	225a      	movs	r2, #90	; 0x5a
 8008a22:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008a26:	f242 7010 	movw	r0, #10000	; 0x2710
 8008a2a:	f7fc fded 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008a2e:	2103      	movs	r1, #3
 8008a30:	20fe      	movs	r0, #254	; 0xfe
 8008a32:	f007 fdad 	bl	8010590 <turn_dir>
		slalomB(10000, SPEED_3, V90_3_OFFSET_B);
 8008a36:	2252      	movs	r2, #82	; 0x52
 8008a38:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008a3c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008a40:	f7fc ff04 	bl	800584c <slalomB>
}
 8008a44:	e070      	b.n	8008b28 <v_L90+0x1cc>
	}else if(run_mode == 4){
 8008a46:	4b3a      	ldr	r3, [pc, #232]	; (8008b30 <v_L90+0x1d4>)
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	2b04      	cmp	r3, #4
 8008a4e:	d120      	bne.n	8008a92 <v_L90+0x136>
		slalomF(10000, SPEED_4, V90_4_OFFSET_F, NO_WALL, NO_WALL);
 8008a50:	f241 3388 	movw	r3, #5000	; 0x1388
 8008a54:	9300      	str	r3, [sp, #0]
 8008a56:	f241 3388 	movw	r3, #5000	; 0x1388
 8008a5a:	2223      	movs	r2, #35	; 0x23
 8008a5c:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8008a60:	f242 7010 	movw	r0, #10000	; 0x2710
 8008a64:	f7fc fd1a 	bl	800549c <slalomF>
		slalomR(V90_4_DEGACCEL, V90_4_OMEGA, 90, SPEED_4);
 8008a68:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8008a6c:	225a      	movs	r2, #90	; 0x5a
 8008a6e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008a72:	f242 7010 	movw	r0, #10000	; 0x2710
 8008a76:	f7fc fdc7 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008a7a:	2103      	movs	r1, #3
 8008a7c:	20fe      	movs	r0, #254	; 0xfe
 8008a7e:	f007 fd87 	bl	8010590 <turn_dir>
		slalomB(10000, SPEED_4, V90_4_OFFSET_B);
 8008a82:	2241      	movs	r2, #65	; 0x41
 8008a84:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8008a88:	f242 7010 	movw	r0, #10000	; 0x2710
 8008a8c:	f7fc fede 	bl	800584c <slalomB>
}
 8008a90:	e04a      	b.n	8008b28 <v_L90+0x1cc>
	}else if(run_mode == 5){
 8008a92:	4b27      	ldr	r3, [pc, #156]	; (8008b30 <v_L90+0x1d4>)
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	2b05      	cmp	r3, #5
 8008a9a:	d120      	bne.n	8008ade <v_L90+0x182>
		slalomF(10000, SPEED_5, V90_5_OFFSET_F, NO_WALL, NO_WALL);
 8008a9c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008aa0:	9300      	str	r3, [sp, #0]
 8008aa2:	f241 3388 	movw	r3, #5000	; 0x1388
 8008aa6:	221e      	movs	r2, #30
 8008aa8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008aac:	f242 7010 	movw	r0, #10000	; 0x2710
 8008ab0:	f7fc fcf4 	bl	800549c <slalomF>
		slalomR(V90_5_DEGACCEL, V90_5_OMEGA, 90, SPEED_5);
 8008ab4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008ab8:	225a      	movs	r2, #90	; 0x5a
 8008aba:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008abe:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8008ac2:	f7fc fda1 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008ac6:	2103      	movs	r1, #3
 8008ac8:	20fe      	movs	r0, #254	; 0xfe
 8008aca:	f007 fd61 	bl	8010590 <turn_dir>
		slalomB(10000, SPEED_5, V90_5_OFFSET_B);
 8008ace:	221e      	movs	r2, #30
 8008ad0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008ad4:	f242 7010 	movw	r0, #10000	; 0x2710
 8008ad8:	f7fc feb8 	bl	800584c <slalomB>
}
 8008adc:	e024      	b.n	8008b28 <v_L90+0x1cc>
	}else if(run_mode == 6){
 8008ade:	4b14      	ldr	r3, [pc, #80]	; (8008b30 <v_L90+0x1d4>)
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	2b06      	cmp	r3, #6
 8008ae6:	d11f      	bne.n	8008b28 <v_L90+0x1cc>
		slalomF(10000, SPEED_5, V90_5_OFFSET_F, NO_WALL, NO_WALL);
 8008ae8:	f241 3388 	movw	r3, #5000	; 0x1388
 8008aec:	9300      	str	r3, [sp, #0]
 8008aee:	f241 3388 	movw	r3, #5000	; 0x1388
 8008af2:	221e      	movs	r2, #30
 8008af4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008af8:	f242 7010 	movw	r0, #10000	; 0x2710
 8008afc:	f7fc fcce 	bl	800549c <slalomF>
		slalomR(V90_5_DEGACCEL, V90_5_OMEGA, 90, SPEED_5);
 8008b00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008b04:	225a      	movs	r2, #90	; 0x5a
 8008b06:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008b0a:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8008b0e:	f7fc fd7b 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008b12:	2103      	movs	r1, #3
 8008b14:	20fe      	movs	r0, #254	; 0xfe
 8008b16:	f007 fd3b 	bl	8010590 <turn_dir>
		slalomB(10000, SPEED_5, V90_5_OFFSET_B);
 8008b1a:	221e      	movs	r2, #30
 8008b1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008b20:	f242 7010 	movw	r0, #10000	; 0x2710
 8008b24:	f7fc fe92 	bl	800584c <slalomB>
}
 8008b28:	bf00      	nop
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	20000456 	.word	0x20000456

08008b34 <v_R135>:
//v_R135
// 区画中心から右に135度回転する　ゴール用
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R135(void){
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af02      	add	r7, sp, #8
	full_led_write1(YELLOW);
 8008b3a:	2006      	movs	r0, #6
 8008b3c:	f009 fbbc 	bl	80122b8 <full_led_write1>
	if(run_mode == 1){
 8008b40:	4bbf      	ldr	r3, [pc, #764]	; (8008e40 <v_R135+0x30c>)
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d150      	bne.n	8008bec <v_R135+0xb8>
		if(!MF2.FLAG.V){
 8008b4a:	4bbe      	ldr	r3, [pc, #760]	; (8008e44 <v_R135+0x310>)
 8008b4c:	881b      	ldrh	r3, [r3, #0]
 8008b4e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d10b      	bne.n	8008b70 <v_R135+0x3c>
			slalomF(10000, SPEED_1, V135_OFFSET_F, NO_WALL, NO_WALL);
 8008b58:	f241 3388 	movw	r3, #5000	; 0x1388
 8008b5c:	9300      	str	r3, [sp, #0]
 8008b5e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008b62:	2244      	movs	r2, #68	; 0x44
 8008b64:	21c8      	movs	r1, #200	; 0xc8
 8008b66:	f242 7010 	movw	r0, #10000	; 0x2710
 8008b6a:	f7fc fc97 	bl	800549c <slalomF>
 8008b6e:	e00a      	b.n	8008b86 <v_R135+0x52>
		}else{
			slalomF(10000, SPEED_1, V135_OFFSET_VF, NO_WALL, NO_WALL);
 8008b70:	f241 3388 	movw	r3, #5000	; 0x1388
 8008b74:	9300      	str	r3, [sp, #0]
 8008b76:	f241 3388 	movw	r3, #5000	; 0x1388
 8008b7a:	223a      	movs	r2, #58	; 0x3a
 8008b7c:	21c8      	movs	r1, #200	; 0xc8
 8008b7e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008b82:	f7fc fc8b 	bl	800549c <slalomF>
		}
		slalomR(-V135_DEGACCEL, -V135_OMEGA, -135, SPEED_1);
 8008b86:	23c8      	movs	r3, #200	; 0xc8
 8008b88:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008b8c:	49ae      	ldr	r1, [pc, #696]	; (8008e48 <v_R135+0x314>)
 8008b8e:	48af      	ldr	r0, [pc, #700]	; (8008e4c <v_R135+0x318>)
 8008b90:	f7fc fd3a 	bl	8005608 <slalomR>

		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008b94:	2103      	movs	r1, #3
 8008b96:	2003      	movs	r0, #3
 8008b98:	f007 fcfa 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008b9c:	4ba9      	ldr	r3, [pc, #676]	; (8008e44 <v_R135+0x310>)
 8008b9e:	881b      	ldrh	r3, [r3, #0]
 8008ba0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f003 0301 	and.w	r3, r3, #1
 8008bae:	bfb8      	it	lt
 8008bb0:	425b      	neglt	r3, r3
 8008bb2:	f003 0301 	and.w	r3, r3, #1
 8008bb6:	b2d9      	uxtb	r1, r3
 8008bb8:	4aa2      	ldr	r2, [pc, #648]	; (8008e44 <v_R135+0x310>)
 8008bba:	8813      	ldrh	r3, [r2, #0]
 8008bbc:	f361 03c3 	bfi	r3, r1, #3, #1
 8008bc0:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 8008bc2:	4ba0      	ldr	r3, [pc, #640]	; (8008e44 <v_R135+0x310>)
 8008bc4:	881b      	ldrh	r3, [r3, #0]
 8008bc6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d106      	bne.n	8008bde <v_R135+0xaa>
			slalomB(10000, SPEED_1, V135_OFFSET_VB);
 8008bd0:	2244      	movs	r2, #68	; 0x44
 8008bd2:	21c8      	movs	r1, #200	; 0xc8
 8008bd4:	f242 7010 	movw	r0, #10000	; 0x2710
 8008bd8:	f7fc fe38 	bl	800584c <slalomB>
			slalomB(10000, SPEED_5, V135_5_OFFSET_VB);
		}else{
			slalomB(10000, SPEED_5, V135_5_OFFSET_B);
		}
	}
}
 8008bdc:	e1dc      	b.n	8008f98 <v_R135+0x464>
			slalomB(10000, SPEED_1, V135_OFFSET_B);
 8008bde:	223a      	movs	r2, #58	; 0x3a
 8008be0:	21c8      	movs	r1, #200	; 0xc8
 8008be2:	f242 7010 	movw	r0, #10000	; 0x2710
 8008be6:	f7fc fe31 	bl	800584c <slalomB>
}
 8008bea:	e1d5      	b.n	8008f98 <v_R135+0x464>
	}else if(run_mode == 2){
 8008bec:	4b94      	ldr	r3, [pc, #592]	; (8008e40 <v_R135+0x30c>)
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	2b02      	cmp	r3, #2
 8008bf4:	d155      	bne.n	8008ca2 <v_R135+0x16e>
		if(!MF2.FLAG.V){
 8008bf6:	4b93      	ldr	r3, [pc, #588]	; (8008e44 <v_R135+0x310>)
 8008bf8:	881b      	ldrh	r3, [r3, #0]
 8008bfa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d10c      	bne.n	8008c1e <v_R135+0xea>
			slalomF(10000, SPEED_2, V135_2_OFFSET_F, NO_WALL, NO_WALL);
 8008c04:	f241 3388 	movw	r3, #5000	; 0x1388
 8008c08:	9300      	str	r3, [sp, #0]
 8008c0a:	f241 3388 	movw	r3, #5000	; 0x1388
 8008c0e:	2244      	movs	r2, #68	; 0x44
 8008c10:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008c14:	f242 7010 	movw	r0, #10000	; 0x2710
 8008c18:	f7fc fc40 	bl	800549c <slalomF>
 8008c1c:	e00b      	b.n	8008c36 <v_R135+0x102>
			slalomF(10000, SPEED_2, V135_2_OFFSET_VF, NO_WALL, NO_WALL);
 8008c1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	f241 3388 	movw	r3, #5000	; 0x1388
 8008c28:	223a      	movs	r2, #58	; 0x3a
 8008c2a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008c2e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008c32:	f7fc fc33 	bl	800549c <slalomF>
		slalomR(-V135_2_DEGACCEL, -V135_2_OMEGA, -135, SPEED_2);
 8008c36:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008c3a:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008c3e:	4982      	ldr	r1, [pc, #520]	; (8008e48 <v_R135+0x314>)
 8008c40:	4882      	ldr	r0, [pc, #520]	; (8008e4c <v_R135+0x318>)
 8008c42:	f7fc fce1 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008c46:	2103      	movs	r1, #3
 8008c48:	2003      	movs	r0, #3
 8008c4a:	f007 fca1 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008c4e:	4b7d      	ldr	r3, [pc, #500]	; (8008e44 <v_R135+0x310>)
 8008c50:	881b      	ldrh	r3, [r3, #0]
 8008c52:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	3301      	adds	r3, #1
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	f003 0301 	and.w	r3, r3, #1
 8008c60:	bfb8      	it	lt
 8008c62:	425b      	neglt	r3, r3
 8008c64:	f003 0301 	and.w	r3, r3, #1
 8008c68:	b2d9      	uxtb	r1, r3
 8008c6a:	4a76      	ldr	r2, [pc, #472]	; (8008e44 <v_R135+0x310>)
 8008c6c:	8813      	ldrh	r3, [r2, #0]
 8008c6e:	f361 03c3 	bfi	r3, r1, #3, #1
 8008c72:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008c74:	4b73      	ldr	r3, [pc, #460]	; (8008e44 <v_R135+0x310>)
 8008c76:	881b      	ldrh	r3, [r3, #0]
 8008c78:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d107      	bne.n	8008c92 <v_R135+0x15e>
			slalomB(10000, SPEED_2, V135_2_OFFSET_VB);
 8008c82:	2244      	movs	r2, #68	; 0x44
 8008c84:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008c88:	f242 7010 	movw	r0, #10000	; 0x2710
 8008c8c:	f7fc fdde 	bl	800584c <slalomB>
}
 8008c90:	e182      	b.n	8008f98 <v_R135+0x464>
			slalomB(10000, SPEED_2, V135_2_OFFSET_B);
 8008c92:	223a      	movs	r2, #58	; 0x3a
 8008c94:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008c98:	f242 7010 	movw	r0, #10000	; 0x2710
 8008c9c:	f7fc fdd6 	bl	800584c <slalomB>
}
 8008ca0:	e17a      	b.n	8008f98 <v_R135+0x464>
	}else if(run_mode == 3){
 8008ca2:	4b67      	ldr	r3, [pc, #412]	; (8008e40 <v_R135+0x30c>)
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	2b03      	cmp	r3, #3
 8008caa:	d155      	bne.n	8008d58 <v_R135+0x224>
		if(!MF2.FLAG.V){
 8008cac:	4b65      	ldr	r3, [pc, #404]	; (8008e44 <v_R135+0x310>)
 8008cae:	881b      	ldrh	r3, [r3, #0]
 8008cb0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d10c      	bne.n	8008cd4 <v_R135+0x1a0>
			slalomF(10000, SPEED_3, V135_3_OFFSET_F, NO_WALL, NO_WALL);
 8008cba:	f241 3388 	movw	r3, #5000	; 0x1388
 8008cbe:	9300      	str	r3, [sp, #0]
 8008cc0:	f241 3388 	movw	r3, #5000	; 0x1388
 8008cc4:	2246      	movs	r2, #70	; 0x46
 8008cc6:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008cca:	f242 7010 	movw	r0, #10000	; 0x2710
 8008cce:	f7fc fbe5 	bl	800549c <slalomF>
 8008cd2:	e00b      	b.n	8008cec <v_R135+0x1b8>
			slalomF(10000, SPEED_3, V135_3_OFFSET_VF, NO_WALL, NO_WALL);
 8008cd4:	f241 3388 	movw	r3, #5000	; 0x1388
 8008cd8:	9300      	str	r3, [sp, #0]
 8008cda:	f241 3388 	movw	r3, #5000	; 0x1388
 8008cde:	2237      	movs	r2, #55	; 0x37
 8008ce0:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008ce4:	f242 7010 	movw	r0, #10000	; 0x2710
 8008ce8:	f7fc fbd8 	bl	800549c <slalomF>
		slalomR(-V135_3_DEGACCEL, -V135_3_OMEGA, -135, SPEED_3);
 8008cec:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008cf0:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008cf4:	4956      	ldr	r1, [pc, #344]	; (8008e50 <v_R135+0x31c>)
 8008cf6:	4857      	ldr	r0, [pc, #348]	; (8008e54 <v_R135+0x320>)
 8008cf8:	f7fc fc86 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008cfc:	2103      	movs	r1, #3
 8008cfe:	2003      	movs	r0, #3
 8008d00:	f007 fc46 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008d04:	4b4f      	ldr	r3, [pc, #316]	; (8008e44 <v_R135+0x310>)
 8008d06:	881b      	ldrh	r3, [r3, #0]
 8008d08:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	3301      	adds	r3, #1
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f003 0301 	and.w	r3, r3, #1
 8008d16:	bfb8      	it	lt
 8008d18:	425b      	neglt	r3, r3
 8008d1a:	f003 0301 	and.w	r3, r3, #1
 8008d1e:	b2d9      	uxtb	r1, r3
 8008d20:	4a48      	ldr	r2, [pc, #288]	; (8008e44 <v_R135+0x310>)
 8008d22:	8813      	ldrh	r3, [r2, #0]
 8008d24:	f361 03c3 	bfi	r3, r1, #3, #1
 8008d28:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008d2a:	4b46      	ldr	r3, [pc, #280]	; (8008e44 <v_R135+0x310>)
 8008d2c:	881b      	ldrh	r3, [r3, #0]
 8008d2e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d107      	bne.n	8008d48 <v_R135+0x214>
			slalomB(10000, SPEED_3, V135_3_OFFSET_VB);
 8008d38:	225f      	movs	r2, #95	; 0x5f
 8008d3a:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008d3e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008d42:	f7fc fd83 	bl	800584c <slalomB>
}
 8008d46:	e127      	b.n	8008f98 <v_R135+0x464>
			slalomB(10000, SPEED_3, V135_3_OFFSET_B);
 8008d48:	2250      	movs	r2, #80	; 0x50
 8008d4a:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008d4e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008d52:	f7fc fd7b 	bl	800584c <slalomB>
}
 8008d56:	e11f      	b.n	8008f98 <v_R135+0x464>
	}else if(run_mode == 4){
 8008d58:	4b39      	ldr	r3, [pc, #228]	; (8008e40 <v_R135+0x30c>)
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	2b04      	cmp	r3, #4
 8008d60:	d155      	bne.n	8008e0e <v_R135+0x2da>
		if(!MF2.FLAG.V){
 8008d62:	4b38      	ldr	r3, [pc, #224]	; (8008e44 <v_R135+0x310>)
 8008d64:	881b      	ldrh	r3, [r3, #0]
 8008d66:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d10c      	bne.n	8008d8a <v_R135+0x256>
			slalomF(10000, SPEED_4, V135_4_OFFSET_F, NO_WALL, NO_WALL);
 8008d70:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d74:	9300      	str	r3, [sp, #0]
 8008d76:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d7a:	2255      	movs	r2, #85	; 0x55
 8008d7c:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8008d80:	f242 7010 	movw	r0, #10000	; 0x2710
 8008d84:	f7fc fb8a 	bl	800549c <slalomF>
 8008d88:	e00b      	b.n	8008da2 <v_R135+0x26e>
			slalomF(10000, SPEED_4, V135_4_OFFSET_VF, NO_WALL, NO_WALL);
 8008d8a:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d8e:	9300      	str	r3, [sp, #0]
 8008d90:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d94:	224b      	movs	r2, #75	; 0x4b
 8008d96:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8008d9a:	f242 7010 	movw	r0, #10000	; 0x2710
 8008d9e:	f7fc fb7d 	bl	800549c <slalomF>
		slalomR(-V135_4_DEGACCEL, -V135_4_OMEGA, -135, SPEED_4);
 8008da2:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8008da6:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008daa:	492b      	ldr	r1, [pc, #172]	; (8008e58 <v_R135+0x324>)
 8008dac:	482b      	ldr	r0, [pc, #172]	; (8008e5c <v_R135+0x328>)
 8008dae:	f7fc fc2b 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008db2:	2103      	movs	r1, #3
 8008db4:	2003      	movs	r0, #3
 8008db6:	f007 fbeb 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008dba:	4b22      	ldr	r3, [pc, #136]	; (8008e44 <v_R135+0x310>)
 8008dbc:	881b      	ldrh	r3, [r3, #0]
 8008dbe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	f003 0301 	and.w	r3, r3, #1
 8008dcc:	bfb8      	it	lt
 8008dce:	425b      	neglt	r3, r3
 8008dd0:	f003 0301 	and.w	r3, r3, #1
 8008dd4:	b2d9      	uxtb	r1, r3
 8008dd6:	4a1b      	ldr	r2, [pc, #108]	; (8008e44 <v_R135+0x310>)
 8008dd8:	8813      	ldrh	r3, [r2, #0]
 8008dda:	f361 03c3 	bfi	r3, r1, #3, #1
 8008dde:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008de0:	4b18      	ldr	r3, [pc, #96]	; (8008e44 <v_R135+0x310>)
 8008de2:	881b      	ldrh	r3, [r3, #0]
 8008de4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d107      	bne.n	8008dfe <v_R135+0x2ca>
			slalomB(10000, SPEED_4, V135_4_OFFSET_VB);
 8008dee:	2282      	movs	r2, #130	; 0x82
 8008df0:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8008df4:	f242 7010 	movw	r0, #10000	; 0x2710
 8008df8:	f7fc fd28 	bl	800584c <slalomB>
}
 8008dfc:	e0cc      	b.n	8008f98 <v_R135+0x464>
			slalomB(10000, SPEED_4, V135_4_OFFSET_B);
 8008dfe:	2269      	movs	r2, #105	; 0x69
 8008e00:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8008e04:	f242 7010 	movw	r0, #10000	; 0x2710
 8008e08:	f7fc fd20 	bl	800584c <slalomB>
}
 8008e0c:	e0c4      	b.n	8008f98 <v_R135+0x464>
	}else if(run_mode == 5){
 8008e0e:	4b0c      	ldr	r3, [pc, #48]	; (8008e40 <v_R135+0x30c>)
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	2b05      	cmp	r3, #5
 8008e16:	d165      	bne.n	8008ee4 <v_R135+0x3b0>
		if(!MF2.FLAG.V){
 8008e18:	4b0a      	ldr	r3, [pc, #40]	; (8008e44 <v_R135+0x310>)
 8008e1a:	881b      	ldrh	r3, [r3, #0]
 8008e1c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d11c      	bne.n	8008e60 <v_R135+0x32c>
			slalomF(10000, SPEED_5, V135_5_OFFSET_F, NO_WALL, NO_WALL);
 8008e26:	f241 3388 	movw	r3, #5000	; 0x1388
 8008e2a:	9300      	str	r3, [sp, #0]
 8008e2c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008e30:	2243      	movs	r2, #67	; 0x43
 8008e32:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008e36:	f242 7010 	movw	r0, #10000	; 0x2710
 8008e3a:	f7fc fb2f 	bl	800549c <slalomF>
 8008e3e:	e01b      	b.n	8008e78 <v_R135+0x344>
 8008e40:	20000456 	.word	0x20000456
 8008e44:	20000fa4 	.word	0x20000fa4
 8008e48:	fffffed4 	.word	0xfffffed4
 8008e4c:	fffff448 	.word	0xfffff448
 8008e50:	fffffe0c 	.word	0xfffffe0c
 8008e54:	ffffec78 	.word	0xffffec78
 8008e58:	fffffce0 	.word	0xfffffce0
 8008e5c:	ffffe0c0 	.word	0xffffe0c0
			slalomF(10000, SPEED_5, V135_5_OFFSET_VF, NO_WALL, NO_WALL);
 8008e60:	f241 3388 	movw	r3, #5000	; 0x1388
 8008e64:	9300      	str	r3, [sp, #0]
 8008e66:	f241 3388 	movw	r3, #5000	; 0x1388
 8008e6a:	2243      	movs	r2, #67	; 0x43
 8008e6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008e70:	f242 7010 	movw	r0, #10000	; 0x2710
 8008e74:	f7fc fb12 	bl	800549c <slalomF>
		slalomR(-V135_5_DEGACCEL, -V135_5_OMEGA, -135, SPEED_5);
 8008e78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008e7c:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008e80:	4947      	ldr	r1, [pc, #284]	; (8008fa0 <v_R135+0x46c>)
 8008e82:	4848      	ldr	r0, [pc, #288]	; (8008fa4 <v_R135+0x470>)
 8008e84:	f7fc fbc0 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008e88:	2103      	movs	r1, #3
 8008e8a:	2003      	movs	r0, #3
 8008e8c:	f007 fb80 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008e90:	4b45      	ldr	r3, [pc, #276]	; (8008fa8 <v_R135+0x474>)
 8008e92:	881b      	ldrh	r3, [r3, #0]
 8008e94:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f003 0301 	and.w	r3, r3, #1
 8008ea2:	bfb8      	it	lt
 8008ea4:	425b      	neglt	r3, r3
 8008ea6:	f003 0301 	and.w	r3, r3, #1
 8008eaa:	b2d9      	uxtb	r1, r3
 8008eac:	4a3e      	ldr	r2, [pc, #248]	; (8008fa8 <v_R135+0x474>)
 8008eae:	8813      	ldrh	r3, [r2, #0]
 8008eb0:	f361 03c3 	bfi	r3, r1, #3, #1
 8008eb4:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008eb6:	4b3c      	ldr	r3, [pc, #240]	; (8008fa8 <v_R135+0x474>)
 8008eb8:	881b      	ldrh	r3, [r3, #0]
 8008eba:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d107      	bne.n	8008ed4 <v_R135+0x3a0>
			slalomB(10000, SPEED_5, V135_5_OFFSET_VB);
 8008ec4:	2232      	movs	r2, #50	; 0x32
 8008ec6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008eca:	f242 7010 	movw	r0, #10000	; 0x2710
 8008ece:	f7fc fcbd 	bl	800584c <slalomB>
}
 8008ed2:	e061      	b.n	8008f98 <v_R135+0x464>
			slalomB(10000, SPEED_5, V135_5_OFFSET_B);
 8008ed4:	2232      	movs	r2, #50	; 0x32
 8008ed6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008eda:	f242 7010 	movw	r0, #10000	; 0x2710
 8008ede:	f7fc fcb5 	bl	800584c <slalomB>
}
 8008ee2:	e059      	b.n	8008f98 <v_R135+0x464>
	}else if(run_mode == 6){
 8008ee4:	4b31      	ldr	r3, [pc, #196]	; (8008fac <v_R135+0x478>)
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	2b06      	cmp	r3, #6
 8008eec:	d154      	bne.n	8008f98 <v_R135+0x464>
		if(!MF2.FLAG.V){
 8008eee:	4b2e      	ldr	r3, [pc, #184]	; (8008fa8 <v_R135+0x474>)
 8008ef0:	881b      	ldrh	r3, [r3, #0]
 8008ef2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d10c      	bne.n	8008f16 <v_R135+0x3e2>
			slalomF(10000, SPEED_5, V135_5_OFFSET_F, NO_WALL, NO_WALL);
 8008efc:	f241 3388 	movw	r3, #5000	; 0x1388
 8008f00:	9300      	str	r3, [sp, #0]
 8008f02:	f241 3388 	movw	r3, #5000	; 0x1388
 8008f06:	2243      	movs	r2, #67	; 0x43
 8008f08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008f0c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008f10:	f7fc fac4 	bl	800549c <slalomF>
 8008f14:	e00b      	b.n	8008f2e <v_R135+0x3fa>
			slalomF(10000, SPEED_5, V135_5_OFFSET_VF, NO_WALL, NO_WALL);
 8008f16:	f241 3388 	movw	r3, #5000	; 0x1388
 8008f1a:	9300      	str	r3, [sp, #0]
 8008f1c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008f20:	2243      	movs	r2, #67	; 0x43
 8008f22:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008f26:	f242 7010 	movw	r0, #10000	; 0x2710
 8008f2a:	f7fc fab7 	bl	800549c <slalomF>
		slalomR(-V135_5_DEGACCEL, -V135_5_OMEGA, -135, SPEED_5);
 8008f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008f32:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008f36:	491a      	ldr	r1, [pc, #104]	; (8008fa0 <v_R135+0x46c>)
 8008f38:	481a      	ldr	r0, [pc, #104]	; (8008fa4 <v_R135+0x470>)
 8008f3a:	f7fc fb65 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008f3e:	2103      	movs	r1, #3
 8008f40:	2003      	movs	r0, #3
 8008f42:	f007 fb25 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008f46:	4b18      	ldr	r3, [pc, #96]	; (8008fa8 <v_R135+0x474>)
 8008f48:	881b      	ldrh	r3, [r3, #0]
 8008f4a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	3301      	adds	r3, #1
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	f003 0301 	and.w	r3, r3, #1
 8008f58:	bfb8      	it	lt
 8008f5a:	425b      	neglt	r3, r3
 8008f5c:	f003 0301 	and.w	r3, r3, #1
 8008f60:	b2d9      	uxtb	r1, r3
 8008f62:	4a11      	ldr	r2, [pc, #68]	; (8008fa8 <v_R135+0x474>)
 8008f64:	8813      	ldrh	r3, [r2, #0]
 8008f66:	f361 03c3 	bfi	r3, r1, #3, #1
 8008f6a:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008f6c:	4b0e      	ldr	r3, [pc, #56]	; (8008fa8 <v_R135+0x474>)
 8008f6e:	881b      	ldrh	r3, [r3, #0]
 8008f70:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d107      	bne.n	8008f8a <v_R135+0x456>
			slalomB(10000, SPEED_5, V135_5_OFFSET_VB);
 8008f7a:	2232      	movs	r2, #50	; 0x32
 8008f7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008f80:	f242 7010 	movw	r0, #10000	; 0x2710
 8008f84:	f7fc fc62 	bl	800584c <slalomB>
}
 8008f88:	e006      	b.n	8008f98 <v_R135+0x464>
			slalomB(10000, SPEED_5, V135_5_OFFSET_B);
 8008f8a:	2232      	movs	r2, #50	; 0x32
 8008f8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008f90:	f242 7010 	movw	r0, #10000	; 0x2710
 8008f94:	f7fc fc5a 	bl	800584c <slalomB>
}
 8008f98:	bf00      	nop
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	fffffc18 	.word	0xfffffc18
 8008fa4:	ffffd8f0 	.word	0xffffd8f0
 8008fa8:	20000fa4 	.word	0x20000fa4
 8008fac:	20000456 	.word	0x20000456

08008fb0 <v_L135>:
//v_L135
// 区画中心から左に135度回転する　ゴール用
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L135(void){
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af02      	add	r7, sp, #8
	full_led_write1(PURPLE);
 8008fb6:	2005      	movs	r0, #5
 8008fb8:	f009 f97e 	bl	80122b8 <full_led_write1>
	if(run_mode == 1){
 8008fbc:	4bc1      	ldr	r3, [pc, #772]	; (80092c4 <v_L135+0x314>)
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d151      	bne.n	800906a <v_L135+0xba>
		if(!MF2.FLAG.V){
 8008fc6:	4bc0      	ldr	r3, [pc, #768]	; (80092c8 <v_L135+0x318>)
 8008fc8:	881b      	ldrh	r3, [r3, #0]
 8008fca:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d10b      	bne.n	8008fec <v_L135+0x3c>
			slalomF(10000, SPEED_1, V135_OFFSET_F, NO_WALL, NO_WALL);
 8008fd4:	f241 3388 	movw	r3, #5000	; 0x1388
 8008fd8:	9300      	str	r3, [sp, #0]
 8008fda:	f241 3388 	movw	r3, #5000	; 0x1388
 8008fde:	2244      	movs	r2, #68	; 0x44
 8008fe0:	21c8      	movs	r1, #200	; 0xc8
 8008fe2:	f242 7010 	movw	r0, #10000	; 0x2710
 8008fe6:	f7fc fa59 	bl	800549c <slalomF>
 8008fea:	e00a      	b.n	8009002 <v_L135+0x52>
		}else{
			slalomF(10000, SPEED_1, V135_OFFSET_VF, NO_WALL, NO_WALL);
 8008fec:	f241 3388 	movw	r3, #5000	; 0x1388
 8008ff0:	9300      	str	r3, [sp, #0]
 8008ff2:	f241 3388 	movw	r3, #5000	; 0x1388
 8008ff6:	223a      	movs	r2, #58	; 0x3a
 8008ff8:	21c8      	movs	r1, #200	; 0xc8
 8008ffa:	f242 7010 	movw	r0, #10000	; 0x2710
 8008ffe:	f7fc fa4d 	bl	800549c <slalomF>
		}
		slalomR(V135_DEGACCEL, V135_OMEGA, 135, SPEED_1);
 8009002:	23c8      	movs	r3, #200	; 0xc8
 8009004:	2287      	movs	r2, #135	; 0x87
 8009006:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800900a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800900e:	f7fc fafb 	bl	8005608 <slalomR>

		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8009012:	2103      	movs	r1, #3
 8009014:	20fd      	movs	r0, #253	; 0xfd
 8009016:	f007 fabb 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800901a:	4bab      	ldr	r3, [pc, #684]	; (80092c8 <v_L135+0x318>)
 800901c:	881b      	ldrh	r3, [r3, #0]
 800901e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009022:	b2db      	uxtb	r3, r3
 8009024:	3301      	adds	r3, #1
 8009026:	2b00      	cmp	r3, #0
 8009028:	f003 0301 	and.w	r3, r3, #1
 800902c:	bfb8      	it	lt
 800902e:	425b      	neglt	r3, r3
 8009030:	f003 0301 	and.w	r3, r3, #1
 8009034:	b2d9      	uxtb	r1, r3
 8009036:	4aa4      	ldr	r2, [pc, #656]	; (80092c8 <v_L135+0x318>)
 8009038:	8813      	ldrh	r3, [r2, #0]
 800903a:	f361 03c3 	bfi	r3, r1, #3, #1
 800903e:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 8009040:	4ba1      	ldr	r3, [pc, #644]	; (80092c8 <v_L135+0x318>)
 8009042:	881b      	ldrh	r3, [r3, #0]
 8009044:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009048:	b2db      	uxtb	r3, r3
 800904a:	2b00      	cmp	r3, #0
 800904c:	d106      	bne.n	800905c <v_L135+0xac>
			slalomB(10000, SPEED_1, V135_OFFSET_VB);
 800904e:	2244      	movs	r2, #68	; 0x44
 8009050:	21c8      	movs	r1, #200	; 0xc8
 8009052:	f242 7010 	movw	r0, #10000	; 0x2710
 8009056:	f7fc fbf9 	bl	800584c <slalomB>
			slalomB(10000, SPEED_5, V135_5_OFFSET_VB);
		}else{
			slalomB(10000, SPEED_5, V135_5_OFFSET_B);
		}
	}
}
 800905a:	e1d5      	b.n	8009408 <v_L135+0x458>
			slalomB(10000, SPEED_1, V135_OFFSET_B);
 800905c:	223a      	movs	r2, #58	; 0x3a
 800905e:	21c8      	movs	r1, #200	; 0xc8
 8009060:	f242 7010 	movw	r0, #10000	; 0x2710
 8009064:	f7fc fbf2 	bl	800584c <slalomB>
}
 8009068:	e1ce      	b.n	8009408 <v_L135+0x458>
	}else if(run_mode == 2){
 800906a:	4b96      	ldr	r3, [pc, #600]	; (80092c4 <v_L135+0x314>)
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	b2db      	uxtb	r3, r3
 8009070:	2b02      	cmp	r3, #2
 8009072:	d156      	bne.n	8009122 <v_L135+0x172>
		if(!MF2.FLAG.V){
 8009074:	4b94      	ldr	r3, [pc, #592]	; (80092c8 <v_L135+0x318>)
 8009076:	881b      	ldrh	r3, [r3, #0]
 8009078:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800907c:	b2db      	uxtb	r3, r3
 800907e:	2b00      	cmp	r3, #0
 8009080:	d10c      	bne.n	800909c <v_L135+0xec>
			slalomF(10000, SPEED_2, V135_2_OFFSET_F, NO_WALL, NO_WALL);
 8009082:	f241 3388 	movw	r3, #5000	; 0x1388
 8009086:	9300      	str	r3, [sp, #0]
 8009088:	f241 3388 	movw	r3, #5000	; 0x1388
 800908c:	2244      	movs	r2, #68	; 0x44
 800908e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009092:	f242 7010 	movw	r0, #10000	; 0x2710
 8009096:	f7fc fa01 	bl	800549c <slalomF>
 800909a:	e00b      	b.n	80090b4 <v_L135+0x104>
			slalomF(10000, SPEED_2, V135_2_OFFSET_VF, NO_WALL, NO_WALL);
 800909c:	f241 3388 	movw	r3, #5000	; 0x1388
 80090a0:	9300      	str	r3, [sp, #0]
 80090a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80090a6:	223a      	movs	r2, #58	; 0x3a
 80090a8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80090ac:	f242 7010 	movw	r0, #10000	; 0x2710
 80090b0:	f7fc f9f4 	bl	800549c <slalomF>
		slalomR(V135_2_DEGACCEL, V135_2_OMEGA, 135, SPEED_2);
 80090b4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80090b8:	2287      	movs	r2, #135	; 0x87
 80090ba:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80090be:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80090c2:	f7fc faa1 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80090c6:	2103      	movs	r1, #3
 80090c8:	20fd      	movs	r0, #253	; 0xfd
 80090ca:	f007 fa61 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80090ce:	4b7e      	ldr	r3, [pc, #504]	; (80092c8 <v_L135+0x318>)
 80090d0:	881b      	ldrh	r3, [r3, #0]
 80090d2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	3301      	adds	r3, #1
 80090da:	2b00      	cmp	r3, #0
 80090dc:	f003 0301 	and.w	r3, r3, #1
 80090e0:	bfb8      	it	lt
 80090e2:	425b      	neglt	r3, r3
 80090e4:	f003 0301 	and.w	r3, r3, #1
 80090e8:	b2d9      	uxtb	r1, r3
 80090ea:	4a77      	ldr	r2, [pc, #476]	; (80092c8 <v_L135+0x318>)
 80090ec:	8813      	ldrh	r3, [r2, #0]
 80090ee:	f361 03c3 	bfi	r3, r1, #3, #1
 80090f2:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 80090f4:	4b74      	ldr	r3, [pc, #464]	; (80092c8 <v_L135+0x318>)
 80090f6:	881b      	ldrh	r3, [r3, #0]
 80090f8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d107      	bne.n	8009112 <v_L135+0x162>
			slalomB(10000, SPEED_2, V135_2_OFFSET_VB);
 8009102:	2244      	movs	r2, #68	; 0x44
 8009104:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009108:	f242 7010 	movw	r0, #10000	; 0x2710
 800910c:	f7fc fb9e 	bl	800584c <slalomB>
}
 8009110:	e17a      	b.n	8009408 <v_L135+0x458>
			slalomB(10000, SPEED_2, V135_2_OFFSET_B);
 8009112:	223a      	movs	r2, #58	; 0x3a
 8009114:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009118:	f242 7010 	movw	r0, #10000	; 0x2710
 800911c:	f7fc fb96 	bl	800584c <slalomB>
}
 8009120:	e172      	b.n	8009408 <v_L135+0x458>
	}else if(run_mode == 3){
 8009122:	4b68      	ldr	r3, [pc, #416]	; (80092c4 <v_L135+0x314>)
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	b2db      	uxtb	r3, r3
 8009128:	2b03      	cmp	r3, #3
 800912a:	d156      	bne.n	80091da <v_L135+0x22a>
		if(!MF2.FLAG.V){
 800912c:	4b66      	ldr	r3, [pc, #408]	; (80092c8 <v_L135+0x318>)
 800912e:	881b      	ldrh	r3, [r3, #0]
 8009130:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009134:	b2db      	uxtb	r3, r3
 8009136:	2b00      	cmp	r3, #0
 8009138:	d10c      	bne.n	8009154 <v_L135+0x1a4>
			slalomF(10000, SPEED_3, V135_3_OFFSET_F, NO_WALL, NO_WALL);
 800913a:	f241 3388 	movw	r3, #5000	; 0x1388
 800913e:	9300      	str	r3, [sp, #0]
 8009140:	f241 3388 	movw	r3, #5000	; 0x1388
 8009144:	2246      	movs	r2, #70	; 0x46
 8009146:	f44f 7116 	mov.w	r1, #600	; 0x258
 800914a:	f242 7010 	movw	r0, #10000	; 0x2710
 800914e:	f7fc f9a5 	bl	800549c <slalomF>
 8009152:	e00b      	b.n	800916c <v_L135+0x1bc>
			slalomF(10000, SPEED_3, V135_3_OFFSET_VF, NO_WALL, NO_WALL);
 8009154:	f241 3388 	movw	r3, #5000	; 0x1388
 8009158:	9300      	str	r3, [sp, #0]
 800915a:	f241 3388 	movw	r3, #5000	; 0x1388
 800915e:	2237      	movs	r2, #55	; 0x37
 8009160:	f44f 7116 	mov.w	r1, #600	; 0x258
 8009164:	f242 7010 	movw	r0, #10000	; 0x2710
 8009168:	f7fc f998 	bl	800549c <slalomF>
		slalomR(V135_3_DEGACCEL, V135_3_OMEGA, 135, SPEED_3);
 800916c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8009170:	2287      	movs	r2, #135	; 0x87
 8009172:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009176:	f241 3088 	movw	r0, #5000	; 0x1388
 800917a:	f7fc fa45 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800917e:	2103      	movs	r1, #3
 8009180:	20fd      	movs	r0, #253	; 0xfd
 8009182:	f007 fa05 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8009186:	4b50      	ldr	r3, [pc, #320]	; (80092c8 <v_L135+0x318>)
 8009188:	881b      	ldrh	r3, [r3, #0]
 800918a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800918e:	b2db      	uxtb	r3, r3
 8009190:	3301      	adds	r3, #1
 8009192:	2b00      	cmp	r3, #0
 8009194:	f003 0301 	and.w	r3, r3, #1
 8009198:	bfb8      	it	lt
 800919a:	425b      	neglt	r3, r3
 800919c:	f003 0301 	and.w	r3, r3, #1
 80091a0:	b2d9      	uxtb	r1, r3
 80091a2:	4a49      	ldr	r2, [pc, #292]	; (80092c8 <v_L135+0x318>)
 80091a4:	8813      	ldrh	r3, [r2, #0]
 80091a6:	f361 03c3 	bfi	r3, r1, #3, #1
 80091aa:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 80091ac:	4b46      	ldr	r3, [pc, #280]	; (80092c8 <v_L135+0x318>)
 80091ae:	881b      	ldrh	r3, [r3, #0]
 80091b0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d107      	bne.n	80091ca <v_L135+0x21a>
			slalomB(10000, SPEED_3, V135_3_OFFSET_VB);
 80091ba:	225f      	movs	r2, #95	; 0x5f
 80091bc:	f44f 7116 	mov.w	r1, #600	; 0x258
 80091c0:	f242 7010 	movw	r0, #10000	; 0x2710
 80091c4:	f7fc fb42 	bl	800584c <slalomB>
}
 80091c8:	e11e      	b.n	8009408 <v_L135+0x458>
			slalomB(10000, SPEED_3, V135_3_OFFSET_B);
 80091ca:	2250      	movs	r2, #80	; 0x50
 80091cc:	f44f 7116 	mov.w	r1, #600	; 0x258
 80091d0:	f242 7010 	movw	r0, #10000	; 0x2710
 80091d4:	f7fc fb3a 	bl	800584c <slalomB>
}
 80091d8:	e116      	b.n	8009408 <v_L135+0x458>
	}else if(run_mode == 4){
 80091da:	4b3a      	ldr	r3, [pc, #232]	; (80092c4 <v_L135+0x314>)
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	2b04      	cmp	r3, #4
 80091e2:	d156      	bne.n	8009292 <v_L135+0x2e2>
		if(!MF2.FLAG.V){
 80091e4:	4b38      	ldr	r3, [pc, #224]	; (80092c8 <v_L135+0x318>)
 80091e6:	881b      	ldrh	r3, [r3, #0]
 80091e8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d10c      	bne.n	800920c <v_L135+0x25c>
			slalomF(10000, SPEED_4, V135_4_OFFSET_F, NO_WALL, NO_WALL);
 80091f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80091f6:	9300      	str	r3, [sp, #0]
 80091f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80091fc:	2255      	movs	r2, #85	; 0x55
 80091fe:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8009202:	f242 7010 	movw	r0, #10000	; 0x2710
 8009206:	f7fc f949 	bl	800549c <slalomF>
 800920a:	e00b      	b.n	8009224 <v_L135+0x274>
			slalomF(10000, SPEED_4, V135_4_OFFSET_VF, NO_WALL, NO_WALL);
 800920c:	f241 3388 	movw	r3, #5000	; 0x1388
 8009210:	9300      	str	r3, [sp, #0]
 8009212:	f241 3388 	movw	r3, #5000	; 0x1388
 8009216:	224b      	movs	r2, #75	; 0x4b
 8009218:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800921c:	f242 7010 	movw	r0, #10000	; 0x2710
 8009220:	f7fc f93c 	bl	800549c <slalomF>
		slalomR(V135_4_DEGACCEL, V135_4_OMEGA, 135, SPEED_4);
 8009224:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8009228:	2287      	movs	r2, #135	; 0x87
 800922a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800922e:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8009232:	f7fc f9e9 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8009236:	2103      	movs	r1, #3
 8009238:	20fd      	movs	r0, #253	; 0xfd
 800923a:	f007 f9a9 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800923e:	4b22      	ldr	r3, [pc, #136]	; (80092c8 <v_L135+0x318>)
 8009240:	881b      	ldrh	r3, [r3, #0]
 8009242:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009246:	b2db      	uxtb	r3, r3
 8009248:	3301      	adds	r3, #1
 800924a:	2b00      	cmp	r3, #0
 800924c:	f003 0301 	and.w	r3, r3, #1
 8009250:	bfb8      	it	lt
 8009252:	425b      	neglt	r3, r3
 8009254:	f003 0301 	and.w	r3, r3, #1
 8009258:	b2d9      	uxtb	r1, r3
 800925a:	4a1b      	ldr	r2, [pc, #108]	; (80092c8 <v_L135+0x318>)
 800925c:	8813      	ldrh	r3, [r2, #0]
 800925e:	f361 03c3 	bfi	r3, r1, #3, #1
 8009262:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8009264:	4b18      	ldr	r3, [pc, #96]	; (80092c8 <v_L135+0x318>)
 8009266:	881b      	ldrh	r3, [r3, #0]
 8009268:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800926c:	b2db      	uxtb	r3, r3
 800926e:	2b00      	cmp	r3, #0
 8009270:	d107      	bne.n	8009282 <v_L135+0x2d2>
			slalomB(10000, SPEED_4, V135_4_OFFSET_VB);
 8009272:	2282      	movs	r2, #130	; 0x82
 8009274:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8009278:	f242 7010 	movw	r0, #10000	; 0x2710
 800927c:	f7fc fae6 	bl	800584c <slalomB>
}
 8009280:	e0c2      	b.n	8009408 <v_L135+0x458>
			slalomB(10000, SPEED_4, V135_4_OFFSET_B);
 8009282:	2269      	movs	r2, #105	; 0x69
 8009284:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8009288:	f242 7010 	movw	r0, #10000	; 0x2710
 800928c:	f7fc fade 	bl	800584c <slalomB>
}
 8009290:	e0ba      	b.n	8009408 <v_L135+0x458>
	}else if(run_mode == 5){
 8009292:	4b0c      	ldr	r3, [pc, #48]	; (80092c4 <v_L135+0x314>)
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	b2db      	uxtb	r3, r3
 8009298:	2b05      	cmp	r3, #5
 800929a:	d15a      	bne.n	8009352 <v_L135+0x3a2>
		if(!MF2.FLAG.V){
 800929c:	4b0a      	ldr	r3, [pc, #40]	; (80092c8 <v_L135+0x318>)
 800929e:	881b      	ldrh	r3, [r3, #0]
 80092a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d110      	bne.n	80092cc <v_L135+0x31c>
			slalomF(10000, SPEED_5, V135_5_OFFSET_F, NO_WALL, NO_WALL);
 80092aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80092ae:	9300      	str	r3, [sp, #0]
 80092b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80092b4:	2243      	movs	r2, #67	; 0x43
 80092b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80092ba:	f242 7010 	movw	r0, #10000	; 0x2710
 80092be:	f7fc f8ed 	bl	800549c <slalomF>
 80092c2:	e00f      	b.n	80092e4 <v_L135+0x334>
 80092c4:	20000456 	.word	0x20000456
 80092c8:	20000fa4 	.word	0x20000fa4
			slalomF(10000, SPEED_5, V135_5_OFFSET_VF, NO_WALL, NO_WALL);
 80092cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80092d0:	9300      	str	r3, [sp, #0]
 80092d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80092d6:	2243      	movs	r2, #67	; 0x43
 80092d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80092dc:	f242 7010 	movw	r0, #10000	; 0x2710
 80092e0:	f7fc f8dc 	bl	800549c <slalomF>
		slalomR(V135_5_DEGACCEL, V135_5_OMEGA, 135, SPEED_5);
 80092e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80092e8:	2287      	movs	r2, #135	; 0x87
 80092ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80092ee:	f242 7010 	movw	r0, #10000	; 0x2710
 80092f2:	f7fc f989 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80092f6:	2103      	movs	r1, #3
 80092f8:	20fd      	movs	r0, #253	; 0xfd
 80092fa:	f007 f949 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80092fe:	4b44      	ldr	r3, [pc, #272]	; (8009410 <v_L135+0x460>)
 8009300:	881b      	ldrh	r3, [r3, #0]
 8009302:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009306:	b2db      	uxtb	r3, r3
 8009308:	3301      	adds	r3, #1
 800930a:	2b00      	cmp	r3, #0
 800930c:	f003 0301 	and.w	r3, r3, #1
 8009310:	bfb8      	it	lt
 8009312:	425b      	neglt	r3, r3
 8009314:	f003 0301 	and.w	r3, r3, #1
 8009318:	b2d9      	uxtb	r1, r3
 800931a:	4a3d      	ldr	r2, [pc, #244]	; (8009410 <v_L135+0x460>)
 800931c:	8813      	ldrh	r3, [r2, #0]
 800931e:	f361 03c3 	bfi	r3, r1, #3, #1
 8009322:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8009324:	4b3a      	ldr	r3, [pc, #232]	; (8009410 <v_L135+0x460>)
 8009326:	881b      	ldrh	r3, [r3, #0]
 8009328:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800932c:	b2db      	uxtb	r3, r3
 800932e:	2b00      	cmp	r3, #0
 8009330:	d107      	bne.n	8009342 <v_L135+0x392>
			slalomB(10000, SPEED_5, V135_5_OFFSET_VB);
 8009332:	2232      	movs	r2, #50	; 0x32
 8009334:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009338:	f242 7010 	movw	r0, #10000	; 0x2710
 800933c:	f7fc fa86 	bl	800584c <slalomB>
}
 8009340:	e062      	b.n	8009408 <v_L135+0x458>
			slalomB(10000, SPEED_5, V135_5_OFFSET_B);
 8009342:	2232      	movs	r2, #50	; 0x32
 8009344:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009348:	f242 7010 	movw	r0, #10000	; 0x2710
 800934c:	f7fc fa7e 	bl	800584c <slalomB>
}
 8009350:	e05a      	b.n	8009408 <v_L135+0x458>
	}else if(run_mode == 6){
 8009352:	4b30      	ldr	r3, [pc, #192]	; (8009414 <v_L135+0x464>)
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	b2db      	uxtb	r3, r3
 8009358:	2b06      	cmp	r3, #6
 800935a:	d155      	bne.n	8009408 <v_L135+0x458>
		if(!MF2.FLAG.V){
 800935c:	4b2c      	ldr	r3, [pc, #176]	; (8009410 <v_L135+0x460>)
 800935e:	881b      	ldrh	r3, [r3, #0]
 8009360:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009364:	b2db      	uxtb	r3, r3
 8009366:	2b00      	cmp	r3, #0
 8009368:	d10c      	bne.n	8009384 <v_L135+0x3d4>
			slalomF(10000, SPEED_5, V135_5_OFFSET_F, NO_WALL, NO_WALL);
 800936a:	f241 3388 	movw	r3, #5000	; 0x1388
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	f241 3388 	movw	r3, #5000	; 0x1388
 8009374:	2243      	movs	r2, #67	; 0x43
 8009376:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800937a:	f242 7010 	movw	r0, #10000	; 0x2710
 800937e:	f7fc f88d 	bl	800549c <slalomF>
 8009382:	e00b      	b.n	800939c <v_L135+0x3ec>
			slalomF(10000, SPEED_5, V135_5_OFFSET_VF, NO_WALL, NO_WALL);
 8009384:	f241 3388 	movw	r3, #5000	; 0x1388
 8009388:	9300      	str	r3, [sp, #0]
 800938a:	f241 3388 	movw	r3, #5000	; 0x1388
 800938e:	2243      	movs	r2, #67	; 0x43
 8009390:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009394:	f242 7010 	movw	r0, #10000	; 0x2710
 8009398:	f7fc f880 	bl	800549c <slalomF>
		slalomR(V135_5_DEGACCEL, V135_5_OMEGA, 135, SPEED_5);
 800939c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80093a0:	2287      	movs	r2, #135	; 0x87
 80093a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80093a6:	f242 7010 	movw	r0, #10000	; 0x2710
 80093aa:	f7fc f92d 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80093ae:	2103      	movs	r1, #3
 80093b0:	20fd      	movs	r0, #253	; 0xfd
 80093b2:	f007 f8ed 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80093b6:	4b16      	ldr	r3, [pc, #88]	; (8009410 <v_L135+0x460>)
 80093b8:	881b      	ldrh	r3, [r3, #0]
 80093ba:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	3301      	adds	r3, #1
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	f003 0301 	and.w	r3, r3, #1
 80093c8:	bfb8      	it	lt
 80093ca:	425b      	neglt	r3, r3
 80093cc:	f003 0301 	and.w	r3, r3, #1
 80093d0:	b2d9      	uxtb	r1, r3
 80093d2:	4a0f      	ldr	r2, [pc, #60]	; (8009410 <v_L135+0x460>)
 80093d4:	8813      	ldrh	r3, [r2, #0]
 80093d6:	f361 03c3 	bfi	r3, r1, #3, #1
 80093da:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 80093dc:	4b0c      	ldr	r3, [pc, #48]	; (8009410 <v_L135+0x460>)
 80093de:	881b      	ldrh	r3, [r3, #0]
 80093e0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d107      	bne.n	80093fa <v_L135+0x44a>
			slalomB(10000, SPEED_5, V135_5_OFFSET_VB);
 80093ea:	2232      	movs	r2, #50	; 0x32
 80093ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80093f0:	f242 7010 	movw	r0, #10000	; 0x2710
 80093f4:	f7fc fa2a 	bl	800584c <slalomB>
}
 80093f8:	e006      	b.n	8009408 <v_L135+0x458>
			slalomB(10000, SPEED_5, V135_5_OFFSET_B);
 80093fa:	2232      	movs	r2, #50	; 0x32
 80093fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009400:	f242 7010 	movw	r0, #10000	; 0x2710
 8009404:	f7fc fa22 	bl	800584c <slalomB>
}
 8009408:	bf00      	nop
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	20000fa4 	.word	0x20000fa4
 8009414:	20000456 	.word	0x20000456

08009418 <v_R135D>:
//v_R135D
// 区画中心から右に135度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R135D(void){
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af02      	add	r7, sp, #8
	full_led_write1(YELLOW);
 800941e:	2006      	movs	r0, #6
 8009420:	f008 ff4a 	bl	80122b8 <full_led_write1>
	if(run_mode == 1){
 8009424:	4bbb      	ldr	r3, [pc, #748]	; (8009714 <v_R135D+0x2fc>)
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	b2db      	uxtb	r3, r3
 800942a:	2b01      	cmp	r3, #1
 800942c:	d135      	bne.n	800949a <v_R135D+0x82>
		slalomF(10000, SPEED_1, V135_OFFSET_VF, NO_WALL, NO_WALL);
 800942e:	f241 3388 	movw	r3, #5000	; 0x1388
 8009432:	9300      	str	r3, [sp, #0]
 8009434:	f241 3388 	movw	r3, #5000	; 0x1388
 8009438:	223a      	movs	r2, #58	; 0x3a
 800943a:	21c8      	movs	r1, #200	; 0xc8
 800943c:	f242 7010 	movw	r0, #10000	; 0x2710
 8009440:	f7fc f82c 	bl	800549c <slalomF>
		slalomR(-V135_DEGACCEL, -V135_OMEGA, -135, SPEED_1);
 8009444:	23c8      	movs	r3, #200	; 0xc8
 8009446:	f06f 0286 	mvn.w	r2, #134	; 0x86
 800944a:	49b3      	ldr	r1, [pc, #716]	; (8009718 <v_R135D+0x300>)
 800944c:	48b3      	ldr	r0, [pc, #716]	; (800971c <v_R135D+0x304>)
 800944e:	f7fc f8db 	bl	8005608 <slalomR>

		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8009452:	2103      	movs	r1, #3
 8009454:	2003      	movs	r0, #3
 8009456:	f007 f89b 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800945a:	4bb1      	ldr	r3, [pc, #708]	; (8009720 <v_R135D+0x308>)
 800945c:	881b      	ldrh	r3, [r3, #0]
 800945e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009462:	b2db      	uxtb	r3, r3
 8009464:	3301      	adds	r3, #1
 8009466:	2b00      	cmp	r3, #0
 8009468:	f003 0301 	and.w	r3, r3, #1
 800946c:	bfb8      	it	lt
 800946e:	425b      	neglt	r3, r3
 8009470:	f003 0301 	and.w	r3, r3, #1
 8009474:	b2d9      	uxtb	r1, r3
 8009476:	4aaa      	ldr	r2, [pc, #680]	; (8009720 <v_R135D+0x308>)
 8009478:	8813      	ldrh	r3, [r2, #0]
 800947a:	f361 03c3 	bfi	r3, r1, #3, #1
 800947e:	8013      	strh	r3, [r2, #0]

		slalomB(10000, SPEED_1, V135_OFFSET_VB-30);
 8009480:	2226      	movs	r2, #38	; 0x26
 8009482:	21c8      	movs	r1, #200	; 0xc8
 8009484:	f242 7010 	movw	r0, #10000	; 0x2710
 8009488:	f7fc f9e0 	bl	800584c <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_1, 30);
 800948c:	231e      	movs	r3, #30
 800948e:	22c8      	movs	r2, #200	; 0xc8
 8009490:	211e      	movs	r1, #30
 8009492:	48a4      	ldr	r0, [pc, #656]	; (8009724 <v_R135D+0x30c>)
 8009494:	f7fb fe2a 	bl	80050ec <driveD>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;

		slalomB(10000, SPEED_5, V135_5_OFFSET_VB-30);
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
	}
}
 8009498:	e139      	b.n	800970e <v_R135D+0x2f6>
	}else if(run_mode == 2){
 800949a:	4b9e      	ldr	r3, [pc, #632]	; (8009714 <v_R135D+0x2fc>)
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	b2db      	uxtb	r3, r3
 80094a0:	2b02      	cmp	r3, #2
 80094a2:	d139      	bne.n	8009518 <v_R135D+0x100>
		slalomF(10000, SPEED_2, V135_2_OFFSET_VF, NO_WALL, NO_WALL);
 80094a4:	f241 3388 	movw	r3, #5000	; 0x1388
 80094a8:	9300      	str	r3, [sp, #0]
 80094aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80094ae:	223a      	movs	r2, #58	; 0x3a
 80094b0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80094b4:	f242 7010 	movw	r0, #10000	; 0x2710
 80094b8:	f7fb fff0 	bl	800549c <slalomF>
		slalomR(-V135_2_DEGACCEL, -V135_2_OMEGA, -135, SPEED_2);
 80094bc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80094c0:	f06f 0286 	mvn.w	r2, #134	; 0x86
 80094c4:	4994      	ldr	r1, [pc, #592]	; (8009718 <v_R135D+0x300>)
 80094c6:	4895      	ldr	r0, [pc, #596]	; (800971c <v_R135D+0x304>)
 80094c8:	f7fc f89e 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80094cc:	2103      	movs	r1, #3
 80094ce:	2003      	movs	r0, #3
 80094d0:	f007 f85e 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80094d4:	4b92      	ldr	r3, [pc, #584]	; (8009720 <v_R135D+0x308>)
 80094d6:	881b      	ldrh	r3, [r3, #0]
 80094d8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	3301      	adds	r3, #1
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	f003 0301 	and.w	r3, r3, #1
 80094e6:	bfb8      	it	lt
 80094e8:	425b      	neglt	r3, r3
 80094ea:	f003 0301 	and.w	r3, r3, #1
 80094ee:	b2d9      	uxtb	r1, r3
 80094f0:	4a8b      	ldr	r2, [pc, #556]	; (8009720 <v_R135D+0x308>)
 80094f2:	8813      	ldrh	r3, [r2, #0]
 80094f4:	f361 03c3 	bfi	r3, r1, #3, #1
 80094f8:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_2, V135_2_OFFSET_VB-30);
 80094fa:	2226      	movs	r2, #38	; 0x26
 80094fc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009500:	f242 7010 	movw	r0, #10000	; 0x2710
 8009504:	f7fc f9a2 	bl	800584c <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_2, 30);
 8009508:	231e      	movs	r3, #30
 800950a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800950e:	211e      	movs	r1, #30
 8009510:	4884      	ldr	r0, [pc, #528]	; (8009724 <v_R135D+0x30c>)
 8009512:	f7fb fdeb 	bl	80050ec <driveD>
}
 8009516:	e0fa      	b.n	800970e <v_R135D+0x2f6>
	}else if(run_mode == 3){
 8009518:	4b7e      	ldr	r3, [pc, #504]	; (8009714 <v_R135D+0x2fc>)
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	b2db      	uxtb	r3, r3
 800951e:	2b03      	cmp	r3, #3
 8009520:	d139      	bne.n	8009596 <v_R135D+0x17e>
		slalomF(10000, SPEED_3, V135_3_OFFSET_VF, NO_WALL, NO_WALL);
 8009522:	f241 3388 	movw	r3, #5000	; 0x1388
 8009526:	9300      	str	r3, [sp, #0]
 8009528:	f241 3388 	movw	r3, #5000	; 0x1388
 800952c:	2237      	movs	r2, #55	; 0x37
 800952e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8009532:	f242 7010 	movw	r0, #10000	; 0x2710
 8009536:	f7fb ffb1 	bl	800549c <slalomF>
		slalomR(-V135_3_DEGACCEL, -V135_3_OMEGA, -135, SPEED_3);
 800953a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800953e:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8009542:	4979      	ldr	r1, [pc, #484]	; (8009728 <v_R135D+0x310>)
 8009544:	4879      	ldr	r0, [pc, #484]	; (800972c <v_R135D+0x314>)
 8009546:	f7fc f85f 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800954a:	2103      	movs	r1, #3
 800954c:	2003      	movs	r0, #3
 800954e:	f007 f81f 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8009552:	4b73      	ldr	r3, [pc, #460]	; (8009720 <v_R135D+0x308>)
 8009554:	881b      	ldrh	r3, [r3, #0]
 8009556:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800955a:	b2db      	uxtb	r3, r3
 800955c:	3301      	adds	r3, #1
 800955e:	2b00      	cmp	r3, #0
 8009560:	f003 0301 	and.w	r3, r3, #1
 8009564:	bfb8      	it	lt
 8009566:	425b      	neglt	r3, r3
 8009568:	f003 0301 	and.w	r3, r3, #1
 800956c:	b2d9      	uxtb	r1, r3
 800956e:	4a6c      	ldr	r2, [pc, #432]	; (8009720 <v_R135D+0x308>)
 8009570:	8813      	ldrh	r3, [r2, #0]
 8009572:	f361 03c3 	bfi	r3, r1, #3, #1
 8009576:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_3, V135_3_OFFSET_VB-30);
 8009578:	2241      	movs	r2, #65	; 0x41
 800957a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800957e:	f242 7010 	movw	r0, #10000	; 0x2710
 8009582:	f7fc f963 	bl	800584c <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_3, 30);
 8009586:	231e      	movs	r3, #30
 8009588:	f44f 7216 	mov.w	r2, #600	; 0x258
 800958c:	211e      	movs	r1, #30
 800958e:	4865      	ldr	r0, [pc, #404]	; (8009724 <v_R135D+0x30c>)
 8009590:	f7fb fdac 	bl	80050ec <driveD>
}
 8009594:	e0bb      	b.n	800970e <v_R135D+0x2f6>
	}else if(run_mode == 4){
 8009596:	4b5f      	ldr	r3, [pc, #380]	; (8009714 <v_R135D+0x2fc>)
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	b2db      	uxtb	r3, r3
 800959c:	2b04      	cmp	r3, #4
 800959e:	d139      	bne.n	8009614 <v_R135D+0x1fc>
		slalomF(10000, SPEED_4, V135_4_OFFSET_VF, NO_WALL, NO_WALL);
 80095a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80095a4:	9300      	str	r3, [sp, #0]
 80095a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80095aa:	224b      	movs	r2, #75	; 0x4b
 80095ac:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80095b0:	f242 7010 	movw	r0, #10000	; 0x2710
 80095b4:	f7fb ff72 	bl	800549c <slalomF>
		slalomR(-V135_4_DEGACCEL, -V135_4_OMEGA, -135, SPEED_3);
 80095b8:	f44f 7316 	mov.w	r3, #600	; 0x258
 80095bc:	f06f 0286 	mvn.w	r2, #134	; 0x86
 80095c0:	495b      	ldr	r1, [pc, #364]	; (8009730 <v_R135D+0x318>)
 80095c2:	485c      	ldr	r0, [pc, #368]	; (8009734 <v_R135D+0x31c>)
 80095c4:	f7fc f820 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80095c8:	2103      	movs	r1, #3
 80095ca:	2003      	movs	r0, #3
 80095cc:	f006 ffe0 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80095d0:	4b53      	ldr	r3, [pc, #332]	; (8009720 <v_R135D+0x308>)
 80095d2:	881b      	ldrh	r3, [r3, #0]
 80095d4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	3301      	adds	r3, #1
 80095dc:	2b00      	cmp	r3, #0
 80095de:	f003 0301 	and.w	r3, r3, #1
 80095e2:	bfb8      	it	lt
 80095e4:	425b      	neglt	r3, r3
 80095e6:	f003 0301 	and.w	r3, r3, #1
 80095ea:	b2d9      	uxtb	r1, r3
 80095ec:	4a4c      	ldr	r2, [pc, #304]	; (8009720 <v_R135D+0x308>)
 80095ee:	8813      	ldrh	r3, [r2, #0]
 80095f0:	f361 03c3 	bfi	r3, r1, #3, #1
 80095f4:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_4, V135_4_OFFSET_VB-30);
 80095f6:	2264      	movs	r2, #100	; 0x64
 80095f8:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80095fc:	f242 7010 	movw	r0, #10000	; 0x2710
 8009600:	f7fc f924 	bl	800584c <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_4, 30);
 8009604:	231e      	movs	r3, #30
 8009606:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800960a:	211e      	movs	r1, #30
 800960c:	4845      	ldr	r0, [pc, #276]	; (8009724 <v_R135D+0x30c>)
 800960e:	f7fb fd6d 	bl	80050ec <driveD>
}
 8009612:	e07c      	b.n	800970e <v_R135D+0x2f6>
	}else if(run_mode == 5){
 8009614:	4b3f      	ldr	r3, [pc, #252]	; (8009714 <v_R135D+0x2fc>)
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	b2db      	uxtb	r3, r3
 800961a:	2b05      	cmp	r3, #5
 800961c:	d139      	bne.n	8009692 <v_R135D+0x27a>
		slalomF(10000, SPEED_5, V135_5_OFFSET_VF, NO_WALL, NO_WALL);
 800961e:	f241 3388 	movw	r3, #5000	; 0x1388
 8009622:	9300      	str	r3, [sp, #0]
 8009624:	f241 3388 	movw	r3, #5000	; 0x1388
 8009628:	2243      	movs	r2, #67	; 0x43
 800962a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800962e:	f242 7010 	movw	r0, #10000	; 0x2710
 8009632:	f7fb ff33 	bl	800549c <slalomF>
		slalomR(-V135_5_DEGACCEL, -V135_5_OMEGA, -135, SPEED_5);
 8009636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800963a:	f06f 0286 	mvn.w	r2, #134	; 0x86
 800963e:	493e      	ldr	r1, [pc, #248]	; (8009738 <v_R135D+0x320>)
 8009640:	483e      	ldr	r0, [pc, #248]	; (800973c <v_R135D+0x324>)
 8009642:	f7fb ffe1 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8009646:	2103      	movs	r1, #3
 8009648:	2003      	movs	r0, #3
 800964a:	f006 ffa1 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800964e:	4b34      	ldr	r3, [pc, #208]	; (8009720 <v_R135D+0x308>)
 8009650:	881b      	ldrh	r3, [r3, #0]
 8009652:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009656:	b2db      	uxtb	r3, r3
 8009658:	3301      	adds	r3, #1
 800965a:	2b00      	cmp	r3, #0
 800965c:	f003 0301 	and.w	r3, r3, #1
 8009660:	bfb8      	it	lt
 8009662:	425b      	neglt	r3, r3
 8009664:	f003 0301 	and.w	r3, r3, #1
 8009668:	b2d9      	uxtb	r1, r3
 800966a:	4a2d      	ldr	r2, [pc, #180]	; (8009720 <v_R135D+0x308>)
 800966c:	8813      	ldrh	r3, [r2, #0]
 800966e:	f361 03c3 	bfi	r3, r1, #3, #1
 8009672:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, V135_5_OFFSET_VB-30);
 8009674:	2214      	movs	r2, #20
 8009676:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800967a:	f242 7010 	movw	r0, #10000	; 0x2710
 800967e:	f7fc f8e5 	bl	800584c <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
 8009682:	231e      	movs	r3, #30
 8009684:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009688:	211e      	movs	r1, #30
 800968a:	4826      	ldr	r0, [pc, #152]	; (8009724 <v_R135D+0x30c>)
 800968c:	f7fb fd2e 	bl	80050ec <driveD>
}
 8009690:	e03d      	b.n	800970e <v_R135D+0x2f6>
	}else if(run_mode == 6){
 8009692:	4b20      	ldr	r3, [pc, #128]	; (8009714 <v_R135D+0x2fc>)
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	b2db      	uxtb	r3, r3
 8009698:	2b06      	cmp	r3, #6
 800969a:	d138      	bne.n	800970e <v_R135D+0x2f6>
		slalomF(10000, SPEED_5, V135_5_OFFSET_VF, NO_WALL, NO_WALL);
 800969c:	f241 3388 	movw	r3, #5000	; 0x1388
 80096a0:	9300      	str	r3, [sp, #0]
 80096a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80096a6:	2243      	movs	r2, #67	; 0x43
 80096a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80096ac:	f242 7010 	movw	r0, #10000	; 0x2710
 80096b0:	f7fb fef4 	bl	800549c <slalomF>
		slalomR(-V135_5_DEGACCEL, -V135_5_OMEGA, -135, SPEED_5);
 80096b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80096b8:	f06f 0286 	mvn.w	r2, #134	; 0x86
 80096bc:	491e      	ldr	r1, [pc, #120]	; (8009738 <v_R135D+0x320>)
 80096be:	481f      	ldr	r0, [pc, #124]	; (800973c <v_R135D+0x324>)
 80096c0:	f7fb ffa2 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80096c4:	2103      	movs	r1, #3
 80096c6:	2003      	movs	r0, #3
 80096c8:	f006 ff62 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80096cc:	4b14      	ldr	r3, [pc, #80]	; (8009720 <v_R135D+0x308>)
 80096ce:	881b      	ldrh	r3, [r3, #0]
 80096d0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	3301      	adds	r3, #1
 80096d8:	2b00      	cmp	r3, #0
 80096da:	f003 0301 	and.w	r3, r3, #1
 80096de:	bfb8      	it	lt
 80096e0:	425b      	neglt	r3, r3
 80096e2:	f003 0301 	and.w	r3, r3, #1
 80096e6:	b2d9      	uxtb	r1, r3
 80096e8:	4a0d      	ldr	r2, [pc, #52]	; (8009720 <v_R135D+0x308>)
 80096ea:	8813      	ldrh	r3, [r2, #0]
 80096ec:	f361 03c3 	bfi	r3, r1, #3, #1
 80096f0:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, V135_5_OFFSET_VB-30);
 80096f2:	2214      	movs	r2, #20
 80096f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80096f8:	f242 7010 	movw	r0, #10000	; 0x2710
 80096fc:	f7fc f8a6 	bl	800584c <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
 8009700:	231e      	movs	r3, #30
 8009702:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009706:	211e      	movs	r1, #30
 8009708:	4806      	ldr	r0, [pc, #24]	; (8009724 <v_R135D+0x30c>)
 800970a:	f7fb fcef 	bl	80050ec <driveD>
}
 800970e:	bf00      	nop
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	20000456 	.word	0x20000456
 8009718:	fffffed4 	.word	0xfffffed4
 800971c:	fffff448 	.word	0xfffff448
 8009720:	20000fa4 	.word	0x20000fa4
 8009724:	ffff8ad0 	.word	0xffff8ad0
 8009728:	fffffe0c 	.word	0xfffffe0c
 800972c:	ffffec78 	.word	0xffffec78
 8009730:	fffffce0 	.word	0xfffffce0
 8009734:	ffffe0c0 	.word	0xffffe0c0
 8009738:	fffffc18 	.word	0xfffffc18
 800973c:	ffffd8f0 	.word	0xffffd8f0

08009740 <v_L135D>:
//v_L135D
// 区画中心から左に135度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L135D(void){
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af02      	add	r7, sp, #8
	full_led_write1(PURPLE);
 8009746:	2005      	movs	r0, #5
 8009748:	f008 fdb6 	bl	80122b8 <full_led_write1>
	if(run_mode == 1){
 800974c:	4bbe      	ldr	r3, [pc, #760]	; (8009a48 <v_L135D+0x308>)
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	b2db      	uxtb	r3, r3
 8009752:	2b01      	cmp	r3, #1
 8009754:	d136      	bne.n	80097c4 <v_L135D+0x84>
		slalomF(10000, SPEED_1, V135_OFFSET_VF, NO_WALL, NO_WALL);
 8009756:	f241 3388 	movw	r3, #5000	; 0x1388
 800975a:	9300      	str	r3, [sp, #0]
 800975c:	f241 3388 	movw	r3, #5000	; 0x1388
 8009760:	223a      	movs	r2, #58	; 0x3a
 8009762:	21c8      	movs	r1, #200	; 0xc8
 8009764:	f242 7010 	movw	r0, #10000	; 0x2710
 8009768:	f7fb fe98 	bl	800549c <slalomF>
		slalomR(V135_DEGACCEL, V135_OMEGA, 135, SPEED_1);
 800976c:	23c8      	movs	r3, #200	; 0xc8
 800976e:	2287      	movs	r2, #135	; 0x87
 8009770:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8009774:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009778:	f7fb ff46 	bl	8005608 <slalomR>

		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800977c:	2103      	movs	r1, #3
 800977e:	20fd      	movs	r0, #253	; 0xfd
 8009780:	f006 ff06 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8009784:	4bb1      	ldr	r3, [pc, #708]	; (8009a4c <v_L135D+0x30c>)
 8009786:	881b      	ldrh	r3, [r3, #0]
 8009788:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800978c:	b2db      	uxtb	r3, r3
 800978e:	3301      	adds	r3, #1
 8009790:	2b00      	cmp	r3, #0
 8009792:	f003 0301 	and.w	r3, r3, #1
 8009796:	bfb8      	it	lt
 8009798:	425b      	neglt	r3, r3
 800979a:	f003 0301 	and.w	r3, r3, #1
 800979e:	b2d9      	uxtb	r1, r3
 80097a0:	4aaa      	ldr	r2, [pc, #680]	; (8009a4c <v_L135D+0x30c>)
 80097a2:	8813      	ldrh	r3, [r2, #0]
 80097a4:	f361 03c3 	bfi	r3, r1, #3, #1
 80097a8:	8013      	strh	r3, [r2, #0]

		slalomB(10000, SPEED_1, V135_OFFSET_VB-30);
 80097aa:	2226      	movs	r2, #38	; 0x26
 80097ac:	21c8      	movs	r1, #200	; 0xc8
 80097ae:	f242 7010 	movw	r0, #10000	; 0x2710
 80097b2:	f7fc f84b 	bl	800584c <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_1, 30);
 80097b6:	231e      	movs	r3, #30
 80097b8:	22c8      	movs	r2, #200	; 0xc8
 80097ba:	211e      	movs	r1, #30
 80097bc:	48a4      	ldr	r0, [pc, #656]	; (8009a50 <v_L135D+0x310>)
 80097be:	f7fb fc95 	bl	80050ec <driveD>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;

		slalomB(10000, SPEED_5, V135_5_OFFSET_VB-30);
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
	}
}
 80097c2:	e13e      	b.n	8009a42 <v_L135D+0x302>
	}else if(run_mode == 2){
 80097c4:	4ba0      	ldr	r3, [pc, #640]	; (8009a48 <v_L135D+0x308>)
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	2b02      	cmp	r3, #2
 80097cc:	d13a      	bne.n	8009844 <v_L135D+0x104>
		slalomF(10000, SPEED_2, V135_2_OFFSET_VF, NO_WALL, NO_WALL);
 80097ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80097d2:	9300      	str	r3, [sp, #0]
 80097d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80097d8:	223a      	movs	r2, #58	; 0x3a
 80097da:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80097de:	f242 7010 	movw	r0, #10000	; 0x2710
 80097e2:	f7fb fe5b 	bl	800549c <slalomF>
		slalomR(V135_2_DEGACCEL, V135_2_OMEGA, 135, SPEED_2);
 80097e6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80097ea:	2287      	movs	r2, #135	; 0x87
 80097ec:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80097f0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80097f4:	f7fb ff08 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80097f8:	2103      	movs	r1, #3
 80097fa:	20fd      	movs	r0, #253	; 0xfd
 80097fc:	f006 fec8 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8009800:	4b92      	ldr	r3, [pc, #584]	; (8009a4c <v_L135D+0x30c>)
 8009802:	881b      	ldrh	r3, [r3, #0]
 8009804:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009808:	b2db      	uxtb	r3, r3
 800980a:	3301      	adds	r3, #1
 800980c:	2b00      	cmp	r3, #0
 800980e:	f003 0301 	and.w	r3, r3, #1
 8009812:	bfb8      	it	lt
 8009814:	425b      	neglt	r3, r3
 8009816:	f003 0301 	and.w	r3, r3, #1
 800981a:	b2d9      	uxtb	r1, r3
 800981c:	4a8b      	ldr	r2, [pc, #556]	; (8009a4c <v_L135D+0x30c>)
 800981e:	8813      	ldrh	r3, [r2, #0]
 8009820:	f361 03c3 	bfi	r3, r1, #3, #1
 8009824:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_2, V135_2_OFFSET_VB-30);
 8009826:	2226      	movs	r2, #38	; 0x26
 8009828:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800982c:	f242 7010 	movw	r0, #10000	; 0x2710
 8009830:	f7fc f80c 	bl	800584c <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_2, 30);
 8009834:	231e      	movs	r3, #30
 8009836:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800983a:	211e      	movs	r1, #30
 800983c:	4884      	ldr	r0, [pc, #528]	; (8009a50 <v_L135D+0x310>)
 800983e:	f7fb fc55 	bl	80050ec <driveD>
}
 8009842:	e0fe      	b.n	8009a42 <v_L135D+0x302>
	}else if(run_mode == 3){
 8009844:	4b80      	ldr	r3, [pc, #512]	; (8009a48 <v_L135D+0x308>)
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	b2db      	uxtb	r3, r3
 800984a:	2b03      	cmp	r3, #3
 800984c:	d13a      	bne.n	80098c4 <v_L135D+0x184>
		slalomF(10000, SPEED_3, V135_3_OFFSET_VF, NO_WALL, NO_WALL);
 800984e:	f241 3388 	movw	r3, #5000	; 0x1388
 8009852:	9300      	str	r3, [sp, #0]
 8009854:	f241 3388 	movw	r3, #5000	; 0x1388
 8009858:	2237      	movs	r2, #55	; 0x37
 800985a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800985e:	f242 7010 	movw	r0, #10000	; 0x2710
 8009862:	f7fb fe1b 	bl	800549c <slalomF>
		slalomR(V135_3_DEGACCEL, V135_3_OMEGA, 135, SPEED_3);
 8009866:	f44f 7316 	mov.w	r3, #600	; 0x258
 800986a:	2287      	movs	r2, #135	; 0x87
 800986c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009870:	f241 3088 	movw	r0, #5000	; 0x1388
 8009874:	f7fb fec8 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8009878:	2103      	movs	r1, #3
 800987a:	20fd      	movs	r0, #253	; 0xfd
 800987c:	f006 fe88 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8009880:	4b72      	ldr	r3, [pc, #456]	; (8009a4c <v_L135D+0x30c>)
 8009882:	881b      	ldrh	r3, [r3, #0]
 8009884:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009888:	b2db      	uxtb	r3, r3
 800988a:	3301      	adds	r3, #1
 800988c:	2b00      	cmp	r3, #0
 800988e:	f003 0301 	and.w	r3, r3, #1
 8009892:	bfb8      	it	lt
 8009894:	425b      	neglt	r3, r3
 8009896:	f003 0301 	and.w	r3, r3, #1
 800989a:	b2d9      	uxtb	r1, r3
 800989c:	4a6b      	ldr	r2, [pc, #428]	; (8009a4c <v_L135D+0x30c>)
 800989e:	8813      	ldrh	r3, [r2, #0]
 80098a0:	f361 03c3 	bfi	r3, r1, #3, #1
 80098a4:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_3, V135_3_OFFSET_VB-30);
 80098a6:	2241      	movs	r2, #65	; 0x41
 80098a8:	f44f 7116 	mov.w	r1, #600	; 0x258
 80098ac:	f242 7010 	movw	r0, #10000	; 0x2710
 80098b0:	f7fb ffcc 	bl	800584c <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_3, 30);
 80098b4:	231e      	movs	r3, #30
 80098b6:	f44f 7216 	mov.w	r2, #600	; 0x258
 80098ba:	211e      	movs	r1, #30
 80098bc:	4864      	ldr	r0, [pc, #400]	; (8009a50 <v_L135D+0x310>)
 80098be:	f7fb fc15 	bl	80050ec <driveD>
}
 80098c2:	e0be      	b.n	8009a42 <v_L135D+0x302>
	}else if(run_mode == 4){
 80098c4:	4b60      	ldr	r3, [pc, #384]	; (8009a48 <v_L135D+0x308>)
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	2b04      	cmp	r3, #4
 80098cc:	d13a      	bne.n	8009944 <v_L135D+0x204>
		slalomF(10000, SPEED_4, V135_4_OFFSET_VF, NO_WALL, NO_WALL);
 80098ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80098d2:	9300      	str	r3, [sp, #0]
 80098d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80098d8:	224b      	movs	r2, #75	; 0x4b
 80098da:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80098de:	f242 7010 	movw	r0, #10000	; 0x2710
 80098e2:	f7fb fddb 	bl	800549c <slalomF>
		slalomR(V135_4_DEGACCEL, V135_4_OMEGA, 135, SPEED_4);
 80098e6:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80098ea:	2287      	movs	r2, #135	; 0x87
 80098ec:	f44f 7148 	mov.w	r1, #800	; 0x320
 80098f0:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80098f4:	f7fb fe88 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80098f8:	2103      	movs	r1, #3
 80098fa:	20fd      	movs	r0, #253	; 0xfd
 80098fc:	f006 fe48 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8009900:	4b52      	ldr	r3, [pc, #328]	; (8009a4c <v_L135D+0x30c>)
 8009902:	881b      	ldrh	r3, [r3, #0]
 8009904:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009908:	b2db      	uxtb	r3, r3
 800990a:	3301      	adds	r3, #1
 800990c:	2b00      	cmp	r3, #0
 800990e:	f003 0301 	and.w	r3, r3, #1
 8009912:	bfb8      	it	lt
 8009914:	425b      	neglt	r3, r3
 8009916:	f003 0301 	and.w	r3, r3, #1
 800991a:	b2d9      	uxtb	r1, r3
 800991c:	4a4b      	ldr	r2, [pc, #300]	; (8009a4c <v_L135D+0x30c>)
 800991e:	8813      	ldrh	r3, [r2, #0]
 8009920:	f361 03c3 	bfi	r3, r1, #3, #1
 8009924:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_4, V135_4_OFFSET_VB-30);
 8009926:	2264      	movs	r2, #100	; 0x64
 8009928:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800992c:	f242 7010 	movw	r0, #10000	; 0x2710
 8009930:	f7fb ff8c 	bl	800584c <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_3, 30);
 8009934:	231e      	movs	r3, #30
 8009936:	f44f 7216 	mov.w	r2, #600	; 0x258
 800993a:	211e      	movs	r1, #30
 800993c:	4844      	ldr	r0, [pc, #272]	; (8009a50 <v_L135D+0x310>)
 800993e:	f7fb fbd5 	bl	80050ec <driveD>
}
 8009942:	e07e      	b.n	8009a42 <v_L135D+0x302>
	}else if(run_mode == 5){
 8009944:	4b40      	ldr	r3, [pc, #256]	; (8009a48 <v_L135D+0x308>)
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	b2db      	uxtb	r3, r3
 800994a:	2b05      	cmp	r3, #5
 800994c:	d13a      	bne.n	80099c4 <v_L135D+0x284>
		slalomF(10000, SPEED_5, V135_5_OFFSET_VF, NO_WALL, NO_WALL);
 800994e:	f241 3388 	movw	r3, #5000	; 0x1388
 8009952:	9300      	str	r3, [sp, #0]
 8009954:	f241 3388 	movw	r3, #5000	; 0x1388
 8009958:	2243      	movs	r2, #67	; 0x43
 800995a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800995e:	f242 7010 	movw	r0, #10000	; 0x2710
 8009962:	f7fb fd9b 	bl	800549c <slalomF>
		slalomR(V135_5_DEGACCEL, V135_5_OMEGA, 135, SPEED_5);
 8009966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800996a:	2287      	movs	r2, #135	; 0x87
 800996c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009970:	f242 7010 	movw	r0, #10000	; 0x2710
 8009974:	f7fb fe48 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8009978:	2103      	movs	r1, #3
 800997a:	20fd      	movs	r0, #253	; 0xfd
 800997c:	f006 fe08 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8009980:	4b32      	ldr	r3, [pc, #200]	; (8009a4c <v_L135D+0x30c>)
 8009982:	881b      	ldrh	r3, [r3, #0]
 8009984:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009988:	b2db      	uxtb	r3, r3
 800998a:	3301      	adds	r3, #1
 800998c:	2b00      	cmp	r3, #0
 800998e:	f003 0301 	and.w	r3, r3, #1
 8009992:	bfb8      	it	lt
 8009994:	425b      	neglt	r3, r3
 8009996:	f003 0301 	and.w	r3, r3, #1
 800999a:	b2d9      	uxtb	r1, r3
 800999c:	4a2b      	ldr	r2, [pc, #172]	; (8009a4c <v_L135D+0x30c>)
 800999e:	8813      	ldrh	r3, [r2, #0]
 80099a0:	f361 03c3 	bfi	r3, r1, #3, #1
 80099a4:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, V135_5_OFFSET_VB-30);
 80099a6:	2214      	movs	r2, #20
 80099a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80099ac:	f242 7010 	movw	r0, #10000	; 0x2710
 80099b0:	f7fb ff4c 	bl	800584c <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
 80099b4:	231e      	movs	r3, #30
 80099b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80099ba:	211e      	movs	r1, #30
 80099bc:	4824      	ldr	r0, [pc, #144]	; (8009a50 <v_L135D+0x310>)
 80099be:	f7fb fb95 	bl	80050ec <driveD>
}
 80099c2:	e03e      	b.n	8009a42 <v_L135D+0x302>
	}else if(run_mode == 6){
 80099c4:	4b20      	ldr	r3, [pc, #128]	; (8009a48 <v_L135D+0x308>)
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	2b06      	cmp	r3, #6
 80099cc:	d139      	bne.n	8009a42 <v_L135D+0x302>
		slalomF(10000, SPEED_5, V135_5_OFFSET_VF, NO_WALL, NO_WALL);
 80099ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80099d2:	9300      	str	r3, [sp, #0]
 80099d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80099d8:	2243      	movs	r2, #67	; 0x43
 80099da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80099de:	f242 7010 	movw	r0, #10000	; 0x2710
 80099e2:	f7fb fd5b 	bl	800549c <slalomF>
		slalomR(V135_5_DEGACCEL, V135_5_OMEGA, 135, SPEED_5);
 80099e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80099ea:	2287      	movs	r2, #135	; 0x87
 80099ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80099f0:	f242 7010 	movw	r0, #10000	; 0x2710
 80099f4:	f7fb fe08 	bl	8005608 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80099f8:	2103      	movs	r1, #3
 80099fa:	20fd      	movs	r0, #253	; 0xfd
 80099fc:	f006 fdc8 	bl	8010590 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8009a00:	4b12      	ldr	r3, [pc, #72]	; (8009a4c <v_L135D+0x30c>)
 8009a02:	881b      	ldrh	r3, [r3, #0]
 8009a04:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	f003 0301 	and.w	r3, r3, #1
 8009a12:	bfb8      	it	lt
 8009a14:	425b      	neglt	r3, r3
 8009a16:	f003 0301 	and.w	r3, r3, #1
 8009a1a:	b2d9      	uxtb	r1, r3
 8009a1c:	4a0b      	ldr	r2, [pc, #44]	; (8009a4c <v_L135D+0x30c>)
 8009a1e:	8813      	ldrh	r3, [r2, #0]
 8009a20:	f361 03c3 	bfi	r3, r1, #3, #1
 8009a24:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, V135_5_OFFSET_VB-30);
 8009a26:	2214      	movs	r2, #20
 8009a28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009a2c:	f242 7010 	movw	r0, #10000	; 0x2710
 8009a30:	f7fb ff0c 	bl	800584c <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
 8009a34:	231e      	movs	r3, #30
 8009a36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009a3a:	211e      	movs	r1, #30
 8009a3c:	4804      	ldr	r0, [pc, #16]	; (8009a50 <v_L135D+0x310>)
 8009a3e:	f7fb fb55 	bl	80050ec <driveD>
}
 8009a42:	bf00      	nop
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}
 8009a48:	20000456 	.word	0x20000456
 8009a4c:	20000fa4 	.word	0x20000fa4
 8009a50:	ffff8ad0 	.word	0xffff8ad0

08009a54 <test_select>:
//test_select
// a走行系テスト選択
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void test_select(void){
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b082      	sub	sp, #8
 8009a58:	af00      	add	r7, sp, #0
	int mode = 0;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	607b      	str	r3, [r7, #4]
	printf("Test Select, Mode : %d\n", mode);
 8009a5e:	6879      	ldr	r1, [r7, #4]
 8009a60:	483c      	ldr	r0, [pc, #240]	; (8009b54 <test_select+0x100>)
 8009a62:	f009 fa0d 	bl	8012e80 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	f003 0301 	and.w	r3, r3, #1
 8009a6e:	b2d8      	uxtb	r0, r3
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	f003 0302 	and.w	r3, r3, #2
 8009a78:	b2d9      	uxtb	r1, r3
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	f003 0304 	and.w	r3, r3, #4
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	461a      	mov	r2, r3
 8009a86:	f008 fbdd 	bl	8012244 <led_write>
		  if(dist_r >= 20){
 8009a8a:	4b33      	ldr	r3, [pc, #204]	; (8009b58 <test_select+0x104>)
 8009a8c:	edd3 7a00 	vldr	s15, [r3]
 8009a90:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009a94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a9c:	db0f      	blt.n	8009abe <test_select+0x6a>
			  mode++;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009aa4:	4b2c      	ldr	r3, [pc, #176]	; (8009b58 <test_select+0x104>)
 8009aa6:	f04f 0200 	mov.w	r2, #0
 8009aaa:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2b07      	cmp	r3, #7
 8009ab0:	dd01      	ble.n	8009ab6 <test_select+0x62>
				  mode = 0;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8009ab6:	6879      	ldr	r1, [r7, #4]
 8009ab8:	4828      	ldr	r0, [pc, #160]	; (8009b5c <test_select+0x108>)
 8009aba:	f009 f9e1 	bl	8012e80 <iprintf>
		  }
		  if(dist_r <= -20){
 8009abe:	4b26      	ldr	r3, [pc, #152]	; (8009b58 <test_select+0x104>)
 8009ac0:	edd3 7a00 	vldr	s15, [r3]
 8009ac4:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009ac8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ad0:	d80f      	bhi.n	8009af2 <test_select+0x9e>
			  mode--;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	3b01      	subs	r3, #1
 8009ad6:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009ad8:	4b1f      	ldr	r3, [pc, #124]	; (8009b58 <test_select+0x104>)
 8009ada:	f04f 0200 	mov.w	r2, #0
 8009ade:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	da01      	bge.n	8009aea <test_select+0x96>
				  mode = 7;
 8009ae6:	2307      	movs	r3, #7
 8009ae8:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8009aea:	6879      	ldr	r1, [r7, #4]
 8009aec:	481b      	ldr	r0, [pc, #108]	; (8009b5c <test_select+0x108>)
 8009aee:	f009 f9c7 	bl	8012e80 <iprintf>
		  }
		  if(dist_l <= -20){
 8009af2:	4b1b      	ldr	r3, [pc, #108]	; (8009b60 <test_select+0x10c>)
 8009af4:	edd3 7a00 	vldr	s15, [r3]
 8009af8:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b04:	d825      	bhi.n	8009b52 <test_select+0xfe>
			  dist_l = 0;
 8009b06:	4b16      	ldr	r3, [pc, #88]	; (8009b60 <test_select+0x10c>)
 8009b08:	f04f 0200 	mov.w	r2, #0
 8009b0c:	601a      	str	r2, [r3, #0]
			  switch(mode){
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	3b01      	subs	r3, #1
 8009b12:	2b05      	cmp	r3, #5
 8009b14:	d8a7      	bhi.n	8009a66 <test_select+0x12>
 8009b16:	a201      	add	r2, pc, #4	; (adr r2, 8009b1c <test_select+0xc8>)
 8009b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b1c:	08009b35 	.word	0x08009b35
 8009b20:	08009b3b 	.word	0x08009b3b
 8009b24:	08009b41 	.word	0x08009b41
 8009b28:	08009b47 	.word	0x08009b47
 8009b2c:	08009b4b 	.word	0x08009b4b
 8009b30:	08009b4f 	.word	0x08009b4f
				case 1:
					init_test();
 8009b34:	f000 f816 	bl	8009b64 <init_test>
					break;
 8009b38:	e00b      	b.n	8009b52 <test_select+0xfe>

				case 2:
					slalom_test();
 8009b3a:	f000 f923 	bl	8009d84 <slalom_test>
					break;
 8009b3e:	e008      	b.n	8009b52 <test_select+0xfe>

				case 3:
					v_test();
 8009b40:	f000 faea 	bl	800a118 <v_test>
					break;
 8009b44:	e005      	b.n	8009b52 <test_select+0xfe>

				case 4:
					pass_test();
 8009b46:	f000 fd1d 	bl	800a584 <pass_test>

				case 5:
					goal_test();
 8009b4a:	f000 ffb3 	bl	800aab4 <goal_test>

				case 6:
					sample_course_run();
 8009b4e:	f001 fa93 	bl	800b078 <sample_course_run>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009b52:	e788      	b.n	8009a66 <test_select+0x12>
 8009b54:	080140c8 	.word	0x080140c8
 8009b58:	20000b2c 	.word	0x20000b2c
 8009b5c:	080140bc 	.word	0x080140bc
 8009b60:	20001644 	.word	0x20001644

08009b64 <init_test>:
//init_test
// a初期基幹関数走行テスト
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void init_test(void){
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b086      	sub	sp, #24
 8009b68:	af00      	add	r7, sp, #0

	int mode = 0;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	617b      	str	r3, [r7, #20]
	printf("Test Init Run, Mode : %d\n", mode);
 8009b6e:	6979      	ldr	r1, [r7, #20]
 8009b70:	4874      	ldr	r0, [pc, #464]	; (8009d44 <init_test+0x1e0>)
 8009b72:	f009 f985 	bl	8012e80 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	f003 0301 	and.w	r3, r3, #1
 8009b7e:	b2d8      	uxtb	r0, r3
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	f003 0302 	and.w	r3, r3, #2
 8009b88:	b2d9      	uxtb	r1, r3
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	f003 0304 	and.w	r3, r3, #4
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	461a      	mov	r2, r3
 8009b96:	f008 fb55 	bl	8012244 <led_write>
		  if(dist_r >= 20){
 8009b9a:	4b6b      	ldr	r3, [pc, #428]	; (8009d48 <init_test+0x1e4>)
 8009b9c:	edd3 7a00 	vldr	s15, [r3]
 8009ba0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009ba4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bac:	db0f      	blt.n	8009bce <init_test+0x6a>
			  mode++;
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 8009bb4:	4b64      	ldr	r3, [pc, #400]	; (8009d48 <init_test+0x1e4>)
 8009bb6:	f04f 0200 	mov.w	r2, #0
 8009bba:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	2b07      	cmp	r3, #7
 8009bc0:	dd01      	ble.n	8009bc6 <init_test+0x62>
				  mode = 0;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 8009bc6:	6979      	ldr	r1, [r7, #20]
 8009bc8:	4860      	ldr	r0, [pc, #384]	; (8009d4c <init_test+0x1e8>)
 8009bca:	f009 f959 	bl	8012e80 <iprintf>
		  }
		  if(dist_r <= -20){
 8009bce:	4b5e      	ldr	r3, [pc, #376]	; (8009d48 <init_test+0x1e4>)
 8009bd0:	edd3 7a00 	vldr	s15, [r3]
 8009bd4:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009bd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009be0:	d80f      	bhi.n	8009c02 <init_test+0x9e>
			  mode--;
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	3b01      	subs	r3, #1
 8009be6:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 8009be8:	4b57      	ldr	r3, [pc, #348]	; (8009d48 <init_test+0x1e4>)
 8009bea:	f04f 0200 	mov.w	r2, #0
 8009bee:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	da01      	bge.n	8009bfa <init_test+0x96>
				  mode = 7;
 8009bf6:	2307      	movs	r3, #7
 8009bf8:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 8009bfa:	6979      	ldr	r1, [r7, #20]
 8009bfc:	4853      	ldr	r0, [pc, #332]	; (8009d4c <init_test+0x1e8>)
 8009bfe:	f009 f93f 	bl	8012e80 <iprintf>
		  }
		  if(dist_l <= -20){
 8009c02:	4b53      	ldr	r3, [pc, #332]	; (8009d50 <init_test+0x1ec>)
 8009c04:	edd3 7a00 	vldr	s15, [r3]
 8009c08:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009c0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c14:	f200 8094 	bhi.w	8009d40 <init_test+0x1dc>
			  dist_l = 0;
 8009c18:	4b4d      	ldr	r3, [pc, #308]	; (8009d50 <init_test+0x1ec>)
 8009c1a:	f04f 0200 	mov.w	r2, #0
 8009c1e:	601a      	str	r2, [r3, #0]
			  drive_ready();
 8009c20:	f7fb f824 	bl	8004c6c <drive_ready>
			  get_base();
 8009c24:	f008 fab6 	bl	8012194 <get_base>

			  switch(mode){
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	2b07      	cmp	r3, #7
 8009c2c:	f200 8084 	bhi.w	8009d38 <init_test+0x1d4>
 8009c30:	a201      	add	r2, pc, #4	; (adr r2, 8009c38 <init_test+0xd4>)
 8009c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c36:	bf00      	nop
 8009c38:	08009c59 	.word	0x08009c59
 8009c3c:	08009c5f 	.word	0x08009c5f
 8009c40:	08009c7f 	.word	0x08009c7f
 8009c44:	08009c9d 	.word	0x08009c9d
 8009c48:	08009cbb 	.word	0x08009cbb
 8009c4c:	08009cd9 	.word	0x08009cd9
 8009c50:	08009d09 	.word	0x08009d09
 8009c54:	08009d23 	.word	0x08009d23
				case 0:
					get_base();
 8009c58:	f008 fa9c 	bl	8012194 <get_base>
					break;
 8009c5c:	e06c      	b.n	8009d38 <init_test+0x1d4>
				case 1:
					//----4区画等速走行----
					printf("4 Section, Forward, Constant Speed.\n");
 8009c5e:	483d      	ldr	r0, [pc, #244]	; (8009d54 <init_test+0x1f0>)
 8009c60:	f009 f982 	bl	8012f68 <puts>
					for(int i = 0; i < 1; i++){
 8009c64:	2300      	movs	r3, #0
 8009c66:	613b      	str	r3, [r7, #16]
 8009c68:	e005      	b.n	8009c76 <init_test+0x112>
						driveC(SEC_HALF*2);			//a一区画のパルス分デフォルトインターバルで走行
 8009c6a:	20b4      	movs	r0, #180	; 0xb4
 8009c6c:	f7fb fb80 	bl	8005370 <driveC>
					for(int i = 0; i < 1; i++){
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	3301      	adds	r3, #1
 8009c74:	613b      	str	r3, [r7, #16]
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	ddf6      	ble.n	8009c6a <init_test+0x106>
					}
					break;
 8009c7c:	e05c      	b.n	8009d38 <init_test+0x1d4>
				case 2:
					//----right90度回転----
					printf("Rotate R90.\n");
 8009c7e:	4836      	ldr	r0, [pc, #216]	; (8009d58 <init_test+0x1f4>)
 8009c80:	f009 f972 	bl	8012f68 <puts>
					for(int i = 0; i < 8; i++){
 8009c84:	2300      	movs	r3, #0
 8009c86:	60fb      	str	r3, [r7, #12]
 8009c88:	e004      	b.n	8009c94 <init_test+0x130>
						rotate_R90();				//16回右90度回転、つまり4周回転
 8009c8a:	f7fc fba5 	bl	80063d8 <rotate_R90>
					for(int i = 0; i < 8; i++){
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	3301      	adds	r3, #1
 8009c92:	60fb      	str	r3, [r7, #12]
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2b07      	cmp	r3, #7
 8009c98:	ddf7      	ble.n	8009c8a <init_test+0x126>
					}
					break;
 8009c9a:	e04d      	b.n	8009d38 <init_test+0x1d4>
				case 3:
					//----left90度回転----
					printf("Rotate L90.\n");
 8009c9c:	482f      	ldr	r0, [pc, #188]	; (8009d5c <init_test+0x1f8>)
 8009c9e:	f009 f963 	bl	8012f68 <puts>
					for(int i = 0; i < 8; i++){
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	60bb      	str	r3, [r7, #8]
 8009ca6:	e004      	b.n	8009cb2 <init_test+0x14e>
						rotate_L90();				//16回左90度回転、つまり4周回転
 8009ca8:	f7fc fc72 	bl	8006590 <rotate_L90>
					for(int i = 0; i < 8; i++){
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	60bb      	str	r3, [r7, #8]
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	2b07      	cmp	r3, #7
 8009cb6:	ddf7      	ble.n	8009ca8 <init_test+0x144>
					}
					break;
 8009cb8:	e03e      	b.n	8009d38 <init_test+0x1d4>
				case 4:
					//----180度回転----
					printf("Rotate 180.\n");
 8009cba:	4829      	ldr	r0, [pc, #164]	; (8009d60 <init_test+0x1fc>)
 8009cbc:	f009 f954 	bl	8012f68 <puts>
					for(int i = 0; i < 4; i++){
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	607b      	str	r3, [r7, #4]
 8009cc4:	e004      	b.n	8009cd0 <init_test+0x16c>
						rotate_180();				//8回右180度回転、つまり4周回転
 8009cc6:	f7fc fd3f 	bl	8006748 <rotate_180>
					for(int i = 0; i < 4; i++){
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	3301      	adds	r3, #1
 8009cce:	607b      	str	r3, [r7, #4]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2b03      	cmp	r3, #3
 8009cd4:	ddf7      	ble.n	8009cc6 <init_test+0x162>
					}
					break;
 8009cd6:	e02f      	b.n	8009d38 <init_test+0x1d4>
				case 5:
					//----4区画連続走行----
					printf("4 Section, Forward, Continuous.\n");
 8009cd8:	4822      	ldr	r0, [pc, #136]	; (8009d64 <init_test+0x200>)
 8009cda:	f009 f945 	bl	8012f68 <puts>
					get_base();
 8009cde:	f008 fa59 	bl	8012194 <get_base>
					run_mode = 2;
 8009ce2:	4b21      	ldr	r3, [pc, #132]	; (8009d68 <init_test+0x204>)
 8009ce4:	2202      	movs	r2, #2
 8009ce6:	701a      	strb	r2, [r3, #0]
					half_sectionA();				//a半区画のパルス分加速しながら走行
 8009ce8:	f7fb ff78 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 5-1; i++){
 8009cec:	2300      	movs	r3, #0
 8009cee:	603b      	str	r3, [r7, #0]
 8009cf0:	e004      	b.n	8009cfc <init_test+0x198>
						one_sectionU();				//a一区画のパルス分等速走行
 8009cf2:	f7fc fb57 	bl	80063a4 <one_sectionU>
					for(int i = 0; i < 5-1; i++){
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	603b      	str	r3, [r7, #0]
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	2b03      	cmp	r3, #3
 8009d00:	ddf7      	ble.n	8009cf2 <init_test+0x18e>
					}
					half_sectionD();				//a半区画のパルス分減速しながら走行。走行後は停止する
 8009d02:	f7fb ffd1 	bl	8005ca8 <half_sectionD>
					break;
 8009d06:	e017      	b.n	8009d38 <init_test+0x1d4>
				case 6:
					//----a宴会芸モード----
					target_degree_z = degree_z;
 8009d08:	4b18      	ldr	r3, [pc, #96]	; (8009d6c <init_test+0x208>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a18      	ldr	r2, [pc, #96]	; (8009d70 <init_test+0x20c>)
 8009d0e:	6013      	str	r3, [r2, #0]
					accel_l = 5000;
 8009d10:	4b18      	ldr	r3, [pc, #96]	; (8009d74 <init_test+0x210>)
 8009d12:	4a19      	ldr	r2, [pc, #100]	; (8009d78 <init_test+0x214>)
 8009d14:	601a      	str	r2, [r3, #0]

					MF2.FLAG.ENKAI = 1;
 8009d16:	4a19      	ldr	r2, [pc, #100]	; (8009d7c <init_test+0x218>)
 8009d18:	8813      	ldrh	r3, [r2, #0]
 8009d1a:	f043 0320 	orr.w	r3, r3, #32
 8009d1e:	8013      	strh	r3, [r2, #0]

					while(1);
 8009d20:	e7fe      	b.n	8009d20 <init_test+0x1bc>
					break;
				case 7:
					//----a停止時前壁補正モード----
					MF.FLAG.FWALL = 1;
 8009d22:	4a17      	ldr	r2, [pc, #92]	; (8009d80 <init_test+0x21c>)
 8009d24:	8813      	ldrh	r3, [r2, #0]
 8009d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d2a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.DRV = 1;
 8009d2c:	4a14      	ldr	r2, [pc, #80]	; (8009d80 <init_test+0x21c>)
 8009d2e:	8813      	ldrh	r3, [r2, #0]
 8009d30:	f043 0302 	orr.w	r3, r3, #2
 8009d34:	8013      	strh	r3, [r2, #0]
					while(1);
 8009d36:	e7fe      	b.n	8009d36 <init_test+0x1d2>
					break;
			  }
			  dist_l = 0;
 8009d38:	4b05      	ldr	r3, [pc, #20]	; (8009d50 <init_test+0x1ec>)
 8009d3a:	f04f 0200 	mov.w	r2, #0
 8009d3e:	601a      	str	r2, [r3, #0]
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009d40:	e719      	b.n	8009b76 <init_test+0x12>
 8009d42:	bf00      	nop
 8009d44:	080140e0 	.word	0x080140e0
 8009d48:	20000b2c 	.word	0x20000b2c
 8009d4c:	080140bc 	.word	0x080140bc
 8009d50:	20001644 	.word	0x20001644
 8009d54:	080140fc 	.word	0x080140fc
 8009d58:	08014120 	.word	0x08014120
 8009d5c:	0801412c 	.word	0x0801412c
 8009d60:	08014138 	.word	0x08014138
 8009d64:	08014144 	.word	0x08014144
 8009d68:	20000456 	.word	0x20000456
 8009d6c:	20000b9c 	.word	0x20000b9c
 8009d70:	20000c78 	.word	0x20000c78
 8009d74:	20000d98 	.word	0x20000d98
 8009d78:	459c4000 	.word	0x459c4000
 8009d7c:	20000fa4 	.word	0x20000fa4
 8009d80:	20000fa8 	.word	0x20000fa8

08009d84 <slalom_test>:
//slalom_test
// aスラローム走行テスト
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_test(void){
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b08e      	sub	sp, #56	; 0x38
 8009d88:	af00      	add	r7, sp, #0

	int mode = 0;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	637b      	str	r3, [r7, #52]	; 0x34
	printf("Test Slalom Run, Mode : %d\n", mode);
 8009d8e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009d90:	48b6      	ldr	r0, [pc, #728]	; (800a06c <slalom_test+0x2e8>)
 8009d92:	f009 f875 	bl	8012e80 <iprintf>

	run_select();
 8009d96:	f7fb f8c9 	bl	8004f2c <run_select>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	f003 0301 	and.w	r3, r3, #1
 8009da2:	b2d8      	uxtb	r0, r3
 8009da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	f003 0302 	and.w	r3, r3, #2
 8009dac:	b2d9      	uxtb	r1, r3
 8009dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009db0:	b2db      	uxtb	r3, r3
 8009db2:	f003 0304 	and.w	r3, r3, #4
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	461a      	mov	r2, r3
 8009dba:	f008 fa43 	bl	8012244 <led_write>
		  if(dist_r >= 20){
 8009dbe:	4bac      	ldr	r3, [pc, #688]	; (800a070 <slalom_test+0x2ec>)
 8009dc0:	edd3 7a00 	vldr	s15, [r3]
 8009dc4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009dc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dd0:	db20      	blt.n	8009e14 <slalom_test+0x90>
			  mode++;
 8009dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	637b      	str	r3, [r7, #52]	; 0x34
			  dist_r = 0;
 8009dd8:	4ba5      	ldr	r3, [pc, #660]	; (800a070 <slalom_test+0x2ec>)
 8009dda:	f04f 0200 	mov.w	r2, #0
 8009dde:	601a      	str	r2, [r3, #0]
			  if(mode < 8){
 8009de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009de2:	2b07      	cmp	r3, #7
 8009de4:	dc03      	bgt.n	8009dee <slalom_test+0x6a>
				  full_led_write1(WHITE);
 8009de6:	2007      	movs	r0, #7
 8009de8:	f008 fa66 	bl	80122b8 <full_led_write1>
 8009dec:	e009      	b.n	8009e02 <slalom_test+0x7e>
			  }else if(mode < 16){
 8009dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009df0:	2b0f      	cmp	r3, #15
 8009df2:	dc03      	bgt.n	8009dfc <slalom_test+0x78>
				  full_led_write1(BLUEGREEN);
 8009df4:	2004      	movs	r0, #4
 8009df6:	f008 fa5f 	bl	80122b8 <full_led_write1>
 8009dfa:	e002      	b.n	8009e02 <slalom_test+0x7e>
			  }else{
				  full_led_write1(PURPLE);
 8009dfc:	2005      	movs	r0, #5
 8009dfe:	f008 fa5b 	bl	80122b8 <full_led_write1>
			  }
			  if(mode > 23){
 8009e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e04:	2b17      	cmp	r3, #23
 8009e06:	dd01      	ble.n	8009e0c <slalom_test+0x88>
				  mode = 0;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	637b      	str	r3, [r7, #52]	; 0x34
			  }
			  printf("Mode : %d\n", mode);
 8009e0c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009e0e:	4899      	ldr	r0, [pc, #612]	; (800a074 <slalom_test+0x2f0>)
 8009e10:	f009 f836 	bl	8012e80 <iprintf>
		  }
		  if(dist_r <= -20){
 8009e14:	4b96      	ldr	r3, [pc, #600]	; (800a070 <slalom_test+0x2ec>)
 8009e16:	edd3 7a00 	vldr	s15, [r3]
 8009e1a:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009e1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e26:	d820      	bhi.n	8009e6a <slalom_test+0xe6>
			  mode--;
 8009e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	637b      	str	r3, [r7, #52]	; 0x34
			  dist_r = 0;
 8009e2e:	4b90      	ldr	r3, [pc, #576]	; (800a070 <slalom_test+0x2ec>)
 8009e30:	f04f 0200 	mov.w	r2, #0
 8009e34:	601a      	str	r2, [r3, #0]
			  if(mode < 8){
 8009e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e38:	2b07      	cmp	r3, #7
 8009e3a:	dc03      	bgt.n	8009e44 <slalom_test+0xc0>
				  full_led_write1(WHITE);
 8009e3c:	2007      	movs	r0, #7
 8009e3e:	f008 fa3b 	bl	80122b8 <full_led_write1>
 8009e42:	e009      	b.n	8009e58 <slalom_test+0xd4>
			  }else if(mode < 16){
 8009e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e46:	2b0f      	cmp	r3, #15
 8009e48:	dc03      	bgt.n	8009e52 <slalom_test+0xce>
				  full_led_write1(BLUEGREEN);
 8009e4a:	2004      	movs	r0, #4
 8009e4c:	f008 fa34 	bl	80122b8 <full_led_write1>
 8009e50:	e002      	b.n	8009e58 <slalom_test+0xd4>
			  }else{
				  full_led_write1(PURPLE);
 8009e52:	2005      	movs	r0, #5
 8009e54:	f008 fa30 	bl	80122b8 <full_led_write1>
			  }
			  if(mode < 0){
 8009e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	da01      	bge.n	8009e62 <slalom_test+0xde>
				  mode = 23;
 8009e5e:	2317      	movs	r3, #23
 8009e60:	637b      	str	r3, [r7, #52]	; 0x34
			  }
			  printf("Mode : %d\n", mode);
 8009e62:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009e64:	4883      	ldr	r0, [pc, #524]	; (800a074 <slalom_test+0x2f0>)
 8009e66:	f009 f80b 	bl	8012e80 <iprintf>
		  }
		  if(dist_l <= -20){
 8009e6a:	4b83      	ldr	r3, [pc, #524]	; (800a078 <slalom_test+0x2f4>)
 8009e6c:	edd3 7a00 	vldr	s15, [r3]
 8009e70:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009e74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e7c:	f200 8144 	bhi.w	800a108 <slalom_test+0x384>
			  dist_l = 0;
 8009e80:	4b7d      	ldr	r3, [pc, #500]	; (800a078 <slalom_test+0x2f4>)
 8009e82:	f04f 0200 	mov.w	r2, #0
 8009e86:	601a      	str	r2, [r3, #0]
			  drive_ready();
 8009e88:	f7fa fef0 	bl	8004c6c <drive_ready>
			  get_base();
 8009e8c:	f008 f982 	bl	8012194 <get_base>

			  switch(mode){
 8009e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e92:	2b10      	cmp	r3, #16
 8009e94:	f200 8131 	bhi.w	800a0fa <slalom_test+0x376>
 8009e98:	a201      	add	r2, pc, #4	; (adr r2, 8009ea0 <slalom_test+0x11c>)
 8009e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e9e:	bf00      	nop
 8009ea0:	08009ee5 	.word	0x08009ee5
 8009ea4:	08009eeb 	.word	0x08009eeb
 8009ea8:	08009f11 	.word	0x08009f11
 8009eac:	08009f37 	.word	0x08009f37
 8009eb0:	08009f5d 	.word	0x08009f5d
 8009eb4:	08009f83 	.word	0x08009f83
 8009eb8:	08009fa9 	.word	0x08009fa9
 8009ebc:	0800a0fb 	.word	0x0800a0fb
 8009ec0:	0800a0fb 	.word	0x0800a0fb
 8009ec4:	08009fcf 	.word	0x08009fcf
 8009ec8:	08009ff9 	.word	0x08009ff9
 8009ecc:	0800a037 	.word	0x0800a037
 8009ed0:	0800a05d 	.word	0x0800a05d
 8009ed4:	0800a0af 	.word	0x0800a0af
 8009ed8:	0800a0d5 	.word	0x0800a0d5
 8009edc:	0800a0fb 	.word	0x0800a0fb
 8009ee0:	0800a0fb 	.word	0x0800a0fb
				case 0:
					get_base();
 8009ee4:	f008 f956 	bl	8012194 <get_base>
					break;
 8009ee8:	e107      	b.n	800a0fa <slalom_test+0x376>
				case 1:
					//----slalom右折----
					printf("slalom turn right .\n");
 8009eea:	4864      	ldr	r0, [pc, #400]	; (800a07c <slalom_test+0x2f8>)
 8009eec:	f009 f83c 	bl	8012f68 <puts>
					half_sectionA();
 8009ef0:	f7fb fe74 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 1; i++){
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	633b      	str	r3, [r7, #48]	; 0x30
 8009ef8:	e004      	b.n	8009f04 <slalom_test+0x180>
						slalom_R90();				//1回右90度回転、つまり1/4周回転
 8009efa:	f7fc fcfd 	bl	80068f8 <slalom_R90>
					for(int i = 0; i < 1; i++){
 8009efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f00:	3301      	adds	r3, #1
 8009f02:	633b      	str	r3, [r7, #48]	; 0x30
 8009f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	ddf7      	ble.n	8009efa <slalom_test+0x176>
					}
					half_sectionD();
 8009f0a:	f7fb fecd 	bl	8005ca8 <half_sectionD>
					break;
 8009f0e:	e0f4      	b.n	800a0fa <slalom_test+0x376>
				case 2:
					//----slalom左折----
					printf("slalom turn left .\n");
 8009f10:	485b      	ldr	r0, [pc, #364]	; (800a080 <slalom_test+0x2fc>)
 8009f12:	f009 f829 	bl	8012f68 <puts>
					half_sectionA();
 8009f16:	f7fb fe61 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 1; i++){
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f1e:	e004      	b.n	8009f2a <slalom_test+0x1a6>
						slalom_L90();				//1回左90度回転、つまり1/4周回転
 8009f20:	f7fc fe54 	bl	8006bcc <slalom_L90>
					for(int i = 0; i < 1; i++){
 8009f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f26:	3301      	adds	r3, #1
 8009f28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	ddf7      	ble.n	8009f20 <slalom_test+0x19c>
					}
					half_sectionD();
 8009f30:	f7fb feba 	bl	8005ca8 <half_sectionD>
					break;
 8009f34:	e0e1      	b.n	800a0fa <slalom_test+0x376>
				case 3:
					//----Lslalom右折----
					printf("Lslalom turn right .\n");
 8009f36:	4853      	ldr	r0, [pc, #332]	; (800a084 <slalom_test+0x300>)
 8009f38:	f009 f816 	bl	8012f68 <puts>
					half_sectionA();
 8009f3c:	f7fb fe4e 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 1; i++){
 8009f40:	2300      	movs	r3, #0
 8009f42:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f44:	e004      	b.n	8009f50 <slalom_test+0x1cc>
						Lslalom_R90();				//1回右90度回転、つまり1/4周回転
 8009f46:	f7fc ffa3 	bl	8006e90 <Lslalom_R90>
					for(int i = 0; i < 1; i++){
 8009f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	ddf7      	ble.n	8009f46 <slalom_test+0x1c2>
					}
					half_sectionD();
 8009f56:	f7fb fea7 	bl	8005ca8 <half_sectionD>
					break;
 8009f5a:	e0ce      	b.n	800a0fa <slalom_test+0x376>
				case 4:
					//----Lslalom左折----
					printf("Lslalom turn left .\n");
 8009f5c:	484a      	ldr	r0, [pc, #296]	; (800a088 <slalom_test+0x304>)
 8009f5e:	f009 f803 	bl	8012f68 <puts>
					half_sectionA();
 8009f62:	f7fb fe3b 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 1; i++){
 8009f66:	2300      	movs	r3, #0
 8009f68:	627b      	str	r3, [r7, #36]	; 0x24
 8009f6a:	e004      	b.n	8009f76 <slalom_test+0x1f2>
						Lslalom_L90();				//1回左90度回転、つまり1/4周回転
 8009f6c:	f7fd f8c6 	bl	80070fc <Lslalom_L90>
					for(int i = 0; i < 1; i++){
 8009f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f72:	3301      	adds	r3, #1
 8009f74:	627b      	str	r3, [r7, #36]	; 0x24
 8009f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	ddf7      	ble.n	8009f6c <slalom_test+0x1e8>
					}
					half_sectionD();
 8009f7c:	f7fb fe94 	bl	8005ca8 <half_sectionD>
					break;
 8009f80:	e0bb      	b.n	800a0fa <slalom_test+0x376>
				case 5:
					//----Lslalom右180----
					printf("Lslalom turn right & right .\n");
 8009f82:	4842      	ldr	r0, [pc, #264]	; (800a08c <slalom_test+0x308>)
 8009f84:	f008 fff0 	bl	8012f68 <puts>
					half_sectionA();
 8009f88:	f7fb fe28 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 1; i++){
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	623b      	str	r3, [r7, #32]
 8009f90:	e004      	b.n	8009f9c <slalom_test+0x218>
						Lslalom_R180();				//1回右180度回転、つまり1/2周回転
 8009f92:	f7fd f9dd 	bl	8007350 <Lslalom_R180>
					for(int i = 0; i < 1; i++){
 8009f96:	6a3b      	ldr	r3, [r7, #32]
 8009f98:	3301      	adds	r3, #1
 8009f9a:	623b      	str	r3, [r7, #32]
 8009f9c:	6a3b      	ldr	r3, [r7, #32]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	ddf7      	ble.n	8009f92 <slalom_test+0x20e>
					}
					half_sectionD();
 8009fa2:	f7fb fe81 	bl	8005ca8 <half_sectionD>
					break;
 8009fa6:	e0a8      	b.n	800a0fa <slalom_test+0x376>
				case 6:
					//----Lslalom左180----
					printf("Lslalom turn left & left .\n");
 8009fa8:	4839      	ldr	r0, [pc, #228]	; (800a090 <slalom_test+0x30c>)
 8009faa:	f008 ffdd 	bl	8012f68 <puts>
					half_sectionA();
 8009fae:	f7fb fe15 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 1; i++){
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	61fb      	str	r3, [r7, #28]
 8009fb6:	e004      	b.n	8009fc2 <slalom_test+0x23e>
						Lslalom_L180();				//1回左180度回転、つまり1/2周回転
 8009fb8:	f7fd fb16 	bl	80075e8 <Lslalom_L180>
					for(int i = 0; i < 1; i++){
 8009fbc:	69fb      	ldr	r3, [r7, #28]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	61fb      	str	r3, [r7, #28]
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	ddf7      	ble.n	8009fb8 <slalom_test+0x234>
					}
					half_sectionD();
 8009fc8:	f7fb fe6e 	bl	8005ca8 <half_sectionD>
					break;
 8009fcc:	e095      	b.n	800a0fa <slalom_test+0x376>
					break;
				case 8:
					break;
				case 9:
					//----slalom右折----
					printf("slalom turn right .\n");
 8009fce:	482b      	ldr	r0, [pc, #172]	; (800a07c <slalom_test+0x2f8>)
 8009fd0:	f008 ffca 	bl	8012f68 <puts>
					half_sectionA();
 8009fd4:	f7fb fe02 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 8; i++){
 8009fd8:	2300      	movs	r3, #0
 8009fda:	61bb      	str	r3, [r7, #24]
 8009fdc:	e006      	b.n	8009fec <slalom_test+0x268>
						slalom_R90();				//8回右90度回転、つまり2周回転
 8009fde:	f7fc fc8b 	bl	80068f8 <slalom_R90>
						one_sectionU();
 8009fe2:	f7fc f9df 	bl	80063a4 <one_sectionU>
					for(int i = 0; i < 8; i++){
 8009fe6:	69bb      	ldr	r3, [r7, #24]
 8009fe8:	3301      	adds	r3, #1
 8009fea:	61bb      	str	r3, [r7, #24]
 8009fec:	69bb      	ldr	r3, [r7, #24]
 8009fee:	2b07      	cmp	r3, #7
 8009ff0:	ddf5      	ble.n	8009fde <slalom_test+0x25a>
					}
					half_sectionD();
 8009ff2:	f7fb fe59 	bl	8005ca8 <half_sectionD>
					break;
 8009ff6:	e080      	b.n	800a0fa <slalom_test+0x376>
				case 10:
					//----slalom左折----
					printf("slalom turn left .\n");
 8009ff8:	4821      	ldr	r0, [pc, #132]	; (800a080 <slalom_test+0x2fc>)
 8009ffa:	f008 ffb5 	bl	8012f68 <puts>
					half_sectionA();
 8009ffe:	f7fb fded 	bl	8005bdc <half_sectionA>
					MF2.FLAG.LOG = 1;
 800a002:	4a24      	ldr	r2, [pc, #144]	; (800a094 <slalom_test+0x310>)
 800a004:	8813      	ldrh	r3, [r2, #0]
 800a006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a00a:	8013      	strh	r3, [r2, #0]
					for(int i = 0; i < 8; i++){
 800a00c:	2300      	movs	r3, #0
 800a00e:	617b      	str	r3, [r7, #20]
 800a010:	e006      	b.n	800a020 <slalom_test+0x29c>
						slalom_L90();				//8回左90度回転、つまり2周回転
 800a012:	f7fc fddb 	bl	8006bcc <slalom_L90>
						one_sectionU();
 800a016:	f7fc f9c5 	bl	80063a4 <one_sectionU>
					for(int i = 0; i < 8; i++){
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	3301      	adds	r3, #1
 800a01e:	617b      	str	r3, [r7, #20]
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	2b07      	cmp	r3, #7
 800a024:	ddf5      	ble.n	800a012 <slalom_test+0x28e>
					}
					MF2.FLAG.LOG = 0;
 800a026:	4a1b      	ldr	r2, [pc, #108]	; (800a094 <slalom_test+0x310>)
 800a028:	8813      	ldrh	r3, [r2, #0]
 800a02a:	f36f 1386 	bfc	r3, #6, #1
 800a02e:	8013      	strh	r3, [r2, #0]
					half_sectionD();
 800a030:	f7fb fe3a 	bl	8005ca8 <half_sectionD>
					printf("r start\n");
					for(int j = 0; j < log_allay; j++){
						printf("%d\n", get_speed_r[j]);
					}
					printf("r end\n");
*/					break;
 800a034:	e061      	b.n	800a0fa <slalom_test+0x376>
				case 11:
					//----Lslalom右折----
					printf("Lslalom turn right .\n");
 800a036:	4813      	ldr	r0, [pc, #76]	; (800a084 <slalom_test+0x300>)
 800a038:	f008 ff96 	bl	8012f68 <puts>
					half_sectionA();
 800a03c:	f7fb fdce 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 8; i++){
 800a040:	2300      	movs	r3, #0
 800a042:	613b      	str	r3, [r7, #16]
 800a044:	e004      	b.n	800a050 <slalom_test+0x2cc>
						Lslalom_R90();				//8回右90度回転、つまり2周回転
 800a046:	f7fc ff23 	bl	8006e90 <Lslalom_R90>
					for(int i = 0; i < 8; i++){
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	3301      	adds	r3, #1
 800a04e:	613b      	str	r3, [r7, #16]
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	2b07      	cmp	r3, #7
 800a054:	ddf7      	ble.n	800a046 <slalom_test+0x2c2>
					}
					half_sectionD();
 800a056:	f7fb fe27 	bl	8005ca8 <half_sectionD>
					break;
 800a05a:	e04e      	b.n	800a0fa <slalom_test+0x376>
				case 12:
					//----Lslalom左折----
					printf("Lslalom turn left .\n");
 800a05c:	480a      	ldr	r0, [pc, #40]	; (800a088 <slalom_test+0x304>)
 800a05e:	f008 ff83 	bl	8012f68 <puts>
					half_sectionA();
 800a062:	f7fb fdbb 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 8; i++){
 800a066:	2300      	movs	r3, #0
 800a068:	60fb      	str	r3, [r7, #12]
 800a06a:	e01a      	b.n	800a0a2 <slalom_test+0x31e>
 800a06c:	08014164 	.word	0x08014164
 800a070:	20000b2c 	.word	0x20000b2c
 800a074:	080140bc 	.word	0x080140bc
 800a078:	20001644 	.word	0x20001644
 800a07c:	08014180 	.word	0x08014180
 800a080:	08014194 	.word	0x08014194
 800a084:	080141a8 	.word	0x080141a8
 800a088:	080141c0 	.word	0x080141c0
 800a08c:	080141d4 	.word	0x080141d4
 800a090:	080141f4 	.word	0x080141f4
 800a094:	20000fa4 	.word	0x20000fa4
						Lslalom_L90();				//8回左90度回転、つまり2周回転
 800a098:	f7fd f830 	bl	80070fc <Lslalom_L90>
					for(int i = 0; i < 8; i++){
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	3301      	adds	r3, #1
 800a0a0:	60fb      	str	r3, [r7, #12]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2b07      	cmp	r3, #7
 800a0a6:	ddf7      	ble.n	800a098 <slalom_test+0x314>
					}
					half_sectionD();
 800a0a8:	f7fb fdfe 	bl	8005ca8 <half_sectionD>
					break;
 800a0ac:	e025      	b.n	800a0fa <slalom_test+0x376>
				case 13:
					//----Lslalom右180----
					printf("Lslalom turn right & right .\n");
 800a0ae:	4817      	ldr	r0, [pc, #92]	; (800a10c <slalom_test+0x388>)
 800a0b0:	f008 ff5a 	bl	8012f68 <puts>
					half_sectionA();
 800a0b4:	f7fb fd92 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 8; i++){
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	60bb      	str	r3, [r7, #8]
 800a0bc:	e004      	b.n	800a0c8 <slalom_test+0x344>
						Lslalom_R180();				//8回右180度回転、つまり4周回転
 800a0be:	f7fd f947 	bl	8007350 <Lslalom_R180>
					for(int i = 0; i < 8; i++){
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	3301      	adds	r3, #1
 800a0c6:	60bb      	str	r3, [r7, #8]
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	2b07      	cmp	r3, #7
 800a0cc:	ddf7      	ble.n	800a0be <slalom_test+0x33a>
					}
					half_sectionD();
 800a0ce:	f7fb fdeb 	bl	8005ca8 <half_sectionD>
					break;
 800a0d2:	e012      	b.n	800a0fa <slalom_test+0x376>
				case 14:
					//----Lslalom左180----
					printf("Lslalom turn left & left .\n");
 800a0d4:	480e      	ldr	r0, [pc, #56]	; (800a110 <slalom_test+0x38c>)
 800a0d6:	f008 ff47 	bl	8012f68 <puts>
					half_sectionA();
 800a0da:	f7fb fd7f 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 8; i++){
 800a0de:	2300      	movs	r3, #0
 800a0e0:	607b      	str	r3, [r7, #4]
 800a0e2:	e004      	b.n	800a0ee <slalom_test+0x36a>
						Lslalom_L180();				//8回左180度回転、つまり4周回転
 800a0e4:	f7fd fa80 	bl	80075e8 <Lslalom_L180>
					for(int i = 0; i < 8; i++){
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	607b      	str	r3, [r7, #4]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2b07      	cmp	r3, #7
 800a0f2:	ddf7      	ble.n	800a0e4 <slalom_test+0x360>
					}
					half_sectionD();
 800a0f4:	f7fb fdd8 	bl	8005ca8 <half_sectionD>
					break;
 800a0f8:	bf00      	nop
					break;
				case 16:
					break;

			  }
			  full_led_write1(RED);
 800a0fa:	2001      	movs	r0, #1
 800a0fc:	f008 f8dc 	bl	80122b8 <full_led_write1>
			  dist_l = 0;
 800a100:	4b04      	ldr	r3, [pc, #16]	; (800a114 <slalom_test+0x390>)
 800a102:	f04f 0200 	mov.w	r2, #0
 800a106:	601a      	str	r2, [r3, #0]
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a108:	e647      	b.n	8009d9a <slalom_test+0x16>
 800a10a:	bf00      	nop
 800a10c:	080141d4 	.word	0x080141d4
 800a110:	080141f4 	.word	0x080141f4
 800a114:	20001644 	.word	0x20001644

0800a118 <v_test>:
//v_test
// a斜め走行テスト
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_test(void){
 800a118:	b580      	push	{r7, lr}
 800a11a:	b092      	sub	sp, #72	; 0x48
 800a11c:	af00      	add	r7, sp, #0

	int mode = 0;
 800a11e:	2300      	movs	r3, #0
 800a120:	647b      	str	r3, [r7, #68]	; 0x44
	printf("Test V Run, Mode : %d\n", mode);
 800a122:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a124:	48b8      	ldr	r0, [pc, #736]	; (800a408 <v_test+0x2f0>)
 800a126:	f008 feab 	bl	8012e80 <iprintf>

	run_select();
 800a12a:	f7fa feff 	bl	8004f2c <run_select>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a12e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a130:	b2db      	uxtb	r3, r3
 800a132:	f003 0301 	and.w	r3, r3, #1
 800a136:	b2d8      	uxtb	r0, r3
 800a138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	f003 0302 	and.w	r3, r3, #2
 800a140:	b2d9      	uxtb	r1, r3
 800a142:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a144:	b2db      	uxtb	r3, r3
 800a146:	f003 0304 	and.w	r3, r3, #4
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	461a      	mov	r2, r3
 800a14e:	f008 f879 	bl	8012244 <led_write>
		  if(dist_r >= 20){
 800a152:	4bae      	ldr	r3, [pc, #696]	; (800a40c <v_test+0x2f4>)
 800a154:	edd3 7a00 	vldr	s15, [r3]
 800a158:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800a15c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a164:	db20      	blt.n	800a1a8 <v_test+0x90>
			  mode++;
 800a166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a168:	3301      	adds	r3, #1
 800a16a:	647b      	str	r3, [r7, #68]	; 0x44
			  dist_r = 0;
 800a16c:	4ba7      	ldr	r3, [pc, #668]	; (800a40c <v_test+0x2f4>)
 800a16e:	f04f 0200 	mov.w	r2, #0
 800a172:	601a      	str	r2, [r3, #0]
			  if(mode > 23){
 800a174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a176:	2b17      	cmp	r3, #23
 800a178:	dd01      	ble.n	800a17e <v_test+0x66>
				  mode = 0;
 800a17a:	2300      	movs	r3, #0
 800a17c:	647b      	str	r3, [r7, #68]	; 0x44
			  }
			  if(mode < 8){
 800a17e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a180:	2b07      	cmp	r3, #7
 800a182:	dc03      	bgt.n	800a18c <v_test+0x74>
				  full_led_write1(WHITE);
 800a184:	2007      	movs	r0, #7
 800a186:	f008 f897 	bl	80122b8 <full_led_write1>
 800a18a:	e009      	b.n	800a1a0 <v_test+0x88>
			  }else if(mode < 16){
 800a18c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a18e:	2b0f      	cmp	r3, #15
 800a190:	dc03      	bgt.n	800a19a <v_test+0x82>
				  full_led_write1(BLUEGREEN);
 800a192:	2004      	movs	r0, #4
 800a194:	f008 f890 	bl	80122b8 <full_led_write1>
 800a198:	e002      	b.n	800a1a0 <v_test+0x88>
			  }else{
				  full_led_write1(PURPLE);
 800a19a:	2005      	movs	r0, #5
 800a19c:	f008 f88c 	bl	80122b8 <full_led_write1>
			  }
			  printf("Mode : %d\n", mode);
 800a1a0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a1a2:	489b      	ldr	r0, [pc, #620]	; (800a410 <v_test+0x2f8>)
 800a1a4:	f008 fe6c 	bl	8012e80 <iprintf>
		  }
		  if(dist_r <= -20){
 800a1a8:	4b98      	ldr	r3, [pc, #608]	; (800a40c <v_test+0x2f4>)
 800a1aa:	edd3 7a00 	vldr	s15, [r3]
 800a1ae:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800a1b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a1b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1ba:	d820      	bhi.n	800a1fe <v_test+0xe6>
			  mode--;
 800a1bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1be:	3b01      	subs	r3, #1
 800a1c0:	647b      	str	r3, [r7, #68]	; 0x44
			  dist_r = 0;
 800a1c2:	4b92      	ldr	r3, [pc, #584]	; (800a40c <v_test+0x2f4>)
 800a1c4:	f04f 0200 	mov.w	r2, #0
 800a1c8:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800a1ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	da01      	bge.n	800a1d4 <v_test+0xbc>
				  mode = 23;
 800a1d0:	2317      	movs	r3, #23
 800a1d2:	647b      	str	r3, [r7, #68]	; 0x44
			  }
			  if(mode < 8){
 800a1d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1d6:	2b07      	cmp	r3, #7
 800a1d8:	dc03      	bgt.n	800a1e2 <v_test+0xca>
				  full_led_write1(WHITE);
 800a1da:	2007      	movs	r0, #7
 800a1dc:	f008 f86c 	bl	80122b8 <full_led_write1>
 800a1e0:	e009      	b.n	800a1f6 <v_test+0xde>
			  }else if(mode < 16){
 800a1e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1e4:	2b0f      	cmp	r3, #15
 800a1e6:	dc03      	bgt.n	800a1f0 <v_test+0xd8>
				  full_led_write1(BLUEGREEN);
 800a1e8:	2004      	movs	r0, #4
 800a1ea:	f008 f865 	bl	80122b8 <full_led_write1>
 800a1ee:	e002      	b.n	800a1f6 <v_test+0xde>
			  }else{
				  full_led_write1(PURPLE);
 800a1f0:	2005      	movs	r0, #5
 800a1f2:	f008 f861 	bl	80122b8 <full_led_write1>
			  }
			  printf("Mode : %d\n", mode);
 800a1f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a1f8:	4885      	ldr	r0, [pc, #532]	; (800a410 <v_test+0x2f8>)
 800a1fa:	f008 fe41 	bl	8012e80 <iprintf>
		  }
		  if(dist_l <= -20){
 800a1fe:	4b85      	ldr	r3, [pc, #532]	; (800a414 <v_test+0x2fc>)
 800a200:	edd3 7a00 	vldr	s15, [r3]
 800a204:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800a208:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a20c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a210:	f200 81aa 	bhi.w	800a568 <v_test+0x450>
			  dist_l = 0;
 800a214:	4b7f      	ldr	r3, [pc, #508]	; (800a414 <v_test+0x2fc>)
 800a216:	f04f 0200 	mov.w	r2, #0
 800a21a:	601a      	str	r2, [r3, #0]
			  drive_ready();
 800a21c:	f7fa fd26 	bl	8004c6c <drive_ready>

			  MF.FLAG.XDIR = 1;
 800a220:	4a7d      	ldr	r2, [pc, #500]	; (800a418 <v_test+0x300>)
 800a222:	8813      	ldrh	r3, [r2, #0]
 800a224:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a228:	8013      	strh	r3, [r2, #0]
			  MF2.FLAG.V = 0;
 800a22a:	4a7c      	ldr	r2, [pc, #496]	; (800a41c <v_test+0x304>)
 800a22c:	8813      	ldrh	r3, [r2, #0]
 800a22e:	f36f 03c3 	bfc	r3, #3, #1
 800a232:	8013      	strh	r3, [r2, #0]
			  get_base();
 800a234:	f007 ffae 	bl	8012194 <get_base>

			  switch(mode){
 800a238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a23a:	2b14      	cmp	r3, #20
 800a23c:	f200 818d 	bhi.w	800a55a <v_test+0x442>
 800a240:	a201      	add	r2, pc, #4	; (adr r2, 800a248 <v_test+0x130>)
 800a242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a246:	bf00      	nop
 800a248:	0800a29d 	.word	0x0800a29d
 800a24c:	0800a2a3 	.word	0x0800a2a3
 800a250:	0800a2c9 	.word	0x0800a2c9
 800a254:	0800a2ef 	.word	0x0800a2ef
 800a258:	0800a315 	.word	0x0800a315
 800a25c:	0800a33b 	.word	0x0800a33b
 800a260:	0800a361 	.word	0x0800a361
 800a264:	0800a55b 	.word	0x0800a55b
 800a268:	0800a55b 	.word	0x0800a55b
 800a26c:	0800a387 	.word	0x0800a387
 800a270:	0800a3ad 	.word	0x0800a3ad
 800a274:	0800a3d3 	.word	0x0800a3d3
 800a278:	0800a3f9 	.word	0x0800a3f9
 800a27c:	0800a44f 	.word	0x0800a44f
 800a280:	0800a475 	.word	0x0800a475
 800a284:	0800a55b 	.word	0x0800a55b
 800a288:	0800a55b 	.word	0x0800a55b
 800a28c:	0800a49b 	.word	0x0800a49b
 800a290:	0800a4cb 	.word	0x0800a4cb
 800a294:	0800a4fb 	.word	0x0800a4fb
 800a298:	0800a52b 	.word	0x0800a52b
				case 0:
					get_base();
 800a29c:	f007 ff7a 	bl	8012194 <get_base>
					break;
 800a2a0:	e15b      	b.n	800a55a <v_test+0x442>
				case 1:
					//----V右45----
					printf("V 45 right .\n");
 800a2a2:	485f      	ldr	r0, [pc, #380]	; (800a420 <v_test+0x308>)
 800a2a4:	f008 fe60 	bl	8012f68 <puts>
					half_sectionA();
 800a2a8:	f7fb fc98 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 1; i++){
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	643b      	str	r3, [r7, #64]	; 0x40
 800a2b0:	e004      	b.n	800a2bc <v_test+0x1a4>
						v_R45();
 800a2b2:	f7fd fadb 	bl	800786c <v_R45>
					for(int i = 0; i < 1; i++){
 800a2b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	643b      	str	r3, [r7, #64]	; 0x40
 800a2bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	ddf7      	ble.n	800a2b2 <v_test+0x19a>
					}
					half_sectionVD();
 800a2c2:	f7fb fdab 	bl	8005e1c <half_sectionVD>
					break;
 800a2c6:	e148      	b.n	800a55a <v_test+0x442>
				case 2:
					//----V左45----
					printf("V 45 left .\n");
 800a2c8:	4856      	ldr	r0, [pc, #344]	; (800a424 <v_test+0x30c>)
 800a2ca:	f008 fe4d 	bl	8012f68 <puts>
					half_sectionA();
 800a2ce:	f7fb fc85 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 1; i++){
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2d6:	e004      	b.n	800a2e2 <v_test+0x1ca>
						v_L45();
 800a2d8:	f7fd fd02 	bl	8007ce0 <v_L45>
					for(int i = 0; i < 1; i++){
 800a2dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2de:	3301      	adds	r3, #1
 800a2e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	ddf7      	ble.n	800a2d8 <v_test+0x1c0>
					}
					half_sectionVD();
 800a2e8:	f7fb fd98 	bl	8005e1c <half_sectionVD>
					break;
 800a2ec:	e135      	b.n	800a55a <v_test+0x442>
				case 3:
					//----V右90----
					printf("V 90 right .\n");
 800a2ee:	484e      	ldr	r0, [pc, #312]	; (800a428 <v_test+0x310>)
 800a2f0:	f008 fe3a 	bl	8012f68 <puts>
					half_sectionVA();
 800a2f4:	f7fb fd38 	bl	8005d68 <half_sectionVA>
//					v_R45();
					for(int i = 0; i < 1; i++){
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	63bb      	str	r3, [r7, #56]	; 0x38
 800a2fc:	e004      	b.n	800a308 <v_test+0x1f0>
						v_R90();
 800a2fe:	f7fe fa3d 	bl	800877c <v_R90>
					for(int i = 0; i < 1; i++){
 800a302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a304:	3301      	adds	r3, #1
 800a306:	63bb      	str	r3, [r7, #56]	; 0x38
 800a308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	ddf7      	ble.n	800a2fe <v_test+0x1e6>
					}
//					v_R45();
					half_sectionVD();
 800a30e:	f7fb fd85 	bl	8005e1c <half_sectionVD>
					break;
 800a312:	e122      	b.n	800a55a <v_test+0x442>
				case 4:
					//----V左90----
					printf("V 90 left .\n");
 800a314:	4845      	ldr	r0, [pc, #276]	; (800a42c <v_test+0x314>)
 800a316:	f008 fe27 	bl	8012f68 <puts>
					half_sectionVA();
 800a31a:	f7fb fd25 	bl	8005d68 <half_sectionVA>
//					v_L45();
					for(int i = 0; i < 1; i++){
 800a31e:	2300      	movs	r3, #0
 800a320:	637b      	str	r3, [r7, #52]	; 0x34
 800a322:	e004      	b.n	800a32e <v_test+0x216>
						v_L90();
 800a324:	f7fe fb1a 	bl	800895c <v_L90>
					for(int i = 0; i < 1; i++){
 800a328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a32a:	3301      	adds	r3, #1
 800a32c:	637b      	str	r3, [r7, #52]	; 0x34
 800a32e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a330:	2b00      	cmp	r3, #0
 800a332:	ddf7      	ble.n	800a324 <v_test+0x20c>
					}
//					v_L45();
					half_sectionVD();
 800a334:	f7fb fd72 	bl	8005e1c <half_sectionVD>
					break;
 800a338:	e10f      	b.n	800a55a <v_test+0x442>
				case 5:
					//----V右135----
					printf("V 135 right .\n");
 800a33a:	483d      	ldr	r0, [pc, #244]	; (800a430 <v_test+0x318>)
 800a33c:	f008 fe14 	bl	8012f68 <puts>
					half_sectionA();
 800a340:	f7fb fc4c 	bl	8005bdc <half_sectionA>
//					v_R45();
					for(int i = 0; i < 1; i++){
 800a344:	2300      	movs	r3, #0
 800a346:	633b      	str	r3, [r7, #48]	; 0x30
 800a348:	e004      	b.n	800a354 <v_test+0x23c>
						v_R135();
 800a34a:	f7fe fbf3 	bl	8008b34 <v_R135>
					for(int i = 0; i < 1; i++){
 800a34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a350:	3301      	adds	r3, #1
 800a352:	633b      	str	r3, [r7, #48]	; 0x30
 800a354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a356:	2b00      	cmp	r3, #0
 800a358:	ddf7      	ble.n	800a34a <v_test+0x232>
					}
//					v_R45();
					half_sectionVD();
 800a35a:	f7fb fd5f 	bl	8005e1c <half_sectionVD>
					break;
 800a35e:	e0fc      	b.n	800a55a <v_test+0x442>
				case 6:
					//----V左135----
					printf("V 135 left .\n");
 800a360:	4834      	ldr	r0, [pc, #208]	; (800a434 <v_test+0x31c>)
 800a362:	f008 fe01 	bl	8012f68 <puts>
					half_sectionA();
 800a366:	f7fb fc39 	bl	8005bdc <half_sectionA>
//					v_L45();
					for(int i = 0; i < 1; i++){
 800a36a:	2300      	movs	r3, #0
 800a36c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a36e:	e004      	b.n	800a37a <v_test+0x262>
						v_L135();
 800a370:	f7fe fe1e 	bl	8008fb0 <v_L135>
					for(int i = 0; i < 1; i++){
 800a374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a376:	3301      	adds	r3, #1
 800a378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	ddf7      	ble.n	800a370 <v_test+0x258>
					}
//					v_L45();
					half_sectionVD();
 800a380:	f7fb fd4c 	bl	8005e1c <half_sectionVD>
					break;
 800a384:	e0e9      	b.n	800a55a <v_test+0x442>
					break;
				case 8:
					break;
				case 9:
					//----V右45----
					printf("V 45 right .\n");
 800a386:	4826      	ldr	r0, [pc, #152]	; (800a420 <v_test+0x308>)
 800a388:	f008 fdee 	bl	8012f68 <puts>
					half_sectionA();
 800a38c:	f7fb fc26 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 8; i++){
 800a390:	2300      	movs	r3, #0
 800a392:	62bb      	str	r3, [r7, #40]	; 0x28
 800a394:	e004      	b.n	800a3a0 <v_test+0x288>
						v_R45();
 800a396:	f7fd fa69 	bl	800786c <v_R45>
					for(int i = 0; i < 8; i++){
 800a39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a39c:	3301      	adds	r3, #1
 800a39e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a2:	2b07      	cmp	r3, #7
 800a3a4:	ddf7      	ble.n	800a396 <v_test+0x27e>
					}
					half_sectionD();
 800a3a6:	f7fb fc7f 	bl	8005ca8 <half_sectionD>
					break;
 800a3aa:	e0d6      	b.n	800a55a <v_test+0x442>
				case 10:
					//----V左45----
					printf("V 45 left .\n");
 800a3ac:	481d      	ldr	r0, [pc, #116]	; (800a424 <v_test+0x30c>)
 800a3ae:	f008 fddb 	bl	8012f68 <puts>
					half_sectionA();
 800a3b2:	f7fb fc13 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 8; i++){
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	627b      	str	r3, [r7, #36]	; 0x24
 800a3ba:	e004      	b.n	800a3c6 <v_test+0x2ae>
						v_L45();
 800a3bc:	f7fd fc90 	bl	8007ce0 <v_L45>
					for(int i = 0; i < 8; i++){
 800a3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	627b      	str	r3, [r7, #36]	; 0x24
 800a3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c8:	2b07      	cmp	r3, #7
 800a3ca:	ddf7      	ble.n	800a3bc <v_test+0x2a4>
					}
					half_sectionD();
 800a3cc:	f7fb fc6c 	bl	8005ca8 <half_sectionD>
					break;
 800a3d0:	e0c3      	b.n	800a55a <v_test+0x442>
				case 11:
					//----V右90----
					printf("V 90 right .\n");
 800a3d2:	4815      	ldr	r0, [pc, #84]	; (800a428 <v_test+0x310>)
 800a3d4:	f008 fdc8 	bl	8012f68 <puts>
					half_sectionVA();
 800a3d8:	f7fb fcc6 	bl	8005d68 <half_sectionVA>
//					v_R45();
					for(int i = 0; i < 8; i++){
 800a3dc:	2300      	movs	r3, #0
 800a3de:	623b      	str	r3, [r7, #32]
 800a3e0:	e004      	b.n	800a3ec <v_test+0x2d4>
						v_R90();
 800a3e2:	f7fe f9cb 	bl	800877c <v_R90>
					for(int i = 0; i < 8; i++){
 800a3e6:	6a3b      	ldr	r3, [r7, #32]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	623b      	str	r3, [r7, #32]
 800a3ec:	6a3b      	ldr	r3, [r7, #32]
 800a3ee:	2b07      	cmp	r3, #7
 800a3f0:	ddf7      	ble.n	800a3e2 <v_test+0x2ca>
					}
//					v_R45();
					half_sectionVD();
 800a3f2:	f7fb fd13 	bl	8005e1c <half_sectionVD>
					break;
 800a3f6:	e0b0      	b.n	800a55a <v_test+0x442>
				case 12:
					//----V左90----
					printf("V 90 left .\n");
 800a3f8:	480c      	ldr	r0, [pc, #48]	; (800a42c <v_test+0x314>)
 800a3fa:	f008 fdb5 	bl	8012f68 <puts>
					half_sectionVA();
 800a3fe:	f7fb fcb3 	bl	8005d68 <half_sectionVA>
//					v_L45();
					for(int i = 0; i < 8; i++){
 800a402:	2300      	movs	r3, #0
 800a404:	61fb      	str	r3, [r7, #28]
 800a406:	e01c      	b.n	800a442 <v_test+0x32a>
 800a408:	08014210 	.word	0x08014210
 800a40c:	20000b2c 	.word	0x20000b2c
 800a410:	080140bc 	.word	0x080140bc
 800a414:	20001644 	.word	0x20001644
 800a418:	20000fa8 	.word	0x20000fa8
 800a41c:	20000fa4 	.word	0x20000fa4
 800a420:	08014228 	.word	0x08014228
 800a424:	08014238 	.word	0x08014238
 800a428:	08014244 	.word	0x08014244
 800a42c:	08014254 	.word	0x08014254
 800a430:	08014260 	.word	0x08014260
 800a434:	08014270 	.word	0x08014270
						v_L90();
 800a438:	f7fe fa90 	bl	800895c <v_L90>
					for(int i = 0; i < 8; i++){
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	3301      	adds	r3, #1
 800a440:	61fb      	str	r3, [r7, #28]
 800a442:	69fb      	ldr	r3, [r7, #28]
 800a444:	2b07      	cmp	r3, #7
 800a446:	ddf7      	ble.n	800a438 <v_test+0x320>
					}
//					v_L45();
					half_sectionVD();
 800a448:	f7fb fce8 	bl	8005e1c <half_sectionVD>
					break;
 800a44c:	e085      	b.n	800a55a <v_test+0x442>
				case 13:
					//----V右135----
					printf("V 135 right .\n");
 800a44e:	4847      	ldr	r0, [pc, #284]	; (800a56c <v_test+0x454>)
 800a450:	f008 fd8a 	bl	8012f68 <puts>
					half_sectionA();
 800a454:	f7fb fbc2 	bl	8005bdc <half_sectionA>
//					v_R45();
					for(int i = 0; i < 4; i++){
 800a458:	2300      	movs	r3, #0
 800a45a:	61bb      	str	r3, [r7, #24]
 800a45c:	e004      	b.n	800a468 <v_test+0x350>
						v_R135();
 800a45e:	f7fe fb69 	bl	8008b34 <v_R135>
					for(int i = 0; i < 4; i++){
 800a462:	69bb      	ldr	r3, [r7, #24]
 800a464:	3301      	adds	r3, #1
 800a466:	61bb      	str	r3, [r7, #24]
 800a468:	69bb      	ldr	r3, [r7, #24]
 800a46a:	2b03      	cmp	r3, #3
 800a46c:	ddf7      	ble.n	800a45e <v_test+0x346>
					}
//					v_R45();
					half_sectionD();
 800a46e:	f7fb fc1b 	bl	8005ca8 <half_sectionD>
					break;
 800a472:	e072      	b.n	800a55a <v_test+0x442>
				case 14:
					//----V左135----
					printf("V 135 left .\n");
 800a474:	483e      	ldr	r0, [pc, #248]	; (800a570 <v_test+0x458>)
 800a476:	f008 fd77 	bl	8012f68 <puts>
					half_sectionA();
 800a47a:	f7fb fbaf 	bl	8005bdc <half_sectionA>
//					v_L45();
					for(int i = 0; i < 4; i++){
 800a47e:	2300      	movs	r3, #0
 800a480:	617b      	str	r3, [r7, #20]
 800a482:	e004      	b.n	800a48e <v_test+0x376>
						v_L135();
 800a484:	f7fe fd94 	bl	8008fb0 <v_L135>
					for(int i = 0; i < 4; i++){
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	3301      	adds	r3, #1
 800a48c:	617b      	str	r3, [r7, #20]
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	2b03      	cmp	r3, #3
 800a492:	ddf7      	ble.n	800a484 <v_test+0x36c>
					}
//					v_L45();
					half_sectionD();
 800a494:	f7fb fc08 	bl	8005ca8 <half_sectionD>
					break;
 800a498:	e05f      	b.n	800a55a <v_test+0x442>
					break;
				case 16:
					break;
				case 17:
					//----V右45D----
					printf("V 45 right .\n");
 800a49a:	4836      	ldr	r0, [pc, #216]	; (800a574 <v_test+0x45c>)
 800a49c:	f008 fd64 	bl	8012f68 <puts>
					MF2.FLAG.V = 1;
 800a4a0:	4a35      	ldr	r2, [pc, #212]	; (800a578 <v_test+0x460>)
 800a4a2:	8813      	ldrh	r3, [r2, #0]
 800a4a4:	f043 0308 	orr.w	r3, r3, #8
 800a4a8:	8013      	strh	r3, [r2, #0]
					half_sectionVA();
 800a4aa:	f7fb fc5d 	bl	8005d68 <half_sectionVA>
					for(int i = 0; i < 1; i++){
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	613b      	str	r3, [r7, #16]
 800a4b2:	e004      	b.n	800a4be <v_test+0x3a6>
//						v_R45D();
						v_R45();
 800a4b4:	f7fd f9da 	bl	800786c <v_R45>
					for(int i = 0; i < 1; i++){
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	613b      	str	r3, [r7, #16]
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	ddf7      	ble.n	800a4b4 <v_test+0x39c>
					}
					half_sectionD();
 800a4c4:	f7fb fbf0 	bl	8005ca8 <half_sectionD>
					break;
 800a4c8:	e047      	b.n	800a55a <v_test+0x442>
				case 18:
					//----V左45D----
					printf("V 45 left .\n");
 800a4ca:	482c      	ldr	r0, [pc, #176]	; (800a57c <v_test+0x464>)
 800a4cc:	f008 fd4c 	bl	8012f68 <puts>
					MF2.FLAG.V = 1;
 800a4d0:	4a29      	ldr	r2, [pc, #164]	; (800a578 <v_test+0x460>)
 800a4d2:	8813      	ldrh	r3, [r2, #0]
 800a4d4:	f043 0308 	orr.w	r3, r3, #8
 800a4d8:	8013      	strh	r3, [r2, #0]
					half_sectionVA();
 800a4da:	f7fb fc45 	bl	8005d68 <half_sectionVA>
					for(int i = 0; i < 1; i++){
 800a4de:	2300      	movs	r3, #0
 800a4e0:	60fb      	str	r3, [r7, #12]
 800a4e2:	e004      	b.n	800a4ee <v_test+0x3d6>
//						v_L45D();
						v_L45();
 800a4e4:	f7fd fbfc 	bl	8007ce0 <v_L45>
					for(int i = 0; i < 1; i++){
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	60fb      	str	r3, [r7, #12]
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	ddf7      	ble.n	800a4e4 <v_test+0x3cc>
					}
					half_sectionD();
 800a4f4:	f7fb fbd8 	bl	8005ca8 <half_sectionD>
					break;
 800a4f8:	e02f      	b.n	800a55a <v_test+0x442>
				case 19:
					//----V右135D----
					printf("V 135 right .\n");
 800a4fa:	481c      	ldr	r0, [pc, #112]	; (800a56c <v_test+0x454>)
 800a4fc:	f008 fd34 	bl	8012f68 <puts>
					MF2.FLAG.V = 1;
 800a500:	4a1d      	ldr	r2, [pc, #116]	; (800a578 <v_test+0x460>)
 800a502:	8813      	ldrh	r3, [r2, #0]
 800a504:	f043 0308 	orr.w	r3, r3, #8
 800a508:	8013      	strh	r3, [r2, #0]
					half_sectionVA();
 800a50a:	f7fb fc2d 	bl	8005d68 <half_sectionVA>
					for(int i = 0; i < 1; i++){
 800a50e:	2300      	movs	r3, #0
 800a510:	60bb      	str	r3, [r7, #8]
 800a512:	e004      	b.n	800a51e <v_test+0x406>
//						v_R135D();
						v_R135();
 800a514:	f7fe fb0e 	bl	8008b34 <v_R135>
					for(int i = 0; i < 1; i++){
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	3301      	adds	r3, #1
 800a51c:	60bb      	str	r3, [r7, #8]
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	2b00      	cmp	r3, #0
 800a522:	ddf7      	ble.n	800a514 <v_test+0x3fc>
					}
					half_sectionD();
 800a524:	f7fb fbc0 	bl	8005ca8 <half_sectionD>
					break;
 800a528:	e017      	b.n	800a55a <v_test+0x442>
				case 20:
					//----V左135D----
					printf("V 135 left .\n");
 800a52a:	4811      	ldr	r0, [pc, #68]	; (800a570 <v_test+0x458>)
 800a52c:	f008 fd1c 	bl	8012f68 <puts>
					MF2.FLAG.V = 1;
 800a530:	4a11      	ldr	r2, [pc, #68]	; (800a578 <v_test+0x460>)
 800a532:	8813      	ldrh	r3, [r2, #0]
 800a534:	f043 0308 	orr.w	r3, r3, #8
 800a538:	8013      	strh	r3, [r2, #0]
					half_sectionVA();
 800a53a:	f7fb fc15 	bl	8005d68 <half_sectionVA>
					for(int i = 0; i < 1; i++){
 800a53e:	2300      	movs	r3, #0
 800a540:	607b      	str	r3, [r7, #4]
 800a542:	e004      	b.n	800a54e <v_test+0x436>
//						v_L135D();
						v_L135();
 800a544:	f7fe fd34 	bl	8008fb0 <v_L135>
					for(int i = 0; i < 1; i++){
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	3301      	adds	r3, #1
 800a54c:	607b      	str	r3, [r7, #4]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2b00      	cmp	r3, #0
 800a552:	ddf7      	ble.n	800a544 <v_test+0x42c>
					}
					half_sectionD();
 800a554:	f7fb fba8 	bl	8005ca8 <half_sectionD>
					break;
 800a558:	bf00      	nop
			  }
			  full_led_write1(RED);
 800a55a:	2001      	movs	r0, #1
 800a55c:	f007 feac 	bl	80122b8 <full_led_write1>
			  dist_l = 0;
 800a560:	4b07      	ldr	r3, [pc, #28]	; (800a580 <v_test+0x468>)
 800a562:	f04f 0200 	mov.w	r2, #0
 800a566:	601a      	str	r2, [r3, #0]
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a568:	e5e1      	b.n	800a12e <v_test+0x16>
 800a56a:	bf00      	nop
 800a56c:	08014260 	.word	0x08014260
 800a570:	08014270 	.word	0x08014270
 800a574:	08014228 	.word	0x08014228
 800a578:	20000fa4 	.word	0x20000fa4
 800a57c:	08014238 	.word	0x08014238
 800a580:	20001644 	.word	0x20001644

0800a584 <pass_test>:
//pass_test
// pass圧縮走行テスト
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_test(void){
 800a584:	b580      	push	{r7, lr}
 800a586:	b082      	sub	sp, #8
 800a588:	af00      	add	r7, sp, #0

	int mode = 0;
 800a58a:	2300      	movs	r3, #0
 800a58c:	607b      	str	r3, [r7, #4]
	printf("Test pass Run, Mode : %d\n", mode);
 800a58e:	6879      	ldr	r1, [r7, #4]
 800a590:	48a0      	ldr	r0, [pc, #640]	; (800a814 <pass_test+0x290>)
 800a592:	f008 fc75 	bl	8012e80 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	b2db      	uxtb	r3, r3
 800a59a:	f003 0301 	and.w	r3, r3, #1
 800a59e:	b2d8      	uxtb	r0, r3
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	b2db      	uxtb	r3, r3
 800a5a4:	f003 0302 	and.w	r3, r3, #2
 800a5a8:	b2d9      	uxtb	r1, r3
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	b2db      	uxtb	r3, r3
 800a5ae:	f003 0304 	and.w	r3, r3, #4
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	f007 fe45 	bl	8012244 <led_write>
		  if(dist_r >= 20){
 800a5ba:	4b97      	ldr	r3, [pc, #604]	; (800a818 <pass_test+0x294>)
 800a5bc:	edd3 7a00 	vldr	s15, [r3]
 800a5c0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800a5c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a5c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5cc:	db0f      	blt.n	800a5ee <pass_test+0x6a>
			  mode++;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a5d4:	4b90      	ldr	r3, [pc, #576]	; (800a818 <pass_test+0x294>)
 800a5d6:	f04f 0200 	mov.w	r2, #0
 800a5da:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2b07      	cmp	r3, #7
 800a5e0:	dd01      	ble.n	800a5e6 <pass_test+0x62>
				  mode = 0;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a5e6:	6879      	ldr	r1, [r7, #4]
 800a5e8:	488c      	ldr	r0, [pc, #560]	; (800a81c <pass_test+0x298>)
 800a5ea:	f008 fc49 	bl	8012e80 <iprintf>
		  }
		  if(dist_r <= -20){
 800a5ee:	4b8a      	ldr	r3, [pc, #552]	; (800a818 <pass_test+0x294>)
 800a5f0:	edd3 7a00 	vldr	s15, [r3]
 800a5f4:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800a5f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a5fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a600:	d80f      	bhi.n	800a622 <pass_test+0x9e>
			  mode--;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	3b01      	subs	r3, #1
 800a606:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a608:	4b83      	ldr	r3, [pc, #524]	; (800a818 <pass_test+0x294>)
 800a60a:	f04f 0200 	mov.w	r2, #0
 800a60e:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2b00      	cmp	r3, #0
 800a614:	da01      	bge.n	800a61a <pass_test+0x96>
				  mode = 7;
 800a616:	2307      	movs	r3, #7
 800a618:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a61a:	6879      	ldr	r1, [r7, #4]
 800a61c:	487f      	ldr	r0, [pc, #508]	; (800a81c <pass_test+0x298>)
 800a61e:	f008 fc2f 	bl	8012e80 <iprintf>
		  }
		  if(dist_l <= -20){
 800a622:	4b7f      	ldr	r3, [pc, #508]	; (800a820 <pass_test+0x29c>)
 800a624:	edd3 7a00 	vldr	s15, [r3]
 800a628:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800a62c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a634:	f200 8222 	bhi.w	800aa7c <pass_test+0x4f8>
			  dist_l = 0;
 800a638:	4b79      	ldr	r3, [pc, #484]	; (800a820 <pass_test+0x29c>)
 800a63a:	f04f 0200 	mov.w	r2, #0
 800a63e:	601a      	str	r2, [r3, #0]
			  drive_ready();
 800a640:	f7fa fb14 	bl	8004c6c <drive_ready>
			  MF2.FLAG.V = 0;
 800a644:	4a77      	ldr	r2, [pc, #476]	; (800a824 <pass_test+0x2a0>)
 800a646:	8813      	ldrh	r3, [r2, #0]
 800a648:	f36f 03c3 	bfc	r3, #3, #1
 800a64c:	8013      	strh	r3, [r2, #0]

			  switch(mode){
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2b07      	cmp	r3, #7
 800a652:	f200 820f 	bhi.w	800aa74 <pass_test+0x4f0>
 800a656:	a201      	add	r2, pc, #4	; (adr r2, 800a65c <pass_test+0xd8>)
 800a658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a65c:	0800a67d 	.word	0x0800a67d
 800a660:	0800a705 	.word	0x0800a705
 800a664:	0800a78d 	.word	0x0800a78d
 800a668:	0800a855 	.word	0x0800a855
 800a66c:	0800a8dd 	.word	0x0800a8dd
 800a670:	0800a965 	.word	0x0800a965
 800a674:	0800aa75 	.word	0x0800aa75
 800a678:	0800a9ed 	.word	0x0800a9ed
				case 0:
					//----a一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 800a67c:	486a      	ldr	r0, [pc, #424]	; (800a828 <pass_test+0x2a4>)
 800a67e:	f008 fc73 	bl	8012f68 <puts>

					MF.FLAG.SCND = 0;
 800a682:	4a6a      	ldr	r2, [pc, #424]	; (800a82c <pass_test+0x2a8>)
 800a684:	8813      	ldrh	r3, [r2, #0]
 800a686:	f36f 1345 	bfc	r3, #5, #1
 800a68a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a68c:	4a67      	ldr	r2, [pc, #412]	; (800a82c <pass_test+0x2a8>)
 800a68e:	8813      	ldrh	r3, [r2, #0]
 800a690:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a694:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800a696:	4a65      	ldr	r2, [pc, #404]	; (800a82c <pass_test+0x2a8>)
 800a698:	8813      	ldrh	r3, [r2, #0]
 800a69a:	f36f 238a 	bfc	r3, #10, #1
 800a69e:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800a6a0:	4b63      	ldr	r3, [pc, #396]	; (800a830 <pass_test+0x2ac>)
 800a6a2:	2202      	movs	r2, #2
 800a6a4:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a6a6:	4b63      	ldr	r3, [pc, #396]	; (800a834 <pass_test+0x2b0>)
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a6ac:	4b62      	ldr	r3, [pc, #392]	; (800a838 <pass_test+0x2b4>)
 800a6ae:	2202      	movs	r2, #2
 800a6b0:	701a      	strb	r2, [r3, #0]
					accel_hs = 4000;
 800a6b2:	4b62      	ldr	r3, [pc, #392]	; (800a83c <pass_test+0x2b8>)
 800a6b4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800a6b8:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800a6ba:	4b61      	ldr	r3, [pc, #388]	; (800a840 <pass_test+0x2bc>)
 800a6bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a6c0:	801a      	strh	r2, [r3, #0]
					start_mode = 0;
 800a6c2:	4b5c      	ldr	r3, [pc, #368]	; (800a834 <pass_test+0x2b0>)
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800a6c8:	4b5e      	ldr	r3, [pc, #376]	; (800a844 <pass_test+0x2c0>)
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a6ce:	4b5e      	ldr	r3, [pc, #376]	; (800a848 <pass_test+0x2c4>)
 800a6d0:	2208      	movs	r2, #8
 800a6d2:	701a      	strb	r2, [r3, #0]

					get_base();
 800a6d4:	f007 fd5e 	bl	8012194 <get_base>

					searchC();
 800a6d8:	f004 fd86 	bl	800f1e8 <searchC>
					HAL_Delay(2000);
 800a6dc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a6e0:	f7f6 fc9c 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a6e4:	4b58      	ldr	r3, [pc, #352]	; (800a848 <pass_test+0x2c4>)
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	701a      	strb	r2, [r3, #0]
 800a6ea:	4b57      	ldr	r3, [pc, #348]	; (800a848 <pass_test+0x2c4>)
 800a6ec:	781a      	ldrb	r2, [r3, #0]
 800a6ee:	4b55      	ldr	r3, [pc, #340]	; (800a844 <pass_test+0x2c0>)
 800a6f0:	701a      	strb	r2, [r3, #0]
					searchC();
 800a6f2:	f004 fd79 	bl	800f1e8 <searchC>

					goal_x = GOAL_X;
 800a6f6:	4b53      	ldr	r3, [pc, #332]	; (800a844 <pass_test+0x2c0>)
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a6fc:	4b52      	ldr	r3, [pc, #328]	; (800a848 <pass_test+0x2c4>)
 800a6fe:	2208      	movs	r2, #8
 800a700:	701a      	strb	r2, [r3, #0]
					break;
 800a702:	e1b7      	b.n	800aa74 <pass_test+0x4f0>
				case 1:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース Middle Speed----
					printf("pass press 3-2.\n");
 800a704:	4851      	ldr	r0, [pc, #324]	; (800a84c <pass_test+0x2c8>)
 800a706:	f008 fc2f 	bl	8012f68 <puts>
					MF.FLAG.SCND = 1;
 800a70a:	4a48      	ldr	r2, [pc, #288]	; (800a82c <pass_test+0x2a8>)
 800a70c:	8813      	ldrh	r3, [r2, #0]
 800a70e:	f043 0320 	orr.w	r3, r3, #32
 800a712:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a714:	4a45      	ldr	r2, [pc, #276]	; (800a82c <pass_test+0x2a8>)
 800a716:	8813      	ldrh	r3, [r2, #0]
 800a718:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a71c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a71e:	4a43      	ldr	r2, [pc, #268]	; (800a82c <pass_test+0x2a8>)
 800a720:	8813      	ldrh	r3, [r2, #0]
 800a722:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a726:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800a728:	4b41      	ldr	r3, [pc, #260]	; (800a830 <pass_test+0x2ac>)
 800a72a:	2202      	movs	r2, #2
 800a72c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a72e:	4b41      	ldr	r3, [pc, #260]	; (800a834 <pass_test+0x2b0>)
 800a730:	2200      	movs	r2, #0
 800a732:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a734:	4b40      	ldr	r3, [pc, #256]	; (800a838 <pass_test+0x2b4>)
 800a736:	2202      	movs	r2, #2
 800a738:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a73a:	4b40      	ldr	r3, [pc, #256]	; (800a83c <pass_test+0x2b8>)
 800a73c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a740:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a742:	4b3f      	ldr	r3, [pc, #252]	; (800a840 <pass_test+0x2bc>)
 800a744:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a748:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800a74a:	4b41      	ldr	r3, [pc, #260]	; (800a850 <pass_test+0x2cc>)
 800a74c:	2203      	movs	r2, #3
 800a74e:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800a750:	4b3c      	ldr	r3, [pc, #240]	; (800a844 <pass_test+0x2c0>)
 800a752:	2200      	movs	r2, #0
 800a754:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a756:	4b3c      	ldr	r3, [pc, #240]	; (800a848 <pass_test+0x2c4>)
 800a758:	2208      	movs	r2, #8
 800a75a:	701a      	strb	r2, [r3, #0]

					get_base();
 800a75c:	f007 fd1a 	bl	8012194 <get_base>

					searchF3();
 800a760:	f005 f9bc 	bl	800fadc <searchF3>
					HAL_Delay(2000);
 800a764:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a768:	f7f6 fc58 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a76c:	4b36      	ldr	r3, [pc, #216]	; (800a848 <pass_test+0x2c4>)
 800a76e:	2200      	movs	r2, #0
 800a770:	701a      	strb	r2, [r3, #0]
 800a772:	4b35      	ldr	r3, [pc, #212]	; (800a848 <pass_test+0x2c4>)
 800a774:	781a      	ldrb	r2, [r3, #0]
 800a776:	4b33      	ldr	r3, [pc, #204]	; (800a844 <pass_test+0x2c0>)
 800a778:	701a      	strb	r2, [r3, #0]
					searchF3();
 800a77a:	f005 f9af 	bl	800fadc <searchF3>

					goal_x = GOAL_X;
 800a77e:	4b31      	ldr	r3, [pc, #196]	; (800a844 <pass_test+0x2c0>)
 800a780:	2200      	movs	r2, #0
 800a782:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a784:	4b30      	ldr	r3, [pc, #192]	; (800a848 <pass_test+0x2c4>)
 800a786:	2208      	movs	r2, #8
 800a788:	701a      	strb	r2, [r3, #0]
					break;
 800a78a:	e173      	b.n	800aa74 <pass_test+0x4f0>
				case 2:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-2.\n");
 800a78c:	482f      	ldr	r0, [pc, #188]	; (800a84c <pass_test+0x2c8>)
 800a78e:	f008 fbeb 	bl	8012f68 <puts>
					MF.FLAG.SCND = 1;
 800a792:	4a26      	ldr	r2, [pc, #152]	; (800a82c <pass_test+0x2a8>)
 800a794:	8813      	ldrh	r3, [r2, #0]
 800a796:	f043 0320 	orr.w	r3, r3, #32
 800a79a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a79c:	4a23      	ldr	r2, [pc, #140]	; (800a82c <pass_test+0x2a8>)
 800a79e:	8813      	ldrh	r3, [r2, #0]
 800a7a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a7a4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a7a6:	4a21      	ldr	r2, [pc, #132]	; (800a82c <pass_test+0x2a8>)
 800a7a8:	8813      	ldrh	r3, [r2, #0]
 800a7aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a7ae:	8013      	strh	r3, [r2, #0]
					run_mode = 3;
 800a7b0:	4b1f      	ldr	r3, [pc, #124]	; (800a830 <pass_test+0x2ac>)
 800a7b2:	2203      	movs	r2, #3
 800a7b4:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a7b6:	4b1f      	ldr	r3, [pc, #124]	; (800a834 <pass_test+0x2b0>)
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a7bc:	4b1e      	ldr	r3, [pc, #120]	; (800a838 <pass_test+0x2b4>)
 800a7be:	2202      	movs	r2, #2
 800a7c0:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a7c2:	4b1e      	ldr	r3, [pc, #120]	; (800a83c <pass_test+0x2b8>)
 800a7c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7c8:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800a7ca:	4b1d      	ldr	r3, [pc, #116]	; (800a840 <pass_test+0x2bc>)
 800a7cc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a7d0:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800a7d2:	4b1f      	ldr	r3, [pc, #124]	; (800a850 <pass_test+0x2cc>)
 800a7d4:	2203      	movs	r2, #3
 800a7d6:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800a7d8:	4b1a      	ldr	r3, [pc, #104]	; (800a844 <pass_test+0x2c0>)
 800a7da:	2200      	movs	r2, #0
 800a7dc:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a7de:	4b1a      	ldr	r3, [pc, #104]	; (800a848 <pass_test+0x2c4>)
 800a7e0:	2208      	movs	r2, #8
 800a7e2:	701a      	strb	r2, [r3, #0]

					get_base();
 800a7e4:	f007 fcd6 	bl	8012194 <get_base>

					searchF3();
 800a7e8:	f005 f978 	bl	800fadc <searchF3>
					HAL_Delay(2000);
 800a7ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a7f0:	f7f6 fc14 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a7f4:	4b14      	ldr	r3, [pc, #80]	; (800a848 <pass_test+0x2c4>)
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	701a      	strb	r2, [r3, #0]
 800a7fa:	4b13      	ldr	r3, [pc, #76]	; (800a848 <pass_test+0x2c4>)
 800a7fc:	781a      	ldrb	r2, [r3, #0]
 800a7fe:	4b11      	ldr	r3, [pc, #68]	; (800a844 <pass_test+0x2c0>)
 800a800:	701a      	strb	r2, [r3, #0]
					searchF3();
 800a802:	f005 f96b 	bl	800fadc <searchF3>

					goal_x = GOAL_X;
 800a806:	4b0f      	ldr	r3, [pc, #60]	; (800a844 <pass_test+0x2c0>)
 800a808:	2200      	movs	r2, #0
 800a80a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a80c:	4b0e      	ldr	r3, [pc, #56]	; (800a848 <pass_test+0x2c4>)
 800a80e:	2208      	movs	r2, #8
 800a810:	701a      	strb	r2, [r3, #0]
					break;
 800a812:	e12f      	b.n	800aa74 <pass_test+0x4f0>
 800a814:	08014280 	.word	0x08014280
 800a818:	20000b2c 	.word	0x20000b2c
 800a81c:	080140bc 	.word	0x080140bc
 800a820:	20001644 	.word	0x20001644
 800a824:	20000fa4 	.word	0x20000fa4
 800a828:	0801429c 	.word	0x0801429c
 800a82c:	20000fa8 	.word	0x20000fa8
 800a830:	20000456 	.word	0x20000456
 800a834:	20001648 	.word	0x20001648
 800a838:	20000c31 	.word	0x20000c31
 800a83c:	20000454 	.word	0x20000454
 800a840:	20000ffc 	.word	0x20000ffc
 800a844:	20000c30 	.word	0x20000c30
 800a848:	20000b8c 	.word	0x20000b8c
 800a84c:	080142b0 	.word	0x080142b0
 800a850:	20000457 	.word	0x20000457
				case 3:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High High Speed----
					printf("pass press 3-2.\n");
 800a854:	488a      	ldr	r0, [pc, #552]	; (800aa80 <pass_test+0x4fc>)
 800a856:	f008 fb87 	bl	8012f68 <puts>
					MF.FLAG.SCND = 1;
 800a85a:	4a8a      	ldr	r2, [pc, #552]	; (800aa84 <pass_test+0x500>)
 800a85c:	8813      	ldrh	r3, [r2, #0]
 800a85e:	f043 0320 	orr.w	r3, r3, #32
 800a862:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a864:	4a87      	ldr	r2, [pc, #540]	; (800aa84 <pass_test+0x500>)
 800a866:	8813      	ldrh	r3, [r2, #0]
 800a868:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a86c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a86e:	4a85      	ldr	r2, [pc, #532]	; (800aa84 <pass_test+0x500>)
 800a870:	8813      	ldrh	r3, [r2, #0]
 800a872:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a876:	8013      	strh	r3, [r2, #0]
					run_mode = 4;
 800a878:	4b83      	ldr	r3, [pc, #524]	; (800aa88 <pass_test+0x504>)
 800a87a:	2204      	movs	r2, #4
 800a87c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a87e:	4b83      	ldr	r3, [pc, #524]	; (800aa8c <pass_test+0x508>)
 800a880:	2200      	movs	r2, #0
 800a882:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a884:	4b82      	ldr	r3, [pc, #520]	; (800aa90 <pass_test+0x50c>)
 800a886:	2202      	movs	r2, #2
 800a888:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800a88a:	4b82      	ldr	r3, [pc, #520]	; (800aa94 <pass_test+0x510>)
 800a88c:	f242 7210 	movw	r2, #10000	; 0x2710
 800a890:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800a892:	4b81      	ldr	r3, [pc, #516]	; (800aa98 <pass_test+0x514>)
 800a894:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a898:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800a89a:	4b80      	ldr	r3, [pc, #512]	; (800aa9c <pass_test+0x518>)
 800a89c:	2203      	movs	r2, #3
 800a89e:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800a8a0:	4b7f      	ldr	r3, [pc, #508]	; (800aaa0 <pass_test+0x51c>)
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a8a6:	4b7f      	ldr	r3, [pc, #508]	; (800aaa4 <pass_test+0x520>)
 800a8a8:	2208      	movs	r2, #8
 800a8aa:	701a      	strb	r2, [r3, #0]

					get_base();
 800a8ac:	f007 fc72 	bl	8012194 <get_base>

					searchF3();
 800a8b0:	f005 f914 	bl	800fadc <searchF3>
					HAL_Delay(2000);
 800a8b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a8b8:	f7f6 fbb0 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a8bc:	4b79      	ldr	r3, [pc, #484]	; (800aaa4 <pass_test+0x520>)
 800a8be:	2200      	movs	r2, #0
 800a8c0:	701a      	strb	r2, [r3, #0]
 800a8c2:	4b78      	ldr	r3, [pc, #480]	; (800aaa4 <pass_test+0x520>)
 800a8c4:	781a      	ldrb	r2, [r3, #0]
 800a8c6:	4b76      	ldr	r3, [pc, #472]	; (800aaa0 <pass_test+0x51c>)
 800a8c8:	701a      	strb	r2, [r3, #0]
					searchF3();
 800a8ca:	f005 f907 	bl	800fadc <searchF3>

					goal_x = GOAL_X;
 800a8ce:	4b74      	ldr	r3, [pc, #464]	; (800aaa0 <pass_test+0x51c>)
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a8d4:	4b73      	ldr	r3, [pc, #460]	; (800aaa4 <pass_test+0x520>)
 800a8d6:	2208      	movs	r2, #8
 800a8d8:	701a      	strb	r2, [r3, #0]
					break;
 800a8da:	e0cb      	b.n	800aa74 <pass_test+0x4f0>
				case 4:
					//----a直線と大回り圧縮と斜め Middle Speedｰｰｰｰ
					printf("pass press 4.\n");
 800a8dc:	4872      	ldr	r0, [pc, #456]	; (800aaa8 <pass_test+0x524>)
 800a8de:	f008 fb43 	bl	8012f68 <puts>
					MF.FLAG.SCND = 1;
 800a8e2:	4a68      	ldr	r2, [pc, #416]	; (800aa84 <pass_test+0x500>)
 800a8e4:	8813      	ldrh	r3, [r2, #0]
 800a8e6:	f043 0320 	orr.w	r3, r3, #32
 800a8ea:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a8ec:	4a65      	ldr	r2, [pc, #404]	; (800aa84 <pass_test+0x500>)
 800a8ee:	8813      	ldrh	r3, [r2, #0]
 800a8f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a8f4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a8f6:	4a63      	ldr	r2, [pc, #396]	; (800aa84 <pass_test+0x500>)
 800a8f8:	8813      	ldrh	r3, [r2, #0]
 800a8fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a8fe:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800a900:	4b61      	ldr	r3, [pc, #388]	; (800aa88 <pass_test+0x504>)
 800a902:	2202      	movs	r2, #2
 800a904:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a906:	4b61      	ldr	r3, [pc, #388]	; (800aa8c <pass_test+0x508>)
 800a908:	2200      	movs	r2, #0
 800a90a:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a90c:	4b60      	ldr	r3, [pc, #384]	; (800aa90 <pass_test+0x50c>)
 800a90e:	2202      	movs	r2, #2
 800a910:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a912:	4b60      	ldr	r3, [pc, #384]	; (800aa94 <pass_test+0x510>)
 800a914:	f241 3288 	movw	r2, #5000	; 0x1388
 800a918:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a91a:	4b5f      	ldr	r3, [pc, #380]	; (800aa98 <pass_test+0x514>)
 800a91c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a920:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800a922:	4b5e      	ldr	r3, [pc, #376]	; (800aa9c <pass_test+0x518>)
 800a924:	2204      	movs	r2, #4
 800a926:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800a928:	4b5d      	ldr	r3, [pc, #372]	; (800aaa0 <pass_test+0x51c>)
 800a92a:	2200      	movs	r2, #0
 800a92c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a92e:	4b5d      	ldr	r3, [pc, #372]	; (800aaa4 <pass_test+0x520>)
 800a930:	2208      	movs	r2, #8
 800a932:	701a      	strb	r2, [r3, #0]

					get_base();
 800a934:	f007 fc2e 	bl	8012194 <get_base>

					searchF4();
 800a938:	f005 f9ac 	bl	800fc94 <searchF4>
					HAL_Delay(2000);
 800a93c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a940:	f7f6 fb6c 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a944:	4b57      	ldr	r3, [pc, #348]	; (800aaa4 <pass_test+0x520>)
 800a946:	2200      	movs	r2, #0
 800a948:	701a      	strb	r2, [r3, #0]
 800a94a:	4b56      	ldr	r3, [pc, #344]	; (800aaa4 <pass_test+0x520>)
 800a94c:	781a      	ldrb	r2, [r3, #0]
 800a94e:	4b54      	ldr	r3, [pc, #336]	; (800aaa0 <pass_test+0x51c>)
 800a950:	701a      	strb	r2, [r3, #0]
					searchF4();
 800a952:	f005 f99f 	bl	800fc94 <searchF4>

					goal_x = GOAL_X;
 800a956:	4b52      	ldr	r3, [pc, #328]	; (800aaa0 <pass_test+0x51c>)
 800a958:	2200      	movs	r2, #0
 800a95a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a95c:	4b51      	ldr	r3, [pc, #324]	; (800aaa4 <pass_test+0x520>)
 800a95e:	2208      	movs	r2, #8
 800a960:	701a      	strb	r2, [r3, #0]
					break;
 800a962:	e087      	b.n	800aa74 <pass_test+0x4f0>
				case 5:
					//----a直線と大回り圧縮と斜め High Speedｰｰｰｰ
					printf("pass press 4.\n");
 800a964:	4850      	ldr	r0, [pc, #320]	; (800aaa8 <pass_test+0x524>)
 800a966:	f008 faff 	bl	8012f68 <puts>
					MF.FLAG.SCND = 1;
 800a96a:	4a46      	ldr	r2, [pc, #280]	; (800aa84 <pass_test+0x500>)
 800a96c:	8813      	ldrh	r3, [r2, #0]
 800a96e:	f043 0320 	orr.w	r3, r3, #32
 800a972:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a974:	4a43      	ldr	r2, [pc, #268]	; (800aa84 <pass_test+0x500>)
 800a976:	8813      	ldrh	r3, [r2, #0]
 800a978:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a97c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a97e:	4a41      	ldr	r2, [pc, #260]	; (800aa84 <pass_test+0x500>)
 800a980:	8813      	ldrh	r3, [r2, #0]
 800a982:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a986:	8013      	strh	r3, [r2, #0]
					run_mode = 3;
 800a988:	4b3f      	ldr	r3, [pc, #252]	; (800aa88 <pass_test+0x504>)
 800a98a:	2203      	movs	r2, #3
 800a98c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a98e:	4b3f      	ldr	r3, [pc, #252]	; (800aa8c <pass_test+0x508>)
 800a990:	2200      	movs	r2, #0
 800a992:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a994:	4b3e      	ldr	r3, [pc, #248]	; (800aa90 <pass_test+0x50c>)
 800a996:	2202      	movs	r2, #2
 800a998:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a99a:	4b3e      	ldr	r3, [pc, #248]	; (800aa94 <pass_test+0x510>)
 800a99c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9a0:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800a9a2:	4b3d      	ldr	r3, [pc, #244]	; (800aa98 <pass_test+0x514>)
 800a9a4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a9a8:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800a9aa:	4b3c      	ldr	r3, [pc, #240]	; (800aa9c <pass_test+0x518>)
 800a9ac:	2204      	movs	r2, #4
 800a9ae:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800a9b0:	4b3b      	ldr	r3, [pc, #236]	; (800aaa0 <pass_test+0x51c>)
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a9b6:	4b3b      	ldr	r3, [pc, #236]	; (800aaa4 <pass_test+0x520>)
 800a9b8:	2208      	movs	r2, #8
 800a9ba:	701a      	strb	r2, [r3, #0]

					get_base();
 800a9bc:	f007 fbea 	bl	8012194 <get_base>

					searchF4();
 800a9c0:	f005 f968 	bl	800fc94 <searchF4>
					HAL_Delay(2000);
 800a9c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a9c8:	f7f6 fb28 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a9cc:	4b35      	ldr	r3, [pc, #212]	; (800aaa4 <pass_test+0x520>)
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	701a      	strb	r2, [r3, #0]
 800a9d2:	4b34      	ldr	r3, [pc, #208]	; (800aaa4 <pass_test+0x520>)
 800a9d4:	781a      	ldrb	r2, [r3, #0]
 800a9d6:	4b32      	ldr	r3, [pc, #200]	; (800aaa0 <pass_test+0x51c>)
 800a9d8:	701a      	strb	r2, [r3, #0]
					searchF4();
 800a9da:	f005 f95b 	bl	800fc94 <searchF4>

					goal_x = GOAL_X;
 800a9de:	4b30      	ldr	r3, [pc, #192]	; (800aaa0 <pass_test+0x51c>)
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a9e4:	4b2f      	ldr	r3, [pc, #188]	; (800aaa4 <pass_test+0x520>)
 800a9e6:	2208      	movs	r2, #8
 800a9e8:	701a      	strb	r2, [r3, #0]
					break;
 800a9ea:	e043      	b.n	800aa74 <pass_test+0x4f0>
				case 7:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-4.\n");
 800a9ec:	482f      	ldr	r0, [pc, #188]	; (800aaac <pass_test+0x528>)
 800a9ee:	f008 fabb 	bl	8012f68 <puts>
					MF.FLAG.SCND = 1;
 800a9f2:	4a24      	ldr	r2, [pc, #144]	; (800aa84 <pass_test+0x500>)
 800a9f4:	8813      	ldrh	r3, [r2, #0]
 800a9f6:	f043 0320 	orr.w	r3, r3, #32
 800a9fa:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a9fc:	4a21      	ldr	r2, [pc, #132]	; (800aa84 <pass_test+0x500>)
 800a9fe:	8813      	ldrh	r3, [r2, #0]
 800aa00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aa04:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800aa06:	4a1f      	ldr	r2, [pc, #124]	; (800aa84 <pass_test+0x500>)
 800aa08:	8813      	ldrh	r3, [r2, #0]
 800aa0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800aa0e:	8013      	strh	r3, [r2, #0]
					run_mode = 5;
 800aa10:	4b1d      	ldr	r3, [pc, #116]	; (800aa88 <pass_test+0x504>)
 800aa12:	2205      	movs	r2, #5
 800aa14:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800aa16:	4b1d      	ldr	r3, [pc, #116]	; (800aa8c <pass_test+0x508>)
 800aa18:	2200      	movs	r2, #0
 800aa1a:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800aa1c:	4b1c      	ldr	r3, [pc, #112]	; (800aa90 <pass_test+0x50c>)
 800aa1e:	2202      	movs	r2, #2
 800aa20:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800aa22:	4b1c      	ldr	r3, [pc, #112]	; (800aa94 <pass_test+0x510>)
 800aa24:	f242 7210 	movw	r2, #10000	; 0x2710
 800aa28:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800aa2a:	4b1b      	ldr	r3, [pc, #108]	; (800aa98 <pass_test+0x514>)
 800aa2c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800aa30:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800aa32:	4b1a      	ldr	r3, [pc, #104]	; (800aa9c <pass_test+0x518>)
 800aa34:	2203      	movs	r2, #3
 800aa36:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800aa38:	4b19      	ldr	r3, [pc, #100]	; (800aaa0 <pass_test+0x51c>)
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800aa3e:	4b19      	ldr	r3, [pc, #100]	; (800aaa4 <pass_test+0x520>)
 800aa40:	2208      	movs	r2, #8
 800aa42:	701a      	strb	r2, [r3, #0]

					get_base();
 800aa44:	f007 fba6 	bl	8012194 <get_base>

					searchF3();
 800aa48:	f005 f848 	bl	800fadc <searchF3>
					HAL_Delay(2000);
 800aa4c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800aa50:	f7f6 fae4 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800aa54:	4b13      	ldr	r3, [pc, #76]	; (800aaa4 <pass_test+0x520>)
 800aa56:	2200      	movs	r2, #0
 800aa58:	701a      	strb	r2, [r3, #0]
 800aa5a:	4b12      	ldr	r3, [pc, #72]	; (800aaa4 <pass_test+0x520>)
 800aa5c:	781a      	ldrb	r2, [r3, #0]
 800aa5e:	4b10      	ldr	r3, [pc, #64]	; (800aaa0 <pass_test+0x51c>)
 800aa60:	701a      	strb	r2, [r3, #0]
					searchF3();
 800aa62:	f005 f83b 	bl	800fadc <searchF3>

					goal_x = GOAL_X;
 800aa66:	4b0e      	ldr	r3, [pc, #56]	; (800aaa0 <pass_test+0x51c>)
 800aa68:	2200      	movs	r2, #0
 800aa6a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800aa6c:	4b0d      	ldr	r3, [pc, #52]	; (800aaa4 <pass_test+0x520>)
 800aa6e:	2208      	movs	r2, #8
 800aa70:	701a      	strb	r2, [r3, #0]
					break;
 800aa72:	bf00      	nop
			  }
			  dist_l = 0;
 800aa74:	4b0e      	ldr	r3, [pc, #56]	; (800aab0 <pass_test+0x52c>)
 800aa76:	f04f 0200 	mov.w	r2, #0
 800aa7a:	601a      	str	r2, [r3, #0]
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800aa7c:	e58b      	b.n	800a596 <pass_test+0x12>
 800aa7e:	bf00      	nop
 800aa80:	080142b0 	.word	0x080142b0
 800aa84:	20000fa8 	.word	0x20000fa8
 800aa88:	20000456 	.word	0x20000456
 800aa8c:	20001648 	.word	0x20001648
 800aa90:	20000c31 	.word	0x20000c31
 800aa94:	20000454 	.word	0x20000454
 800aa98:	20000ffc 	.word	0x20000ffc
 800aa9c:	20000457 	.word	0x20000457
 800aaa0:	20000c30 	.word	0x20000c30
 800aaa4:	20000b8c 	.word	0x20000b8c
 800aaa8:	080142c0 	.word	0x080142c0
 800aaac:	080142d0 	.word	0x080142d0
 800aab0:	20001644 	.word	0x20001644

0800aab4 <goal_test>:
//goal_test
// a複数マスgoal走行テスト
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void goal_test(void){
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b082      	sub	sp, #8
 800aab8:	af00      	add	r7, sp, #0

	int mode = 0;
 800aaba:	2300      	movs	r3, #0
 800aabc:	607b      	str	r3, [r7, #4]
	printf("Test goal Run, Mode : %d\n", mode);
 800aabe:	6879      	ldr	r1, [r7, #4]
 800aac0:	48a8      	ldr	r0, [pc, #672]	; (800ad64 <goal_test+0x2b0>)
 800aac2:	f008 f9dd 	bl	8012e80 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	f003 0301 	and.w	r3, r3, #1
 800aace:	b2d8      	uxtb	r0, r3
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	b2db      	uxtb	r3, r3
 800aad4:	f003 0302 	and.w	r3, r3, #2
 800aad8:	b2d9      	uxtb	r1, r3
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	f003 0304 	and.w	r3, r3, #4
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	461a      	mov	r2, r3
 800aae6:	f007 fbad 	bl	8012244 <led_write>
		  if(dist_r >= 20){
 800aaea:	4b9f      	ldr	r3, [pc, #636]	; (800ad68 <goal_test+0x2b4>)
 800aaec:	edd3 7a00 	vldr	s15, [r3]
 800aaf0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800aaf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aaf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aafc:	db0f      	blt.n	800ab1e <goal_test+0x6a>
			  mode++;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	3301      	adds	r3, #1
 800ab02:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800ab04:	4b98      	ldr	r3, [pc, #608]	; (800ad68 <goal_test+0x2b4>)
 800ab06:	f04f 0200 	mov.w	r2, #0
 800ab0a:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2b07      	cmp	r3, #7
 800ab10:	dd01      	ble.n	800ab16 <goal_test+0x62>
				  mode = 0;
 800ab12:	2300      	movs	r3, #0
 800ab14:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800ab16:	6879      	ldr	r1, [r7, #4]
 800ab18:	4894      	ldr	r0, [pc, #592]	; (800ad6c <goal_test+0x2b8>)
 800ab1a:	f008 f9b1 	bl	8012e80 <iprintf>
		  }
		  if(dist_r <= -20){
 800ab1e:	4b92      	ldr	r3, [pc, #584]	; (800ad68 <goal_test+0x2b4>)
 800ab20:	edd3 7a00 	vldr	s15, [r3]
 800ab24:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800ab28:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab30:	d80f      	bhi.n	800ab52 <goal_test+0x9e>
			  mode--;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	3b01      	subs	r3, #1
 800ab36:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800ab38:	4b8b      	ldr	r3, [pc, #556]	; (800ad68 <goal_test+0x2b4>)
 800ab3a:	f04f 0200 	mov.w	r2, #0
 800ab3e:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	da01      	bge.n	800ab4a <goal_test+0x96>
				  mode = 7;
 800ab46:	2307      	movs	r3, #7
 800ab48:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800ab4a:	6879      	ldr	r1, [r7, #4]
 800ab4c:	4887      	ldr	r0, [pc, #540]	; (800ad6c <goal_test+0x2b8>)
 800ab4e:	f008 f997 	bl	8012e80 <iprintf>
		  }
		  if(dist_l <= -20){
 800ab52:	4b87      	ldr	r3, [pc, #540]	; (800ad70 <goal_test+0x2bc>)
 800ab54:	edd3 7a00 	vldr	s15, [r3]
 800ab58:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800ab5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab64:	f200 826f 	bhi.w	800b046 <goal_test+0x592>
			  dist_l = 0;
 800ab68:	4b81      	ldr	r3, [pc, #516]	; (800ad70 <goal_test+0x2bc>)
 800ab6a:	f04f 0200 	mov.w	r2, #0
 800ab6e:	601a      	str	r2, [r3, #0]
			  drive_ready();
 800ab70:	f7fa f87c 	bl	8004c6c <drive_ready>
			  MF2.FLAG.V = 0;
 800ab74:	4a7f      	ldr	r2, [pc, #508]	; (800ad74 <goal_test+0x2c0>)
 800ab76:	8813      	ldrh	r3, [r2, #0]
 800ab78:	f36f 03c3 	bfc	r3, #3, #1
 800ab7c:	8013      	strh	r3, [r2, #0]

			  switch(mode){
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2b07      	cmp	r3, #7
 800ab82:	f200 825c 	bhi.w	800b03e <goal_test+0x58a>
 800ab86:	a201      	add	r2, pc, #4	; (adr r2, 800ab8c <goal_test+0xd8>)
 800ab88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab8c:	0800abad 	.word	0x0800abad
 800ab90:	0800ac35 	.word	0x0800ac35
 800ab94:	0800ace3 	.word	0x0800ace3
 800ab98:	0800adad 	.word	0x0800adad
 800ab9c:	0800ae2f 	.word	0x0800ae2f
 800aba0:	0800aea5 	.word	0x0800aea5
 800aba4:	0800af27 	.word	0x0800af27
 800aba8:	0800afb3 	.word	0x0800afb3
				case 0:
					//----a一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 800abac:	4872      	ldr	r0, [pc, #456]	; (800ad78 <goal_test+0x2c4>)
 800abae:	f008 f9db 	bl	8012f68 <puts>

					MF.FLAG.SCND = 0;
 800abb2:	4a72      	ldr	r2, [pc, #456]	; (800ad7c <goal_test+0x2c8>)
 800abb4:	8813      	ldrh	r3, [r2, #0]
 800abb6:	f36f 1345 	bfc	r3, #5, #1
 800abba:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800abbc:	4a6f      	ldr	r2, [pc, #444]	; (800ad7c <goal_test+0x2c8>)
 800abbe:	8813      	ldrh	r3, [r2, #0]
 800abc0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800abc4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800abc6:	4a6d      	ldr	r2, [pc, #436]	; (800ad7c <goal_test+0x2c8>)
 800abc8:	8813      	ldrh	r3, [r2, #0]
 800abca:	f36f 238a 	bfc	r3, #10, #1
 800abce:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800abd0:	4b6b      	ldr	r3, [pc, #428]	; (800ad80 <goal_test+0x2cc>)
 800abd2:	2202      	movs	r2, #2
 800abd4:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800abd6:	4b6b      	ldr	r3, [pc, #428]	; (800ad84 <goal_test+0x2d0>)
 800abd8:	2200      	movs	r2, #0
 800abda:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800abdc:	4b6a      	ldr	r3, [pc, #424]	; (800ad88 <goal_test+0x2d4>)
 800abde:	2201      	movs	r2, #1
 800abe0:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800abe2:	4b6a      	ldr	r3, [pc, #424]	; (800ad8c <goal_test+0x2d8>)
 800abe4:	f241 3288 	movw	r2, #5000	; 0x1388
 800abe8:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800abea:	4b69      	ldr	r3, [pc, #420]	; (800ad90 <goal_test+0x2dc>)
 800abec:	f44f 7248 	mov.w	r2, #800	; 0x320
 800abf0:	801a      	strh	r2, [r3, #0]
					start_mode = 0;
 800abf2:	4b64      	ldr	r3, [pc, #400]	; (800ad84 <goal_test+0x2d0>)
 800abf4:	2200      	movs	r2, #0
 800abf6:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800abf8:	4b66      	ldr	r3, [pc, #408]	; (800ad94 <goal_test+0x2e0>)
 800abfa:	2200      	movs	r2, #0
 800abfc:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800abfe:	4b66      	ldr	r3, [pc, #408]	; (800ad98 <goal_test+0x2e4>)
 800ac00:	2208      	movs	r2, #8
 800ac02:	701a      	strb	r2, [r3, #0]

					get_base();
 800ac04:	f007 fac6 	bl	8012194 <get_base>

					searchC();
 800ac08:	f004 faee 	bl	800f1e8 <searchC>
					HAL_Delay(2000);
 800ac0c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ac10:	f7f6 fa04 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ac14:	4b60      	ldr	r3, [pc, #384]	; (800ad98 <goal_test+0x2e4>)
 800ac16:	2200      	movs	r2, #0
 800ac18:	701a      	strb	r2, [r3, #0]
 800ac1a:	4b5f      	ldr	r3, [pc, #380]	; (800ad98 <goal_test+0x2e4>)
 800ac1c:	781a      	ldrb	r2, [r3, #0]
 800ac1e:	4b5d      	ldr	r3, [pc, #372]	; (800ad94 <goal_test+0x2e0>)
 800ac20:	701a      	strb	r2, [r3, #0]
					searchC();
 800ac22:	f004 fae1 	bl	800f1e8 <searchC>

					goal_x = GOAL_X;
 800ac26:	4b5b      	ldr	r3, [pc, #364]	; (800ad94 <goal_test+0x2e0>)
 800ac28:	2200      	movs	r2, #0
 800ac2a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ac2c:	4b5a      	ldr	r3, [pc, #360]	; (800ad98 <goal_test+0x2e4>)
 800ac2e:	2208      	movs	r2, #8
 800ac30:	701a      	strb	r2, [r3, #0]
					break;
 800ac32:	e204      	b.n	800b03e <goal_test+0x58a>
				case 1:
					//----a一次探索スラローム走行 4マスgoal----
					printf("First Run. (4 goal)\n");
 800ac34:	4859      	ldr	r0, [pc, #356]	; (800ad9c <goal_test+0x2e8>)
 800ac36:	f008 f997 	bl	8012f68 <puts>

					MF.FLAG.SCND = 0;
 800ac3a:	4a50      	ldr	r2, [pc, #320]	; (800ad7c <goal_test+0x2c8>)
 800ac3c:	8813      	ldrh	r3, [r2, #0]
 800ac3e:	f36f 1345 	bfc	r3, #5, #1
 800ac42:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ac44:	4a4d      	ldr	r2, [pc, #308]	; (800ad7c <goal_test+0x2c8>)
 800ac46:	8813      	ldrh	r3, [r2, #0]
 800ac48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ac4c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800ac4e:	4a4b      	ldr	r2, [pc, #300]	; (800ad7c <goal_test+0x2c8>)
 800ac50:	8813      	ldrh	r3, [r2, #0]
 800ac52:	f36f 238a 	bfc	r3, #10, #1
 800ac56:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800ac58:	4b49      	ldr	r3, [pc, #292]	; (800ad80 <goal_test+0x2cc>)
 800ac5a:	2202      	movs	r2, #2
 800ac5c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800ac5e:	4b49      	ldr	r3, [pc, #292]	; (800ad84 <goal_test+0x2d0>)
 800ac60:	2200      	movs	r2, #0
 800ac62:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800ac64:	4b48      	ldr	r3, [pc, #288]	; (800ad88 <goal_test+0x2d4>)
 800ac66:	2202      	movs	r2, #2
 800ac68:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800ac6a:	4b48      	ldr	r3, [pc, #288]	; (800ad8c <goal_test+0x2d8>)
 800ac6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac70:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800ac72:	4b47      	ldr	r3, [pc, #284]	; (800ad90 <goal_test+0x2dc>)
 800ac74:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ac78:	801a      	strh	r2, [r3, #0]
					start_mode = 0;
 800ac7a:	4b42      	ldr	r3, [pc, #264]	; (800ad84 <goal_test+0x2d0>)
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800ac80:	4b44      	ldr	r3, [pc, #272]	; (800ad94 <goal_test+0x2e0>)
 800ac82:	2200      	movs	r2, #0
 800ac84:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ac86:	4b44      	ldr	r3, [pc, #272]	; (800ad98 <goal_test+0x2e4>)
 800ac88:	2208      	movs	r2, #8
 800ac8a:	701a      	strb	r2, [r3, #0]

					get_base();
 800ac8c:	f007 fa82 	bl	8012194 <get_base>

					searchC();
 800ac90:	f004 faaa 	bl	800f1e8 <searchC>
					HAL_Delay(2000);
 800ac94:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ac98:	f7f6 f9c0 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ac9c:	4b3e      	ldr	r3, [pc, #248]	; (800ad98 <goal_test+0x2e4>)
 800ac9e:	2200      	movs	r2, #0
 800aca0:	701a      	strb	r2, [r3, #0]
 800aca2:	4b3d      	ldr	r3, [pc, #244]	; (800ad98 <goal_test+0x2e4>)
 800aca4:	781a      	ldrb	r2, [r3, #0]
 800aca6:	4b3b      	ldr	r3, [pc, #236]	; (800ad94 <goal_test+0x2e0>)
 800aca8:	701a      	strb	r2, [r3, #0]
					searchC();
 800acaa:	f004 fa9d 	bl	800f1e8 <searchC>
					while(dist_l < 30);
 800acae:	bf00      	nop
 800acb0:	4b2f      	ldr	r3, [pc, #188]	; (800ad70 <goal_test+0x2bc>)
 800acb2:	edd3 7a00 	vldr	s15, [r3]
 800acb6:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800acba:	eef4 7ac7 	vcmpe.f32	s15, s14
 800acbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acc2:	d4f5      	bmi.n	800acb0 <goal_test+0x1fc>
					printf("x: %d, y:%d, dir:%d\n", mouse.x, mouse.y, mouse.dir);
 800acc4:	4b36      	ldr	r3, [pc, #216]	; (800ada0 <goal_test+0x2ec>)
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	b2db      	uxtb	r3, r3
 800acca:	4619      	mov	r1, r3
 800accc:	4b34      	ldr	r3, [pc, #208]	; (800ada0 <goal_test+0x2ec>)
 800acce:	785b      	ldrb	r3, [r3, #1]
 800acd0:	b2db      	uxtb	r3, r3
 800acd2:	461a      	mov	r2, r3
 800acd4:	4b32      	ldr	r3, [pc, #200]	; (800ada0 <goal_test+0x2ec>)
 800acd6:	789b      	ldrb	r3, [r3, #2]
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	4832      	ldr	r0, [pc, #200]	; (800ada4 <goal_test+0x2f0>)
 800acdc:	f008 f8d0 	bl	8012e80 <iprintf>

					break;
 800ace0:	e1ad      	b.n	800b03e <goal_test+0x58a>
				case 2:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース Middle Speed----
					printf("pass press 3-2.\n");
 800ace2:	4831      	ldr	r0, [pc, #196]	; (800ada8 <goal_test+0x2f4>)
 800ace4:	f008 f940 	bl	8012f68 <puts>
					MF.FLAG.SCND = 1;
 800ace8:	4a24      	ldr	r2, [pc, #144]	; (800ad7c <goal_test+0x2c8>)
 800acea:	8813      	ldrh	r3, [r2, #0]
 800acec:	f043 0320 	orr.w	r3, r3, #32
 800acf0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800acf2:	4a22      	ldr	r2, [pc, #136]	; (800ad7c <goal_test+0x2c8>)
 800acf4:	8813      	ldrh	r3, [r2, #0]
 800acf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800acfa:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800acfc:	4a1f      	ldr	r2, [pc, #124]	; (800ad7c <goal_test+0x2c8>)
 800acfe:	8813      	ldrh	r3, [r2, #0]
 800ad00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ad04:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800ad06:	4b1e      	ldr	r3, [pc, #120]	; (800ad80 <goal_test+0x2cc>)
 800ad08:	2202      	movs	r2, #2
 800ad0a:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800ad0c:	4b1d      	ldr	r3, [pc, #116]	; (800ad84 <goal_test+0x2d0>)
 800ad0e:	2200      	movs	r2, #0
 800ad10:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800ad12:	4b1d      	ldr	r3, [pc, #116]	; (800ad88 <goal_test+0x2d4>)
 800ad14:	2201      	movs	r2, #1
 800ad16:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800ad18:	4b1c      	ldr	r3, [pc, #112]	; (800ad8c <goal_test+0x2d8>)
 800ad1a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad1e:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800ad20:	4b1b      	ldr	r3, [pc, #108]	; (800ad90 <goal_test+0x2dc>)
 800ad22:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800ad26:	801a      	strh	r2, [r3, #0]

//					pass_mode = 3;						//a半区画ベースでroute配列生成

					goal_x = GOAL_X;
 800ad28:	4b1a      	ldr	r3, [pc, #104]	; (800ad94 <goal_test+0x2e0>)
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ad2e:	4b1a      	ldr	r3, [pc, #104]	; (800ad98 <goal_test+0x2e4>)
 800ad30:	2208      	movs	r2, #8
 800ad32:	701a      	strb	r2, [r3, #0]

					get_base();
 800ad34:	f007 fa2e 	bl	8012194 <get_base>

					searchF3();
 800ad38:	f004 fed0 	bl	800fadc <searchF3>
					HAL_Delay(2000);
 800ad3c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ad40:	f7f6 f96c 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ad44:	4b14      	ldr	r3, [pc, #80]	; (800ad98 <goal_test+0x2e4>)
 800ad46:	2200      	movs	r2, #0
 800ad48:	701a      	strb	r2, [r3, #0]
 800ad4a:	4b13      	ldr	r3, [pc, #76]	; (800ad98 <goal_test+0x2e4>)
 800ad4c:	781a      	ldrb	r2, [r3, #0]
 800ad4e:	4b11      	ldr	r3, [pc, #68]	; (800ad94 <goal_test+0x2e0>)
 800ad50:	701a      	strb	r2, [r3, #0]
					searchF3();
 800ad52:	f004 fec3 	bl	800fadc <searchF3>

					goal_x = GOAL_X;
 800ad56:	4b0f      	ldr	r3, [pc, #60]	; (800ad94 <goal_test+0x2e0>)
 800ad58:	2200      	movs	r2, #0
 800ad5a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ad5c:	4b0e      	ldr	r3, [pc, #56]	; (800ad98 <goal_test+0x2e4>)
 800ad5e:	2208      	movs	r2, #8
 800ad60:	701a      	strb	r2, [r3, #0]
					break;
 800ad62:	e16c      	b.n	800b03e <goal_test+0x58a>
 800ad64:	080142e0 	.word	0x080142e0
 800ad68:	20000b2c 	.word	0x20000b2c
 800ad6c:	080140bc 	.word	0x080140bc
 800ad70:	20001644 	.word	0x20001644
 800ad74:	20000fa4 	.word	0x20000fa4
 800ad78:	0801429c 	.word	0x0801429c
 800ad7c:	20000fa8 	.word	0x20000fa8
 800ad80:	20000456 	.word	0x20000456
 800ad84:	20001648 	.word	0x20001648
 800ad88:	20000c31 	.word	0x20000c31
 800ad8c:	20000454 	.word	0x20000454
 800ad90:	20000ffc 	.word	0x20000ffc
 800ad94:	20000c30 	.word	0x20000c30
 800ad98:	20000b8c 	.word	0x20000b8c
 800ad9c:	080142fc 	.word	0x080142fc
 800ada0:	20000c8c 	.word	0x20000c8c
 800ada4:	08014310 	.word	0x08014310
 800ada8:	080142b0 	.word	0x080142b0
				case 3:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース Middle Speed 4マスgoal----
					printf("pass press 3-2.\n");
 800adac:	48a6      	ldr	r0, [pc, #664]	; (800b048 <goal_test+0x594>)
 800adae:	f008 f8db 	bl	8012f68 <puts>
					MF.FLAG.SCND = 1;
 800adb2:	4aa6      	ldr	r2, [pc, #664]	; (800b04c <goal_test+0x598>)
 800adb4:	8813      	ldrh	r3, [r2, #0]
 800adb6:	f043 0320 	orr.w	r3, r3, #32
 800adba:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800adbc:	4aa3      	ldr	r2, [pc, #652]	; (800b04c <goal_test+0x598>)
 800adbe:	8813      	ldrh	r3, [r2, #0]
 800adc0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800adc4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800adc6:	4aa1      	ldr	r2, [pc, #644]	; (800b04c <goal_test+0x598>)
 800adc8:	8813      	ldrh	r3, [r2, #0]
 800adca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800adce:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800add0:	4b9f      	ldr	r3, [pc, #636]	; (800b050 <goal_test+0x59c>)
 800add2:	2202      	movs	r2, #2
 800add4:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800add6:	4b9f      	ldr	r3, [pc, #636]	; (800b054 <goal_test+0x5a0>)
 800add8:	2200      	movs	r2, #0
 800adda:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800addc:	4b9e      	ldr	r3, [pc, #632]	; (800b058 <goal_test+0x5a4>)
 800adde:	2202      	movs	r2, #2
 800ade0:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800ade2:	4b9e      	ldr	r3, [pc, #632]	; (800b05c <goal_test+0x5a8>)
 800ade4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ade8:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800adea:	4b9d      	ldr	r3, [pc, #628]	; (800b060 <goal_test+0x5ac>)
 800adec:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800adf0:	801a      	strh	r2, [r3, #0]

//					pass_mode = 3;						//a半区画ベースでroute配列生成

					goal_x = GOAL_X;
 800adf2:	4b9c      	ldr	r3, [pc, #624]	; (800b064 <goal_test+0x5b0>)
 800adf4:	2200      	movs	r2, #0
 800adf6:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800adf8:	4b9b      	ldr	r3, [pc, #620]	; (800b068 <goal_test+0x5b4>)
 800adfa:	2208      	movs	r2, #8
 800adfc:	701a      	strb	r2, [r3, #0]

					get_base();
 800adfe:	f007 f9c9 	bl	8012194 <get_base>

					searchF3();
 800ae02:	f004 fe6b 	bl	800fadc <searchF3>
					HAL_Delay(2000);
 800ae06:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ae0a:	f7f6 f907 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ae0e:	4b96      	ldr	r3, [pc, #600]	; (800b068 <goal_test+0x5b4>)
 800ae10:	2200      	movs	r2, #0
 800ae12:	701a      	strb	r2, [r3, #0]
 800ae14:	4b94      	ldr	r3, [pc, #592]	; (800b068 <goal_test+0x5b4>)
 800ae16:	781a      	ldrb	r2, [r3, #0]
 800ae18:	4b92      	ldr	r3, [pc, #584]	; (800b064 <goal_test+0x5b0>)
 800ae1a:	701a      	strb	r2, [r3, #0]
					searchF3();
 800ae1c:	f004 fe5e 	bl	800fadc <searchF3>

					goal_x = GOAL_X;
 800ae20:	4b90      	ldr	r3, [pc, #576]	; (800b064 <goal_test+0x5b0>)
 800ae22:	2200      	movs	r2, #0
 800ae24:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ae26:	4b90      	ldr	r3, [pc, #576]	; (800b068 <goal_test+0x5b4>)
 800ae28:	2208      	movs	r2, #8
 800ae2a:	701a      	strb	r2, [r3, #0]
					break;
 800ae2c:	e107      	b.n	800b03e <goal_test+0x58a>
				case 4:
					//----a直線と大回り圧縮と斜め Middle Speedｰｰｰｰ
					printf("pass press 4.\n");
 800ae2e:	488f      	ldr	r0, [pc, #572]	; (800b06c <goal_test+0x5b8>)
 800ae30:	f008 f89a 	bl	8012f68 <puts>
					MF.FLAG.SCND = 1;
 800ae34:	4a85      	ldr	r2, [pc, #532]	; (800b04c <goal_test+0x598>)
 800ae36:	8813      	ldrh	r3, [r2, #0]
 800ae38:	f043 0320 	orr.w	r3, r3, #32
 800ae3c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ae3e:	4a83      	ldr	r2, [pc, #524]	; (800b04c <goal_test+0x598>)
 800ae40:	8813      	ldrh	r3, [r2, #0]
 800ae42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ae46:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800ae48:	4a80      	ldr	r2, [pc, #512]	; (800b04c <goal_test+0x598>)
 800ae4a:	8813      	ldrh	r3, [r2, #0]
 800ae4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ae50:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800ae52:	4b7f      	ldr	r3, [pc, #508]	; (800b050 <goal_test+0x59c>)
 800ae54:	2202      	movs	r2, #2
 800ae56:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800ae58:	4b7e      	ldr	r3, [pc, #504]	; (800b054 <goal_test+0x5a0>)
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800ae5e:	4b7e      	ldr	r3, [pc, #504]	; (800b058 <goal_test+0x5a4>)
 800ae60:	2201      	movs	r2, #1
 800ae62:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800ae64:	4b7d      	ldr	r3, [pc, #500]	; (800b05c <goal_test+0x5a8>)
 800ae66:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae6a:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800ae6c:	4b7c      	ldr	r3, [pc, #496]	; (800b060 <goal_test+0x5ac>)
 800ae6e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800ae72:	801a      	strh	r2, [r3, #0]

//					pass_mode = 4;

					goal_x = GOAL_X;
 800ae74:	4b7b      	ldr	r3, [pc, #492]	; (800b064 <goal_test+0x5b0>)
 800ae76:	2200      	movs	r2, #0
 800ae78:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ae7a:	4b7b      	ldr	r3, [pc, #492]	; (800b068 <goal_test+0x5b4>)
 800ae7c:	2208      	movs	r2, #8
 800ae7e:	701a      	strb	r2, [r3, #0]

					get_base();
 800ae80:	f007 f988 	bl	8012194 <get_base>

					searchF4();
 800ae84:	f004 ff06 	bl	800fc94 <searchF4>
					HAL_Delay(2000);
 800ae88:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ae8c:	f7f6 f8c6 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ae90:	4b75      	ldr	r3, [pc, #468]	; (800b068 <goal_test+0x5b4>)
 800ae92:	2200      	movs	r2, #0
 800ae94:	701a      	strb	r2, [r3, #0]
 800ae96:	4b74      	ldr	r3, [pc, #464]	; (800b068 <goal_test+0x5b4>)
 800ae98:	781a      	ldrb	r2, [r3, #0]
 800ae9a:	4b72      	ldr	r3, [pc, #456]	; (800b064 <goal_test+0x5b0>)
 800ae9c:	701a      	strb	r2, [r3, #0]
					searchF4();
 800ae9e:	f004 fef9 	bl	800fc94 <searchF4>
					break;
 800aea2:	e0cc      	b.n	800b03e <goal_test+0x58a>
				case 5:
					//----a直線と大回り圧縮と斜め Middle Speed 4マスgoalｰｰｰｰ
					printf("pass press 4.\n");
 800aea4:	4871      	ldr	r0, [pc, #452]	; (800b06c <goal_test+0x5b8>)
 800aea6:	f008 f85f 	bl	8012f68 <puts>
					MF.FLAG.SCND = 1;
 800aeaa:	4a68      	ldr	r2, [pc, #416]	; (800b04c <goal_test+0x598>)
 800aeac:	8813      	ldrh	r3, [r2, #0]
 800aeae:	f043 0320 	orr.w	r3, r3, #32
 800aeb2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800aeb4:	4a65      	ldr	r2, [pc, #404]	; (800b04c <goal_test+0x598>)
 800aeb6:	8813      	ldrh	r3, [r2, #0]
 800aeb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aebc:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800aebe:	4a63      	ldr	r2, [pc, #396]	; (800b04c <goal_test+0x598>)
 800aec0:	8813      	ldrh	r3, [r2, #0]
 800aec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800aec6:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800aec8:	4b61      	ldr	r3, [pc, #388]	; (800b050 <goal_test+0x59c>)
 800aeca:	2202      	movs	r2, #2
 800aecc:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800aece:	4b61      	ldr	r3, [pc, #388]	; (800b054 <goal_test+0x5a0>)
 800aed0:	2200      	movs	r2, #0
 800aed2:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800aed4:	4b60      	ldr	r3, [pc, #384]	; (800b058 <goal_test+0x5a4>)
 800aed6:	2202      	movs	r2, #2
 800aed8:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800aeda:	4b60      	ldr	r3, [pc, #384]	; (800b05c <goal_test+0x5a8>)
 800aedc:	f241 3288 	movw	r2, #5000	; 0x1388
 800aee0:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800aee2:	4b5f      	ldr	r3, [pc, #380]	; (800b060 <goal_test+0x5ac>)
 800aee4:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800aee8:	801a      	strh	r2, [r3, #0]

//					pass_mode = 4;

					goal_x = GOAL_X;
 800aeea:	4b5e      	ldr	r3, [pc, #376]	; (800b064 <goal_test+0x5b0>)
 800aeec:	2200      	movs	r2, #0
 800aeee:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800aef0:	4b5d      	ldr	r3, [pc, #372]	; (800b068 <goal_test+0x5b4>)
 800aef2:	2208      	movs	r2, #8
 800aef4:	701a      	strb	r2, [r3, #0]

					get_base();
 800aef6:	f007 f94d 	bl	8012194 <get_base>

					searchF4();
 800aefa:	f004 fecb 	bl	800fc94 <searchF4>
					HAL_Delay(2000);
 800aefe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800af02:	f7f6 f88b 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800af06:	4b58      	ldr	r3, [pc, #352]	; (800b068 <goal_test+0x5b4>)
 800af08:	2200      	movs	r2, #0
 800af0a:	701a      	strb	r2, [r3, #0]
 800af0c:	4b56      	ldr	r3, [pc, #344]	; (800b068 <goal_test+0x5b4>)
 800af0e:	781a      	ldrb	r2, [r3, #0]
 800af10:	4b54      	ldr	r3, [pc, #336]	; (800b064 <goal_test+0x5b0>)
 800af12:	701a      	strb	r2, [r3, #0]
					searchF4();
 800af14:	f004 febe 	bl	800fc94 <searchF4>

					goal_x = GOAL_X;
 800af18:	4b52      	ldr	r3, [pc, #328]	; (800b064 <goal_test+0x5b0>)
 800af1a:	2200      	movs	r2, #0
 800af1c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800af1e:	4b52      	ldr	r3, [pc, #328]	; (800b068 <goal_test+0x5b4>)
 800af20:	2208      	movs	r2, #8
 800af22:	701a      	strb	r2, [r3, #0]
					break;
 800af24:	e08b      	b.n	800b03e <goal_test+0x58a>
				case 6:
					//----a一次探索スラローム走行　重ね探索----
					printf("First Run. (Slalom)\n");
 800af26:	4852      	ldr	r0, [pc, #328]	; (800b070 <goal_test+0x5bc>)
 800af28:	f008 f81e 	bl	8012f68 <puts>

					MF.FLAG.SCND = 0;
 800af2c:	4a47      	ldr	r2, [pc, #284]	; (800b04c <goal_test+0x598>)
 800af2e:	8813      	ldrh	r3, [r2, #0]
 800af30:	f36f 1345 	bfc	r3, #5, #1
 800af34:	8013      	strh	r3, [r2, #0]
					MF.FLAG.SRC2 = 1;
 800af36:	4a45      	ldr	r2, [pc, #276]	; (800b04c <goal_test+0x598>)
 800af38:	8813      	ldrh	r3, [r2, #0]
 800af3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af3e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800af40:	4a42      	ldr	r2, [pc, #264]	; (800b04c <goal_test+0x598>)
 800af42:	8813      	ldrh	r3, [r2, #0]
 800af44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800af48:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800af4a:	4a40      	ldr	r2, [pc, #256]	; (800b04c <goal_test+0x598>)
 800af4c:	8813      	ldrh	r3, [r2, #0]
 800af4e:	f36f 238a 	bfc	r3, #10, #1
 800af52:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800af54:	4b3e      	ldr	r3, [pc, #248]	; (800b050 <goal_test+0x59c>)
 800af56:	2202      	movs	r2, #2
 800af58:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800af5a:	4b3e      	ldr	r3, [pc, #248]	; (800b054 <goal_test+0x5a0>)
 800af5c:	2200      	movs	r2, #0
 800af5e:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800af60:	4b3d      	ldr	r3, [pc, #244]	; (800b058 <goal_test+0x5a4>)
 800af62:	2201      	movs	r2, #1
 800af64:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800af66:	4b3d      	ldr	r3, [pc, #244]	; (800b05c <goal_test+0x5a8>)
 800af68:	f241 3288 	movw	r2, #5000	; 0x1388
 800af6c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800af6e:	4b3c      	ldr	r3, [pc, #240]	; (800b060 <goal_test+0x5ac>)
 800af70:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800af74:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800af76:	4b3b      	ldr	r3, [pc, #236]	; (800b064 <goal_test+0x5b0>)
 800af78:	2200      	movs	r2, #0
 800af7a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800af7c:	4b3a      	ldr	r3, [pc, #232]	; (800b068 <goal_test+0x5b4>)
 800af7e:	2208      	movs	r2, #8
 800af80:	701a      	strb	r2, [r3, #0]

					get_base();
 800af82:	f007 f907 	bl	8012194 <get_base>

					searchC2();
 800af86:	f004 faa1 	bl	800f4cc <searchC2>
					HAL_Delay(2000);
 800af8a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800af8e:	f7f6 f845 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800af92:	4b35      	ldr	r3, [pc, #212]	; (800b068 <goal_test+0x5b4>)
 800af94:	2200      	movs	r2, #0
 800af96:	701a      	strb	r2, [r3, #0]
 800af98:	4b33      	ldr	r3, [pc, #204]	; (800b068 <goal_test+0x5b4>)
 800af9a:	781a      	ldrb	r2, [r3, #0]
 800af9c:	4b31      	ldr	r3, [pc, #196]	; (800b064 <goal_test+0x5b0>)
 800af9e:	701a      	strb	r2, [r3, #0]
					searchC();
 800afa0:	f004 f922 	bl	800f1e8 <searchC>

					goal_x = GOAL_X;
 800afa4:	4b2f      	ldr	r3, [pc, #188]	; (800b064 <goal_test+0x5b0>)
 800afa6:	2200      	movs	r2, #0
 800afa8:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800afaa:	4b2f      	ldr	r3, [pc, #188]	; (800b068 <goal_test+0x5b4>)
 800afac:	2208      	movs	r2, #8
 800afae:	701a      	strb	r2, [r3, #0]
					break;
 800afb0:	e045      	b.n	800b03e <goal_test+0x58a>
				case 7:
					//----a一次探索スラローム走行　重ね探索 4マスgoal----
					printf("First Run. (Slalom)\n");
 800afb2:	482f      	ldr	r0, [pc, #188]	; (800b070 <goal_test+0x5bc>)
 800afb4:	f007 ffd8 	bl	8012f68 <puts>

					MF.FLAG.SCND = 0;
 800afb8:	4a24      	ldr	r2, [pc, #144]	; (800b04c <goal_test+0x598>)
 800afba:	8813      	ldrh	r3, [r2, #0]
 800afbc:	f36f 1345 	bfc	r3, #5, #1
 800afc0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.SRC2 = 1;
 800afc2:	4a22      	ldr	r2, [pc, #136]	; (800b04c <goal_test+0x598>)
 800afc4:	8813      	ldrh	r3, [r2, #0]
 800afc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afca:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800afcc:	4a1f      	ldr	r2, [pc, #124]	; (800b04c <goal_test+0x598>)
 800afce:	8813      	ldrh	r3, [r2, #0]
 800afd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800afd4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800afd6:	4a1d      	ldr	r2, [pc, #116]	; (800b04c <goal_test+0x598>)
 800afd8:	8813      	ldrh	r3, [r2, #0]
 800afda:	f36f 238a 	bfc	r3, #10, #1
 800afde:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800afe0:	4b1b      	ldr	r3, [pc, #108]	; (800b050 <goal_test+0x59c>)
 800afe2:	2202      	movs	r2, #2
 800afe4:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800afe6:	4b1b      	ldr	r3, [pc, #108]	; (800b054 <goal_test+0x5a0>)
 800afe8:	2200      	movs	r2, #0
 800afea:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800afec:	4b1a      	ldr	r3, [pc, #104]	; (800b058 <goal_test+0x5a4>)
 800afee:	2202      	movs	r2, #2
 800aff0:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800aff2:	4b1a      	ldr	r3, [pc, #104]	; (800b05c <goal_test+0x5a8>)
 800aff4:	f241 3288 	movw	r2, #5000	; 0x1388
 800aff8:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800affa:	4b19      	ldr	r3, [pc, #100]	; (800b060 <goal_test+0x5ac>)
 800affc:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b000:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800b002:	4b18      	ldr	r3, [pc, #96]	; (800b064 <goal_test+0x5b0>)
 800b004:	2200      	movs	r2, #0
 800b006:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b008:	4b17      	ldr	r3, [pc, #92]	; (800b068 <goal_test+0x5b4>)
 800b00a:	2208      	movs	r2, #8
 800b00c:	701a      	strb	r2, [r3, #0]

					get_base();
 800b00e:	f007 f8c1 	bl	8012194 <get_base>

					searchC2();
 800b012:	f004 fa5b 	bl	800f4cc <searchC2>
					HAL_Delay(2000);
 800b016:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b01a:	f7f5 ffff 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b01e:	4b12      	ldr	r3, [pc, #72]	; (800b068 <goal_test+0x5b4>)
 800b020:	2200      	movs	r2, #0
 800b022:	701a      	strb	r2, [r3, #0]
 800b024:	4b10      	ldr	r3, [pc, #64]	; (800b068 <goal_test+0x5b4>)
 800b026:	781a      	ldrb	r2, [r3, #0]
 800b028:	4b0e      	ldr	r3, [pc, #56]	; (800b064 <goal_test+0x5b0>)
 800b02a:	701a      	strb	r2, [r3, #0]
					searchC();
 800b02c:	f004 f8dc 	bl	800f1e8 <searchC>

					goal_x = GOAL_X;
 800b030:	4b0c      	ldr	r3, [pc, #48]	; (800b064 <goal_test+0x5b0>)
 800b032:	2200      	movs	r2, #0
 800b034:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b036:	4b0c      	ldr	r3, [pc, #48]	; (800b068 <goal_test+0x5b4>)
 800b038:	2208      	movs	r2, #8
 800b03a:	701a      	strb	r2, [r3, #0]
					break;
 800b03c:	bf00      	nop
			  }
			  dist_l = 0;
 800b03e:	4b0d      	ldr	r3, [pc, #52]	; (800b074 <goal_test+0x5c0>)
 800b040:	f04f 0200 	mov.w	r2, #0
 800b044:	601a      	str	r2, [r3, #0]
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b046:	e53e      	b.n	800aac6 <goal_test+0x12>
 800b048:	080142b0 	.word	0x080142b0
 800b04c:	20000fa8 	.word	0x20000fa8
 800b050:	20000456 	.word	0x20000456
 800b054:	20001648 	.word	0x20001648
 800b058:	20000c31 	.word	0x20000c31
 800b05c:	20000454 	.word	0x20000454
 800b060:	20000ffc 	.word	0x20000ffc
 800b064:	20000c30 	.word	0x20000c30
 800b068:	20000b8c 	.word	0x20000b8c
 800b06c:	080142c0 	.word	0x080142c0
 800b070:	0801429c 	.word	0x0801429c
 800b074:	20001644 	.word	0x20001644

0800b078 <sample_course_run>:
//sample_course_run
//a試験走行モード
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sample_course_run(void){
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0

	int mode = 0;
 800b07e:	2300      	movs	r3, #0
 800b080:	607b      	str	r3, [r7, #4]
	printf("Sample Course Run, Mode : %d\n", mode);
 800b082:	6879      	ldr	r1, [r7, #4]
 800b084:	489a      	ldr	r0, [pc, #616]	; (800b2f0 <sample_course_run+0x278>)
 800b086:	f007 fefb 	bl	8012e80 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	b2db      	uxtb	r3, r3
 800b08e:	f003 0301 	and.w	r3, r3, #1
 800b092:	b2d8      	uxtb	r0, r3
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	b2db      	uxtb	r3, r3
 800b098:	f003 0302 	and.w	r3, r3, #2
 800b09c:	b2d9      	uxtb	r1, r3
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	b2db      	uxtb	r3, r3
 800b0a2:	f003 0304 	and.w	r3, r3, #4
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	f007 f8cb 	bl	8012244 <led_write>
		  if(dist_r >= 20){
 800b0ae:	4b91      	ldr	r3, [pc, #580]	; (800b2f4 <sample_course_run+0x27c>)
 800b0b0:	edd3 7a00 	vldr	s15, [r3]
 800b0b4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800b0b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b0bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0c0:	db0f      	blt.n	800b0e2 <sample_course_run+0x6a>
			  mode++;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800b0c8:	4b8a      	ldr	r3, [pc, #552]	; (800b2f4 <sample_course_run+0x27c>)
 800b0ca:	f04f 0200 	mov.w	r2, #0
 800b0ce:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2b07      	cmp	r3, #7
 800b0d4:	dd01      	ble.n	800b0da <sample_course_run+0x62>
				  mode = 0;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800b0da:	6879      	ldr	r1, [r7, #4]
 800b0dc:	4886      	ldr	r0, [pc, #536]	; (800b2f8 <sample_course_run+0x280>)
 800b0de:	f007 fecf 	bl	8012e80 <iprintf>
		  }
		  if(dist_r <= -20){
 800b0e2:	4b84      	ldr	r3, [pc, #528]	; (800b2f4 <sample_course_run+0x27c>)
 800b0e4:	edd3 7a00 	vldr	s15, [r3]
 800b0e8:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800b0ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b0f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0f4:	d80f      	bhi.n	800b116 <sample_course_run+0x9e>
			  mode--;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	3b01      	subs	r3, #1
 800b0fa:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800b0fc:	4b7d      	ldr	r3, [pc, #500]	; (800b2f4 <sample_course_run+0x27c>)
 800b0fe:	f04f 0200 	mov.w	r2, #0
 800b102:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2b00      	cmp	r3, #0
 800b108:	da01      	bge.n	800b10e <sample_course_run+0x96>
				  mode = 7;
 800b10a:	2307      	movs	r3, #7
 800b10c:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800b10e:	6879      	ldr	r1, [r7, #4]
 800b110:	4879      	ldr	r0, [pc, #484]	; (800b2f8 <sample_course_run+0x280>)
 800b112:	f007 feb5 	bl	8012e80 <iprintf>
		  }
		  if(dist_l <= -20){
 800b116:	4b79      	ldr	r3, [pc, #484]	; (800b2fc <sample_course_run+0x284>)
 800b118:	edd3 7a00 	vldr	s15, [r3]
 800b11c:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800b120:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b128:	f200 80e1 	bhi.w	800b2ee <sample_course_run+0x276>
			  dist_l = 0;
 800b12c:	4b73      	ldr	r3, [pc, #460]	; (800b2fc <sample_course_run+0x284>)
 800b12e:	f04f 0200 	mov.w	r2, #0
 800b132:	601a      	str	r2, [r3, #0]
			  drive_ready();
 800b134:	f7f9 fd9a 	bl	8004c6c <drive_ready>

			  switch(mode){
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2b07      	cmp	r3, #7
 800b13c:	f200 80d3 	bhi.w	800b2e6 <sample_course_run+0x26e>
 800b140:	a201      	add	r2, pc, #4	; (adr r2, 800b148 <sample_course_run+0xd0>)
 800b142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b146:	bf00      	nop
 800b148:	0800b169 	.word	0x0800b169
 800b14c:	0800b16f 	.word	0x0800b16f
 800b150:	0800b1bd 	.word	0x0800b1bd
 800b154:	0800b1e1 	.word	0x0800b1e1
 800b158:	0800b2e7 	.word	0x0800b2e7
 800b15c:	0800b1f3 	.word	0x0800b1f3
 800b160:	0800b26d 	.word	0x0800b26d
 800b164:	0800b2e7 	.word	0x0800b2e7
				case 0:
					get_base();
 800b168:	f007 f814 	bl	8012194 <get_base>
					break;
 800b16c:	e0bb      	b.n	800b2e6 <sample_course_run+0x26e>

				case 1:
					//----aサンプルコース1　爆速ターン連続----
					run_mode = 5;
 800b16e:	4b64      	ldr	r3, [pc, #400]	; (800b300 <sample_course_run+0x288>)
 800b170:	2205      	movs	r2, #5
 800b172:	701a      	strb	r2, [r3, #0]

					half_sectionA();
 800b174:	f7fa fd32 	bl	8005bdc <half_sectionA>
					slalom_R90();
 800b178:	f7fb fbbe 	bl	80068f8 <slalom_R90>
					slalom_L90();
 800b17c:	f7fb fd26 	bl	8006bcc <slalom_L90>
					slalom_L90();
 800b180:	f7fb fd24 	bl	8006bcc <slalom_L90>
					slalom_R90();
 800b184:	f7fb fbb8 	bl	80068f8 <slalom_R90>
					slalom_R90();
 800b188:	f7fb fbb6 	bl	80068f8 <slalom_R90>
					for(int k=0; k<5; k++){
 800b18c:	2300      	movs	r3, #0
 800b18e:	603b      	str	r3, [r7, #0]
 800b190:	e00e      	b.n	800b1b0 <sample_course_run+0x138>
						slalom_R90();
 800b192:	f7fb fbb1 	bl	80068f8 <slalom_R90>
						slalom_R90();
 800b196:	f7fb fbaf 	bl	80068f8 <slalom_R90>
						slalom_L90();
 800b19a:	f7fb fd17 	bl	8006bcc <slalom_L90>
						slalom_L90();
 800b19e:	f7fb fd15 	bl	8006bcc <slalom_L90>
						slalom_R90();
 800b1a2:	f7fb fba9 	bl	80068f8 <slalom_R90>
						slalom_R90();
 800b1a6:	f7fb fba7 	bl	80068f8 <slalom_R90>
					for(int k=0; k<5; k++){
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	3301      	adds	r3, #1
 800b1ae:	603b      	str	r3, [r7, #0]
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	2b04      	cmp	r3, #4
 800b1b4:	dded      	ble.n	800b192 <sample_course_run+0x11a>
					}
					half_sectionD();
 800b1b6:	f7fa fd77 	bl	8005ca8 <half_sectionD>
					break;
 800b1ba:	e094      	b.n	800b2e6 <sample_course_run+0x26e>

				case 2:
					//----aサンプルコース1　超信地----
					run_mode = 5;
 800b1bc:	4b50      	ldr	r3, [pc, #320]	; (800b300 <sample_course_run+0x288>)
 800b1be:	2205      	movs	r2, #5
 800b1c0:	701a      	strb	r2, [r3, #0]

					half_sectionA();
 800b1c2:	f7fa fd0b 	bl	8005bdc <half_sectionA>
					slalom_R90();
 800b1c6:	f7fb fb97 	bl	80068f8 <slalom_R90>
					slalom_L90();
 800b1ca:	f7fb fcff 	bl	8006bcc <slalom_L90>
					slalom_R90();
 800b1ce:	f7fb fb93 	bl	80068f8 <slalom_R90>
					slalom_L90();
 800b1d2:	f7fb fcfb 	bl	8006bcc <slalom_L90>
					slalom_R90();
 800b1d6:	f7fb fb8f 	bl	80068f8 <slalom_R90>
					half_sectionD();
 800b1da:	f7fa fd65 	bl	8005ca8 <half_sectionD>
					break;
 800b1de:	e082      	b.n	800b2e6 <sample_course_run+0x26e>

				case 3:
					//---aサンプルコース2　スラローム----
					half_sectionA();
 800b1e0:	f7fa fcfc 	bl	8005bdc <half_sectionA>
					slalom_R90();
 800b1e4:	f7fb fb88 	bl	80068f8 <slalom_R90>
					slalom_R90();
 800b1e8:	f7fb fb86 	bl	80068f8 <slalom_R90>
					half_sectionD();
 800b1ec:	f7fa fd5c 	bl	8005ca8 <half_sectionD>
					break;
 800b1f0:	e079      	b.n	800b2e6 <sample_course_run+0x26e>
				case 4:
					break;

				case 5:
					//----aスラローム走行&全面探索スラローム走行----
					printf("Slalom Run & All Map Run.\n");
 800b1f2:	4844      	ldr	r0, [pc, #272]	; (800b304 <sample_course_run+0x28c>)
 800b1f4:	f007 feb8 	bl	8012f68 <puts>

					MF.FLAG.SCND = 0;
 800b1f8:	4a43      	ldr	r2, [pc, #268]	; (800b308 <sample_course_run+0x290>)
 800b1fa:	8813      	ldrh	r3, [r2, #0]
 800b1fc:	f36f 1345 	bfc	r3, #5, #1
 800b200:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b202:	4a41      	ldr	r2, [pc, #260]	; (800b308 <sample_course_run+0x290>)
 800b204:	8813      	ldrh	r3, [r2, #0]
 800b206:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b20a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b20c:	4a3e      	ldr	r2, [pc, #248]	; (800b308 <sample_course_run+0x290>)
 800b20e:	8813      	ldrh	r3, [r2, #0]
 800b210:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b214:	8013      	strh	r3, [r2, #0]
					start_mode = 0;
 800b216:	4b3d      	ldr	r3, [pc, #244]	; (800b30c <sample_course_run+0x294>)
 800b218:	2200      	movs	r2, #0
 800b21a:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b21c:	4b3c      	ldr	r3, [pc, #240]	; (800b310 <sample_course_run+0x298>)
 800b21e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b222:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800b224:	4b3b      	ldr	r3, [pc, #236]	; (800b314 <sample_course_run+0x29c>)
 800b226:	f44f 7248 	mov.w	r2, #800	; 0x320
 800b22a:	801a      	strh	r2, [r3, #0]

					goal_x = GOAL_X;
 800b22c:	4b3a      	ldr	r3, [pc, #232]	; (800b318 <sample_course_run+0x2a0>)
 800b22e:	2200      	movs	r2, #0
 800b230:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b232:	4b3a      	ldr	r3, [pc, #232]	; (800b31c <sample_course_run+0x2a4>)
 800b234:	2208      	movs	r2, #8
 800b236:	701a      	strb	r2, [r3, #0]

					get_base();
 800b238:	f006 ffac 	bl	8012194 <get_base>

					searchC();
 800b23c:	f003 ffd4 	bl	800f1e8 <searchC>
					HAL_Delay(2000);
 800b240:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b244:	f7f5 feea 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b248:	4b34      	ldr	r3, [pc, #208]	; (800b31c <sample_course_run+0x2a4>)
 800b24a:	2200      	movs	r2, #0
 800b24c:	701a      	strb	r2, [r3, #0]
 800b24e:	4b33      	ldr	r3, [pc, #204]	; (800b31c <sample_course_run+0x2a4>)
 800b250:	781a      	ldrb	r2, [r3, #0]
 800b252:	4b31      	ldr	r3, [pc, #196]	; (800b318 <sample_course_run+0x2a0>)
 800b254:	701a      	strb	r2, [r3, #0]
					searchE();
 800b256:	f004 fb95 	bl	800f984 <searchE>

					searchC();
 800b25a:	f003 ffc5 	bl	800f1e8 <searchC>
					goal_x = GOAL_X;
 800b25e:	4b2e      	ldr	r3, [pc, #184]	; (800b318 <sample_course_run+0x2a0>)
 800b260:	2200      	movs	r2, #0
 800b262:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b264:	4b2d      	ldr	r3, [pc, #180]	; (800b31c <sample_course_run+0x2a4>)
 800b266:	2208      	movs	r2, #8
 800b268:	701a      	strb	r2, [r3, #0]

					break;
 800b26a:	e03c      	b.n	800b2e6 <sample_course_run+0x26e>

				case 6:
					//----aスラローム走行&全面探索スラローム走行----
					printf("Slalom Run & All Map Run.\n");
 800b26c:	4825      	ldr	r0, [pc, #148]	; (800b304 <sample_course_run+0x28c>)
 800b26e:	f007 fe7b 	bl	8012f68 <puts>

					MF.FLAG.SCND = 0;
 800b272:	4a25      	ldr	r2, [pc, #148]	; (800b308 <sample_course_run+0x290>)
 800b274:	8813      	ldrh	r3, [r2, #0]
 800b276:	f36f 1345 	bfc	r3, #5, #1
 800b27a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b27c:	4a22      	ldr	r2, [pc, #136]	; (800b308 <sample_course_run+0x290>)
 800b27e:	8813      	ldrh	r3, [r2, #0]
 800b280:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b284:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b286:	4a20      	ldr	r2, [pc, #128]	; (800b308 <sample_course_run+0x290>)
 800b288:	8813      	ldrh	r3, [r2, #0]
 800b28a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b28e:	8013      	strh	r3, [r2, #0]
					start_mode = 0;
 800b290:	4b1e      	ldr	r3, [pc, #120]	; (800b30c <sample_course_run+0x294>)
 800b292:	2200      	movs	r2, #0
 800b294:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b296:	4b1e      	ldr	r3, [pc, #120]	; (800b310 <sample_course_run+0x298>)
 800b298:	f241 3288 	movw	r2, #5000	; 0x1388
 800b29c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800b29e:	4b1d      	ldr	r3, [pc, #116]	; (800b314 <sample_course_run+0x29c>)
 800b2a0:	f44f 7248 	mov.w	r2, #800	; 0x320
 800b2a4:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800b2a6:	4b1c      	ldr	r3, [pc, #112]	; (800b318 <sample_course_run+0x2a0>)
 800b2a8:	2207      	movs	r2, #7
 800b2aa:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b2ac:	4b1b      	ldr	r3, [pc, #108]	; (800b31c <sample_course_run+0x2a4>)
 800b2ae:	2207      	movs	r2, #7
 800b2b0:	701a      	strb	r2, [r3, #0]

					get_base();
 800b2b2:	f006 ff6f 	bl	8012194 <get_base>

					searchC();
 800b2b6:	f003 ff97 	bl	800f1e8 <searchC>
					HAL_Delay(2000);
 800b2ba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b2be:	f7f5 fead 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b2c2:	4b16      	ldr	r3, [pc, #88]	; (800b31c <sample_course_run+0x2a4>)
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	701a      	strb	r2, [r3, #0]
 800b2c8:	4b14      	ldr	r3, [pc, #80]	; (800b31c <sample_course_run+0x2a4>)
 800b2ca:	781a      	ldrb	r2, [r3, #0]
 800b2cc:	4b12      	ldr	r3, [pc, #72]	; (800b318 <sample_course_run+0x2a0>)
 800b2ce:	701a      	strb	r2, [r3, #0]
					searchE();
 800b2d0:	f004 fb58 	bl	800f984 <searchE>

					searchC();
 800b2d4:	f003 ff88 	bl	800f1e8 <searchC>
					goal_x = 7;
 800b2d8:	4b0f      	ldr	r3, [pc, #60]	; (800b318 <sample_course_run+0x2a0>)
 800b2da:	2207      	movs	r2, #7
 800b2dc:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b2de:	4b0f      	ldr	r3, [pc, #60]	; (800b31c <sample_course_run+0x2a4>)
 800b2e0:	2207      	movs	r2, #7
 800b2e2:	701a      	strb	r2, [r3, #0]

					break;
 800b2e4:	bf00      	nop

				case 7:
					break;

			  }
			  dist_l = 0;
 800b2e6:	4b05      	ldr	r3, [pc, #20]	; (800b2fc <sample_course_run+0x284>)
 800b2e8:	f04f 0200 	mov.w	r2, #0
 800b2ec:	601a      	str	r2, [r3, #0]
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b2ee:	e6cc      	b.n	800b08a <sample_course_run+0x12>
 800b2f0:	08014328 	.word	0x08014328
 800b2f4:	20000b2c 	.word	0x20000b2c
 800b2f8:	080140bc 	.word	0x080140bc
 800b2fc:	20001644 	.word	0x20001644
 800b300:	20000456 	.word	0x20000456
 800b304:	08014348 	.word	0x08014348
 800b308:	20000fa8 	.word	0x20000fa8
 800b30c:	20001648 	.word	0x20001648
 800b310:	20000454 	.word	0x20000454
 800b314:	20000ffc 	.word	0x20000ffc
 800b318:	20000c30 	.word	0x20000c30
 800b31c:	20000b8c 	.word	0x20000b8c

0800b320 <slalom_run>:
//slalom_run
// aスラローム走行モード
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_run(void){
 800b320:	b580      	push	{r7, lr}
 800b322:	b082      	sub	sp, #8
 800b324:	af00      	add	r7, sp, #0

	int mode = 0;
 800b326:	2300      	movs	r3, #0
 800b328:	607b      	str	r3, [r7, #4]
	printf("Slalom Run, Mode : %d\n", mode);
 800b32a:	6879      	ldr	r1, [r7, #4]
 800b32c:	48a4      	ldr	r0, [pc, #656]	; (800b5c0 <slalom_run+0x2a0>)
 800b32e:	f007 fda7 	bl	8012e80 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	b2db      	uxtb	r3, r3
 800b336:	f003 0301 	and.w	r3, r3, #1
 800b33a:	b2d8      	uxtb	r0, r3
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	b2db      	uxtb	r3, r3
 800b340:	f003 0302 	and.w	r3, r3, #2
 800b344:	b2d9      	uxtb	r1, r3
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	b2db      	uxtb	r3, r3
 800b34a:	f003 0304 	and.w	r3, r3, #4
 800b34e:	b2db      	uxtb	r3, r3
 800b350:	461a      	mov	r2, r3
 800b352:	f006 ff77 	bl	8012244 <led_write>
		  if(dist_r >= 20){
 800b356:	4b9b      	ldr	r3, [pc, #620]	; (800b5c4 <slalom_run+0x2a4>)
 800b358:	edd3 7a00 	vldr	s15, [r3]
 800b35c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800b360:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b368:	db0f      	blt.n	800b38a <slalom_run+0x6a>
			  mode++;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	3301      	adds	r3, #1
 800b36e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800b370:	4b94      	ldr	r3, [pc, #592]	; (800b5c4 <slalom_run+0x2a4>)
 800b372:	f04f 0200 	mov.w	r2, #0
 800b376:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2b07      	cmp	r3, #7
 800b37c:	dd01      	ble.n	800b382 <slalom_run+0x62>
				  mode = 0;
 800b37e:	2300      	movs	r3, #0
 800b380:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800b382:	6879      	ldr	r1, [r7, #4]
 800b384:	4890      	ldr	r0, [pc, #576]	; (800b5c8 <slalom_run+0x2a8>)
 800b386:	f007 fd7b 	bl	8012e80 <iprintf>
		  }
		  if(dist_r <= -20){
 800b38a:	4b8e      	ldr	r3, [pc, #568]	; (800b5c4 <slalom_run+0x2a4>)
 800b38c:	edd3 7a00 	vldr	s15, [r3]
 800b390:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800b394:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b39c:	d80f      	bhi.n	800b3be <slalom_run+0x9e>
			  mode--;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	3b01      	subs	r3, #1
 800b3a2:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800b3a4:	4b87      	ldr	r3, [pc, #540]	; (800b5c4 <slalom_run+0x2a4>)
 800b3a6:	f04f 0200 	mov.w	r2, #0
 800b3aa:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	da01      	bge.n	800b3b6 <slalom_run+0x96>
				  mode = 7;
 800b3b2:	2307      	movs	r3, #7
 800b3b4:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800b3b6:	6879      	ldr	r1, [r7, #4]
 800b3b8:	4883      	ldr	r0, [pc, #524]	; (800b5c8 <slalom_run+0x2a8>)
 800b3ba:	f007 fd61 	bl	8012e80 <iprintf>
		  }
		  if(dist_l <= -20){
 800b3be:	4b83      	ldr	r3, [pc, #524]	; (800b5cc <slalom_run+0x2ac>)
 800b3c0:	edd3 7a00 	vldr	s15, [r3]
 800b3c4:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800b3c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b3cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3d0:	f200 8208 	bhi.w	800b7e4 <slalom_run+0x4c4>
			  dist_l = 0;
 800b3d4:	4b7d      	ldr	r3, [pc, #500]	; (800b5cc <slalom_run+0x2ac>)
 800b3d6:	f04f 0200 	mov.w	r2, #0
 800b3da:	601a      	str	r2, [r3, #0]
			  drive_ready();
 800b3dc:	f7f9 fc46 	bl	8004c6c <drive_ready>

			  switch(mode){
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2b07      	cmp	r3, #7
 800b3e4:	f200 81fa 	bhi.w	800b7dc <slalom_run+0x4bc>
 800b3e8:	a201      	add	r2, pc, #4	; (adr r2, 800b3f0 <slalom_run+0xd0>)
 800b3ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ee:	bf00      	nop
 800b3f0:	0800b411 	.word	0x0800b411
 800b3f4:	0800b483 	.word	0x0800b483
 800b3f8:	0800b4db 	.word	0x0800b4db
 800b3fc:	0800b54d 	.word	0x0800b54d
 800b400:	0800b5f9 	.word	0x0800b5f9
 800b404:	0800b66b 	.word	0x0800b66b
 800b408:	0800b6d5 	.word	0x0800b6d5
 800b40c:	0800b759 	.word	0x0800b759

			  case 0:
					//----a一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 800b410:	486f      	ldr	r0, [pc, #444]	; (800b5d0 <slalom_run+0x2b0>)
 800b412:	f007 fda9 	bl	8012f68 <puts>

					MF.FLAG.SCND = 0;
 800b416:	4a6f      	ldr	r2, [pc, #444]	; (800b5d4 <slalom_run+0x2b4>)
 800b418:	8813      	ldrh	r3, [r2, #0]
 800b41a:	f36f 1345 	bfc	r3, #5, #1
 800b41e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 800b420:	4a6c      	ldr	r2, [pc, #432]	; (800b5d4 <slalom_run+0x2b4>)
 800b422:	8813      	ldrh	r3, [r2, #0]
 800b424:	f36f 2349 	bfc	r3, #9, #1
 800b428:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800b42a:	4b6b      	ldr	r3, [pc, #428]	; (800b5d8 <slalom_run+0x2b8>)
 800b42c:	2202      	movs	r2, #2
 800b42e:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b430:	4b6a      	ldr	r3, [pc, #424]	; (800b5dc <slalom_run+0x2bc>)
 800b432:	2200      	movs	r2, #0
 800b434:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b436:	4b6a      	ldr	r3, [pc, #424]	; (800b5e0 <slalom_run+0x2c0>)
 800b438:	f241 3288 	movw	r2, #5000	; 0x1388
 800b43c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800b43e:	4b69      	ldr	r3, [pc, #420]	; (800b5e4 <slalom_run+0x2c4>)
 800b440:	f44f 7248 	mov.w	r2, #800	; 0x320
 800b444:	801a      	strh	r2, [r3, #0]


					goal_x = GOAL_X;
 800b446:	4b68      	ldr	r3, [pc, #416]	; (800b5e8 <slalom_run+0x2c8>)
 800b448:	2200      	movs	r2, #0
 800b44a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b44c:	4b67      	ldr	r3, [pc, #412]	; (800b5ec <slalom_run+0x2cc>)
 800b44e:	2208      	movs	r2, #8
 800b450:	701a      	strb	r2, [r3, #0]

					get_base();
 800b452:	f006 fe9f 	bl	8012194 <get_base>

					searchC();
 800b456:	f003 fec7 	bl	800f1e8 <searchC>
					HAL_Delay(2000);
 800b45a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b45e:	f7f5 fddd 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b462:	4b62      	ldr	r3, [pc, #392]	; (800b5ec <slalom_run+0x2cc>)
 800b464:	2200      	movs	r2, #0
 800b466:	701a      	strb	r2, [r3, #0]
 800b468:	4b60      	ldr	r3, [pc, #384]	; (800b5ec <slalom_run+0x2cc>)
 800b46a:	781a      	ldrb	r2, [r3, #0]
 800b46c:	4b5e      	ldr	r3, [pc, #376]	; (800b5e8 <slalom_run+0x2c8>)
 800b46e:	701a      	strb	r2, [r3, #0]
					searchC();
 800b470:	f003 feba 	bl	800f1e8 <searchC>

					goal_x = GOAL_X;
 800b474:	4b5c      	ldr	r3, [pc, #368]	; (800b5e8 <slalom_run+0x2c8>)
 800b476:	2200      	movs	r2, #0
 800b478:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b47a:	4b5c      	ldr	r3, [pc, #368]	; (800b5ec <slalom_run+0x2cc>)
 800b47c:	2208      	movs	r2, #8
 800b47e:	701a      	strb	r2, [r3, #0]
					break;
 800b480:	e1ac      	b.n	800b7dc <slalom_run+0x4bc>

				case 1:
					//----a二次探索スラローム走行----
					printf("Second Run. (Slalom)\n");
 800b482:	485b      	ldr	r0, [pc, #364]	; (800b5f0 <slalom_run+0x2d0>)
 800b484:	f007 fd70 	bl	8012f68 <puts>

					MF.FLAG.SCND = 1;
 800b488:	4a52      	ldr	r2, [pc, #328]	; (800b5d4 <slalom_run+0x2b4>)
 800b48a:	8813      	ldrh	r3, [r2, #0]
 800b48c:	f043 0320 	orr.w	r3, r3, #32
 800b490:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800b492:	4b51      	ldr	r3, [pc, #324]	; (800b5d8 <slalom_run+0x2b8>)
 800b494:	2202      	movs	r2, #2
 800b496:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b498:	4b50      	ldr	r3, [pc, #320]	; (800b5dc <slalom_run+0x2bc>)
 800b49a:	2200      	movs	r2, #0
 800b49c:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800b49e:	4b52      	ldr	r3, [pc, #328]	; (800b5e8 <slalom_run+0x2c8>)
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b4a4:	4b51      	ldr	r3, [pc, #324]	; (800b5ec <slalom_run+0x2cc>)
 800b4a6:	2208      	movs	r2, #8
 800b4a8:	701a      	strb	r2, [r3, #0]

					get_base();
 800b4aa:	f006 fe73 	bl	8012194 <get_base>

					searchC();
 800b4ae:	f003 fe9b 	bl	800f1e8 <searchC>
					HAL_Delay(2000);
 800b4b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b4b6:	f7f5 fdb1 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b4ba:	4b4c      	ldr	r3, [pc, #304]	; (800b5ec <slalom_run+0x2cc>)
 800b4bc:	2200      	movs	r2, #0
 800b4be:	701a      	strb	r2, [r3, #0]
 800b4c0:	4b4a      	ldr	r3, [pc, #296]	; (800b5ec <slalom_run+0x2cc>)
 800b4c2:	781a      	ldrb	r2, [r3, #0]
 800b4c4:	4b48      	ldr	r3, [pc, #288]	; (800b5e8 <slalom_run+0x2c8>)
 800b4c6:	701a      	strb	r2, [r3, #0]
					searchC();
 800b4c8:	f003 fe8e 	bl	800f1e8 <searchC>

					goal_x = GOAL_X;
 800b4cc:	4b46      	ldr	r3, [pc, #280]	; (800b5e8 <slalom_run+0x2c8>)
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b4d2:	4b46      	ldr	r3, [pc, #280]	; (800b5ec <slalom_run+0x2cc>)
 800b4d4:	2208      	movs	r2, #8
 800b4d6:	701a      	strb	r2, [r3, #0]
					break;
 800b4d8:	e180      	b.n	800b7dc <slalom_run+0x4bc>

				case 2:
					//----a二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 800b4da:	4846      	ldr	r0, [pc, #280]	; (800b5f4 <slalom_run+0x2d4>)
 800b4dc:	f007 fd44 	bl	8012f68 <puts>

					MF.FLAG.SCND = 1;
 800b4e0:	4a3c      	ldr	r2, [pc, #240]	; (800b5d4 <slalom_run+0x2b4>)
 800b4e2:	8813      	ldrh	r3, [r2, #0]
 800b4e4:	f043 0320 	orr.w	r3, r3, #32
 800b4e8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b4ea:	4a3a      	ldr	r2, [pc, #232]	; (800b5d4 <slalom_run+0x2b4>)
 800b4ec:	8813      	ldrh	r3, [r2, #0]
 800b4ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b4f2:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800b4f4:	4b38      	ldr	r3, [pc, #224]	; (800b5d8 <slalom_run+0x2b8>)
 800b4f6:	2202      	movs	r2, #2
 800b4f8:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b4fa:	4b38      	ldr	r3, [pc, #224]	; (800b5dc <slalom_run+0x2bc>)
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b500:	4b37      	ldr	r3, [pc, #220]	; (800b5e0 <slalom_run+0x2c0>)
 800b502:	f241 3288 	movw	r2, #5000	; 0x1388
 800b506:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 600;
 800b508:	4b36      	ldr	r3, [pc, #216]	; (800b5e4 <slalom_run+0x2c4>)
 800b50a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b50e:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800b510:	4b35      	ldr	r3, [pc, #212]	; (800b5e8 <slalom_run+0x2c8>)
 800b512:	2200      	movs	r2, #0
 800b514:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b516:	4b35      	ldr	r3, [pc, #212]	; (800b5ec <slalom_run+0x2cc>)
 800b518:	2208      	movs	r2, #8
 800b51a:	701a      	strb	r2, [r3, #0]

					get_base();
 800b51c:	f006 fe3a 	bl	8012194 <get_base>

					searchD();
 800b520:	f004 f946 	bl	800f7b0 <searchD>
					HAL_Delay(2000);
 800b524:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b528:	f7f5 fd78 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b52c:	4b2f      	ldr	r3, [pc, #188]	; (800b5ec <slalom_run+0x2cc>)
 800b52e:	2200      	movs	r2, #0
 800b530:	701a      	strb	r2, [r3, #0]
 800b532:	4b2e      	ldr	r3, [pc, #184]	; (800b5ec <slalom_run+0x2cc>)
 800b534:	781a      	ldrb	r2, [r3, #0]
 800b536:	4b2c      	ldr	r3, [pc, #176]	; (800b5e8 <slalom_run+0x2c8>)
 800b538:	701a      	strb	r2, [r3, #0]
					searchD();
 800b53a:	f004 f939 	bl	800f7b0 <searchD>

					goal_x = GOAL_X;
 800b53e:	4b2a      	ldr	r3, [pc, #168]	; (800b5e8 <slalom_run+0x2c8>)
 800b540:	2200      	movs	r2, #0
 800b542:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b544:	4b29      	ldr	r3, [pc, #164]	; (800b5ec <slalom_run+0x2cc>)
 800b546:	2208      	movs	r2, #8
 800b548:	701a      	strb	r2, [r3, #0]
					break;
 800b54a:	e147      	b.n	800b7dc <slalom_run+0x4bc>

				case 3:
					//----a二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 800b54c:	4829      	ldr	r0, [pc, #164]	; (800b5f4 <slalom_run+0x2d4>)
 800b54e:	f007 fd0b 	bl	8012f68 <puts>

					MF.FLAG.SCND = 1;
 800b552:	4a20      	ldr	r2, [pc, #128]	; (800b5d4 <slalom_run+0x2b4>)
 800b554:	8813      	ldrh	r3, [r2, #0]
 800b556:	f043 0320 	orr.w	r3, r3, #32
 800b55a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b55c:	4a1d      	ldr	r2, [pc, #116]	; (800b5d4 <slalom_run+0x2b4>)
 800b55e:	8813      	ldrh	r3, [r2, #0]
 800b560:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b564:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800b566:	4b1c      	ldr	r3, [pc, #112]	; (800b5d8 <slalom_run+0x2b8>)
 800b568:	2202      	movs	r2, #2
 800b56a:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b56c:	4b1b      	ldr	r3, [pc, #108]	; (800b5dc <slalom_run+0x2bc>)
 800b56e:	2200      	movs	r2, #0
 800b570:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b572:	4b1b      	ldr	r3, [pc, #108]	; (800b5e0 <slalom_run+0x2c0>)
 800b574:	f241 3288 	movw	r2, #5000	; 0x1388
 800b578:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800b57a:	4b1a      	ldr	r3, [pc, #104]	; (800b5e4 <slalom_run+0x2c4>)
 800b57c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b580:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800b582:	4b19      	ldr	r3, [pc, #100]	; (800b5e8 <slalom_run+0x2c8>)
 800b584:	2200      	movs	r2, #0
 800b586:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b588:	4b18      	ldr	r3, [pc, #96]	; (800b5ec <slalom_run+0x2cc>)
 800b58a:	2208      	movs	r2, #8
 800b58c:	701a      	strb	r2, [r3, #0]

					get_base();
 800b58e:	f006 fe01 	bl	8012194 <get_base>

					searchD();
 800b592:	f004 f90d 	bl	800f7b0 <searchD>
					HAL_Delay(2000);
 800b596:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b59a:	f7f5 fd3f 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b59e:	4b13      	ldr	r3, [pc, #76]	; (800b5ec <slalom_run+0x2cc>)
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	701a      	strb	r2, [r3, #0]
 800b5a4:	4b11      	ldr	r3, [pc, #68]	; (800b5ec <slalom_run+0x2cc>)
 800b5a6:	781a      	ldrb	r2, [r3, #0]
 800b5a8:	4b0f      	ldr	r3, [pc, #60]	; (800b5e8 <slalom_run+0x2c8>)
 800b5aa:	701a      	strb	r2, [r3, #0]
					searchD();
 800b5ac:	f004 f900 	bl	800f7b0 <searchD>

					goal_x = GOAL_X;
 800b5b0:	4b0d      	ldr	r3, [pc, #52]	; (800b5e8 <slalom_run+0x2c8>)
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b5b6:	4b0d      	ldr	r3, [pc, #52]	; (800b5ec <slalom_run+0x2cc>)
 800b5b8:	2208      	movs	r2, #8
 800b5ba:	701a      	strb	r2, [r3, #0]
					break;
 800b5bc:	e10e      	b.n	800b7dc <slalom_run+0x4bc>
 800b5be:	bf00      	nop
 800b5c0:	080143bc 	.word	0x080143bc
 800b5c4:	20000b2c 	.word	0x20000b2c
 800b5c8:	080140bc 	.word	0x080140bc
 800b5cc:	20001644 	.word	0x20001644
 800b5d0:	0801429c 	.word	0x0801429c
 800b5d4:	20000fa8 	.word	0x20000fa8
 800b5d8:	20000456 	.word	0x20000456
 800b5dc:	20001648 	.word	0x20001648
 800b5e0:	20000454 	.word	0x20000454
 800b5e4:	20000ffc 	.word	0x20000ffc
 800b5e8:	20000c30 	.word	0x20000c30
 800b5ec:	20000b8c 	.word	0x20000b8c
 800b5f0:	080143d4 	.word	0x080143d4
 800b5f4:	080143ec 	.word	0x080143ec

				case 4:
					//----a二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 800b5f8:	487b      	ldr	r0, [pc, #492]	; (800b7e8 <slalom_run+0x4c8>)
 800b5fa:	f007 fcb5 	bl	8012f68 <puts>

					MF.FLAG.SCND = 1;
 800b5fe:	4a7b      	ldr	r2, [pc, #492]	; (800b7ec <slalom_run+0x4cc>)
 800b600:	8813      	ldrh	r3, [r2, #0]
 800b602:	f043 0320 	orr.w	r3, r3, #32
 800b606:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b608:	4a78      	ldr	r2, [pc, #480]	; (800b7ec <slalom_run+0x4cc>)
 800b60a:	8813      	ldrh	r3, [r2, #0]
 800b60c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b610:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800b612:	4b77      	ldr	r3, [pc, #476]	; (800b7f0 <slalom_run+0x4d0>)
 800b614:	2202      	movs	r2, #2
 800b616:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b618:	4b76      	ldr	r3, [pc, #472]	; (800b7f4 <slalom_run+0x4d4>)
 800b61a:	2200      	movs	r2, #0
 800b61c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b61e:	4b76      	ldr	r3, [pc, #472]	; (800b7f8 <slalom_run+0x4d8>)
 800b620:	f241 3288 	movw	r2, #5000	; 0x1388
 800b624:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1500;
 800b626:	4b75      	ldr	r3, [pc, #468]	; (800b7fc <slalom_run+0x4dc>)
 800b628:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b62c:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800b62e:	4b74      	ldr	r3, [pc, #464]	; (800b800 <slalom_run+0x4e0>)
 800b630:	2200      	movs	r2, #0
 800b632:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b634:	4b73      	ldr	r3, [pc, #460]	; (800b804 <slalom_run+0x4e4>)
 800b636:	2208      	movs	r2, #8
 800b638:	701a      	strb	r2, [r3, #0]

					get_base();
 800b63a:	f006 fdab 	bl	8012194 <get_base>

					searchD();
 800b63e:	f004 f8b7 	bl	800f7b0 <searchD>
					HAL_Delay(2000);
 800b642:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b646:	f7f5 fce9 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b64a:	4b6e      	ldr	r3, [pc, #440]	; (800b804 <slalom_run+0x4e4>)
 800b64c:	2200      	movs	r2, #0
 800b64e:	701a      	strb	r2, [r3, #0]
 800b650:	4b6c      	ldr	r3, [pc, #432]	; (800b804 <slalom_run+0x4e4>)
 800b652:	781a      	ldrb	r2, [r3, #0]
 800b654:	4b6a      	ldr	r3, [pc, #424]	; (800b800 <slalom_run+0x4e0>)
 800b656:	701a      	strb	r2, [r3, #0]
					searchD();
 800b658:	f004 f8aa 	bl	800f7b0 <searchD>

					goal_x = GOAL_X;
 800b65c:	4b68      	ldr	r3, [pc, #416]	; (800b800 <slalom_run+0x4e0>)
 800b65e:	2200      	movs	r2, #0
 800b660:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b662:	4b68      	ldr	r3, [pc, #416]	; (800b804 <slalom_run+0x4e4>)
 800b664:	2208      	movs	r2, #8
 800b666:	701a      	strb	r2, [r3, #0]
					break;
 800b668:	e0b8      	b.n	800b7dc <slalom_run+0x4bc>

				case 5:
					//----a二次走行スラローム+直線優先----
					printf("High Speed Run. (Slalom)\n");
 800b66a:	4867      	ldr	r0, [pc, #412]	; (800b808 <slalom_run+0x4e8>)
 800b66c:	f007 fc7c 	bl	8012f68 <puts>

					MF.FLAG.SCND = 1;
 800b670:	4a5e      	ldr	r2, [pc, #376]	; (800b7ec <slalom_run+0x4cc>)
 800b672:	8813      	ldrh	r3, [r2, #0]
 800b674:	f043 0320 	orr.w	r3, r3, #32
 800b678:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b67a:	4a5c      	ldr	r2, [pc, #368]	; (800b7ec <slalom_run+0x4cc>)
 800b67c:	8813      	ldrh	r3, [r2, #0]
 800b67e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b682:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800b684:	4b5a      	ldr	r3, [pc, #360]	; (800b7f0 <slalom_run+0x4d0>)
 800b686:	2202      	movs	r2, #2
 800b688:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b68a:	4b5a      	ldr	r3, [pc, #360]	; (800b7f4 <slalom_run+0x4d4>)
 800b68c:	2200      	movs	r2, #0
 800b68e:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800b690:	4b5b      	ldr	r3, [pc, #364]	; (800b800 <slalom_run+0x4e0>)
 800b692:	2200      	movs	r2, #0
 800b694:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b696:	4b5b      	ldr	r3, [pc, #364]	; (800b804 <slalom_run+0x4e4>)
 800b698:	2208      	movs	r2, #8
 800b69a:	701a      	strb	r2, [r3, #0]

					get_base();
 800b69c:	f006 fd7a 	bl	8012194 <get_base>

					HAL_Delay(5000);
 800b6a0:	f241 3088 	movw	r0, #5000	; 0x1388
 800b6a4:	f7f5 fcba 	bl	800101c <HAL_Delay>
					searchC();
 800b6a8:	f003 fd9e 	bl	800f1e8 <searchC>
					HAL_Delay(2000);
 800b6ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b6b0:	f7f5 fcb4 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b6b4:	4b53      	ldr	r3, [pc, #332]	; (800b804 <slalom_run+0x4e4>)
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	701a      	strb	r2, [r3, #0]
 800b6ba:	4b52      	ldr	r3, [pc, #328]	; (800b804 <slalom_run+0x4e4>)
 800b6bc:	781a      	ldrb	r2, [r3, #0]
 800b6be:	4b50      	ldr	r3, [pc, #320]	; (800b800 <slalom_run+0x4e0>)
 800b6c0:	701a      	strb	r2, [r3, #0]
					searchC();
 800b6c2:	f003 fd91 	bl	800f1e8 <searchC>

					goal_x = GOAL_X;
 800b6c6:	4b4e      	ldr	r3, [pc, #312]	; (800b800 <slalom_run+0x4e0>)
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b6cc:	4b4d      	ldr	r3, [pc, #308]	; (800b804 <slalom_run+0x4e4>)
 800b6ce:	2208      	movs	r2, #8
 800b6d0:	701a      	strb	r2, [r3, #0]
					break;
 800b6d2:	e083      	b.n	800b7dc <slalom_run+0x4bc>

				case 6:
					//----a二次走行スラロームHigh Speed+直線優先+既知区間加速----
					printf("High Speed Run. (Slalom)\n");
 800b6d4:	484c      	ldr	r0, [pc, #304]	; (800b808 <slalom_run+0x4e8>)
 800b6d6:	f007 fc47 	bl	8012f68 <puts>

					MF.FLAG.SCND = 1;
 800b6da:	4a44      	ldr	r2, [pc, #272]	; (800b7ec <slalom_run+0x4cc>)
 800b6dc:	8813      	ldrh	r3, [r2, #0]
 800b6de:	f043 0320 	orr.w	r3, r3, #32
 800b6e2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b6e4:	4a41      	ldr	r2, [pc, #260]	; (800b7ec <slalom_run+0x4cc>)
 800b6e6:	8813      	ldrh	r3, [r2, #0]
 800b6e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b6ec:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b6ee:	4a3f      	ldr	r2, [pc, #252]	; (800b7ec <slalom_run+0x4cc>)
 800b6f0:	8813      	ldrh	r3, [r2, #0]
 800b6f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b6f6:	8013      	strh	r3, [r2, #0]
					run_mode = 3;
 800b6f8:	4b3d      	ldr	r3, [pc, #244]	; (800b7f0 <slalom_run+0x4d0>)
 800b6fa:	2203      	movs	r2, #3
 800b6fc:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b6fe:	4b3d      	ldr	r3, [pc, #244]	; (800b7f4 <slalom_run+0x4d4>)
 800b700:	2200      	movs	r2, #0
 800b702:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b704:	4b3c      	ldr	r3, [pc, #240]	; (800b7f8 <slalom_run+0x4d8>)
 800b706:	f241 3288 	movw	r2, #5000	; 0x1388
 800b70a:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800b70c:	4b3b      	ldr	r3, [pc, #236]	; (800b7fc <slalom_run+0x4dc>)
 800b70e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b712:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800b714:	4b3a      	ldr	r3, [pc, #232]	; (800b800 <slalom_run+0x4e0>)
 800b716:	2200      	movs	r2, #0
 800b718:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b71a:	4b3a      	ldr	r3, [pc, #232]	; (800b804 <slalom_run+0x4e4>)
 800b71c:	2208      	movs	r2, #8
 800b71e:	701a      	strb	r2, [r3, #0]

					get_base();
 800b720:	f006 fd38 	bl	8012194 <get_base>

					HAL_Delay(5000);
 800b724:	f241 3088 	movw	r0, #5000	; 0x1388
 800b728:	f7f5 fc78 	bl	800101c <HAL_Delay>
					searchD();
 800b72c:	f004 f840 	bl	800f7b0 <searchD>
					HAL_Delay(2000);
 800b730:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b734:	f7f5 fc72 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b738:	4b32      	ldr	r3, [pc, #200]	; (800b804 <slalom_run+0x4e4>)
 800b73a:	2200      	movs	r2, #0
 800b73c:	701a      	strb	r2, [r3, #0]
 800b73e:	4b31      	ldr	r3, [pc, #196]	; (800b804 <slalom_run+0x4e4>)
 800b740:	781a      	ldrb	r2, [r3, #0]
 800b742:	4b2f      	ldr	r3, [pc, #188]	; (800b800 <slalom_run+0x4e0>)
 800b744:	701a      	strb	r2, [r3, #0]
					searchD();
 800b746:	f004 f833 	bl	800f7b0 <searchD>

					goal_x = GOAL_X;
 800b74a:	4b2d      	ldr	r3, [pc, #180]	; (800b800 <slalom_run+0x4e0>)
 800b74c:	2200      	movs	r2, #0
 800b74e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b750:	4b2c      	ldr	r3, [pc, #176]	; (800b804 <slalom_run+0x4e4>)
 800b752:	2208      	movs	r2, #8
 800b754:	701a      	strb	r2, [r3, #0]
					break;
 800b756:	e041      	b.n	800b7dc <slalom_run+0x4bc>

				case 7:
					//----a二次走行スラロームHigh Speed+直線優先+既知区間加速----
					printf("High Speed Run. (Slalom)\n");
 800b758:	482b      	ldr	r0, [pc, #172]	; (800b808 <slalom_run+0x4e8>)
 800b75a:	f007 fc05 	bl	8012f68 <puts>

					MF.FLAG.SCND = 1;
 800b75e:	4a23      	ldr	r2, [pc, #140]	; (800b7ec <slalom_run+0x4cc>)
 800b760:	8813      	ldrh	r3, [r2, #0]
 800b762:	f043 0320 	orr.w	r3, r3, #32
 800b766:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b768:	4a20      	ldr	r2, [pc, #128]	; (800b7ec <slalom_run+0x4cc>)
 800b76a:	8813      	ldrh	r3, [r2, #0]
 800b76c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b770:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b772:	4a1e      	ldr	r2, [pc, #120]	; (800b7ec <slalom_run+0x4cc>)
 800b774:	8813      	ldrh	r3, [r2, #0]
 800b776:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b77a:	8013      	strh	r3, [r2, #0]
					run_mode = 3;
 800b77c:	4b1c      	ldr	r3, [pc, #112]	; (800b7f0 <slalom_run+0x4d0>)
 800b77e:	2203      	movs	r2, #3
 800b780:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b782:	4b1c      	ldr	r3, [pc, #112]	; (800b7f4 <slalom_run+0x4d4>)
 800b784:	2200      	movs	r2, #0
 800b786:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b788:	4b1b      	ldr	r3, [pc, #108]	; (800b7f8 <slalom_run+0x4d8>)
 800b78a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b78e:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800b790:	4b1a      	ldr	r3, [pc, #104]	; (800b7fc <slalom_run+0x4dc>)
 800b792:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b796:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800b798:	4b19      	ldr	r3, [pc, #100]	; (800b800 <slalom_run+0x4e0>)
 800b79a:	2200      	movs	r2, #0
 800b79c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b79e:	4b19      	ldr	r3, [pc, #100]	; (800b804 <slalom_run+0x4e4>)
 800b7a0:	2208      	movs	r2, #8
 800b7a2:	701a      	strb	r2, [r3, #0]

					get_base();
 800b7a4:	f006 fcf6 	bl	8012194 <get_base>

					HAL_Delay(5000);
 800b7a8:	f241 3088 	movw	r0, #5000	; 0x1388
 800b7ac:	f7f5 fc36 	bl	800101c <HAL_Delay>
					searchD();
 800b7b0:	f003 fffe 	bl	800f7b0 <searchD>
					HAL_Delay(2000);
 800b7b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b7b8:	f7f5 fc30 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b7bc:	4b11      	ldr	r3, [pc, #68]	; (800b804 <slalom_run+0x4e4>)
 800b7be:	2200      	movs	r2, #0
 800b7c0:	701a      	strb	r2, [r3, #0]
 800b7c2:	4b10      	ldr	r3, [pc, #64]	; (800b804 <slalom_run+0x4e4>)
 800b7c4:	781a      	ldrb	r2, [r3, #0]
 800b7c6:	4b0e      	ldr	r3, [pc, #56]	; (800b800 <slalom_run+0x4e0>)
 800b7c8:	701a      	strb	r2, [r3, #0]
					searchD();
 800b7ca:	f003 fff1 	bl	800f7b0 <searchD>

					goal_x = GOAL_X;
 800b7ce:	4b0c      	ldr	r3, [pc, #48]	; (800b800 <slalom_run+0x4e0>)
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b7d4:	4b0b      	ldr	r3, [pc, #44]	; (800b804 <slalom_run+0x4e4>)
 800b7d6:	2208      	movs	r2, #8
 800b7d8:	701a      	strb	r2, [r3, #0]
					break;
 800b7da:	bf00      	nop

			  }
			  dist_l = 0;
 800b7dc:	4b0b      	ldr	r3, [pc, #44]	; (800b80c <slalom_run+0x4ec>)
 800b7de:	f04f 0200 	mov.w	r2, #0
 800b7e2:	601a      	str	r2, [r3, #0]
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b7e4:	e5a5      	b.n	800b332 <slalom_run+0x12>
 800b7e6:	bf00      	nop
 800b7e8:	080143ec 	.word	0x080143ec
 800b7ec:	20000fa8 	.word	0x20000fa8
 800b7f0:	20000456 	.word	0x20000456
 800b7f4:	20001648 	.word	0x20001648
 800b7f8:	20000454 	.word	0x20000454
 800b7fc:	20000ffc 	.word	0x20000ffc
 800b800:	20000c30 	.word	0x20000c30
 800b804:	20000b8c 	.word	0x20000b8c
 800b808:	08014408 	.word	0x08014408
 800b80c:	20001644 	.word	0x20001644

0800b810 <perfect_run>:
//perfect_run
// a本番用走行モード
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_run(void){
 800b810:	b580      	push	{r7, lr}
 800b812:	b082      	sub	sp, #8
 800b814:	af00      	add	r7, sp, #0

	int mode = 0;
 800b816:	2300      	movs	r3, #0
 800b818:	607b      	str	r3, [r7, #4]
	printf("Perfect Run, Mode : %d\n", mode);
 800b81a:	6879      	ldr	r1, [r7, #4]
 800b81c:	48a7      	ldr	r0, [pc, #668]	; (800babc <perfect_run+0x2ac>)
 800b81e:	f007 fb2f 	bl	8012e80 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	b2db      	uxtb	r3, r3
 800b826:	f003 0301 	and.w	r3, r3, #1
 800b82a:	b2d8      	uxtb	r0, r3
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	b2db      	uxtb	r3, r3
 800b830:	f003 0302 	and.w	r3, r3, #2
 800b834:	b2d9      	uxtb	r1, r3
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	b2db      	uxtb	r3, r3
 800b83a:	f003 0304 	and.w	r3, r3, #4
 800b83e:	b2db      	uxtb	r3, r3
 800b840:	461a      	mov	r2, r3
 800b842:	f006 fcff 	bl	8012244 <led_write>
		  if(dist_r >= 20){
 800b846:	4b9e      	ldr	r3, [pc, #632]	; (800bac0 <perfect_run+0x2b0>)
 800b848:	edd3 7a00 	vldr	s15, [r3]
 800b84c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800b850:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b858:	db0f      	blt.n	800b87a <perfect_run+0x6a>
			  mode++;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	3301      	adds	r3, #1
 800b85e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800b860:	4b97      	ldr	r3, [pc, #604]	; (800bac0 <perfect_run+0x2b0>)
 800b862:	f04f 0200 	mov.w	r2, #0
 800b866:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2b07      	cmp	r3, #7
 800b86c:	dd01      	ble.n	800b872 <perfect_run+0x62>
				  mode = 0;
 800b86e:	2300      	movs	r3, #0
 800b870:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800b872:	6879      	ldr	r1, [r7, #4]
 800b874:	4893      	ldr	r0, [pc, #588]	; (800bac4 <perfect_run+0x2b4>)
 800b876:	f007 fb03 	bl	8012e80 <iprintf>
		  }
		  if(dist_r <= -20){
 800b87a:	4b91      	ldr	r3, [pc, #580]	; (800bac0 <perfect_run+0x2b0>)
 800b87c:	edd3 7a00 	vldr	s15, [r3]
 800b880:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800b884:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b88c:	d80f      	bhi.n	800b8ae <perfect_run+0x9e>
			  mode--;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	3b01      	subs	r3, #1
 800b892:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800b894:	4b8a      	ldr	r3, [pc, #552]	; (800bac0 <perfect_run+0x2b0>)
 800b896:	f04f 0200 	mov.w	r2, #0
 800b89a:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	da01      	bge.n	800b8a6 <perfect_run+0x96>
				  mode = 7;
 800b8a2:	2307      	movs	r3, #7
 800b8a4:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800b8a6:	6879      	ldr	r1, [r7, #4]
 800b8a8:	4886      	ldr	r0, [pc, #536]	; (800bac4 <perfect_run+0x2b4>)
 800b8aa:	f007 fae9 	bl	8012e80 <iprintf>
		  }
		  if(dist_l <= -20){
 800b8ae:	4b86      	ldr	r3, [pc, #536]	; (800bac8 <perfect_run+0x2b8>)
 800b8b0:	edd3 7a00 	vldr	s15, [r3]
 800b8b4:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800b8b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b8bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8c0:	f200 8261 	bhi.w	800bd86 <perfect_run+0x576>
			  dist_l = 0;
 800b8c4:	4b80      	ldr	r3, [pc, #512]	; (800bac8 <perfect_run+0x2b8>)
 800b8c6:	f04f 0200 	mov.w	r2, #0
 800b8ca:	601a      	str	r2, [r3, #0]
			  drive_ready();
 800b8cc:	f7f9 f9ce 	bl	8004c6c <drive_ready>
			  switch(mode){
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2b07      	cmp	r3, #7
 800b8d4:	f200 8253 	bhi.w	800bd7e <perfect_run+0x56e>
 800b8d8:	a201      	add	r2, pc, #4	; (adr r2, 800b8e0 <perfect_run+0xd0>)
 800b8da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8de:	bf00      	nop
 800b8e0:	0800b901 	.word	0x0800b901
 800b8e4:	0800b983 	.word	0x0800b983
 800b8e8:	0800ba39 	.word	0x0800ba39
 800b8ec:	0800baf5 	.word	0x0800baf5
 800b8f0:	0800bb77 	.word	0x0800bb77
 800b8f4:	0800bbf9 	.word	0x0800bbf9
 800b8f8:	0800bc7b 	.word	0x0800bc7b
 800b8fc:	0800bcfd 	.word	0x0800bcfd

				case 0:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800b900:	4872      	ldr	r0, [pc, #456]	; (800bacc <perfect_run+0x2bc>)
 800b902:	f007 fb31 	bl	8012f68 <puts>
					MF.FLAG.SCND = 0;
 800b906:	4a72      	ldr	r2, [pc, #456]	; (800bad0 <perfect_run+0x2c0>)
 800b908:	8813      	ldrh	r3, [r2, #0]
 800b90a:	f36f 1345 	bfc	r3, #5, #1
 800b90e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b910:	4a6f      	ldr	r2, [pc, #444]	; (800bad0 <perfect_run+0x2c0>)
 800b912:	8813      	ldrh	r3, [r2, #0]
 800b914:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b918:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800b91a:	4a6d      	ldr	r2, [pc, #436]	; (800bad0 <perfect_run+0x2c0>)
 800b91c:	8813      	ldrh	r3, [r2, #0]
 800b91e:	f36f 238a 	bfc	r3, #10, #1
 800b922:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800b924:	4b6b      	ldr	r3, [pc, #428]	; (800bad4 <perfect_run+0x2c4>)
 800b926:	2202      	movs	r2, #2
 800b928:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b92a:	4b6b      	ldr	r3, [pc, #428]	; (800bad8 <perfect_run+0x2c8>)
 800b92c:	2200      	movs	r2, #0
 800b92e:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b930:	4b6a      	ldr	r3, [pc, #424]	; (800badc <perfect_run+0x2cc>)
 800b932:	2202      	movs	r2, #2
 800b934:	701a      	strb	r2, [r3, #0]
					accel_hs = 4000;
 800b936:	4b6a      	ldr	r3, [pc, #424]	; (800bae0 <perfect_run+0x2d0>)
 800b938:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800b93c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800b93e:	4b69      	ldr	r3, [pc, #420]	; (800bae4 <perfect_run+0x2d4>)
 800b940:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b944:	801a      	strh	r2, [r3, #0]

					goal_x = GOAL_X;
 800b946:	4b68      	ldr	r3, [pc, #416]	; (800bae8 <perfect_run+0x2d8>)
 800b948:	2200      	movs	r2, #0
 800b94a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b94c:	4b67      	ldr	r3, [pc, #412]	; (800baec <perfect_run+0x2dc>)
 800b94e:	2208      	movs	r2, #8
 800b950:	701a      	strb	r2, [r3, #0]

					get_base();
 800b952:	f006 fc1f 	bl	8012194 <get_base>

					searchC();
 800b956:	f003 fc47 	bl	800f1e8 <searchC>
					HAL_Delay(2000);
 800b95a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b95e:	f7f5 fb5d 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b962:	4b62      	ldr	r3, [pc, #392]	; (800baec <perfect_run+0x2dc>)
 800b964:	2200      	movs	r2, #0
 800b966:	701a      	strb	r2, [r3, #0]
 800b968:	4b60      	ldr	r3, [pc, #384]	; (800baec <perfect_run+0x2dc>)
 800b96a:	781a      	ldrb	r2, [r3, #0]
 800b96c:	4b5e      	ldr	r3, [pc, #376]	; (800bae8 <perfect_run+0x2d8>)
 800b96e:	701a      	strb	r2, [r3, #0]
					searchC();
 800b970:	f003 fc3a 	bl	800f1e8 <searchC>

					goal_x = GOAL_X;
 800b974:	4b5c      	ldr	r3, [pc, #368]	; (800bae8 <perfect_run+0x2d8>)
 800b976:	2200      	movs	r2, #0
 800b978:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b97a:	4b5c      	ldr	r3, [pc, #368]	; (800baec <perfect_run+0x2dc>)
 800b97c:	2208      	movs	r2, #8
 800b97e:	701a      	strb	r2, [r3, #0]
					break;
 800b980:	e1fd      	b.n	800bd7e <perfect_run+0x56e>

				case 1:
					//----a一次重ね探索スラローム走行----
					printf("First Run.\n");
 800b982:	4852      	ldr	r0, [pc, #328]	; (800bacc <perfect_run+0x2bc>)
 800b984:	f007 faf0 	bl	8012f68 <puts>
					MF.FLAG.SCND = 0;
 800b988:	4a51      	ldr	r2, [pc, #324]	; (800bad0 <perfect_run+0x2c0>)
 800b98a:	8813      	ldrh	r3, [r2, #0]
 800b98c:	f36f 1345 	bfc	r3, #5, #1
 800b990:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b992:	4a4f      	ldr	r2, [pc, #316]	; (800bad0 <perfect_run+0x2c0>)
 800b994:	8813      	ldrh	r3, [r2, #0]
 800b996:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b99a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800b99c:	4a4c      	ldr	r2, [pc, #304]	; (800bad0 <perfect_run+0x2c0>)
 800b99e:	8813      	ldrh	r3, [r2, #0]
 800b9a0:	f36f 238a 	bfc	r3, #10, #1
 800b9a4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.SRC2 = 1;
 800b9a6:	4a4a      	ldr	r2, [pc, #296]	; (800bad0 <perfect_run+0x2c0>)
 800b9a8:	8813      	ldrh	r3, [r2, #0]
 800b9aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9ae:	8013      	strh	r3, [r2, #0]

					run_mode = 2;
 800b9b0:	4b48      	ldr	r3, [pc, #288]	; (800bad4 <perfect_run+0x2c4>)
 800b9b2:	2202      	movs	r2, #2
 800b9b4:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b9b6:	4b48      	ldr	r3, [pc, #288]	; (800bad8 <perfect_run+0x2c8>)
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b9bc:	4b47      	ldr	r3, [pc, #284]	; (800badc <perfect_run+0x2cc>)
 800b9be:	2202      	movs	r2, #2
 800b9c0:	701a      	strb	r2, [r3, #0]
					accel_hs = 4000;
 800b9c2:	4b47      	ldr	r3, [pc, #284]	; (800bae0 <perfect_run+0x2d0>)
 800b9c4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800b9c8:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800b9ca:	4b46      	ldr	r3, [pc, #280]	; (800bae4 <perfect_run+0x2d4>)
 800b9cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b9d0:	801a      	strh	r2, [r3, #0]

					goal_x = GOAL_X;
 800b9d2:	4b45      	ldr	r3, [pc, #276]	; (800bae8 <perfect_run+0x2d8>)
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b9d8:	4b44      	ldr	r3, [pc, #272]	; (800baec <perfect_run+0x2dc>)
 800b9da:	2208      	movs	r2, #8
 800b9dc:	701a      	strb	r2, [r3, #0]

					get_base();
 800b9de:	f006 fbd9 	bl	8012194 <get_base>

					searchC2();
 800b9e2:	f003 fd73 	bl	800f4cc <searchC2>
					start_mode = 1;
 800b9e6:	4b3c      	ldr	r3, [pc, #240]	; (800bad8 <perfect_run+0x2c8>)
 800b9e8:	2201      	movs	r2, #1
 800b9ea:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800b9ec:	4b3b      	ldr	r3, [pc, #236]	; (800badc <perfect_run+0x2cc>)
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	701a      	strb	r2, [r3, #0]

					HAL_Delay(2000);
 800b9f2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b9f6:	f7f5 fb11 	bl	800101c <HAL_Delay>

					rotate_180();											//180度回転
 800b9fa:	f7fa fea5 	bl	8006748 <rotate_180>
					MF.FLAG.SCND = 1;
 800b9fe:	4a34      	ldr	r2, [pc, #208]	; (800bad0 <perfect_run+0x2c0>)
 800ba00:	8813      	ldrh	r3, [r2, #0]
 800ba02:	f043 0320 	orr.w	r3, r3, #32
 800ba06:	8013      	strh	r3, [r2, #0]
					MF.FLAG.SRC2 = 0;
 800ba08:	4a31      	ldr	r2, [pc, #196]	; (800bad0 <perfect_run+0x2c0>)
 800ba0a:	8813      	ldrh	r3, [r2, #0]
 800ba0c:	f36f 1386 	bfc	r3, #6, #1
 800ba10:	8013      	strh	r3, [r2, #0]
					goal_x = goal_y = 0;
 800ba12:	4b36      	ldr	r3, [pc, #216]	; (800baec <perfect_run+0x2dc>)
 800ba14:	2200      	movs	r2, #0
 800ba16:	701a      	strb	r2, [r3, #0]
 800ba18:	4b34      	ldr	r3, [pc, #208]	; (800baec <perfect_run+0x2dc>)
 800ba1a:	781a      	ldrb	r2, [r3, #0]
 800ba1c:	4b32      	ldr	r3, [pc, #200]	; (800bae8 <perfect_run+0x2d8>)
 800ba1e:	701a      	strb	r2, [r3, #0]
					run_mode = 3;
 800ba20:	4b2c      	ldr	r3, [pc, #176]	; (800bad4 <perfect_run+0x2c4>)
 800ba22:	2203      	movs	r2, #3
 800ba24:	701a      	strb	r2, [r3, #0]
					searchF3();
 800ba26:	f004 f859 	bl	800fadc <searchF3>

					goal_x = GOAL_X;
 800ba2a:	4b2f      	ldr	r3, [pc, #188]	; (800bae8 <perfect_run+0x2d8>)
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ba30:	4b2e      	ldr	r3, [pc, #184]	; (800baec <perfect_run+0x2dc>)
 800ba32:	2208      	movs	r2, #8
 800ba34:	701a      	strb	r2, [r3, #0]
					break;
 800ba36:	e1a2      	b.n	800bd7e <perfect_run+0x56e>

				case 2:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-2.\n");
 800ba38:	482d      	ldr	r0, [pc, #180]	; (800baf0 <perfect_run+0x2e0>)
 800ba3a:	f007 fa95 	bl	8012f68 <puts>
					MF.FLAG.SCND = 1;
 800ba3e:	4a24      	ldr	r2, [pc, #144]	; (800bad0 <perfect_run+0x2c0>)
 800ba40:	8813      	ldrh	r3, [r2, #0]
 800ba42:	f043 0320 	orr.w	r3, r3, #32
 800ba46:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ba48:	4a21      	ldr	r2, [pc, #132]	; (800bad0 <perfect_run+0x2c0>)
 800ba4a:	8813      	ldrh	r3, [r2, #0]
 800ba4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ba50:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800ba52:	4a1f      	ldr	r2, [pc, #124]	; (800bad0 <perfect_run+0x2c0>)
 800ba54:	8813      	ldrh	r3, [r2, #0]
 800ba56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ba5a:	8013      	strh	r3, [r2, #0]
					run_mode = 3;
 800ba5c:	4b1d      	ldr	r3, [pc, #116]	; (800bad4 <perfect_run+0x2c4>)
 800ba5e:	2203      	movs	r2, #3
 800ba60:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800ba62:	4b1d      	ldr	r3, [pc, #116]	; (800bad8 <perfect_run+0x2c8>)
 800ba64:	2200      	movs	r2, #0
 800ba66:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800ba68:	4b1c      	ldr	r3, [pc, #112]	; (800badc <perfect_run+0x2cc>)
 800ba6a:	2202      	movs	r2, #2
 800ba6c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800ba6e:	4b1c      	ldr	r3, [pc, #112]	; (800bae0 <perfect_run+0x2d0>)
 800ba70:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba74:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800ba76:	4b1b      	ldr	r3, [pc, #108]	; (800bae4 <perfect_run+0x2d4>)
 800ba78:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ba7c:	801a      	strh	r2, [r3, #0]

//					pass_mode = 3;						//a半区画ベースでroute配列生成

					goal_x = GOAL_X;
 800ba7e:	4b1a      	ldr	r3, [pc, #104]	; (800bae8 <perfect_run+0x2d8>)
 800ba80:	2200      	movs	r2, #0
 800ba82:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ba84:	4b19      	ldr	r3, [pc, #100]	; (800baec <perfect_run+0x2dc>)
 800ba86:	2208      	movs	r2, #8
 800ba88:	701a      	strb	r2, [r3, #0]

					get_base();
 800ba8a:	f006 fb83 	bl	8012194 <get_base>

					searchF3();
 800ba8e:	f004 f825 	bl	800fadc <searchF3>
					HAL_Delay(2000);
 800ba92:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ba96:	f7f5 fac1 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ba9a:	4b14      	ldr	r3, [pc, #80]	; (800baec <perfect_run+0x2dc>)
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	701a      	strb	r2, [r3, #0]
 800baa0:	4b12      	ldr	r3, [pc, #72]	; (800baec <perfect_run+0x2dc>)
 800baa2:	781a      	ldrb	r2, [r3, #0]
 800baa4:	4b10      	ldr	r3, [pc, #64]	; (800bae8 <perfect_run+0x2d8>)
 800baa6:	701a      	strb	r2, [r3, #0]
					searchF3();
 800baa8:	f004 f818 	bl	800fadc <searchF3>

					goal_x = GOAL_X;
 800baac:	4b0e      	ldr	r3, [pc, #56]	; (800bae8 <perfect_run+0x2d8>)
 800baae:	2200      	movs	r2, #0
 800bab0:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bab2:	4b0e      	ldr	r3, [pc, #56]	; (800baec <perfect_run+0x2dc>)
 800bab4:	2208      	movs	r2, #8
 800bab6:	701a      	strb	r2, [r3, #0]
					break;
 800bab8:	e161      	b.n	800bd7e <perfect_run+0x56e>
 800baba:	bf00      	nop
 800babc:	08014424 	.word	0x08014424
 800bac0:	20000b2c 	.word	0x20000b2c
 800bac4:	080140bc 	.word	0x080140bc
 800bac8:	20001644 	.word	0x20001644
 800bacc:	0801437c 	.word	0x0801437c
 800bad0:	20000fa8 	.word	0x20000fa8
 800bad4:	20000456 	.word	0x20000456
 800bad8:	20001648 	.word	0x20001648
 800badc:	20000c31 	.word	0x20000c31
 800bae0:	20000454 	.word	0x20000454
 800bae4:	20000ffc 	.word	0x20000ffc
 800bae8:	20000c30 	.word	0x20000c30
 800baec:	20000b8c 	.word	0x20000b8c
 800baf0:	080142b0 	.word	0x080142b0

				case 3:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High High Speed----
					printf("pass press 3-2.\n");
 800baf4:	48a4      	ldr	r0, [pc, #656]	; (800bd88 <perfect_run+0x578>)
 800baf6:	f007 fa37 	bl	8012f68 <puts>
					MF.FLAG.SCND = 1;
 800bafa:	4aa4      	ldr	r2, [pc, #656]	; (800bd8c <perfect_run+0x57c>)
 800bafc:	8813      	ldrh	r3, [r2, #0]
 800bafe:	f043 0320 	orr.w	r3, r3, #32
 800bb02:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bb04:	4aa1      	ldr	r2, [pc, #644]	; (800bd8c <perfect_run+0x57c>)
 800bb06:	8813      	ldrh	r3, [r2, #0]
 800bb08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bb0c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bb0e:	4a9f      	ldr	r2, [pc, #636]	; (800bd8c <perfect_run+0x57c>)
 800bb10:	8813      	ldrh	r3, [r2, #0]
 800bb12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bb16:	8013      	strh	r3, [r2, #0]
					run_mode = 4;
 800bb18:	4b9d      	ldr	r3, [pc, #628]	; (800bd90 <perfect_run+0x580>)
 800bb1a:	2204      	movs	r2, #4
 800bb1c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bb1e:	4b9d      	ldr	r3, [pc, #628]	; (800bd94 <perfect_run+0x584>)
 800bb20:	2200      	movs	r2, #0
 800bb22:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bb24:	4b9c      	ldr	r3, [pc, #624]	; (800bd98 <perfect_run+0x588>)
 800bb26:	2202      	movs	r2, #2
 800bb28:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800bb2a:	4b9c      	ldr	r3, [pc, #624]	; (800bd9c <perfect_run+0x58c>)
 800bb2c:	f242 7210 	movw	r2, #10000	; 0x2710
 800bb30:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800bb32:	4b9b      	ldr	r3, [pc, #620]	; (800bda0 <perfect_run+0x590>)
 800bb34:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800bb38:	801a      	strh	r2, [r3, #0]

//					pass_mode = 3;						//a半区画ベースでroute配列生成

					goal_x = GOAL_X;
 800bb3a:	4b9a      	ldr	r3, [pc, #616]	; (800bda4 <perfect_run+0x594>)
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bb40:	4b99      	ldr	r3, [pc, #612]	; (800bda8 <perfect_run+0x598>)
 800bb42:	2208      	movs	r2, #8
 800bb44:	701a      	strb	r2, [r3, #0]

					get_base();
 800bb46:	f006 fb25 	bl	8012194 <get_base>

					searchF3();
 800bb4a:	f003 ffc7 	bl	800fadc <searchF3>
					HAL_Delay(2000);
 800bb4e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bb52:	f7f5 fa63 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bb56:	4b94      	ldr	r3, [pc, #592]	; (800bda8 <perfect_run+0x598>)
 800bb58:	2200      	movs	r2, #0
 800bb5a:	701a      	strb	r2, [r3, #0]
 800bb5c:	4b92      	ldr	r3, [pc, #584]	; (800bda8 <perfect_run+0x598>)
 800bb5e:	781a      	ldrb	r2, [r3, #0]
 800bb60:	4b90      	ldr	r3, [pc, #576]	; (800bda4 <perfect_run+0x594>)
 800bb62:	701a      	strb	r2, [r3, #0]
					searchF3();
 800bb64:	f003 ffba 	bl	800fadc <searchF3>

					goal_x = GOAL_X;
 800bb68:	4b8e      	ldr	r3, [pc, #568]	; (800bda4 <perfect_run+0x594>)
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bb6e:	4b8e      	ldr	r3, [pc, #568]	; (800bda8 <perfect_run+0x598>)
 800bb70:	2208      	movs	r2, #8
 800bb72:	701a      	strb	r2, [r3, #0]
					break;
 800bb74:	e103      	b.n	800bd7e <perfect_run+0x56e>

				case 4:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High High Speed----
					printf("pass press 3-2.\n");
 800bb76:	4884      	ldr	r0, [pc, #528]	; (800bd88 <perfect_run+0x578>)
 800bb78:	f007 f9f6 	bl	8012f68 <puts>
					MF.FLAG.SCND = 1;
 800bb7c:	4a83      	ldr	r2, [pc, #524]	; (800bd8c <perfect_run+0x57c>)
 800bb7e:	8813      	ldrh	r3, [r2, #0]
 800bb80:	f043 0320 	orr.w	r3, r3, #32
 800bb84:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bb86:	4a81      	ldr	r2, [pc, #516]	; (800bd8c <perfect_run+0x57c>)
 800bb88:	8813      	ldrh	r3, [r2, #0]
 800bb8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bb8e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bb90:	4a7e      	ldr	r2, [pc, #504]	; (800bd8c <perfect_run+0x57c>)
 800bb92:	8813      	ldrh	r3, [r2, #0]
 800bb94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bb98:	8013      	strh	r3, [r2, #0]
					run_mode = 4;
 800bb9a:	4b7d      	ldr	r3, [pc, #500]	; (800bd90 <perfect_run+0x580>)
 800bb9c:	2204      	movs	r2, #4
 800bb9e:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bba0:	4b7c      	ldr	r3, [pc, #496]	; (800bd94 <perfect_run+0x584>)
 800bba2:	2200      	movs	r2, #0
 800bba4:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bba6:	4b7c      	ldr	r3, [pc, #496]	; (800bd98 <perfect_run+0x588>)
 800bba8:	2202      	movs	r2, #2
 800bbaa:	701a      	strb	r2, [r3, #0]
					accel_hs = 15000;
 800bbac:	4b7b      	ldr	r3, [pc, #492]	; (800bd9c <perfect_run+0x58c>)
 800bbae:	f643 2298 	movw	r2, #15000	; 0x3a98
 800bbb2:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2500;
 800bbb4:	4b7a      	ldr	r3, [pc, #488]	; (800bda0 <perfect_run+0x590>)
 800bbb6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800bbba:	801a      	strh	r2, [r3, #0]

//					pass_mode = 3;						//a半区画ベースでroute配列生成

					goal_x = GOAL_X;
 800bbbc:	4b79      	ldr	r3, [pc, #484]	; (800bda4 <perfect_run+0x594>)
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bbc2:	4b79      	ldr	r3, [pc, #484]	; (800bda8 <perfect_run+0x598>)
 800bbc4:	2208      	movs	r2, #8
 800bbc6:	701a      	strb	r2, [r3, #0]

					get_base();
 800bbc8:	f006 fae4 	bl	8012194 <get_base>

					searchF3();
 800bbcc:	f003 ff86 	bl	800fadc <searchF3>
					HAL_Delay(2000);
 800bbd0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bbd4:	f7f5 fa22 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bbd8:	4b73      	ldr	r3, [pc, #460]	; (800bda8 <perfect_run+0x598>)
 800bbda:	2200      	movs	r2, #0
 800bbdc:	701a      	strb	r2, [r3, #0]
 800bbde:	4b72      	ldr	r3, [pc, #456]	; (800bda8 <perfect_run+0x598>)
 800bbe0:	781a      	ldrb	r2, [r3, #0]
 800bbe2:	4b70      	ldr	r3, [pc, #448]	; (800bda4 <perfect_run+0x594>)
 800bbe4:	701a      	strb	r2, [r3, #0]
					searchF3();
 800bbe6:	f003 ff79 	bl	800fadc <searchF3>

					goal_x = GOAL_X;
 800bbea:	4b6e      	ldr	r3, [pc, #440]	; (800bda4 <perfect_run+0x594>)
 800bbec:	2200      	movs	r2, #0
 800bbee:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bbf0:	4b6d      	ldr	r3, [pc, #436]	; (800bda8 <perfect_run+0x598>)
 800bbf2:	2208      	movs	r2, #8
 800bbf4:	701a      	strb	r2, [r3, #0]
					break;
 800bbf6:	e0c2      	b.n	800bd7e <perfect_run+0x56e>

				case 5:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-4.\n");
 800bbf8:	486c      	ldr	r0, [pc, #432]	; (800bdac <perfect_run+0x59c>)
 800bbfa:	f007 f9b5 	bl	8012f68 <puts>
					MF.FLAG.SCND = 1;
 800bbfe:	4a63      	ldr	r2, [pc, #396]	; (800bd8c <perfect_run+0x57c>)
 800bc00:	8813      	ldrh	r3, [r2, #0]
 800bc02:	f043 0320 	orr.w	r3, r3, #32
 800bc06:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bc08:	4a60      	ldr	r2, [pc, #384]	; (800bd8c <perfect_run+0x57c>)
 800bc0a:	8813      	ldrh	r3, [r2, #0]
 800bc0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bc10:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bc12:	4a5e      	ldr	r2, [pc, #376]	; (800bd8c <perfect_run+0x57c>)
 800bc14:	8813      	ldrh	r3, [r2, #0]
 800bc16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bc1a:	8013      	strh	r3, [r2, #0]
					run_mode = 5;
 800bc1c:	4b5c      	ldr	r3, [pc, #368]	; (800bd90 <perfect_run+0x580>)
 800bc1e:	2205      	movs	r2, #5
 800bc20:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bc22:	4b5c      	ldr	r3, [pc, #368]	; (800bd94 <perfect_run+0x584>)
 800bc24:	2200      	movs	r2, #0
 800bc26:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bc28:	4b5b      	ldr	r3, [pc, #364]	; (800bd98 <perfect_run+0x588>)
 800bc2a:	2202      	movs	r2, #2
 800bc2c:	701a      	strb	r2, [r3, #0]
					accel_hs = 25000;
 800bc2e:	4b5b      	ldr	r3, [pc, #364]	; (800bd9c <perfect_run+0x58c>)
 800bc30:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800bc34:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 3000;
 800bc36:	4b5a      	ldr	r3, [pc, #360]	; (800bda0 <perfect_run+0x590>)
 800bc38:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800bc3c:	801a      	strh	r2, [r3, #0]

//					pass_mode = 3;						//a半区画ベースでroute配列生成

					goal_x = GOAL_X;
 800bc3e:	4b59      	ldr	r3, [pc, #356]	; (800bda4 <perfect_run+0x594>)
 800bc40:	2200      	movs	r2, #0
 800bc42:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bc44:	4b58      	ldr	r3, [pc, #352]	; (800bda8 <perfect_run+0x598>)
 800bc46:	2208      	movs	r2, #8
 800bc48:	701a      	strb	r2, [r3, #0]

					get_base();
 800bc4a:	f006 faa3 	bl	8012194 <get_base>

					searchF3();
 800bc4e:	f003 ff45 	bl	800fadc <searchF3>
					HAL_Delay(2000);
 800bc52:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bc56:	f7f5 f9e1 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bc5a:	4b53      	ldr	r3, [pc, #332]	; (800bda8 <perfect_run+0x598>)
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	701a      	strb	r2, [r3, #0]
 800bc60:	4b51      	ldr	r3, [pc, #324]	; (800bda8 <perfect_run+0x598>)
 800bc62:	781a      	ldrb	r2, [r3, #0]
 800bc64:	4b4f      	ldr	r3, [pc, #316]	; (800bda4 <perfect_run+0x594>)
 800bc66:	701a      	strb	r2, [r3, #0]
					searchF3();
 800bc68:	f003 ff38 	bl	800fadc <searchF3>

					goal_x = GOAL_X;
 800bc6c:	4b4d      	ldr	r3, [pc, #308]	; (800bda4 <perfect_run+0x594>)
 800bc6e:	2200      	movs	r2, #0
 800bc70:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bc72:	4b4d      	ldr	r3, [pc, #308]	; (800bda8 <perfect_run+0x598>)
 800bc74:	2208      	movs	r2, #8
 800bc76:	701a      	strb	r2, [r3, #0]
					break;
 800bc78:	e081      	b.n	800bd7e <perfect_run+0x56e>

				case 6:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-4.\n");
 800bc7a:	484c      	ldr	r0, [pc, #304]	; (800bdac <perfect_run+0x59c>)
 800bc7c:	f007 f974 	bl	8012f68 <puts>
					MF.FLAG.SCND = 1;
 800bc80:	4a42      	ldr	r2, [pc, #264]	; (800bd8c <perfect_run+0x57c>)
 800bc82:	8813      	ldrh	r3, [r2, #0]
 800bc84:	f043 0320 	orr.w	r3, r3, #32
 800bc88:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bc8a:	4a40      	ldr	r2, [pc, #256]	; (800bd8c <perfect_run+0x57c>)
 800bc8c:	8813      	ldrh	r3, [r2, #0]
 800bc8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bc92:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bc94:	4a3d      	ldr	r2, [pc, #244]	; (800bd8c <perfect_run+0x57c>)
 800bc96:	8813      	ldrh	r3, [r2, #0]
 800bc98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bc9c:	8013      	strh	r3, [r2, #0]
					run_mode = 5;
 800bc9e:	4b3c      	ldr	r3, [pc, #240]	; (800bd90 <perfect_run+0x580>)
 800bca0:	2205      	movs	r2, #5
 800bca2:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bca4:	4b3b      	ldr	r3, [pc, #236]	; (800bd94 <perfect_run+0x584>)
 800bca6:	2200      	movs	r2, #0
 800bca8:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bcaa:	4b3b      	ldr	r3, [pc, #236]	; (800bd98 <perfect_run+0x588>)
 800bcac:	2202      	movs	r2, #2
 800bcae:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800bcb0:	4b3a      	ldr	r3, [pc, #232]	; (800bd9c <perfect_run+0x58c>)
 800bcb2:	f242 7210 	movw	r2, #10000	; 0x2710
 800bcb6:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800bcb8:	4b39      	ldr	r3, [pc, #228]	; (800bda0 <perfect_run+0x590>)
 800bcba:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800bcbe:	801a      	strh	r2, [r3, #0]

//					pass_mode = 3;						//a半区画ベースでroute配列生成

					goal_x = GOAL_X;
 800bcc0:	4b38      	ldr	r3, [pc, #224]	; (800bda4 <perfect_run+0x594>)
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bcc6:	4b38      	ldr	r3, [pc, #224]	; (800bda8 <perfect_run+0x598>)
 800bcc8:	2208      	movs	r2, #8
 800bcca:	701a      	strb	r2, [r3, #0]

					get_base();
 800bccc:	f006 fa62 	bl	8012194 <get_base>

					searchF3();
 800bcd0:	f003 ff04 	bl	800fadc <searchF3>
					HAL_Delay(2000);
 800bcd4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bcd8:	f7f5 f9a0 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bcdc:	4b32      	ldr	r3, [pc, #200]	; (800bda8 <perfect_run+0x598>)
 800bcde:	2200      	movs	r2, #0
 800bce0:	701a      	strb	r2, [r3, #0]
 800bce2:	4b31      	ldr	r3, [pc, #196]	; (800bda8 <perfect_run+0x598>)
 800bce4:	781a      	ldrb	r2, [r3, #0]
 800bce6:	4b2f      	ldr	r3, [pc, #188]	; (800bda4 <perfect_run+0x594>)
 800bce8:	701a      	strb	r2, [r3, #0]
					searchF3();
 800bcea:	f003 fef7 	bl	800fadc <searchF3>

					goal_x = GOAL_X;
 800bcee:	4b2d      	ldr	r3, [pc, #180]	; (800bda4 <perfect_run+0x594>)
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bcf4:	4b2c      	ldr	r3, [pc, #176]	; (800bda8 <perfect_run+0x598>)
 800bcf6:	2208      	movs	r2, #8
 800bcf8:	701a      	strb	r2, [r3, #0]
					break;
 800bcfa:	e040      	b.n	800bd7e <perfect_run+0x56e>

				case 7:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-4.\n");
 800bcfc:	482b      	ldr	r0, [pc, #172]	; (800bdac <perfect_run+0x59c>)
 800bcfe:	f007 f933 	bl	8012f68 <puts>
					MF.FLAG.SCND = 1;
 800bd02:	4a22      	ldr	r2, [pc, #136]	; (800bd8c <perfect_run+0x57c>)
 800bd04:	8813      	ldrh	r3, [r2, #0]
 800bd06:	f043 0320 	orr.w	r3, r3, #32
 800bd0a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bd0c:	4a1f      	ldr	r2, [pc, #124]	; (800bd8c <perfect_run+0x57c>)
 800bd0e:	8813      	ldrh	r3, [r2, #0]
 800bd10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bd14:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bd16:	4a1d      	ldr	r2, [pc, #116]	; (800bd8c <perfect_run+0x57c>)
 800bd18:	8813      	ldrh	r3, [r2, #0]
 800bd1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bd1e:	8013      	strh	r3, [r2, #0]
					run_mode = 5;
 800bd20:	4b1b      	ldr	r3, [pc, #108]	; (800bd90 <perfect_run+0x580>)
 800bd22:	2205      	movs	r2, #5
 800bd24:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bd26:	4b1b      	ldr	r3, [pc, #108]	; (800bd94 <perfect_run+0x584>)
 800bd28:	2200      	movs	r2, #0
 800bd2a:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bd2c:	4b1a      	ldr	r3, [pc, #104]	; (800bd98 <perfect_run+0x588>)
 800bd2e:	2202      	movs	r2, #2
 800bd30:	701a      	strb	r2, [r3, #0]
					accel_hs = 22000;
 800bd32:	4b1a      	ldr	r3, [pc, #104]	; (800bd9c <perfect_run+0x58c>)
 800bd34:	f245 52f0 	movw	r2, #22000	; 0x55f0
 800bd38:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 3000;
 800bd3a:	4b19      	ldr	r3, [pc, #100]	; (800bda0 <perfect_run+0x590>)
 800bd3c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800bd40:	801a      	strh	r2, [r3, #0]

//					pass_mode = 3;						//a半区画ベースでroute配列生成

					goal_x = GOAL_X;
 800bd42:	4b18      	ldr	r3, [pc, #96]	; (800bda4 <perfect_run+0x594>)
 800bd44:	2200      	movs	r2, #0
 800bd46:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bd48:	4b17      	ldr	r3, [pc, #92]	; (800bda8 <perfect_run+0x598>)
 800bd4a:	2208      	movs	r2, #8
 800bd4c:	701a      	strb	r2, [r3, #0]

					get_base();
 800bd4e:	f006 fa21 	bl	8012194 <get_base>

					searchF3();
 800bd52:	f003 fec3 	bl	800fadc <searchF3>
					HAL_Delay(2000);
 800bd56:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bd5a:	f7f5 f95f 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bd5e:	4b12      	ldr	r3, [pc, #72]	; (800bda8 <perfect_run+0x598>)
 800bd60:	2200      	movs	r2, #0
 800bd62:	701a      	strb	r2, [r3, #0]
 800bd64:	4b10      	ldr	r3, [pc, #64]	; (800bda8 <perfect_run+0x598>)
 800bd66:	781a      	ldrb	r2, [r3, #0]
 800bd68:	4b0e      	ldr	r3, [pc, #56]	; (800bda4 <perfect_run+0x594>)
 800bd6a:	701a      	strb	r2, [r3, #0]
					searchF3();
 800bd6c:	f003 feb6 	bl	800fadc <searchF3>

					goal_x = GOAL_X;
 800bd70:	4b0c      	ldr	r3, [pc, #48]	; (800bda4 <perfect_run+0x594>)
 800bd72:	2200      	movs	r2, #0
 800bd74:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bd76:	4b0c      	ldr	r3, [pc, #48]	; (800bda8 <perfect_run+0x598>)
 800bd78:	2208      	movs	r2, #8
 800bd7a:	701a      	strb	r2, [r3, #0]
					break;
 800bd7c:	bf00      	nop
			  }
			  dist_l = 0;
 800bd7e:	4b0c      	ldr	r3, [pc, #48]	; (800bdb0 <perfect_run+0x5a0>)
 800bd80:	f04f 0200 	mov.w	r2, #0
 800bd84:	601a      	str	r2, [r3, #0]
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800bd86:	e54c      	b.n	800b822 <perfect_run+0x12>
 800bd88:	080142b0 	.word	0x080142b0
 800bd8c:	20000fa8 	.word	0x20000fa8
 800bd90:	20000456 	.word	0x20000456
 800bd94:	20001648 	.word	0x20001648
 800bd98:	20000c31 	.word	0x20000c31
 800bd9c:	20000454 	.word	0x20000454
 800bda0:	20000ffc 	.word	0x20000ffc
 800bda4:	20000c30 	.word	0x20000c30
 800bda8:	20000b8c 	.word	0x20000b8c
 800bdac:	080142d0 	.word	0x080142d0
 800bdb0:	20001644 	.word	0x20001644

0800bdb4 <perfect_slalom>:
//perfect_slalom
// a本番用スラローム走行モード
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_slalom(void){
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b082      	sub	sp, #8
 800bdb8:	af00      	add	r7, sp, #0

	int mode = 0;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	607b      	str	r3, [r7, #4]
	printf("Perfect Slalom, Mode : %d\n", mode);
 800bdbe:	6879      	ldr	r1, [r7, #4]
 800bdc0:	48b6      	ldr	r0, [pc, #728]	; (800c09c <perfect_slalom+0x2e8>)
 800bdc2:	f007 f85d 	bl	8012e80 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	b2db      	uxtb	r3, r3
 800bdca:	f003 0301 	and.w	r3, r3, #1
 800bdce:	b2d8      	uxtb	r0, r3
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	b2db      	uxtb	r3, r3
 800bdd4:	f003 0302 	and.w	r3, r3, #2
 800bdd8:	b2d9      	uxtb	r1, r3
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	b2db      	uxtb	r3, r3
 800bdde:	f003 0304 	and.w	r3, r3, #4
 800bde2:	b2db      	uxtb	r3, r3
 800bde4:	461a      	mov	r2, r3
 800bde6:	f006 fa2d 	bl	8012244 <led_write>
		  if(dist_r >= 20){
 800bdea:	4bad      	ldr	r3, [pc, #692]	; (800c0a0 <perfect_slalom+0x2ec>)
 800bdec:	edd3 7a00 	vldr	s15, [r3]
 800bdf0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800bdf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bdf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdfc:	db0f      	blt.n	800be1e <perfect_slalom+0x6a>
			  mode++;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	3301      	adds	r3, #1
 800be02:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800be04:	4ba6      	ldr	r3, [pc, #664]	; (800c0a0 <perfect_slalom+0x2ec>)
 800be06:	f04f 0200 	mov.w	r2, #0
 800be0a:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2b07      	cmp	r3, #7
 800be10:	dd01      	ble.n	800be16 <perfect_slalom+0x62>
				  mode = 0;
 800be12:	2300      	movs	r3, #0
 800be14:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800be16:	6879      	ldr	r1, [r7, #4]
 800be18:	48a2      	ldr	r0, [pc, #648]	; (800c0a4 <perfect_slalom+0x2f0>)
 800be1a:	f007 f831 	bl	8012e80 <iprintf>
		  }
		  if(dist_r <= -20){
 800be1e:	4ba0      	ldr	r3, [pc, #640]	; (800c0a0 <perfect_slalom+0x2ec>)
 800be20:	edd3 7a00 	vldr	s15, [r3]
 800be24:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800be28:	eef4 7ac7 	vcmpe.f32	s15, s14
 800be2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be30:	d80f      	bhi.n	800be52 <perfect_slalom+0x9e>
			  mode--;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	3b01      	subs	r3, #1
 800be36:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800be38:	4b99      	ldr	r3, [pc, #612]	; (800c0a0 <perfect_slalom+0x2ec>)
 800be3a:	f04f 0200 	mov.w	r2, #0
 800be3e:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2b00      	cmp	r3, #0
 800be44:	da01      	bge.n	800be4a <perfect_slalom+0x96>
				  mode = 7;
 800be46:	2307      	movs	r3, #7
 800be48:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800be4a:	6879      	ldr	r1, [r7, #4]
 800be4c:	4895      	ldr	r0, [pc, #596]	; (800c0a4 <perfect_slalom+0x2f0>)
 800be4e:	f007 f817 	bl	8012e80 <iprintf>
		  }
		  if(dist_l <= -20){
 800be52:	4b95      	ldr	r3, [pc, #596]	; (800c0a8 <perfect_slalom+0x2f4>)
 800be54:	edd3 7a00 	vldr	s15, [r3]
 800be58:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800be5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800be60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be64:	f200 81c1 	bhi.w	800c1ea <perfect_slalom+0x436>
			  dist_l = 0;
 800be68:	4b8f      	ldr	r3, [pc, #572]	; (800c0a8 <perfect_slalom+0x2f4>)
 800be6a:	f04f 0200 	mov.w	r2, #0
 800be6e:	601a      	str	r2, [r3, #0]
			  drive_ready();
 800be70:	f7f8 fefc 	bl	8004c6c <drive_ready>

			  switch(mode){
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2b07      	cmp	r3, #7
 800be78:	f200 81b3 	bhi.w	800c1e2 <perfect_slalom+0x42e>
 800be7c:	a201      	add	r2, pc, #4	; (adr r2, 800be84 <perfect_slalom+0xd0>)
 800be7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be82:	bf00      	nop
 800be84:	0800c1e3 	.word	0x0800c1e3
 800be88:	0800bea5 	.word	0x0800bea5
 800be8c:	0800bf27 	.word	0x0800bf27
 800be90:	0800bfa9 	.word	0x0800bfa9
 800be94:	0800c01b 	.word	0x0800c01b
 800be98:	0800c0d9 	.word	0x0800c0d9
 800be9c:	0800c15b 	.word	0x0800c15b
 800bea0:	0800c1dd 	.word	0x0800c1dd
				case 0:
					break;

				case 1:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800bea4:	4881      	ldr	r0, [pc, #516]	; (800c0ac <perfect_slalom+0x2f8>)
 800bea6:	f007 f85f 	bl	8012f68 <puts>
					MF.FLAG.SCND = 0;
 800beaa:	4a81      	ldr	r2, [pc, #516]	; (800c0b0 <perfect_slalom+0x2fc>)
 800beac:	8813      	ldrh	r3, [r2, #0]
 800beae:	f36f 1345 	bfc	r3, #5, #1
 800beb2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800beb4:	4a7e      	ldr	r2, [pc, #504]	; (800c0b0 <perfect_slalom+0x2fc>)
 800beb6:	8813      	ldrh	r3, [r2, #0]
 800beb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bebc:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800bebe:	4a7c      	ldr	r2, [pc, #496]	; (800c0b0 <perfect_slalom+0x2fc>)
 800bec0:	8813      	ldrh	r3, [r2, #0]
 800bec2:	f36f 238a 	bfc	r3, #10, #1
 800bec6:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800bec8:	4b7a      	ldr	r3, [pc, #488]	; (800c0b4 <perfect_slalom+0x300>)
 800beca:	2202      	movs	r2, #2
 800becc:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bece:	4b7a      	ldr	r3, [pc, #488]	; (800c0b8 <perfect_slalom+0x304>)
 800bed0:	2200      	movs	r2, #0
 800bed2:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bed4:	4b79      	ldr	r3, [pc, #484]	; (800c0bc <perfect_slalom+0x308>)
 800bed6:	2202      	movs	r2, #2
 800bed8:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800beda:	4b79      	ldr	r3, [pc, #484]	; (800c0c0 <perfect_slalom+0x30c>)
 800bedc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bee0:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800bee2:	4b78      	ldr	r3, [pc, #480]	; (800c0c4 <perfect_slalom+0x310>)
 800bee4:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800bee8:	801a      	strh	r2, [r3, #0]

					goal_x = 7;
 800beea:	4b77      	ldr	r3, [pc, #476]	; (800c0c8 <perfect_slalom+0x314>)
 800beec:	2207      	movs	r2, #7
 800beee:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bef0:	4b76      	ldr	r3, [pc, #472]	; (800c0cc <perfect_slalom+0x318>)
 800bef2:	2207      	movs	r2, #7
 800bef4:	701a      	strb	r2, [r3, #0]

					get_base();
 800bef6:	f006 f94d 	bl	8012194 <get_base>

					searchC();
 800befa:	f003 f975 	bl	800f1e8 <searchC>
					HAL_Delay(2000);
 800befe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bf02:	f7f5 f88b 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bf06:	4b71      	ldr	r3, [pc, #452]	; (800c0cc <perfect_slalom+0x318>)
 800bf08:	2200      	movs	r2, #0
 800bf0a:	701a      	strb	r2, [r3, #0]
 800bf0c:	4b6f      	ldr	r3, [pc, #444]	; (800c0cc <perfect_slalom+0x318>)
 800bf0e:	781a      	ldrb	r2, [r3, #0]
 800bf10:	4b6d      	ldr	r3, [pc, #436]	; (800c0c8 <perfect_slalom+0x314>)
 800bf12:	701a      	strb	r2, [r3, #0]
					searchC();
 800bf14:	f003 f968 	bl	800f1e8 <searchC>

					goal_x = 7;
 800bf18:	4b6b      	ldr	r3, [pc, #428]	; (800c0c8 <perfect_slalom+0x314>)
 800bf1a:	2207      	movs	r2, #7
 800bf1c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bf1e:	4b6b      	ldr	r3, [pc, #428]	; (800c0cc <perfect_slalom+0x318>)
 800bf20:	2207      	movs	r2, #7
 800bf22:	701a      	strb	r2, [r3, #0]
					break;
 800bf24:	e15d      	b.n	800c1e2 <perfect_slalom+0x42e>

				case 2:
					//----a二次走行スラローム+既知区間加速走行 speed1----
					printf("First Run. (Continuous)\n");
 800bf26:	486a      	ldr	r0, [pc, #424]	; (800c0d0 <perfect_slalom+0x31c>)
 800bf28:	f007 f81e 	bl	8012f68 <puts>
					MF.FLAG.SCND = 1;
 800bf2c:	4a60      	ldr	r2, [pc, #384]	; (800c0b0 <perfect_slalom+0x2fc>)
 800bf2e:	8813      	ldrh	r3, [r2, #0]
 800bf30:	f043 0320 	orr.w	r3, r3, #32
 800bf34:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bf36:	4a5e      	ldr	r2, [pc, #376]	; (800c0b0 <perfect_slalom+0x2fc>)
 800bf38:	8813      	ldrh	r3, [r2, #0]
 800bf3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bf3e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bf40:	4a5b      	ldr	r2, [pc, #364]	; (800c0b0 <perfect_slalom+0x2fc>)
 800bf42:	8813      	ldrh	r3, [r2, #0]
 800bf44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bf48:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800bf4a:	4b5a      	ldr	r3, [pc, #360]	; (800c0b4 <perfect_slalom+0x300>)
 800bf4c:	2202      	movs	r2, #2
 800bf4e:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bf50:	4b59      	ldr	r3, [pc, #356]	; (800c0b8 <perfect_slalom+0x304>)
 800bf52:	2200      	movs	r2, #0
 800bf54:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bf56:	4b59      	ldr	r3, [pc, #356]	; (800c0bc <perfect_slalom+0x308>)
 800bf58:	2202      	movs	r2, #2
 800bf5a:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800bf5c:	4b58      	ldr	r3, [pc, #352]	; (800c0c0 <perfect_slalom+0x30c>)
 800bf5e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf62:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800bf64:	4b57      	ldr	r3, [pc, #348]	; (800c0c4 <perfect_slalom+0x310>)
 800bf66:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800bf6a:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800bf6c:	4b56      	ldr	r3, [pc, #344]	; (800c0c8 <perfect_slalom+0x314>)
 800bf6e:	2207      	movs	r2, #7
 800bf70:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bf72:	4b56      	ldr	r3, [pc, #344]	; (800c0cc <perfect_slalom+0x318>)
 800bf74:	2207      	movs	r2, #7
 800bf76:	701a      	strb	r2, [r3, #0]

					get_base();
 800bf78:	f006 f90c 	bl	8012194 <get_base>

					searchD();
 800bf7c:	f003 fc18 	bl	800f7b0 <searchD>
					HAL_Delay(2000);
 800bf80:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bf84:	f7f5 f84a 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bf88:	4b50      	ldr	r3, [pc, #320]	; (800c0cc <perfect_slalom+0x318>)
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	701a      	strb	r2, [r3, #0]
 800bf8e:	4b4f      	ldr	r3, [pc, #316]	; (800c0cc <perfect_slalom+0x318>)
 800bf90:	781a      	ldrb	r2, [r3, #0]
 800bf92:	4b4d      	ldr	r3, [pc, #308]	; (800c0c8 <perfect_slalom+0x314>)
 800bf94:	701a      	strb	r2, [r3, #0]
					searchD();
 800bf96:	f003 fc0b 	bl	800f7b0 <searchD>

					goal_x = 7;
 800bf9a:	4b4b      	ldr	r3, [pc, #300]	; (800c0c8 <perfect_slalom+0x314>)
 800bf9c:	2207      	movs	r2, #7
 800bf9e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bfa0:	4b4a      	ldr	r3, [pc, #296]	; (800c0cc <perfect_slalom+0x318>)
 800bfa2:	2207      	movs	r2, #7
 800bfa4:	701a      	strb	r2, [r3, #0]
					break;
 800bfa6:	e11c      	b.n	800c1e2 <perfect_slalom+0x42e>

				case 3:
					//----a二次探索スラロームHigh Speed----
					printf("Second Run. (Slalom)\n");
 800bfa8:	484a      	ldr	r0, [pc, #296]	; (800c0d4 <perfect_slalom+0x320>)
 800bfaa:	f006 ffdd 	bl	8012f68 <puts>
					MF.FLAG.SCND = 1;
 800bfae:	4a40      	ldr	r2, [pc, #256]	; (800c0b0 <perfect_slalom+0x2fc>)
 800bfb0:	8813      	ldrh	r3, [r2, #0]
 800bfb2:	f043 0320 	orr.w	r3, r3, #32
 800bfb6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 800bfb8:	4a3d      	ldr	r2, [pc, #244]	; (800c0b0 <perfect_slalom+0x2fc>)
 800bfba:	8813      	ldrh	r3, [r2, #0]
 800bfbc:	f36f 2349 	bfc	r3, #9, #1
 800bfc0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bfc2:	4a3b      	ldr	r2, [pc, #236]	; (800c0b0 <perfect_slalom+0x2fc>)
 800bfc4:	8813      	ldrh	r3, [r2, #0]
 800bfc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bfca:	8013      	strh	r3, [r2, #0]
					run_mode = 3;
 800bfcc:	4b39      	ldr	r3, [pc, #228]	; (800c0b4 <perfect_slalom+0x300>)
 800bfce:	2203      	movs	r2, #3
 800bfd0:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bfd2:	4b39      	ldr	r3, [pc, #228]	; (800c0b8 <perfect_slalom+0x304>)
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bfd8:	4b38      	ldr	r3, [pc, #224]	; (800c0bc <perfect_slalom+0x308>)
 800bfda:	2202      	movs	r2, #2
 800bfdc:	701a      	strb	r2, [r3, #0]
					goal_x = 7;
 800bfde:	4b3a      	ldr	r3, [pc, #232]	; (800c0c8 <perfect_slalom+0x314>)
 800bfe0:	2207      	movs	r2, #7
 800bfe2:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bfe4:	4b39      	ldr	r3, [pc, #228]	; (800c0cc <perfect_slalom+0x318>)
 800bfe6:	2207      	movs	r2, #7
 800bfe8:	701a      	strb	r2, [r3, #0]

					get_base();
 800bfea:	f006 f8d3 	bl	8012194 <get_base>

					searchC();
 800bfee:	f003 f8fb 	bl	800f1e8 <searchC>
					HAL_Delay(2000);
 800bff2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bff6:	f7f5 f811 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bffa:	4b34      	ldr	r3, [pc, #208]	; (800c0cc <perfect_slalom+0x318>)
 800bffc:	2200      	movs	r2, #0
 800bffe:	701a      	strb	r2, [r3, #0]
 800c000:	4b32      	ldr	r3, [pc, #200]	; (800c0cc <perfect_slalom+0x318>)
 800c002:	781a      	ldrb	r2, [r3, #0]
 800c004:	4b30      	ldr	r3, [pc, #192]	; (800c0c8 <perfect_slalom+0x314>)
 800c006:	701a      	strb	r2, [r3, #0]
					searchC();
 800c008:	f003 f8ee 	bl	800f1e8 <searchC>
					goal_x = 7;
 800c00c:	4b2e      	ldr	r3, [pc, #184]	; (800c0c8 <perfect_slalom+0x314>)
 800c00e:	2207      	movs	r2, #7
 800c010:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c012:	4b2e      	ldr	r3, [pc, #184]	; (800c0cc <perfect_slalom+0x318>)
 800c014:	2207      	movs	r2, #7
 800c016:	701a      	strb	r2, [r3, #0]
					break;
 800c018:	e0e3      	b.n	800c1e2 <perfect_slalom+0x42e>

				case 4:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800c01a:	482e      	ldr	r0, [pc, #184]	; (800c0d4 <perfect_slalom+0x320>)
 800c01c:	f006 ffa4 	bl	8012f68 <puts>
					MF.FLAG.SCND = 1;
 800c020:	4a23      	ldr	r2, [pc, #140]	; (800c0b0 <perfect_slalom+0x2fc>)
 800c022:	8813      	ldrh	r3, [r2, #0]
 800c024:	f043 0320 	orr.w	r3, r3, #32
 800c028:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c02a:	4a21      	ldr	r2, [pc, #132]	; (800c0b0 <perfect_slalom+0x2fc>)
 800c02c:	8813      	ldrh	r3, [r2, #0]
 800c02e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c032:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c034:	4a1e      	ldr	r2, [pc, #120]	; (800c0b0 <perfect_slalom+0x2fc>)
 800c036:	8813      	ldrh	r3, [r2, #0]
 800c038:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c03c:	8013      	strh	r3, [r2, #0]
					run_mode = 3;
 800c03e:	4b1d      	ldr	r3, [pc, #116]	; (800c0b4 <perfect_slalom+0x300>)
 800c040:	2203      	movs	r2, #3
 800c042:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c044:	4b1c      	ldr	r3, [pc, #112]	; (800c0b8 <perfect_slalom+0x304>)
 800c046:	2200      	movs	r2, #0
 800c048:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c04a:	4b1c      	ldr	r3, [pc, #112]	; (800c0bc <perfect_slalom+0x308>)
 800c04c:	2202      	movs	r2, #2
 800c04e:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800c050:	4b1b      	ldr	r3, [pc, #108]	; (800c0c0 <perfect_slalom+0x30c>)
 800c052:	f241 3288 	movw	r2, #5000	; 0x1388
 800c056:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800c058:	4b1a      	ldr	r3, [pc, #104]	; (800c0c4 <perfect_slalom+0x310>)
 800c05a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800c05e:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800c060:	4b19      	ldr	r3, [pc, #100]	; (800c0c8 <perfect_slalom+0x314>)
 800c062:	2207      	movs	r2, #7
 800c064:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c066:	4b19      	ldr	r3, [pc, #100]	; (800c0cc <perfect_slalom+0x318>)
 800c068:	2207      	movs	r2, #7
 800c06a:	701a      	strb	r2, [r3, #0]

					get_base();
 800c06c:	f006 f892 	bl	8012194 <get_base>

					searchD();
 800c070:	f003 fb9e 	bl	800f7b0 <searchD>
					HAL_Delay(2000);
 800c074:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c078:	f7f4 ffd0 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c07c:	4b13      	ldr	r3, [pc, #76]	; (800c0cc <perfect_slalom+0x318>)
 800c07e:	2200      	movs	r2, #0
 800c080:	701a      	strb	r2, [r3, #0]
 800c082:	4b12      	ldr	r3, [pc, #72]	; (800c0cc <perfect_slalom+0x318>)
 800c084:	781a      	ldrb	r2, [r3, #0]
 800c086:	4b10      	ldr	r3, [pc, #64]	; (800c0c8 <perfect_slalom+0x314>)
 800c088:	701a      	strb	r2, [r3, #0]
					searchD();
 800c08a:	f003 fb91 	bl	800f7b0 <searchD>

					goal_x = 7;
 800c08e:	4b0e      	ldr	r3, [pc, #56]	; (800c0c8 <perfect_slalom+0x314>)
 800c090:	2207      	movs	r2, #7
 800c092:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c094:	4b0d      	ldr	r3, [pc, #52]	; (800c0cc <perfect_slalom+0x318>)
 800c096:	2207      	movs	r2, #7
 800c098:	701a      	strb	r2, [r3, #0]
					break;
 800c09a:	e0a2      	b.n	800c1e2 <perfect_slalom+0x42e>
 800c09c:	0801443c 	.word	0x0801443c
 800c0a0:	20000b2c 	.word	0x20000b2c
 800c0a4:	080140bc 	.word	0x080140bc
 800c0a8:	20001644 	.word	0x20001644
 800c0ac:	0801437c 	.word	0x0801437c
 800c0b0:	20000fa8 	.word	0x20000fa8
 800c0b4:	20000456 	.word	0x20000456
 800c0b8:	20001648 	.word	0x20001648
 800c0bc:	20000c31 	.word	0x20000c31
 800c0c0:	20000454 	.word	0x20000454
 800c0c4:	20000ffc 	.word	0x20000ffc
 800c0c8:	20000c30 	.word	0x20000c30
 800c0cc:	20000b8c 	.word	0x20000b8c
 800c0d0:	08014388 	.word	0x08014388
 800c0d4:	080143d4 	.word	0x080143d4

				case 5:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800c0d8:	4844      	ldr	r0, [pc, #272]	; (800c1ec <perfect_slalom+0x438>)
 800c0da:	f006 ff45 	bl	8012f68 <puts>
					MF.FLAG.SCND = 1;
 800c0de:	4a44      	ldr	r2, [pc, #272]	; (800c1f0 <perfect_slalom+0x43c>)
 800c0e0:	8813      	ldrh	r3, [r2, #0]
 800c0e2:	f043 0320 	orr.w	r3, r3, #32
 800c0e6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c0e8:	4a41      	ldr	r2, [pc, #260]	; (800c1f0 <perfect_slalom+0x43c>)
 800c0ea:	8813      	ldrh	r3, [r2, #0]
 800c0ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c0f0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c0f2:	4a3f      	ldr	r2, [pc, #252]	; (800c1f0 <perfect_slalom+0x43c>)
 800c0f4:	8813      	ldrh	r3, [r2, #0]
 800c0f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c0fa:	8013      	strh	r3, [r2, #0]
					run_mode = 3;
 800c0fc:	4b3d      	ldr	r3, [pc, #244]	; (800c1f4 <perfect_slalom+0x440>)
 800c0fe:	2203      	movs	r2, #3
 800c100:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c102:	4b3d      	ldr	r3, [pc, #244]	; (800c1f8 <perfect_slalom+0x444>)
 800c104:	2200      	movs	r2, #0
 800c106:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c108:	4b3c      	ldr	r3, [pc, #240]	; (800c1fc <perfect_slalom+0x448>)
 800c10a:	2202      	movs	r2, #2
 800c10c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800c10e:	4b3c      	ldr	r3, [pc, #240]	; (800c200 <perfect_slalom+0x44c>)
 800c110:	f241 3288 	movw	r2, #5000	; 0x1388
 800c114:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800c116:	4b3b      	ldr	r3, [pc, #236]	; (800c204 <perfect_slalom+0x450>)
 800c118:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c11c:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800c11e:	4b3a      	ldr	r3, [pc, #232]	; (800c208 <perfect_slalom+0x454>)
 800c120:	2207      	movs	r2, #7
 800c122:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c124:	4b39      	ldr	r3, [pc, #228]	; (800c20c <perfect_slalom+0x458>)
 800c126:	2207      	movs	r2, #7
 800c128:	701a      	strb	r2, [r3, #0]

					get_base();
 800c12a:	f006 f833 	bl	8012194 <get_base>

					searchD();
 800c12e:	f003 fb3f 	bl	800f7b0 <searchD>
					HAL_Delay(2000);
 800c132:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c136:	f7f4 ff71 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c13a:	4b34      	ldr	r3, [pc, #208]	; (800c20c <perfect_slalom+0x458>)
 800c13c:	2200      	movs	r2, #0
 800c13e:	701a      	strb	r2, [r3, #0]
 800c140:	4b32      	ldr	r3, [pc, #200]	; (800c20c <perfect_slalom+0x458>)
 800c142:	781a      	ldrb	r2, [r3, #0]
 800c144:	4b30      	ldr	r3, [pc, #192]	; (800c208 <perfect_slalom+0x454>)
 800c146:	701a      	strb	r2, [r3, #0]
					searchD();
 800c148:	f003 fb32 	bl	800f7b0 <searchD>

					goal_x = 7;
 800c14c:	4b2e      	ldr	r3, [pc, #184]	; (800c208 <perfect_slalom+0x454>)
 800c14e:	2207      	movs	r2, #7
 800c150:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c152:	4b2e      	ldr	r3, [pc, #184]	; (800c20c <perfect_slalom+0x458>)
 800c154:	2207      	movs	r2, #7
 800c156:	701a      	strb	r2, [r3, #0]
					break;
 800c158:	e043      	b.n	800c1e2 <perfect_slalom+0x42e>

				case 6:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800c15a:	4824      	ldr	r0, [pc, #144]	; (800c1ec <perfect_slalom+0x438>)
 800c15c:	f006 ff04 	bl	8012f68 <puts>
					MF.FLAG.SCND = 1;
 800c160:	4a23      	ldr	r2, [pc, #140]	; (800c1f0 <perfect_slalom+0x43c>)
 800c162:	8813      	ldrh	r3, [r2, #0]
 800c164:	f043 0320 	orr.w	r3, r3, #32
 800c168:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c16a:	4a21      	ldr	r2, [pc, #132]	; (800c1f0 <perfect_slalom+0x43c>)
 800c16c:	8813      	ldrh	r3, [r2, #0]
 800c16e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c172:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c174:	4a1e      	ldr	r2, [pc, #120]	; (800c1f0 <perfect_slalom+0x43c>)
 800c176:	8813      	ldrh	r3, [r2, #0]
 800c178:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c17c:	8013      	strh	r3, [r2, #0]
					run_mode = 3;
 800c17e:	4b1d      	ldr	r3, [pc, #116]	; (800c1f4 <perfect_slalom+0x440>)
 800c180:	2203      	movs	r2, #3
 800c182:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c184:	4b1c      	ldr	r3, [pc, #112]	; (800c1f8 <perfect_slalom+0x444>)
 800c186:	2200      	movs	r2, #0
 800c188:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c18a:	4b1c      	ldr	r3, [pc, #112]	; (800c1fc <perfect_slalom+0x448>)
 800c18c:	2202      	movs	r2, #2
 800c18e:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800c190:	4b1b      	ldr	r3, [pc, #108]	; (800c200 <perfect_slalom+0x44c>)
 800c192:	f242 7210 	movw	r2, #10000	; 0x2710
 800c196:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800c198:	4b1a      	ldr	r3, [pc, #104]	; (800c204 <perfect_slalom+0x450>)
 800c19a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c19e:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800c1a0:	4b19      	ldr	r3, [pc, #100]	; (800c208 <perfect_slalom+0x454>)
 800c1a2:	2207      	movs	r2, #7
 800c1a4:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c1a6:	4b19      	ldr	r3, [pc, #100]	; (800c20c <perfect_slalom+0x458>)
 800c1a8:	2207      	movs	r2, #7
 800c1aa:	701a      	strb	r2, [r3, #0]

					get_base();
 800c1ac:	f005 fff2 	bl	8012194 <get_base>

					searchD();
 800c1b0:	f003 fafe 	bl	800f7b0 <searchD>
					HAL_Delay(2000);
 800c1b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c1b8:	f7f4 ff30 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c1bc:	4b13      	ldr	r3, [pc, #76]	; (800c20c <perfect_slalom+0x458>)
 800c1be:	2200      	movs	r2, #0
 800c1c0:	701a      	strb	r2, [r3, #0]
 800c1c2:	4b12      	ldr	r3, [pc, #72]	; (800c20c <perfect_slalom+0x458>)
 800c1c4:	781a      	ldrb	r2, [r3, #0]
 800c1c6:	4b10      	ldr	r3, [pc, #64]	; (800c208 <perfect_slalom+0x454>)
 800c1c8:	701a      	strb	r2, [r3, #0]
					searchD();
 800c1ca:	f003 faf1 	bl	800f7b0 <searchD>

					goal_x = 7;
 800c1ce:	4b0e      	ldr	r3, [pc, #56]	; (800c208 <perfect_slalom+0x454>)
 800c1d0:	2207      	movs	r2, #7
 800c1d2:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c1d4:	4b0d      	ldr	r3, [pc, #52]	; (800c20c <perfect_slalom+0x458>)
 800c1d6:	2207      	movs	r2, #7
 800c1d8:	701a      	strb	r2, [r3, #0]
					break;
 800c1da:	e002      	b.n	800c1e2 <perfect_slalom+0x42e>

				case 7:
					perfect_pass();
 800c1dc:	f000 f81a 	bl	800c214 <perfect_pass>
					break;
 800c1e0:	bf00      	nop
			  }
			  dist_l = 0;
 800c1e2:	4b0b      	ldr	r3, [pc, #44]	; (800c210 <perfect_slalom+0x45c>)
 800c1e4:	f04f 0200 	mov.w	r2, #0
 800c1e8:	601a      	str	r2, [r3, #0]
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800c1ea:	e5ec      	b.n	800bdc6 <perfect_slalom+0x12>
 800c1ec:	080143d4 	.word	0x080143d4
 800c1f0:	20000fa8 	.word	0x20000fa8
 800c1f4:	20000456 	.word	0x20000456
 800c1f8:	20001648 	.word	0x20001648
 800c1fc:	20000c31 	.word	0x20000c31
 800c200:	20000454 	.word	0x20000454
 800c204:	20000ffc 	.word	0x20000ffc
 800c208:	20000c30 	.word	0x20000c30
 800c20c:	20000b8c 	.word	0x20000b8c
 800c210:	20001644 	.word	0x20001644

0800c214 <perfect_pass>:
//perfect_pass
// a本番用pass圧縮走行モード
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_pass(void){
 800c214:	b580      	push	{r7, lr}
 800c216:	b082      	sub	sp, #8
 800c218:	af00      	add	r7, sp, #0

	int mode = 0;
 800c21a:	2300      	movs	r3, #0
 800c21c:	607b      	str	r3, [r7, #4]
	printf("Perfect Pass Press, Mode : %d\n", mode);
 800c21e:	6879      	ldr	r1, [r7, #4]
 800c220:	489d      	ldr	r0, [pc, #628]	; (800c498 <perfect_pass+0x284>)
 800c222:	f006 fe2d 	bl	8012e80 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	b2db      	uxtb	r3, r3
 800c22a:	f003 0301 	and.w	r3, r3, #1
 800c22e:	b2d8      	uxtb	r0, r3
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	b2db      	uxtb	r3, r3
 800c234:	f003 0302 	and.w	r3, r3, #2
 800c238:	b2d9      	uxtb	r1, r3
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	b2db      	uxtb	r3, r3
 800c23e:	f003 0304 	and.w	r3, r3, #4
 800c242:	b2db      	uxtb	r3, r3
 800c244:	461a      	mov	r2, r3
 800c246:	f005 fffd 	bl	8012244 <led_write>
		  if(dist_r >= 20){
 800c24a:	4b94      	ldr	r3, [pc, #592]	; (800c49c <perfect_pass+0x288>)
 800c24c:	edd3 7a00 	vldr	s15, [r3]
 800c250:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800c254:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c25c:	db0f      	blt.n	800c27e <perfect_pass+0x6a>
			  mode++;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	3301      	adds	r3, #1
 800c262:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800c264:	4b8d      	ldr	r3, [pc, #564]	; (800c49c <perfect_pass+0x288>)
 800c266:	f04f 0200 	mov.w	r2, #0
 800c26a:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2b07      	cmp	r3, #7
 800c270:	dd01      	ble.n	800c276 <perfect_pass+0x62>
				  mode = 0;
 800c272:	2300      	movs	r3, #0
 800c274:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800c276:	6879      	ldr	r1, [r7, #4]
 800c278:	4889      	ldr	r0, [pc, #548]	; (800c4a0 <perfect_pass+0x28c>)
 800c27a:	f006 fe01 	bl	8012e80 <iprintf>
		  }
		  if(dist_r <= -20){
 800c27e:	4b87      	ldr	r3, [pc, #540]	; (800c49c <perfect_pass+0x288>)
 800c280:	edd3 7a00 	vldr	s15, [r3]
 800c284:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800c288:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c28c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c290:	d80f      	bhi.n	800c2b2 <perfect_pass+0x9e>
			  mode--;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	3b01      	subs	r3, #1
 800c296:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800c298:	4b80      	ldr	r3, [pc, #512]	; (800c49c <perfect_pass+0x288>)
 800c29a:	f04f 0200 	mov.w	r2, #0
 800c29e:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	da01      	bge.n	800c2aa <perfect_pass+0x96>
				  mode = 7;
 800c2a6:	2307      	movs	r3, #7
 800c2a8:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800c2aa:	6879      	ldr	r1, [r7, #4]
 800c2ac:	487c      	ldr	r0, [pc, #496]	; (800c4a0 <perfect_pass+0x28c>)
 800c2ae:	f006 fde7 	bl	8012e80 <iprintf>
		  }
		  if(dist_l <= -20){
 800c2b2:	4b7c      	ldr	r3, [pc, #496]	; (800c4a4 <perfect_pass+0x290>)
 800c2b4:	edd3 7a00 	vldr	s15, [r3]
 800c2b8:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800c2bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c2c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2c4:	f200 8479 	bhi.w	800cbba <perfect_pass+0x9a6>
			  dist_l = 0;
 800c2c8:	4b76      	ldr	r3, [pc, #472]	; (800c4a4 <perfect_pass+0x290>)
 800c2ca:	f04f 0200 	mov.w	r2, #0
 800c2ce:	601a      	str	r2, [r3, #0]
			  drive_ready();
 800c2d0:	f7f8 fccc 	bl	8004c6c <drive_ready>

			  switch(mode){
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2b07      	cmp	r3, #7
 800c2d8:	f200 846b 	bhi.w	800cbb2 <perfect_pass+0x99e>
 800c2dc:	a201      	add	r2, pc, #4	; (adr r2, 800c2e4 <perfect_pass+0xd0>)
 800c2de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e2:	bf00      	nop
 800c2e4:	0800cbb3 	.word	0x0800cbb3
 800c2e8:	0800c305 	.word	0x0800c305
 800c2ec:	0800c389 	.word	0x0800c389
 800c2f0:	0800c411 	.word	0x0800c411
 800c2f4:	0800c4d9 	.word	0x0800c4d9
 800c2f8:	0800c561 	.word	0x0800c561
 800c2fc:	0800c615 	.word	0x0800c615
 800c300:	0800c901 	.word	0x0800c901
				case 0:
					break;

				case 1:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800c304:	4868      	ldr	r0, [pc, #416]	; (800c4a8 <perfect_pass+0x294>)
 800c306:	f006 fe2f 	bl	8012f68 <puts>
					MF.FLAG.SCND = 0;
 800c30a:	4a68      	ldr	r2, [pc, #416]	; (800c4ac <perfect_pass+0x298>)
 800c30c:	8813      	ldrh	r3, [r2, #0]
 800c30e:	f36f 1345 	bfc	r3, #5, #1
 800c312:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c314:	4a65      	ldr	r2, [pc, #404]	; (800c4ac <perfect_pass+0x298>)
 800c316:	8813      	ldrh	r3, [r2, #0]
 800c318:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c31c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800c31e:	4a63      	ldr	r2, [pc, #396]	; (800c4ac <perfect_pass+0x298>)
 800c320:	8813      	ldrh	r3, [r2, #0]
 800c322:	f36f 238a 	bfc	r3, #10, #1
 800c326:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800c328:	4b61      	ldr	r3, [pc, #388]	; (800c4b0 <perfect_pass+0x29c>)
 800c32a:	2202      	movs	r2, #2
 800c32c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c32e:	4b61      	ldr	r3, [pc, #388]	; (800c4b4 <perfect_pass+0x2a0>)
 800c330:	2200      	movs	r2, #0
 800c332:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c334:	4b60      	ldr	r3, [pc, #384]	; (800c4b8 <perfect_pass+0x2a4>)
 800c336:	2202      	movs	r2, #2
 800c338:	701a      	strb	r2, [r3, #0]
					accel_hs = 4000;
 800c33a:	4b60      	ldr	r3, [pc, #384]	; (800c4bc <perfect_pass+0x2a8>)
 800c33c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800c340:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800c342:	4b5f      	ldr	r3, [pc, #380]	; (800c4c0 <perfect_pass+0x2ac>)
 800c344:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c348:	801a      	strh	r2, [r3, #0]

					goal_x = 7;
 800c34a:	4b5e      	ldr	r3, [pc, #376]	; (800c4c4 <perfect_pass+0x2b0>)
 800c34c:	2207      	movs	r2, #7
 800c34e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c350:	4b5d      	ldr	r3, [pc, #372]	; (800c4c8 <perfect_pass+0x2b4>)
 800c352:	2207      	movs	r2, #7
 800c354:	701a      	strb	r2, [r3, #0]

					get_base();
 800c356:	f005 ff1d 	bl	8012194 <get_base>

					searchC();
 800c35a:	f002 ff45 	bl	800f1e8 <searchC>
					HAL_Delay(2000);
 800c35e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c362:	f7f4 fe5b 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c366:	4b58      	ldr	r3, [pc, #352]	; (800c4c8 <perfect_pass+0x2b4>)
 800c368:	2200      	movs	r2, #0
 800c36a:	701a      	strb	r2, [r3, #0]
 800c36c:	4b56      	ldr	r3, [pc, #344]	; (800c4c8 <perfect_pass+0x2b4>)
 800c36e:	781a      	ldrb	r2, [r3, #0]
 800c370:	4b54      	ldr	r3, [pc, #336]	; (800c4c4 <perfect_pass+0x2b0>)
 800c372:	701a      	strb	r2, [r3, #0]
					searchC();
 800c374:	f002 ff38 	bl	800f1e8 <searchC>

					goal_x = 7;
 800c378:	4b52      	ldr	r3, [pc, #328]	; (800c4c4 <perfect_pass+0x2b0>)
 800c37a:	2207      	movs	r2, #7
 800c37c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c37e:	4b52      	ldr	r3, [pc, #328]	; (800c4c8 <perfect_pass+0x2b4>)
 800c380:	2207      	movs	r2, #7
 800c382:	701a      	strb	r2, [r3, #0]
					break;
 800c384:	f000 bc15 	b.w	800cbb2 <perfect_pass+0x99e>

				case 2:
					//----a直線と大回り圧縮----
					printf("pass press 3.\n");
 800c388:	4850      	ldr	r0, [pc, #320]	; (800c4cc <perfect_pass+0x2b8>)
 800c38a:	f006 fded 	bl	8012f68 <puts>
					MF.FLAG.SCND = 1;
 800c38e:	4a47      	ldr	r2, [pc, #284]	; (800c4ac <perfect_pass+0x298>)
 800c390:	8813      	ldrh	r3, [r2, #0]
 800c392:	f043 0320 	orr.w	r3, r3, #32
 800c396:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c398:	4a44      	ldr	r2, [pc, #272]	; (800c4ac <perfect_pass+0x298>)
 800c39a:	8813      	ldrh	r3, [r2, #0]
 800c39c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c3a0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c3a2:	4a42      	ldr	r2, [pc, #264]	; (800c4ac <perfect_pass+0x298>)
 800c3a4:	8813      	ldrh	r3, [r2, #0]
 800c3a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c3aa:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800c3ac:	4b40      	ldr	r3, [pc, #256]	; (800c4b0 <perfect_pass+0x29c>)
 800c3ae:	2202      	movs	r2, #2
 800c3b0:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c3b2:	4b40      	ldr	r3, [pc, #256]	; (800c4b4 <perfect_pass+0x2a0>)
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c3b8:	4b3f      	ldr	r3, [pc, #252]	; (800c4b8 <perfect_pass+0x2a4>)
 800c3ba:	2202      	movs	r2, #2
 800c3bc:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800c3be:	4b3f      	ldr	r3, [pc, #252]	; (800c4bc <perfect_pass+0x2a8>)
 800c3c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3c4:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800c3c6:	4b3e      	ldr	r3, [pc, #248]	; (800c4c0 <perfect_pass+0x2ac>)
 800c3c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c3cc:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800c3ce:	4b40      	ldr	r3, [pc, #256]	; (800c4d0 <perfect_pass+0x2bc>)
 800c3d0:	2203      	movs	r2, #3
 800c3d2:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800c3d4:	4b3b      	ldr	r3, [pc, #236]	; (800c4c4 <perfect_pass+0x2b0>)
 800c3d6:	2207      	movs	r2, #7
 800c3d8:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c3da:	4b3b      	ldr	r3, [pc, #236]	; (800c4c8 <perfect_pass+0x2b4>)
 800c3dc:	2207      	movs	r2, #7
 800c3de:	701a      	strb	r2, [r3, #0]

					get_base();
 800c3e0:	f005 fed8 	bl	8012194 <get_base>

					searchF3();
 800c3e4:	f003 fb7a 	bl	800fadc <searchF3>
					HAL_Delay(2000);
 800c3e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c3ec:	f7f4 fe16 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c3f0:	4b35      	ldr	r3, [pc, #212]	; (800c4c8 <perfect_pass+0x2b4>)
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	701a      	strb	r2, [r3, #0]
 800c3f6:	4b34      	ldr	r3, [pc, #208]	; (800c4c8 <perfect_pass+0x2b4>)
 800c3f8:	781a      	ldrb	r2, [r3, #0]
 800c3fa:	4b32      	ldr	r3, [pc, #200]	; (800c4c4 <perfect_pass+0x2b0>)
 800c3fc:	701a      	strb	r2, [r3, #0]
					searchF3();
 800c3fe:	f003 fb6d 	bl	800fadc <searchF3>

					goal_x = 7;
 800c402:	4b30      	ldr	r3, [pc, #192]	; (800c4c4 <perfect_pass+0x2b0>)
 800c404:	2207      	movs	r2, #7
 800c406:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c408:	4b2f      	ldr	r3, [pc, #188]	; (800c4c8 <perfect_pass+0x2b4>)
 800c40a:	2207      	movs	r2, #7
 800c40c:	701a      	strb	r2, [r3, #0]
					break;
 800c40e:	e3d0      	b.n	800cbb2 <perfect_pass+0x99e>

				case 3:
					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 800c410:	4830      	ldr	r0, [pc, #192]	; (800c4d4 <perfect_pass+0x2c0>)
 800c412:	f006 fda9 	bl	8012f68 <puts>
					MF.FLAG.SCND = 1;
 800c416:	4a25      	ldr	r2, [pc, #148]	; (800c4ac <perfect_pass+0x298>)
 800c418:	8813      	ldrh	r3, [r2, #0]
 800c41a:	f043 0320 	orr.w	r3, r3, #32
 800c41e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c420:	4a22      	ldr	r2, [pc, #136]	; (800c4ac <perfect_pass+0x298>)
 800c422:	8813      	ldrh	r3, [r2, #0]
 800c424:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c428:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c42a:	4a20      	ldr	r2, [pc, #128]	; (800c4ac <perfect_pass+0x298>)
 800c42c:	8813      	ldrh	r3, [r2, #0]
 800c42e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c432:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800c434:	4b1e      	ldr	r3, [pc, #120]	; (800c4b0 <perfect_pass+0x29c>)
 800c436:	2202      	movs	r2, #2
 800c438:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c43a:	4b1e      	ldr	r3, [pc, #120]	; (800c4b4 <perfect_pass+0x2a0>)
 800c43c:	2200      	movs	r2, #0
 800c43e:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c440:	4b1d      	ldr	r3, [pc, #116]	; (800c4b8 <perfect_pass+0x2a4>)
 800c442:	2202      	movs	r2, #2
 800c444:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800c446:	4b1d      	ldr	r3, [pc, #116]	; (800c4bc <perfect_pass+0x2a8>)
 800c448:	f241 3288 	movw	r2, #5000	; 0x1388
 800c44c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800c44e:	4b1c      	ldr	r3, [pc, #112]	; (800c4c0 <perfect_pass+0x2ac>)
 800c450:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c454:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800c456:	4b1e      	ldr	r3, [pc, #120]	; (800c4d0 <perfect_pass+0x2bc>)
 800c458:	2204      	movs	r2, #4
 800c45a:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800c45c:	4b19      	ldr	r3, [pc, #100]	; (800c4c4 <perfect_pass+0x2b0>)
 800c45e:	2207      	movs	r2, #7
 800c460:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c462:	4b19      	ldr	r3, [pc, #100]	; (800c4c8 <perfect_pass+0x2b4>)
 800c464:	2207      	movs	r2, #7
 800c466:	701a      	strb	r2, [r3, #0]

					get_base();
 800c468:	f005 fe94 	bl	8012194 <get_base>

					searchF4();
 800c46c:	f003 fc12 	bl	800fc94 <searchF4>
					HAL_Delay(2000);
 800c470:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c474:	f7f4 fdd2 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c478:	4b13      	ldr	r3, [pc, #76]	; (800c4c8 <perfect_pass+0x2b4>)
 800c47a:	2200      	movs	r2, #0
 800c47c:	701a      	strb	r2, [r3, #0]
 800c47e:	4b12      	ldr	r3, [pc, #72]	; (800c4c8 <perfect_pass+0x2b4>)
 800c480:	781a      	ldrb	r2, [r3, #0]
 800c482:	4b10      	ldr	r3, [pc, #64]	; (800c4c4 <perfect_pass+0x2b0>)
 800c484:	701a      	strb	r2, [r3, #0]
					searchF4();
 800c486:	f003 fc05 	bl	800fc94 <searchF4>

					goal_x = 7;
 800c48a:	4b0e      	ldr	r3, [pc, #56]	; (800c4c4 <perfect_pass+0x2b0>)
 800c48c:	2207      	movs	r2, #7
 800c48e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c490:	4b0d      	ldr	r3, [pc, #52]	; (800c4c8 <perfect_pass+0x2b4>)
 800c492:	2207      	movs	r2, #7
 800c494:	701a      	strb	r2, [r3, #0]
					break;
 800c496:	e38c      	b.n	800cbb2 <perfect_pass+0x99e>
 800c498:	08014458 	.word	0x08014458
 800c49c:	20000b2c 	.word	0x20000b2c
 800c4a0:	080140bc 	.word	0x080140bc
 800c4a4:	20001644 	.word	0x20001644
 800c4a8:	0801437c 	.word	0x0801437c
 800c4ac:	20000fa8 	.word	0x20000fa8
 800c4b0:	20000456 	.word	0x20000456
 800c4b4:	20001648 	.word	0x20001648
 800c4b8:	20000c31 	.word	0x20000c31
 800c4bc:	20000454 	.word	0x20000454
 800c4c0:	20000ffc 	.word	0x20000ffc
 800c4c4:	20000c30 	.word	0x20000c30
 800c4c8:	20000b8c 	.word	0x20000b8c
 800c4cc:	08014478 	.word	0x08014478
 800c4d0:	20000457 	.word	0x20000457
 800c4d4:	080142c0 	.word	0x080142c0

				case 4:
					//----a直線と大回り圧縮 High Speed----
					printf("pass press 3-2.\n");
 800c4d8:	4843      	ldr	r0, [pc, #268]	; (800c5e8 <perfect_pass+0x3d4>)
 800c4da:	f006 fd45 	bl	8012f68 <puts>
					MF.FLAG.SCND = 1;
 800c4de:	4a43      	ldr	r2, [pc, #268]	; (800c5ec <perfect_pass+0x3d8>)
 800c4e0:	8813      	ldrh	r3, [r2, #0]
 800c4e2:	f043 0320 	orr.w	r3, r3, #32
 800c4e6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c4e8:	4a40      	ldr	r2, [pc, #256]	; (800c5ec <perfect_pass+0x3d8>)
 800c4ea:	8813      	ldrh	r3, [r2, #0]
 800c4ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c4f0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c4f2:	4a3e      	ldr	r2, [pc, #248]	; (800c5ec <perfect_pass+0x3d8>)
 800c4f4:	8813      	ldrh	r3, [r2, #0]
 800c4f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c4fa:	8013      	strh	r3, [r2, #0]
					run_mode = 3;
 800c4fc:	4b3c      	ldr	r3, [pc, #240]	; (800c5f0 <perfect_pass+0x3dc>)
 800c4fe:	2203      	movs	r2, #3
 800c500:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c502:	4b3c      	ldr	r3, [pc, #240]	; (800c5f4 <perfect_pass+0x3e0>)
 800c504:	2202      	movs	r2, #2
 800c506:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c508:	4b3b      	ldr	r3, [pc, #236]	; (800c5f8 <perfect_pass+0x3e4>)
 800c50a:	2200      	movs	r2, #0
 800c50c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800c50e:	4b3b      	ldr	r3, [pc, #236]	; (800c5fc <perfect_pass+0x3e8>)
 800c510:	f241 3288 	movw	r2, #5000	; 0x1388
 800c514:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800c516:	4b3a      	ldr	r3, [pc, #232]	; (800c600 <perfect_pass+0x3ec>)
 800c518:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800c51c:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800c51e:	4b39      	ldr	r3, [pc, #228]	; (800c604 <perfect_pass+0x3f0>)
 800c520:	2203      	movs	r2, #3
 800c522:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800c524:	4b38      	ldr	r3, [pc, #224]	; (800c608 <perfect_pass+0x3f4>)
 800c526:	2207      	movs	r2, #7
 800c528:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c52a:	4b38      	ldr	r3, [pc, #224]	; (800c60c <perfect_pass+0x3f8>)
 800c52c:	2207      	movs	r2, #7
 800c52e:	701a      	strb	r2, [r3, #0]

					get_base();
 800c530:	f005 fe30 	bl	8012194 <get_base>

					searchF3();
 800c534:	f003 fad2 	bl	800fadc <searchF3>
					HAL_Delay(2000);
 800c538:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c53c:	f7f4 fd6e 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c540:	4b32      	ldr	r3, [pc, #200]	; (800c60c <perfect_pass+0x3f8>)
 800c542:	2200      	movs	r2, #0
 800c544:	701a      	strb	r2, [r3, #0]
 800c546:	4b31      	ldr	r3, [pc, #196]	; (800c60c <perfect_pass+0x3f8>)
 800c548:	781a      	ldrb	r2, [r3, #0]
 800c54a:	4b2f      	ldr	r3, [pc, #188]	; (800c608 <perfect_pass+0x3f4>)
 800c54c:	701a      	strb	r2, [r3, #0]
					searchF3();
 800c54e:	f003 fac5 	bl	800fadc <searchF3>

					goal_x = 7;
 800c552:	4b2d      	ldr	r3, [pc, #180]	; (800c608 <perfect_pass+0x3f4>)
 800c554:	2207      	movs	r2, #7
 800c556:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c558:	4b2c      	ldr	r3, [pc, #176]	; (800c60c <perfect_pass+0x3f8>)
 800c55a:	2207      	movs	r2, #7
 800c55c:	701a      	strb	r2, [r3, #0]
					break;
 800c55e:	e328      	b.n	800cbb2 <perfect_pass+0x99e>

				case 5:
					//----a直線と大回り圧縮と斜め High Speedｰｰｰｰ
					printf("pass press 4.\n");
 800c560:	482b      	ldr	r0, [pc, #172]	; (800c610 <perfect_pass+0x3fc>)
 800c562:	f006 fd01 	bl	8012f68 <puts>
					MF.FLAG.SCND = 1;
 800c566:	4a21      	ldr	r2, [pc, #132]	; (800c5ec <perfect_pass+0x3d8>)
 800c568:	8813      	ldrh	r3, [r2, #0]
 800c56a:	f043 0320 	orr.w	r3, r3, #32
 800c56e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c570:	4a1e      	ldr	r2, [pc, #120]	; (800c5ec <perfect_pass+0x3d8>)
 800c572:	8813      	ldrh	r3, [r2, #0]
 800c574:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c578:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c57a:	4a1c      	ldr	r2, [pc, #112]	; (800c5ec <perfect_pass+0x3d8>)
 800c57c:	8813      	ldrh	r3, [r2, #0]
 800c57e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c582:	8013      	strh	r3, [r2, #0]
					run_mode = 3;
 800c584:	4b1a      	ldr	r3, [pc, #104]	; (800c5f0 <perfect_pass+0x3dc>)
 800c586:	2203      	movs	r2, #3
 800c588:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c58a:	4b1b      	ldr	r3, [pc, #108]	; (800c5f8 <perfect_pass+0x3e4>)
 800c58c:	2200      	movs	r2, #0
 800c58e:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c590:	4b18      	ldr	r3, [pc, #96]	; (800c5f4 <perfect_pass+0x3e0>)
 800c592:	2202      	movs	r2, #2
 800c594:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800c596:	4b19      	ldr	r3, [pc, #100]	; (800c5fc <perfect_pass+0x3e8>)
 800c598:	f241 3288 	movw	r2, #5000	; 0x1388
 800c59c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800c59e:	4b18      	ldr	r3, [pc, #96]	; (800c600 <perfect_pass+0x3ec>)
 800c5a0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800c5a4:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800c5a6:	4b17      	ldr	r3, [pc, #92]	; (800c604 <perfect_pass+0x3f0>)
 800c5a8:	2204      	movs	r2, #4
 800c5aa:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800c5ac:	4b16      	ldr	r3, [pc, #88]	; (800c608 <perfect_pass+0x3f4>)
 800c5ae:	2207      	movs	r2, #7
 800c5b0:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c5b2:	4b16      	ldr	r3, [pc, #88]	; (800c60c <perfect_pass+0x3f8>)
 800c5b4:	2207      	movs	r2, #7
 800c5b6:	701a      	strb	r2, [r3, #0]

					get_base();
 800c5b8:	f005 fdec 	bl	8012194 <get_base>

					searchF4();
 800c5bc:	f003 fb6a 	bl	800fc94 <searchF4>
					HAL_Delay(2000);
 800c5c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c5c4:	f7f4 fd2a 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c5c8:	4b10      	ldr	r3, [pc, #64]	; (800c60c <perfect_pass+0x3f8>)
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	701a      	strb	r2, [r3, #0]
 800c5ce:	4b0f      	ldr	r3, [pc, #60]	; (800c60c <perfect_pass+0x3f8>)
 800c5d0:	781a      	ldrb	r2, [r3, #0]
 800c5d2:	4b0d      	ldr	r3, [pc, #52]	; (800c608 <perfect_pass+0x3f4>)
 800c5d4:	701a      	strb	r2, [r3, #0]
					searchF4();
 800c5d6:	f003 fb5d 	bl	800fc94 <searchF4>

					goal_x = 7;
 800c5da:	4b0b      	ldr	r3, [pc, #44]	; (800c608 <perfect_pass+0x3f4>)
 800c5dc:	2207      	movs	r2, #7
 800c5de:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c5e0:	4b0a      	ldr	r3, [pc, #40]	; (800c60c <perfect_pass+0x3f8>)
 800c5e2:	2207      	movs	r2, #7
 800c5e4:	701a      	strb	r2, [r3, #0]
					break;
 800c5e6:	e2e4      	b.n	800cbb2 <perfect_pass+0x99e>
 800c5e8:	080142b0 	.word	0x080142b0
 800c5ec:	20000fa8 	.word	0x20000fa8
 800c5f0:	20000456 	.word	0x20000456
 800c5f4:	20000c31 	.word	0x20000c31
 800c5f8:	20001648 	.word	0x20001648
 800c5fc:	20000454 	.word	0x20000454
 800c600:	20000ffc 	.word	0x20000ffc
 800c604:	20000457 	.word	0x20000457
 800c608:	20000c30 	.word	0x20000c30
 800c60c:	20000b8c 	.word	0x20000b8c
 800c610:	080142c0 	.word	0x080142c0

				case 6:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800c614:	48ac      	ldr	r0, [pc, #688]	; (800c8c8 <perfect_pass+0x6b4>)
 800c616:	f006 fca7 	bl	8012f68 <puts>
					MF.FLAG.SCND = 0;
 800c61a:	4aac      	ldr	r2, [pc, #688]	; (800c8cc <perfect_pass+0x6b8>)
 800c61c:	8813      	ldrh	r3, [r2, #0]
 800c61e:	f36f 1345 	bfc	r3, #5, #1
 800c622:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c624:	4aa9      	ldr	r2, [pc, #676]	; (800c8cc <perfect_pass+0x6b8>)
 800c626:	8813      	ldrh	r3, [r2, #0]
 800c628:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c62c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800c62e:	4aa7      	ldr	r2, [pc, #668]	; (800c8cc <perfect_pass+0x6b8>)
 800c630:	8813      	ldrh	r3, [r2, #0]
 800c632:	f36f 238a 	bfc	r3, #10, #1
 800c636:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800c638:	4ba5      	ldr	r3, [pc, #660]	; (800c8d0 <perfect_pass+0x6bc>)
 800c63a:	2202      	movs	r2, #2
 800c63c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c63e:	4ba5      	ldr	r3, [pc, #660]	; (800c8d4 <perfect_pass+0x6c0>)
 800c640:	2200      	movs	r2, #0
 800c642:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c644:	4ba4      	ldr	r3, [pc, #656]	; (800c8d8 <perfect_pass+0x6c4>)
 800c646:	2202      	movs	r2, #2
 800c648:	701a      	strb	r2, [r3, #0]
					accel_hs = 4000;
 800c64a:	4ba4      	ldr	r3, [pc, #656]	; (800c8dc <perfect_pass+0x6c8>)
 800c64c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800c650:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800c652:	4ba3      	ldr	r3, [pc, #652]	; (800c8e0 <perfect_pass+0x6cc>)
 800c654:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c658:	801a      	strh	r2, [r3, #0]

					goal_x = GOAL_X;
 800c65a:	4ba2      	ldr	r3, [pc, #648]	; (800c8e4 <perfect_pass+0x6d0>)
 800c65c:	2200      	movs	r2, #0
 800c65e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800c660:	4ba1      	ldr	r3, [pc, #644]	; (800c8e8 <perfect_pass+0x6d4>)
 800c662:	2208      	movs	r2, #8
 800c664:	701a      	strb	r2, [r3, #0]

					get_base();
 800c666:	f005 fd95 	bl	8012194 <get_base>

					searchC();
 800c66a:	f002 fdbd 	bl	800f1e8 <searchC>
					HAL_Delay(2000);
 800c66e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c672:	f7f4 fcd3 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c676:	4b9c      	ldr	r3, [pc, #624]	; (800c8e8 <perfect_pass+0x6d4>)
 800c678:	2200      	movs	r2, #0
 800c67a:	701a      	strb	r2, [r3, #0]
 800c67c:	4b9a      	ldr	r3, [pc, #616]	; (800c8e8 <perfect_pass+0x6d4>)
 800c67e:	781a      	ldrb	r2, [r3, #0]
 800c680:	4b98      	ldr	r3, [pc, #608]	; (800c8e4 <perfect_pass+0x6d0>)
 800c682:	701a      	strb	r2, [r3, #0]
					searchC();
 800c684:	f002 fdb0 	bl	800f1e8 <searchC>

					degree_z = target_degree_z;
 800c688:	4b98      	ldr	r3, [pc, #608]	; (800c8ec <perfect_pass+0x6d8>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	4a98      	ldr	r2, [pc, #608]	; (800c8f0 <perfect_pass+0x6dc>)
 800c68e:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800c690:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c694:	f7f4 fcc2 	bl	800101c <HAL_Delay>
					degree_z = target_degree_z;
					HAL_Delay(2000);
*/

					//----a直線と大回り圧縮----
					printf("pass press 3.\n");
 800c698:	4896      	ldr	r0, [pc, #600]	; (800c8f4 <perfect_pass+0x6e0>)
 800c69a:	f006 fc65 	bl	8012f68 <puts>
					MF.FLAG.SCND = 1;
 800c69e:	4a8b      	ldr	r2, [pc, #556]	; (800c8cc <perfect_pass+0x6b8>)
 800c6a0:	8813      	ldrh	r3, [r2, #0]
 800c6a2:	f043 0320 	orr.w	r3, r3, #32
 800c6a6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c6a8:	4a88      	ldr	r2, [pc, #544]	; (800c8cc <perfect_pass+0x6b8>)
 800c6aa:	8813      	ldrh	r3, [r2, #0]
 800c6ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c6b0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c6b2:	4a86      	ldr	r2, [pc, #536]	; (800c8cc <perfect_pass+0x6b8>)
 800c6b4:	8813      	ldrh	r3, [r2, #0]
 800c6b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c6ba:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800c6bc:	4b84      	ldr	r3, [pc, #528]	; (800c8d0 <perfect_pass+0x6bc>)
 800c6be:	2202      	movs	r2, #2
 800c6c0:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c6c2:	4b84      	ldr	r3, [pc, #528]	; (800c8d4 <perfect_pass+0x6c0>)
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c6c8:	4b83      	ldr	r3, [pc, #524]	; (800c8d8 <perfect_pass+0x6c4>)
 800c6ca:	2202      	movs	r2, #2
 800c6cc:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800c6ce:	4b83      	ldr	r3, [pc, #524]	; (800c8dc <perfect_pass+0x6c8>)
 800c6d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6d4:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800c6d6:	4b82      	ldr	r3, [pc, #520]	; (800c8e0 <perfect_pass+0x6cc>)
 800c6d8:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800c6dc:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800c6de:	4b86      	ldr	r3, [pc, #536]	; (800c8f8 <perfect_pass+0x6e4>)
 800c6e0:	2203      	movs	r2, #3
 800c6e2:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800c6e4:	4b7f      	ldr	r3, [pc, #508]	; (800c8e4 <perfect_pass+0x6d0>)
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800c6ea:	4b7f      	ldr	r3, [pc, #508]	; (800c8e8 <perfect_pass+0x6d4>)
 800c6ec:	2208      	movs	r2, #8
 800c6ee:	701a      	strb	r2, [r3, #0]

					searchF3();
 800c6f0:	f003 f9f4 	bl	800fadc <searchF3>
					HAL_Delay(2000);
 800c6f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c6f8:	f7f4 fc90 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c6fc:	4b7a      	ldr	r3, [pc, #488]	; (800c8e8 <perfect_pass+0x6d4>)
 800c6fe:	2200      	movs	r2, #0
 800c700:	701a      	strb	r2, [r3, #0]
 800c702:	4b79      	ldr	r3, [pc, #484]	; (800c8e8 <perfect_pass+0x6d4>)
 800c704:	781a      	ldrb	r2, [r3, #0]
 800c706:	4b77      	ldr	r3, [pc, #476]	; (800c8e4 <perfect_pass+0x6d0>)
 800c708:	701a      	strb	r2, [r3, #0]
					searchF3();
 800c70a:	f003 f9e7 	bl	800fadc <searchF3>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800c70e:	2064      	movs	r0, #100	; 0x64
 800c710:	f7f8 fe78 	bl	8005404 <driveC2>
					degree_z = target_degree_z;
 800c714:	4b75      	ldr	r3, [pc, #468]	; (800c8ec <perfect_pass+0x6d8>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	4a75      	ldr	r2, [pc, #468]	; (800c8f0 <perfect_pass+0x6dc>)
 800c71a:	6013      	str	r3, [r2, #0]
					start_mode = 0;
 800c71c:	4b6d      	ldr	r3, [pc, #436]	; (800c8d4 <perfect_pass+0x6c0>)
 800c71e:	2200      	movs	r2, #0
 800c720:	701a      	strb	r2, [r3, #0]

					HAL_Delay(2000);
 800c722:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c726:	f7f4 fc79 	bl	800101c <HAL_Delay>


					//----a直線と大回り圧縮と斜め----
					printf("pass press 3.\n");
 800c72a:	4872      	ldr	r0, [pc, #456]	; (800c8f4 <perfect_pass+0x6e0>)
 800c72c:	f006 fc1c 	bl	8012f68 <puts>
					MF.FLAG.SCND = 1;
 800c730:	4a66      	ldr	r2, [pc, #408]	; (800c8cc <perfect_pass+0x6b8>)
 800c732:	8813      	ldrh	r3, [r2, #0]
 800c734:	f043 0320 	orr.w	r3, r3, #32
 800c738:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c73a:	4a64      	ldr	r2, [pc, #400]	; (800c8cc <perfect_pass+0x6b8>)
 800c73c:	8813      	ldrh	r3, [r2, #0]
 800c73e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c742:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c744:	4a61      	ldr	r2, [pc, #388]	; (800c8cc <perfect_pass+0x6b8>)
 800c746:	8813      	ldrh	r3, [r2, #0]
 800c748:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c74c:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800c74e:	4b60      	ldr	r3, [pc, #384]	; (800c8d0 <perfect_pass+0x6bc>)
 800c750:	2202      	movs	r2, #2
 800c752:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c754:	4b5f      	ldr	r3, [pc, #380]	; (800c8d4 <perfect_pass+0x6c0>)
 800c756:	2200      	movs	r2, #0
 800c758:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c75a:	4b5f      	ldr	r3, [pc, #380]	; (800c8d8 <perfect_pass+0x6c4>)
 800c75c:	2202      	movs	r2, #2
 800c75e:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800c760:	4b5e      	ldr	r3, [pc, #376]	; (800c8dc <perfect_pass+0x6c8>)
 800c762:	f241 3288 	movw	r2, #5000	; 0x1388
 800c766:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800c768:	4b5d      	ldr	r3, [pc, #372]	; (800c8e0 <perfect_pass+0x6cc>)
 800c76a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800c76e:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;						//a半区画ベースでroute配列生成
 800c770:	4b61      	ldr	r3, [pc, #388]	; (800c8f8 <perfect_pass+0x6e4>)
 800c772:	2204      	movs	r2, #4
 800c774:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800c776:	4b5b      	ldr	r3, [pc, #364]	; (800c8e4 <perfect_pass+0x6d0>)
 800c778:	2200      	movs	r2, #0
 800c77a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800c77c:	4b5a      	ldr	r3, [pc, #360]	; (800c8e8 <perfect_pass+0x6d4>)
 800c77e:	2208      	movs	r2, #8
 800c780:	701a      	strb	r2, [r3, #0]

					searchF4();
 800c782:	f003 fa87 	bl	800fc94 <searchF4>
					HAL_Delay(2000);
 800c786:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c78a:	f7f4 fc47 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c78e:	4b56      	ldr	r3, [pc, #344]	; (800c8e8 <perfect_pass+0x6d4>)
 800c790:	2200      	movs	r2, #0
 800c792:	701a      	strb	r2, [r3, #0]
 800c794:	4b54      	ldr	r3, [pc, #336]	; (800c8e8 <perfect_pass+0x6d4>)
 800c796:	781a      	ldrb	r2, [r3, #0]
 800c798:	4b52      	ldr	r3, [pc, #328]	; (800c8e4 <perfect_pass+0x6d0>)
 800c79a:	701a      	strb	r2, [r3, #0]
					searchF4();
 800c79c:	f003 fa7a 	bl	800fc94 <searchF4>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800c7a0:	2064      	movs	r0, #100	; 0x64
 800c7a2:	f7f8 fe2f 	bl	8005404 <driveC2>
					degree_z = target_degree_z;
 800c7a6:	4b51      	ldr	r3, [pc, #324]	; (800c8ec <perfect_pass+0x6d8>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	4a51      	ldr	r2, [pc, #324]	; (800c8f0 <perfect_pass+0x6dc>)
 800c7ac:	6013      	str	r3, [r2, #0]
					start_mode = 0;
 800c7ae:	4b49      	ldr	r3, [pc, #292]	; (800c8d4 <perfect_pass+0x6c0>)
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	701a      	strb	r2, [r3, #0]

					HAL_Delay(2000);
 800c7b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c7b8:	f7f4 fc30 	bl	800101c <HAL_Delay>
					goal_x = goal_y = 0;
					searchD();
*/

					//----a直線と大回り圧縮 High Speed----
					printf("pass press 3.\n");
 800c7bc:	484d      	ldr	r0, [pc, #308]	; (800c8f4 <perfect_pass+0x6e0>)
 800c7be:	f006 fbd3 	bl	8012f68 <puts>
					MF.FLAG.SCND = 1;
 800c7c2:	4a42      	ldr	r2, [pc, #264]	; (800c8cc <perfect_pass+0x6b8>)
 800c7c4:	8813      	ldrh	r3, [r2, #0]
 800c7c6:	f043 0320 	orr.w	r3, r3, #32
 800c7ca:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c7cc:	4a3f      	ldr	r2, [pc, #252]	; (800c8cc <perfect_pass+0x6b8>)
 800c7ce:	8813      	ldrh	r3, [r2, #0]
 800c7d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c7d4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c7d6:	4a3d      	ldr	r2, [pc, #244]	; (800c8cc <perfect_pass+0x6b8>)
 800c7d8:	8813      	ldrh	r3, [r2, #0]
 800c7da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c7de:	8013      	strh	r3, [r2, #0]
					run_mode = 3;
 800c7e0:	4b3b      	ldr	r3, [pc, #236]	; (800c8d0 <perfect_pass+0x6bc>)
 800c7e2:	2203      	movs	r2, #3
 800c7e4:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c7e6:	4b3b      	ldr	r3, [pc, #236]	; (800c8d4 <perfect_pass+0x6c0>)
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c7ec:	4b3a      	ldr	r3, [pc, #232]	; (800c8d8 <perfect_pass+0x6c4>)
 800c7ee:	2202      	movs	r2, #2
 800c7f0:	701a      	strb	r2, [r3, #0]
					accel_hs = 6000;
 800c7f2:	4b3a      	ldr	r3, [pc, #232]	; (800c8dc <perfect_pass+0x6c8>)
 800c7f4:	f241 7270 	movw	r2, #6000	; 0x1770
 800c7f8:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800c7fa:	4b39      	ldr	r3, [pc, #228]	; (800c8e0 <perfect_pass+0x6cc>)
 800c7fc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c800:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800c802:	4b3d      	ldr	r3, [pc, #244]	; (800c8f8 <perfect_pass+0x6e4>)
 800c804:	2203      	movs	r2, #3
 800c806:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800c808:	4b36      	ldr	r3, [pc, #216]	; (800c8e4 <perfect_pass+0x6d0>)
 800c80a:	2200      	movs	r2, #0
 800c80c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800c80e:	4b36      	ldr	r3, [pc, #216]	; (800c8e8 <perfect_pass+0x6d4>)
 800c810:	2208      	movs	r2, #8
 800c812:	701a      	strb	r2, [r3, #0]

					searchF3();
 800c814:	f003 f962 	bl	800fadc <searchF3>
					HAL_Delay(2000);
 800c818:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c81c:	f7f4 fbfe 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c820:	4b31      	ldr	r3, [pc, #196]	; (800c8e8 <perfect_pass+0x6d4>)
 800c822:	2200      	movs	r2, #0
 800c824:	701a      	strb	r2, [r3, #0]
 800c826:	4b30      	ldr	r3, [pc, #192]	; (800c8e8 <perfect_pass+0x6d4>)
 800c828:	781a      	ldrb	r2, [r3, #0]
 800c82a:	4b2e      	ldr	r3, [pc, #184]	; (800c8e4 <perfect_pass+0x6d0>)
 800c82c:	701a      	strb	r2, [r3, #0]
					searchF3();
 800c82e:	f003 f955 	bl	800fadc <searchF3>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800c832:	2064      	movs	r0, #100	; 0x64
 800c834:	f7f8 fde6 	bl	8005404 <driveC2>
					degree_z = target_degree_z;
 800c838:	4b2c      	ldr	r3, [pc, #176]	; (800c8ec <perfect_pass+0x6d8>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	4a2c      	ldr	r2, [pc, #176]	; (800c8f0 <perfect_pass+0x6dc>)
 800c83e:	6013      	str	r3, [r2, #0]
					start_mode = 0;
 800c840:	4b24      	ldr	r3, [pc, #144]	; (800c8d4 <perfect_pass+0x6c0>)
 800c842:	2200      	movs	r2, #0
 800c844:	701a      	strb	r2, [r3, #0]

					HAL_Delay(2000);
 800c846:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c84a:	f7f4 fbe7 	bl	800101c <HAL_Delay>


					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 800c84e:	482b      	ldr	r0, [pc, #172]	; (800c8fc <perfect_pass+0x6e8>)
 800c850:	f006 fb8a 	bl	8012f68 <puts>
					MF.FLAG.SCND = 1;
 800c854:	4a1d      	ldr	r2, [pc, #116]	; (800c8cc <perfect_pass+0x6b8>)
 800c856:	8813      	ldrh	r3, [r2, #0]
 800c858:	f043 0320 	orr.w	r3, r3, #32
 800c85c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c85e:	4a1b      	ldr	r2, [pc, #108]	; (800c8cc <perfect_pass+0x6b8>)
 800c860:	8813      	ldrh	r3, [r2, #0]
 800c862:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c866:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c868:	4a18      	ldr	r2, [pc, #96]	; (800c8cc <perfect_pass+0x6b8>)
 800c86a:	8813      	ldrh	r3, [r2, #0]
 800c86c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c870:	8013      	strh	r3, [r2, #0]
					run_mode = 3;
 800c872:	4b17      	ldr	r3, [pc, #92]	; (800c8d0 <perfect_pass+0x6bc>)
 800c874:	2203      	movs	r2, #3
 800c876:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c878:	4b16      	ldr	r3, [pc, #88]	; (800c8d4 <perfect_pass+0x6c0>)
 800c87a:	2200      	movs	r2, #0
 800c87c:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c87e:	4b16      	ldr	r3, [pc, #88]	; (800c8d8 <perfect_pass+0x6c4>)
 800c880:	2202      	movs	r2, #2
 800c882:	701a      	strb	r2, [r3, #0]
					accel_hs = 6000;
 800c884:	4b15      	ldr	r3, [pc, #84]	; (800c8dc <perfect_pass+0x6c8>)
 800c886:	f241 7270 	movw	r2, #6000	; 0x1770
 800c88a:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800c88c:	4b14      	ldr	r3, [pc, #80]	; (800c8e0 <perfect_pass+0x6cc>)
 800c88e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c892:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800c894:	4b18      	ldr	r3, [pc, #96]	; (800c8f8 <perfect_pass+0x6e4>)
 800c896:	2204      	movs	r2, #4
 800c898:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800c89a:	4b12      	ldr	r3, [pc, #72]	; (800c8e4 <perfect_pass+0x6d0>)
 800c89c:	2200      	movs	r2, #0
 800c89e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800c8a0:	4b11      	ldr	r3, [pc, #68]	; (800c8e8 <perfect_pass+0x6d4>)
 800c8a2:	2208      	movs	r2, #8
 800c8a4:	701a      	strb	r2, [r3, #0]

					searchF4();
 800c8a6:	f003 f9f5 	bl	800fc94 <searchF4>
					HAL_Delay(2000);
 800c8aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c8ae:	f7f4 fbb5 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c8b2:	4b0d      	ldr	r3, [pc, #52]	; (800c8e8 <perfect_pass+0x6d4>)
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	701a      	strb	r2, [r3, #0]
 800c8b8:	4b0b      	ldr	r3, [pc, #44]	; (800c8e8 <perfect_pass+0x6d4>)
 800c8ba:	781a      	ldrb	r2, [r3, #0]
 800c8bc:	4b09      	ldr	r3, [pc, #36]	; (800c8e4 <perfect_pass+0x6d0>)
 800c8be:	701a      	strb	r2, [r3, #0]
					searchF4();
 800c8c0:	f003 f9e8 	bl	800fc94 <searchF4>

					break;
 800c8c4:	e175      	b.n	800cbb2 <perfect_pass+0x99e>
 800c8c6:	bf00      	nop
 800c8c8:	0801437c 	.word	0x0801437c
 800c8cc:	20000fa8 	.word	0x20000fa8
 800c8d0:	20000456 	.word	0x20000456
 800c8d4:	20001648 	.word	0x20001648
 800c8d8:	20000c31 	.word	0x20000c31
 800c8dc:	20000454 	.word	0x20000454
 800c8e0:	20000ffc 	.word	0x20000ffc
 800c8e4:	20000c30 	.word	0x20000c30
 800c8e8:	20000b8c 	.word	0x20000b8c
 800c8ec:	20000c78 	.word	0x20000c78
 800c8f0:	20000b9c 	.word	0x20000b9c
 800c8f4:	08014478 	.word	0x08014478
 800c8f8:	20000457 	.word	0x20000457
 800c8fc:	080142c0 	.word	0x080142c0

				case 7:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800c900:	48af      	ldr	r0, [pc, #700]	; (800cbc0 <perfect_pass+0x9ac>)
 800c902:	f006 fb31 	bl	8012f68 <puts>
					MF.FLAG.SCND = 0;
 800c906:	4aaf      	ldr	r2, [pc, #700]	; (800cbc4 <perfect_pass+0x9b0>)
 800c908:	8813      	ldrh	r3, [r2, #0]
 800c90a:	f36f 1345 	bfc	r3, #5, #1
 800c90e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c910:	4aac      	ldr	r2, [pc, #688]	; (800cbc4 <perfect_pass+0x9b0>)
 800c912:	8813      	ldrh	r3, [r2, #0]
 800c914:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c918:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800c91a:	4aaa      	ldr	r2, [pc, #680]	; (800cbc4 <perfect_pass+0x9b0>)
 800c91c:	8813      	ldrh	r3, [r2, #0]
 800c91e:	f36f 238a 	bfc	r3, #10, #1
 800c922:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800c924:	4ba8      	ldr	r3, [pc, #672]	; (800cbc8 <perfect_pass+0x9b4>)
 800c926:	2202      	movs	r2, #2
 800c928:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c92a:	4ba8      	ldr	r3, [pc, #672]	; (800cbcc <perfect_pass+0x9b8>)
 800c92c:	2200      	movs	r2, #0
 800c92e:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c930:	4ba7      	ldr	r3, [pc, #668]	; (800cbd0 <perfect_pass+0x9bc>)
 800c932:	2202      	movs	r2, #2
 800c934:	701a      	strb	r2, [r3, #0]
					accel_hs = 4000;
 800c936:	4ba7      	ldr	r3, [pc, #668]	; (800cbd4 <perfect_pass+0x9c0>)
 800c938:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800c93c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800c93e:	4ba6      	ldr	r3, [pc, #664]	; (800cbd8 <perfect_pass+0x9c4>)
 800c940:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c944:	801a      	strh	r2, [r3, #0]

					goal_x = 7;
 800c946:	4ba5      	ldr	r3, [pc, #660]	; (800cbdc <perfect_pass+0x9c8>)
 800c948:	2207      	movs	r2, #7
 800c94a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c94c:	4ba4      	ldr	r3, [pc, #656]	; (800cbe0 <perfect_pass+0x9cc>)
 800c94e:	2207      	movs	r2, #7
 800c950:	701a      	strb	r2, [r3, #0]

					get_base();
 800c952:	f005 fc1f 	bl	8012194 <get_base>

					searchC();
 800c956:	f002 fc47 	bl	800f1e8 <searchC>
					HAL_Delay(2000);
 800c95a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c95e:	f7f4 fb5d 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c962:	4b9f      	ldr	r3, [pc, #636]	; (800cbe0 <perfect_pass+0x9cc>)
 800c964:	2200      	movs	r2, #0
 800c966:	701a      	strb	r2, [r3, #0]
 800c968:	4b9d      	ldr	r3, [pc, #628]	; (800cbe0 <perfect_pass+0x9cc>)
 800c96a:	781a      	ldrb	r2, [r3, #0]
 800c96c:	4b9b      	ldr	r3, [pc, #620]	; (800cbdc <perfect_pass+0x9c8>)
 800c96e:	701a      	strb	r2, [r3, #0]
					searchC();
 800c970:	f002 fc3a 	bl	800f1e8 <searchC>

					degree_z = target_degree_z;
 800c974:	4b9b      	ldr	r3, [pc, #620]	; (800cbe4 <perfect_pass+0x9d0>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	4a9b      	ldr	r2, [pc, #620]	; (800cbe8 <perfect_pass+0x9d4>)
 800c97a:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800c97c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c980:	f7f4 fb4c 	bl	800101c <HAL_Delay>
					degree_z = target_degree_z;
					HAL_Delay(2000);
*/

					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース----
					printf("pass press 3.\n");
 800c984:	4899      	ldr	r0, [pc, #612]	; (800cbec <perfect_pass+0x9d8>)
 800c986:	f006 faef 	bl	8012f68 <puts>
					MF.FLAG.SCND = 1;
 800c98a:	4a8e      	ldr	r2, [pc, #568]	; (800cbc4 <perfect_pass+0x9b0>)
 800c98c:	8813      	ldrh	r3, [r2, #0]
 800c98e:	f043 0320 	orr.w	r3, r3, #32
 800c992:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c994:	4a8b      	ldr	r2, [pc, #556]	; (800cbc4 <perfect_pass+0x9b0>)
 800c996:	8813      	ldrh	r3, [r2, #0]
 800c998:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c99c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c99e:	4a89      	ldr	r2, [pc, #548]	; (800cbc4 <perfect_pass+0x9b0>)
 800c9a0:	8813      	ldrh	r3, [r2, #0]
 800c9a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c9a6:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800c9a8:	4b87      	ldr	r3, [pc, #540]	; (800cbc8 <perfect_pass+0x9b4>)
 800c9aa:	2202      	movs	r2, #2
 800c9ac:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c9ae:	4b87      	ldr	r3, [pc, #540]	; (800cbcc <perfect_pass+0x9b8>)
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c9b4:	4b86      	ldr	r3, [pc, #536]	; (800cbd0 <perfect_pass+0x9bc>)
 800c9b6:	2202      	movs	r2, #2
 800c9b8:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800c9ba:	4b86      	ldr	r3, [pc, #536]	; (800cbd4 <perfect_pass+0x9c0>)
 800c9bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9c0:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800c9c2:	4b85      	ldr	r3, [pc, #532]	; (800cbd8 <perfect_pass+0x9c4>)
 800c9c4:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800c9c8:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800c9ca:	4b89      	ldr	r3, [pc, #548]	; (800cbf0 <perfect_pass+0x9dc>)
 800c9cc:	2203      	movs	r2, #3
 800c9ce:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800c9d0:	4b82      	ldr	r3, [pc, #520]	; (800cbdc <perfect_pass+0x9c8>)
 800c9d2:	2207      	movs	r2, #7
 800c9d4:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c9d6:	4b82      	ldr	r3, [pc, #520]	; (800cbe0 <perfect_pass+0x9cc>)
 800c9d8:	2207      	movs	r2, #7
 800c9da:	701a      	strb	r2, [r3, #0]

					searchF3();
 800c9dc:	f003 f87e 	bl	800fadc <searchF3>
					HAL_Delay(2000);
 800c9e0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c9e4:	f7f4 fb1a 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c9e8:	4b7d      	ldr	r3, [pc, #500]	; (800cbe0 <perfect_pass+0x9cc>)
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	701a      	strb	r2, [r3, #0]
 800c9ee:	4b7c      	ldr	r3, [pc, #496]	; (800cbe0 <perfect_pass+0x9cc>)
 800c9f0:	781a      	ldrb	r2, [r3, #0]
 800c9f2:	4b7a      	ldr	r3, [pc, #488]	; (800cbdc <perfect_pass+0x9c8>)
 800c9f4:	701a      	strb	r2, [r3, #0]
					searchF3();
 800c9f6:	f003 f871 	bl	800fadc <searchF3>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800c9fa:	2064      	movs	r0, #100	; 0x64
 800c9fc:	f7f8 fd02 	bl	8005404 <driveC2>
					degree_z = target_degree_z;
 800ca00:	4b78      	ldr	r3, [pc, #480]	; (800cbe4 <perfect_pass+0x9d0>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	4a78      	ldr	r2, [pc, #480]	; (800cbe8 <perfect_pass+0x9d4>)
 800ca06:	6013      	str	r3, [r2, #0]
					start_mode = 0;
 800ca08:	4b70      	ldr	r3, [pc, #448]	; (800cbcc <perfect_pass+0x9b8>)
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	701a      	strb	r2, [r3, #0]
					HAL_Delay(2000);
 800ca0e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ca12:	f7f4 fb03 	bl	800101c <HAL_Delay>


					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 800ca16:	4877      	ldr	r0, [pc, #476]	; (800cbf4 <perfect_pass+0x9e0>)
 800ca18:	f006 faa6 	bl	8012f68 <puts>
					MF.FLAG.SCND = 1;
 800ca1c:	4a69      	ldr	r2, [pc, #420]	; (800cbc4 <perfect_pass+0x9b0>)
 800ca1e:	8813      	ldrh	r3, [r2, #0]
 800ca20:	f043 0320 	orr.w	r3, r3, #32
 800ca24:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ca26:	4a67      	ldr	r2, [pc, #412]	; (800cbc4 <perfect_pass+0x9b0>)
 800ca28:	8813      	ldrh	r3, [r2, #0]
 800ca2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ca2e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800ca30:	4a64      	ldr	r2, [pc, #400]	; (800cbc4 <perfect_pass+0x9b0>)
 800ca32:	8813      	ldrh	r3, [r2, #0]
 800ca34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ca38:	8013      	strh	r3, [r2, #0]
					run_mode = 2;
 800ca3a:	4b63      	ldr	r3, [pc, #396]	; (800cbc8 <perfect_pass+0x9b4>)
 800ca3c:	2202      	movs	r2, #2
 800ca3e:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800ca40:	4b62      	ldr	r3, [pc, #392]	; (800cbcc <perfect_pass+0x9b8>)
 800ca42:	2200      	movs	r2, #0
 800ca44:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800ca46:	4b62      	ldr	r3, [pc, #392]	; (800cbd0 <perfect_pass+0x9bc>)
 800ca48:	2202      	movs	r2, #2
 800ca4a:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800ca4c:	4b61      	ldr	r3, [pc, #388]	; (800cbd4 <perfect_pass+0x9c0>)
 800ca4e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca52:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800ca54:	4b60      	ldr	r3, [pc, #384]	; (800cbd8 <perfect_pass+0x9c4>)
 800ca56:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800ca5a:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800ca5c:	4b64      	ldr	r3, [pc, #400]	; (800cbf0 <perfect_pass+0x9dc>)
 800ca5e:	2204      	movs	r2, #4
 800ca60:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800ca62:	4b5e      	ldr	r3, [pc, #376]	; (800cbdc <perfect_pass+0x9c8>)
 800ca64:	2207      	movs	r2, #7
 800ca66:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800ca68:	4b5d      	ldr	r3, [pc, #372]	; (800cbe0 <perfect_pass+0x9cc>)
 800ca6a:	2207      	movs	r2, #7
 800ca6c:	701a      	strb	r2, [r3, #0]

					searchF4();
 800ca6e:	f003 f911 	bl	800fc94 <searchF4>
					HAL_Delay(2000);
 800ca72:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ca76:	f7f4 fad1 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ca7a:	4b59      	ldr	r3, [pc, #356]	; (800cbe0 <perfect_pass+0x9cc>)
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	701a      	strb	r2, [r3, #0]
 800ca80:	4b57      	ldr	r3, [pc, #348]	; (800cbe0 <perfect_pass+0x9cc>)
 800ca82:	781a      	ldrb	r2, [r3, #0]
 800ca84:	4b55      	ldr	r3, [pc, #340]	; (800cbdc <perfect_pass+0x9c8>)
 800ca86:	701a      	strb	r2, [r3, #0]
					searchF4();
 800ca88:	f003 f904 	bl	800fc94 <searchF4>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800ca8c:	2064      	movs	r0, #100	; 0x64
 800ca8e:	f7f8 fcb9 	bl	8005404 <driveC2>
					degree_z = target_degree_z;
 800ca92:	4b54      	ldr	r3, [pc, #336]	; (800cbe4 <perfect_pass+0x9d0>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	4a54      	ldr	r2, [pc, #336]	; (800cbe8 <perfect_pass+0x9d4>)
 800ca98:	6013      	str	r3, [r2, #0]
					start_mode = 0;
 800ca9a:	4b4c      	ldr	r3, [pc, #304]	; (800cbcc <perfect_pass+0x9b8>)
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	701a      	strb	r2, [r3, #0]

					HAL_Delay(2000);
 800caa0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800caa4:	f7f4 faba 	bl	800101c <HAL_Delay>
					goal_x = goal_y = 0;
					searchD();
*/

					//----a直線と大回り圧縮 High Speed----
					printf("pass press 3.\n");
 800caa8:	4850      	ldr	r0, [pc, #320]	; (800cbec <perfect_pass+0x9d8>)
 800caaa:	f006 fa5d 	bl	8012f68 <puts>
					MF.FLAG.SCND = 1;
 800caae:	4a45      	ldr	r2, [pc, #276]	; (800cbc4 <perfect_pass+0x9b0>)
 800cab0:	8813      	ldrh	r3, [r2, #0]
 800cab2:	f043 0320 	orr.w	r3, r3, #32
 800cab6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800cab8:	4a42      	ldr	r2, [pc, #264]	; (800cbc4 <perfect_pass+0x9b0>)
 800caba:	8813      	ldrh	r3, [r2, #0]
 800cabc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cac0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800cac2:	4a40      	ldr	r2, [pc, #256]	; (800cbc4 <perfect_pass+0x9b0>)
 800cac4:	8813      	ldrh	r3, [r2, #0]
 800cac6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800caca:	8013      	strh	r3, [r2, #0]
					run_mode = 3;
 800cacc:	4b3e      	ldr	r3, [pc, #248]	; (800cbc8 <perfect_pass+0x9b4>)
 800cace:	2203      	movs	r2, #3
 800cad0:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800cad2:	4b3e      	ldr	r3, [pc, #248]	; (800cbcc <perfect_pass+0x9b8>)
 800cad4:	2200      	movs	r2, #0
 800cad6:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800cad8:	4b3d      	ldr	r3, [pc, #244]	; (800cbd0 <perfect_pass+0x9bc>)
 800cada:	2202      	movs	r2, #2
 800cadc:	701a      	strb	r2, [r3, #0]
					accel_hs = 6000;
 800cade:	4b3d      	ldr	r3, [pc, #244]	; (800cbd4 <perfect_pass+0x9c0>)
 800cae0:	f241 7270 	movw	r2, #6000	; 0x1770
 800cae4:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800cae6:	4b3c      	ldr	r3, [pc, #240]	; (800cbd8 <perfect_pass+0x9c4>)
 800cae8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800caec:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800caee:	4b40      	ldr	r3, [pc, #256]	; (800cbf0 <perfect_pass+0x9dc>)
 800caf0:	2203      	movs	r2, #3
 800caf2:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800caf4:	4b39      	ldr	r3, [pc, #228]	; (800cbdc <perfect_pass+0x9c8>)
 800caf6:	2207      	movs	r2, #7
 800caf8:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800cafa:	4b39      	ldr	r3, [pc, #228]	; (800cbe0 <perfect_pass+0x9cc>)
 800cafc:	2207      	movs	r2, #7
 800cafe:	701a      	strb	r2, [r3, #0]

					searchF3();
 800cb00:	f002 ffec 	bl	800fadc <searchF3>
					HAL_Delay(2000);
 800cb04:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800cb08:	f7f4 fa88 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800cb0c:	4b34      	ldr	r3, [pc, #208]	; (800cbe0 <perfect_pass+0x9cc>)
 800cb0e:	2200      	movs	r2, #0
 800cb10:	701a      	strb	r2, [r3, #0]
 800cb12:	4b33      	ldr	r3, [pc, #204]	; (800cbe0 <perfect_pass+0x9cc>)
 800cb14:	781a      	ldrb	r2, [r3, #0]
 800cb16:	4b31      	ldr	r3, [pc, #196]	; (800cbdc <perfect_pass+0x9c8>)
 800cb18:	701a      	strb	r2, [r3, #0]
					searchF3();
 800cb1a:	f002 ffdf 	bl	800fadc <searchF3>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800cb1e:	2064      	movs	r0, #100	; 0x64
 800cb20:	f7f8 fc70 	bl	8005404 <driveC2>
					degree_z = target_degree_z;
 800cb24:	4b2f      	ldr	r3, [pc, #188]	; (800cbe4 <perfect_pass+0x9d0>)
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	4a2f      	ldr	r2, [pc, #188]	; (800cbe8 <perfect_pass+0x9d4>)
 800cb2a:	6013      	str	r3, [r2, #0]
					start_mode = 0;
 800cb2c:	4b27      	ldr	r3, [pc, #156]	; (800cbcc <perfect_pass+0x9b8>)
 800cb2e:	2200      	movs	r2, #0
 800cb30:	701a      	strb	r2, [r3, #0]

					HAL_Delay(2000);
 800cb32:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800cb36:	f7f4 fa71 	bl	800101c <HAL_Delay>


					//----a直線と大回り圧縮と斜め High Speedｰｰｰｰ
					printf("pass press 4.\n");
 800cb3a:	482e      	ldr	r0, [pc, #184]	; (800cbf4 <perfect_pass+0x9e0>)
 800cb3c:	f006 fa14 	bl	8012f68 <puts>
					MF.FLAG.SCND = 1;
 800cb40:	4a20      	ldr	r2, [pc, #128]	; (800cbc4 <perfect_pass+0x9b0>)
 800cb42:	8813      	ldrh	r3, [r2, #0]
 800cb44:	f043 0320 	orr.w	r3, r3, #32
 800cb48:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800cb4a:	4a1e      	ldr	r2, [pc, #120]	; (800cbc4 <perfect_pass+0x9b0>)
 800cb4c:	8813      	ldrh	r3, [r2, #0]
 800cb4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cb52:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800cb54:	4a1b      	ldr	r2, [pc, #108]	; (800cbc4 <perfect_pass+0x9b0>)
 800cb56:	8813      	ldrh	r3, [r2, #0]
 800cb58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cb5c:	8013      	strh	r3, [r2, #0]
					run_mode = 3;
 800cb5e:	4b1a      	ldr	r3, [pc, #104]	; (800cbc8 <perfect_pass+0x9b4>)
 800cb60:	2203      	movs	r2, #3
 800cb62:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800cb64:	4b19      	ldr	r3, [pc, #100]	; (800cbcc <perfect_pass+0x9b8>)
 800cb66:	2200      	movs	r2, #0
 800cb68:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800cb6a:	4b19      	ldr	r3, [pc, #100]	; (800cbd0 <perfect_pass+0x9bc>)
 800cb6c:	2202      	movs	r2, #2
 800cb6e:	701a      	strb	r2, [r3, #0]
					accel_hs = 6000;
 800cb70:	4b18      	ldr	r3, [pc, #96]	; (800cbd4 <perfect_pass+0x9c0>)
 800cb72:	f241 7270 	movw	r2, #6000	; 0x1770
 800cb76:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800cb78:	4b17      	ldr	r3, [pc, #92]	; (800cbd8 <perfect_pass+0x9c4>)
 800cb7a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800cb7e:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800cb80:	4b1b      	ldr	r3, [pc, #108]	; (800cbf0 <perfect_pass+0x9dc>)
 800cb82:	2204      	movs	r2, #4
 800cb84:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800cb86:	4b15      	ldr	r3, [pc, #84]	; (800cbdc <perfect_pass+0x9c8>)
 800cb88:	2207      	movs	r2, #7
 800cb8a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800cb8c:	4b14      	ldr	r3, [pc, #80]	; (800cbe0 <perfect_pass+0x9cc>)
 800cb8e:	2207      	movs	r2, #7
 800cb90:	701a      	strb	r2, [r3, #0]

					searchF4();
 800cb92:	f003 f87f 	bl	800fc94 <searchF4>
					HAL_Delay(2000);
 800cb96:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800cb9a:	f7f4 fa3f 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800cb9e:	4b10      	ldr	r3, [pc, #64]	; (800cbe0 <perfect_pass+0x9cc>)
 800cba0:	2200      	movs	r2, #0
 800cba2:	701a      	strb	r2, [r3, #0]
 800cba4:	4b0e      	ldr	r3, [pc, #56]	; (800cbe0 <perfect_pass+0x9cc>)
 800cba6:	781a      	ldrb	r2, [r3, #0]
 800cba8:	4b0c      	ldr	r3, [pc, #48]	; (800cbdc <perfect_pass+0x9c8>)
 800cbaa:	701a      	strb	r2, [r3, #0]
					searchF4();
 800cbac:	f003 f872 	bl	800fc94 <searchF4>

					break;
 800cbb0:	bf00      	nop
			  }
			  dist_l = 0;
 800cbb2:	4b11      	ldr	r3, [pc, #68]	; (800cbf8 <perfect_pass+0x9e4>)
 800cbb4:	f04f 0200 	mov.w	r2, #0
 800cbb8:	601a      	str	r2, [r3, #0]
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800cbba:	f7ff bb34 	b.w	800c226 <perfect_pass+0x12>
 800cbbe:	bf00      	nop
 800cbc0:	0801437c 	.word	0x0801437c
 800cbc4:	20000fa8 	.word	0x20000fa8
 800cbc8:	20000456 	.word	0x20000456
 800cbcc:	20001648 	.word	0x20001648
 800cbd0:	20000c31 	.word	0x20000c31
 800cbd4:	20000454 	.word	0x20000454
 800cbd8:	20000ffc 	.word	0x20000ffc
 800cbdc:	20000c30 	.word	0x20000c30
 800cbe0:	20000b8c 	.word	0x20000b8c
 800cbe4:	20000c78 	.word	0x20000c78
 800cbe8:	20000b9c 	.word	0x20000b9c
 800cbec:	08014478 	.word	0x08014478
 800cbf0:	20000457 	.word	0x20000457
 800cbf4:	080142c0 	.word	0x080142c0
 800cbf8:	20001644 	.word	0x20001644

0800cbfc <eeprom_enable_write>:
//eeprom_enable_write
// eepromとして使うflashメモリ領域をeraseし，書き込みを有効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_enable_write(void){
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b088      	sub	sp, #32
 800cc00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t PageError = 0;
 800cc02:	2300      	movs	r3, #0
 800cc04:	607b      	str	r3, [r7, #4]
  EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800cc06:	2300      	movs	r3, #0
 800cc08:	60bb      	str	r3, [r7, #8]
  //EraseInitStruct.Banks = FLASH_BANK_1;
  //EraseInitStruct.Sector = EEPROM_START_ADDRESS;
  EraseInitStruct.Sector = FLASH_SECTOR_11;
 800cc0a:	230b      	movs	r3, #11
 800cc0c:	613b      	str	r3, [r7, #16]
  EraseInitStruct.NbSectors = 1;
 800cc0e:	2301      	movs	r3, #1
 800cc10:	617b      	str	r3, [r7, #20]
  EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800cc12:	2302      	movs	r3, #2
 800cc14:	61bb      	str	r3, [r7, #24]

  status = HAL_FLASH_Unlock();
 800cc16:	f7f4 ff43 	bl	8001aa0 <HAL_FLASH_Unlock>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	77fb      	strb	r3, [r7, #31]
  if(status != HAL_OK) return status;
 800cc1e:	7ffb      	ldrb	r3, [r7, #31]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d001      	beq.n	800cc28 <eeprom_enable_write+0x2c>
 800cc24:	7ffb      	ldrb	r3, [r7, #31]
 800cc26:	e009      	b.n	800cc3c <eeprom_enable_write+0x40>
  status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 800cc28:	1d3a      	adds	r2, r7, #4
 800cc2a:	f107 0308 	add.w	r3, r7, #8
 800cc2e:	4611      	mov	r1, r2
 800cc30:	4618      	mov	r0, r3
 800cc32:	f7f5 f893 	bl	8001d5c <HAL_FLASHEx_Erase>
 800cc36:	4603      	mov	r3, r0
 800cc38:	77fb      	strb	r3, [r7, #31]
  return status;
 800cc3a:	7ffb      	ldrb	r3, [r7, #31]
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3720      	adds	r7, #32
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}

0800cc44 <eeprom_disable_write>:
//eeprom_disable_write
// eepromとして使うflashメモリ領域への書き込みを無効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_disable_write(void){
 800cc44:	b580      	push	{r7, lr}
 800cc46:	af00      	add	r7, sp, #0
  return HAL_FLASH_Lock();
 800cc48:	f7f4 ff4c 	bl	8001ae4 <HAL_FLASH_Lock>
 800cc4c:	4603      	mov	r3, r0
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	bd80      	pop	{r7, pc}

0800cc52 <eeprom_write_halfword>:
//eeprom_write_halfword
// eepromとして使うflashメモリ領域へ2バイトの値を書き込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット，data …… 書き込みたいuin16_t型データ
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_write_halfword(uint32_t address, uint16_t data){
 800cc52:	b590      	push	{r4, r7, lr}
 800cc54:	b085      	sub	sp, #20
 800cc56:	af00      	add	r7, sp, #0
 800cc58:	6078      	str	r0, [r7, #4]
 800cc5a:	460b      	mov	r3, r1
 800cc5c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status;
  address = address*2 + EEPROM_START_ADDRESS;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800cc64:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 800cc68:	005b      	lsls	r3, r3, #1
 800cc6a:	607b      	str	r3, [r7, #4]
  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 800cc6c:	887b      	ldrh	r3, [r7, #2]
 800cc6e:	f04f 0400 	mov.w	r4, #0
 800cc72:	461a      	mov	r2, r3
 800cc74:	4623      	mov	r3, r4
 800cc76:	6879      	ldr	r1, [r7, #4]
 800cc78:	2001      	movs	r0, #1
 800cc7a:	f7f4 febd 	bl	80019f8 <HAL_FLASH_Program>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	73fb      	strb	r3, [r7, #15]
  return status;
 800cc82:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	3714      	adds	r7, #20
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd90      	pop	{r4, r7, pc}

0800cc8c <eeprom_read_halfword>:
//eeprom_read_halfword
// eepromとして使うflashメモリ領域から2バイトの値を読み込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット
// 戻り値：読み込んだuin16_t型データ
//+++++++++++++++++++++++++++++++++++++++++++++++
uint16_t eeprom_read_halfword(uint32_t address){
 800cc8c:	b480      	push	{r7}
 800cc8e:	b085      	sub	sp, #20
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
  uint16_t val = 0;
 800cc94:	2300      	movs	r3, #0
 800cc96:	81fb      	strh	r3, [r7, #14]
  address = address*2 + EEPROM_START_ADDRESS;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800cc9e:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 800cca2:	005b      	lsls	r3, r3, #1
 800cca4:	607b      	str	r3, [r7, #4]
  val = *(__IO uint16_t *)address;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	881b      	ldrh	r3, [r3, #0]
 800ccaa:	81fb      	strh	r3, [r7, #14]
  return val;
 800ccac:	89fb      	ldrh	r3, [r7, #14]
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3714      	adds	r7, #20
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb8:	4770      	bx	lr
	...

0800ccbc <gyro_init>:
#include "global.h"

SPI_HandleTypeDef hspi3;


void gyro_init(void){
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b082      	sub	sp, #8
 800ccc0:	af00      	add	r7, sp, #0
  uint8_t who_am_i;

  HAL_Delay(100); 					// wait start up
 800ccc2:	2064      	movs	r0, #100	; 0x64
 800ccc4:	f7f4 f9aa 	bl	800101c <HAL_Delay>
  who_am_i = read_byte(WHO_AM_I); 	// 1. read who am i
 800ccc8:	2075      	movs	r0, #117	; 0x75
 800ccca:	f000 f82f 	bl	800cd2c <read_byte>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	71fb      	strb	r3, [r7, #7]
  printf("0x%x\r\n",who_am_i); 		// 2. check who am i value
 800ccd2:	79fb      	ldrb	r3, [r7, #7]
 800ccd4:	4619      	mov	r1, r3
 800ccd6:	4813      	ldr	r0, [pc, #76]	; (800cd24 <gyro_init+0x68>)
 800ccd8:	f006 f8d2 	bl	8012e80 <iprintf>

  // 2. error check
  if (who_am_i != 0x98){
 800ccdc:	79fb      	ldrb	r3, [r7, #7]
 800ccde:	2b98      	cmp	r3, #152	; 0x98
 800cce0:	d003      	beq.n	800ccea <gyro_init+0x2e>
    while(1){
      printf("gyro_error\r");
 800cce2:	4811      	ldr	r0, [pc, #68]	; (800cd28 <gyro_init+0x6c>)
 800cce4:	f006 f8cc 	bl	8012e80 <iprintf>
 800cce8:	e7fb      	b.n	800cce2 <gyro_init+0x26>
    }
  }

  HAL_Delay(50); // wait
 800ccea:	2032      	movs	r0, #50	; 0x32
 800ccec:	f7f4 f996 	bl	800101c <HAL_Delay>
  write_byte(PWR_MGMT_1, 0x00); 	// 3. set pwr_might
 800ccf0:	2100      	movs	r1, #0
 800ccf2:	206b      	movs	r0, #107	; 0x6b
 800ccf4:	f000 f846 	bl	800cd84 <write_byte>

  HAL_Delay(50);
 800ccf8:	2032      	movs	r0, #50	; 0x32
 800ccfa:	f7f4 f98f 	bl	800101c <HAL_Delay>
  write_byte(CONFIG, 0x00); 		// 4. set config
 800ccfe:	2100      	movs	r1, #0
 800cd00:	201a      	movs	r0, #26
 800cd02:	f000 f83f 	bl	800cd84 <write_byte>

  HAL_Delay(50);
 800cd06:	2032      	movs	r0, #50	; 0x32
 800cd08:	f7f4 f988 	bl	800101c <HAL_Delay>
  write_byte(GYRO_CONFIG, 0x18); 	// 5. set gyro config
 800cd0c:	2118      	movs	r1, #24
 800cd0e:	201b      	movs	r0, #27
 800cd10:	f000 f838 	bl	800cd84 <write_byte>

  HAL_Delay(50);
 800cd14:	2032      	movs	r0, #50	; 0x32
 800cd16:	f7f4 f981 	bl	800101c <HAL_Delay>
}
 800cd1a:	bf00      	nop
 800cd1c:	3708      	adds	r7, #8
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}
 800cd22:	bf00      	nop
 800cd24:	08014488 	.word	0x08014488
 800cd28:	08014490 	.word	0x08014490

0800cd2c <read_byte>:


uint8_t read_byte(uint8_t reg){
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b084      	sub	sp, #16
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	4603      	mov	r3, r0
 800cd34:	71fb      	strb	r3, [r7, #7]
  uint8_t ret,val;
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET ); 	//cs = Low;
 800cd36:	2200      	movs	r2, #0
 800cd38:	2104      	movs	r1, #4
 800cd3a:	4810      	ldr	r0, [pc, #64]	; (800cd7c <read_byte+0x50>)
 800cd3c:	f7f5 fae2 	bl	8002304 <HAL_GPIO_WritePin>
  ret = reg | 0x80;  // MSB = 1
 800cd40:	79fb      	ldrb	r3, [r7, #7]
 800cd42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cd46:	b2db      	uxtb	r3, r3
 800cd48:	73fb      	strb	r3, [r7, #15]
  HAL_SPI_Transmit(&hspi3, &ret,1,100); 					// sent 1byte(address)
 800cd4a:	f107 010f 	add.w	r1, r7, #15
 800cd4e:	2364      	movs	r3, #100	; 0x64
 800cd50:	2201      	movs	r2, #1
 800cd52:	480b      	ldr	r0, [pc, #44]	; (800cd80 <read_byte+0x54>)
 800cd54:	f7f5 ff5e 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi3,&val,1,100); 						// read 1byte(read data)
 800cd58:	f107 010e 	add.w	r1, r7, #14
 800cd5c:	2364      	movs	r3, #100	; 0x64
 800cd5e:	2201      	movs	r2, #1
 800cd60:	4807      	ldr	r0, [pc, #28]	; (800cd80 <read_byte+0x54>)
 800cd62:	f7f6 f88b 	bl	8002e7c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET );  	//cs = High;
 800cd66:	2201      	movs	r2, #1
 800cd68:	2104      	movs	r1, #4
 800cd6a:	4804      	ldr	r0, [pc, #16]	; (800cd7c <read_byte+0x50>)
 800cd6c:	f7f5 faca 	bl	8002304 <HAL_GPIO_WritePin>
  return val;
 800cd70:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	3710      	adds	r7, #16
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
 800cd7a:	bf00      	nop
 800cd7c:	40020c00 	.word	0x40020c00
 800cd80:	20000144 	.word	0x20000144

0800cd84 <write_byte>:


void write_byte(uint8_t reg, uint8_t val){
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b084      	sub	sp, #16
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	460a      	mov	r2, r1
 800cd8e:	71fb      	strb	r3, [r7, #7]
 800cd90:	4613      	mov	r3, r2
 800cd92:	71bb      	strb	r3, [r7, #6]
  uint8_t ret;
  ret = reg & 0x7F ; // MSB = 0
 800cd94:	79fb      	ldrb	r3, [r7, #7]
 800cd96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd9a:	b2db      	uxtb	r3, r3
 800cd9c:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET); 	// cs = Low;
 800cd9e:	2200      	movs	r2, #0
 800cda0:	2104      	movs	r1, #4
 800cda2:	480c      	ldr	r0, [pc, #48]	; (800cdd4 <write_byte+0x50>)
 800cda4:	f7f5 faae 	bl	8002304 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, &ret,1,100); 					// sent 1byte(address)
 800cda8:	f107 010f 	add.w	r1, r7, #15
 800cdac:	2364      	movs	r3, #100	; 0x64
 800cdae:	2201      	movs	r2, #1
 800cdb0:	4809      	ldr	r0, [pc, #36]	; (800cdd8 <write_byte+0x54>)
 800cdb2:	f7f5 ff2f 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi3, &val,1,100); 					// read 1byte(write data)
 800cdb6:	1db9      	adds	r1, r7, #6
 800cdb8:	2364      	movs	r3, #100	; 0x64
 800cdba:	2201      	movs	r2, #1
 800cdbc:	4806      	ldr	r0, [pc, #24]	; (800cdd8 <write_byte+0x54>)
 800cdbe:	f7f5 ff29 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET); 		// cs = High;
 800cdc2:	2201      	movs	r2, #1
 800cdc4:	2104      	movs	r1, #4
 800cdc6:	4803      	ldr	r0, [pc, #12]	; (800cdd4 <write_byte+0x50>)
 800cdc8:	f7f5 fa9c 	bl	8002304 <HAL_GPIO_WritePin>
}
 800cdcc:	bf00      	nop
 800cdce:	3710      	adds	r7, #16
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}
 800cdd4:	40020c00 	.word	0x40020c00
 800cdd8:	20000144 	.word	0x20000144

0800cddc <accel_read_x>:


float accel_read_x(void){
 800cddc:	b590      	push	{r4, r7, lr}
 800cdde:	b083      	sub	sp, #12
 800cde0:	af00      	add	r7, sp, #0
  int16_t accel_x;
  float accel;

  // H:8bit shift, Link h and l
  accel_x = (int16_t)((int16_t)(read_byte(ACCEL_XOUT_H) << 8) | read_byte(ACCEL_XOUT_L));
 800cde2:	203b      	movs	r0, #59	; 0x3b
 800cde4:	f7ff ffa2 	bl	800cd2c <read_byte>
 800cde8:	4603      	mov	r3, r0
 800cdea:	021b      	lsls	r3, r3, #8
 800cdec:	b21c      	sxth	r4, r3
 800cdee:	203c      	movs	r0, #60	; 0x3c
 800cdf0:	f7ff ff9c 	bl	800cd2c <read_byte>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	b21b      	sxth	r3, r3
 800cdf8:	4323      	orrs	r3, r4
 800cdfa:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_x / ACCEL_FACTOR); // dps to accel
 800cdfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	da01      	bge.n	800ce08 <accel_read_x+0x2c>
 800ce04:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800ce08:	12db      	asrs	r3, r3, #11
 800ce0a:	b21b      	sxth	r3, r3
 800ce0c:	ee07 3a90 	vmov	s15, r3
 800ce10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce14:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	ee07 3a90 	vmov	s15, r3
}
 800ce1e:	eeb0 0a67 	vmov.f32	s0, s15
 800ce22:	370c      	adds	r7, #12
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd90      	pop	{r4, r7, pc}

0800ce28 <accel_read_y>:


float accel_read_y(void){
 800ce28:	b590      	push	{r4, r7, lr}
 800ce2a:	b083      	sub	sp, #12
 800ce2c:	af00      	add	r7, sp, #0
  int16_t accel_y;
  float accel;

  // H:8bit shift, Link h and l
  accel_y = (int16_t)((int16_t)(read_byte(ACCEL_YOUT_H) << 8) | read_byte(ACCEL_YOUT_L));
 800ce2e:	203d      	movs	r0, #61	; 0x3d
 800ce30:	f7ff ff7c 	bl	800cd2c <read_byte>
 800ce34:	4603      	mov	r3, r0
 800ce36:	021b      	lsls	r3, r3, #8
 800ce38:	b21c      	sxth	r4, r3
 800ce3a:	203e      	movs	r0, #62	; 0x3e
 800ce3c:	f7ff ff76 	bl	800cd2c <read_byte>
 800ce40:	4603      	mov	r3, r0
 800ce42:	b21b      	sxth	r3, r3
 800ce44:	4323      	orrs	r3, r4
 800ce46:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_y / ACCEL_FACTOR); // dps to accel
 800ce48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	da01      	bge.n	800ce54 <accel_read_y+0x2c>
 800ce50:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800ce54:	12db      	asrs	r3, r3, #11
 800ce56:	b21b      	sxth	r3, r3
 800ce58:	ee07 3a90 	vmov	s15, r3
 800ce5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce60:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	ee07 3a90 	vmov	s15, r3
}
 800ce6a:	eeb0 0a67 	vmov.f32	s0, s15
 800ce6e:	370c      	adds	r7, #12
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd90      	pop	{r4, r7, pc}

0800ce74 <accel_read_z>:


float accel_read_z(void){
 800ce74:	b590      	push	{r4, r7, lr}
 800ce76:	b083      	sub	sp, #12
 800ce78:	af00      	add	r7, sp, #0
  int16_t accel_z;
  float accel;

  // H:8bit shift, Link h and l
  accel_z = (int16_t)((int16_t)(read_byte(ACCEL_ZOUT_H) << 8) | read_byte(ACCEL_ZOUT_L));
 800ce7a:	203f      	movs	r0, #63	; 0x3f
 800ce7c:	f7ff ff56 	bl	800cd2c <read_byte>
 800ce80:	4603      	mov	r3, r0
 800ce82:	021b      	lsls	r3, r3, #8
 800ce84:	b21c      	sxth	r4, r3
 800ce86:	2040      	movs	r0, #64	; 0x40
 800ce88:	f7ff ff50 	bl	800cd2c <read_byte>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	b21b      	sxth	r3, r3
 800ce90:	4323      	orrs	r3, r4
 800ce92:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_z / ACCEL_FACTOR-7); // dps to accel
 800ce94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	da01      	bge.n	800cea0 <accel_read_z+0x2c>
 800ce9c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800cea0:	12db      	asrs	r3, r3, #11
 800cea2:	b21b      	sxth	r3, r3
 800cea4:	3b07      	subs	r3, #7
 800cea6:	ee07 3a90 	vmov	s15, r3
 800ceaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ceae:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	ee07 3a90 	vmov	s15, r3
}
 800ceb8:	eeb0 0a67 	vmov.f32	s0, s15
 800cebc:	370c      	adds	r7, #12
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd90      	pop	{r4, r7, pc}
 800cec2:	0000      	movs	r0, r0
 800cec4:	0000      	movs	r0, r0
	...

0800cec8 <gyro_read_x>:


float gyro_read_x(void){
 800cec8:	b590      	push	{r4, r7, lr}
 800ceca:	b083      	sub	sp, #12
 800cecc:	af00      	add	r7, sp, #0
  int16_t gyro_x;
  float omega;

  // H:8bit shift, Link h and l
  gyro_x = (int16_t)((int16_t)(read_byte(GYRO_XOUT_H) << 8) | read_byte(GYRO_XOUT_L));
 800cece:	2043      	movs	r0, #67	; 0x43
 800ced0:	f7ff ff2c 	bl	800cd2c <read_byte>
 800ced4:	4603      	mov	r3, r0
 800ced6:	021b      	lsls	r3, r3, #8
 800ced8:	b21c      	sxth	r4, r3
 800ceda:	2044      	movs	r0, #68	; 0x44
 800cedc:	f7ff ff26 	bl	800cd2c <read_byte>
 800cee0:	4603      	mov	r3, r0
 800cee2:	b21b      	sxth	r3, r3
 800cee4:	4323      	orrs	r3, r4
 800cee6:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_x / GYRO_FACTOR+1.4); // dps to deg/sec
 800cee8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ceec:	4618      	mov	r0, r3
 800ceee:	f7f3 fb11 	bl	8000514 <__aeabi_i2d>
 800cef2:	a30f      	add	r3, pc, #60	; (adr r3, 800cf30 <gyro_read_x+0x68>)
 800cef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef8:	f7f3 fca0 	bl	800083c <__aeabi_ddiv>
 800cefc:	4603      	mov	r3, r0
 800cefe:	460c      	mov	r4, r1
 800cf00:	4618      	mov	r0, r3
 800cf02:	4621      	mov	r1, r4
 800cf04:	a30c      	add	r3, pc, #48	; (adr r3, 800cf38 <gyro_read_x+0x70>)
 800cf06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf0a:	f7f3 f9b7 	bl	800027c <__adddf3>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	460c      	mov	r4, r1
 800cf12:	4618      	mov	r0, r3
 800cf14:	4621      	mov	r1, r4
 800cf16:	f7f3 fe3f 	bl	8000b98 <__aeabi_d2f>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	603b      	str	r3, [r7, #0]
  return omega;
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	ee07 3a90 	vmov	s15, r3
}
 800cf24:	eeb0 0a67 	vmov.f32	s0, s15
 800cf28:	370c      	adds	r7, #12
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd90      	pop	{r4, r7, pc}
 800cf2e:	bf00      	nop
 800cf30:	66666666 	.word	0x66666666
 800cf34:	40306666 	.word	0x40306666
 800cf38:	66666666 	.word	0x66666666
 800cf3c:	3ff66666 	.word	0x3ff66666

0800cf40 <gyro_read_y>:


float gyro_read_y(void){
 800cf40:	b590      	push	{r4, r7, lr}
 800cf42:	b083      	sub	sp, #12
 800cf44:	af00      	add	r7, sp, #0
  int16_t gyro_y;
  float omega;

  // H:8bit shift, Link h and l
  gyro_y = (int16_t)((int16_t)(read_byte(GYRO_YOUT_H) << 8) | read_byte(GYRO_YOUT_L));
 800cf46:	2045      	movs	r0, #69	; 0x45
 800cf48:	f7ff fef0 	bl	800cd2c <read_byte>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	021b      	lsls	r3, r3, #8
 800cf50:	b21c      	sxth	r4, r3
 800cf52:	2046      	movs	r0, #70	; 0x46
 800cf54:	f7ff feea 	bl	800cd2c <read_byte>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	b21b      	sxth	r3, r3
 800cf5c:	4323      	orrs	r3, r4
 800cf5e:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_y / GYRO_FACTOR-0.75); // dps to deg/sec
 800cf60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cf64:	4618      	mov	r0, r3
 800cf66:	f7f3 fad5 	bl	8000514 <__aeabi_i2d>
 800cf6a:	a310      	add	r3, pc, #64	; (adr r3, 800cfac <gyro_read_y+0x6c>)
 800cf6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf70:	f7f3 fc64 	bl	800083c <__aeabi_ddiv>
 800cf74:	4603      	mov	r3, r0
 800cf76:	460c      	mov	r4, r1
 800cf78:	4618      	mov	r0, r3
 800cf7a:	4621      	mov	r1, r4
 800cf7c:	f04f 0200 	mov.w	r2, #0
 800cf80:	4b09      	ldr	r3, [pc, #36]	; (800cfa8 <gyro_read_y+0x68>)
 800cf82:	f7f3 f979 	bl	8000278 <__aeabi_dsub>
 800cf86:	4603      	mov	r3, r0
 800cf88:	460c      	mov	r4, r1
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	4621      	mov	r1, r4
 800cf8e:	f7f3 fe03 	bl	8000b98 <__aeabi_d2f>
 800cf92:	4603      	mov	r3, r0
 800cf94:	603b      	str	r3, [r7, #0]
  return omega;
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	ee07 3a90 	vmov	s15, r3
}
 800cf9c:	eeb0 0a67 	vmov.f32	s0, s15
 800cfa0:	370c      	adds	r7, #12
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd90      	pop	{r4, r7, pc}
 800cfa6:	bf00      	nop
 800cfa8:	3fe80000 	.word	0x3fe80000
 800cfac:	66666666 	.word	0x66666666
 800cfb0:	40306666 	.word	0x40306666
 800cfb4:	00000000 	.word	0x00000000

0800cfb8 <gyro_read_z>:


float gyro_read_z(void){
 800cfb8:	b590      	push	{r4, r7, lr}
 800cfba:	b083      	sub	sp, #12
 800cfbc:	af00      	add	r7, sp, #0
  int16_t gyro_z;
  float omega;

  // H:8bit shift, Link h and l
  gyro_z = (int16_t)((int16_t)(read_byte(GYRO_ZOUT_H) << 8) | read_byte(GYRO_ZOUT_L));
 800cfbe:	2047      	movs	r0, #71	; 0x47
 800cfc0:	f7ff feb4 	bl	800cd2c <read_byte>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	021b      	lsls	r3, r3, #8
 800cfc8:	b21c      	sxth	r4, r3
 800cfca:	2048      	movs	r0, #72	; 0x48
 800cfcc:	f7ff feae 	bl	800cd2c <read_byte>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	b21b      	sxth	r3, r3
 800cfd4:	4323      	orrs	r3, r4
 800cfd6:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_z / GYRO_FACTOR-5.25); // dps to deg/sec
 800cfd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f7f3 fa99 	bl	8000514 <__aeabi_i2d>
 800cfe2:	a310      	add	r3, pc, #64	; (adr r3, 800d024 <gyro_read_z+0x6c>)
 800cfe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe8:	f7f3 fc28 	bl	800083c <__aeabi_ddiv>
 800cfec:	4603      	mov	r3, r0
 800cfee:	460c      	mov	r4, r1
 800cff0:	4618      	mov	r0, r3
 800cff2:	4621      	mov	r1, r4
 800cff4:	f04f 0200 	mov.w	r2, #0
 800cff8:	4b09      	ldr	r3, [pc, #36]	; (800d020 <gyro_read_z+0x68>)
 800cffa:	f7f3 f93d 	bl	8000278 <__aeabi_dsub>
 800cffe:	4603      	mov	r3, r0
 800d000:	460c      	mov	r4, r1
 800d002:	4618      	mov	r0, r3
 800d004:	4621      	mov	r1, r4
 800d006:	f7f3 fdc7 	bl	8000b98 <__aeabi_d2f>
 800d00a:	4603      	mov	r3, r0
 800d00c:	603b      	str	r3, [r7, #0]
//  omega = (float)(gyro_z / GYRO_FACTOR-gyro_drift_value); // dps to deg/sec
  return omega;
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	ee07 3a90 	vmov	s15, r3
}
 800d014:	eeb0 0a67 	vmov.f32	s0, s15
 800d018:	370c      	adds	r7, #12
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd90      	pop	{r4, r7, pc}
 800d01e:	bf00      	nop
 800d020:	40150000 	.word	0x40150000
 800d024:	66666666 	.word	0x66666666
 800d028:	40306666 	.word	0x40306666

0800d02c <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int c) {
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b084      	sub	sp, #16
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  if( c == '\n' ) {
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2b0a      	cmp	r3, #10
 800d038:	d108      	bne.n	800d04c <__io_putchar+0x20>
    int _c = '\r';
 800d03a:	230d      	movs	r3, #13
 800d03c:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, &_c, 1, 1);
 800d03e:	f107 010c 	add.w	r1, r7, #12
 800d042:	2301      	movs	r3, #1
 800d044:	2201      	movs	r2, #1
 800d046:	4807      	ldr	r0, [pc, #28]	; (800d064 <__io_putchar+0x38>)
 800d048:	f7f7 fb11 	bl	800466e <HAL_UART_Transmit>
  }
  HAL_UART_Transmit(&huart1, &c, 1, 1);
 800d04c:	1d39      	adds	r1, r7, #4
 800d04e:	2301      	movs	r3, #1
 800d050:	2201      	movs	r2, #1
 800d052:	4804      	ldr	r0, [pc, #16]	; (800d064 <__io_putchar+0x38>)
 800d054:	f7f7 fb0b 	bl	800466e <HAL_UART_Transmit>
  return 0;
 800d058:	2300      	movs	r3, #0
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3710      	adds	r7, #16
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
 800d062:	bf00      	nop
 800d064:	20000ba4 	.word	0x20000ba4

0800d068 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d068:	b5b0      	push	{r4, r5, r7, lr}
 800d06a:	ed2d 8b02 	vpush	{d8}
 800d06e:	b08c      	sub	sp, #48	; 0x30
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d074:	2360      	movs	r3, #96	; 0x60
 800d076:	60fb      	str	r3, [r7, #12]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d078:	2300      	movs	r3, #0
 800d07a:	617b      	str	r3, [r7, #20]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d07c:	2300      	movs	r3, #0
 800d07e:	61fb      	str	r3, [r7, #28]

	if(htim == &htim6){
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	4ab5      	ldr	r2, [pc, #724]	; (800d358 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800d084:	4293      	cmp	r3, r2
 800d086:	f041 827b 	bne.w	800e580 <HAL_TIM_PeriodElapsedCallback+0x1518>
		cnt_l = TIM5 -> CNT;
 800d08a:	4bb4      	ldr	r3, [pc, #720]	; (800d35c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800d08c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d08e:	ee07 3a90 	vmov	s15, r3
 800d092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d096:	4bb2      	ldr	r3, [pc, #712]	; (800d360 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800d098:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = TIM8 -> CNT;
 800d09c:	4bb1      	ldr	r3, [pc, #708]	; (800d364 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800d09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0a0:	ee07 3a90 	vmov	s15, r3
 800d0a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0a8:	4baf      	ldr	r3, [pc, #700]	; (800d368 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800d0aa:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_l > 40000) cnt_l = cnt_l - 65535;		//0=>65505の値飛び検出用
 800d0ae:	4bac      	ldr	r3, [pc, #688]	; (800d360 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800d0b0:	edd3 7a00 	vldr	s15, [r3]
 800d0b4:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800d36c <HAL_TIM_PeriodElapsedCallback+0x304>
 800d0b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d0bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0c0:	dd09      	ble.n	800d0d6 <HAL_TIM_PeriodElapsedCallback+0x6e>
 800d0c2:	4ba7      	ldr	r3, [pc, #668]	; (800d360 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800d0c4:	edd3 7a00 	vldr	s15, [r3]
 800d0c8:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 800d370 <HAL_TIM_PeriodElapsedCallback+0x308>
 800d0cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d0d0:	4ba3      	ldr	r3, [pc, #652]	; (800d360 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800d0d2:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_r > 40000) cnt_r = cnt_r - 65535;		//0=>65505の値飛び検出用
 800d0d6:	4ba4      	ldr	r3, [pc, #656]	; (800d368 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800d0d8:	edd3 7a00 	vldr	s15, [r3]
 800d0dc:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 800d36c <HAL_TIM_PeriodElapsedCallback+0x304>
 800d0e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d0e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0e8:	dd09      	ble.n	800d0fe <HAL_TIM_PeriodElapsedCallback+0x96>
 800d0ea:	4b9f      	ldr	r3, [pc, #636]	; (800d368 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800d0ec:	edd3 7a00 	vldr	s15, [r3]
 800d0f0:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 800d370 <HAL_TIM_PeriodElapsedCallback+0x308>
 800d0f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d0f8:	4b9b      	ldr	r3, [pc, #620]	; (800d368 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800d0fa:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = cnt_r * -1;								//a回転方向合わせ
 800d0fe:	4b9a      	ldr	r3, [pc, #616]	; (800d368 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800d100:	edd3 7a00 	vldr	s15, [r3]
 800d104:	eef1 7a67 	vneg.f32	s15, s15
 800d108:	4b97      	ldr	r3, [pc, #604]	; (800d368 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800d10a:	edc3 7a00 	vstr	s15, [r3]

		dist_l = dist_l + cnt_l * (DIAMETER * M_PI * 11 / 42 / 4096 / 4);
 800d10e:	4b99      	ldr	r3, [pc, #612]	; (800d374 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	4618      	mov	r0, r3
 800d114:	f7f3 fa10 	bl	8000538 <__aeabi_f2d>
 800d118:	4604      	mov	r4, r0
 800d11a:	460d      	mov	r5, r1
 800d11c:	4b90      	ldr	r3, [pc, #576]	; (800d360 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	4618      	mov	r0, r3
 800d122:	f7f3 fa09 	bl	8000538 <__aeabi_f2d>
 800d126:	a388      	add	r3, pc, #544	; (adr r3, 800d348 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800d128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d12c:	f7f3 fa5c 	bl	80005e8 <__aeabi_dmul>
 800d130:	4602      	mov	r2, r0
 800d132:	460b      	mov	r3, r1
 800d134:	4620      	mov	r0, r4
 800d136:	4629      	mov	r1, r5
 800d138:	f7f3 f8a0 	bl	800027c <__adddf3>
 800d13c:	4603      	mov	r3, r0
 800d13e:	460c      	mov	r4, r1
 800d140:	4618      	mov	r0, r3
 800d142:	4621      	mov	r1, r4
 800d144:	f7f3 fd28 	bl	8000b98 <__aeabi_d2f>
 800d148:	4602      	mov	r2, r0
 800d14a:	4b8a      	ldr	r3, [pc, #552]	; (800d374 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800d14c:	601a      	str	r2, [r3, #0]
		dist_r = dist_r + cnt_r * (DIAMETER * M_PI * 11 / 42 / 4096 / 4);
 800d14e:	4b8a      	ldr	r3, [pc, #552]	; (800d378 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	4618      	mov	r0, r3
 800d154:	f7f3 f9f0 	bl	8000538 <__aeabi_f2d>
 800d158:	4604      	mov	r4, r0
 800d15a:	460d      	mov	r5, r1
 800d15c:	4b82      	ldr	r3, [pc, #520]	; (800d368 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	4618      	mov	r0, r3
 800d162:	f7f3 f9e9 	bl	8000538 <__aeabi_f2d>
 800d166:	a378      	add	r3, pc, #480	; (adr r3, 800d348 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800d168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d16c:	f7f3 fa3c 	bl	80005e8 <__aeabi_dmul>
 800d170:	4602      	mov	r2, r0
 800d172:	460b      	mov	r3, r1
 800d174:	4620      	mov	r0, r4
 800d176:	4629      	mov	r1, r5
 800d178:	f7f3 f880 	bl	800027c <__adddf3>
 800d17c:	4603      	mov	r3, r0
 800d17e:	460c      	mov	r4, r1
 800d180:	4618      	mov	r0, r3
 800d182:	4621      	mov	r1, r4
 800d184:	f7f3 fd08 	bl	8000b98 <__aeabi_d2f>
 800d188:	4602      	mov	r2, r0
 800d18a:	4b7b      	ldr	r3, [pc, #492]	; (800d378 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800d18c:	601a      	str	r2, [r3, #0]

		speed_l = cnt_l * (DIAMETER * M_PI * 11 / 42 / 4096 / 4) / 0.001;
 800d18e:	4b74      	ldr	r3, [pc, #464]	; (800d360 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	4618      	mov	r0, r3
 800d194:	f7f3 f9d0 	bl	8000538 <__aeabi_f2d>
 800d198:	a36b      	add	r3, pc, #428	; (adr r3, 800d348 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800d19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d19e:	f7f3 fa23 	bl	80005e8 <__aeabi_dmul>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	460c      	mov	r4, r1
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	4621      	mov	r1, r4
 800d1aa:	a369      	add	r3, pc, #420	; (adr r3, 800d350 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800d1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b0:	f7f3 fb44 	bl	800083c <__aeabi_ddiv>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	460c      	mov	r4, r1
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	4621      	mov	r1, r4
 800d1bc:	f7f3 fcec 	bl	8000b98 <__aeabi_d2f>
 800d1c0:	4602      	mov	r2, r0
 800d1c2:	4b6e      	ldr	r3, [pc, #440]	; (800d37c <HAL_TIM_PeriodElapsedCallback+0x314>)
 800d1c4:	601a      	str	r2, [r3, #0]
		speed_r = cnt_r * (DIAMETER * M_PI * 11 / 42 / 4096 / 4) / 0.001;
 800d1c6:	4b68      	ldr	r3, [pc, #416]	; (800d368 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7f3 f9b4 	bl	8000538 <__aeabi_f2d>
 800d1d0:	a35d      	add	r3, pc, #372	; (adr r3, 800d348 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800d1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d6:	f7f3 fa07 	bl	80005e8 <__aeabi_dmul>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	460c      	mov	r4, r1
 800d1de:	4618      	mov	r0, r3
 800d1e0:	4621      	mov	r1, r4
 800d1e2:	a35b      	add	r3, pc, #364	; (adr r3, 800d350 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800d1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e8:	f7f3 fb28 	bl	800083c <__aeabi_ddiv>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	460c      	mov	r4, r1
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	4621      	mov	r1, r4
 800d1f4:	f7f3 fcd0 	bl	8000b98 <__aeabi_d2f>
 800d1f8:	4602      	mov	r2, r0
 800d1fa:	4b61      	ldr	r3, [pc, #388]	; (800d380 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800d1fc:	601a      	str	r2, [r3, #0]

		TIM5 -> CNT = 0;
 800d1fe:	4b57      	ldr	r3, [pc, #348]	; (800d35c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800d200:	2200      	movs	r2, #0
 800d202:	625a      	str	r2, [r3, #36]	; 0x24
		TIM8 -> CNT = 0;
 800d204:	4b57      	ldr	r3, [pc, #348]	; (800d364 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800d206:	2200      	movs	r2, #0
 800d208:	625a      	str	r2, [r3, #36]	; 0x24

		if(MF.FLAG.SPD){
 800d20a:	4b5e      	ldr	r3, [pc, #376]	; (800d384 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800d20c:	881b      	ldrh	r3, [r3, #0]
 800d20e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800d212:	b2db      	uxtb	r3, r3
 800d214:	2b00      	cmp	r3, #0
 800d216:	f000 80fc 	beq.w	800d412 <HAL_TIM_PeriodElapsedCallback+0x3aa>
			target_speed_l += accel_l * 0.001;
 800d21a:	4b5b      	ldr	r3, [pc, #364]	; (800d388 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	4618      	mov	r0, r3
 800d220:	f7f3 f98a 	bl	8000538 <__aeabi_f2d>
 800d224:	a34a      	add	r3, pc, #296	; (adr r3, 800d350 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800d226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d22a:	f7f3 f9dd 	bl	80005e8 <__aeabi_dmul>
 800d22e:	4603      	mov	r3, r0
 800d230:	460c      	mov	r4, r1
 800d232:	4625      	mov	r5, r4
 800d234:	461c      	mov	r4, r3
 800d236:	4b55      	ldr	r3, [pc, #340]	; (800d38c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	4618      	mov	r0, r3
 800d23c:	f7f3 f97c 	bl	8000538 <__aeabi_f2d>
 800d240:	4602      	mov	r2, r0
 800d242:	460b      	mov	r3, r1
 800d244:	4620      	mov	r0, r4
 800d246:	4629      	mov	r1, r5
 800d248:	f7f3 f818 	bl	800027c <__adddf3>
 800d24c:	4603      	mov	r3, r0
 800d24e:	460c      	mov	r4, r1
 800d250:	4618      	mov	r0, r3
 800d252:	4621      	mov	r1, r4
 800d254:	f7f3 fca0 	bl	8000b98 <__aeabi_d2f>
 800d258:	4602      	mov	r2, r0
 800d25a:	4b4c      	ldr	r3, [pc, #304]	; (800d38c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800d25c:	601a      	str	r2, [r3, #0]
			target_speed_l = max(min(target_speed_l, speed_max_l), speed_min_l);
 800d25e:	4b4b      	ldr	r3, [pc, #300]	; (800d38c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800d260:	ed93 7a00 	vldr	s14, [r3]
 800d264:	4b4a      	ldr	r3, [pc, #296]	; (800d390 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800d266:	edd3 7a00 	vldr	s15, [r3]
 800d26a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d26e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d272:	dd03      	ble.n	800d27c <HAL_TIM_PeriodElapsedCallback+0x214>
 800d274:	4b46      	ldr	r3, [pc, #280]	; (800d390 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800d276:	edd3 7a00 	vldr	s15, [r3]
 800d27a:	e002      	b.n	800d282 <HAL_TIM_PeriodElapsedCallback+0x21a>
 800d27c:	4b43      	ldr	r3, [pc, #268]	; (800d38c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800d27e:	edd3 7a00 	vldr	s15, [r3]
 800d282:	4b44      	ldr	r3, [pc, #272]	; (800d394 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800d284:	ed93 7a00 	vldr	s14, [r3]
 800d288:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d28c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d290:	dd10      	ble.n	800d2b4 <HAL_TIM_PeriodElapsedCallback+0x24c>
 800d292:	4b3e      	ldr	r3, [pc, #248]	; (800d38c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800d294:	ed93 7a00 	vldr	s14, [r3]
 800d298:	4b3d      	ldr	r3, [pc, #244]	; (800d390 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800d29a:	edd3 7a00 	vldr	s15, [r3]
 800d29e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d2a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2a6:	dd02      	ble.n	800d2ae <HAL_TIM_PeriodElapsedCallback+0x246>
 800d2a8:	4b39      	ldr	r3, [pc, #228]	; (800d390 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	e004      	b.n	800d2b8 <HAL_TIM_PeriodElapsedCallback+0x250>
 800d2ae:	4b37      	ldr	r3, [pc, #220]	; (800d38c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	e001      	b.n	800d2b8 <HAL_TIM_PeriodElapsedCallback+0x250>
 800d2b4:	4b37      	ldr	r3, [pc, #220]	; (800d394 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	4a34      	ldr	r2, [pc, #208]	; (800d38c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800d2ba:	6013      	str	r3, [r2, #0]
			epsilon_l = target_speed_l - speed_l;
 800d2bc:	4b33      	ldr	r3, [pc, #204]	; (800d38c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800d2be:	ed93 7a00 	vldr	s14, [r3]
 800d2c2:	4b2e      	ldr	r3, [pc, #184]	; (800d37c <HAL_TIM_PeriodElapsedCallback+0x314>)
 800d2c4:	edd3 7a00 	vldr	s15, [r3]
 800d2c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2cc:	4b32      	ldr	r3, [pc, #200]	; (800d398 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800d2ce:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kpl * epsilon_l;
 800d2d2:	4b31      	ldr	r3, [pc, #196]	; (800d398 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800d2d4:	edd3 7a00 	vldr	s15, [r3]
 800d2d8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800d2dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d2e0:	4b2e      	ldr	r3, [pc, #184]	; (800d39c <HAL_TIM_PeriodElapsedCallback+0x334>)
 800d2e2:	edc3 7a00 	vstr	s15, [r3]

			target_speed_r += accel_r * 0.001;
 800d2e6:	4b2e      	ldr	r3, [pc, #184]	; (800d3a0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f7f3 f924 	bl	8000538 <__aeabi_f2d>
 800d2f0:	a317      	add	r3, pc, #92	; (adr r3, 800d350 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800d2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2f6:	f7f3 f977 	bl	80005e8 <__aeabi_dmul>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	460c      	mov	r4, r1
 800d2fe:	4625      	mov	r5, r4
 800d300:	461c      	mov	r4, r3
 800d302:	4b28      	ldr	r3, [pc, #160]	; (800d3a4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	4618      	mov	r0, r3
 800d308:	f7f3 f916 	bl	8000538 <__aeabi_f2d>
 800d30c:	4602      	mov	r2, r0
 800d30e:	460b      	mov	r3, r1
 800d310:	4620      	mov	r0, r4
 800d312:	4629      	mov	r1, r5
 800d314:	f7f2 ffb2 	bl	800027c <__adddf3>
 800d318:	4603      	mov	r3, r0
 800d31a:	460c      	mov	r4, r1
 800d31c:	4618      	mov	r0, r3
 800d31e:	4621      	mov	r1, r4
 800d320:	f7f3 fc3a 	bl	8000b98 <__aeabi_d2f>
 800d324:	4602      	mov	r2, r0
 800d326:	4b1f      	ldr	r3, [pc, #124]	; (800d3a4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800d328:	601a      	str	r2, [r3, #0]
			target_speed_r = max(min(target_speed_r, speed_max_r), speed_min_r);
 800d32a:	4b1e      	ldr	r3, [pc, #120]	; (800d3a4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800d32c:	ed93 7a00 	vldr	s14, [r3]
 800d330:	4b1d      	ldr	r3, [pc, #116]	; (800d3a8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800d332:	edd3 7a00 	vldr	s15, [r3]
 800d336:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d33a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d33e:	dd35      	ble.n	800d3ac <HAL_TIM_PeriodElapsedCallback+0x344>
 800d340:	4b19      	ldr	r3, [pc, #100]	; (800d3a8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800d342:	edd3 7a00 	vldr	s15, [r3]
 800d346:	e034      	b.n	800d3b2 <HAL_TIM_PeriodElapsedCallback+0x34a>
 800d348:	7fcc286d 	.word	0x7fcc286d
 800d34c:	3f5452b7 	.word	0x3f5452b7
 800d350:	d2f1a9fc 	.word	0xd2f1a9fc
 800d354:	3f50624d 	.word	0x3f50624d
 800d358:	20000c34 	.word	0x20000c34
 800d35c:	40000c00 	.word	0x40000c00
 800d360:	200002ac 	.word	0x200002ac
 800d364:	40010400 	.word	0x40010400
 800d368:	20000c2c 	.word	0x20000c2c
 800d36c:	471c4000 	.word	0x471c4000
 800d370:	477fff00 	.word	0x477fff00
 800d374:	20001644 	.word	0x20001644
 800d378:	20000b2c 	.word	0x20000b2c
 800d37c:	20000b30 	.word	0x20000b30
 800d380:	200002bc 	.word	0x200002bc
 800d384:	20000fa8 	.word	0x20000fa8
 800d388:	20000d98 	.word	0x20000d98
 800d38c:	20000c7c 	.word	0x20000c7c
 800d390:	2000077c 	.word	0x2000077c
 800d394:	20000b94 	.word	0x20000b94
 800d398:	20000ba0 	.word	0x20000ba0
 800d39c:	20000c28 	.word	0x20000c28
 800d3a0:	20000b24 	.word	0x20000b24
 800d3a4:	200001a0 	.word	0x200001a0
 800d3a8:	200001a4 	.word	0x200001a4
 800d3ac:	4ba2      	ldr	r3, [pc, #648]	; (800d638 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800d3ae:	edd3 7a00 	vldr	s15, [r3]
 800d3b2:	4ba2      	ldr	r3, [pc, #648]	; (800d63c <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 800d3b4:	ed93 7a00 	vldr	s14, [r3]
 800d3b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d3bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3c0:	dd10      	ble.n	800d3e4 <HAL_TIM_PeriodElapsedCallback+0x37c>
 800d3c2:	4b9d      	ldr	r3, [pc, #628]	; (800d638 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800d3c4:	ed93 7a00 	vldr	s14, [r3]
 800d3c8:	4b9d      	ldr	r3, [pc, #628]	; (800d640 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800d3ca:	edd3 7a00 	vldr	s15, [r3]
 800d3ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d3d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3d6:	dd02      	ble.n	800d3de <HAL_TIM_PeriodElapsedCallback+0x376>
 800d3d8:	4b99      	ldr	r3, [pc, #612]	; (800d640 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	e004      	b.n	800d3e8 <HAL_TIM_PeriodElapsedCallback+0x380>
 800d3de:	4b96      	ldr	r3, [pc, #600]	; (800d638 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	e001      	b.n	800d3e8 <HAL_TIM_PeriodElapsedCallback+0x380>
 800d3e4:	4b95      	ldr	r3, [pc, #596]	; (800d63c <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	4a93      	ldr	r2, [pc, #588]	; (800d638 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800d3ea:	6013      	str	r3, [r2, #0]
			epsilon_r = target_speed_r - speed_r;
 800d3ec:	4b92      	ldr	r3, [pc, #584]	; (800d638 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800d3ee:	ed93 7a00 	vldr	s14, [r3]
 800d3f2:	4b94      	ldr	r3, [pc, #592]	; (800d644 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800d3f4:	edd3 7a00 	vldr	s15, [r3]
 800d3f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d3fc:	4b92      	ldr	r3, [pc, #584]	; (800d648 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800d3fe:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kpr * epsilon_r;
 800d402:	4b91      	ldr	r3, [pc, #580]	; (800d648 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800d404:	edd3 7a00 	vldr	s15, [r3]
 800d408:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d40c:	4b8f      	ldr	r3, [pc, #572]	; (800d64c <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 800d40e:	edc3 7a00 	vstr	s15, [r3]
		}

		log_cnt ++;
 800d412:	4b8f      	ldr	r3, [pc, #572]	; (800d650 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	3301      	adds	r3, #1
 800d418:	4a8d      	ldr	r2, [pc, #564]	; (800d650 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800d41a:	6013      	str	r3, [r2, #0]

		if(log_cnt >= 5 && MF2.FLAG.LOG){
 800d41c:	4b8c      	ldr	r3, [pc, #560]	; (800d650 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	2b04      	cmp	r3, #4
 800d422:	dd37      	ble.n	800d494 <HAL_TIM_PeriodElapsedCallback+0x42c>
 800d424:	4b8b      	ldr	r3, [pc, #556]	; (800d654 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 800d426:	881b      	ldrh	r3, [r3, #0]
 800d428:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800d42c:	b2db      	uxtb	r3, r3
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d030      	beq.n	800d494 <HAL_TIM_PeriodElapsedCallback+0x42c>
			log_cnt = 0;
 800d432:	4b87      	ldr	r3, [pc, #540]	; (800d650 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800d434:	2200      	movs	r2, #0
 800d436:	601a      	str	r2, [r3, #0]
			if(get_cnt < log_allay){
 800d438:	4b87      	ldr	r3, [pc, #540]	; (800d658 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	2bc7      	cmp	r3, #199	; 0xc7
 800d43e:	dc29      	bgt.n	800d494 <HAL_TIM_PeriodElapsedCallback+0x42c>
				get_speed_l[get_cnt] = speed_l;
 800d440:	4b86      	ldr	r3, [pc, #536]	; (800d65c <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800d442:	edd3 7a00 	vldr	s15, [r3]
 800d446:	4b84      	ldr	r3, [pc, #528]	; (800d658 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d44e:	ee17 1a90 	vmov	r1, s15
 800d452:	4a83      	ldr	r2, [pc, #524]	; (800d660 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800d454:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_speed_r[get_cnt] = speed_r;
 800d458:	4b7a      	ldr	r3, [pc, #488]	; (800d644 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800d45a:	edd3 7a00 	vldr	s15, [r3]
 800d45e:	4b7e      	ldr	r3, [pc, #504]	; (800d658 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d466:	ee17 1a90 	vmov	r1, s15
 800d46a:	4a7e      	ldr	r2, [pc, #504]	; (800d664 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800d46c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_omega[get_cnt] = gyro_read_z();
 800d470:	f7ff fda2 	bl	800cfb8 <gyro_read_z>
 800d474:	eef0 7a40 	vmov.f32	s15, s0
 800d478:	4b77      	ldr	r3, [pc, #476]	; (800d658 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d480:	ee17 1a90 	vmov	r1, s15
 800d484:	4a78      	ldr	r2, [pc, #480]	; (800d668 <HAL_TIM_PeriodElapsedCallback+0x600>)
 800d486:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_cnt++;
 800d48a:	4b73      	ldr	r3, [pc, #460]	; (800d658 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	3301      	adds	r3, #1
 800d490:	4a71      	ldr	r2, [pc, #452]	; (800d658 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800d492:	6013      	str	r3, [r2, #0]
//		degree_x += accel_read_x() * 0.001;
//		degree_y += accel_read_y() * 0.001;
//		degree_z += accel_read_z() * 0.001;
//		degree_x += gyro_read_x() * 0.001;
//		degree_y += gyro_read_y() * 0.001;
		degree_z += gyro_read_z() * 0.001;
 800d494:	f7ff fd90 	bl	800cfb8 <gyro_read_z>
 800d498:	ee10 3a10 	vmov	r3, s0
 800d49c:	4618      	mov	r0, r3
 800d49e:	f7f3 f84b 	bl	8000538 <__aeabi_f2d>
 800d4a2:	a361      	add	r3, pc, #388	; (adr r3, 800d628 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 800d4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a8:	f7f3 f89e 	bl	80005e8 <__aeabi_dmul>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	460c      	mov	r4, r1
 800d4b0:	4625      	mov	r5, r4
 800d4b2:	461c      	mov	r4, r3
 800d4b4:	4b6d      	ldr	r3, [pc, #436]	; (800d66c <HAL_TIM_PeriodElapsedCallback+0x604>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f7f3 f83d 	bl	8000538 <__aeabi_f2d>
 800d4be:	4602      	mov	r2, r0
 800d4c0:	460b      	mov	r3, r1
 800d4c2:	4620      	mov	r0, r4
 800d4c4:	4629      	mov	r1, r5
 800d4c6:	f7f2 fed9 	bl	800027c <__adddf3>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	460c      	mov	r4, r1
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	4621      	mov	r1, r4
 800d4d2:	f7f3 fb61 	bl	8000b98 <__aeabi_d2f>
 800d4d6:	4602      	mov	r2, r0
 800d4d8:	4b64      	ldr	r3, [pc, #400]	; (800d66c <HAL_TIM_PeriodElapsedCallback+0x604>)
 800d4da:	601a      	str	r2, [r3, #0]

		//gyro ドリフト量計算
		if(MF2.FLAG.GDRIFT){
 800d4dc:	4b5d      	ldr	r3, [pc, #372]	; (800d654 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 800d4de:	881b      	ldrh	r3, [r3, #0]
 800d4e0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800d4e4:	b2db      	uxtb	r3, r3
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d04d      	beq.n	800d586 <HAL_TIM_PeriodElapsedCallback+0x51e>
			gyro_cnt ++;
 800d4ea:	4b61      	ldr	r3, [pc, #388]	; (800d670 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	3301      	adds	r3, #1
 800d4f0:	4a5f      	ldr	r2, [pc, #380]	; (800d670 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800d4f2:	6013      	str	r3, [r2, #0]
			if(gyro_cnt >= 2)dif_omega_z += old_omega_z - gyro_read_z();
 800d4f4:	4b5e      	ldr	r3, [pc, #376]	; (800d670 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	2b01      	cmp	r3, #1
 800d4fa:	dd10      	ble.n	800d51e <HAL_TIM_PeriodElapsedCallback+0x4b6>
 800d4fc:	4b5d      	ldr	r3, [pc, #372]	; (800d674 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800d4fe:	ed93 8a00 	vldr	s16, [r3]
 800d502:	f7ff fd59 	bl	800cfb8 <gyro_read_z>
 800d506:	eef0 7a40 	vmov.f32	s15, s0
 800d50a:	ee38 7a67 	vsub.f32	s14, s16, s15
 800d50e:	4b5a      	ldr	r3, [pc, #360]	; (800d678 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800d510:	edd3 7a00 	vldr	s15, [r3]
 800d514:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d518:	4b57      	ldr	r3, [pc, #348]	; (800d678 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800d51a:	edc3 7a00 	vstr	s15, [r3]
			old_omega_z = gyro_read_z();
 800d51e:	f7ff fd4b 	bl	800cfb8 <gyro_read_z>
 800d522:	eef0 7a40 	vmov.f32	s15, s0
 800d526:	4b53      	ldr	r3, [pc, #332]	; (800d674 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800d528:	edc3 7a00 	vstr	s15, [r3]
			full_led_write1(YELLOW);
 800d52c:	2006      	movs	r0, #6
 800d52e:	f004 fec3 	bl	80122b8 <full_led_write1>
			if(gyro_cnt >= 1001) {
 800d532:	4b4f      	ldr	r3, [pc, #316]	; (800d670 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d53a:	dd1c      	ble.n	800d576 <HAL_TIM_PeriodElapsedCallback+0x50e>
				MF2.FLAG.GDRIFT = 0;
 800d53c:	4a45      	ldr	r2, [pc, #276]	; (800d654 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 800d53e:	8813      	ldrh	r3, [r2, #0]
 800d540:	f36f 13c7 	bfc	r3, #7, #1
 800d544:	8013      	strh	r3, [r2, #0]
				gyro_drift_value = dif_omega_z / gyro_cnt-1;
 800d546:	4b4c      	ldr	r3, [pc, #304]	; (800d678 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800d548:	edd3 6a00 	vldr	s13, [r3]
 800d54c:	4b48      	ldr	r3, [pc, #288]	; (800d670 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	ee07 3a90 	vmov	s15, r3
 800d554:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d558:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d55c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d560:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d564:	4b45      	ldr	r3, [pc, #276]	; (800d67c <HAL_TIM_PeriodElapsedCallback+0x614>)
 800d566:	edc3 7a00 	vstr	s15, [r3]
				gyro_cnt = 0;
 800d56a:	4b41      	ldr	r3, [pc, #260]	; (800d670 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800d56c:	2200      	movs	r2, #0
 800d56e:	601a      	str	r2, [r3, #0]
				full_led_write1(BLUEGREEN);
 800d570:	2004      	movs	r0, #4
 800d572:	f004 fea1 	bl	80122b8 <full_led_write1>
			}
			degree_z = 0;
 800d576:	4b3d      	ldr	r3, [pc, #244]	; (800d66c <HAL_TIM_PeriodElapsedCallback+0x604>)
 800d578:	f04f 0200 	mov.w	r2, #0
 800d57c:	601a      	str	r2, [r3, #0]
			target_degree_z = 0;
 800d57e:	4b40      	ldr	r3, [pc, #256]	; (800d680 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800d580:	f04f 0200 	mov.w	r2, #0
 800d584:	601a      	str	r2, [r3, #0]
		}


		if(MF2.FLAG.ENKAI){
 800d586:	4b33      	ldr	r3, [pc, #204]	; (800d654 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 800d588:	881b      	ldrh	r3, [r3, #0]
 800d58a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d58e:	b2db      	uxtb	r3, r3
 800d590:	2b00      	cmp	r3, #0
 800d592:	f000 80d2 	beq.w	800d73a <HAL_TIM_PeriodElapsedCallback+0x6d2>
			target_dist = TREAD*M_PI/360*(degree_z-target_degree_z);
 800d596:	4b35      	ldr	r3, [pc, #212]	; (800d66c <HAL_TIM_PeriodElapsedCallback+0x604>)
 800d598:	ed93 7a00 	vldr	s14, [r3]
 800d59c:	4b38      	ldr	r3, [pc, #224]	; (800d680 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800d59e:	edd3 7a00 	vldr	s15, [r3]
 800d5a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d5a6:	ee17 0a90 	vmov	r0, s15
 800d5aa:	f7f2 ffc5 	bl	8000538 <__aeabi_f2d>
 800d5ae:	a320      	add	r3, pc, #128	; (adr r3, 800d630 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800d5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b4:	f7f3 f818 	bl	80005e8 <__aeabi_dmul>
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	460c      	mov	r4, r1
 800d5bc:	4618      	mov	r0, r3
 800d5be:	4621      	mov	r1, r4
 800d5c0:	f7f3 faea 	bl	8000b98 <__aeabi_d2f>
 800d5c4:	4602      	mov	r2, r0
 800d5c6:	4b2f      	ldr	r3, [pc, #188]	; (800d684 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800d5c8:	601a      	str	r2, [r3, #0]
			if(target_dist > 0){
 800d5ca:	4b2e      	ldr	r3, [pc, #184]	; (800d684 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800d5cc:	edd3 7a00 	vldr	s15, [r3]
 800d5d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d5d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5d8:	dd5a      	ble.n	800d690 <HAL_TIM_PeriodElapsedCallback+0x628>
				target_speed_l = sqrt(2*accel_l*target_dist);
 800d5da:	4b2b      	ldr	r3, [pc, #172]	; (800d688 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800d5dc:	edd3 7a00 	vldr	s15, [r3]
 800d5e0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d5e4:	4b27      	ldr	r3, [pc, #156]	; (800d684 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800d5e6:	edd3 7a00 	vldr	s15, [r3]
 800d5ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5ee:	ee17 0a90 	vmov	r0, s15
 800d5f2:	f7f2 ffa1 	bl	8000538 <__aeabi_f2d>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	460c      	mov	r4, r1
 800d5fa:	ec44 3b10 	vmov	d0, r3, r4
 800d5fe:	f006 fc45 	bl	8013e8c <sqrt>
 800d602:	ec54 3b10 	vmov	r3, r4, d0
 800d606:	4618      	mov	r0, r3
 800d608:	4621      	mov	r1, r4
 800d60a:	f7f3 fac5 	bl	8000b98 <__aeabi_d2f>
 800d60e:	4602      	mov	r2, r0
 800d610:	4b1e      	ldr	r3, [pc, #120]	; (800d68c <HAL_TIM_PeriodElapsedCallback+0x624>)
 800d612:	601a      	str	r2, [r3, #0]
				target_speed_r = -1 * target_speed_l;
 800d614:	4b1d      	ldr	r3, [pc, #116]	; (800d68c <HAL_TIM_PeriodElapsedCallback+0x624>)
 800d616:	edd3 7a00 	vldr	s15, [r3]
 800d61a:	eef1 7a67 	vneg.f32	s15, s15
 800d61e:	4b06      	ldr	r3, [pc, #24]	; (800d638 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800d620:	edc3 7a00 	vstr	s15, [r3]
 800d624:	e061      	b.n	800d6ea <HAL_TIM_PeriodElapsedCallback+0x682>
 800d626:	bf00      	nop
 800d628:	d2f1a9fc 	.word	0xd2f1a9fc
 800d62c:	3f50624d 	.word	0x3f50624d
 800d630:	d7653223 	.word	0xd7653223
 800d634:	3fe26e40 	.word	0x3fe26e40
 800d638:	200001a0 	.word	0x200001a0
 800d63c:	20000fec 	.word	0x20000fec
 800d640:	200001a4 	.word	0x200001a4
 800d644:	200002bc 	.word	0x200002bc
 800d648:	20000c88 	.word	0x20000c88
 800d64c:	20000780 	.word	0x20000780
 800d650:	20000108 	.word	0x20000108
 800d654:	20000fa4 	.word	0x20000fa4
 800d658:	20000110 	.word	0x20000110
 800d65c:	20000b30 	.word	0x20000b30
 800d660:	200007c4 	.word	0x200007c4
 800d664:	2000045c 	.word	0x2000045c
 800d668:	20001324 	.word	0x20001324
 800d66c:	20000b9c 	.word	0x20000b9c
 800d670:	2000010c 	.word	0x2000010c
 800d674:	2000164c 	.word	0x2000164c
 800d678:	20000be4 	.word	0x20000be4
 800d67c:	20000c74 	.word	0x20000c74
 800d680:	20000c78 	.word	0x20000c78
 800d684:	20000ff8 	.word	0x20000ff8
 800d688:	20000d98 	.word	0x20000d98
 800d68c:	20000c7c 	.word	0x20000c7c
			}else{
				target_speed_l = sqrt(2*accel_l*target_dist*-1)*-1;
 800d690:	4baa      	ldr	r3, [pc, #680]	; (800d93c <HAL_TIM_PeriodElapsedCallback+0x8d4>)
 800d692:	edd3 7a00 	vldr	s15, [r3]
 800d696:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d69a:	4ba9      	ldr	r3, [pc, #676]	; (800d940 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 800d69c:	edd3 7a00 	vldr	s15, [r3]
 800d6a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6a4:	eef1 7a67 	vneg.f32	s15, s15
 800d6a8:	ee17 3a90 	vmov	r3, s15
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f7f2 ff43 	bl	8000538 <__aeabi_f2d>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	460c      	mov	r4, r1
 800d6b6:	ec44 3b10 	vmov	d0, r3, r4
 800d6ba:	f006 fbe7 	bl	8013e8c <sqrt>
 800d6be:	ec54 3b10 	vmov	r3, r4, d0
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	4621      	mov	r1, r4
 800d6c6:	f7f3 fa67 	bl	8000b98 <__aeabi_d2f>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	ee07 3a90 	vmov	s15, r3
 800d6d0:	eef1 7a67 	vneg.f32	s15, s15
 800d6d4:	4b9b      	ldr	r3, [pc, #620]	; (800d944 <HAL_TIM_PeriodElapsedCallback+0x8dc>)
 800d6d6:	edc3 7a00 	vstr	s15, [r3]
				target_speed_r = -1 * target_speed_l;
 800d6da:	4b9a      	ldr	r3, [pc, #616]	; (800d944 <HAL_TIM_PeriodElapsedCallback+0x8dc>)
 800d6dc:	edd3 7a00 	vldr	s15, [r3]
 800d6e0:	eef1 7a67 	vneg.f32	s15, s15
 800d6e4:	4b98      	ldr	r3, [pc, #608]	; (800d948 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 800d6e6:	edc3 7a00 	vstr	s15, [r3]
			}

			epsilon_l = target_speed_l - speed_l;
 800d6ea:	4b96      	ldr	r3, [pc, #600]	; (800d944 <HAL_TIM_PeriodElapsedCallback+0x8dc>)
 800d6ec:	ed93 7a00 	vldr	s14, [r3]
 800d6f0:	4b96      	ldr	r3, [pc, #600]	; (800d94c <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 800d6f2:	edd3 7a00 	vldr	s15, [r3]
 800d6f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d6fa:	4b95      	ldr	r3, [pc, #596]	; (800d950 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 800d6fc:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kpl * epsilon_l;
 800d700:	4b93      	ldr	r3, [pc, #588]	; (800d950 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 800d702:	edd3 7a00 	vldr	s15, [r3]
 800d706:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800d70a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d70e:	4b91      	ldr	r3, [pc, #580]	; (800d954 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800d710:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800d714:	4b8c      	ldr	r3, [pc, #560]	; (800d948 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 800d716:	ed93 7a00 	vldr	s14, [r3]
 800d71a:	4b8f      	ldr	r3, [pc, #572]	; (800d958 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800d71c:	edd3 7a00 	vldr	s15, [r3]
 800d720:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d724:	4b8d      	ldr	r3, [pc, #564]	; (800d95c <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 800d726:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kpr * epsilon_r;
 800d72a:	4b8c      	ldr	r3, [pc, #560]	; (800d95c <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 800d72c:	edd3 7a00 	vldr	s15, [r3]
 800d730:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d734:	4b8a      	ldr	r3, [pc, #552]	; (800d960 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800d736:	edc3 7a00 	vstr	s15, [r3]
		}


		if(MF.FLAG.FWALL){
 800d73a:	4b8a      	ldr	r3, [pc, #552]	; (800d964 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800d73c:	881b      	ldrh	r3, [r3, #0]
 800d73e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800d742:	b2db      	uxtb	r3, r3
 800d744:	2b00      	cmp	r3, #0
 800d746:	f000 8122 	beq.w	800d98e <HAL_TIM_PeriodElapsedCallback+0x926>
			target_speed_l = (int16_t)(OFFSET_FWALL_L - ad_fl)*0.5;//0.75;
 800d74a:	4b87      	ldr	r3, [pc, #540]	; (800d968 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	b29b      	uxth	r3, r3
 800d750:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 800d754:	3304      	adds	r3, #4
 800d756:	b29b      	uxth	r3, r3
 800d758:	b21b      	sxth	r3, r3
 800d75a:	4618      	mov	r0, r3
 800d75c:	f7f2 feda 	bl	8000514 <__aeabi_i2d>
 800d760:	f04f 0200 	mov.w	r2, #0
 800d764:	4b81      	ldr	r3, [pc, #516]	; (800d96c <HAL_TIM_PeriodElapsedCallback+0x904>)
 800d766:	f7f2 ff3f 	bl	80005e8 <__aeabi_dmul>
 800d76a:	4603      	mov	r3, r0
 800d76c:	460c      	mov	r4, r1
 800d76e:	4618      	mov	r0, r3
 800d770:	4621      	mov	r1, r4
 800d772:	f7f3 fa11 	bl	8000b98 <__aeabi_d2f>
 800d776:	4602      	mov	r2, r0
 800d778:	4b72      	ldr	r3, [pc, #456]	; (800d944 <HAL_TIM_PeriodElapsedCallback+0x8dc>)
 800d77a:	601a      	str	r2, [r3, #0]
			target_speed_r = (int16_t)(OFFSET_FWALL_R - ad_fr);//*1.5;
 800d77c:	4b7c      	ldr	r3, [pc, #496]	; (800d970 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	b29b      	uxth	r3, r3
 800d782:	f5c3 7361 	rsb	r3, r3, #900	; 0x384
 800d786:	b29b      	uxth	r3, r3
 800d788:	b21b      	sxth	r3, r3
 800d78a:	ee07 3a90 	vmov	s15, r3
 800d78e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d792:	4b6d      	ldr	r3, [pc, #436]	; (800d948 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 800d794:	edc3 7a00 	vstr	s15, [r3]

			if(target_speed_l*target_speed_l < 2500)target_speed_l = 0;
 800d798:	4b6a      	ldr	r3, [pc, #424]	; (800d944 <HAL_TIM_PeriodElapsedCallback+0x8dc>)
 800d79a:	ed93 7a00 	vldr	s14, [r3]
 800d79e:	4b69      	ldr	r3, [pc, #420]	; (800d944 <HAL_TIM_PeriodElapsedCallback+0x8dc>)
 800d7a0:	edd3 7a00 	vldr	s15, [r3]
 800d7a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7a8:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800d974 <HAL_TIM_PeriodElapsedCallback+0x90c>
 800d7ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d7b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7b4:	d503      	bpl.n	800d7be <HAL_TIM_PeriodElapsedCallback+0x756>
 800d7b6:	4b63      	ldr	r3, [pc, #396]	; (800d944 <HAL_TIM_PeriodElapsedCallback+0x8dc>)
 800d7b8:	f04f 0200 	mov.w	r2, #0
 800d7bc:	601a      	str	r2, [r3, #0]
			if(target_speed_r*target_speed_r < 2500)target_speed_r = 0;
 800d7be:	4b62      	ldr	r3, [pc, #392]	; (800d948 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 800d7c0:	ed93 7a00 	vldr	s14, [r3]
 800d7c4:	4b60      	ldr	r3, [pc, #384]	; (800d948 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 800d7c6:	edd3 7a00 	vldr	s15, [r3]
 800d7ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7ce:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800d974 <HAL_TIM_PeriodElapsedCallback+0x90c>
 800d7d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d7d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7da:	d503      	bpl.n	800d7e4 <HAL_TIM_PeriodElapsedCallback+0x77c>
 800d7dc:	4b5a      	ldr	r3, [pc, #360]	; (800d948 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 800d7de:	f04f 0200 	mov.w	r2, #0
 800d7e2:	601a      	str	r2, [r3, #0]
			if(target_speed_l == 0 && target_speed_r == 0){
 800d7e4:	4b57      	ldr	r3, [pc, #348]	; (800d944 <HAL_TIM_PeriodElapsedCallback+0x8dc>)
 800d7e6:	edd3 7a00 	vldr	s15, [r3]
 800d7ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d7ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7f2:	d111      	bne.n	800d818 <HAL_TIM_PeriodElapsedCallback+0x7b0>
 800d7f4:	4b54      	ldr	r3, [pc, #336]	; (800d948 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 800d7f6:	edd3 7a00 	vldr	s15, [r3]
 800d7fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d7fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d802:	d109      	bne.n	800d818 <HAL_TIM_PeriodElapsedCallback+0x7b0>
				MF.FLAG.FWALL = 0;
 800d804:	4a57      	ldr	r2, [pc, #348]	; (800d964 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800d806:	8813      	ldrh	r3, [r2, #0]
 800d808:	f36f 13c7 	bfc	r3, #7, #1
 800d80c:	8013      	strh	r3, [r2, #0]
				MF.FLAG.DRV = 0;
 800d80e:	4a55      	ldr	r2, [pc, #340]	; (800d964 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800d810:	8813      	ldrh	r3, [r2, #0]
 800d812:	f36f 0341 	bfc	r3, #1, #1
 800d816:	8013      	strh	r3, [r2, #0]
			}

			epsilon_l = target_speed_l - speed_l;
 800d818:	4b4a      	ldr	r3, [pc, #296]	; (800d944 <HAL_TIM_PeriodElapsedCallback+0x8dc>)
 800d81a:	ed93 7a00 	vldr	s14, [r3]
 800d81e:	4b4b      	ldr	r3, [pc, #300]	; (800d94c <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 800d820:	edd3 7a00 	vldr	s15, [r3]
 800d824:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d828:	4b49      	ldr	r3, [pc, #292]	; (800d950 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 800d82a:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kpl * epsilon_l;
 800d82e:	4b48      	ldr	r3, [pc, #288]	; (800d950 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 800d830:	edd3 7a00 	vldr	s15, [r3]
 800d834:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800d838:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d83c:	4b45      	ldr	r3, [pc, #276]	; (800d954 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800d83e:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800d842:	4b41      	ldr	r3, [pc, #260]	; (800d948 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 800d844:	ed93 7a00 	vldr	s14, [r3]
 800d848:	4b43      	ldr	r3, [pc, #268]	; (800d958 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800d84a:	edd3 7a00 	vldr	s15, [r3]
 800d84e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d852:	4b42      	ldr	r3, [pc, #264]	; (800d95c <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 800d854:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kpr * epsilon_r;
 800d858:	4b40      	ldr	r3, [pc, #256]	; (800d95c <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 800d85a:	edd3 7a00 	vldr	s15, [r3]
 800d85e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d862:	4b3f      	ldr	r3, [pc, #252]	; (800d960 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800d864:	edc3 7a00 	vstr	s15, [r3]

			pulse_l = min(max(pulse_l, -100), 100);
 800d868:	4b3a      	ldr	r3, [pc, #232]	; (800d954 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800d86a:	edd3 7a00 	vldr	s15, [r3]
 800d86e:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800d978 <HAL_TIM_PeriodElapsedCallback+0x910>
 800d872:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d87a:	bfcc      	ite	gt
 800d87c:	2301      	movgt	r3, #1
 800d87e:	2300      	movle	r3, #0
 800d880:	b2db      	uxtb	r3, r3
 800d882:	f083 0301 	eor.w	r3, r3, #1
 800d886:	b2db      	uxtb	r3, r3
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d111      	bne.n	800d8b0 <HAL_TIM_PeriodElapsedCallback+0x848>
 800d88c:	4b31      	ldr	r3, [pc, #196]	; (800d954 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800d88e:	edd3 7a00 	vldr	s15, [r3]
 800d892:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800d97c <HAL_TIM_PeriodElapsedCallback+0x914>
 800d896:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d89a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d89e:	bfcc      	ite	gt
 800d8a0:	2301      	movgt	r3, #1
 800d8a2:	2300      	movle	r3, #0
 800d8a4:	b2db      	uxtb	r3, r3
 800d8a6:	f083 0301 	eor.w	r3, r3, #1
 800d8aa:	b2db      	uxtb	r3, r3
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d00e      	beq.n	800d8ce <HAL_TIM_PeriodElapsedCallback+0x866>
 800d8b0:	4b28      	ldr	r3, [pc, #160]	; (800d954 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800d8b2:	edd3 7a00 	vldr	s15, [r3]
 800d8b6:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800d978 <HAL_TIM_PeriodElapsedCallback+0x910>
 800d8ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d8be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8c2:	dd02      	ble.n	800d8ca <HAL_TIM_PeriodElapsedCallback+0x862>
 800d8c4:	4b23      	ldr	r3, [pc, #140]	; (800d954 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	e002      	b.n	800d8d0 <HAL_TIM_PeriodElapsedCallback+0x868>
 800d8ca:	4b2d      	ldr	r3, [pc, #180]	; (800d980 <HAL_TIM_PeriodElapsedCallback+0x918>)
 800d8cc:	e000      	b.n	800d8d0 <HAL_TIM_PeriodElapsedCallback+0x868>
 800d8ce:	4b2d      	ldr	r3, [pc, #180]	; (800d984 <HAL_TIM_PeriodElapsedCallback+0x91c>)
 800d8d0:	4a20      	ldr	r2, [pc, #128]	; (800d954 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800d8d2:	6013      	str	r3, [r2, #0]
			pulse_r = min(max(pulse_r, -100), 100);
 800d8d4:	4b22      	ldr	r3, [pc, #136]	; (800d960 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800d8d6:	edd3 7a00 	vldr	s15, [r3]
 800d8da:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800d978 <HAL_TIM_PeriodElapsedCallback+0x910>
 800d8de:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d8e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8e6:	bfcc      	ite	gt
 800d8e8:	2301      	movgt	r3, #1
 800d8ea:	2300      	movle	r3, #0
 800d8ec:	b2db      	uxtb	r3, r3
 800d8ee:	f083 0301 	eor.w	r3, r3, #1
 800d8f2:	b2db      	uxtb	r3, r3
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d111      	bne.n	800d91c <HAL_TIM_PeriodElapsedCallback+0x8b4>
 800d8f8:	4b19      	ldr	r3, [pc, #100]	; (800d960 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800d8fa:	edd3 7a00 	vldr	s15, [r3]
 800d8fe:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800d97c <HAL_TIM_PeriodElapsedCallback+0x914>
 800d902:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d90a:	bfcc      	ite	gt
 800d90c:	2301      	movgt	r3, #1
 800d90e:	2300      	movle	r3, #0
 800d910:	b2db      	uxtb	r3, r3
 800d912:	f083 0301 	eor.w	r3, r3, #1
 800d916:	b2db      	uxtb	r3, r3
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d035      	beq.n	800d988 <HAL_TIM_PeriodElapsedCallback+0x920>
 800d91c:	4b10      	ldr	r3, [pc, #64]	; (800d960 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800d91e:	edd3 7a00 	vldr	s15, [r3]
 800d922:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800d978 <HAL_TIM_PeriodElapsedCallback+0x910>
 800d926:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d92a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d92e:	dd02      	ble.n	800d936 <HAL_TIM_PeriodElapsedCallback+0x8ce>
 800d930:	4b0b      	ldr	r3, [pc, #44]	; (800d960 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	e029      	b.n	800d98a <HAL_TIM_PeriodElapsedCallback+0x922>
 800d936:	4b12      	ldr	r3, [pc, #72]	; (800d980 <HAL_TIM_PeriodElapsedCallback+0x918>)
 800d938:	e027      	b.n	800d98a <HAL_TIM_PeriodElapsedCallback+0x922>
 800d93a:	bf00      	nop
 800d93c:	20000d98 	.word	0x20000d98
 800d940:	20000ff8 	.word	0x20000ff8
 800d944:	20000c7c 	.word	0x20000c7c
 800d948:	200001a0 	.word	0x200001a0
 800d94c:	20000b30 	.word	0x20000b30
 800d950:	20000ba0 	.word	0x20000ba0
 800d954:	20000c28 	.word	0x20000c28
 800d958:	200002bc 	.word	0x200002bc
 800d95c:	20000c88 	.word	0x20000c88
 800d960:	20000780 	.word	0x20000780
 800d964:	20000fa8 	.word	0x20000fa8
 800d968:	20000d94 	.word	0x20000d94
 800d96c:	3fe00000 	.word	0x3fe00000
 800d970:	20000c80 	.word	0x20000c80
 800d974:	451c4000 	.word	0x451c4000
 800d978:	c2c80000 	.word	0xc2c80000
 800d97c:	42c80000 	.word	0x42c80000
 800d980:	c2c80000 	.word	0xc2c80000
 800d984:	42c80000 	.word	0x42c80000
 800d988:	4bbd      	ldr	r3, [pc, #756]	; (800dc80 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 800d98a:	4abe      	ldr	r2, [pc, #760]	; (800dc84 <HAL_TIM_PeriodElapsedCallback+0xc1c>)
 800d98c:	6013      	str	r3, [r2, #0]
		}


		if(MF.FLAG.GYRO){
 800d98e:	4bbe      	ldr	r3, [pc, #760]	; (800dc88 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 800d990:	881b      	ldrh	r3, [r3, #0]
 800d992:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800d996:	b2db      	uxtb	r3, r3
 800d998:	2b00      	cmp	r3, #0
 800d99a:	f000 8109 	beq.w	800dbb0 <HAL_TIM_PeriodElapsedCallback+0xb48>
			target_omega_z += target_degaccel_z * 0.001;
 800d99e:	4bbb      	ldr	r3, [pc, #748]	; (800dc8c <HAL_TIM_PeriodElapsedCallback+0xc24>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f7f2 fdc8 	bl	8000538 <__aeabi_f2d>
 800d9a8:	a3b1      	add	r3, pc, #708	; (adr r3, 800dc70 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 800d9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ae:	f7f2 fe1b 	bl	80005e8 <__aeabi_dmul>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	460c      	mov	r4, r1
 800d9b6:	4625      	mov	r5, r4
 800d9b8:	461c      	mov	r4, r3
 800d9ba:	4bb5      	ldr	r3, [pc, #724]	; (800dc90 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f7f2 fdba 	bl	8000538 <__aeabi_f2d>
 800d9c4:	4602      	mov	r2, r0
 800d9c6:	460b      	mov	r3, r1
 800d9c8:	4620      	mov	r0, r4
 800d9ca:	4629      	mov	r1, r5
 800d9cc:	f7f2 fc56 	bl	800027c <__adddf3>
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	460c      	mov	r4, r1
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	4621      	mov	r1, r4
 800d9d8:	f7f3 f8de 	bl	8000b98 <__aeabi_d2f>
 800d9dc:	4602      	mov	r2, r0
 800d9de:	4bac      	ldr	r3, [pc, #688]	; (800dc90 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 800d9e0:	601a      	str	r2, [r3, #0]
			target_omega_z = max(min(target_omega_z, omega_max), omega_min);
 800d9e2:	4bab      	ldr	r3, [pc, #684]	; (800dc90 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 800d9e4:	ed93 7a00 	vldr	s14, [r3]
 800d9e8:	4baa      	ldr	r3, [pc, #680]	; (800dc94 <HAL_TIM_PeriodElapsedCallback+0xc2c>)
 800d9ea:	edd3 7a00 	vldr	s15, [r3]
 800d9ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d9f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9f6:	dd03      	ble.n	800da00 <HAL_TIM_PeriodElapsedCallback+0x998>
 800d9f8:	4ba6      	ldr	r3, [pc, #664]	; (800dc94 <HAL_TIM_PeriodElapsedCallback+0xc2c>)
 800d9fa:	edd3 7a00 	vldr	s15, [r3]
 800d9fe:	e002      	b.n	800da06 <HAL_TIM_PeriodElapsedCallback+0x99e>
 800da00:	4ba3      	ldr	r3, [pc, #652]	; (800dc90 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 800da02:	edd3 7a00 	vldr	s15, [r3]
 800da06:	4ba4      	ldr	r3, [pc, #656]	; (800dc98 <HAL_TIM_PeriodElapsedCallback+0xc30>)
 800da08:	ed93 7a00 	vldr	s14, [r3]
 800da0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800da10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da14:	dd10      	ble.n	800da38 <HAL_TIM_PeriodElapsedCallback+0x9d0>
 800da16:	4b9e      	ldr	r3, [pc, #632]	; (800dc90 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 800da18:	ed93 7a00 	vldr	s14, [r3]
 800da1c:	4b9d      	ldr	r3, [pc, #628]	; (800dc94 <HAL_TIM_PeriodElapsedCallback+0xc2c>)
 800da1e:	edd3 7a00 	vldr	s15, [r3]
 800da22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800da26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da2a:	dd02      	ble.n	800da32 <HAL_TIM_PeriodElapsedCallback+0x9ca>
 800da2c:	4b99      	ldr	r3, [pc, #612]	; (800dc94 <HAL_TIM_PeriodElapsedCallback+0xc2c>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	e004      	b.n	800da3c <HAL_TIM_PeriodElapsedCallback+0x9d4>
 800da32:	4b97      	ldr	r3, [pc, #604]	; (800dc90 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	e001      	b.n	800da3c <HAL_TIM_PeriodElapsedCallback+0x9d4>
 800da38:	4b97      	ldr	r3, [pc, #604]	; (800dc98 <HAL_TIM_PeriodElapsedCallback+0xc30>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	4a94      	ldr	r2, [pc, #592]	; (800dc90 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 800da3e:	6013      	str	r3, [r2, #0]

			epsilon_omega = target_omega_z - gyro_read_z();
 800da40:	4b93      	ldr	r3, [pc, #588]	; (800dc90 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 800da42:	ed93 8a00 	vldr	s16, [r3]
 800da46:	f7ff fab7 	bl	800cfb8 <gyro_read_z>
 800da4a:	eef0 7a40 	vmov.f32	s15, s0
 800da4e:	ee78 7a67 	vsub.f32	s15, s16, s15
 800da52:	4b92      	ldr	r3, [pc, #584]	; (800dc9c <HAL_TIM_PeriodElapsedCallback+0xc34>)
 800da54:	edc3 7a00 	vstr	s15, [r3]

			target_speed_l = speed_G - (target_omega_z + Kp_o*epsilon_omega)/180*M_PI*TREAD/2;
 800da58:	4b91      	ldr	r3, [pc, #580]	; (800dca0 <HAL_TIM_PeriodElapsedCallback+0xc38>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	4618      	mov	r0, r3
 800da5e:	f7f2 fd6b 	bl	8000538 <__aeabi_f2d>
 800da62:	4604      	mov	r4, r0
 800da64:	460d      	mov	r5, r1
 800da66:	4b8d      	ldr	r3, [pc, #564]	; (800dc9c <HAL_TIM_PeriodElapsedCallback+0xc34>)
 800da68:	edd3 7a00 	vldr	s15, [r3]
 800da6c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800da70:	ee27 7a87 	vmul.f32	s14, s15, s14
 800da74:	4b86      	ldr	r3, [pc, #536]	; (800dc90 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 800da76:	edd3 7a00 	vldr	s15, [r3]
 800da7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da7e:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800dca4 <HAL_TIM_PeriodElapsedCallback+0xc3c>
 800da82:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800da86:	ee16 0a90 	vmov	r0, s13
 800da8a:	f7f2 fd55 	bl	8000538 <__aeabi_f2d>
 800da8e:	a37a      	add	r3, pc, #488	; (adr r3, 800dc78 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 800da90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da94:	f7f2 fda8 	bl	80005e8 <__aeabi_dmul>
 800da98:	4602      	mov	r2, r0
 800da9a:	460b      	mov	r3, r1
 800da9c:	4610      	mov	r0, r2
 800da9e:	4619      	mov	r1, r3
 800daa0:	f04f 0200 	mov.w	r2, #0
 800daa4:	4b80      	ldr	r3, [pc, #512]	; (800dca8 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800daa6:	f7f2 fd9f 	bl	80005e8 <__aeabi_dmul>
 800daaa:	4602      	mov	r2, r0
 800daac:	460b      	mov	r3, r1
 800daae:	4610      	mov	r0, r2
 800dab0:	4619      	mov	r1, r3
 800dab2:	f04f 0200 	mov.w	r2, #0
 800dab6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800daba:	f7f2 febf 	bl	800083c <__aeabi_ddiv>
 800dabe:	4602      	mov	r2, r0
 800dac0:	460b      	mov	r3, r1
 800dac2:	4620      	mov	r0, r4
 800dac4:	4629      	mov	r1, r5
 800dac6:	f7f2 fbd7 	bl	8000278 <__aeabi_dsub>
 800daca:	4603      	mov	r3, r0
 800dacc:	460c      	mov	r4, r1
 800dace:	4618      	mov	r0, r3
 800dad0:	4621      	mov	r1, r4
 800dad2:	f7f3 f861 	bl	8000b98 <__aeabi_d2f>
 800dad6:	4602      	mov	r2, r0
 800dad8:	4b74      	ldr	r3, [pc, #464]	; (800dcac <HAL_TIM_PeriodElapsedCallback+0xc44>)
 800dada:	601a      	str	r2, [r3, #0]
			target_speed_r = speed_G + (target_omega_z + Kp_o*epsilon_omega)/180*M_PI*TREAD/2;
 800dadc:	4b70      	ldr	r3, [pc, #448]	; (800dca0 <HAL_TIM_PeriodElapsedCallback+0xc38>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	4618      	mov	r0, r3
 800dae2:	f7f2 fd29 	bl	8000538 <__aeabi_f2d>
 800dae6:	4604      	mov	r4, r0
 800dae8:	460d      	mov	r5, r1
 800daea:	4b6c      	ldr	r3, [pc, #432]	; (800dc9c <HAL_TIM_PeriodElapsedCallback+0xc34>)
 800daec:	edd3 7a00 	vldr	s15, [r3]
 800daf0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800daf4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800daf8:	4b65      	ldr	r3, [pc, #404]	; (800dc90 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 800dafa:	edd3 7a00 	vldr	s15, [r3]
 800dafe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800db02:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800dca4 <HAL_TIM_PeriodElapsedCallback+0xc3c>
 800db06:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800db0a:	ee16 0a90 	vmov	r0, s13
 800db0e:	f7f2 fd13 	bl	8000538 <__aeabi_f2d>
 800db12:	a359      	add	r3, pc, #356	; (adr r3, 800dc78 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 800db14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db18:	f7f2 fd66 	bl	80005e8 <__aeabi_dmul>
 800db1c:	4602      	mov	r2, r0
 800db1e:	460b      	mov	r3, r1
 800db20:	4610      	mov	r0, r2
 800db22:	4619      	mov	r1, r3
 800db24:	f04f 0200 	mov.w	r2, #0
 800db28:	4b5f      	ldr	r3, [pc, #380]	; (800dca8 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800db2a:	f7f2 fd5d 	bl	80005e8 <__aeabi_dmul>
 800db2e:	4602      	mov	r2, r0
 800db30:	460b      	mov	r3, r1
 800db32:	4610      	mov	r0, r2
 800db34:	4619      	mov	r1, r3
 800db36:	f04f 0200 	mov.w	r2, #0
 800db3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800db3e:	f7f2 fe7d 	bl	800083c <__aeabi_ddiv>
 800db42:	4602      	mov	r2, r0
 800db44:	460b      	mov	r3, r1
 800db46:	4620      	mov	r0, r4
 800db48:	4629      	mov	r1, r5
 800db4a:	f7f2 fb97 	bl	800027c <__adddf3>
 800db4e:	4603      	mov	r3, r0
 800db50:	460c      	mov	r4, r1
 800db52:	4618      	mov	r0, r3
 800db54:	4621      	mov	r1, r4
 800db56:	f7f3 f81f 	bl	8000b98 <__aeabi_d2f>
 800db5a:	4602      	mov	r2, r0
 800db5c:	4b54      	ldr	r3, [pc, #336]	; (800dcb0 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 800db5e:	601a      	str	r2, [r3, #0]

			epsilon_l = target_speed_l - speed_l;
 800db60:	4b52      	ldr	r3, [pc, #328]	; (800dcac <HAL_TIM_PeriodElapsedCallback+0xc44>)
 800db62:	ed93 7a00 	vldr	s14, [r3]
 800db66:	4b53      	ldr	r3, [pc, #332]	; (800dcb4 <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 800db68:	edd3 7a00 	vldr	s15, [r3]
 800db6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db70:	4b51      	ldr	r3, [pc, #324]	; (800dcb8 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 800db72:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kpl * epsilon_l;
 800db76:	4b50      	ldr	r3, [pc, #320]	; (800dcb8 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 800db78:	edd3 7a00 	vldr	s15, [r3]
 800db7c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800db80:	ee67 7a87 	vmul.f32	s15, s15, s14
 800db84:	4b4d      	ldr	r3, [pc, #308]	; (800dcbc <HAL_TIM_PeriodElapsedCallback+0xc54>)
 800db86:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800db8a:	4b49      	ldr	r3, [pc, #292]	; (800dcb0 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 800db8c:	ed93 7a00 	vldr	s14, [r3]
 800db90:	4b4b      	ldr	r3, [pc, #300]	; (800dcc0 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 800db92:	edd3 7a00 	vldr	s15, [r3]
 800db96:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db9a:	4b4a      	ldr	r3, [pc, #296]	; (800dcc4 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 800db9c:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kpr * epsilon_r;
 800dba0:	4b48      	ldr	r3, [pc, #288]	; (800dcc4 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 800dba2:	edd3 7a00 	vldr	s15, [r3]
 800dba6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800dbaa:	4b36      	ldr	r3, [pc, #216]	; (800dc84 <HAL_TIM_PeriodElapsedCallback+0xc1c>)
 800dbac:	edc3 7a00 	vstr	s15, [r3]
		}


		//ADchange interrupt
		uint16_t delay;
		tp = (tp+1)%3;
 800dbb0:	4b45      	ldr	r3, [pc, #276]	; (800dcc8 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800dbb2:	781b      	ldrb	r3, [r3, #0]
 800dbb4:	1c5a      	adds	r2, r3, #1
 800dbb6:	4b45      	ldr	r3, [pc, #276]	; (800dccc <HAL_TIM_PeriodElapsedCallback+0xc64>)
 800dbb8:	fb83 3102 	smull	r3, r1, r3, r2
 800dbbc:	17d3      	asrs	r3, r2, #31
 800dbbe:	1ac9      	subs	r1, r1, r3
 800dbc0:	460b      	mov	r3, r1
 800dbc2:	005b      	lsls	r3, r3, #1
 800dbc4:	440b      	add	r3, r1
 800dbc6:	1ad1      	subs	r1, r2, r3
 800dbc8:	b2ca      	uxtb	r2, r1
 800dbca:	4b3f      	ldr	r3, [pc, #252]	; (800dcc8 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800dbcc:	701a      	strb	r2, [r3, #0]

		switch(tp){
 800dbce:	4b3e      	ldr	r3, [pc, #248]	; (800dcc8 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800dbd0:	781b      	ldrb	r3, [r3, #0]
 800dbd2:	2b01      	cmp	r3, #1
 800dbd4:	d042      	beq.n	800dc5c <HAL_TIM_PeriodElapsedCallback+0xbf4>
 800dbd6:	2b02      	cmp	r3, #2
 800dbd8:	f000 80b9 	beq.w	800dd4e <HAL_TIM_PeriodElapsedCallback+0xce6>
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	f040 82ac 	bne.w	800e13a <HAL_TIM_PeriodElapsedCallback+0x10d2>
		  case 0:
				HAL_GPIO_WritePin(IR_L_GPIO_Port, IR_L_Pin, GPIO_PIN_SET); 	//L
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	2101      	movs	r1, #1
 800dbe6:	483a      	ldr	r0, [pc, #232]	; (800dcd0 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 800dbe8:	f7f4 fb8c 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800dbec:	2300      	movs	r3, #0
 800dbee:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800dbf0:	e002      	b.n	800dbf8 <HAL_TIM_PeriodElapsedCallback+0xb90>
 800dbf2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dbf4:	3301      	adds	r3, #1
 800dbf6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800dbf8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dbfa:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800dbfe:	4293      	cmp	r3, r2
 800dc00:	d9f7      	bls.n	800dbf2 <HAL_TIM_PeriodElapsedCallback+0xb8a>
				ad_l = get_adc_value(&hadc1, ADC_CHANNEL_12);				//L
 800dc02:	210c      	movs	r1, #12
 800dc04:	4833      	ldr	r0, [pc, #204]	; (800dcd4 <HAL_TIM_PeriodElapsedCallback+0xc6c>)
 800dc06:	f001 faa3 	bl	800f150 <get_adc_value>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	461a      	mov	r2, r3
 800dc0e:	4b32      	ldr	r3, [pc, #200]	; (800dcd8 <HAL_TIM_PeriodElapsedCallback+0xc70>)
 800dc10:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(IR_L_GPIO_Port, IR_L_Pin, GPIO_PIN_RESET);
 800dc12:	2200      	movs	r2, #0
 800dc14:	2101      	movs	r1, #1
 800dc16:	482e      	ldr	r0, [pc, #184]	; (800dcd0 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 800dc18:	f7f4 fb74 	bl	8002304 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(IR_R_GPIO_Port, IR_R_Pin, GPIO_PIN_SET);  //R
 800dc1c:	2201      	movs	r2, #1
 800dc1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800dc22:	482e      	ldr	r0, [pc, #184]	; (800dcdc <HAL_TIM_PeriodElapsedCallback+0xc74>)
 800dc24:	f7f4 fb6e 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800dc28:	2300      	movs	r3, #0
 800dc2a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800dc2c:	e002      	b.n	800dc34 <HAL_TIM_PeriodElapsedCallback+0xbcc>
 800dc2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dc30:	3301      	adds	r3, #1
 800dc32:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800dc34:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dc36:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800dc3a:	4293      	cmp	r3, r2
 800dc3c:	d9f7      	bls.n	800dc2e <HAL_TIM_PeriodElapsedCallback+0xbc6>
				ad_r = get_adc_value(&hadc1, ADC_CHANNEL_11);				//R
 800dc3e:	210b      	movs	r1, #11
 800dc40:	4824      	ldr	r0, [pc, #144]	; (800dcd4 <HAL_TIM_PeriodElapsedCallback+0xc6c>)
 800dc42:	f001 fa85 	bl	800f150 <get_adc_value>
 800dc46:	4603      	mov	r3, r0
 800dc48:	461a      	mov	r2, r3
 800dc4a:	4b25      	ldr	r3, [pc, #148]	; (800dce0 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 800dc4c:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(IR_R_GPIO_Port, IR_R_Pin, GPIO_PIN_RESET);
 800dc4e:	2200      	movs	r2, #0
 800dc50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800dc54:	4821      	ldr	r0, [pc, #132]	; (800dcdc <HAL_TIM_PeriodElapsedCallback+0xc74>)
 800dc56:	f7f4 fb55 	bl	8002304 <HAL_GPIO_WritePin>
			break;
 800dc5a:	e26e      	b.n	800e13a <HAL_TIM_PeriodElapsedCallback+0x10d2>

		  case 1:
				HAL_GPIO_WritePin(IR_FL_GPIO_Port, IR_FL_Pin, GPIO_PIN_SET);//FL
 800dc5c:	2201      	movs	r2, #1
 800dc5e:	2102      	movs	r1, #2
 800dc60:	481b      	ldr	r0, [pc, #108]	; (800dcd0 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 800dc62:	f7f4 fb4f 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800dc66:	2300      	movs	r3, #0
 800dc68:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800dc6a:	e03e      	b.n	800dcea <HAL_TIM_PeriodElapsedCallback+0xc82>
 800dc6c:	f3af 8000 	nop.w
 800dc70:	d2f1a9fc 	.word	0xd2f1a9fc
 800dc74:	3f50624d 	.word	0x3f50624d
 800dc78:	54442d18 	.word	0x54442d18
 800dc7c:	400921fb 	.word	0x400921fb
 800dc80:	42c80000 	.word	0x42c80000
 800dc84:	20000780 	.word	0x20000780
 800dc88:	20000fa8 	.word	0x20000fa8
 800dc8c:	20000b98 	.word	0x20000b98
 800dc90:	200001a8 	.word	0x200001a8
 800dc94:	20000b28 	.word	0x20000b28
 800dc98:	200002b8 	.word	0x200002b8
 800dc9c:	20000458 	.word	0x20000458
 800dca0:	20000b34 	.word	0x20000b34
 800dca4:	43340000 	.word	0x43340000
 800dca8:	40508000 	.word	0x40508000
 800dcac:	20000c7c 	.word	0x20000c7c
 800dcb0:	200001a0 	.word	0x200001a0
 800dcb4:	20000b30 	.word	0x20000b30
 800dcb8:	20000ba0 	.word	0x20000ba0
 800dcbc:	20000c28 	.word	0x20000c28
 800dcc0:	200002bc 	.word	0x200002bc
 800dcc4:	20000c88 	.word	0x20000c88
 800dcc8:	20001320 	.word	0x20001320
 800dccc:	55555556 	.word	0x55555556
 800dcd0:	40021c00 	.word	0x40021c00
 800dcd4:	20000b40 	.word	0x20000b40
 800dcd8:	20000b3c 	.word	0x20000b3c
 800dcdc:	40020000 	.word	0x40020000
 800dce0:	20000fa0 	.word	0x20000fa0
 800dce4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dce6:	3301      	adds	r3, #1
 800dce8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800dcea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dcec:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800dcf0:	4293      	cmp	r3, r2
 800dcf2:	d9f7      	bls.n	800dce4 <HAL_TIM_PeriodElapsedCallback+0xc7c>
				ad_fl = get_adc_value(&hadc1, ADC_CHANNEL_13);				//FL
 800dcf4:	210d      	movs	r1, #13
 800dcf6:	48a0      	ldr	r0, [pc, #640]	; (800df78 <HAL_TIM_PeriodElapsedCallback+0xf10>)
 800dcf8:	f001 fa2a 	bl	800f150 <get_adc_value>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	461a      	mov	r2, r3
 800dd00:	4b9e      	ldr	r3, [pc, #632]	; (800df7c <HAL_TIM_PeriodElapsedCallback+0xf14>)
 800dd02:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(IR_FL_GPIO_Port, IR_FL_Pin, GPIO_PIN_RESET);
 800dd04:	2200      	movs	r2, #0
 800dd06:	2102      	movs	r1, #2
 800dd08:	489d      	ldr	r0, [pc, #628]	; (800df80 <HAL_TIM_PeriodElapsedCallback+0xf18>)
 800dd0a:	f7f4 fafb 	bl	8002304 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(IR_FR_GPIO_Port, IR_FR_Pin, GPIO_PIN_SET);//FR
 800dd0e:	2201      	movs	r2, #1
 800dd10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800dd14:	489b      	ldr	r0, [pc, #620]	; (800df84 <HAL_TIM_PeriodElapsedCallback+0xf1c>)
 800dd16:	f7f4 faf5 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800dd1e:	e002      	b.n	800dd26 <HAL_TIM_PeriodElapsedCallback+0xcbe>
 800dd20:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dd22:	3301      	adds	r3, #1
 800dd24:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800dd26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dd28:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800dd2c:	4293      	cmp	r3, r2
 800dd2e:	d9f7      	bls.n	800dd20 <HAL_TIM_PeriodElapsedCallback+0xcb8>
				ad_fr = get_adc_value(&hadc1, ADC_CHANNEL_10);				//FR
 800dd30:	210a      	movs	r1, #10
 800dd32:	4891      	ldr	r0, [pc, #580]	; (800df78 <HAL_TIM_PeriodElapsedCallback+0xf10>)
 800dd34:	f001 fa0c 	bl	800f150 <get_adc_value>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	461a      	mov	r2, r3
 800dd3c:	4b92      	ldr	r3, [pc, #584]	; (800df88 <HAL_TIM_PeriodElapsedCallback+0xf20>)
 800dd3e:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(IR_FR_GPIO_Port, IR_FR_Pin, GPIO_PIN_RESET);
 800dd40:	2200      	movs	r2, #0
 800dd42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800dd46:	488f      	ldr	r0, [pc, #572]	; (800df84 <HAL_TIM_PeriodElapsedCallback+0xf1c>)
 800dd48:	f7f4 fadc 	bl	8002304 <HAL_GPIO_WritePin>
			break;
 800dd4c:	e1f5      	b.n	800e13a <HAL_TIM_PeriodElapsedCallback+0x10d2>

		  case 2:
				//
				if(MF.FLAG.WCTRL){
 800dd4e:	4b8f      	ldr	r3, [pc, #572]	; (800df8c <HAL_TIM_PeriodElapsedCallback+0xf24>)
 800dd50:	881b      	ldrh	r3, [r3, #0]
 800dd52:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800dd56:	b2db      	uxtb	r3, r3
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	f000 819a 	beq.w	800e092 <HAL_TIM_PeriodElapsedCallback+0x102a>
					int16_t dwl_tmp = 0, dwr_tmp = 0;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800dd62:	2300      	movs	r3, #0
 800dd64:	857b      	strh	r3, [r7, #42]	; 0x2a
					if(!MF2.FLAG.V){											//a通常走行時
 800dd66:	4b8a      	ldr	r3, [pc, #552]	; (800df90 <HAL_TIM_PeriodElapsedCallback+0xf28>)
 800dd68:	881b      	ldrh	r3, [r3, #0]
 800dd6a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800dd6e:	b2db      	uxtb	r3, r3
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	f040 8095 	bne.w	800dea0 <HAL_TIM_PeriodElapsedCallback+0xe38>
						dif_l = (int32_t) ad_l - base_l;
 800dd76:	4b87      	ldr	r3, [pc, #540]	; (800df94 <HAL_TIM_PeriodElapsedCallback+0xf2c>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	b29a      	uxth	r2, r3
 800dd7c:	4b86      	ldr	r3, [pc, #536]	; (800df98 <HAL_TIM_PeriodElapsedCallback+0xf30>)
 800dd7e:	881b      	ldrh	r3, [r3, #0]
 800dd80:	1ad3      	subs	r3, r2, r3
 800dd82:	b29b      	uxth	r3, r3
 800dd84:	b21a      	sxth	r2, r3
 800dd86:	4b85      	ldr	r3, [pc, #532]	; (800df9c <HAL_TIM_PeriodElapsedCallback+0xf34>)
 800dd88:	801a      	strh	r2, [r3, #0]
						dif_r = (int32_t) ad_r - base_r;
 800dd8a:	4b85      	ldr	r3, [pc, #532]	; (800dfa0 <HAL_TIM_PeriodElapsedCallback+0xf38>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	b29a      	uxth	r2, r3
 800dd90:	4b84      	ldr	r3, [pc, #528]	; (800dfa4 <HAL_TIM_PeriodElapsedCallback+0xf3c>)
 800dd92:	881b      	ldrh	r3, [r3, #0]
 800dd94:	1ad3      	subs	r3, r2, r3
 800dd96:	b29b      	uxth	r3, r3
 800dd98:	b21a      	sxth	r2, r3
 800dd9a:	4b83      	ldr	r3, [pc, #524]	; (800dfa8 <HAL_TIM_PeriodElapsedCallback+0xf40>)
 800dd9c:	801a      	strh	r2, [r3, #0]

						if(dif_l > CTRL_BASE_L || dif_r > CTRL_BASE_R){
 800dd9e:	4b7f      	ldr	r3, [pc, #508]	; (800df9c <HAL_TIM_PeriodElapsedCallback+0xf34>)
 800dda0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dda4:	2b23      	cmp	r3, #35	; 0x23
 800dda6:	dc04      	bgt.n	800ddb2 <HAL_TIM_PeriodElapsedCallback+0xd4a>
 800dda8:	4b7f      	ldr	r3, [pc, #508]	; (800dfa8 <HAL_TIM_PeriodElapsedCallback+0xf40>)
 800ddaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ddae:	2b1e      	cmp	r3, #30
 800ddb0:	dd70      	ble.n	800de94 <HAL_TIM_PeriodElapsedCallback+0xe2c>
							if(dif_l > CTRL_BASE_L){
 800ddb2:	4b7a      	ldr	r3, [pc, #488]	; (800df9c <HAL_TIM_PeriodElapsedCallback+0xf34>)
 800ddb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ddb8:	2b23      	cmp	r3, #35	; 0x23
 800ddba:	dd30      	ble.n	800de1e <HAL_TIM_PeriodElapsedCallback+0xdb6>
								dwl_tmp += CTRL_CONT_W * dif_l;					//a比例制御値を決定
 800ddbc:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800ddc0:	ee07 3a90 	vmov	s15, r3
 800ddc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ddc8:	4b74      	ldr	r3, [pc, #464]	; (800df9c <HAL_TIM_PeriodElapsedCallback+0xf34>)
 800ddca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ddce:	ee07 3a90 	vmov	s15, r3
 800ddd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ddd6:	eef6 6a08 	vmov.f32	s13, #104	; 0x3f400000  0.750
 800ddda:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ddde:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dde2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dde6:	ee17 3a90 	vmov	r3, s15
 800ddea:	85bb      	strh	r3, [r7, #44]	; 0x2c
								dwr_tmp += -1 * CTRL_CONT_W * dif_l;			//a比例制御値を決定
 800ddec:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800ddf0:	ee07 3a90 	vmov	s15, r3
 800ddf4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ddf8:	4b68      	ldr	r3, [pc, #416]	; (800df9c <HAL_TIM_PeriodElapsedCallback+0xf34>)
 800ddfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ddfe:	ee07 3a90 	vmov	s15, r3
 800de02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800de06:	eefe 6a08 	vmov.f32	s13, #232	; 0xbf400000 -0.750
 800de0a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800de0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800de12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800de16:	ee17 3a90 	vmov	r3, s15
 800de1a:	857b      	strh	r3, [r7, #42]	; 0x2a
 800de1c:	e034      	b.n	800de88 <HAL_TIM_PeriodElapsedCallback+0xe20>
							}
							else if(dif_r > CTRL_BASE_R){
 800de1e:	4b62      	ldr	r3, [pc, #392]	; (800dfa8 <HAL_TIM_PeriodElapsedCallback+0xf40>)
 800de20:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de24:	2b1e      	cmp	r3, #30
 800de26:	dd2f      	ble.n	800de88 <HAL_TIM_PeriodElapsedCallback+0xe20>
								dwl_tmp += -1 * CTRL_CONT_W * dif_r;			//a比例制御値を決定
 800de28:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800de2c:	ee07 3a90 	vmov	s15, r3
 800de30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800de34:	4b5c      	ldr	r3, [pc, #368]	; (800dfa8 <HAL_TIM_PeriodElapsedCallback+0xf40>)
 800de36:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de3a:	ee07 3a90 	vmov	s15, r3
 800de3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800de42:	eefe 6a08 	vmov.f32	s13, #232	; 0xbf400000 -0.750
 800de46:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800de4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800de4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800de52:	ee17 3a90 	vmov	r3, s15
 800de56:	85bb      	strh	r3, [r7, #44]	; 0x2c
								dwr_tmp += CTRL_CONT_W * dif_r;					//a比例制御値を決定
 800de58:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800de5c:	ee07 3a90 	vmov	s15, r3
 800de60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800de64:	4b50      	ldr	r3, [pc, #320]	; (800dfa8 <HAL_TIM_PeriodElapsedCallback+0xf40>)
 800de66:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de6a:	ee07 3a90 	vmov	s15, r3
 800de6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800de72:	eef6 6a08 	vmov.f32	s13, #104	; 0x3f400000  0.750
 800de76:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800de7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800de7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800de82:	ee17 3a90 	vmov	r3, s15
 800de86:	857b      	strh	r3, [r7, #42]	; 0x2a
							}
							MF2.FLAG.WG = 1;
 800de88:	4a41      	ldr	r2, [pc, #260]	; (800df90 <HAL_TIM_PeriodElapsedCallback+0xf28>)
 800de8a:	8813      	ldrh	r3, [r2, #0]
 800de8c:	f043 0310 	orr.w	r3, r3, #16
 800de90:	8013      	strh	r3, [r2, #0]
 800de92:	e0db      	b.n	800e04c <HAL_TIM_PeriodElapsedCallback+0xfe4>
						}else{
							MF2.FLAG.WG = 0;
 800de94:	4a3e      	ldr	r2, [pc, #248]	; (800df90 <HAL_TIM_PeriodElapsedCallback+0xf28>)
 800de96:	8813      	ldrh	r3, [r2, #0]
 800de98:	f36f 1304 	bfc	r3, #4, #1
 800de9c:	8013      	strh	r3, [r2, #0]
 800de9e:	e0d5      	b.n	800e04c <HAL_TIM_PeriodElapsedCallback+0xfe4>
						}
					}else{														//a斜め走行時
						dif_l = (int32_t) ad_fl - BASE_FL;
 800dea0:	4b36      	ldr	r3, [pc, #216]	; (800df7c <HAL_TIM_PeriodElapsedCallback+0xf14>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	b29b      	uxth	r3, r3
 800dea6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800deaa:	b29b      	uxth	r3, r3
 800deac:	b21a      	sxth	r2, r3
 800deae:	4b3b      	ldr	r3, [pc, #236]	; (800df9c <HAL_TIM_PeriodElapsedCallback+0xf34>)
 800deb0:	801a      	strh	r2, [r3, #0]
						dif_r = (int32_t) ad_fr - BASE_FR;
 800deb2:	4b35      	ldr	r3, [pc, #212]	; (800df88 <HAL_TIM_PeriodElapsedCallback+0xf20>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	b29b      	uxth	r3, r3
 800deb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800debc:	b29b      	uxth	r3, r3
 800debe:	b21a      	sxth	r2, r3
 800dec0:	4b39      	ldr	r3, [pc, #228]	; (800dfa8 <HAL_TIM_PeriodElapsedCallback+0xf40>)
 800dec2:	801a      	strh	r2, [r3, #0]

						if(dif_l > CTRL_BASE_FL || dif_r > CTRL_BASE_FR){
 800dec4:	4b35      	ldr	r3, [pc, #212]	; (800df9c <HAL_TIM_PeriodElapsedCallback+0xf34>)
 800dec6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800deca:	2bc8      	cmp	r3, #200	; 0xc8
 800decc:	dc05      	bgt.n	800deda <HAL_TIM_PeriodElapsedCallback+0xe72>
 800dece:	4b36      	ldr	r3, [pc, #216]	; (800dfa8 <HAL_TIM_PeriodElapsedCallback+0xf40>)
 800ded0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ded4:	2b64      	cmp	r3, #100	; 0x64
 800ded6:	f340 80b4 	ble.w	800e042 <HAL_TIM_PeriodElapsedCallback+0xfda>
							if(dif_l > CTRL_BASE_FL){
 800deda:	4b30      	ldr	r3, [pc, #192]	; (800df9c <HAL_TIM_PeriodElapsedCallback+0xf34>)
 800dedc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dee0:	2bc8      	cmp	r3, #200	; 0xc8
 800dee2:	dd63      	ble.n	800dfac <HAL_TIM_PeriodElapsedCallback+0xf44>
								dwl_tmp += CTRL_CONT_W * 0.1 * dif_l;				//a比例制御値を決定
 800dee4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800dee8:	4618      	mov	r0, r3
 800deea:	f7f2 fb13 	bl	8000514 <__aeabi_i2d>
 800deee:	4604      	mov	r4, r0
 800def0:	460d      	mov	r5, r1
 800def2:	4b2a      	ldr	r3, [pc, #168]	; (800df9c <HAL_TIM_PeriodElapsedCallback+0xf34>)
 800def4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800def8:	4618      	mov	r0, r3
 800defa:	f7f2 fb0b 	bl	8000514 <__aeabi_i2d>
 800defe:	a31a      	add	r3, pc, #104	; (adr r3, 800df68 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 800df00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df04:	f7f2 fb70 	bl	80005e8 <__aeabi_dmul>
 800df08:	4602      	mov	r2, r0
 800df0a:	460b      	mov	r3, r1
 800df0c:	4620      	mov	r0, r4
 800df0e:	4629      	mov	r1, r5
 800df10:	f7f2 f9b4 	bl	800027c <__adddf3>
 800df14:	4603      	mov	r3, r0
 800df16:	460c      	mov	r4, r1
 800df18:	4618      	mov	r0, r3
 800df1a:	4621      	mov	r1, r4
 800df1c:	f7f2 fe14 	bl	8000b48 <__aeabi_d2iz>
 800df20:	4603      	mov	r3, r0
 800df22:	85bb      	strh	r3, [r7, #44]	; 0x2c
								dwr_tmp += -1 * CTRL_CONT_W * 0.1 * dif_l;			//a比例制御値を決定
 800df24:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800df28:	4618      	mov	r0, r3
 800df2a:	f7f2 faf3 	bl	8000514 <__aeabi_i2d>
 800df2e:	4604      	mov	r4, r0
 800df30:	460d      	mov	r5, r1
 800df32:	4b1a      	ldr	r3, [pc, #104]	; (800df9c <HAL_TIM_PeriodElapsedCallback+0xf34>)
 800df34:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df38:	4618      	mov	r0, r3
 800df3a:	f7f2 faeb 	bl	8000514 <__aeabi_i2d>
 800df3e:	a30c      	add	r3, pc, #48	; (adr r3, 800df70 <HAL_TIM_PeriodElapsedCallback+0xf08>)
 800df40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df44:	f7f2 fb50 	bl	80005e8 <__aeabi_dmul>
 800df48:	4602      	mov	r2, r0
 800df4a:	460b      	mov	r3, r1
 800df4c:	4620      	mov	r0, r4
 800df4e:	4629      	mov	r1, r5
 800df50:	f7f2 f994 	bl	800027c <__adddf3>
 800df54:	4603      	mov	r3, r0
 800df56:	460c      	mov	r4, r1
 800df58:	4618      	mov	r0, r3
 800df5a:	4621      	mov	r1, r4
 800df5c:	f7f2 fdf4 	bl	8000b48 <__aeabi_d2iz>
 800df60:	4603      	mov	r3, r0
 800df62:	857b      	strh	r3, [r7, #42]	; 0x2a
 800df64:	e067      	b.n	800e036 <HAL_TIM_PeriodElapsedCallback+0xfce>
 800df66:	bf00      	nop
 800df68:	33333334 	.word	0x33333334
 800df6c:	3fb33333 	.word	0x3fb33333
 800df70:	33333334 	.word	0x33333334
 800df74:	bfb33333 	.word	0xbfb33333
 800df78:	20000b40 	.word	0x20000b40
 800df7c:	20000d94 	.word	0x20000d94
 800df80:	40021c00 	.word	0x40021c00
 800df84:	40020000 	.word	0x40020000
 800df88:	20000c80 	.word	0x20000c80
 800df8c:	20000fa8 	.word	0x20000fa8
 800df90:	20000fa4 	.word	0x20000fa4
 800df94:	20000b3c 	.word	0x20000b3c
 800df98:	2000034c 	.word	0x2000034c
 800df9c:	20000b90 	.word	0x20000b90
 800dfa0:	20000fa0 	.word	0x20000fa0
 800dfa4:	200002c0 	.word	0x200002c0
 800dfa8:	20000c32 	.word	0x20000c32
							}
							else if(dif_r > CTRL_BASE_FR){
 800dfac:	4bb8      	ldr	r3, [pc, #736]	; (800e290 <HAL_TIM_PeriodElapsedCallback+0x1228>)
 800dfae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dfb2:	2b64      	cmp	r3, #100	; 0x64
 800dfb4:	dd3f      	ble.n	800e036 <HAL_TIM_PeriodElapsedCallback+0xfce>
								dwl_tmp += -1 * CTRL_CONT_W * 0.2 * dif_r;			//a比例制御値を決定
 800dfb6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f7f2 faaa 	bl	8000514 <__aeabi_i2d>
 800dfc0:	4604      	mov	r4, r0
 800dfc2:	460d      	mov	r5, r1
 800dfc4:	4bb2      	ldr	r3, [pc, #712]	; (800e290 <HAL_TIM_PeriodElapsedCallback+0x1228>)
 800dfc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f7f2 faa2 	bl	8000514 <__aeabi_i2d>
 800dfd0:	a3ab      	add	r3, pc, #684	; (adr r3, 800e280 <HAL_TIM_PeriodElapsedCallback+0x1218>)
 800dfd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd6:	f7f2 fb07 	bl	80005e8 <__aeabi_dmul>
 800dfda:	4602      	mov	r2, r0
 800dfdc:	460b      	mov	r3, r1
 800dfde:	4620      	mov	r0, r4
 800dfe0:	4629      	mov	r1, r5
 800dfe2:	f7f2 f94b 	bl	800027c <__adddf3>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	460c      	mov	r4, r1
 800dfea:	4618      	mov	r0, r3
 800dfec:	4621      	mov	r1, r4
 800dfee:	f7f2 fdab 	bl	8000b48 <__aeabi_d2iz>
 800dff2:	4603      	mov	r3, r0
 800dff4:	85bb      	strh	r3, [r7, #44]	; 0x2c
								dwr_tmp += CTRL_CONT_W * 0.2 * dif_r;				//a比例制御値を決定
 800dff6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800dffa:	4618      	mov	r0, r3
 800dffc:	f7f2 fa8a 	bl	8000514 <__aeabi_i2d>
 800e000:	4604      	mov	r4, r0
 800e002:	460d      	mov	r5, r1
 800e004:	4ba2      	ldr	r3, [pc, #648]	; (800e290 <HAL_TIM_PeriodElapsedCallback+0x1228>)
 800e006:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e00a:	4618      	mov	r0, r3
 800e00c:	f7f2 fa82 	bl	8000514 <__aeabi_i2d>
 800e010:	a39d      	add	r3, pc, #628	; (adr r3, 800e288 <HAL_TIM_PeriodElapsedCallback+0x1220>)
 800e012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e016:	f7f2 fae7 	bl	80005e8 <__aeabi_dmul>
 800e01a:	4602      	mov	r2, r0
 800e01c:	460b      	mov	r3, r1
 800e01e:	4620      	mov	r0, r4
 800e020:	4629      	mov	r1, r5
 800e022:	f7f2 f92b 	bl	800027c <__adddf3>
 800e026:	4603      	mov	r3, r0
 800e028:	460c      	mov	r4, r1
 800e02a:	4618      	mov	r0, r3
 800e02c:	4621      	mov	r1, r4
 800e02e:	f7f2 fd8b 	bl	8000b48 <__aeabi_d2iz>
 800e032:	4603      	mov	r3, r0
 800e034:	857b      	strh	r3, [r7, #42]	; 0x2a
							}
							MF2.FLAG.WG = 1;
 800e036:	4a97      	ldr	r2, [pc, #604]	; (800e294 <HAL_TIM_PeriodElapsedCallback+0x122c>)
 800e038:	8813      	ldrh	r3, [r2, #0]
 800e03a:	f043 0310 	orr.w	r3, r3, #16
 800e03e:	8013      	strh	r3, [r2, #0]
 800e040:	e004      	b.n	800e04c <HAL_TIM_PeriodElapsedCallback+0xfe4>
						}else{
							MF2.FLAG.WG = 0;
 800e042:	4a94      	ldr	r2, [pc, #592]	; (800e294 <HAL_TIM_PeriodElapsedCallback+0x122c>)
 800e044:	8813      	ldrh	r3, [r2, #0]
 800e046:	f36f 1304 	bfc	r3, #4, #1
 800e04a:	8013      	strh	r3, [r2, #0]
						}
					}
					dwl = max(min(CTRL_MAX_W, dwl_tmp), -1 * CTRL_MAX_W);
 800e04c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800e050:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800e054:	dd08      	ble.n	800e068 <HAL_TIM_PeriodElapsedCallback+0x1000>
 800e056:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800e05a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e05e:	bfa8      	it	ge
 800e060:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800e064:	b21b      	sxth	r3, r3
 800e066:	e000      	b.n	800e06a <HAL_TIM_PeriodElapsedCallback+0x1002>
 800e068:	4b8b      	ldr	r3, [pc, #556]	; (800e298 <HAL_TIM_PeriodElapsedCallback+0x1230>)
 800e06a:	4a8c      	ldr	r2, [pc, #560]	; (800e29c <HAL_TIM_PeriodElapsedCallback+0x1234>)
 800e06c:	8013      	strh	r3, [r2, #0]
					dwr = max(min(CTRL_MAX_W, dwr_tmp), -1 * CTRL_MAX_W);
 800e06e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800e072:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800e076:	dd08      	ble.n	800e08a <HAL_TIM_PeriodElapsedCallback+0x1022>
 800e078:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800e07c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e080:	bfa8      	it	ge
 800e082:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800e086:	b21b      	sxth	r3, r3
 800e088:	e000      	b.n	800e08c <HAL_TIM_PeriodElapsedCallback+0x1024>
 800e08a:	4b83      	ldr	r3, [pc, #524]	; (800e298 <HAL_TIM_PeriodElapsedCallback+0x1230>)
 800e08c:	4a84      	ldr	r2, [pc, #528]	; (800e2a0 <HAL_TIM_PeriodElapsedCallback+0x1238>)
 800e08e:	8013      	strh	r3, [r2, #0]
 800e090:	e006      	b.n	800e0a0 <HAL_TIM_PeriodElapsedCallback+0x1038>
				}else{
					//a制御フラグがなければ壁制御値0
					dwl = dwr = 0;
 800e092:	2100      	movs	r1, #0
 800e094:	4b82      	ldr	r3, [pc, #520]	; (800e2a0 <HAL_TIM_PeriodElapsedCallback+0x1238>)
 800e096:	460a      	mov	r2, r1
 800e098:	801a      	strh	r2, [r3, #0]
 800e09a:	4b80      	ldr	r3, [pc, #512]	; (800e29c <HAL_TIM_PeriodElapsedCallback+0x1234>)
 800e09c:	460a      	mov	r2, r1
 800e09e:	801a      	strh	r2, [r3, #0]
				}

				if(MF.FLAG.GCTRL){
 800e0a0:	4b80      	ldr	r3, [pc, #512]	; (800e2a4 <HAL_TIM_PeriodElapsedCallback+0x123c>)
 800e0a2:	881b      	ldrh	r3, [r3, #0]
 800e0a4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e0a8:	b2db      	uxtb	r3, r3
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d03d      	beq.n	800e12a <HAL_TIM_PeriodElapsedCallback+0x10c2>
				}

					dg = CTRL_CONT_G * gyro_read_z();			//a角速度制御
					dg = CTRL_CONT_G * degree_z;				//a角度制御
*/
					dg = CTRL_CONT_G * (target_degree_z - degree_z);		//a角度制御(目標角度はスタートを0度とし、旋回量と対応付け)
 800e0ae:	4b7e      	ldr	r3, [pc, #504]	; (800e2a8 <HAL_TIM_PeriodElapsedCallback+0x1240>)
 800e0b0:	ed93 7a00 	vldr	s14, [r3]
 800e0b4:	4b7d      	ldr	r3, [pc, #500]	; (800e2ac <HAL_TIM_PeriodElapsedCallback+0x1244>)
 800e0b6:	edd3 7a00 	vldr	s15, [r3]
 800e0ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e0be:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800e2b0 <HAL_TIM_PeriodElapsedCallback+0x1248>
 800e0c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e0c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e0ca:	ee17 3a90 	vmov	r3, s15
 800e0ce:	b21a      	sxth	r2, r3
 800e0d0:	4b78      	ldr	r3, [pc, #480]	; (800e2b4 <HAL_TIM_PeriodElapsedCallback+0x124c>)
 800e0d2:	801a      	strh	r2, [r3, #0]

					dg = max(min(CTRL_MAX_G, dg), -1 * CTRL_MAX_G);
 800e0d4:	4b77      	ldr	r3, [pc, #476]	; (800e2b4 <HAL_TIM_PeriodElapsedCallback+0x124c>)
 800e0d6:	881b      	ldrh	r3, [r3, #0]
 800e0d8:	b21b      	sxth	r3, r3
 800e0da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e0de:	da05      	bge.n	800e0ec <HAL_TIM_PeriodElapsedCallback+0x1084>
 800e0e0:	4b74      	ldr	r3, [pc, #464]	; (800e2b4 <HAL_TIM_PeriodElapsedCallback+0x124c>)
 800e0e2:	881b      	ldrh	r3, [r3, #0]
 800e0e4:	b21b      	sxth	r3, r3
 800e0e6:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800e0ea:	dd0c      	ble.n	800e106 <HAL_TIM_PeriodElapsedCallback+0x109e>
 800e0ec:	4b71      	ldr	r3, [pc, #452]	; (800e2b4 <HAL_TIM_PeriodElapsedCallback+0x124c>)
 800e0ee:	881b      	ldrh	r3, [r3, #0]
 800e0f0:	b21b      	sxth	r3, r3
 800e0f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e0f6:	da03      	bge.n	800e100 <HAL_TIM_PeriodElapsedCallback+0x1098>
 800e0f8:	4b6e      	ldr	r3, [pc, #440]	; (800e2b4 <HAL_TIM_PeriodElapsedCallback+0x124c>)
 800e0fa:	881b      	ldrh	r3, [r3, #0]
 800e0fc:	b21b      	sxth	r3, r3
 800e0fe:	e003      	b.n	800e108 <HAL_TIM_PeriodElapsedCallback+0x10a0>
 800e100:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e104:	e000      	b.n	800e108 <HAL_TIM_PeriodElapsedCallback+0x10a0>
 800e106:	4b64      	ldr	r3, [pc, #400]	; (800e298 <HAL_TIM_PeriodElapsedCallback+0x1230>)
 800e108:	4a6a      	ldr	r2, [pc, #424]	; (800e2b4 <HAL_TIM_PeriodElapsedCallback+0x124c>)
 800e10a:	8013      	strh	r3, [r2, #0]
					dgl = -1*dg;
 800e10c:	4b69      	ldr	r3, [pc, #420]	; (800e2b4 <HAL_TIM_PeriodElapsedCallback+0x124c>)
 800e10e:	881b      	ldrh	r3, [r3, #0]
 800e110:	b21b      	sxth	r3, r3
 800e112:	b29b      	uxth	r3, r3
 800e114:	425b      	negs	r3, r3
 800e116:	b29b      	uxth	r3, r3
 800e118:	b21a      	sxth	r2, r3
 800e11a:	4b67      	ldr	r3, [pc, #412]	; (800e2b8 <HAL_TIM_PeriodElapsedCallback+0x1250>)
 800e11c:	801a      	strh	r2, [r3, #0]
					dgr = dg;
 800e11e:	4b65      	ldr	r3, [pc, #404]	; (800e2b4 <HAL_TIM_PeriodElapsedCallback+0x124c>)
 800e120:	881b      	ldrh	r3, [r3, #0]
 800e122:	b21a      	sxth	r2, r3
 800e124:	4b65      	ldr	r3, [pc, #404]	; (800e2bc <HAL_TIM_PeriodElapsedCallback+0x1254>)
 800e126:	801a      	strh	r2, [r3, #0]
				}else{
					//a制御フラグがなければジャイロ制御値0
					dgl = dgr = 0;
				}
				break;
 800e128:	e006      	b.n	800e138 <HAL_TIM_PeriodElapsedCallback+0x10d0>
					dgl = dgr = 0;
 800e12a:	2100      	movs	r1, #0
 800e12c:	4b63      	ldr	r3, [pc, #396]	; (800e2bc <HAL_TIM_PeriodElapsedCallback+0x1254>)
 800e12e:	460a      	mov	r2, r1
 800e130:	801a      	strh	r2, [r3, #0]
 800e132:	4b61      	ldr	r3, [pc, #388]	; (800e2b8 <HAL_TIM_PeriodElapsedCallback+0x1250>)
 800e134:	460a      	mov	r2, r1
 800e136:	801a      	strh	r2, [r3, #0]
				break;
 800e138:	bf00      	nop
		}


		if(MF.FLAG.DRV){
 800e13a:	4b5a      	ldr	r3, [pc, #360]	; (800e2a4 <HAL_TIM_PeriodElapsedCallback+0x123c>)
 800e13c:	881b      	ldrh	r3, [r3, #0]
 800e13e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e142:	b2db      	uxtb	r3, r3
 800e144:	2b00      	cmp	r3, #0
 800e146:	f000 8181 	beq.w	800e44c <HAL_TIM_PeriodElapsedCallback+0x13e4>
			if(!MF2.FLAG.WG){
 800e14a:	4b52      	ldr	r3, [pc, #328]	; (800e294 <HAL_TIM_PeriodElapsedCallback+0x122c>)
 800e14c:	881b      	ldrh	r3, [r3, #0]
 800e14e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e152:	b2db      	uxtb	r3, r3
 800e154:	2b00      	cmp	r3, #0
 800e156:	d130      	bne.n	800e1ba <HAL_TIM_PeriodElapsedCallback+0x1152>
				pulse_l = pulse_l + dgl + dwl;
 800e158:	4b57      	ldr	r3, [pc, #348]	; (800e2b8 <HAL_TIM_PeriodElapsedCallback+0x1250>)
 800e15a:	881b      	ldrh	r3, [r3, #0]
 800e15c:	b21b      	sxth	r3, r3
 800e15e:	ee07 3a90 	vmov	s15, r3
 800e162:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e166:	4b56      	ldr	r3, [pc, #344]	; (800e2c0 <HAL_TIM_PeriodElapsedCallback+0x1258>)
 800e168:	edd3 7a00 	vldr	s15, [r3]
 800e16c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e170:	4b4a      	ldr	r3, [pc, #296]	; (800e29c <HAL_TIM_PeriodElapsedCallback+0x1234>)
 800e172:	881b      	ldrh	r3, [r3, #0]
 800e174:	b21b      	sxth	r3, r3
 800e176:	ee07 3a90 	vmov	s15, r3
 800e17a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e17e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e182:	4b4f      	ldr	r3, [pc, #316]	; (800e2c0 <HAL_TIM_PeriodElapsedCallback+0x1258>)
 800e184:	edc3 7a00 	vstr	s15, [r3]
				pulse_r = pulse_r + dgr + dwr;
 800e188:	4b4c      	ldr	r3, [pc, #304]	; (800e2bc <HAL_TIM_PeriodElapsedCallback+0x1254>)
 800e18a:	881b      	ldrh	r3, [r3, #0]
 800e18c:	b21b      	sxth	r3, r3
 800e18e:	ee07 3a90 	vmov	s15, r3
 800e192:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e196:	4b4b      	ldr	r3, [pc, #300]	; (800e2c4 <HAL_TIM_PeriodElapsedCallback+0x125c>)
 800e198:	edd3 7a00 	vldr	s15, [r3]
 800e19c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e1a0:	4b3f      	ldr	r3, [pc, #252]	; (800e2a0 <HAL_TIM_PeriodElapsedCallback+0x1238>)
 800e1a2:	881b      	ldrh	r3, [r3, #0]
 800e1a4:	b21b      	sxth	r3, r3
 800e1a6:	ee07 3a90 	vmov	s15, r3
 800e1aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e1ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e1b2:	4b44      	ldr	r3, [pc, #272]	; (800e2c4 <HAL_TIM_PeriodElapsedCallback+0x125c>)
 800e1b4:	edc3 7a00 	vstr	s15, [r3]
 800e1b8:	e02f      	b.n	800e21a <HAL_TIM_PeriodElapsedCallback+0x11b2>
//				pulse_l = pulse_l + dgl;
//				pulse_r = pulse_r + dgr;
			}else{
				pulse_l = pulse_l + dgl + dwl;
 800e1ba:	4b3f      	ldr	r3, [pc, #252]	; (800e2b8 <HAL_TIM_PeriodElapsedCallback+0x1250>)
 800e1bc:	881b      	ldrh	r3, [r3, #0]
 800e1be:	b21b      	sxth	r3, r3
 800e1c0:	ee07 3a90 	vmov	s15, r3
 800e1c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e1c8:	4b3d      	ldr	r3, [pc, #244]	; (800e2c0 <HAL_TIM_PeriodElapsedCallback+0x1258>)
 800e1ca:	edd3 7a00 	vldr	s15, [r3]
 800e1ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e1d2:	4b32      	ldr	r3, [pc, #200]	; (800e29c <HAL_TIM_PeriodElapsedCallback+0x1234>)
 800e1d4:	881b      	ldrh	r3, [r3, #0]
 800e1d6:	b21b      	sxth	r3, r3
 800e1d8:	ee07 3a90 	vmov	s15, r3
 800e1dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e1e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e1e4:	4b36      	ldr	r3, [pc, #216]	; (800e2c0 <HAL_TIM_PeriodElapsedCallback+0x1258>)
 800e1e6:	edc3 7a00 	vstr	s15, [r3]
				pulse_r = pulse_r + dgr + dwr;
 800e1ea:	4b34      	ldr	r3, [pc, #208]	; (800e2bc <HAL_TIM_PeriodElapsedCallback+0x1254>)
 800e1ec:	881b      	ldrh	r3, [r3, #0]
 800e1ee:	b21b      	sxth	r3, r3
 800e1f0:	ee07 3a90 	vmov	s15, r3
 800e1f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e1f8:	4b32      	ldr	r3, [pc, #200]	; (800e2c4 <HAL_TIM_PeriodElapsedCallback+0x125c>)
 800e1fa:	edd3 7a00 	vldr	s15, [r3]
 800e1fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e202:	4b27      	ldr	r3, [pc, #156]	; (800e2a0 <HAL_TIM_PeriodElapsedCallback+0x1238>)
 800e204:	881b      	ldrh	r3, [r3, #0]
 800e206:	b21b      	sxth	r3, r3
 800e208:	ee07 3a90 	vmov	s15, r3
 800e20c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e210:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e214:	4b2b      	ldr	r3, [pc, #172]	; (800e2c4 <HAL_TIM_PeriodElapsedCallback+0x125c>)
 800e216:	edc3 7a00 	vstr	s15, [r3]
//				pulse_l = pulse_l + dwl;
//				pulse_r = pulse_r + dwr;
			}
			pulse_l = min(max(pulse_l, -1000), 1000);
 800e21a:	4b29      	ldr	r3, [pc, #164]	; (800e2c0 <HAL_TIM_PeriodElapsedCallback+0x1258>)
 800e21c:	edd3 7a00 	vldr	s15, [r3]
 800e220:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800e2c8 <HAL_TIM_PeriodElapsedCallback+0x1260>
 800e224:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e22c:	bfcc      	ite	gt
 800e22e:	2301      	movgt	r3, #1
 800e230:	2300      	movle	r3, #0
 800e232:	b2db      	uxtb	r3, r3
 800e234:	f083 0301 	eor.w	r3, r3, #1
 800e238:	b2db      	uxtb	r3, r3
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d111      	bne.n	800e262 <HAL_TIM_PeriodElapsedCallback+0x11fa>
 800e23e:	4b20      	ldr	r3, [pc, #128]	; (800e2c0 <HAL_TIM_PeriodElapsedCallback+0x1258>)
 800e240:	edd3 7a00 	vldr	s15, [r3]
 800e244:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800e2cc <HAL_TIM_PeriodElapsedCallback+0x1264>
 800e248:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e24c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e250:	bfcc      	ite	gt
 800e252:	2301      	movgt	r3, #1
 800e254:	2300      	movle	r3, #0
 800e256:	b2db      	uxtb	r3, r3
 800e258:	f083 0301 	eor.w	r3, r3, #1
 800e25c:	b2db      	uxtb	r3, r3
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d038      	beq.n	800e2d4 <HAL_TIM_PeriodElapsedCallback+0x126c>
 800e262:	4b17      	ldr	r3, [pc, #92]	; (800e2c0 <HAL_TIM_PeriodElapsedCallback+0x1258>)
 800e264:	edd3 7a00 	vldr	s15, [r3]
 800e268:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800e2c8 <HAL_TIM_PeriodElapsedCallback+0x1260>
 800e26c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e274:	dd2c      	ble.n	800e2d0 <HAL_TIM_PeriodElapsedCallback+0x1268>
 800e276:	4b12      	ldr	r3, [pc, #72]	; (800e2c0 <HAL_TIM_PeriodElapsedCallback+0x1258>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	e02c      	b.n	800e2d6 <HAL_TIM_PeriodElapsedCallback+0x126e>
 800e27c:	f3af 8000 	nop.w
 800e280:	33333334 	.word	0x33333334
 800e284:	bfc33333 	.word	0xbfc33333
 800e288:	33333334 	.word	0x33333334
 800e28c:	3fc33333 	.word	0x3fc33333
 800e290:	20000c32 	.word	0x20000c32
 800e294:	20000fa4 	.word	0x20000fa4
 800e298:	fffffc18 	.word	0xfffffc18
 800e29c:	20000b38 	.word	0x20000b38
 800e2a0:	20000ff4 	.word	0x20000ff4
 800e2a4:	20000fa8 	.word	0x20000fa8
 800e2a8:	20000c78 	.word	0x20000c78
 800e2ac:	20000b9c 	.word	0x20000b9c
 800e2b0:	43480000 	.word	0x43480000
 800e2b4:	20000c90 	.word	0x20000c90
 800e2b8:	2000019c 	.word	0x2000019c
 800e2bc:	20000b8e 	.word	0x20000b8e
 800e2c0:	20000c28 	.word	0x20000c28
 800e2c4:	20000780 	.word	0x20000780
 800e2c8:	c47a0000 	.word	0xc47a0000
 800e2cc:	447a0000 	.word	0x447a0000
 800e2d0:	4bae      	ldr	r3, [pc, #696]	; (800e58c <HAL_TIM_PeriodElapsedCallback+0x1524>)
 800e2d2:	e000      	b.n	800e2d6 <HAL_TIM_PeriodElapsedCallback+0x126e>
 800e2d4:	4bae      	ldr	r3, [pc, #696]	; (800e590 <HAL_TIM_PeriodElapsedCallback+0x1528>)
 800e2d6:	4aaf      	ldr	r2, [pc, #700]	; (800e594 <HAL_TIM_PeriodElapsedCallback+0x152c>)
 800e2d8:	6013      	str	r3, [r2, #0]
			pulse_r = min(max(pulse_r, -1000), 1000);
 800e2da:	4baf      	ldr	r3, [pc, #700]	; (800e598 <HAL_TIM_PeriodElapsedCallback+0x1530>)
 800e2dc:	edd3 7a00 	vldr	s15, [r3]
 800e2e0:	ed9f 7aae 	vldr	s14, [pc, #696]	; 800e59c <HAL_TIM_PeriodElapsedCallback+0x1534>
 800e2e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e2e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2ec:	bfcc      	ite	gt
 800e2ee:	2301      	movgt	r3, #1
 800e2f0:	2300      	movle	r3, #0
 800e2f2:	b2db      	uxtb	r3, r3
 800e2f4:	f083 0301 	eor.w	r3, r3, #1
 800e2f8:	b2db      	uxtb	r3, r3
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d111      	bne.n	800e322 <HAL_TIM_PeriodElapsedCallback+0x12ba>
 800e2fe:	4ba6      	ldr	r3, [pc, #664]	; (800e598 <HAL_TIM_PeriodElapsedCallback+0x1530>)
 800e300:	edd3 7a00 	vldr	s15, [r3]
 800e304:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 800e5a0 <HAL_TIM_PeriodElapsedCallback+0x1538>
 800e308:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e30c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e310:	bfcc      	ite	gt
 800e312:	2301      	movgt	r3, #1
 800e314:	2300      	movle	r3, #0
 800e316:	b2db      	uxtb	r3, r3
 800e318:	f083 0301 	eor.w	r3, r3, #1
 800e31c:	b2db      	uxtb	r3, r3
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d00e      	beq.n	800e340 <HAL_TIM_PeriodElapsedCallback+0x12d8>
 800e322:	4b9d      	ldr	r3, [pc, #628]	; (800e598 <HAL_TIM_PeriodElapsedCallback+0x1530>)
 800e324:	edd3 7a00 	vldr	s15, [r3]
 800e328:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 800e59c <HAL_TIM_PeriodElapsedCallback+0x1534>
 800e32c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e334:	dd02      	ble.n	800e33c <HAL_TIM_PeriodElapsedCallback+0x12d4>
 800e336:	4b98      	ldr	r3, [pc, #608]	; (800e598 <HAL_TIM_PeriodElapsedCallback+0x1530>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	e002      	b.n	800e342 <HAL_TIM_PeriodElapsedCallback+0x12da>
 800e33c:	4b93      	ldr	r3, [pc, #588]	; (800e58c <HAL_TIM_PeriodElapsedCallback+0x1524>)
 800e33e:	e000      	b.n	800e342 <HAL_TIM_PeriodElapsedCallback+0x12da>
 800e340:	4b93      	ldr	r3, [pc, #588]	; (800e590 <HAL_TIM_PeriodElapsedCallback+0x1528>)
 800e342:	4a95      	ldr	r2, [pc, #596]	; (800e598 <HAL_TIM_PeriodElapsedCallback+0x1530>)
 800e344:	6013      	str	r3, [r2, #0]

			if(pulse_l >= 0){
 800e346:	4b93      	ldr	r3, [pc, #588]	; (800e594 <HAL_TIM_PeriodElapsedCallback+0x152c>)
 800e348:	edd3 7a00 	vldr	s15, [r3]
 800e34c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e354:	db17      	blt.n	800e386 <HAL_TIM_PeriodElapsedCallback+0x131e>
				drive_dir(0, 0);
 800e356:	2100      	movs	r1, #0
 800e358:	2000      	movs	r0, #0
 800e35a:	f7f6 fd47 	bl	8004dec <drive_dir>
				ConfigOC.Pulse = pulse_l;
 800e35e:	4b8d      	ldr	r3, [pc, #564]	; (800e594 <HAL_TIM_PeriodElapsedCallback+0x152c>)
 800e360:	edd3 7a00 	vldr	s15, [r3]
 800e364:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e368:	ee17 3a90 	vmov	r3, s15
 800e36c:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim3, &ConfigOC, TIM_CHANNEL_3);
 800e36e:	f107 030c 	add.w	r3, r7, #12
 800e372:	2208      	movs	r2, #8
 800e374:	4619      	mov	r1, r3
 800e376:	488b      	ldr	r0, [pc, #556]	; (800e5a4 <HAL_TIM_PeriodElapsedCallback+0x153c>)
 800e378:	f7f5 fc1e 	bl	8003bb8 <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 800e37c:	2108      	movs	r1, #8
 800e37e:	4889      	ldr	r0, [pc, #548]	; (800e5a4 <HAL_TIM_PeriodElapsedCallback+0x153c>)
 800e380:	f7f5 f9b2 	bl	80036e8 <HAL_TIM_PWM_Start>
 800e384:	e020      	b.n	800e3c8 <HAL_TIM_PeriodElapsedCallback+0x1360>
			}
			else if(pulse_l < 0){
 800e386:	4b83      	ldr	r3, [pc, #524]	; (800e594 <HAL_TIM_PeriodElapsedCallback+0x152c>)
 800e388:	edd3 7a00 	vldr	s15, [r3]
 800e38c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e394:	d518      	bpl.n	800e3c8 <HAL_TIM_PeriodElapsedCallback+0x1360>
				drive_dir(0, 1);
 800e396:	2101      	movs	r1, #1
 800e398:	2000      	movs	r0, #0
 800e39a:	f7f6 fd27 	bl	8004dec <drive_dir>
				ConfigOC.Pulse = -pulse_l;
 800e39e:	4b7d      	ldr	r3, [pc, #500]	; (800e594 <HAL_TIM_PeriodElapsedCallback+0x152c>)
 800e3a0:	edd3 7a00 	vldr	s15, [r3]
 800e3a4:	eef1 7a67 	vneg.f32	s15, s15
 800e3a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e3ac:	ee17 3a90 	vmov	r3, s15
 800e3b0:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim3, &ConfigOC, TIM_CHANNEL_3);
 800e3b2:	f107 030c 	add.w	r3, r7, #12
 800e3b6:	2208      	movs	r2, #8
 800e3b8:	4619      	mov	r1, r3
 800e3ba:	487a      	ldr	r0, [pc, #488]	; (800e5a4 <HAL_TIM_PeriodElapsedCallback+0x153c>)
 800e3bc:	f7f5 fbfc 	bl	8003bb8 <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 800e3c0:	2108      	movs	r1, #8
 800e3c2:	4878      	ldr	r0, [pc, #480]	; (800e5a4 <HAL_TIM_PeriodElapsedCallback+0x153c>)
 800e3c4:	f7f5 f990 	bl	80036e8 <HAL_TIM_PWM_Start>
			}

			if(pulse_r >= 0){
 800e3c8:	4b73      	ldr	r3, [pc, #460]	; (800e598 <HAL_TIM_PeriodElapsedCallback+0x1530>)
 800e3ca:	edd3 7a00 	vldr	s15, [r3]
 800e3ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e3d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3d6:	db17      	blt.n	800e408 <HAL_TIM_PeriodElapsedCallback+0x13a0>
				drive_dir(1, 0);
 800e3d8:	2100      	movs	r1, #0
 800e3da:	2001      	movs	r0, #1
 800e3dc:	f7f6 fd06 	bl	8004dec <drive_dir>
				ConfigOC.Pulse = pulse_r;
 800e3e0:	4b6d      	ldr	r3, [pc, #436]	; (800e598 <HAL_TIM_PeriodElapsedCallback+0x1530>)
 800e3e2:	edd3 7a00 	vldr	s15, [r3]
 800e3e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e3ea:	ee17 3a90 	vmov	r3, s15
 800e3ee:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim12, &ConfigOC, TIM_CHANNEL_2);
 800e3f0:	f107 030c 	add.w	r3, r7, #12
 800e3f4:	2204      	movs	r2, #4
 800e3f6:	4619      	mov	r1, r3
 800e3f8:	486b      	ldr	r0, [pc, #428]	; (800e5a8 <HAL_TIM_PeriodElapsedCallback+0x1540>)
 800e3fa:	f7f5 fbdd 	bl	8003bb8 <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_2);
 800e3fe:	2104      	movs	r1, #4
 800e400:	4869      	ldr	r0, [pc, #420]	; (800e5a8 <HAL_TIM_PeriodElapsedCallback+0x1540>)
 800e402:	f7f5 f971 	bl	80036e8 <HAL_TIM_PWM_Start>
 800e406:	e029      	b.n	800e45c <HAL_TIM_PeriodElapsedCallback+0x13f4>
			}
			else if(pulse_r < 0){
 800e408:	4b63      	ldr	r3, [pc, #396]	; (800e598 <HAL_TIM_PeriodElapsedCallback+0x1530>)
 800e40a:	edd3 7a00 	vldr	s15, [r3]
 800e40e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e416:	d521      	bpl.n	800e45c <HAL_TIM_PeriodElapsedCallback+0x13f4>
				drive_dir(1, 1);
 800e418:	2101      	movs	r1, #1
 800e41a:	2001      	movs	r0, #1
 800e41c:	f7f6 fce6 	bl	8004dec <drive_dir>
				ConfigOC.Pulse = -pulse_r;
 800e420:	4b5d      	ldr	r3, [pc, #372]	; (800e598 <HAL_TIM_PeriodElapsedCallback+0x1530>)
 800e422:	edd3 7a00 	vldr	s15, [r3]
 800e426:	eef1 7a67 	vneg.f32	s15, s15
 800e42a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e42e:	ee17 3a90 	vmov	r3, s15
 800e432:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim12, &ConfigOC, TIM_CHANNEL_2);
 800e434:	f107 030c 	add.w	r3, r7, #12
 800e438:	2204      	movs	r2, #4
 800e43a:	4619      	mov	r1, r3
 800e43c:	485a      	ldr	r0, [pc, #360]	; (800e5a8 <HAL_TIM_PeriodElapsedCallback+0x1540>)
 800e43e:	f7f5 fbbb 	bl	8003bb8 <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_2);
 800e442:	2104      	movs	r1, #4
 800e444:	4858      	ldr	r0, [pc, #352]	; (800e5a8 <HAL_TIM_PeriodElapsedCallback+0x1540>)
 800e446:	f7f5 f94f 	bl	80036e8 <HAL_TIM_PWM_Start>
 800e44a:	e007      	b.n	800e45c <HAL_TIM_PeriodElapsedCallback+0x13f4>
			}
		}else{
			drive_dir(0, 2);
 800e44c:	2102      	movs	r1, #2
 800e44e:	2000      	movs	r0, #0
 800e450:	f7f6 fccc 	bl	8004dec <drive_dir>
			drive_dir(1, 2);
 800e454:	2102      	movs	r1, #2
 800e456:	2001      	movs	r0, #1
 800e458:	f7f6 fcc8 	bl	8004dec <drive_dir>
		}


		//wall check
		//----look L----
		if(ad_l > WALL_BASE_L){
 800e45c:	4b53      	ldr	r3, [pc, #332]	; (800e5ac <HAL_TIM_PeriodElapsedCallback+0x1544>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	2b8c      	cmp	r3, #140	; 0x8c
 800e462:	d905      	bls.n	800e470 <HAL_TIM_PeriodElapsedCallback+0x1408>
			HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 800e464:	2201      	movs	r2, #1
 800e466:	2104      	movs	r1, #4
 800e468:	4851      	ldr	r0, [pc, #324]	; (800e5b0 <HAL_TIM_PeriodElapsedCallback+0x1548>)
 800e46a:	f7f3 ff4b 	bl	8002304 <HAL_GPIO_WritePin>
 800e46e:	e004      	b.n	800e47a <HAL_TIM_PeriodElapsedCallback+0x1412>
		}else{
			HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 800e470:	2200      	movs	r2, #0
 800e472:	2104      	movs	r1, #4
 800e474:	484e      	ldr	r0, [pc, #312]	; (800e5b0 <HAL_TIM_PeriodElapsedCallback+0x1548>)
 800e476:	f7f3 ff45 	bl	8002304 <HAL_GPIO_WritePin>
		}
		//----look R----
		if(ad_r > WALL_BASE_R){
 800e47a:	4b4e      	ldr	r3, [pc, #312]	; (800e5b4 <HAL_TIM_PeriodElapsedCallback+0x154c>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	2b78      	cmp	r3, #120	; 0x78
 800e480:	d906      	bls.n	800e490 <HAL_TIM_PeriodElapsedCallback+0x1428>
			HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 800e482:	2201      	movs	r2, #1
 800e484:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e488:	484b      	ldr	r0, [pc, #300]	; (800e5b8 <HAL_TIM_PeriodElapsedCallback+0x1550>)
 800e48a:	f7f3 ff3b 	bl	8002304 <HAL_GPIO_WritePin>
 800e48e:	e005      	b.n	800e49c <HAL_TIM_PeriodElapsedCallback+0x1434>
		}else{
			HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 800e490:	2200      	movs	r2, #0
 800e492:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e496:	4848      	ldr	r0, [pc, #288]	; (800e5b8 <HAL_TIM_PeriodElapsedCallback+0x1550>)
 800e498:	f7f3 ff34 	bl	8002304 <HAL_GPIO_WritePin>
		}
		//----look FL----
		if(ad_fl > WALL_BASE_FL){
 800e49c:	4b47      	ldr	r3, [pc, #284]	; (800e5bc <HAL_TIM_PeriodElapsedCallback+0x1554>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	2bc8      	cmp	r3, #200	; 0xc8
 800e4a2:	d905      	bls.n	800e4b0 <HAL_TIM_PeriodElapsedCallback+0x1448>
			HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 800e4a4:	2201      	movs	r2, #1
 800e4a6:	2110      	movs	r1, #16
 800e4a8:	4841      	ldr	r0, [pc, #260]	; (800e5b0 <HAL_TIM_PeriodElapsedCallback+0x1548>)
 800e4aa:	f7f3 ff2b 	bl	8002304 <HAL_GPIO_WritePin>
 800e4ae:	e004      	b.n	800e4ba <HAL_TIM_PeriodElapsedCallback+0x1452>
		}else{
			HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	2110      	movs	r1, #16
 800e4b4:	483e      	ldr	r0, [pc, #248]	; (800e5b0 <HAL_TIM_PeriodElapsedCallback+0x1548>)
 800e4b6:	f7f3 ff25 	bl	8002304 <HAL_GPIO_WritePin>
		}
		//----look FR----
		if(ad_fr > WALL_BASE_FR){
 800e4ba:	4b41      	ldr	r3, [pc, #260]	; (800e5c0 <HAL_TIM_PeriodElapsedCallback+0x1558>)
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	2b78      	cmp	r3, #120	; 0x78
 800e4c0:	d906      	bls.n	800e4d0 <HAL_TIM_PeriodElapsedCallback+0x1468>
			HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 800e4c2:	2201      	movs	r2, #1
 800e4c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e4c8:	483e      	ldr	r0, [pc, #248]	; (800e5c4 <HAL_TIM_PeriodElapsedCallback+0x155c>)
 800e4ca:	f7f3 ff1b 	bl	8002304 <HAL_GPIO_WritePin>
 800e4ce:	e005      	b.n	800e4dc <HAL_TIM_PeriodElapsedCallback+0x1474>
		}else{
			HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e4d6:	483b      	ldr	r0, [pc, #236]	; (800e5c4 <HAL_TIM_PeriodElapsedCallback+0x155c>)
 800e4d8:	f7f3 ff14 	bl	8002304 <HAL_GPIO_WritePin>
		}


		//battery check
		if(HAL_GPIO_ReadPin(VOL_CHECK_GPIO_Port, VOL_CHECK_Pin) == GPIO_PIN_RESET) {	//2.1V以下で赤ランプ点灯=>LiPoが約7Vを下回るとランプ点灯
 800e4dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e4e0:	4835      	ldr	r0, [pc, #212]	; (800e5b8 <HAL_TIM_PeriodElapsedCallback+0x1550>)
 800e4e2:	f7f3 fef7 	bl	80022d4 <HAL_GPIO_ReadPin>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d105      	bne.n	800e4f8 <HAL_TIM_PeriodElapsedCallback+0x1490>
		   HAL_GPIO_WritePin(VAT_ALERT_GPIO_Port, VAT_ALERT_Pin, GPIO_PIN_SET);
 800e4ec:	2201      	movs	r2, #1
 800e4ee:	2108      	movs	r1, #8
 800e4f0:	482f      	ldr	r0, [pc, #188]	; (800e5b0 <HAL_TIM_PeriodElapsedCallback+0x1548>)
 800e4f2:	f7f3 ff07 	bl	8002304 <HAL_GPIO_WritePin>
 800e4f6:	e004      	b.n	800e502 <HAL_TIM_PeriodElapsedCallback+0x149a>
		} else {
		   HAL_GPIO_WritePin(VAT_ALERT_GPIO_Port, VAT_ALERT_Pin, GPIO_PIN_RESET);
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	2108      	movs	r1, #8
 800e4fc:	482c      	ldr	r0, [pc, #176]	; (800e5b0 <HAL_TIM_PeriodElapsedCallback+0x1548>)
 800e4fe:	f7f3 ff01 	bl	8002304 <HAL_GPIO_WritePin>
		}


		//fail safe
		if(degree_z >= target_degree_z+270 || degree_z <= target_degree_z-270 || dist_r > 500 || dist_l > 500){	//270度以上回転発生でFail Safe
 800e502:	4b31      	ldr	r3, [pc, #196]	; (800e5c8 <HAL_TIM_PeriodElapsedCallback+0x1560>)
 800e504:	edd3 7a00 	vldr	s15, [r3]
 800e508:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800e5cc <HAL_TIM_PeriodElapsedCallback+0x1564>
 800e50c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e510:	4b2f      	ldr	r3, [pc, #188]	; (800e5d0 <HAL_TIM_PeriodElapsedCallback+0x1568>)
 800e512:	edd3 7a00 	vldr	s15, [r3]
 800e516:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e51a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e51e:	d923      	bls.n	800e568 <HAL_TIM_PeriodElapsedCallback+0x1500>
 800e520:	4b29      	ldr	r3, [pc, #164]	; (800e5c8 <HAL_TIM_PeriodElapsedCallback+0x1560>)
 800e522:	edd3 7a00 	vldr	s15, [r3]
 800e526:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800e5cc <HAL_TIM_PeriodElapsedCallback+0x1564>
 800e52a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800e52e:	4b28      	ldr	r3, [pc, #160]	; (800e5d0 <HAL_TIM_PeriodElapsedCallback+0x1568>)
 800e530:	edd3 7a00 	vldr	s15, [r3]
 800e534:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e53c:	da14      	bge.n	800e568 <HAL_TIM_PeriodElapsedCallback+0x1500>
 800e53e:	4b25      	ldr	r3, [pc, #148]	; (800e5d4 <HAL_TIM_PeriodElapsedCallback+0x156c>)
 800e540:	edd3 7a00 	vldr	s15, [r3]
 800e544:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800e5d8 <HAL_TIM_PeriodElapsedCallback+0x1570>
 800e548:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e54c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e550:	dc0a      	bgt.n	800e568 <HAL_TIM_PeriodElapsedCallback+0x1500>
 800e552:	4b22      	ldr	r3, [pc, #136]	; (800e5dc <HAL_TIM_PeriodElapsedCallback+0x1574>)
 800e554:	edd3 7a00 	vldr	s15, [r3]
 800e558:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800e5d8 <HAL_TIM_PeriodElapsedCallback+0x1570>
 800e55c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e564:	dc00      	bgt.n	800e568 <HAL_TIM_PeriodElapsedCallback+0x1500>
			   drive_dir(1, 2);
			   full_led_write1(RED);
		   }
		}
	}
}
 800e566:	e00b      	b.n	800e580 <HAL_TIM_PeriodElapsedCallback+0x1518>
			   drive_dir(0, 2);
 800e568:	2102      	movs	r1, #2
 800e56a:	2000      	movs	r0, #0
 800e56c:	f7f6 fc3e 	bl	8004dec <drive_dir>
			   drive_dir(1, 2);
 800e570:	2102      	movs	r1, #2
 800e572:	2001      	movs	r0, #1
 800e574:	f7f6 fc3a 	bl	8004dec <drive_dir>
			   full_led_write1(RED);
 800e578:	2001      	movs	r0, #1
 800e57a:	f003 fe9d 	bl	80122b8 <full_led_write1>
			   drive_dir(0, 2);
 800e57e:	e7f3      	b.n	800e568 <HAL_TIM_PeriodElapsedCallback+0x1500>
}
 800e580:	bf00      	nop
 800e582:	3730      	adds	r7, #48	; 0x30
 800e584:	46bd      	mov	sp, r7
 800e586:	ecbd 8b02 	vpop	{d8}
 800e58a:	bdb0      	pop	{r4, r5, r7, pc}
 800e58c:	c47a0000 	.word	0xc47a0000
 800e590:	447a0000 	.word	0x447a0000
 800e594:	20000c28 	.word	0x20000c28
 800e598:	20000780 	.word	0x20000780
 800e59c:	c47a0000 	.word	0xc47a0000
 800e5a0:	447a0000 	.word	0x447a0000
 800e5a4:	20000ae4 	.word	0x20000ae4
 800e5a8:	20000fac 	.word	0x20000fac
 800e5ac:	20000b3c 	.word	0x20000b3c
 800e5b0:	40020000 	.word	0x40020000
 800e5b4:	20000fa0 	.word	0x20000fa0
 800e5b8:	40020800 	.word	0x40020800
 800e5bc:	20000d94 	.word	0x20000d94
 800e5c0:	20000c80 	.word	0x20000c80
 800e5c4:	40020400 	.word	0x40020400
 800e5c8:	20000c78 	.word	0x20000c78
 800e5cc:	43870000 	.word	0x43870000
 800e5d0:	20000b9c 	.word	0x20000b9c
 800e5d4:	20000b2c 	.word	0x20000b2c
 800e5d8:	43fa0000 	.word	0x43fa0000
 800e5dc:	20001644 	.word	0x20001644

0800e5e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b082      	sub	sp, #8
 800e5e4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800e5e6:	f7f2 fca7 	bl	8000f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800e5ea:	f000 f915 	bl	800e818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800e5ee:	f000 fc8f 	bl	800ef10 <MX_GPIO_Init>
  MX_ADC1_Init();
 800e5f2:	f000 f97b 	bl	800e8ec <MX_ADC1_Init>
  MX_TIM8_Init();
 800e5f6:	f000 fb59 	bl	800ecac <MX_TIM8_Init>
  MX_TIM5_Init();
 800e5fa:	f000 facd 	bl	800eb98 <MX_TIM5_Init>
  MX_SPI3_Init();
 800e5fe:	f000 f9c7 	bl	800e990 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800e602:	f000 fc5b 	bl	800eebc <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800e606:	f000 f9f9 	bl	800e9fc <MX_TIM3_Init>
  MX_TIM12_Init();
 800e60a:	f000 fbf5 	bl	800edf8 <MX_TIM12_Init>
  MX_TIM4_Init();
 800e60e:	f000 fa6b 	bl	800eae8 <MX_TIM4_Init>
  MX_TIM11_Init();
 800e612:	f000 fba3 	bl	800ed5c <MX_TIM11_Init>
  MX_TIM6_Init();
 800e616:	f000 fb13 	bl	800ec40 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  drive_init();
 800e61a:	f7f6 fb15 	bl	8004c48 <drive_init>
  gyro_init();
 800e61e:	f7fe fb4d 	bl	800ccbc <gyro_init>
  search_init();
 800e622:	f000 fdc5 	bl	800f1b0 <search_init>
  sensor_init();
 800e626:	f003 fd87 	bl	8012138 <sensor_init>

  printf("*** Welcome to WMMC ! ***\n");
 800e62a:	486d      	ldr	r0, [pc, #436]	; (800e7e0 <main+0x200>)
 800e62c:	f004 fc9c 	bl	8012f68 <puts>

  setbuf(stdout, NULL);
 800e630:	4b6c      	ldr	r3, [pc, #432]	; (800e7e4 <main+0x204>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	689b      	ldr	r3, [r3, #8]
 800e636:	2100      	movs	r1, #0
 800e638:	4618      	mov	r0, r3
 800e63a:	f004 fc9d 	bl	8012f78 <setbuf>
  HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_ALL);
 800e63e:	213c      	movs	r1, #60	; 0x3c
 800e640:	4869      	ldr	r0, [pc, #420]	; (800e7e8 <main+0x208>)
 800e642:	f7f5 f979 	bl	8003938 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 800e646:	213c      	movs	r1, #60	; 0x3c
 800e648:	4868      	ldr	r0, [pc, #416]	; (800e7ec <main+0x20c>)
 800e64a:	f7f5 f975 	bl	8003938 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 800e64e:	4868      	ldr	r0, [pc, #416]	; (800e7f0 <main+0x210>)
 800e650:	f7f4 fffb 	bl	800364a <HAL_TIM_Base_Start_IT>

  int mode = 0;
 800e654:	2300      	movs	r3, #0
 800e656:	607b      	str	r3, [r7, #4]
  printf("Mode : %d\n", mode);
 800e658:	6879      	ldr	r1, [r7, #4]
 800e65a:	4866      	ldr	r0, [pc, #408]	; (800e7f4 <main+0x214>)
 800e65c:	f004 fc10 	bl	8012e80 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	b2db      	uxtb	r3, r3
 800e664:	f003 0301 	and.w	r3, r3, #1
 800e668:	b2d8      	uxtb	r0, r3
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	b2db      	uxtb	r3, r3
 800e66e:	f003 0302 	and.w	r3, r3, #2
 800e672:	b2d9      	uxtb	r1, r3
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	b2db      	uxtb	r3, r3
 800e678:	f003 0304 	and.w	r3, r3, #4
 800e67c:	b2db      	uxtb	r3, r3
 800e67e:	461a      	mov	r2, r3
 800e680:	f003 fde0 	bl	8012244 <led_write>
	  if(dist_r >= 20){
 800e684:	4b5c      	ldr	r3, [pc, #368]	; (800e7f8 <main+0x218>)
 800e686:	edd3 7a00 	vldr	s15, [r3]
 800e68a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800e68e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e696:	db0f      	blt.n	800e6b8 <main+0xd8>
		  mode++;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	3301      	adds	r3, #1
 800e69c:	607b      	str	r3, [r7, #4]
		  dist_r = 0;
 800e69e:	4b56      	ldr	r3, [pc, #344]	; (800e7f8 <main+0x218>)
 800e6a0:	f04f 0200 	mov.w	r2, #0
 800e6a4:	601a      	str	r2, [r3, #0]
		  if(mode > 7){
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	2b07      	cmp	r3, #7
 800e6aa:	dd01      	ble.n	800e6b0 <main+0xd0>
			  mode = 0;
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	607b      	str	r3, [r7, #4]
		  }
		  printf("Mode : %d\n", mode);
 800e6b0:	6879      	ldr	r1, [r7, #4]
 800e6b2:	4850      	ldr	r0, [pc, #320]	; (800e7f4 <main+0x214>)
 800e6b4:	f004 fbe4 	bl	8012e80 <iprintf>
	  }
	  if(dist_r <= -20){
 800e6b8:	4b4f      	ldr	r3, [pc, #316]	; (800e7f8 <main+0x218>)
 800e6ba:	edd3 7a00 	vldr	s15, [r3]
 800e6be:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800e6c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e6c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6ca:	d80f      	bhi.n	800e6ec <main+0x10c>
		  mode--;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	3b01      	subs	r3, #1
 800e6d0:	607b      	str	r3, [r7, #4]
		  dist_r = 0;
 800e6d2:	4b49      	ldr	r3, [pc, #292]	; (800e7f8 <main+0x218>)
 800e6d4:	f04f 0200 	mov.w	r2, #0
 800e6d8:	601a      	str	r2, [r3, #0]
		  if(mode < 0){
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	da01      	bge.n	800e6e4 <main+0x104>
			  mode = 7;
 800e6e0:	2307      	movs	r3, #7
 800e6e2:	607b      	str	r3, [r7, #4]
		  }
		  printf("Mode : %d\n", mode);
 800e6e4:	6879      	ldr	r1, [r7, #4]
 800e6e6:	4843      	ldr	r0, [pc, #268]	; (800e7f4 <main+0x214>)
 800e6e8:	f004 fbca 	bl	8012e80 <iprintf>
	  }
	  if(dist_l <= -20){
 800e6ec:	4b43      	ldr	r3, [pc, #268]	; (800e7fc <main+0x21c>)
 800e6ee:	edd3 7a00 	vldr	s15, [r3]
 800e6f2:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800e6f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e6fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6fe:	d86d      	bhi.n	800e7dc <main+0x1fc>
		  dist_l = 0;
 800e700:	4b3e      	ldr	r3, [pc, #248]	; (800e7fc <main+0x21c>)
 800e702:	f04f 0200 	mov.w	r2, #0
 800e706:	601a      	str	r2, [r3, #0]
		  switch(mode){
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2b07      	cmp	r3, #7
 800e70c:	d8a8      	bhi.n	800e660 <main+0x80>
 800e70e:	a201      	add	r2, pc, #4	; (adr r2, 800e714 <main+0x134>)
 800e710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e714:	0800e735 	.word	0x0800e735
 800e718:	0800e73f 	.word	0x0800e73f
 800e71c:	0800e74b 	.word	0x0800e74b
 800e720:	0800e757 	.word	0x0800e757
 800e724:	0800e763 	.word	0x0800e763
 800e728:	0800e769 	.word	0x0800e769
 800e72c:	0800e795 	.word	0x0800e795
 800e730:	0800e7d7 	.word	0x0800e7d7

			  case 0:
				  HAL_Delay(5000);
 800e734:	f241 3088 	movw	r0, #5000	; 0x1388
 800e738:	f7f2 fc70 	bl	800101c <HAL_Delay>
				  break;
 800e73c:	e04e      	b.n	800e7dc <main+0x1fc>

			  case 1:
				  //----a超新地走行----
				  printf("Simple Run.\n");
 800e73e:	4830      	ldr	r0, [pc, #192]	; (800e800 <main+0x220>)
 800e740:	f004 fc12 	bl	8012f68 <puts>
				  //MF.FLAG.WEDGE = 1;
	//		  		  simple_run();
				  perfect_run();
 800e744:	f7fd f864 	bl	800b810 <perfect_run>
				  break;
 800e748:	e048      	b.n	800e7dc <main+0x1fc>

			  case 2:
				  //----aスラローム走行----
				  printf("slalom Run.\n");
 800e74a:	482e      	ldr	r0, [pc, #184]	; (800e804 <main+0x224>)
 800e74c:	f004 fc0c 	bl	8012f68 <puts>
				  //MF.FLAG.WEDGE = 1;
				  slalom_run();
 800e750:	f7fc fde6 	bl	800b320 <slalom_run>
				  break;
 800e754:	e042      	b.n	800e7dc <main+0x1fc>

			  case 3:
				  //----aスラローム走行&pass圧縮----
				  printf("First Run. (Slalom)\n");
 800e756:	482c      	ldr	r0, [pc, #176]	; (800e808 <main+0x228>)
 800e758:	f004 fc06 	bl	8012f68 <puts>
				  pass_test();
 800e75c:	f7fb ff12 	bl	800a584 <pass_test>
				  break;
 800e760:	e03c      	b.n	800e7dc <main+0x1fc>

			  case 4:
				  //----aテストモード選択----
				  test_select();
 800e762:	f7fb f977 	bl	8009a54 <test_select>
				  break;
 800e766:	e039      	b.n	800e7dc <main+0x1fc>

			  case 5:
				  //----sensor check----
				  printf("Sensor Check.\n");
 800e768:	4828      	ldr	r0, [pc, #160]	; (800e80c <main+0x22c>)
 800e76a:	f004 fbfd 	bl	8012f68 <puts>
				  sensor_test();
 800e76e:	f003 fe45 	bl	80123fc <sensor_test>
				  break;
 800e772:	e033      	b.n	800e7dc <main+0x1fc>

			  case 6:
				  //----pitagola sound----
				  while(ad_fl <= WALL_BASE_FL){
					  led_write(1, 1, 1);
 800e774:	2201      	movs	r2, #1
 800e776:	2101      	movs	r1, #1
 800e778:	2001      	movs	r0, #1
 800e77a:	f003 fd63 	bl	8012244 <led_write>
					  HAL_Delay(200);
 800e77e:	20c8      	movs	r0, #200	; 0xc8
 800e780:	f7f2 fc4c 	bl	800101c <HAL_Delay>
					  led_write(0, 0, 0);
 800e784:	2200      	movs	r2, #0
 800e786:	2100      	movs	r1, #0
 800e788:	2000      	movs	r0, #0
 800e78a:	f003 fd5b 	bl	8012244 <led_write>
					  HAL_Delay(200);
 800e78e:	20c8      	movs	r0, #200	; 0xc8
 800e790:	f7f2 fc44 	bl	800101c <HAL_Delay>
				  while(ad_fl <= WALL_BASE_FL){
 800e794:	4b1e      	ldr	r3, [pc, #120]	; (800e810 <main+0x230>)
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	2bc8      	cmp	r3, #200	; 0xc8
 800e79a:	d9eb      	bls.n	800e774 <main+0x194>
				  }
				  HAL_Delay(200);
 800e79c:	20c8      	movs	r0, #200	; 0xc8
 800e79e:	f7f2 fc3d 	bl	800101c <HAL_Delay>
				  }
				  HAL_Delay(2000);
				  for(int i=0; i<m_ok; i++){
					  buzzer(mario_ok[i][0], mario_ok[i][1]);
				  }
	*/				  HAL_Delay(2000);
 800e7a2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800e7a6:	f7f2 fc39 	bl	800101c <HAL_Delay>
				  for(int i=0; i<m_goal; i++){
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	603b      	str	r3, [r7, #0]
 800e7ae:	e00e      	b.n	800e7ce <main+0x1ee>
					  buzzer(mario_goal[i][0], mario_goal[i][1]);
 800e7b0:	4a18      	ldr	r2, [pc, #96]	; (800e814 <main+0x234>)
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e7b8:	4a16      	ldr	r2, [pc, #88]	; (800e814 <main+0x234>)
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	00db      	lsls	r3, r3, #3
 800e7be:	4413      	add	r3, r2
 800e7c0:	685b      	ldr	r3, [r3, #4]
 800e7c2:	4619      	mov	r1, r3
 800e7c4:	f000 fc84 	bl	800f0d0 <buzzer>
				  for(int i=0; i<m_goal; i++){
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	3301      	adds	r3, #1
 800e7cc:	603b      	str	r3, [r7, #0]
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	2b0e      	cmp	r3, #14
 800e7d2:	dded      	ble.n	800e7b0 <main+0x1d0>
				  }
				  break;
 800e7d4:	e002      	b.n	800e7dc <main+0x1fc>
				  //MF.FLAG.WEDGE = 1;
	/*		  		  for(int i=0; i<m_select; i++){
					  buzzer(mario_select[i][0], mario_select[i][1]);
				  }
	*///		  		  perfect_run();
				  perfect_slalom();
 800e7d6:	f7fd faed 	bl	800bdb4 <perfect_slalom>
				  break;
 800e7da:	bf00      	nop
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800e7dc:	e740      	b.n	800e660 <main+0x80>
 800e7de:	bf00      	nop
 800e7e0:	0801449c 	.word	0x0801449c
 800e7e4:	20000084 	.word	0x20000084
 800e7e8:	20000784 	.word	0x20000784
 800e7ec:	200002cc 	.word	0x200002cc
 800e7f0:	20000c34 	.word	0x20000c34
 800e7f4:	080144b8 	.word	0x080144b8
 800e7f8:	20000b2c 	.word	0x20000b2c
 800e7fc:	20001644 	.word	0x20001644
 800e800:	080144c4 	.word	0x080144c4
 800e804:	080144d0 	.word	0x080144d0
 800e808:	080144dc 	.word	0x080144dc
 800e80c:	080144f0 	.word	0x080144f0
 800e810:	20000d94 	.word	0x20000d94
 800e814:	20000008 	.word	0x20000008

0800e818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b094      	sub	sp, #80	; 0x50
 800e81c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800e81e:	f107 0320 	add.w	r3, r7, #32
 800e822:	2230      	movs	r2, #48	; 0x30
 800e824:	2100      	movs	r1, #0
 800e826:	4618      	mov	r0, r3
 800e828:	f004 fb22 	bl	8012e70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800e82c:	f107 030c 	add.w	r3, r7, #12
 800e830:	2200      	movs	r2, #0
 800e832:	601a      	str	r2, [r3, #0]
 800e834:	605a      	str	r2, [r3, #4]
 800e836:	609a      	str	r2, [r3, #8]
 800e838:	60da      	str	r2, [r3, #12]
 800e83a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800e83c:	2300      	movs	r3, #0
 800e83e:	60bb      	str	r3, [r7, #8]
 800e840:	4b28      	ldr	r3, [pc, #160]	; (800e8e4 <SystemClock_Config+0xcc>)
 800e842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e844:	4a27      	ldr	r2, [pc, #156]	; (800e8e4 <SystemClock_Config+0xcc>)
 800e846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e84a:	6413      	str	r3, [r2, #64]	; 0x40
 800e84c:	4b25      	ldr	r3, [pc, #148]	; (800e8e4 <SystemClock_Config+0xcc>)
 800e84e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e854:	60bb      	str	r3, [r7, #8]
 800e856:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800e858:	2300      	movs	r3, #0
 800e85a:	607b      	str	r3, [r7, #4]
 800e85c:	4b22      	ldr	r3, [pc, #136]	; (800e8e8 <SystemClock_Config+0xd0>)
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	4a21      	ldr	r2, [pc, #132]	; (800e8e8 <SystemClock_Config+0xd0>)
 800e862:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e866:	6013      	str	r3, [r2, #0]
 800e868:	4b1f      	ldr	r3, [pc, #124]	; (800e8e8 <SystemClock_Config+0xd0>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e870:	607b      	str	r3, [r7, #4]
 800e872:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800e874:	2302      	movs	r3, #2
 800e876:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800e878:	2301      	movs	r3, #1
 800e87a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800e87c:	2310      	movs	r3, #16
 800e87e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e880:	2302      	movs	r3, #2
 800e882:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800e884:	2300      	movs	r3, #0
 800e886:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800e888:	2308      	movs	r3, #8
 800e88a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800e88c:	23a8      	movs	r3, #168	; 0xa8
 800e88e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800e890:	2302      	movs	r3, #2
 800e892:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800e894:	2304      	movs	r3, #4
 800e896:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e898:	f107 0320 	add.w	r3, r7, #32
 800e89c:	4618      	mov	r0, r3
 800e89e:	f7f3 fd4b 	bl	8002338 <HAL_RCC_OscConfig>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d001      	beq.n	800e8ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 800e8a8:	f000 fc7b 	bl	800f1a2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800e8ac:	230f      	movs	r3, #15
 800e8ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800e8b0:	2302      	movs	r3, #2
 800e8b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800e8b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800e8bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800e8be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e8c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800e8c4:	f107 030c 	add.w	r3, r7, #12
 800e8c8:	2105      	movs	r1, #5
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	f7f3 ff76 	bl	80027bc <HAL_RCC_ClockConfig>
 800e8d0:	4603      	mov	r3, r0
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d001      	beq.n	800e8da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800e8d6:	f000 fc64 	bl	800f1a2 <Error_Handler>
  }
}
 800e8da:	bf00      	nop
 800e8dc:	3750      	adds	r7, #80	; 0x50
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}
 800e8e2:	bf00      	nop
 800e8e4:	40023800 	.word	0x40023800
 800e8e8:	40007000 	.word	0x40007000

0800e8ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b084      	sub	sp, #16
 800e8f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800e8f2:	463b      	mov	r3, r7
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	601a      	str	r2, [r3, #0]
 800e8f8:	605a      	str	r2, [r3, #4]
 800e8fa:	609a      	str	r2, [r3, #8]
 800e8fc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800e8fe:	4b21      	ldr	r3, [pc, #132]	; (800e984 <MX_ADC1_Init+0x98>)
 800e900:	4a21      	ldr	r2, [pc, #132]	; (800e988 <MX_ADC1_Init+0x9c>)
 800e902:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800e904:	4b1f      	ldr	r3, [pc, #124]	; (800e984 <MX_ADC1_Init+0x98>)
 800e906:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800e90a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800e90c:	4b1d      	ldr	r3, [pc, #116]	; (800e984 <MX_ADC1_Init+0x98>)
 800e90e:	2200      	movs	r2, #0
 800e910:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800e912:	4b1c      	ldr	r3, [pc, #112]	; (800e984 <MX_ADC1_Init+0x98>)
 800e914:	2200      	movs	r2, #0
 800e916:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800e918:	4b1a      	ldr	r3, [pc, #104]	; (800e984 <MX_ADC1_Init+0x98>)
 800e91a:	2200      	movs	r2, #0
 800e91c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800e91e:	4b19      	ldr	r3, [pc, #100]	; (800e984 <MX_ADC1_Init+0x98>)
 800e920:	2200      	movs	r2, #0
 800e922:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800e926:	4b17      	ldr	r3, [pc, #92]	; (800e984 <MX_ADC1_Init+0x98>)
 800e928:	2200      	movs	r2, #0
 800e92a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800e92c:	4b15      	ldr	r3, [pc, #84]	; (800e984 <MX_ADC1_Init+0x98>)
 800e92e:	4a17      	ldr	r2, [pc, #92]	; (800e98c <MX_ADC1_Init+0xa0>)
 800e930:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e932:	4b14      	ldr	r3, [pc, #80]	; (800e984 <MX_ADC1_Init+0x98>)
 800e934:	2200      	movs	r2, #0
 800e936:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800e938:	4b12      	ldr	r3, [pc, #72]	; (800e984 <MX_ADC1_Init+0x98>)
 800e93a:	2201      	movs	r2, #1
 800e93c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800e93e:	4b11      	ldr	r3, [pc, #68]	; (800e984 <MX_ADC1_Init+0x98>)
 800e940:	2200      	movs	r2, #0
 800e942:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e946:	4b0f      	ldr	r3, [pc, #60]	; (800e984 <MX_ADC1_Init+0x98>)
 800e948:	2201      	movs	r2, #1
 800e94a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800e94c:	480d      	ldr	r0, [pc, #52]	; (800e984 <MX_ADC1_Init+0x98>)
 800e94e:	f7f2 fb87 	bl	8001060 <HAL_ADC_Init>
 800e952:	4603      	mov	r3, r0
 800e954:	2b00      	cmp	r3, #0
 800e956:	d001      	beq.n	800e95c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800e958:	f000 fc23 	bl	800f1a2 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800e95c:	230a      	movs	r3, #10
 800e95e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800e960:	2301      	movs	r3, #1
 800e962:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800e964:	2300      	movs	r3, #0
 800e966:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e968:	463b      	mov	r3, r7
 800e96a:	4619      	mov	r1, r3
 800e96c:	4805      	ldr	r0, [pc, #20]	; (800e984 <MX_ADC1_Init+0x98>)
 800e96e:	f7f2 fd13 	bl	8001398 <HAL_ADC_ConfigChannel>
 800e972:	4603      	mov	r3, r0
 800e974:	2b00      	cmp	r3, #0
 800e976:	d001      	beq.n	800e97c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800e978:	f000 fc13 	bl	800f1a2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800e97c:	bf00      	nop
 800e97e:	3710      	adds	r7, #16
 800e980:	46bd      	mov	sp, r7
 800e982:	bd80      	pop	{r7, pc}
 800e984:	20000b40 	.word	0x20000b40
 800e988:	40012000 	.word	0x40012000
 800e98c:	0f000001 	.word	0x0f000001

0800e990 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800e994:	4b17      	ldr	r3, [pc, #92]	; (800e9f4 <MX_SPI3_Init+0x64>)
 800e996:	4a18      	ldr	r2, [pc, #96]	; (800e9f8 <MX_SPI3_Init+0x68>)
 800e998:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800e99a:	4b16      	ldr	r3, [pc, #88]	; (800e9f4 <MX_SPI3_Init+0x64>)
 800e99c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800e9a0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800e9a2:	4b14      	ldr	r3, [pc, #80]	; (800e9f4 <MX_SPI3_Init+0x64>)
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800e9a8:	4b12      	ldr	r3, [pc, #72]	; (800e9f4 <MX_SPI3_Init+0x64>)
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800e9ae:	4b11      	ldr	r3, [pc, #68]	; (800e9f4 <MX_SPI3_Init+0x64>)
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800e9b4:	4b0f      	ldr	r3, [pc, #60]	; (800e9f4 <MX_SPI3_Init+0x64>)
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800e9ba:	4b0e      	ldr	r3, [pc, #56]	; (800e9f4 <MX_SPI3_Init+0x64>)
 800e9bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e9c0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800e9c2:	4b0c      	ldr	r3, [pc, #48]	; (800e9f4 <MX_SPI3_Init+0x64>)
 800e9c4:	2218      	movs	r2, #24
 800e9c6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800e9c8:	4b0a      	ldr	r3, [pc, #40]	; (800e9f4 <MX_SPI3_Init+0x64>)
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800e9ce:	4b09      	ldr	r3, [pc, #36]	; (800e9f4 <MX_SPI3_Init+0x64>)
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e9d4:	4b07      	ldr	r3, [pc, #28]	; (800e9f4 <MX_SPI3_Init+0x64>)
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800e9da:	4b06      	ldr	r3, [pc, #24]	; (800e9f4 <MX_SPI3_Init+0x64>)
 800e9dc:	220a      	movs	r2, #10
 800e9de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800e9e0:	4804      	ldr	r0, [pc, #16]	; (800e9f4 <MX_SPI3_Init+0x64>)
 800e9e2:	f7f4 f8b3 	bl	8002b4c <HAL_SPI_Init>
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d001      	beq.n	800e9f0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800e9ec:	f000 fbd9 	bl	800f1a2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800e9f0:	bf00      	nop
 800e9f2:	bd80      	pop	{r7, pc}
 800e9f4:	20000144 	.word	0x20000144
 800e9f8:	40003c00 	.word	0x40003c00

0800e9fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b08e      	sub	sp, #56	; 0x38
 800ea00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ea02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ea06:	2200      	movs	r2, #0
 800ea08:	601a      	str	r2, [r3, #0]
 800ea0a:	605a      	str	r2, [r3, #4]
 800ea0c:	609a      	str	r2, [r3, #8]
 800ea0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ea10:	f107 0320 	add.w	r3, r7, #32
 800ea14:	2200      	movs	r2, #0
 800ea16:	601a      	str	r2, [r3, #0]
 800ea18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ea1a:	1d3b      	adds	r3, r7, #4
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	601a      	str	r2, [r3, #0]
 800ea20:	605a      	str	r2, [r3, #4]
 800ea22:	609a      	str	r2, [r3, #8]
 800ea24:	60da      	str	r2, [r3, #12]
 800ea26:	611a      	str	r2, [r3, #16]
 800ea28:	615a      	str	r2, [r3, #20]
 800ea2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800ea2c:	4b2c      	ldr	r3, [pc, #176]	; (800eae0 <MX_TIM3_Init+0xe4>)
 800ea2e:	4a2d      	ldr	r2, [pc, #180]	; (800eae4 <MX_TIM3_Init+0xe8>)
 800ea30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800ea32:	4b2b      	ldr	r3, [pc, #172]	; (800eae0 <MX_TIM3_Init+0xe4>)
 800ea34:	2200      	movs	r2, #0
 800ea36:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ea38:	4b29      	ldr	r3, [pc, #164]	; (800eae0 <MX_TIM3_Init+0xe4>)
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800ea3e:	4b28      	ldr	r3, [pc, #160]	; (800eae0 <MX_TIM3_Init+0xe4>)
 800ea40:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ea44:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ea46:	4b26      	ldr	r3, [pc, #152]	; (800eae0 <MX_TIM3_Init+0xe4>)
 800ea48:	2200      	movs	r2, #0
 800ea4a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ea4c:	4b24      	ldr	r3, [pc, #144]	; (800eae0 <MX_TIM3_Init+0xe4>)
 800ea4e:	2200      	movs	r2, #0
 800ea50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800ea52:	4823      	ldr	r0, [pc, #140]	; (800eae0 <MX_TIM3_Init+0xe4>)
 800ea54:	f7f4 fdce 	bl	80035f4 <HAL_TIM_Base_Init>
 800ea58:	4603      	mov	r3, r0
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d001      	beq.n	800ea62 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800ea5e:	f000 fba0 	bl	800f1a2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ea62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ea66:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800ea68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ea6c:	4619      	mov	r1, r3
 800ea6e:	481c      	ldr	r0, [pc, #112]	; (800eae0 <MX_TIM3_Init+0xe4>)
 800ea70:	f7f5 f968 	bl	8003d44 <HAL_TIM_ConfigClockSource>
 800ea74:	4603      	mov	r3, r0
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d001      	beq.n	800ea7e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800ea7a:	f000 fb92 	bl	800f1a2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800ea7e:	4818      	ldr	r0, [pc, #96]	; (800eae0 <MX_TIM3_Init+0xe4>)
 800ea80:	f7f4 fe07 	bl	8003692 <HAL_TIM_PWM_Init>
 800ea84:	4603      	mov	r3, r0
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d001      	beq.n	800ea8e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800ea8a:	f000 fb8a 	bl	800f1a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ea8e:	2300      	movs	r3, #0
 800ea90:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ea92:	2300      	movs	r3, #0
 800ea94:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800ea96:	f107 0320 	add.w	r3, r7, #32
 800ea9a:	4619      	mov	r1, r3
 800ea9c:	4810      	ldr	r0, [pc, #64]	; (800eae0 <MX_TIM3_Init+0xe4>)
 800ea9e:	f7f5 fd40 	bl	8004522 <HAL_TIMEx_MasterConfigSynchronization>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d001      	beq.n	800eaac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800eaa8:	f000 fb7b 	bl	800f1a2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800eaac:	2360      	movs	r3, #96	; 0x60
 800eaae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800eab0:	2300      	movs	r3, #0
 800eab2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800eab4:	2300      	movs	r3, #0
 800eab6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800eab8:	2300      	movs	r3, #0
 800eaba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800eabc:	1d3b      	adds	r3, r7, #4
 800eabe:	2208      	movs	r2, #8
 800eac0:	4619      	mov	r1, r3
 800eac2:	4807      	ldr	r0, [pc, #28]	; (800eae0 <MX_TIM3_Init+0xe4>)
 800eac4:	f7f5 f878 	bl	8003bb8 <HAL_TIM_PWM_ConfigChannel>
 800eac8:	4603      	mov	r3, r0
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d001      	beq.n	800ead2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800eace:	f000 fb68 	bl	800f1a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800ead2:	4803      	ldr	r0, [pc, #12]	; (800eae0 <MX_TIM3_Init+0xe4>)
 800ead4:	f003 ff7a 	bl	80129cc <HAL_TIM_MspPostInit>

}
 800ead8:	bf00      	nop
 800eada:	3738      	adds	r7, #56	; 0x38
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}
 800eae0:	20000ae4 	.word	0x20000ae4
 800eae4:	40000400 	.word	0x40000400

0800eae8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b08a      	sub	sp, #40	; 0x28
 800eaec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800eaee:	f107 0320 	add.w	r3, r7, #32
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	601a      	str	r2, [r3, #0]
 800eaf6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800eaf8:	1d3b      	adds	r3, r7, #4
 800eafa:	2200      	movs	r2, #0
 800eafc:	601a      	str	r2, [r3, #0]
 800eafe:	605a      	str	r2, [r3, #4]
 800eb00:	609a      	str	r2, [r3, #8]
 800eb02:	60da      	str	r2, [r3, #12]
 800eb04:	611a      	str	r2, [r3, #16]
 800eb06:	615a      	str	r2, [r3, #20]
 800eb08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800eb0a:	4b21      	ldr	r3, [pc, #132]	; (800eb90 <MX_TIM4_Init+0xa8>)
 800eb0c:	4a21      	ldr	r2, [pc, #132]	; (800eb94 <MX_TIM4_Init+0xac>)
 800eb0e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800eb10:	4b1f      	ldr	r3, [pc, #124]	; (800eb90 <MX_TIM4_Init+0xa8>)
 800eb12:	2200      	movs	r2, #0
 800eb14:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800eb16:	4b1e      	ldr	r3, [pc, #120]	; (800eb90 <MX_TIM4_Init+0xa8>)
 800eb18:	2200      	movs	r2, #0
 800eb1a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 800eb1c:	4b1c      	ldr	r3, [pc, #112]	; (800eb90 <MX_TIM4_Init+0xa8>)
 800eb1e:	2200      	movs	r2, #0
 800eb20:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800eb22:	4b1b      	ldr	r3, [pc, #108]	; (800eb90 <MX_TIM4_Init+0xa8>)
 800eb24:	2200      	movs	r2, #0
 800eb26:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800eb28:	4b19      	ldr	r3, [pc, #100]	; (800eb90 <MX_TIM4_Init+0xa8>)
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800eb2e:	4818      	ldr	r0, [pc, #96]	; (800eb90 <MX_TIM4_Init+0xa8>)
 800eb30:	f7f4 fdaf 	bl	8003692 <HAL_TIM_PWM_Init>
 800eb34:	4603      	mov	r3, r0
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d001      	beq.n	800eb3e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800eb3a:	f000 fb32 	bl	800f1a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800eb3e:	2300      	movs	r3, #0
 800eb40:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800eb42:	2300      	movs	r3, #0
 800eb44:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800eb46:	f107 0320 	add.w	r3, r7, #32
 800eb4a:	4619      	mov	r1, r3
 800eb4c:	4810      	ldr	r0, [pc, #64]	; (800eb90 <MX_TIM4_Init+0xa8>)
 800eb4e:	f7f5 fce8 	bl	8004522 <HAL_TIMEx_MasterConfigSynchronization>
 800eb52:	4603      	mov	r3, r0
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d001      	beq.n	800eb5c <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 800eb58:	f000 fb23 	bl	800f1a2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800eb5c:	2360      	movs	r3, #96	; 0x60
 800eb5e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800eb60:	2300      	movs	r3, #0
 800eb62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800eb64:	2300      	movs	r3, #0
 800eb66:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800eb68:	2300      	movs	r3, #0
 800eb6a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800eb6c:	1d3b      	adds	r3, r7, #4
 800eb6e:	2208      	movs	r2, #8
 800eb70:	4619      	mov	r1, r3
 800eb72:	4807      	ldr	r0, [pc, #28]	; (800eb90 <MX_TIM4_Init+0xa8>)
 800eb74:	f7f5 f820 	bl	8003bb8 <HAL_TIM_PWM_ConfigChannel>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d001      	beq.n	800eb82 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800eb7e:	f000 fb10 	bl	800f1a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800eb82:	4803      	ldr	r0, [pc, #12]	; (800eb90 <MX_TIM4_Init+0xa8>)
 800eb84:	f003 ff22 	bl	80129cc <HAL_TIM_MspPostInit>

}
 800eb88:	bf00      	nop
 800eb8a:	3728      	adds	r7, #40	; 0x28
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bd80      	pop	{r7, pc}
 800eb90:	2000030c 	.word	0x2000030c
 800eb94:	40000800 	.word	0x40000800

0800eb98 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b08c      	sub	sp, #48	; 0x30
 800eb9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800eb9e:	f107 030c 	add.w	r3, r7, #12
 800eba2:	2224      	movs	r2, #36	; 0x24
 800eba4:	2100      	movs	r1, #0
 800eba6:	4618      	mov	r0, r3
 800eba8:	f004 f962 	bl	8012e70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ebac:	1d3b      	adds	r3, r7, #4
 800ebae:	2200      	movs	r2, #0
 800ebb0:	601a      	str	r2, [r3, #0]
 800ebb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800ebb4:	4b20      	ldr	r3, [pc, #128]	; (800ec38 <MX_TIM5_Init+0xa0>)
 800ebb6:	4a21      	ldr	r2, [pc, #132]	; (800ec3c <MX_TIM5_Init+0xa4>)
 800ebb8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800ebba:	4b1f      	ldr	r3, [pc, #124]	; (800ec38 <MX_TIM5_Init+0xa0>)
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ebc0:	4b1d      	ldr	r3, [pc, #116]	; (800ec38 <MX_TIM5_Init+0xa0>)
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535-1;
 800ebc6:	4b1c      	ldr	r3, [pc, #112]	; (800ec38 <MX_TIM5_Init+0xa0>)
 800ebc8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ebcc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ebce:	4b1a      	ldr	r3, [pc, #104]	; (800ec38 <MX_TIM5_Init+0xa0>)
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ebd4:	4b18      	ldr	r3, [pc, #96]	; (800ec38 <MX_TIM5_Init+0xa0>)
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800ebda:	2303      	movs	r3, #3
 800ebdc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800ebe2:	2301      	movs	r3, #1
 800ebe4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800ebea:	2300      	movs	r3, #0
 800ebec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800ebee:	2300      	movs	r3, #0
 800ebf0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800ebf2:	2301      	movs	r3, #1
 800ebf4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800ebfe:	f107 030c 	add.w	r3, r7, #12
 800ec02:	4619      	mov	r1, r3
 800ec04:	480c      	ldr	r0, [pc, #48]	; (800ec38 <MX_TIM5_Init+0xa0>)
 800ec06:	f7f4 fe05 	bl	8003814 <HAL_TIM_Encoder_Init>
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d001      	beq.n	800ec14 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 800ec10:	f000 fac7 	bl	800f1a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ec14:	2300      	movs	r3, #0
 800ec16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ec18:	2300      	movs	r3, #0
 800ec1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800ec1c:	1d3b      	adds	r3, r7, #4
 800ec1e:	4619      	mov	r1, r3
 800ec20:	4805      	ldr	r0, [pc, #20]	; (800ec38 <MX_TIM5_Init+0xa0>)
 800ec22:	f7f5 fc7e 	bl	8004522 <HAL_TIMEx_MasterConfigSynchronization>
 800ec26:	4603      	mov	r3, r0
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d001      	beq.n	800ec30 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 800ec2c:	f000 fab9 	bl	800f1a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800ec30:	bf00      	nop
 800ec32:	3730      	adds	r7, #48	; 0x30
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}
 800ec38:	20000784 	.word	0x20000784
 800ec3c:	40000c00 	.word	0x40000c00

0800ec40 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b082      	sub	sp, #8
 800ec44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ec46:	463b      	mov	r3, r7
 800ec48:	2200      	movs	r2, #0
 800ec4a:	601a      	str	r2, [r3, #0]
 800ec4c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800ec4e:	4b15      	ldr	r3, [pc, #84]	; (800eca4 <MX_TIM6_Init+0x64>)
 800ec50:	4a15      	ldr	r2, [pc, #84]	; (800eca8 <MX_TIM6_Init+0x68>)
 800ec52:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 800ec54:	4b13      	ldr	r3, [pc, #76]	; (800eca4 <MX_TIM6_Init+0x64>)
 800ec56:	2253      	movs	r2, #83	; 0x53
 800ec58:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ec5a:	4b12      	ldr	r3, [pc, #72]	; (800eca4 <MX_TIM6_Init+0x64>)
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800ec60:	4b10      	ldr	r3, [pc, #64]	; (800eca4 <MX_TIM6_Init+0x64>)
 800ec62:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ec66:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ec68:	4b0e      	ldr	r3, [pc, #56]	; (800eca4 <MX_TIM6_Init+0x64>)
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800ec6e:	480d      	ldr	r0, [pc, #52]	; (800eca4 <MX_TIM6_Init+0x64>)
 800ec70:	f7f4 fcc0 	bl	80035f4 <HAL_TIM_Base_Init>
 800ec74:	4603      	mov	r3, r0
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d001      	beq.n	800ec7e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800ec7a:	f000 fa92 	bl	800f1a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ec82:	2300      	movs	r3, #0
 800ec84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800ec86:	463b      	mov	r3, r7
 800ec88:	4619      	mov	r1, r3
 800ec8a:	4806      	ldr	r0, [pc, #24]	; (800eca4 <MX_TIM6_Init+0x64>)
 800ec8c:	f7f5 fc49 	bl	8004522 <HAL_TIMEx_MasterConfigSynchronization>
 800ec90:	4603      	mov	r3, r0
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d001      	beq.n	800ec9a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800ec96:	f000 fa84 	bl	800f1a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800ec9a:	bf00      	nop
 800ec9c:	3708      	adds	r7, #8
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop
 800eca4:	20000c34 	.word	0x20000c34
 800eca8:	40001000 	.word	0x40001000

0800ecac <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b08c      	sub	sp, #48	; 0x30
 800ecb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800ecb2:	f107 030c 	add.w	r3, r7, #12
 800ecb6:	2224      	movs	r2, #36	; 0x24
 800ecb8:	2100      	movs	r1, #0
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f004 f8d8 	bl	8012e70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ecc0:	1d3b      	adds	r3, r7, #4
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	601a      	str	r2, [r3, #0]
 800ecc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800ecc8:	4b22      	ldr	r3, [pc, #136]	; (800ed54 <MX_TIM8_Init+0xa8>)
 800ecca:	4a23      	ldr	r2, [pc, #140]	; (800ed58 <MX_TIM8_Init+0xac>)
 800eccc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800ecce:	4b21      	ldr	r3, [pc, #132]	; (800ed54 <MX_TIM8_Init+0xa8>)
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ecd4:	4b1f      	ldr	r3, [pc, #124]	; (800ed54 <MX_TIM8_Init+0xa8>)
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535-1;
 800ecda:	4b1e      	ldr	r3, [pc, #120]	; (800ed54 <MX_TIM8_Init+0xa8>)
 800ecdc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ece0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ece2:	4b1c      	ldr	r3, [pc, #112]	; (800ed54 <MX_TIM8_Init+0xa8>)
 800ece4:	2200      	movs	r2, #0
 800ece6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800ece8:	4b1a      	ldr	r3, [pc, #104]	; (800ed54 <MX_TIM8_Init+0xa8>)
 800ecea:	2200      	movs	r2, #0
 800ecec:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ecee:	4b19      	ldr	r3, [pc, #100]	; (800ed54 <MX_TIM8_Init+0xa8>)
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800ecf4:	2303      	movs	r3, #3
 800ecf6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800ed00:	2300      	movs	r3, #0
 800ed02:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800ed04:	2300      	movs	r3, #0
 800ed06:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800ed08:	2300      	movs	r3, #0
 800ed0a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800ed0c:	2301      	movs	r3, #1
 800ed0e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800ed10:	2300      	movs	r3, #0
 800ed12:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800ed14:	2300      	movs	r3, #0
 800ed16:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800ed18:	f107 030c 	add.w	r3, r7, #12
 800ed1c:	4619      	mov	r1, r3
 800ed1e:	480d      	ldr	r0, [pc, #52]	; (800ed54 <MX_TIM8_Init+0xa8>)
 800ed20:	f7f4 fd78 	bl	8003814 <HAL_TIM_Encoder_Init>
 800ed24:	4603      	mov	r3, r0
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d001      	beq.n	800ed2e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800ed2a:	f000 fa3a 	bl	800f1a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ed2e:	2300      	movs	r3, #0
 800ed30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ed32:	2300      	movs	r3, #0
 800ed34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800ed36:	1d3b      	adds	r3, r7, #4
 800ed38:	4619      	mov	r1, r3
 800ed3a:	4806      	ldr	r0, [pc, #24]	; (800ed54 <MX_TIM8_Init+0xa8>)
 800ed3c:	f7f5 fbf1 	bl	8004522 <HAL_TIMEx_MasterConfigSynchronization>
 800ed40:	4603      	mov	r3, r0
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d001      	beq.n	800ed4a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800ed46:	f000 fa2c 	bl	800f1a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800ed4a:	bf00      	nop
 800ed4c:	3730      	adds	r7, #48	; 0x30
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}
 800ed52:	bf00      	nop
 800ed54:	200002cc 	.word	0x200002cc
 800ed58:	40010400 	.word	0x40010400

0800ed5c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b088      	sub	sp, #32
 800ed60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800ed62:	1d3b      	adds	r3, r7, #4
 800ed64:	2200      	movs	r2, #0
 800ed66:	601a      	str	r2, [r3, #0]
 800ed68:	605a      	str	r2, [r3, #4]
 800ed6a:	609a      	str	r2, [r3, #8]
 800ed6c:	60da      	str	r2, [r3, #12]
 800ed6e:	611a      	str	r2, [r3, #16]
 800ed70:	615a      	str	r2, [r3, #20]
 800ed72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800ed74:	4b1e      	ldr	r3, [pc, #120]	; (800edf0 <MX_TIM11_Init+0x94>)
 800ed76:	4a1f      	ldr	r2, [pc, #124]	; (800edf4 <MX_TIM11_Init+0x98>)
 800ed78:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800ed7a:	4b1d      	ldr	r3, [pc, #116]	; (800edf0 <MX_TIM11_Init+0x94>)
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ed80:	4b1b      	ldr	r3, [pc, #108]	; (800edf0 <MX_TIM11_Init+0x94>)
 800ed82:	2200      	movs	r2, #0
 800ed84:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 800ed86:	4b1a      	ldr	r3, [pc, #104]	; (800edf0 <MX_TIM11_Init+0x94>)
 800ed88:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ed8c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ed8e:	4b18      	ldr	r3, [pc, #96]	; (800edf0 <MX_TIM11_Init+0x94>)
 800ed90:	2200      	movs	r2, #0
 800ed92:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ed94:	4b16      	ldr	r3, [pc, #88]	; (800edf0 <MX_TIM11_Init+0x94>)
 800ed96:	2200      	movs	r2, #0
 800ed98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800ed9a:	4815      	ldr	r0, [pc, #84]	; (800edf0 <MX_TIM11_Init+0x94>)
 800ed9c:	f7f4 fc2a 	bl	80035f4 <HAL_TIM_Base_Init>
 800eda0:	4603      	mov	r3, r0
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d001      	beq.n	800edaa <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800eda6:	f000 f9fc 	bl	800f1a2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800edaa:	4811      	ldr	r0, [pc, #68]	; (800edf0 <MX_TIM11_Init+0x94>)
 800edac:	f7f4 fc71 	bl	8003692 <HAL_TIM_PWM_Init>
 800edb0:	4603      	mov	r3, r0
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d001      	beq.n	800edba <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800edb6:	f000 f9f4 	bl	800f1a2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800edba:	2360      	movs	r3, #96	; 0x60
 800edbc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800edbe:	2300      	movs	r3, #0
 800edc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800edc2:	2300      	movs	r3, #0
 800edc4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800edc6:	2300      	movs	r3, #0
 800edc8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800edca:	1d3b      	adds	r3, r7, #4
 800edcc:	2200      	movs	r2, #0
 800edce:	4619      	mov	r1, r3
 800edd0:	4807      	ldr	r0, [pc, #28]	; (800edf0 <MX_TIM11_Init+0x94>)
 800edd2:	f7f4 fef1 	bl	8003bb8 <HAL_TIM_PWM_ConfigChannel>
 800edd6:	4603      	mov	r3, r0
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d001      	beq.n	800ede0 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 800eddc:	f000 f9e1 	bl	800f1a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 800ede0:	4803      	ldr	r0, [pc, #12]	; (800edf0 <MX_TIM11_Init+0x94>)
 800ede2:	f003 fdf3 	bl	80129cc <HAL_TIM_MspPostInit>

}
 800ede6:	bf00      	nop
 800ede8:	3720      	adds	r7, #32
 800edea:	46bd      	mov	sp, r7
 800edec:	bd80      	pop	{r7, pc}
 800edee:	bf00      	nop
 800edf0:	20000be8 	.word	0x20000be8
 800edf4:	40014800 	.word	0x40014800

0800edf8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b08c      	sub	sp, #48	; 0x30
 800edfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800edfe:	f107 0320 	add.w	r3, r7, #32
 800ee02:	2200      	movs	r2, #0
 800ee04:	601a      	str	r2, [r3, #0]
 800ee06:	605a      	str	r2, [r3, #4]
 800ee08:	609a      	str	r2, [r3, #8]
 800ee0a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ee0c:	1d3b      	adds	r3, r7, #4
 800ee0e:	2200      	movs	r2, #0
 800ee10:	601a      	str	r2, [r3, #0]
 800ee12:	605a      	str	r2, [r3, #4]
 800ee14:	609a      	str	r2, [r3, #8]
 800ee16:	60da      	str	r2, [r3, #12]
 800ee18:	611a      	str	r2, [r3, #16]
 800ee1a:	615a      	str	r2, [r3, #20]
 800ee1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800ee1e:	4b25      	ldr	r3, [pc, #148]	; (800eeb4 <MX_TIM12_Init+0xbc>)
 800ee20:	4a25      	ldr	r2, [pc, #148]	; (800eeb8 <MX_TIM12_Init+0xc0>)
 800ee22:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800ee24:	4b23      	ldr	r3, [pc, #140]	; (800eeb4 <MX_TIM12_Init+0xbc>)
 800ee26:	2200      	movs	r2, #0
 800ee28:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ee2a:	4b22      	ldr	r3, [pc, #136]	; (800eeb4 <MX_TIM12_Init+0xbc>)
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 800ee30:	4b20      	ldr	r3, [pc, #128]	; (800eeb4 <MX_TIM12_Init+0xbc>)
 800ee32:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ee36:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ee38:	4b1e      	ldr	r3, [pc, #120]	; (800eeb4 <MX_TIM12_Init+0xbc>)
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ee3e:	4b1d      	ldr	r3, [pc, #116]	; (800eeb4 <MX_TIM12_Init+0xbc>)
 800ee40:	2200      	movs	r2, #0
 800ee42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800ee44:	481b      	ldr	r0, [pc, #108]	; (800eeb4 <MX_TIM12_Init+0xbc>)
 800ee46:	f7f4 fbd5 	bl	80035f4 <HAL_TIM_Base_Init>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d001      	beq.n	800ee54 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 800ee50:	f000 f9a7 	bl	800f1a2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ee54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ee58:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800ee5a:	f107 0320 	add.w	r3, r7, #32
 800ee5e:	4619      	mov	r1, r3
 800ee60:	4814      	ldr	r0, [pc, #80]	; (800eeb4 <MX_TIM12_Init+0xbc>)
 800ee62:	f7f4 ff6f 	bl	8003d44 <HAL_TIM_ConfigClockSource>
 800ee66:	4603      	mov	r3, r0
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d001      	beq.n	800ee70 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 800ee6c:	f000 f999 	bl	800f1a2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800ee70:	4810      	ldr	r0, [pc, #64]	; (800eeb4 <MX_TIM12_Init+0xbc>)
 800ee72:	f7f4 fc0e 	bl	8003692 <HAL_TIM_PWM_Init>
 800ee76:	4603      	mov	r3, r0
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d001      	beq.n	800ee80 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 800ee7c:	f000 f991 	bl	800f1a2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ee80:	2360      	movs	r3, #96	; 0x60
 800ee82:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800ee84:	2300      	movs	r3, #0
 800ee86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ee88:	2300      	movs	r3, #0
 800ee8a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800ee90:	1d3b      	adds	r3, r7, #4
 800ee92:	2204      	movs	r2, #4
 800ee94:	4619      	mov	r1, r3
 800ee96:	4807      	ldr	r0, [pc, #28]	; (800eeb4 <MX_TIM12_Init+0xbc>)
 800ee98:	f7f4 fe8e 	bl	8003bb8 <HAL_TIM_PWM_ConfigChannel>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d001      	beq.n	800eea6 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 800eea2:	f000 f97e 	bl	800f1a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800eea6:	4803      	ldr	r0, [pc, #12]	; (800eeb4 <MX_TIM12_Init+0xbc>)
 800eea8:	f003 fd90 	bl	80129cc <HAL_TIM_MspPostInit>

}
 800eeac:	bf00      	nop
 800eeae:	3730      	adds	r7, #48	; 0x30
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}
 800eeb4:	20000fac 	.word	0x20000fac
 800eeb8:	40001800 	.word	0x40001800

0800eebc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800eec0:	4b11      	ldr	r3, [pc, #68]	; (800ef08 <MX_USART1_UART_Init+0x4c>)
 800eec2:	4a12      	ldr	r2, [pc, #72]	; (800ef0c <MX_USART1_UART_Init+0x50>)
 800eec4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800eec6:	4b10      	ldr	r3, [pc, #64]	; (800ef08 <MX_USART1_UART_Init+0x4c>)
 800eec8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800eecc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800eece:	4b0e      	ldr	r3, [pc, #56]	; (800ef08 <MX_USART1_UART_Init+0x4c>)
 800eed0:	2200      	movs	r2, #0
 800eed2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800eed4:	4b0c      	ldr	r3, [pc, #48]	; (800ef08 <MX_USART1_UART_Init+0x4c>)
 800eed6:	2200      	movs	r2, #0
 800eed8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800eeda:	4b0b      	ldr	r3, [pc, #44]	; (800ef08 <MX_USART1_UART_Init+0x4c>)
 800eedc:	2200      	movs	r2, #0
 800eede:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800eee0:	4b09      	ldr	r3, [pc, #36]	; (800ef08 <MX_USART1_UART_Init+0x4c>)
 800eee2:	220c      	movs	r2, #12
 800eee4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800eee6:	4b08      	ldr	r3, [pc, #32]	; (800ef08 <MX_USART1_UART_Init+0x4c>)
 800eee8:	2200      	movs	r2, #0
 800eeea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800eeec:	4b06      	ldr	r3, [pc, #24]	; (800ef08 <MX_USART1_UART_Init+0x4c>)
 800eeee:	2200      	movs	r2, #0
 800eef0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800eef2:	4805      	ldr	r0, [pc, #20]	; (800ef08 <MX_USART1_UART_Init+0x4c>)
 800eef4:	f7f5 fb6e 	bl	80045d4 <HAL_UART_Init>
 800eef8:	4603      	mov	r3, r0
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d001      	beq.n	800ef02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800eefe:	f000 f950 	bl	800f1a2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800ef02:	bf00      	nop
 800ef04:	bd80      	pop	{r7, pc}
 800ef06:	bf00      	nop
 800ef08:	20000ba4 	.word	0x20000ba4
 800ef0c:	40011000 	.word	0x40011000

0800ef10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b08a      	sub	sp, #40	; 0x28
 800ef14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ef16:	f107 0314 	add.w	r3, r7, #20
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	601a      	str	r2, [r3, #0]
 800ef1e:	605a      	str	r2, [r3, #4]
 800ef20:	609a      	str	r2, [r3, #8]
 800ef22:	60da      	str	r2, [r3, #12]
 800ef24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ef26:	2300      	movs	r3, #0
 800ef28:	613b      	str	r3, [r7, #16]
 800ef2a:	4b63      	ldr	r3, [pc, #396]	; (800f0b8 <MX_GPIO_Init+0x1a8>)
 800ef2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef2e:	4a62      	ldr	r2, [pc, #392]	; (800f0b8 <MX_GPIO_Init+0x1a8>)
 800ef30:	f043 0304 	orr.w	r3, r3, #4
 800ef34:	6313      	str	r3, [r2, #48]	; 0x30
 800ef36:	4b60      	ldr	r3, [pc, #384]	; (800f0b8 <MX_GPIO_Init+0x1a8>)
 800ef38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef3a:	f003 0304 	and.w	r3, r3, #4
 800ef3e:	613b      	str	r3, [r7, #16]
 800ef40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ef42:	2300      	movs	r3, #0
 800ef44:	60fb      	str	r3, [r7, #12]
 800ef46:	4b5c      	ldr	r3, [pc, #368]	; (800f0b8 <MX_GPIO_Init+0x1a8>)
 800ef48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef4a:	4a5b      	ldr	r2, [pc, #364]	; (800f0b8 <MX_GPIO_Init+0x1a8>)
 800ef4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef50:	6313      	str	r3, [r2, #48]	; 0x30
 800ef52:	4b59      	ldr	r3, [pc, #356]	; (800f0b8 <MX_GPIO_Init+0x1a8>)
 800ef54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef5a:	60fb      	str	r3, [r7, #12]
 800ef5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ef5e:	2300      	movs	r3, #0
 800ef60:	60bb      	str	r3, [r7, #8]
 800ef62:	4b55      	ldr	r3, [pc, #340]	; (800f0b8 <MX_GPIO_Init+0x1a8>)
 800ef64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef66:	4a54      	ldr	r2, [pc, #336]	; (800f0b8 <MX_GPIO_Init+0x1a8>)
 800ef68:	f043 0301 	orr.w	r3, r3, #1
 800ef6c:	6313      	str	r3, [r2, #48]	; 0x30
 800ef6e:	4b52      	ldr	r3, [pc, #328]	; (800f0b8 <MX_GPIO_Init+0x1a8>)
 800ef70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef72:	f003 0301 	and.w	r3, r3, #1
 800ef76:	60bb      	str	r3, [r7, #8]
 800ef78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	607b      	str	r3, [r7, #4]
 800ef7e:	4b4e      	ldr	r3, [pc, #312]	; (800f0b8 <MX_GPIO_Init+0x1a8>)
 800ef80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef82:	4a4d      	ldr	r2, [pc, #308]	; (800f0b8 <MX_GPIO_Init+0x1a8>)
 800ef84:	f043 0302 	orr.w	r3, r3, #2
 800ef88:	6313      	str	r3, [r2, #48]	; 0x30
 800ef8a:	4b4b      	ldr	r3, [pc, #300]	; (800f0b8 <MX_GPIO_Init+0x1a8>)
 800ef8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef8e:	f003 0302 	and.w	r3, r3, #2
 800ef92:	607b      	str	r3, [r7, #4]
 800ef94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800ef96:	2300      	movs	r3, #0
 800ef98:	603b      	str	r3, [r7, #0]
 800ef9a:	4b47      	ldr	r3, [pc, #284]	; (800f0b8 <MX_GPIO_Init+0x1a8>)
 800ef9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef9e:	4a46      	ldr	r2, [pc, #280]	; (800f0b8 <MX_GPIO_Init+0x1a8>)
 800efa0:	f043 0308 	orr.w	r3, r3, #8
 800efa4:	6313      	str	r3, [r2, #48]	; 0x30
 800efa6:	4b44      	ldr	r3, [pc, #272]	; (800f0b8 <MX_GPIO_Init+0x1a8>)
 800efa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efaa:	f003 0308 	and.w	r3, r3, #8
 800efae:	603b      	str	r3, [r7, #0]
 800efb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FLED2_RED_Pin|FLED2_GREEN_Pin|FLED2_BLUE_Pin|LED4_Pin, GPIO_PIN_RESET);
 800efb2:	2200      	movs	r2, #0
 800efb4:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 800efb8:	4840      	ldr	r0, [pc, #256]	; (800f0bc <MX_GPIO_Init+0x1ac>)
 800efba:	f7f3 f9a3 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, IR_L_Pin|IR_FL_Pin, GPIO_PIN_RESET);
 800efbe:	2200      	movs	r2, #0
 800efc0:	2103      	movs	r1, #3
 800efc2:	483f      	ldr	r0, [pc, #252]	; (800f0c0 <MX_GPIO_Init+0x1b0>)
 800efc4:	f7f3 f99e 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED6_Pin|VAT_ALERT_Pin|LED7_Pin|LED3_Pin 
 800efc8:	2200      	movs	r2, #0
 800efca:	f641 01fc 	movw	r1, #6396	; 0x18fc
 800efce:	483d      	ldr	r0, [pc, #244]	; (800f0c4 <MX_GPIO_Init+0x1b4>)
 800efd0:	f7f3 f998 	bl	8002304 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED1_Pin|IR_FR_Pin|IR_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_L_CCW_Pin|MOTOR_L_CW_Pin|MOTOR_L_R_STBY_Pin|MOTOR_R_CW_Pin 
 800efd4:	2200      	movs	r2, #0
 800efd6:	f647 41e2 	movw	r1, #31970	; 0x7ce2
 800efda:	483b      	ldr	r0, [pc, #236]	; (800f0c8 <MX_GPIO_Init+0x1b8>)
 800efdc:	f7f3 f992 	bl	8002304 <HAL_GPIO_WritePin>
                          |LED5_Pin|MOTOR_R_CCW_Pin|FLED1_BLUE_Pin|FLED1_RED_Pin 
                          |FLED1_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800efe0:	2200      	movs	r2, #0
 800efe2:	2104      	movs	r1, #4
 800efe4:	4839      	ldr	r0, [pc, #228]	; (800f0cc <MX_GPIO_Init+0x1bc>)
 800efe6:	f7f3 f98d 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FLED2_RED_Pin FLED2_GREEN_Pin FLED2_BLUE_Pin LED4_Pin */
  GPIO_InitStruct.Pin = FLED2_RED_Pin|FLED2_GREEN_Pin|FLED2_BLUE_Pin|LED4_Pin;
 800efea:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800efee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800eff0:	2301      	movs	r3, #1
 800eff2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eff4:	2300      	movs	r3, #0
 800eff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eff8:	2300      	movs	r3, #0
 800effa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800effc:	f107 0314 	add.w	r3, r7, #20
 800f000:	4619      	mov	r1, r3
 800f002:	482e      	ldr	r0, [pc, #184]	; (800f0bc <MX_GPIO_Init+0x1ac>)
 800f004:	f7f2 ffcc 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IR_L_Pin IR_FL_Pin */
  GPIO_InitStruct.Pin = IR_L_Pin|IR_FL_Pin;
 800f008:	2303      	movs	r3, #3
 800f00a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f00c:	2301      	movs	r3, #1
 800f00e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f010:	2300      	movs	r3, #0
 800f012:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f014:	2300      	movs	r3, #0
 800f016:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800f018:	f107 0314 	add.w	r3, r7, #20
 800f01c:	4619      	mov	r1, r3
 800f01e:	4828      	ldr	r0, [pc, #160]	; (800f0c0 <MX_GPIO_Init+0x1b0>)
 800f020:	f7f2 ffbe 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED6_Pin VAT_ALERT_Pin LED7_Pin LED3_Pin 
                           LED2_Pin LED1_Pin IR_FR_Pin IR_R_Pin */
  GPIO_InitStruct.Pin = LED6_Pin|VAT_ALERT_Pin|LED7_Pin|LED3_Pin 
 800f024:	f641 03fc 	movw	r3, #6396	; 0x18fc
 800f028:	617b      	str	r3, [r7, #20]
                          |LED2_Pin|LED1_Pin|IR_FR_Pin|IR_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f02a:	2301      	movs	r3, #1
 800f02c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f02e:	2300      	movs	r3, #0
 800f030:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f032:	2300      	movs	r3, #0
 800f034:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f036:	f107 0314 	add.w	r3, r7, #20
 800f03a:	4619      	mov	r1, r3
 800f03c:	4821      	ldr	r0, [pc, #132]	; (800f0c4 <MX_GPIO_Init+0x1b4>)
 800f03e:	f7f2 ffaf 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_L_CCW_Pin MOTOR_L_CW_Pin MOTOR_L_R_STBY_Pin MOTOR_R_CW_Pin 
                           LED5_Pin MOTOR_R_CCW_Pin FLED1_BLUE_Pin FLED1_RED_Pin 
                           FLED1_GREEN_Pin */
  GPIO_InitStruct.Pin = MOTOR_L_CCW_Pin|MOTOR_L_CW_Pin|MOTOR_L_R_STBY_Pin|MOTOR_R_CW_Pin 
 800f042:	f647 43e2 	movw	r3, #31970	; 0x7ce2
 800f046:	617b      	str	r3, [r7, #20]
                          |LED5_Pin|MOTOR_R_CCW_Pin|FLED1_BLUE_Pin|FLED1_RED_Pin 
                          |FLED1_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f048:	2301      	movs	r3, #1
 800f04a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f04c:	2300      	movs	r3, #0
 800f04e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f050:	2300      	movs	r3, #0
 800f052:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f054:	f107 0314 	add.w	r3, r7, #20
 800f058:	4619      	mov	r1, r3
 800f05a:	481b      	ldr	r0, [pc, #108]	; (800f0c8 <MX_GPIO_Init+0x1b8>)
 800f05c:	f7f2 ffa0 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VOL_CHECK_Pin */
  GPIO_InitStruct.Pin = VOL_CHECK_Pin;
 800f060:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f066:	2300      	movs	r3, #0
 800f068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f06a:	2301      	movs	r3, #1
 800f06c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VOL_CHECK_GPIO_Port, &GPIO_InitStruct);
 800f06e:	f107 0314 	add.w	r3, r7, #20
 800f072:	4619      	mov	r1, r3
 800f074:	4811      	ldr	r0, [pc, #68]	; (800f0bc <MX_GPIO_Init+0x1ac>)
 800f076:	f7f2 ff93 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PUSH_IN_Pin */
  GPIO_InitStruct.Pin = PUSH_IN_Pin;
 800f07a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f07e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f080:	2300      	movs	r3, #0
 800f082:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f084:	2300      	movs	r3, #0
 800f086:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PUSH_IN_GPIO_Port, &GPIO_InitStruct);
 800f088:	f107 0314 	add.w	r3, r7, #20
 800f08c:	4619      	mov	r1, r3
 800f08e:	480d      	ldr	r0, [pc, #52]	; (800f0c4 <MX_GPIO_Init+0x1b4>)
 800f090:	f7f2 ff86 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 800f094:	2304      	movs	r3, #4
 800f096:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f098:	2301      	movs	r3, #1
 800f09a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f09c:	2300      	movs	r3, #0
 800f09e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 800f0a4:	f107 0314 	add.w	r3, r7, #20
 800f0a8:	4619      	mov	r1, r3
 800f0aa:	4808      	ldr	r0, [pc, #32]	; (800f0cc <MX_GPIO_Init+0x1bc>)
 800f0ac:	f7f2 ff78 	bl	8001fa0 <HAL_GPIO_Init>

}
 800f0b0:	bf00      	nop
 800f0b2:	3728      	adds	r7, #40	; 0x28
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	bd80      	pop	{r7, pc}
 800f0b8:	40023800 	.word	0x40023800
 800f0bc:	40020800 	.word	0x40020800
 800f0c0:	40021c00 	.word	0x40021c00
 800f0c4:	40020000 	.word	0x40020000
 800f0c8:	40020400 	.word	0x40020400
 800f0cc:	40020c00 	.word	0x40020c00

0800f0d0 <buzzer>:

/* USER CODE BEGIN 4 */
void buzzer(int sound, int length){
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b08a      	sub	sp, #40	; 0x28
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
 800f0d8:	6039      	str	r1, [r7, #0]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f0da:	2360      	movs	r3, #96	; 0x60
 800f0dc:	60fb      	str	r3, [r7, #12]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	617b      	str	r3, [r7, #20]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	61fb      	str	r3, [r7, #28]

	hz = 1000000 / sound;
 800f0e6:	4a15      	ldr	r2, [pc, #84]	; (800f13c <buzzer+0x6c>)
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	fb92 f3f3 	sdiv	r3, r2, r3
 800f0ee:	4a14      	ldr	r2, [pc, #80]	; (800f140 <buzzer+0x70>)
 800f0f0:	6013      	str	r3, [r2, #0]
	TIM3 -> ARR = hz;
 800f0f2:	4b13      	ldr	r3, [pc, #76]	; (800f140 <buzzer+0x70>)
 800f0f4:	681a      	ldr	r2, [r3, #0]
 800f0f6:	4b13      	ldr	r3, [pc, #76]	; (800f144 <buzzer+0x74>)
 800f0f8:	62da      	str	r2, [r3, #44]	; 0x2c
    ConfigOC.Pulse = hz / 10;
 800f0fa:	4b11      	ldr	r3, [pc, #68]	; (800f140 <buzzer+0x70>)
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	4a12      	ldr	r2, [pc, #72]	; (800f148 <buzzer+0x78>)
 800f100:	fb82 1203 	smull	r1, r2, r2, r3
 800f104:	1092      	asrs	r2, r2, #2
 800f106:	17db      	asrs	r3, r3, #31
 800f108:	1ad3      	subs	r3, r2, r3
 800f10a:	613b      	str	r3, [r7, #16]
    HAL_TIM_PWM_ConfigChannel(&htim4, &ConfigOC, TIM_CHANNEL_3);
 800f10c:	f107 030c 	add.w	r3, r7, #12
 800f110:	2208      	movs	r2, #8
 800f112:	4619      	mov	r1, r3
 800f114:	480d      	ldr	r0, [pc, #52]	; (800f14c <buzzer+0x7c>)
 800f116:	f7f4 fd4f 	bl	8003bb8 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800f11a:	2108      	movs	r1, #8
 800f11c:	480b      	ldr	r0, [pc, #44]	; (800f14c <buzzer+0x7c>)
 800f11e:	f7f4 fae3 	bl	80036e8 <HAL_TIM_PWM_Start>

	HAL_Delay(length);
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	4618      	mov	r0, r3
 800f126:	f7f1 ff79 	bl	800101c <HAL_Delay>
    HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 800f12a:	2108      	movs	r1, #8
 800f12c:	4807      	ldr	r0, [pc, #28]	; (800f14c <buzzer+0x7c>)
 800f12e:	f7f4 fb19 	bl	8003764 <HAL_TIM_PWM_Stop>
}
 800f132:	bf00      	nop
 800f134:	3728      	adds	r7, #40	; 0x28
 800f136:	46bd      	mov	sp, r7
 800f138:	bd80      	pop	{r7, pc}
 800f13a:	bf00      	nop
 800f13c:	000f4240 	.word	0x000f4240
 800f140:	200002c4 	.word	0x200002c4
 800f144:	40000400 	.word	0x40000400
 800f148:	66666667 	.word	0x66666667
 800f14c:	2000030c 	.word	0x2000030c

0800f150 <get_adc_value>:


int get_adc_value(ADC_HandleTypeDef *hadc, uint32_t channel){
 800f150:	b580      	push	{r7, lr}
 800f152:	b086      	sub	sp, #24
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
 800f158:	6039      	str	r1, [r7, #0]

  ADC_ChannelConfTypeDef sConfig = {0};
 800f15a:	f107 0308 	add.w	r3, r7, #8
 800f15e:	2200      	movs	r2, #0
 800f160:	601a      	str	r2, [r3, #0]
 800f162:	605a      	str	r2, [r3, #4]
 800f164:	609a      	str	r2, [r3, #8]
 800f166:	60da      	str	r2, [r3, #12]

  sConfig.Channel = channel;
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 800f16c:	2301      	movs	r3, #1
 800f16e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800f170:	2300      	movs	r3, #0
 800f172:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800f174:	2300      	movs	r3, #0
 800f176:	617b      	str	r3, [r7, #20]

  HAL_ADC_ConfigChannel(hadc, &sConfig);
 800f178:	f107 0308 	add.w	r3, r7, #8
 800f17c:	4619      	mov	r1, r3
 800f17e:	6878      	ldr	r0, [r7, #4]
 800f180:	f7f2 f90a 	bl	8001398 <HAL_ADC_ConfigChannel>

  HAL_ADC_Start(hadc);                    //
 800f184:	6878      	ldr	r0, [r7, #4]
 800f186:	f7f1 ffaf 	bl	80010e8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 100);   //wait for ADC
 800f18a:	2164      	movs	r1, #100	; 0x64
 800f18c:	6878      	ldr	r0, [r7, #4]
 800f18e:	f7f2 f871 	bl	8001274 <HAL_ADC_PollForConversion>
  return HAL_ADC_GetValue(hadc);          //
 800f192:	6878      	ldr	r0, [r7, #4]
 800f194:	f7f2 f8f2 	bl	800137c <HAL_ADC_GetValue>
 800f198:	4603      	mov	r3, r0
}
 800f19a:	4618      	mov	r0, r3
 800f19c:	3718      	adds	r7, #24
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bd80      	pop	{r7, pc}

0800f1a2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800f1a2:	b480      	push	{r7}
 800f1a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800f1a6:	bf00      	nop
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ae:	4770      	bx	lr

0800f1b0 <search_init>:

#include "global.h"

void search_init(void){
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	af00      	add	r7, sp, #0

	//----a探索系----
	goal_x = GOAL_X;        		//GOAL_Xはglobal.hにマクロ定義あり
 800f1b4:	4b09      	ldr	r3, [pc, #36]	; (800f1dc <search_init+0x2c>)
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	701a      	strb	r2, [r3, #0]
	goal_y = GOAL_Y;        		//GOAL_Yはglobal.hにマクロ定義あり
 800f1ba:	4b09      	ldr	r3, [pc, #36]	; (800f1e0 <search_init+0x30>)
 800f1bc:	2208      	movs	r2, #8
 800f1be:	701a      	strb	r2, [r3, #0]
	map_Init();						//aマップの初期化
 800f1c0:	f001 f852 	bl	8010268 <map_Init>
	mouse.x = 0;
 800f1c4:	4b07      	ldr	r3, [pc, #28]	; (800f1e4 <search_init+0x34>)
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	701a      	strb	r2, [r3, #0]
	mouse.y = 0;					//a現在地の初期化
 800f1ca:	4b06      	ldr	r3, [pc, #24]	; (800f1e4 <search_init+0x34>)
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	705a      	strb	r2, [r3, #1]
	mouse.dir = 0;					//aマウスの向きの初期化
 800f1d0:	4b04      	ldr	r3, [pc, #16]	; (800f1e4 <search_init+0x34>)
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	709a      	strb	r2, [r3, #2]
}
 800f1d6:	bf00      	nop
 800f1d8:	bd80      	pop	{r7, pc}
 800f1da:	bf00      	nop
 800f1dc:	20000c30 	.word	0x20000c30
 800f1e0:	20000b8c 	.word	0x20000b8c
 800f1e4:	20000c8c 	.word	0x20000c8c

0800f1e8 <searchC>:
//searchC
//aスラローム走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchC(){
 800f1e8:	b590      	push	{r4, r7, lr}
 800f1ea:	b083      	sub	sp, #12
 800f1ec:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800f1ee:	4bab      	ldr	r3, [pc, #684]	; (800f49c <searchC+0x2b4>)
 800f1f0:	881b      	ldrh	r3, [r3, #0]
 800f1f2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f1f6:	b2db      	uxtb	r3, r3
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d001      	beq.n	800f200 <searchC+0x18>
		load_map_from_eeprom();
 800f1fc:	f002 ff70 	bl	80120e0 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(!MF.FLAG.SCND)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800f200:	4ba6      	ldr	r3, [pc, #664]	; (800f49c <searchC+0x2b4>)
 800f202:	881b      	ldrh	r3, [r3, #0]
 800f204:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f208:	b2db      	uxtb	r3, r3
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d101      	bne.n	800f212 <searchC+0x2a>
 800f20e:	f002 ffdf 	bl	80121d0 <get_wall_info>
	if(!MF.FLAG.SCND)wall_info &= ~0x88;									//a前壁は存在するはずがないので削除する
 800f212:	4ba2      	ldr	r3, [pc, #648]	; (800f49c <searchC+0x2b4>)
 800f214:	881b      	ldrh	r3, [r3, #0]
 800f216:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f21a:	b2db      	uxtb	r3, r3
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d106      	bne.n	800f22e <searchC+0x46>
 800f220:	4b9f      	ldr	r3, [pc, #636]	; (800f4a0 <searchC+0x2b8>)
 800f222:	781b      	ldrb	r3, [r3, #0]
 800f224:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800f228:	b2da      	uxtb	r2, r3
 800f22a:	4b9d      	ldr	r3, [pc, #628]	; (800f4a0 <searchC+0x2b8>)
 800f22c:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800f22e:	4b9b      	ldr	r3, [pc, #620]	; (800f49c <searchC+0x2b4>)
 800f230:	881b      	ldrh	r3, [r3, #0]
 800f232:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f236:	b2db      	uxtb	r3, r3
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d101      	bne.n	800f240 <searchC+0x58>
 800f23c:	f001 f880 	bl	8010340 <write_map>

	if(MF2.FLAG.GOAL){
 800f240:	4b98      	ldr	r3, [pc, #608]	; (800f4a4 <searchC+0x2bc>)
 800f242:	881b      	ldrh	r3, [r3, #0]
 800f244:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800f248:	b2db      	uxtb	r3, r3
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d00b      	beq.n	800f266 <searchC+0x7e>
//		HAL_Delay(500);
		rotate_180();											//180度回転
 800f24e:	f7f7 fa7b 	bl	8006748 <rotate_180>
//		driveC2(SETPOS_BACK);         							//a尻を当てる程度に後退。回転後に停止する
//		degree_z = target_degree_z;
//		start_mode = 0;
		start_mode = 1;
 800f252:	4b95      	ldr	r3, [pc, #596]	; (800f4a8 <searchC+0x2c0>)
 800f254:	2201      	movs	r2, #1
 800f256:	701a      	strb	r2, [r3, #0]
		goal_mode = 1;
 800f258:	4b94      	ldr	r3, [pc, #592]	; (800f4ac <searchC+0x2c4>)
 800f25a:	2201      	movs	r2, #1
 800f25c:	701a      	strb	r2, [r3, #0]
		HAL_Delay(500);
 800f25e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f262:	f7f1 fedb 	bl	800101c <HAL_Delay>
	if(!MF.FLAG.SCND || !MF2.FLAG.GOAL)wall_info &= ~0x88;					//a前壁は存在するはずがないので削除する
	if(!MF.FLAG.SCND || !MF2.FLAG.GOAL)write_map();							//a壁情報を地図に記入
*/

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800f266:	f7f6 fb87 	bl	8005978 <start_sectionA>
	adv_pos();
 800f26a:	f000 ffa5 	bl	80101b8 <adv_pos>

	//====a歩数マップ・経路作成====
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800f26e:	4b8b      	ldr	r3, [pc, #556]	; (800f49c <searchC+0x2b4>)
 800f270:	881b      	ldrh	r3, [r3, #0]
 800f272:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f276:	b2db      	uxtb	r3, r3
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d101      	bne.n	800f280 <searchC+0x98>
 800f27c:	f001 f860 	bl	8010340 <write_map>
	r_cnt = 0;																//a経路カウンタの初期化
 800f280:	4b8b      	ldr	r3, [pc, #556]	; (800f4b0 <searchC+0x2c8>)
 800f282:	2200      	movs	r2, #0
 800f284:	701a      	strb	r2, [r3, #0]
	make_smap();															//a歩数マップ作成
 800f286:	f001 fa4f 	bl	8010728 <make_smap>
	make_route();															//a最短経路探索（route配列に動作が格納される）
 800f28a:	f001 fe0b 	bl	8010ea4 <make_route>
	uint8_t x, y;															//X，Y座標

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){												//route配列によって進行を決定。経路カウンタを進める
 800f28e:	4b88      	ldr	r3, [pc, #544]	; (800f4b0 <searchC+0x2c8>)
 800f290:	781b      	ldrb	r3, [r3, #0]
 800f292:	1c5a      	adds	r2, r3, #1
 800f294:	b2d1      	uxtb	r1, r2
 800f296:	4a86      	ldr	r2, [pc, #536]	; (800f4b0 <searchC+0x2c8>)
 800f298:	7011      	strb	r1, [r2, #0]
 800f29a:	461a      	mov	r2, r3
 800f29c:	4b85      	ldr	r3, [pc, #532]	; (800f4b4 <searchC+0x2cc>)
 800f29e:	5c9b      	ldrb	r3, [r3, r2]
 800f2a0:	2b22      	cmp	r3, #34	; 0x22
 800f2a2:	d07f      	beq.n	800f3a4 <searchC+0x1bc>
 800f2a4:	2b22      	cmp	r3, #34	; 0x22
 800f2a6:	dc03      	bgt.n	800f2b0 <searchC+0xc8>
 800f2a8:	2b11      	cmp	r3, #17
 800f2aa:	f000 808b 	beq.w	800f3c4 <searchC+0x1dc>
 800f2ae:	e08c      	b.n	800f3ca <searchC+0x1e2>
 800f2b0:	2b44      	cmp	r3, #68	; 0x44
 800f2b2:	d074      	beq.n	800f39e <searchC+0x1b6>
 800f2b4:	2b88      	cmp	r3, #136	; 0x88
 800f2b6:	f040 8088 	bne.w	800f3ca <searchC+0x1e2>
			//----a前進----
			case 0x88:
				if(route[r_cnt] == 0x88 && MF.FLAG.ACCL2){
 800f2ba:	4b7d      	ldr	r3, [pc, #500]	; (800f4b0 <searchC+0x2c8>)
 800f2bc:	781b      	ldrb	r3, [r3, #0]
 800f2be:	461a      	mov	r2, r3
 800f2c0:	4b7c      	ldr	r3, [pc, #496]	; (800f4b4 <searchC+0x2cc>)
 800f2c2:	5c9b      	ldrb	r3, [r3, r2]
 800f2c4:	2b88      	cmp	r3, #136	; 0x88
 800f2c6:	d158      	bne.n	800f37a <searchC+0x192>
 800f2c8:	4b74      	ldr	r3, [pc, #464]	; (800f49c <searchC+0x2b4>)
 800f2ca:	881b      	ldrh	r3, [r3, #0]
 800f2cc:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800f2d0:	b2db      	uxtb	r3, r3
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d051      	beq.n	800f37a <searchC+0x192>
					x = mouse.x;
 800f2d6:	4b78      	ldr	r3, [pc, #480]	; (800f4b8 <searchC+0x2d0>)
 800f2d8:	781b      	ldrb	r3, [r3, #0]
 800f2da:	70fb      	strb	r3, [r7, #3]
					y = mouse.y;
 800f2dc:	4b76      	ldr	r3, [pc, #472]	; (800f4b8 <searchC+0x2d0>)
 800f2de:	785b      	ldrb	r3, [r3, #1]
 800f2e0:	70bb      	strb	r3, [r7, #2]
					adv_pos();
 800f2e2:	f000 ff69 	bl	80101b8 <adv_pos>
					if((map[mouse.y][mouse.x] & 0x0f) == (map[mouse.y][mouse.x]>>4)){
 800f2e6:	4b74      	ldr	r3, [pc, #464]	; (800f4b8 <searchC+0x2d0>)
 800f2e8:	785b      	ldrb	r3, [r3, #1]
 800f2ea:	b2db      	uxtb	r3, r3
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	4b72      	ldr	r3, [pc, #456]	; (800f4b8 <searchC+0x2d0>)
 800f2f0:	781b      	ldrb	r3, [r3, #0]
 800f2f2:	b2db      	uxtb	r3, r3
 800f2f4:	4619      	mov	r1, r3
 800f2f6:	4a71      	ldr	r2, [pc, #452]	; (800f4bc <searchC+0x2d4>)
 800f2f8:	0103      	lsls	r3, r0, #4
 800f2fa:	4413      	add	r3, r2
 800f2fc:	440b      	add	r3, r1
 800f2fe:	781b      	ldrb	r3, [r3, #0]
 800f300:	f003 030f 	and.w	r3, r3, #15
 800f304:	4a6c      	ldr	r2, [pc, #432]	; (800f4b8 <searchC+0x2d0>)
 800f306:	7852      	ldrb	r2, [r2, #1]
 800f308:	b2d2      	uxtb	r2, r2
 800f30a:	4614      	mov	r4, r2
 800f30c:	4a6a      	ldr	r2, [pc, #424]	; (800f4b8 <searchC+0x2d0>)
 800f30e:	7812      	ldrb	r2, [r2, #0]
 800f310:	b2d2      	uxtb	r2, r2
 800f312:	4610      	mov	r0, r2
 800f314:	4969      	ldr	r1, [pc, #420]	; (800f4bc <searchC+0x2d4>)
 800f316:	0122      	lsls	r2, r4, #4
 800f318:	440a      	add	r2, r1
 800f31a:	4402      	add	r2, r0
 800f31c:	7812      	ldrb	r2, [r2, #0]
 800f31e:	0912      	lsrs	r2, r2, #4
 800f320:	b2d2      	uxtb	r2, r2
 800f322:	4293      	cmp	r3, r2
 800f324:	d111      	bne.n	800f34a <searchC+0x162>
						if(!MF2.FLAG.HACCEL){
 800f326:	4b5f      	ldr	r3, [pc, #380]	; (800f4a4 <searchC+0x2bc>)
 800f328:	881b      	ldrh	r3, [r3, #0]
 800f32a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f32e:	b2db      	uxtb	r3, r3
 800f330:	2b00      	cmp	r3, #0
 800f332:	d107      	bne.n	800f344 <searchC+0x15c>
							one_sectionA();
 800f334:	f7f6 fdf2 	bl	8005f1c <one_sectionA>
							MF2.FLAG.HACCEL = 1;
 800f338:	4a5a      	ldr	r2, [pc, #360]	; (800f4a4 <searchC+0x2bc>)
 800f33a:	8813      	ldrh	r3, [r2, #0]
 800f33c:	f043 0302 	orr.w	r3, r3, #2
 800f340:	8013      	strh	r3, [r2, #0]
 800f342:	e013      	b.n	800f36c <searchC+0x184>
						}else{
							one_sectionU();
 800f344:	f7f7 f82e 	bl	80063a4 <one_sectionU>
 800f348:	e010      	b.n	800f36c <searchC+0x184>
						}
					}else if(MF2.FLAG.HACCEL){
 800f34a:	4b56      	ldr	r3, [pc, #344]	; (800f4a4 <searchC+0x2bc>)
 800f34c:	881b      	ldrh	r3, [r3, #0]
 800f34e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f352:	b2db      	uxtb	r3, r3
 800f354:	2b00      	cmp	r3, #0
 800f356:	d007      	beq.n	800f368 <searchC+0x180>
						one_sectionD();
 800f358:	f7f6 fe6a 	bl	8006030 <one_sectionD>
						MF2.FLAG.HACCEL = 0;
 800f35c:	4a51      	ldr	r2, [pc, #324]	; (800f4a4 <searchC+0x2bc>)
 800f35e:	8813      	ldrh	r3, [r2, #0]
 800f360:	f36f 0341 	bfc	r3, #1, #1
 800f364:	8013      	strh	r3, [r2, #0]
 800f366:	e001      	b.n	800f36c <searchC+0x184>
					}else{
						one_sectionU();
 800f368:	f7f7 f81c 	bl	80063a4 <one_sectionU>
					}
					mouse.x = x;
 800f36c:	4a52      	ldr	r2, [pc, #328]	; (800f4b8 <searchC+0x2d0>)
 800f36e:	78fb      	ldrb	r3, [r7, #3]
 800f370:	7013      	strb	r3, [r2, #0]
					mouse.y = y;
 800f372:	4a51      	ldr	r2, [pc, #324]	; (800f4b8 <searchC+0x2d0>)
 800f374:	78bb      	ldrb	r3, [r7, #2]
 800f376:	7053      	strb	r3, [r2, #1]
					one_sectionD();
					MF2.FLAG.HACCEL = 0;
				}else{
					one_sectionU();
				}
				break;
 800f378:	e027      	b.n	800f3ca <searchC+0x1e2>
				}else if(MF2.FLAG.HACCEL){
 800f37a:	4b4a      	ldr	r3, [pc, #296]	; (800f4a4 <searchC+0x2bc>)
 800f37c:	881b      	ldrh	r3, [r3, #0]
 800f37e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f382:	b2db      	uxtb	r3, r3
 800f384:	2b00      	cmp	r3, #0
 800f386:	d007      	beq.n	800f398 <searchC+0x1b0>
					one_sectionD();
 800f388:	f7f6 fe52 	bl	8006030 <one_sectionD>
					MF2.FLAG.HACCEL = 0;
 800f38c:	4a45      	ldr	r2, [pc, #276]	; (800f4a4 <searchC+0x2bc>)
 800f38e:	8813      	ldrh	r3, [r2, #0]
 800f390:	f36f 0341 	bfc	r3, #1, #1
 800f394:	8013      	strh	r3, [r2, #0]
				break;
 800f396:	e018      	b.n	800f3ca <searchC+0x1e2>
					one_sectionU();
 800f398:	f7f7 f804 	bl	80063a4 <one_sectionU>
				break;
 800f39c:	e015      	b.n	800f3ca <searchC+0x1e2>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 800f39e:	f7f7 faab 	bl	80068f8 <slalom_R90>
				break;
 800f3a2:	e012      	b.n	800f3ca <searchC+0x1e2>
			//----180回転----
			case 0x22:
				half_sectionD();
 800f3a4:	f7f6 fc80 	bl	8005ca8 <half_sectionD>
				rotate_180();
 800f3a8:	f7f7 f9ce 	bl	8006748 <rotate_180>
				if(wall_info & 0x88){
 800f3ac:	4b3c      	ldr	r3, [pc, #240]	; (800f4a0 <searchC+0x2b8>)
 800f3ae:	781b      	ldrb	r3, [r3, #0]
 800f3b0:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d002      	beq.n	800f3be <searchC+0x1d6>
					set_position();
 800f3b8:	f7f6 faaa 	bl	8005910 <set_position>
				}else{
					half_sectionA();
				}
				break;
 800f3bc:	e005      	b.n	800f3ca <searchC+0x1e2>
					half_sectionA();
 800f3be:	f7f6 fc0d 	bl	8005bdc <half_sectionA>
				break;
 800f3c2:	e002      	b.n	800f3ca <searchC+0x1e2>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800f3c4:	f7f7 fc02 	bl	8006bcc <slalom_L90>
				break;
 800f3c8:	bf00      	nop
		}
		adv_pos();
 800f3ca:	f000 fef5 	bl	80101b8 <adv_pos>
		if(!MF.FLAG.SCND)conf_route();
 800f3ce:	4b33      	ldr	r3, [pc, #204]	; (800f49c <searchC+0x2b4>)
 800f3d0:	881b      	ldrh	r3, [r3, #0]
 800f3d2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f3d6:	b2db      	uxtb	r3, r3
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d101      	bne.n	800f3e0 <searchC+0x1f8>
 800f3dc:	f000 ff26 	bl	801022c <conf_route>

//	}while((mouse.x != goal_x) || (mouse.y != goal_y));
	}while(smap[mouse.y][mouse.x] != 0);
 800f3e0:	4b35      	ldr	r3, [pc, #212]	; (800f4b8 <searchC+0x2d0>)
 800f3e2:	785b      	ldrb	r3, [r3, #1]
 800f3e4:	b2db      	uxtb	r3, r3
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	4b33      	ldr	r3, [pc, #204]	; (800f4b8 <searchC+0x2d0>)
 800f3ea:	781b      	ldrb	r3, [r3, #0]
 800f3ec:	b2db      	uxtb	r3, r3
 800f3ee:	4619      	mov	r1, r3
 800f3f0:	4a33      	ldr	r2, [pc, #204]	; (800f4c0 <searchC+0x2d8>)
 800f3f2:	0103      	lsls	r3, r0, #4
 800f3f4:	440b      	add	r3, r1
 800f3f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	f47f af47 	bne.w	800f28e <searchC+0xa6>

	for(int j=0; j<goal_mode-1; j++){
 800f400:	2300      	movs	r3, #0
 800f402:	607b      	str	r3, [r7, #4]
 800f404:	e006      	b.n	800f414 <searchC+0x22c>
		one_sectionU();
 800f406:	f7f6 ffcd 	bl	80063a4 <one_sectionU>
		adv_pos();
 800f40a:	f000 fed5 	bl	80101b8 <adv_pos>
	for(int j=0; j<goal_mode-1; j++){
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	3301      	adds	r3, #1
 800f412:	607b      	str	r3, [r7, #4]
 800f414:	4b25      	ldr	r3, [pc, #148]	; (800f4ac <searchC+0x2c4>)
 800f416:	781b      	ldrb	r3, [r3, #0]
 800f418:	3b01      	subs	r3, #1
 800f41a:	687a      	ldr	r2, [r7, #4]
 800f41c:	429a      	cmp	r2, r3
 800f41e:	dbf2      	blt.n	800f406 <searchC+0x21e>
	}
	half_sectionD();
 800f420:	f7f6 fc42 	bl	8005ca8 <half_sectionD>

	set_positionF();
 800f424:	f7f6 fa8a 	bl	800593c <set_positionF>

	MF2.FLAG.GOAL = (MF2.FLAG.GOAL+1)%2;
 800f428:	4b1e      	ldr	r3, [pc, #120]	; (800f4a4 <searchC+0x2bc>)
 800f42a:	881b      	ldrh	r3, [r3, #0]
 800f42c:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800f430:	b2db      	uxtb	r3, r3
 800f432:	3301      	adds	r3, #1
 800f434:	2b00      	cmp	r3, #0
 800f436:	f003 0301 	and.w	r3, r3, #1
 800f43a:	bfb8      	it	lt
 800f43c:	425b      	neglt	r3, r3
 800f43e:	f003 0301 	and.w	r3, r3, #1
 800f442:	b2d9      	uxtb	r1, r3
 800f444:	4a17      	ldr	r2, [pc, #92]	; (800f4a4 <searchC+0x2bc>)
 800f446:	8813      	ldrh	r3, [r2, #0]
 800f448:	f361 2308 	bfi	r3, r1, #8, #1
 800f44c:	8013      	strh	r3, [r2, #0]
	if(!MF2.FLAG.GOAL){
 800f44e:	4b15      	ldr	r3, [pc, #84]	; (800f4a4 <searchC+0x2bc>)
 800f450:	881b      	ldrh	r3, [r3, #0]
 800f452:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800f456:	b2db      	uxtb	r3, r3
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d112      	bne.n	800f482 <searchC+0x29a>
		HAL_Delay(500);
 800f45c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f460:	f7f1 fddc 	bl	800101c <HAL_Delay>
		rotate_180();										//180度回転
 800f464:	f7f7 f970 	bl	8006748 <rotate_180>
		driveC2(SETPOS_BACK);         						//a尻を当てる程度に後退。回転後に停止する
 800f468:	2064      	movs	r0, #100	; 0x64
 800f46a:	f7f5 ffcb 	bl	8005404 <driveC2>
		degree_z = target_degree_z;
 800f46e:	4b15      	ldr	r3, [pc, #84]	; (800f4c4 <searchC+0x2dc>)
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	4a15      	ldr	r2, [pc, #84]	; (800f4c8 <searchC+0x2e0>)
 800f474:	6013      	str	r3, [r2, #0]
		start_mode = 0;
 800f476:	4b0c      	ldr	r3, [pc, #48]	; (800f4a8 <searchC+0x2c0>)
 800f478:	2200      	movs	r2, #0
 800f47a:	701a      	strb	r2, [r3, #0]
		goal_mode = 1;
 800f47c:	4b0b      	ldr	r3, [pc, #44]	; (800f4ac <searchC+0x2c4>)
 800f47e:	2201      	movs	r2, #1
 800f480:	701a      	strb	r2, [r3, #0]
	}

	if(!MF.FLAG.SCND){
 800f482:	4b06      	ldr	r3, [pc, #24]	; (800f49c <searchC+0x2b4>)
 800f484:	881b      	ldrh	r3, [r3, #0]
 800f486:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f48a:	b2db      	uxtb	r3, r3
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d101      	bne.n	800f494 <searchC+0x2ac>
		store_map_in_eeprom();
 800f490:	f002 fdec 	bl	801206c <store_map_in_eeprom>
	}
}
 800f494:	bf00      	nop
 800f496:	370c      	adds	r7, #12
 800f498:	46bd      	mov	sp, r7
 800f49a:	bd90      	pop	{r4, r7, pc}
 800f49c:	20000fa8 	.word	0x20000fa8
 800f4a0:	200002c8 	.word	0x200002c8
 800f4a4:	20000fa4 	.word	0x20000fa4
 800f4a8:	20001648 	.word	0x20001648
 800f4ac:	20000c31 	.word	0x20000c31
 800f4b0:	20001650 	.word	0x20001650
 800f4b4:	20000c94 	.word	0x20000c94
 800f4b8:	20000c8c 	.word	0x20000c8c
 800f4bc:	200001ac 	.word	0x200001ac
 800f4c0:	20000da0 	.word	0x20000da0
 800f4c4:	20000c78 	.word	0x20000c78
 800f4c8:	20000b9c 	.word	0x20000b9c

0800f4cc <searchC2>:
//searchC2
//aスラローム走行でgoal座標に進む　重ね探索用
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchC2(){
 800f4cc:	b590      	push	{r4, r7, lr}
 800f4ce:	b083      	sub	sp, #12
 800f4d0:	af00      	add	r7, sp, #0

	if(MF.FLAG.SRC2){
 800f4d2:	4bab      	ldr	r3, [pc, #684]	; (800f780 <searchC2+0x2b4>)
 800f4d4:	881b      	ldrh	r3, [r3, #0]
 800f4d6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800f4da:	b2db      	uxtb	r3, r3
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d001      	beq.n	800f4e4 <searchC2+0x18>
		load_map_from_eeprom();
 800f4e0:	f002 fdfe 	bl	80120e0 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(!MF.FLAG.SCND)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800f4e4:	4ba6      	ldr	r3, [pc, #664]	; (800f780 <searchC2+0x2b4>)
 800f4e6:	881b      	ldrh	r3, [r3, #0]
 800f4e8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f4ec:	b2db      	uxtb	r3, r3
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d101      	bne.n	800f4f6 <searchC2+0x2a>
 800f4f2:	f002 fe6d 	bl	80121d0 <get_wall_info>
	if(!MF.FLAG.SCND)wall_info &= ~0x88;									//a前壁は存在するはずがないので削除する
 800f4f6:	4ba2      	ldr	r3, [pc, #648]	; (800f780 <searchC2+0x2b4>)
 800f4f8:	881b      	ldrh	r3, [r3, #0]
 800f4fa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f4fe:	b2db      	uxtb	r3, r3
 800f500:	2b00      	cmp	r3, #0
 800f502:	d106      	bne.n	800f512 <searchC2+0x46>
 800f504:	4b9f      	ldr	r3, [pc, #636]	; (800f784 <searchC2+0x2b8>)
 800f506:	781b      	ldrb	r3, [r3, #0]
 800f508:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800f50c:	b2da      	uxtb	r2, r3
 800f50e:	4b9d      	ldr	r3, [pc, #628]	; (800f784 <searchC2+0x2b8>)
 800f510:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800f512:	4b9b      	ldr	r3, [pc, #620]	; (800f780 <searchC2+0x2b4>)
 800f514:	881b      	ldrh	r3, [r3, #0]
 800f516:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f51a:	b2db      	uxtb	r3, r3
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d101      	bne.n	800f524 <searchC2+0x58>
 800f520:	f000 ff0e 	bl	8010340 <write_map>

	if(MF2.FLAG.GOAL){
 800f524:	4b98      	ldr	r3, [pc, #608]	; (800f788 <searchC2+0x2bc>)
 800f526:	881b      	ldrh	r3, [r3, #0]
 800f528:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800f52c:	b2db      	uxtb	r3, r3
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d00b      	beq.n	800f54a <searchC2+0x7e>
		HAL_Delay(500);
 800f532:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f536:	f7f1 fd71 	bl	800101c <HAL_Delay>
		rotate_180();											//180度回転
 800f53a:	f7f7 f905 	bl	8006748 <rotate_180>
//		driveC2(SETPOS_BACK);         							//a尻を当てる程度に後退。回転後に停止する
//		degree_z = target_degree_z;
//		start_mode = 0;
		start_mode = 1;
 800f53e:	4b93      	ldr	r3, [pc, #588]	; (800f78c <searchC2+0x2c0>)
 800f540:	2201      	movs	r2, #1
 800f542:	701a      	strb	r2, [r3, #0]
		goal_mode = 1;
 800f544:	4b92      	ldr	r3, [pc, #584]	; (800f790 <searchC2+0x2c4>)
 800f546:	2201      	movs	r2, #1
 800f548:	701a      	strb	r2, [r3, #0]
	}

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800f54a:	f7f6 fa15 	bl	8005978 <start_sectionA>
	adv_pos();
 800f54e:	f000 fe33 	bl	80101b8 <adv_pos>

	//====a歩数マップ・経路作成====
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800f552:	4b8b      	ldr	r3, [pc, #556]	; (800f780 <searchC2+0x2b4>)
 800f554:	881b      	ldrh	r3, [r3, #0]
 800f556:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f55a:	b2db      	uxtb	r3, r3
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d101      	bne.n	800f564 <searchC2+0x98>
 800f560:	f000 feee 	bl	8010340 <write_map>
	r_cnt = 0;																//a経路カウンタの初期化
 800f564:	4b8b      	ldr	r3, [pc, #556]	; (800f794 <searchC2+0x2c8>)
 800f566:	2200      	movs	r2, #0
 800f568:	701a      	strb	r2, [r3, #0]
	make_smap();															//a歩数マップ作成
 800f56a:	f001 f8dd 	bl	8010728 <make_smap>
	make_route();															//a最短経路探索（route配列に動作が格納される）
 800f56e:	f001 fc99 	bl	8010ea4 <make_route>
	uint8_t x, y;															//X，Y座標

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){												//route配列によって進行を決定。経路カウンタを進める
 800f572:	4b88      	ldr	r3, [pc, #544]	; (800f794 <searchC2+0x2c8>)
 800f574:	781b      	ldrb	r3, [r3, #0]
 800f576:	1c5a      	adds	r2, r3, #1
 800f578:	b2d1      	uxtb	r1, r2
 800f57a:	4a86      	ldr	r2, [pc, #536]	; (800f794 <searchC2+0x2c8>)
 800f57c:	7011      	strb	r1, [r2, #0]
 800f57e:	461a      	mov	r2, r3
 800f580:	4b85      	ldr	r3, [pc, #532]	; (800f798 <searchC2+0x2cc>)
 800f582:	5c9b      	ldrb	r3, [r3, r2]
 800f584:	2b22      	cmp	r3, #34	; 0x22
 800f586:	d07f      	beq.n	800f688 <searchC2+0x1bc>
 800f588:	2b22      	cmp	r3, #34	; 0x22
 800f58a:	dc03      	bgt.n	800f594 <searchC2+0xc8>
 800f58c:	2b11      	cmp	r3, #17
 800f58e:	f000 808b 	beq.w	800f6a8 <searchC2+0x1dc>
 800f592:	e08c      	b.n	800f6ae <searchC2+0x1e2>
 800f594:	2b44      	cmp	r3, #68	; 0x44
 800f596:	d074      	beq.n	800f682 <searchC2+0x1b6>
 800f598:	2b88      	cmp	r3, #136	; 0x88
 800f59a:	f040 8088 	bne.w	800f6ae <searchC2+0x1e2>
			//----a前進----
			case 0x88:
				if(route[r_cnt] == 0x88 && MF.FLAG.ACCL2){
 800f59e:	4b7d      	ldr	r3, [pc, #500]	; (800f794 <searchC2+0x2c8>)
 800f5a0:	781b      	ldrb	r3, [r3, #0]
 800f5a2:	461a      	mov	r2, r3
 800f5a4:	4b7c      	ldr	r3, [pc, #496]	; (800f798 <searchC2+0x2cc>)
 800f5a6:	5c9b      	ldrb	r3, [r3, r2]
 800f5a8:	2b88      	cmp	r3, #136	; 0x88
 800f5aa:	d158      	bne.n	800f65e <searchC2+0x192>
 800f5ac:	4b74      	ldr	r3, [pc, #464]	; (800f780 <searchC2+0x2b4>)
 800f5ae:	881b      	ldrh	r3, [r3, #0]
 800f5b0:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800f5b4:	b2db      	uxtb	r3, r3
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d051      	beq.n	800f65e <searchC2+0x192>
					x = mouse.x;
 800f5ba:	4b78      	ldr	r3, [pc, #480]	; (800f79c <searchC2+0x2d0>)
 800f5bc:	781b      	ldrb	r3, [r3, #0]
 800f5be:	70fb      	strb	r3, [r7, #3]
					y = mouse.y;
 800f5c0:	4b76      	ldr	r3, [pc, #472]	; (800f79c <searchC2+0x2d0>)
 800f5c2:	785b      	ldrb	r3, [r3, #1]
 800f5c4:	70bb      	strb	r3, [r7, #2]
					adv_pos();
 800f5c6:	f000 fdf7 	bl	80101b8 <adv_pos>
					if((map[mouse.y][mouse.x] & 0x0f) == (map[mouse.y][mouse.x]>>4)){
 800f5ca:	4b74      	ldr	r3, [pc, #464]	; (800f79c <searchC2+0x2d0>)
 800f5cc:	785b      	ldrb	r3, [r3, #1]
 800f5ce:	b2db      	uxtb	r3, r3
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	4b72      	ldr	r3, [pc, #456]	; (800f79c <searchC2+0x2d0>)
 800f5d4:	781b      	ldrb	r3, [r3, #0]
 800f5d6:	b2db      	uxtb	r3, r3
 800f5d8:	4619      	mov	r1, r3
 800f5da:	4a71      	ldr	r2, [pc, #452]	; (800f7a0 <searchC2+0x2d4>)
 800f5dc:	0103      	lsls	r3, r0, #4
 800f5de:	4413      	add	r3, r2
 800f5e0:	440b      	add	r3, r1
 800f5e2:	781b      	ldrb	r3, [r3, #0]
 800f5e4:	f003 030f 	and.w	r3, r3, #15
 800f5e8:	4a6c      	ldr	r2, [pc, #432]	; (800f79c <searchC2+0x2d0>)
 800f5ea:	7852      	ldrb	r2, [r2, #1]
 800f5ec:	b2d2      	uxtb	r2, r2
 800f5ee:	4614      	mov	r4, r2
 800f5f0:	4a6a      	ldr	r2, [pc, #424]	; (800f79c <searchC2+0x2d0>)
 800f5f2:	7812      	ldrb	r2, [r2, #0]
 800f5f4:	b2d2      	uxtb	r2, r2
 800f5f6:	4610      	mov	r0, r2
 800f5f8:	4969      	ldr	r1, [pc, #420]	; (800f7a0 <searchC2+0x2d4>)
 800f5fa:	0122      	lsls	r2, r4, #4
 800f5fc:	440a      	add	r2, r1
 800f5fe:	4402      	add	r2, r0
 800f600:	7812      	ldrb	r2, [r2, #0]
 800f602:	0912      	lsrs	r2, r2, #4
 800f604:	b2d2      	uxtb	r2, r2
 800f606:	4293      	cmp	r3, r2
 800f608:	d111      	bne.n	800f62e <searchC2+0x162>
						if(!MF2.FLAG.HACCEL){
 800f60a:	4b5f      	ldr	r3, [pc, #380]	; (800f788 <searchC2+0x2bc>)
 800f60c:	881b      	ldrh	r3, [r3, #0]
 800f60e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f612:	b2db      	uxtb	r3, r3
 800f614:	2b00      	cmp	r3, #0
 800f616:	d107      	bne.n	800f628 <searchC2+0x15c>
							one_sectionA();
 800f618:	f7f6 fc80 	bl	8005f1c <one_sectionA>
							MF2.FLAG.HACCEL = 1;
 800f61c:	4a5a      	ldr	r2, [pc, #360]	; (800f788 <searchC2+0x2bc>)
 800f61e:	8813      	ldrh	r3, [r2, #0]
 800f620:	f043 0302 	orr.w	r3, r3, #2
 800f624:	8013      	strh	r3, [r2, #0]
 800f626:	e013      	b.n	800f650 <searchC2+0x184>
						}else{
							one_sectionU();
 800f628:	f7f6 febc 	bl	80063a4 <one_sectionU>
 800f62c:	e010      	b.n	800f650 <searchC2+0x184>
						}
					}else if(MF2.FLAG.HACCEL){
 800f62e:	4b56      	ldr	r3, [pc, #344]	; (800f788 <searchC2+0x2bc>)
 800f630:	881b      	ldrh	r3, [r3, #0]
 800f632:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f636:	b2db      	uxtb	r3, r3
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d007      	beq.n	800f64c <searchC2+0x180>
						one_sectionD();
 800f63c:	f7f6 fcf8 	bl	8006030 <one_sectionD>
						MF2.FLAG.HACCEL = 0;
 800f640:	4a51      	ldr	r2, [pc, #324]	; (800f788 <searchC2+0x2bc>)
 800f642:	8813      	ldrh	r3, [r2, #0]
 800f644:	f36f 0341 	bfc	r3, #1, #1
 800f648:	8013      	strh	r3, [r2, #0]
 800f64a:	e001      	b.n	800f650 <searchC2+0x184>
					}else{
						one_sectionU();
 800f64c:	f7f6 feaa 	bl	80063a4 <one_sectionU>
					}
					mouse.x = x;
 800f650:	4a52      	ldr	r2, [pc, #328]	; (800f79c <searchC2+0x2d0>)
 800f652:	78fb      	ldrb	r3, [r7, #3]
 800f654:	7013      	strb	r3, [r2, #0]
					mouse.y = y;
 800f656:	4a51      	ldr	r2, [pc, #324]	; (800f79c <searchC2+0x2d0>)
 800f658:	78bb      	ldrb	r3, [r7, #2]
 800f65a:	7053      	strb	r3, [r2, #1]
					one_sectionD();
					MF2.FLAG.HACCEL = 0;
				}else{
					one_sectionU();
				}
				break;
 800f65c:	e027      	b.n	800f6ae <searchC2+0x1e2>
				}else if(MF2.FLAG.HACCEL){
 800f65e:	4b4a      	ldr	r3, [pc, #296]	; (800f788 <searchC2+0x2bc>)
 800f660:	881b      	ldrh	r3, [r3, #0]
 800f662:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f666:	b2db      	uxtb	r3, r3
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d007      	beq.n	800f67c <searchC2+0x1b0>
					one_sectionD();
 800f66c:	f7f6 fce0 	bl	8006030 <one_sectionD>
					MF2.FLAG.HACCEL = 0;
 800f670:	4a45      	ldr	r2, [pc, #276]	; (800f788 <searchC2+0x2bc>)
 800f672:	8813      	ldrh	r3, [r2, #0]
 800f674:	f36f 0341 	bfc	r3, #1, #1
 800f678:	8013      	strh	r3, [r2, #0]
				break;
 800f67a:	e018      	b.n	800f6ae <searchC2+0x1e2>
					one_sectionU();
 800f67c:	f7f6 fe92 	bl	80063a4 <one_sectionU>
				break;
 800f680:	e015      	b.n	800f6ae <searchC2+0x1e2>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 800f682:	f7f7 f939 	bl	80068f8 <slalom_R90>
				break;
 800f686:	e012      	b.n	800f6ae <searchC2+0x1e2>
			//----180回転----
			case 0x22:
				half_sectionD();
 800f688:	f7f6 fb0e 	bl	8005ca8 <half_sectionD>
				rotate_180();
 800f68c:	f7f7 f85c 	bl	8006748 <rotate_180>
				if(wall_info & 0x88){
 800f690:	4b3c      	ldr	r3, [pc, #240]	; (800f784 <searchC2+0x2b8>)
 800f692:	781b      	ldrb	r3, [r3, #0]
 800f694:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d002      	beq.n	800f6a2 <searchC2+0x1d6>
					set_position();
 800f69c:	f7f6 f938 	bl	8005910 <set_position>
				}else{
					half_sectionA();
				}
				break;
 800f6a0:	e005      	b.n	800f6ae <searchC2+0x1e2>
					half_sectionA();
 800f6a2:	f7f6 fa9b 	bl	8005bdc <half_sectionA>
				break;
 800f6a6:	e002      	b.n	800f6ae <searchC2+0x1e2>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800f6a8:	f7f7 fa90 	bl	8006bcc <slalom_L90>
				break;
 800f6ac:	bf00      	nop
		}
		adv_pos();
 800f6ae:	f000 fd83 	bl	80101b8 <adv_pos>
		if(!MF.FLAG.SCND)conf_route();
 800f6b2:	4b33      	ldr	r3, [pc, #204]	; (800f780 <searchC2+0x2b4>)
 800f6b4:	881b      	ldrh	r3, [r3, #0]
 800f6b6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f6ba:	b2db      	uxtb	r3, r3
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d101      	bne.n	800f6c4 <searchC2+0x1f8>
 800f6c0:	f000 fdb4 	bl	801022c <conf_route>

//	}while((mouse.x != goal_x) || (mouse.y != goal_y));
	}while(smap[mouse.y][mouse.x] != 0);
 800f6c4:	4b35      	ldr	r3, [pc, #212]	; (800f79c <searchC2+0x2d0>)
 800f6c6:	785b      	ldrb	r3, [r3, #1]
 800f6c8:	b2db      	uxtb	r3, r3
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	4b33      	ldr	r3, [pc, #204]	; (800f79c <searchC2+0x2d0>)
 800f6ce:	781b      	ldrb	r3, [r3, #0]
 800f6d0:	b2db      	uxtb	r3, r3
 800f6d2:	4619      	mov	r1, r3
 800f6d4:	4a33      	ldr	r2, [pc, #204]	; (800f7a4 <searchC2+0x2d8>)
 800f6d6:	0103      	lsls	r3, r0, #4
 800f6d8:	440b      	add	r3, r1
 800f6da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	f47f af47 	bne.w	800f572 <searchC2+0xa6>

	for(int j=0; j<goal_mode-1; j++){
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	607b      	str	r3, [r7, #4]
 800f6e8:	e006      	b.n	800f6f8 <searchC2+0x22c>
		one_sectionU();
 800f6ea:	f7f6 fe5b 	bl	80063a4 <one_sectionU>
		adv_pos();
 800f6ee:	f000 fd63 	bl	80101b8 <adv_pos>
	for(int j=0; j<goal_mode-1; j++){
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	3301      	adds	r3, #1
 800f6f6:	607b      	str	r3, [r7, #4]
 800f6f8:	4b25      	ldr	r3, [pc, #148]	; (800f790 <searchC2+0x2c4>)
 800f6fa:	781b      	ldrb	r3, [r3, #0]
 800f6fc:	3b01      	subs	r3, #1
 800f6fe:	687a      	ldr	r2, [r7, #4]
 800f700:	429a      	cmp	r2, r3
 800f702:	dbf2      	blt.n	800f6ea <searchC2+0x21e>
	}
	half_sectionD();
 800f704:	f7f6 fad0 	bl	8005ca8 <half_sectionD>

	set_positionF();
 800f708:	f7f6 f918 	bl	800593c <set_positionF>

	MF2.FLAG.GOAL = (MF2.FLAG.GOAL+1)%2;
 800f70c:	4b1e      	ldr	r3, [pc, #120]	; (800f788 <searchC2+0x2bc>)
 800f70e:	881b      	ldrh	r3, [r3, #0]
 800f710:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800f714:	b2db      	uxtb	r3, r3
 800f716:	3301      	adds	r3, #1
 800f718:	2b00      	cmp	r3, #0
 800f71a:	f003 0301 	and.w	r3, r3, #1
 800f71e:	bfb8      	it	lt
 800f720:	425b      	neglt	r3, r3
 800f722:	f003 0301 	and.w	r3, r3, #1
 800f726:	b2d9      	uxtb	r1, r3
 800f728:	4a17      	ldr	r2, [pc, #92]	; (800f788 <searchC2+0x2bc>)
 800f72a:	8813      	ldrh	r3, [r2, #0]
 800f72c:	f361 2308 	bfi	r3, r1, #8, #1
 800f730:	8013      	strh	r3, [r2, #0]
	if(!MF2.FLAG.GOAL){
 800f732:	4b15      	ldr	r3, [pc, #84]	; (800f788 <searchC2+0x2bc>)
 800f734:	881b      	ldrh	r3, [r3, #0]
 800f736:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800f73a:	b2db      	uxtb	r3, r3
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d112      	bne.n	800f766 <searchC2+0x29a>
		HAL_Delay(500);
 800f740:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f744:	f7f1 fc6a 	bl	800101c <HAL_Delay>
		rotate_180();										//180度回転
 800f748:	f7f6 fffe 	bl	8006748 <rotate_180>
		driveC2(SETPOS_BACK);         						//a尻を当てる程度に後退。回転後に停止する
 800f74c:	2064      	movs	r0, #100	; 0x64
 800f74e:	f7f5 fe59 	bl	8005404 <driveC2>
		degree_z = target_degree_z;
 800f752:	4b15      	ldr	r3, [pc, #84]	; (800f7a8 <searchC2+0x2dc>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	4a15      	ldr	r2, [pc, #84]	; (800f7ac <searchC2+0x2e0>)
 800f758:	6013      	str	r3, [r2, #0]
		start_mode = 0;
 800f75a:	4b0c      	ldr	r3, [pc, #48]	; (800f78c <searchC2+0x2c0>)
 800f75c:	2200      	movs	r2, #0
 800f75e:	701a      	strb	r2, [r3, #0]
		goal_mode = 1;
 800f760:	4b0b      	ldr	r3, [pc, #44]	; (800f790 <searchC2+0x2c4>)
 800f762:	2201      	movs	r2, #1
 800f764:	701a      	strb	r2, [r3, #0]
	}

	if(!MF.FLAG.SCND){
 800f766:	4b06      	ldr	r3, [pc, #24]	; (800f780 <searchC2+0x2b4>)
 800f768:	881b      	ldrh	r3, [r3, #0]
 800f76a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f76e:	b2db      	uxtb	r3, r3
 800f770:	2b00      	cmp	r3, #0
 800f772:	d101      	bne.n	800f778 <searchC2+0x2ac>
		store_map_in_eeprom();
 800f774:	f002 fc7a 	bl	801206c <store_map_in_eeprom>
	}
}
 800f778:	bf00      	nop
 800f77a:	370c      	adds	r7, #12
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bd90      	pop	{r4, r7, pc}
 800f780:	20000fa8 	.word	0x20000fa8
 800f784:	200002c8 	.word	0x200002c8
 800f788:	20000fa4 	.word	0x20000fa4
 800f78c:	20001648 	.word	0x20001648
 800f790:	20000c31 	.word	0x20000c31
 800f794:	20001650 	.word	0x20001650
 800f798:	20000c94 	.word	0x20000c94
 800f79c:	20000c8c 	.word	0x20000c8c
 800f7a0:	200001ac 	.word	0x200001ac
 800f7a4:	20000da0 	.word	0x20000da0
 800f7a8:	20000c78 	.word	0x20000c78
 800f7ac:	20000b9c 	.word	0x20000b9c

0800f7b0 <searchD>:
//searchD
//aスラローム走行+既知区間加速でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchD(){
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b082      	sub	sp, #8
 800f7b4:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800f7b6:	4b6a      	ldr	r3, [pc, #424]	; (800f960 <searchD+0x1b0>)
 800f7b8:	881b      	ldrh	r3, [r3, #0]
 800f7ba:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f7be:	b2db      	uxtb	r3, r3
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d001      	beq.n	800f7c8 <searchD+0x18>
		load_map_from_eeprom();
 800f7c4:	f002 fc8c 	bl	80120e0 <load_map_from_eeprom>
//	if(!MF.FLAG.SCND)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
//	if(!MF.FLAG.SCND)wall_info &= ~0x88;									//a前壁は存在するはずがないので削除する
//	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800f7c8:	f7f6 f8d6 	bl	8005978 <start_sectionA>
	adv_pos();
 800f7cc:	f000 fcf4 	bl	80101b8 <adv_pos>

	//====a歩数マップ・経路作成====
//	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
	r_cnt = 0;												//a経路カウンタの初期化
 800f7d0:	4b64      	ldr	r3, [pc, #400]	; (800f964 <searchD+0x1b4>)
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800f7d6:	f000 ffa7 	bl	8010728 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800f7da:	f001 fb63 	bl	8010ea4 <make_route>

	MF2.FLAG.HACCEL = 0;
 800f7de:	4a62      	ldr	r2, [pc, #392]	; (800f968 <searchD+0x1b8>)
 800f7e0:	8813      	ldrh	r3, [r2, #0]
 800f7e2:	f36f 0341 	bfc	r3, #1, #1
 800f7e6:	8013      	strh	r3, [r2, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800f7e8:	4b5e      	ldr	r3, [pc, #376]	; (800f964 <searchD+0x1b4>)
 800f7ea:	781b      	ldrb	r3, [r3, #0]
 800f7ec:	1c5a      	adds	r2, r3, #1
 800f7ee:	b2d1      	uxtb	r1, r2
 800f7f0:	4a5c      	ldr	r2, [pc, #368]	; (800f964 <searchD+0x1b4>)
 800f7f2:	7011      	strb	r1, [r2, #0]
 800f7f4:	461a      	mov	r2, r3
 800f7f6:	4b5d      	ldr	r3, [pc, #372]	; (800f96c <searchD+0x1bc>)
 800f7f8:	5c9b      	ldrb	r3, [r3, r2]
 800f7fa:	2b22      	cmp	r3, #34	; 0x22
 800f7fc:	d05d      	beq.n	800f8ba <searchD+0x10a>
 800f7fe:	2b22      	cmp	r3, #34	; 0x22
 800f800:	dc02      	bgt.n	800f808 <searchD+0x58>
 800f802:	2b11      	cmp	r3, #17
 800f804:	d069      	beq.n	800f8da <searchD+0x12a>
 800f806:	e06b      	b.n	800f8e0 <searchD+0x130>
 800f808:	2b44      	cmp	r3, #68	; 0x44
 800f80a:	d053      	beq.n	800f8b4 <searchD+0x104>
 800f80c:	2b88      	cmp	r3, #136	; 0x88
 800f80e:	d167      	bne.n	800f8e0 <searchD+0x130>
			//----a前進----
			case 0x88:
				if(MF.FLAG.SCND && MF.FLAG.ACCL2){
 800f810:	4b53      	ldr	r3, [pc, #332]	; (800f960 <searchD+0x1b0>)
 800f812:	881b      	ldrh	r3, [r3, #0]
 800f814:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f818:	b2db      	uxtb	r3, r3
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d046      	beq.n	800f8ac <searchD+0xfc>
 800f81e:	4b50      	ldr	r3, [pc, #320]	; (800f960 <searchD+0x1b0>)
 800f820:	881b      	ldrh	r3, [r3, #0]
 800f822:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800f826:	b2db      	uxtb	r3, r3
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d03f      	beq.n	800f8ac <searchD+0xfc>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (MF2.FLAG.HACCEL == 0)){
 800f82c:	4b4d      	ldr	r3, [pc, #308]	; (800f964 <searchD+0x1b4>)
 800f82e:	781b      	ldrb	r3, [r3, #0]
 800f830:	3b01      	subs	r3, #1
 800f832:	4a4e      	ldr	r2, [pc, #312]	; (800f96c <searchD+0x1bc>)
 800f834:	5cd2      	ldrb	r2, [r2, r3]
 800f836:	4b4b      	ldr	r3, [pc, #300]	; (800f964 <searchD+0x1b4>)
 800f838:	781b      	ldrb	r3, [r3, #0]
 800f83a:	4619      	mov	r1, r3
 800f83c:	4b4b      	ldr	r3, [pc, #300]	; (800f96c <searchD+0x1bc>)
 800f83e:	5c5b      	ldrb	r3, [r3, r1]
 800f840:	4013      	ands	r3, r2
 800f842:	b2db      	uxtb	r3, r3
 800f844:	2b88      	cmp	r3, #136	; 0x88
 800f846:	d115      	bne.n	800f874 <searchD+0xc4>
 800f848:	4b46      	ldr	r3, [pc, #280]	; (800f964 <searchD+0x1b4>)
 800f84a:	781b      	ldrb	r3, [r3, #0]
 800f84c:	461a      	mov	r2, r3
 800f84e:	4b47      	ldr	r3, [pc, #284]	; (800f96c <searchD+0x1bc>)
 800f850:	5c9b      	ldrb	r3, [r3, r2]
 800f852:	2bff      	cmp	r3, #255	; 0xff
 800f854:	d00e      	beq.n	800f874 <searchD+0xc4>
 800f856:	4b44      	ldr	r3, [pc, #272]	; (800f968 <searchD+0x1b8>)
 800f858:	881b      	ldrh	r3, [r3, #0]
 800f85a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f85e:	b2db      	uxtb	r3, r3
 800f860:	2b00      	cmp	r3, #0
 800f862:	d107      	bne.n	800f874 <searchD+0xc4>
						one_sectionA();
 800f864:	f7f6 fb5a 	bl	8005f1c <one_sectionA>
						MF2.FLAG.HACCEL = 1;
 800f868:	4a3f      	ldr	r2, [pc, #252]	; (800f968 <searchD+0x1b8>)
 800f86a:	8813      	ldrh	r3, [r2, #0]
 800f86c:	f043 0302 	orr.w	r3, r3, #2
 800f870:	8013      	strh	r3, [r2, #0]
 800f872:	e01a      	b.n	800f8aa <searchD+0xfa>
					}
					else if((route[r_cnt] & 0x55) && (MF2.FLAG.HACCEL)){
 800f874:	4b3b      	ldr	r3, [pc, #236]	; (800f964 <searchD+0x1b4>)
 800f876:	781b      	ldrb	r3, [r3, #0]
 800f878:	461a      	mov	r2, r3
 800f87a:	4b3c      	ldr	r3, [pc, #240]	; (800f96c <searchD+0x1bc>)
 800f87c:	5c9b      	ldrb	r3, [r3, r2]
 800f87e:	f003 0355 	and.w	r3, r3, #85	; 0x55
 800f882:	2b00      	cmp	r3, #0
 800f884:	d00e      	beq.n	800f8a4 <searchD+0xf4>
 800f886:	4b38      	ldr	r3, [pc, #224]	; (800f968 <searchD+0x1b8>)
 800f888:	881b      	ldrh	r3, [r3, #0]
 800f88a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f88e:	b2db      	uxtb	r3, r3
 800f890:	2b00      	cmp	r3, #0
 800f892:	d007      	beq.n	800f8a4 <searchD+0xf4>
						one_sectionD();
 800f894:	f7f6 fbcc 	bl	8006030 <one_sectionD>
						MF2.FLAG.HACCEL = 0;
 800f898:	4a33      	ldr	r2, [pc, #204]	; (800f968 <searchD+0x1b8>)
 800f89a:	8813      	ldrh	r3, [r2, #0]
 800f89c:	f36f 0341 	bfc	r3, #1, #1
 800f8a0:	8013      	strh	r3, [r2, #0]
 800f8a2:	e002      	b.n	800f8aa <searchD+0xfa>
					}else{
						one_sectionU();
 800f8a4:	f7f6 fd7e 	bl	80063a4 <one_sectionU>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (MF2.FLAG.HACCEL == 0)){
 800f8a8:	e003      	b.n	800f8b2 <searchD+0x102>
 800f8aa:	e002      	b.n	800f8b2 <searchD+0x102>
					}
				}else{
					one_sectionU();
 800f8ac:	f7f6 fd7a 	bl	80063a4 <one_sectionU>
				}
				break;
 800f8b0:	e016      	b.n	800f8e0 <searchD+0x130>
 800f8b2:	e015      	b.n	800f8e0 <searchD+0x130>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 800f8b4:	f7f7 f820 	bl	80068f8 <slalom_R90>
				break;
 800f8b8:	e012      	b.n	800f8e0 <searchD+0x130>
			//----180回転----
			case 0x22:
				half_sectionD();
 800f8ba:	f7f6 f9f5 	bl	8005ca8 <half_sectionD>
				rotate_180();
 800f8be:	f7f6 ff43 	bl	8006748 <rotate_180>
				if(wall_info & 0x88){
 800f8c2:	4b2b      	ldr	r3, [pc, #172]	; (800f970 <searchD+0x1c0>)
 800f8c4:	781b      	ldrb	r3, [r3, #0]
 800f8c6:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d002      	beq.n	800f8d4 <searchD+0x124>
					set_position();
 800f8ce:	f7f6 f81f 	bl	8005910 <set_position>
				}else{
					half_sectionA();
				}
				break;
 800f8d2:	e005      	b.n	800f8e0 <searchD+0x130>
					half_sectionA();
 800f8d4:	f7f6 f982 	bl	8005bdc <half_sectionA>
				break;
 800f8d8:	e002      	b.n	800f8e0 <searchD+0x130>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800f8da:	f7f7 f977 	bl	8006bcc <slalom_L90>
				break;
 800f8de:	bf00      	nop
		}
		adv_pos();
 800f8e0:	f000 fc6a 	bl	80101b8 <adv_pos>
//		if(!MF.FLAG.SCND)conf_route();

//	}while((mouse.x != goal_x) || (mouse.y != goal_y));
	}while(smap[mouse.y][mouse.x] != 0);
 800f8e4:	4b23      	ldr	r3, [pc, #140]	; (800f974 <searchD+0x1c4>)
 800f8e6:	785b      	ldrb	r3, [r3, #1]
 800f8e8:	b2db      	uxtb	r3, r3
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	4b21      	ldr	r3, [pc, #132]	; (800f974 <searchD+0x1c4>)
 800f8ee:	781b      	ldrb	r3, [r3, #0]
 800f8f0:	b2db      	uxtb	r3, r3
 800f8f2:	4619      	mov	r1, r3
 800f8f4:	4a20      	ldr	r2, [pc, #128]	; (800f978 <searchD+0x1c8>)
 800f8f6:	0103      	lsls	r3, r0, #4
 800f8f8:	440b      	add	r3, r1
 800f8fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	f47f af72 	bne.w	800f7e8 <searchD+0x38>

	for(int j=0; j<goal_mode-1; j++){
 800f904:	2300      	movs	r3, #0
 800f906:	607b      	str	r3, [r7, #4]
 800f908:	e006      	b.n	800f918 <searchD+0x168>
		one_sectionU();
 800f90a:	f7f6 fd4b 	bl	80063a4 <one_sectionU>
		adv_pos();
 800f90e:	f000 fc53 	bl	80101b8 <adv_pos>
	for(int j=0; j<goal_mode-1; j++){
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	3301      	adds	r3, #1
 800f916:	607b      	str	r3, [r7, #4]
 800f918:	4b18      	ldr	r3, [pc, #96]	; (800f97c <searchD+0x1cc>)
 800f91a:	781b      	ldrb	r3, [r3, #0]
 800f91c:	3b01      	subs	r3, #1
 800f91e:	687a      	ldr	r2, [r7, #4]
 800f920:	429a      	cmp	r2, r3
 800f922:	dbf2      	blt.n	800f90a <searchD+0x15a>
	}
	half_sectionD();
 800f924:	f7f6 f9c0 	bl	8005ca8 <half_sectionD>
	set_positionF();
 800f928:	f7f6 f808 	bl	800593c <set_positionF>

	HAL_Delay(500);
 800f92c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f930:	f7f1 fb74 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800f934:	f7f6 ff08 	bl	8006748 <rotate_180>
//	driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
//	degree_z = target_degree_z;
//	start_mode = 0;
	start_mode = 1;
 800f938:	4b11      	ldr	r3, [pc, #68]	; (800f980 <searchD+0x1d0>)
 800f93a:	2201      	movs	r2, #1
 800f93c:	701a      	strb	r2, [r3, #0]
	goal_mode = 1;
 800f93e:	4b0f      	ldr	r3, [pc, #60]	; (800f97c <searchD+0x1cc>)
 800f940:	2201      	movs	r2, #1
 800f942:	701a      	strb	r2, [r3, #0]

	if(!MF.FLAG.SCND){
 800f944:	4b06      	ldr	r3, [pc, #24]	; (800f960 <searchD+0x1b0>)
 800f946:	881b      	ldrh	r3, [r3, #0]
 800f948:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f94c:	b2db      	uxtb	r3, r3
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d101      	bne.n	800f956 <searchD+0x1a6>
		store_map_in_eeprom();
 800f952:	f002 fb8b 	bl	801206c <store_map_in_eeprom>
	}
}
 800f956:	bf00      	nop
 800f958:	3708      	adds	r7, #8
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}
 800f95e:	bf00      	nop
 800f960:	20000fa8 	.word	0x20000fa8
 800f964:	20001650 	.word	0x20001650
 800f968:	20000fa4 	.word	0x20000fa4
 800f96c:	20000c94 	.word	0x20000c94
 800f970:	200002c8 	.word	0x200002c8
 800f974:	20000c8c 	.word	0x20000c8c
 800f978:	20000da0 	.word	0x20000da0
 800f97c:	20000c31 	.word	0x20000c31
 800f980:	20001648 	.word	0x20001648

0800f984 <searchE>:
//searchE
//a未知壁を含むマスを仮goal座標とし、スラローム連続走行で全マスに進む。仮goalを連続的に変化させる。全面探索終了後は半区画減速
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchE(){
 800f984:	b580      	push	{r7, lr}
 800f986:	b082      	sub	sp, #8
 800f988:	af00      	add	r7, sp, #0

	int i = 0;
 800f98a:	2300      	movs	r3, #0
 800f98c:	607b      	str	r3, [r7, #4]
	int j = 0;
 800f98e:	2300      	movs	r3, #0
 800f990:	603b      	str	r3, [r7, #0]
	do {
		if(i == 0){
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d111      	bne.n	800f9bc <searchE+0x38>
			//====a前に壁が無い想定で問答無用で前進====
			half_sectionA();
 800f998:	f7f6 f920 	bl	8005bdc <half_sectionA>
			adv_pos();
 800f99c:	f000 fc0c 	bl	80101b8 <adv_pos>
			write_map();														//地図の初期化
 800f9a0:	f000 fcce 	bl	8010340 <write_map>

			//====a歩数等初期化====
			m_step = r_cnt = 0;													//歩数と経路カウンタの初期化
 800f9a4:	4b44      	ldr	r3, [pc, #272]	; (800fab8 <searchE+0x134>)
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	701a      	strb	r2, [r3, #0]
 800f9aa:	4b44      	ldr	r3, [pc, #272]	; (800fabc <searchE+0x138>)
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	801a      	strh	r2, [r3, #0]
			find_pregoal();														//仮goalまでの歩数マップの初期化
 800f9b0:	f001 fbd8 	bl	8011164 <find_pregoal>
			make_smap2();
 800f9b4:	f001 fdca 	bl	801154c <make_smap2>
			make_route();														//最短経路探索(route配列に動作が格納される)
 800f9b8:	f001 fa74 	bl	8010ea4 <make_route>
		}

		//====a探索走行====
		do {
			//----a進行----
			switch (route[r_cnt++]) {										//route配列によって進行を決定。経路カウンタを進める
 800f9bc:	4b3e      	ldr	r3, [pc, #248]	; (800fab8 <searchE+0x134>)
 800f9be:	781b      	ldrb	r3, [r3, #0]
 800f9c0:	1c5a      	adds	r2, r3, #1
 800f9c2:	b2d1      	uxtb	r1, r2
 800f9c4:	4a3c      	ldr	r2, [pc, #240]	; (800fab8 <searchE+0x134>)
 800f9c6:	7011      	strb	r1, [r2, #0]
 800f9c8:	461a      	mov	r2, r3
 800f9ca:	4b3d      	ldr	r3, [pc, #244]	; (800fac0 <searchE+0x13c>)
 800f9cc:	5c9b      	ldrb	r3, [r3, r2]
 800f9ce:	2b22      	cmp	r3, #34	; 0x22
 800f9d0:	d00e      	beq.n	800f9f0 <searchE+0x6c>
 800f9d2:	2b22      	cmp	r3, #34	; 0x22
 800f9d4:	dc02      	bgt.n	800f9dc <searchE+0x58>
 800f9d6:	2b11      	cmp	r3, #17
 800f9d8:	d01a      	beq.n	800fa10 <searchE+0x8c>
 800f9da:	e01c      	b.n	800fa16 <searchE+0x92>
 800f9dc:	2b44      	cmp	r3, #68	; 0x44
 800f9de:	d004      	beq.n	800f9ea <searchE+0x66>
 800f9e0:	2b88      	cmp	r3, #136	; 0x88
 800f9e2:	d118      	bne.n	800fa16 <searchE+0x92>
				//----a前進----
			case 0x88:
				one_sectionU();
 800f9e4:	f7f6 fcde 	bl	80063a4 <one_sectionU>
				break;
 800f9e8:	e015      	b.n	800fa16 <searchE+0x92>
				//----a右折----
			case 0x44:
				slalom_R90();
 800f9ea:	f7f6 ff85 	bl	80068f8 <slalom_R90>
				break;
 800f9ee:	e012      	b.n	800fa16 <searchE+0x92>
				//----180回転----
			case 0x22:
				half_sectionD();
 800f9f0:	f7f6 f95a 	bl	8005ca8 <half_sectionD>
				rotate_180();
 800f9f4:	f7f6 fea8 	bl	8006748 <rotate_180>
				if(wall_info & 0x88){
 800f9f8:	4b32      	ldr	r3, [pc, #200]	; (800fac4 <searchE+0x140>)
 800f9fa:	781b      	ldrb	r3, [r3, #0]
 800f9fc:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d002      	beq.n	800fa0a <searchE+0x86>
					set_position();
 800fa04:	f7f5 ff84 	bl	8005910 <set_position>
				}else{
					half_sectionA();
				}
				break;
 800fa08:	e005      	b.n	800fa16 <searchE+0x92>
					half_sectionA();
 800fa0a:	f7f6 f8e7 	bl	8005bdc <half_sectionA>
				break;
 800fa0e:	e002      	b.n	800fa16 <searchE+0x92>
				//----a左折----
			case 0x11:
				slalom_L90();
 800fa10:	f7f7 f8dc 	bl	8006bcc <slalom_L90>
				break;
 800fa14:	bf00      	nop
			}
			adv_pos();														//aマイクロマウス内部位置情報でも前進処理
 800fa16:	f000 fbcf 	bl	80101b8 <adv_pos>
			j++;
 800fa1a:	683b      	ldr	r3, [r7, #0]
 800fa1c:	3301      	adds	r3, #1
 800fa1e:	603b      	str	r3, [r7, #0]
			if (j > 150) break;												//a移動マス数が250以上になった場合全面探索を中止
 800fa20:	683b      	ldr	r3, [r7, #0]
 800fa22:	2b96      	cmp	r3, #150	; 0x96
 800fa24:	dc0e      	bgt.n	800fa44 <searchE+0xc0>

		} while ((mouse.x != pregoal_x) || (mouse.y != pregoal_y));			//a現在座標と仮goal座標が等しくなるまで実行
 800fa26:	4b28      	ldr	r3, [pc, #160]	; (800fac8 <searchE+0x144>)
 800fa28:	781b      	ldrb	r3, [r3, #0]
 800fa2a:	b2da      	uxtb	r2, r3
 800fa2c:	4b27      	ldr	r3, [pc, #156]	; (800facc <searchE+0x148>)
 800fa2e:	781b      	ldrb	r3, [r3, #0]
 800fa30:	429a      	cmp	r2, r3
 800fa32:	d1c3      	bne.n	800f9bc <searchE+0x38>
 800fa34:	4b24      	ldr	r3, [pc, #144]	; (800fac8 <searchE+0x144>)
 800fa36:	785b      	ldrb	r3, [r3, #1]
 800fa38:	b2da      	uxtb	r2, r3
 800fa3a:	4b25      	ldr	r3, [pc, #148]	; (800fad0 <searchE+0x14c>)
 800fa3c:	781b      	ldrb	r3, [r3, #0]
 800fa3e:	429a      	cmp	r2, r3
 800fa40:	d1bc      	bne.n	800f9bc <searchE+0x38>
 800fa42:	e000      	b.n	800fa46 <searchE+0xc2>
			if (j > 150) break;												//a移動マス数が250以上になった場合全面探索を中止
 800fa44:	bf00      	nop

		get_wall_info();													//a壁情報の初期化, 後壁はなくなる
 800fa46:	f002 fbc3 	bl	80121d0 <get_wall_info>
		write_map();														//a地図の初期化
 800fa4a:	f000 fc79 	bl	8010340 <write_map>
		//printf("get pregoal, x = %d, y = %d\n", mouse.x, mouse.y);

		//====a歩数等初期化====
		m_step = r_cnt = 0;													//a歩数と経路カウンタの初期化
 800fa4e:	4b1a      	ldr	r3, [pc, #104]	; (800fab8 <searchE+0x134>)
 800fa50:	2200      	movs	r2, #0
 800fa52:	701a      	strb	r2, [r3, #0]
 800fa54:	4b19      	ldr	r3, [pc, #100]	; (800fabc <searchE+0x138>)
 800fa56:	2200      	movs	r2, #0
 800fa58:	801a      	strh	r2, [r3, #0]

		find_pregoal();														//a仮goalまでの歩数マップの初期化
 800fa5a:	f001 fb83 	bl	8011164 <find_pregoal>
		if(MF2.FLAG.ALLMAP) {
 800fa5e:	4b1d      	ldr	r3, [pc, #116]	; (800fad4 <searchE+0x150>)
 800fa60:	881b      	ldrh	r3, [r3, #0]
 800fa62:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800fa66:	b2db      	uxtb	r3, r3
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d002      	beq.n	800fa72 <searchE+0xee>
			//printf("get MF2.FLAG.ALLMAP\n");
			half_sectionD();
 800fa6c:	f7f6 f91c 	bl	8005ca8 <half_sectionD>
			break;
 800fa70:	e00e      	b.n	800fa90 <searchE+0x10c>
		}
		make_smap2();
 800fa72:	f001 fd6b 	bl	801154c <make_smap2>
		make_route();														//a最短経路探索(route配列に動作が格納される)
 800fa76:	f001 fa15 	bl	8010ea4 <make_route>

		if (j > 150) {
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	2b96      	cmp	r3, #150	; 0x96
 800fa7e:	dc06      	bgt.n	800fa8e <searchE+0x10a>
			break;															//a移動マス数が250以上になった場合全面探索を中止
		}
		i++;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	3301      	adds	r3, #1
 800fa84:	607b      	str	r3, [r7, #4]

	} while (i < 150);														//a仮goalへの到着が130回以上になった場合全面探索を中止
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	2b95      	cmp	r3, #149	; 0x95
 800fa8a:	dd82      	ble.n	800f992 <searchE+0xe>
 800fa8c:	e000      	b.n	800fa90 <searchE+0x10c>
			break;															//a移動マス数が250以上になった場合全面探索を中止
 800fa8e:	bf00      	nop

	HAL_Delay(500);
 800fa90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fa94:	f7f1 fac2 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800fa98:	f7f6 fe56 	bl	8006748 <rotate_180>

	if(!MF.FLAG.SCND){
 800fa9c:	4b0e      	ldr	r3, [pc, #56]	; (800fad8 <searchE+0x154>)
 800fa9e:	881b      	ldrh	r3, [r3, #0]
 800faa0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800faa4:	b2db      	uxtb	r3, r3
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d101      	bne.n	800faae <searchE+0x12a>
		store_map_in_eeprom();
 800faaa:	f002 fadf 	bl	801206c <store_map_in_eeprom>
	}
}
 800faae:	bf00      	nop
 800fab0:	3708      	adds	r7, #8
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bd80      	pop	{r7, pc}
 800fab6:	bf00      	nop
 800fab8:	20001650 	.word	0x20001650
 800fabc:	2000034e 	.word	0x2000034e
 800fac0:	20000c94 	.word	0x20000c94
 800fac4:	200002c8 	.word	0x200002c8
 800fac8:	20000c8c 	.word	0x20000c8c
 800facc:	20000d9c 	.word	0x20000d9c
 800fad0:	20001321 	.word	0x20001321
 800fad4:	20000fa4 	.word	0x20000fa4
 800fad8:	20000fa8 	.word	0x20000fa8

0800fadc <searchF3>:
//searchF3
//aスラローム(+既知区間加速探索走行)+pass圧縮+機体方向&位置未更新+半区画ベースでgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchF3(){
 800fadc:	b580      	push	{r7, lr}
 800fade:	b084      	sub	sp, #16
 800fae0:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800fae2:	4b62      	ldr	r3, [pc, #392]	; (800fc6c <searchF3+0x190>)
 800fae4:	881b      	ldrh	r3, [r3, #0]
 800fae6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800faea:	b2db      	uxtb	r3, r3
 800faec:	2b00      	cmp	r3, #0
 800faee:	d001      	beq.n	800faf4 <searchF3+0x18>
		load_map_from_eeprom();
 800faf0:	f002 faf6 	bl	80120e0 <load_map_from_eeprom>
	}
	pass_mode = 3;
 800faf4:	4b5e      	ldr	r3, [pc, #376]	; (800fc70 <searchF3+0x194>)
 800faf6:	2203      	movs	r2, #3
 800faf8:	701a      	strb	r2, [r3, #0]

	//====a1区画前進====
	adv_pos();
 800fafa:	f000 fb5d 	bl	80101b8 <adv_pos>

	//====a歩数マップ・経路作成====
	make_smap();											//a歩数マップ作成
 800fafe:	f000 fe13 	bl	8010728 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800fb02:	f001 f9cf 	bl	8010ea4 <make_route>

	//====pass圧縮====
	p_cnt = 0;												//a経路カウンタの初期化
 800fb06:	4b5b      	ldr	r3, [pc, #364]	; (800fc74 <searchF3+0x198>)
 800fb08:	2200      	movs	r2, #0
 800fb0a:	701a      	strb	r2, [r3, #0]
	pass_route2();
 800fb0c:	f001 fe42 	bl	8011794 <pass_route2>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800fb10:	f7f5 ff32 	bl	8005978 <start_sectionA>

	MF2.FLAG.HACCEL = 0;
 800fb14:	4a58      	ldr	r2, [pc, #352]	; (800fc78 <searchF3+0x19c>)
 800fb16:	8813      	ldrh	r3, [r2, #0]
 800fb18:	f36f 0341 	bfc	r3, #1, #1
 800fb1c:	8013      	strh	r3, [r2, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(pass[p_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800fb1e:	4b55      	ldr	r3, [pc, #340]	; (800fc74 <searchF3+0x198>)
 800fb20:	781b      	ldrb	r3, [r3, #0]
 800fb22:	1c5a      	adds	r2, r3, #1
 800fb24:	b2d1      	uxtb	r1, r2
 800fb26:	4a53      	ldr	r2, [pc, #332]	; (800fc74 <searchF3+0x198>)
 800fb28:	7011      	strb	r1, [r2, #0]
 800fb2a:	461a      	mov	r2, r3
 800fb2c:	4b53      	ldr	r3, [pc, #332]	; (800fc7c <searchF3+0x1a0>)
 800fb2e:	569b      	ldrsb	r3, [r3, r2]
 800fb30:	f113 0f04 	cmn.w	r3, #4
 800fb34:	d01e      	beq.n	800fb74 <searchF3+0x98>
 800fb36:	f113 0f04 	cmn.w	r3, #4
 800fb3a:	dc09      	bgt.n	800fb50 <searchF3+0x74>
 800fb3c:	f113 0f06 	cmn.w	r3, #6
 800fb40:	d01e      	beq.n	800fb80 <searchF3+0xa4>
 800fb42:	f113 0f06 	cmn.w	r3, #6
 800fb46:	dc18      	bgt.n	800fb7a <searchF3+0x9e>
 800fb48:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800fb4c:	d01b      	beq.n	800fb86 <searchF3+0xaa>
 800fb4e:	e01f      	b.n	800fb90 <searchF3+0xb4>
 800fb50:	f113 0f02 	cmn.w	r3, #2
 800fb54:	d008      	beq.n	800fb68 <searchF3+0x8c>
 800fb56:	f113 0f02 	cmn.w	r3, #2
 800fb5a:	db08      	blt.n	800fb6e <searchF3+0x92>
 800fb5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb60:	d116      	bne.n	800fb90 <searchF3+0xb4>
			//----a右スラローム----
			case -1:
				slalom_R90();
 800fb62:	f7f6 fec9 	bl	80068f8 <slalom_R90>
				break;
 800fb66:	e04c      	b.n	800fc02 <searchF3+0x126>

			//----a左スラローム----
			case -2:
				slalom_L90();
 800fb68:	f7f7 f830 	bl	8006bcc <slalom_L90>
				break;
 800fb6c:	e049      	b.n	800fc02 <searchF3+0x126>

			//----a大回り右90----
			case -3:
				Lslalom_R90();
 800fb6e:	f7f7 f98f 	bl	8006e90 <Lslalom_R90>
				break;
 800fb72:	e046      	b.n	800fc02 <searchF3+0x126>

			//----a大回り左90----
			case -4:
				Lslalom_L90();
 800fb74:	f7f7 fac2 	bl	80070fc <Lslalom_L90>
				break;
 800fb78:	e043      	b.n	800fc02 <searchF3+0x126>

			//----a大回り右180----
			case -5:
				Lslalom_R180();
 800fb7a:	f7f7 fbe9 	bl	8007350 <Lslalom_R180>
				break;
 800fb7e:	e040      	b.n	800fc02 <searchF3+0x126>

			//----a大回り左180----
			case -6:
				Lslalom_L180();
 800fb80:	f7f7 fd32 	bl	80075e8 <Lslalom_L180>
				break;
 800fb84:	e03d      	b.n	800fc02 <searchF3+0x126>

			//----pass配列最後(なお本来呼び出される前にゴールする)----
			case -114:
				rotate_180();
 800fb86:	f7f6 fddf 	bl	8006748 <rotate_180>
				rotate_180();
 800fb8a:	f7f6 fddd 	bl	8006748 <rotate_180>
				while(1);
 800fb8e:	e7fe      	b.n	800fb8e <searchF3+0xb2>
				break;

			//----a前進----
			default:
				if(pass[p_cnt-1] < 4){
 800fb90:	4b38      	ldr	r3, [pc, #224]	; (800fc74 <searchF3+0x198>)
 800fb92:	781b      	ldrb	r3, [r3, #0]
 800fb94:	3b01      	subs	r3, #1
 800fb96:	4a39      	ldr	r2, [pc, #228]	; (800fc7c <searchF3+0x1a0>)
 800fb98:	56d3      	ldrsb	r3, [r2, r3]
 800fb9a:	2b03      	cmp	r3, #3
 800fb9c:	dc11      	bgt.n	800fbc2 <searchF3+0xe6>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800fb9e:	2300      	movs	r3, #0
 800fba0:	60fb      	str	r3, [r7, #12]
 800fba2:	e004      	b.n	800fbae <searchF3+0xd2>
						half_sectionU();
 800fba4:	f7f6 f99a 	bl	8005edc <half_sectionU>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	3301      	adds	r3, #1
 800fbac:	60fb      	str	r3, [r7, #12]
 800fbae:	4b31      	ldr	r3, [pc, #196]	; (800fc74 <searchF3+0x198>)
 800fbb0:	781b      	ldrb	r3, [r3, #0]
 800fbb2:	3b01      	subs	r3, #1
 800fbb4:	4a31      	ldr	r2, [pc, #196]	; (800fc7c <searchF3+0x1a0>)
 800fbb6:	56d3      	ldrsb	r3, [r2, r3]
 800fbb8:	461a      	mov	r2, r3
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	4293      	cmp	r3, r2
 800fbbe:	dbf1      	blt.n	800fba4 <searchF3+0xc8>
						half_sectionU();
					}
					one_sectionD();
					MF2.FLAG.HACCEL = 0;
				}
				break;
 800fbc0:	e01e      	b.n	800fc00 <searchF3+0x124>
					one_sectionA();
 800fbc2:	f7f6 f9ab 	bl	8005f1c <one_sectionA>
					MF2.FLAG.HACCEL = 1;
 800fbc6:	4a2c      	ldr	r2, [pc, #176]	; (800fc78 <searchF3+0x19c>)
 800fbc8:	8813      	ldrh	r3, [r2, #0]
 800fbca:	f043 0302 	orr.w	r3, r3, #2
 800fbce:	8013      	strh	r3, [r2, #0]
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	60bb      	str	r3, [r7, #8]
 800fbd4:	e004      	b.n	800fbe0 <searchF3+0x104>
						half_sectionU();
 800fbd6:	f7f6 f981 	bl	8005edc <half_sectionU>
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800fbda:	68bb      	ldr	r3, [r7, #8]
 800fbdc:	3301      	adds	r3, #1
 800fbde:	60bb      	str	r3, [r7, #8]
 800fbe0:	4b24      	ldr	r3, [pc, #144]	; (800fc74 <searchF3+0x198>)
 800fbe2:	781b      	ldrb	r3, [r3, #0]
 800fbe4:	3b01      	subs	r3, #1
 800fbe6:	4a25      	ldr	r2, [pc, #148]	; (800fc7c <searchF3+0x1a0>)
 800fbe8:	56d3      	ldrsb	r3, [r2, r3]
 800fbea:	3b04      	subs	r3, #4
 800fbec:	68ba      	ldr	r2, [r7, #8]
 800fbee:	429a      	cmp	r2, r3
 800fbf0:	dbf1      	blt.n	800fbd6 <searchF3+0xfa>
					one_sectionD();
 800fbf2:	f7f6 fa1d 	bl	8006030 <one_sectionD>
					MF2.FLAG.HACCEL = 0;
 800fbf6:	4a20      	ldr	r2, [pc, #128]	; (800fc78 <searchF3+0x19c>)
 800fbf8:	8813      	ldrh	r3, [r2, #0]
 800fbfa:	f36f 0341 	bfc	r3, #1, #1
 800fbfe:	8013      	strh	r3, [r2, #0]
				break;
 800fc00:	bf00      	nop
		}
	}while(pass[p_cnt] != -114);
 800fc02:	4b1c      	ldr	r3, [pc, #112]	; (800fc74 <searchF3+0x198>)
 800fc04:	781b      	ldrb	r3, [r3, #0]
 800fc06:	461a      	mov	r2, r3
 800fc08:	4b1c      	ldr	r3, [pc, #112]	; (800fc7c <searchF3+0x1a0>)
 800fc0a:	569b      	ldrsb	r3, [r3, r2]
 800fc0c:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800fc10:	d185      	bne.n	800fb1e <searchF3+0x42>

	mouse.x = goal_x;
 800fc12:	4b1b      	ldr	r3, [pc, #108]	; (800fc80 <searchF3+0x1a4>)
 800fc14:	781a      	ldrb	r2, [r3, #0]
 800fc16:	4b1b      	ldr	r3, [pc, #108]	; (800fc84 <searchF3+0x1a8>)
 800fc18:	701a      	strb	r2, [r3, #0]
	mouse.y = goal_y;
 800fc1a:	4b1b      	ldr	r3, [pc, #108]	; (800fc88 <searchF3+0x1ac>)
 800fc1c:	781a      	ldrb	r2, [r3, #0]
 800fc1e:	4b19      	ldr	r3, [pc, #100]	; (800fc84 <searchF3+0x1a8>)
 800fc20:	705a      	strb	r2, [r3, #1]

	for(int j=0; j<goal_mode-1; j++){
 800fc22:	2300      	movs	r3, #0
 800fc24:	607b      	str	r3, [r7, #4]
 800fc26:	e006      	b.n	800fc36 <searchF3+0x15a>
		one_sectionU();
 800fc28:	f7f6 fbbc 	bl	80063a4 <one_sectionU>
		adv_pos();
 800fc2c:	f000 fac4 	bl	80101b8 <adv_pos>
	for(int j=0; j<goal_mode-1; j++){
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	3301      	adds	r3, #1
 800fc34:	607b      	str	r3, [r7, #4]
 800fc36:	4b15      	ldr	r3, [pc, #84]	; (800fc8c <searchF3+0x1b0>)
 800fc38:	781b      	ldrb	r3, [r3, #0]
 800fc3a:	3b01      	subs	r3, #1
 800fc3c:	687a      	ldr	r2, [r7, #4]
 800fc3e:	429a      	cmp	r2, r3
 800fc40:	dbf2      	blt.n	800fc28 <searchF3+0x14c>
	}
	half_sectionD();
 800fc42:	f7f6 f831 	bl	8005ca8 <half_sectionD>
	set_positionF();
 800fc46:	f7f5 fe79 	bl	800593c <set_positionF>

	HAL_Delay(500);
 800fc4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fc4e:	f7f1 f9e5 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800fc52:	f7f6 fd79 	bl	8006748 <rotate_180>
//	driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
//	degree_z = target_degree_z;
//	start_mode = 0;
	start_mode = 1;
 800fc56:	4b0e      	ldr	r3, [pc, #56]	; (800fc90 <searchF3+0x1b4>)
 800fc58:	2201      	movs	r2, #1
 800fc5a:	701a      	strb	r2, [r3, #0]
	goal_mode = 1;
 800fc5c:	4b0b      	ldr	r3, [pc, #44]	; (800fc8c <searchF3+0x1b0>)
 800fc5e:	2201      	movs	r2, #1
 800fc60:	701a      	strb	r2, [r3, #0]

}
 800fc62:	bf00      	nop
 800fc64:	3710      	adds	r7, #16
 800fc66:	46bd      	mov	sp, r7
 800fc68:	bd80      	pop	{r7, pc}
 800fc6a:	bf00      	nop
 800fc6c:	20000fa8 	.word	0x20000fa8
 800fc70:	20000457 	.word	0x20000457
 800fc74:	200002b0 	.word	0x200002b0
 800fc78:	20000fa4 	.word	0x20000fa4
 800fc7c:	20000350 	.word	0x20000350
 800fc80:	20000c30 	.word	0x20000c30
 800fc84:	20000c8c 	.word	0x20000c8c
 800fc88:	20000b8c 	.word	0x20000b8c
 800fc8c:	20000c31 	.word	0x20000c31
 800fc90:	20001648 	.word	0x20001648

0800fc94 <searchF4>:
//searchF4
//aスラローム(+既知区間加速探索走行)+pass圧縮+機体方向&位置未更新+半区画ベース+斜め走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchF4(){
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b084      	sub	sp, #16
 800fc98:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800fc9a:	4bca      	ldr	r3, [pc, #808]	; (800ffc4 <searchF4+0x330>)
 800fc9c:	881b      	ldrh	r3, [r3, #0]
 800fc9e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800fca2:	b2db      	uxtb	r3, r3
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d001      	beq.n	800fcac <searchF4+0x18>
		load_map_from_eeprom();
 800fca8:	f002 fa1a 	bl	80120e0 <load_map_from_eeprom>
	}
	pass_mode = 4;
 800fcac:	4bc6      	ldr	r3, [pc, #792]	; (800ffc8 <searchF4+0x334>)
 800fcae:	2204      	movs	r2, #4
 800fcb0:	701a      	strb	r2, [r3, #0]

	//====a1区画前進====
	adv_pos();
 800fcb2:	f000 fa81 	bl	80101b8 <adv_pos>

	//====a歩数マップ・経路作成====
	full_led_write1(RED);
 800fcb6:	2001      	movs	r0, #1
 800fcb8:	f002 fafe 	bl	80122b8 <full_led_write1>
	make_smap();											//a歩数マップ作成
 800fcbc:	f000 fd34 	bl	8010728 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800fcc0:	f001 f8f0 	bl	8010ea4 <make_route>

	//====pass圧縮====
	p_cnt = 0;												//a経路カウンタの初期化
 800fcc4:	4bc1      	ldr	r3, [pc, #772]	; (800ffcc <searchF4+0x338>)
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	701a      	strb	r2, [r3, #0]
	pass_route3();
 800fcca:	f001 fe77 	bl	80119bc <pass_route3>

	if(start_mode == 0 || start_mode == 1){					//a大回りではない場合、先頭の半区画直進をスキップ
 800fcce:	4bc0      	ldr	r3, [pc, #768]	; (800ffd0 <searchF4+0x33c>)
 800fcd0:	781b      	ldrb	r3, [r3, #0]
 800fcd2:	b2db      	uxtb	r3, r3
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d004      	beq.n	800fce2 <searchF4+0x4e>
 800fcd8:	4bbd      	ldr	r3, [pc, #756]	; (800ffd0 <searchF4+0x33c>)
 800fcda:	781b      	ldrb	r3, [r3, #0]
 800fcdc:	b2db      	uxtb	r3, r3
 800fcde:	2b01      	cmp	r3, #1
 800fce0:	d109      	bne.n	800fcf6 <searchF4+0x62>
		pass[p_cnt]--;
 800fce2:	4bba      	ldr	r3, [pc, #744]	; (800ffcc <searchF4+0x338>)
 800fce4:	781b      	ldrb	r3, [r3, #0]
 800fce6:	4abb      	ldr	r2, [pc, #748]	; (800ffd4 <searchF4+0x340>)
 800fce8:	56d2      	ldrsb	r2, [r2, r3]
 800fcea:	b2d2      	uxtb	r2, r2
 800fcec:	3a01      	subs	r2, #1
 800fcee:	b2d2      	uxtb	r2, r2
 800fcf0:	b251      	sxtb	r1, r2
 800fcf2:	4ab8      	ldr	r2, [pc, #736]	; (800ffd4 <searchF4+0x340>)
 800fcf4:	54d1      	strb	r1, [r2, r3]
	}
	mouse.dir = mouse.dir * 2;
 800fcf6:	4bb8      	ldr	r3, [pc, #736]	; (800ffd8 <searchF4+0x344>)
 800fcf8:	789b      	ldrb	r3, [r3, #2]
 800fcfa:	b2db      	uxtb	r3, r3
 800fcfc:	005b      	lsls	r3, r3, #1
 800fcfe:	b2da      	uxtb	r2, r3
 800fd00:	4bb5      	ldr	r3, [pc, #724]	; (800ffd8 <searchF4+0x344>)
 800fd02:	709a      	strb	r2, [r3, #2]

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800fd04:	f7f5 fe38 	bl	8005978 <start_sectionA>

	MF2.FLAG.HACCEL = 0;
 800fd08:	4ab4      	ldr	r2, [pc, #720]	; (800ffdc <searchF4+0x348>)
 800fd0a:	8813      	ldrh	r3, [r2, #0]
 800fd0c:	f36f 0341 	bfc	r3, #1, #1
 800fd10:	8013      	strh	r3, [r2, #0]
	MF.FLAG.XDIR = 1;
 800fd12:	4aac      	ldr	r2, [pc, #688]	; (800ffc4 <searchF4+0x330>)
 800fd14:	8813      	ldrh	r3, [r2, #0]
 800fd16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800fd1a:	8013      	strh	r3, [r2, #0]
	//====a探索走行====
	do{
		//----a進行----
		switch(pass[p_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800fd1c:	4bab      	ldr	r3, [pc, #684]	; (800ffcc <searchF4+0x338>)
 800fd1e:	781b      	ldrb	r3, [r3, #0]
 800fd20:	1c5a      	adds	r2, r3, #1
 800fd22:	b2d1      	uxtb	r1, r2
 800fd24:	4aa9      	ldr	r2, [pc, #676]	; (800ffcc <searchF4+0x338>)
 800fd26:	7011      	strb	r1, [r2, #0]
 800fd28:	461a      	mov	r2, r3
 800fd2a:	4baa      	ldr	r3, [pc, #680]	; (800ffd4 <searchF4+0x340>)
 800fd2c:	569b      	ldrsb	r3, [r3, r2]
 800fd2e:	3372      	adds	r3, #114	; 0x72
 800fd30:	2b71      	cmp	r3, #113	; 0x71
 800fd32:	f200 811c 	bhi.w	800ff6e <searchF4+0x2da>
 800fd36:	a201      	add	r2, pc, #4	; (adr r2, 800fd3c <searchF4+0xa8>)
 800fd38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd3c:	0800ff65 	.word	0x0800ff65
 800fd40:	0800ff6f 	.word	0x0800ff6f
 800fd44:	0800ff6f 	.word	0x0800ff6f
 800fd48:	0800ff6f 	.word	0x0800ff6f
 800fd4c:	0800ff6f 	.word	0x0800ff6f
 800fd50:	0800ff6f 	.word	0x0800ff6f
 800fd54:	0800ff6f 	.word	0x0800ff6f
 800fd58:	0800ff6f 	.word	0x0800ff6f
 800fd5c:	0800ff6f 	.word	0x0800ff6f
 800fd60:	0800ff6f 	.word	0x0800ff6f
 800fd64:	0800ff6f 	.word	0x0800ff6f
 800fd68:	0800ff6f 	.word	0x0800ff6f
 800fd6c:	0800ff6f 	.word	0x0800ff6f
 800fd70:	0800ff6f 	.word	0x0800ff6f
 800fd74:	0800ff6f 	.word	0x0800ff6f
 800fd78:	0800ff6f 	.word	0x0800ff6f
 800fd7c:	0800ff6f 	.word	0x0800ff6f
 800fd80:	0800ff6f 	.word	0x0800ff6f
 800fd84:	0800ff6f 	.word	0x0800ff6f
 800fd88:	0800ff6f 	.word	0x0800ff6f
 800fd8c:	0800ff6f 	.word	0x0800ff6f
 800fd90:	0800ff6f 	.word	0x0800ff6f
 800fd94:	0800ff6f 	.word	0x0800ff6f
 800fd98:	0800ff6f 	.word	0x0800ff6f
 800fd9c:	0800ff6f 	.word	0x0800ff6f
 800fda0:	0800ff6f 	.word	0x0800ff6f
 800fda4:	0800ff6f 	.word	0x0800ff6f
 800fda8:	0800ff6f 	.word	0x0800ff6f
 800fdac:	0800ff6f 	.word	0x0800ff6f
 800fdb0:	0800ff6f 	.word	0x0800ff6f
 800fdb4:	0800ff6f 	.word	0x0800ff6f
 800fdb8:	0800ff6f 	.word	0x0800ff6f
 800fdbc:	0800ff6f 	.word	0x0800ff6f
 800fdc0:	0800ff6f 	.word	0x0800ff6f
 800fdc4:	0800ff6f 	.word	0x0800ff6f
 800fdc8:	0800ff6f 	.word	0x0800ff6f
 800fdcc:	0800ff6f 	.word	0x0800ff6f
 800fdd0:	0800ff6f 	.word	0x0800ff6f
 800fdd4:	0800ff6f 	.word	0x0800ff6f
 800fdd8:	0800ff6f 	.word	0x0800ff6f
 800fddc:	0800ff6f 	.word	0x0800ff6f
 800fde0:	0800ff6f 	.word	0x0800ff6f
 800fde4:	0800ff6f 	.word	0x0800ff6f
 800fde8:	0800ff6f 	.word	0x0800ff6f
 800fdec:	0800ff6f 	.word	0x0800ff6f
 800fdf0:	0800ff6f 	.word	0x0800ff6f
 800fdf4:	0800ff6f 	.word	0x0800ff6f
 800fdf8:	0800ff6f 	.word	0x0800ff6f
 800fdfc:	0800ff6f 	.word	0x0800ff6f
 800fe00:	0800ff6f 	.word	0x0800ff6f
 800fe04:	0800ff6f 	.word	0x0800ff6f
 800fe08:	0800ff6f 	.word	0x0800ff6f
 800fe0c:	0800ff6f 	.word	0x0800ff6f
 800fe10:	0800ff6f 	.word	0x0800ff6f
 800fe14:	0800ff6f 	.word	0x0800ff6f
 800fe18:	0800ff6f 	.word	0x0800ff6f
 800fe1c:	0800ff6f 	.word	0x0800ff6f
 800fe20:	0800ff6f 	.word	0x0800ff6f
 800fe24:	0800ff6f 	.word	0x0800ff6f
 800fe28:	0800ff6f 	.word	0x0800ff6f
 800fe2c:	0800ff6f 	.word	0x0800ff6f
 800fe30:	0800ff6f 	.word	0x0800ff6f
 800fe34:	0800ff6f 	.word	0x0800ff6f
 800fe38:	0800ff6f 	.word	0x0800ff6f
 800fe3c:	0800ff6f 	.word	0x0800ff6f
 800fe40:	0800ff6f 	.word	0x0800ff6f
 800fe44:	0800ff6f 	.word	0x0800ff6f
 800fe48:	0800ff6f 	.word	0x0800ff6f
 800fe4c:	0800ff6f 	.word	0x0800ff6f
 800fe50:	0800ff6f 	.word	0x0800ff6f
 800fe54:	0800ff6f 	.word	0x0800ff6f
 800fe58:	0800ff6f 	.word	0x0800ff6f
 800fe5c:	0800ff6f 	.word	0x0800ff6f
 800fe60:	0800ff6f 	.word	0x0800ff6f
 800fe64:	0800ff6f 	.word	0x0800ff6f
 800fe68:	0800ff6f 	.word	0x0800ff6f
 800fe6c:	0800ff6f 	.word	0x0800ff6f
 800fe70:	0800ff6f 	.word	0x0800ff6f
 800fe74:	0800ff6f 	.word	0x0800ff6f
 800fe78:	0800ff6f 	.word	0x0800ff6f
 800fe7c:	0800ff6f 	.word	0x0800ff6f
 800fe80:	0800ff6f 	.word	0x0800ff6f
 800fe84:	0800ff6f 	.word	0x0800ff6f
 800fe88:	0800ff6f 	.word	0x0800ff6f
 800fe8c:	0800ff6f 	.word	0x0800ff6f
 800fe90:	0800ff6f 	.word	0x0800ff6f
 800fe94:	0800ff6f 	.word	0x0800ff6f
 800fe98:	0800ff6f 	.word	0x0800ff6f
 800fe9c:	0800ff6f 	.word	0x0800ff6f
 800fea0:	0800ff6f 	.word	0x0800ff6f
 800fea4:	0800ff6f 	.word	0x0800ff6f
 800fea8:	0800ff6f 	.word	0x0800ff6f
 800feac:	0800ff6f 	.word	0x0800ff6f
 800feb0:	0800ff6f 	.word	0x0800ff6f
 800feb4:	0800ff6f 	.word	0x0800ff6f
 800feb8:	0800ff6f 	.word	0x0800ff6f
 800febc:	0800ff6f 	.word	0x0800ff6f
 800fec0:	0800ff6f 	.word	0x0800ff6f
 800fec4:	0800ff5f 	.word	0x0800ff5f
 800fec8:	0800ff59 	.word	0x0800ff59
 800fecc:	0800ff53 	.word	0x0800ff53
 800fed0:	0800ff4d 	.word	0x0800ff4d
 800fed4:	0800ff47 	.word	0x0800ff47
 800fed8:	0800ff41 	.word	0x0800ff41
 800fedc:	0800ff3b 	.word	0x0800ff3b
 800fee0:	0800ff35 	.word	0x0800ff35
 800fee4:	0800ff2f 	.word	0x0800ff2f
 800fee8:	0800ff29 	.word	0x0800ff29
 800feec:	0800ff23 	.word	0x0800ff23
 800fef0:	0800ff1d 	.word	0x0800ff1d
 800fef4:	0800ff17 	.word	0x0800ff17
 800fef8:	0800ff11 	.word	0x0800ff11
 800fefc:	0800ff0b 	.word	0x0800ff0b
 800ff00:	0800ff05 	.word	0x0800ff05
			//----a右スラローム----
			case -1:
				slalom_R90();
 800ff04:	f7f6 fcf8 	bl	80068f8 <slalom_R90>
				break;
 800ff08:	e0d1      	b.n	80100ae <searchF4+0x41a>

			//----a左スラローム----
			case -2:
				slalom_L90();
 800ff0a:	f7f6 fe5f 	bl	8006bcc <slalom_L90>
				break;
 800ff0e:	e0ce      	b.n	80100ae <searchF4+0x41a>

			//----a大回り右90----
			case -3:
				Lslalom_R90();
 800ff10:	f7f6 ffbe 	bl	8006e90 <Lslalom_R90>
				break;
 800ff14:	e0cb      	b.n	80100ae <searchF4+0x41a>

			//----a大回り左90----
			case -4:
				Lslalom_L90();
 800ff16:	f7f7 f8f1 	bl	80070fc <Lslalom_L90>
				break;
 800ff1a:	e0c8      	b.n	80100ae <searchF4+0x41a>

			//----a大回り右180----
			case -5:
				Lslalom_R180();
 800ff1c:	f7f7 fa18 	bl	8007350 <Lslalom_R180>
				break;
 800ff20:	e0c5      	b.n	80100ae <searchF4+0x41a>

			//----a大回り左180----
			case -6:
				Lslalom_L180();
 800ff22:	f7f7 fb61 	bl	80075e8 <Lslalom_L180>
				break;
 800ff26:	e0c2      	b.n	80100ae <searchF4+0x41a>

			//----a斜め右V45----
			case -7:
				v_R45();
 800ff28:	f7f7 fca0 	bl	800786c <v_R45>
				break;
 800ff2c:	e0bf      	b.n	80100ae <searchF4+0x41a>

			//----a斜め左V45----
			case -8:
				v_L45();
 800ff2e:	f7f7 fed7 	bl	8007ce0 <v_L45>
				break;
 800ff32:	e0bc      	b.n	80100ae <searchF4+0x41a>

			//----a斜め右V90----
			case -9:
				v_R90();
 800ff34:	f7f8 fc22 	bl	800877c <v_R90>
				break;
 800ff38:	e0b9      	b.n	80100ae <searchF4+0x41a>

			//----a斜め左V90----
			case -10:
				v_L90();
 800ff3a:	f7f8 fd0f 	bl	800895c <v_L90>
				break;
 800ff3e:	e0b6      	b.n	80100ae <searchF4+0x41a>

			//----a斜め右V135----
			case -11:
				v_R135();
 800ff40:	f7f8 fdf8 	bl	8008b34 <v_R135>
				break;
 800ff44:	e0b3      	b.n	80100ae <searchF4+0x41a>

			//----a斜め左V135----
			case -12:
				v_L135();
 800ff46:	f7f9 f833 	bl	8008fb0 <v_L135>
				break;
 800ff4a:	e0b0      	b.n	80100ae <searchF4+0x41a>

			//----a斜め右V45Goal----
			case -13:
				v_R45D();
 800ff4c:	f7f8 f8fc 	bl	8008148 <v_R45D>
				break;
 800ff50:	e0ad      	b.n	80100ae <searchF4+0x41a>

			//----a斜め左V45Goal----
			case -14:
				v_L45D();
 800ff52:	f7f8 fa89 	bl	8008468 <v_L45D>
				break;
 800ff56:	e0aa      	b.n	80100ae <searchF4+0x41a>

			//----a斜め右V135Goal----
			case -15:
				v_R135D();
 800ff58:	f7f9 fa5e 	bl	8009418 <v_R135D>
				break;
 800ff5c:	e0a7      	b.n	80100ae <searchF4+0x41a>

			//----a斜め左V135Goal----
			case -16:
				v_L135D();
 800ff5e:	f7f9 fbef 	bl	8009740 <v_L135D>
				break;
 800ff62:	e0a4      	b.n	80100ae <searchF4+0x41a>

			//----pass配列最後(なお本来呼び出される前にゴールする)----
			case -114:
				rotate_180();
 800ff64:	f7f6 fbf0 	bl	8006748 <rotate_180>
				rotate_180();
 800ff68:	f7f6 fbee 	bl	8006748 <rotate_180>
				while(1);
 800ff6c:	e7fe      	b.n	800ff6c <searchF4+0x2d8>
				break;

			//----a前進----
			default:
				if(pass[p_cnt-1] < 4){
 800ff6e:	4b17      	ldr	r3, [pc, #92]	; (800ffcc <searchF4+0x338>)
 800ff70:	781b      	ldrb	r3, [r3, #0]
 800ff72:	3b01      	subs	r3, #1
 800ff74:	4a17      	ldr	r2, [pc, #92]	; (800ffd4 <searchF4+0x340>)
 800ff76:	56d3      	ldrsb	r3, [r2, r3]
 800ff78:	2b03      	cmp	r3, #3
 800ff7a:	dc11      	bgt.n	800ffa0 <searchF4+0x30c>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	60fb      	str	r3, [r7, #12]
 800ff80:	e004      	b.n	800ff8c <searchF4+0x2f8>
						half_sectionU();
 800ff82:	f7f5 ffab 	bl	8005edc <half_sectionU>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	3301      	adds	r3, #1
 800ff8a:	60fb      	str	r3, [r7, #12]
 800ff8c:	4b0f      	ldr	r3, [pc, #60]	; (800ffcc <searchF4+0x338>)
 800ff8e:	781b      	ldrb	r3, [r3, #0]
 800ff90:	3b01      	subs	r3, #1
 800ff92:	4a10      	ldr	r2, [pc, #64]	; (800ffd4 <searchF4+0x340>)
 800ff94:	56d3      	ldrsb	r3, [r2, r3]
 800ff96:	461a      	mov	r2, r3
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	4293      	cmp	r3, r2
 800ff9c:	dbf1      	blt.n	800ff82 <searchF4+0x2ee>
						p_cnt++;
					}else{
						half_sectionV();
					}
				}
				break;
 800ff9e:	e085      	b.n	80100ac <searchF4+0x418>
				}else if(pass[p_cnt-1] < 64){
 800ffa0:	4b0a      	ldr	r3, [pc, #40]	; (800ffcc <searchF4+0x338>)
 800ffa2:	781b      	ldrb	r3, [r3, #0]
 800ffa4:	3b01      	subs	r3, #1
 800ffa6:	4a0b      	ldr	r2, [pc, #44]	; (800ffd4 <searchF4+0x340>)
 800ffa8:	56d3      	ldrsb	r3, [r2, r3]
 800ffaa:	2b3f      	cmp	r3, #63	; 0x3f
 800ffac:	dc2e      	bgt.n	801000c <searchF4+0x378>
					one_sectionA();
 800ffae:	f7f5 ffb5 	bl	8005f1c <one_sectionA>
					MF2.FLAG.HACCEL = 1;
 800ffb2:	4a0a      	ldr	r2, [pc, #40]	; (800ffdc <searchF4+0x348>)
 800ffb4:	8813      	ldrh	r3, [r2, #0]
 800ffb6:	f043 0302 	orr.w	r3, r3, #2
 800ffba:	8013      	strh	r3, [r2, #0]
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	60bb      	str	r3, [r7, #8]
 800ffc0:	e013      	b.n	800ffea <searchF4+0x356>
 800ffc2:	bf00      	nop
 800ffc4:	20000fa8 	.word	0x20000fa8
 800ffc8:	20000457 	.word	0x20000457
 800ffcc:	200002b0 	.word	0x200002b0
 800ffd0:	20001648 	.word	0x20001648
 800ffd4:	20000350 	.word	0x20000350
 800ffd8:	20000c8c 	.word	0x20000c8c
 800ffdc:	20000fa4 	.word	0x20000fa4
						half_sectionU();
 800ffe0:	f7f5 ff7c 	bl	8005edc <half_sectionU>
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800ffe4:	68bb      	ldr	r3, [r7, #8]
 800ffe6:	3301      	adds	r3, #1
 800ffe8:	60bb      	str	r3, [r7, #8]
 800ffea:	4b6a      	ldr	r3, [pc, #424]	; (8010194 <searchF4+0x500>)
 800ffec:	781b      	ldrb	r3, [r3, #0]
 800ffee:	3b01      	subs	r3, #1
 800fff0:	4a69      	ldr	r2, [pc, #420]	; (8010198 <searchF4+0x504>)
 800fff2:	56d3      	ldrsb	r3, [r2, r3]
 800fff4:	3b04      	subs	r3, #4
 800fff6:	68ba      	ldr	r2, [r7, #8]
 800fff8:	429a      	cmp	r2, r3
 800fffa:	dbf1      	blt.n	800ffe0 <searchF4+0x34c>
					one_sectionD();
 800fffc:	f7f6 f818 	bl	8006030 <one_sectionD>
					MF2.FLAG.HACCEL = 0;
 8010000:	4a66      	ldr	r2, [pc, #408]	; (801019c <searchF4+0x508>)
 8010002:	8813      	ldrh	r3, [r2, #0]
 8010004:	f36f 0341 	bfc	r3, #1, #1
 8010008:	8013      	strh	r3, [r2, #0]
				break;
 801000a:	e04f      	b.n	80100ac <searchF4+0x418>
					if((pass[p_cnt] == 64) && (pass[p_cnt+1] == 64) && (pass[p_cnt+2] == 64) && (MF2.FLAG.HACCEL == 0)){
 801000c:	4b61      	ldr	r3, [pc, #388]	; (8010194 <searchF4+0x500>)
 801000e:	781b      	ldrb	r3, [r3, #0]
 8010010:	461a      	mov	r2, r3
 8010012:	4b61      	ldr	r3, [pc, #388]	; (8010198 <searchF4+0x504>)
 8010014:	569b      	ldrsb	r3, [r3, r2]
 8010016:	2b40      	cmp	r3, #64	; 0x40
 8010018:	d122      	bne.n	8010060 <searchF4+0x3cc>
 801001a:	4b5e      	ldr	r3, [pc, #376]	; (8010194 <searchF4+0x500>)
 801001c:	781b      	ldrb	r3, [r3, #0]
 801001e:	3301      	adds	r3, #1
 8010020:	4a5d      	ldr	r2, [pc, #372]	; (8010198 <searchF4+0x504>)
 8010022:	56d3      	ldrsb	r3, [r2, r3]
 8010024:	2b40      	cmp	r3, #64	; 0x40
 8010026:	d11b      	bne.n	8010060 <searchF4+0x3cc>
 8010028:	4b5a      	ldr	r3, [pc, #360]	; (8010194 <searchF4+0x500>)
 801002a:	781b      	ldrb	r3, [r3, #0]
 801002c:	3302      	adds	r3, #2
 801002e:	4a5a      	ldr	r2, [pc, #360]	; (8010198 <searchF4+0x504>)
 8010030:	56d3      	ldrsb	r3, [r2, r3]
 8010032:	2b40      	cmp	r3, #64	; 0x40
 8010034:	d114      	bne.n	8010060 <searchF4+0x3cc>
 8010036:	4b59      	ldr	r3, [pc, #356]	; (801019c <searchF4+0x508>)
 8010038:	881b      	ldrh	r3, [r3, #0]
 801003a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801003e:	b2db      	uxtb	r3, r3
 8010040:	2b00      	cmp	r3, #0
 8010042:	d10d      	bne.n	8010060 <searchF4+0x3cc>
						one_sectionVA();
 8010044:	f7f6 f890 	bl	8006168 <one_sectionVA>
						MF2.FLAG.HACCEL = 1;
 8010048:	4a54      	ldr	r2, [pc, #336]	; (801019c <searchF4+0x508>)
 801004a:	8813      	ldrh	r3, [r2, #0]
 801004c:	f043 0302 	orr.w	r3, r3, #2
 8010050:	8013      	strh	r3, [r2, #0]
						p_cnt++;
 8010052:	4b50      	ldr	r3, [pc, #320]	; (8010194 <searchF4+0x500>)
 8010054:	781b      	ldrb	r3, [r3, #0]
 8010056:	3301      	adds	r3, #1
 8010058:	b2da      	uxtb	r2, r3
 801005a:	4b4e      	ldr	r3, [pc, #312]	; (8010194 <searchF4+0x500>)
 801005c:	701a      	strb	r2, [r3, #0]
 801005e:	e025      	b.n	80100ac <searchF4+0x418>
					else if((pass[p_cnt] == 64) && (pass[p_cnt+1] != 64) && (MF2.FLAG.HACCEL == 1)){
 8010060:	4b4c      	ldr	r3, [pc, #304]	; (8010194 <searchF4+0x500>)
 8010062:	781b      	ldrb	r3, [r3, #0]
 8010064:	461a      	mov	r2, r3
 8010066:	4b4c      	ldr	r3, [pc, #304]	; (8010198 <searchF4+0x504>)
 8010068:	569b      	ldrsb	r3, [r3, r2]
 801006a:	2b40      	cmp	r3, #64	; 0x40
 801006c:	d11b      	bne.n	80100a6 <searchF4+0x412>
 801006e:	4b49      	ldr	r3, [pc, #292]	; (8010194 <searchF4+0x500>)
 8010070:	781b      	ldrb	r3, [r3, #0]
 8010072:	3301      	adds	r3, #1
 8010074:	4a48      	ldr	r2, [pc, #288]	; (8010198 <searchF4+0x504>)
 8010076:	56d3      	ldrsb	r3, [r2, r3]
 8010078:	2b40      	cmp	r3, #64	; 0x40
 801007a:	d014      	beq.n	80100a6 <searchF4+0x412>
 801007c:	4b47      	ldr	r3, [pc, #284]	; (801019c <searchF4+0x508>)
 801007e:	881b      	ldrh	r3, [r3, #0]
 8010080:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8010084:	b2db      	uxtb	r3, r3
 8010086:	2b01      	cmp	r3, #1
 8010088:	d10d      	bne.n	80100a6 <searchF4+0x412>
						one_sectionVD();
 801008a:	f7f6 f8f3 	bl	8006274 <one_sectionVD>
						MF2.FLAG.HACCEL = 0;
 801008e:	4a43      	ldr	r2, [pc, #268]	; (801019c <searchF4+0x508>)
 8010090:	8813      	ldrh	r3, [r2, #0]
 8010092:	f36f 0341 	bfc	r3, #1, #1
 8010096:	8013      	strh	r3, [r2, #0]
						p_cnt++;
 8010098:	4b3e      	ldr	r3, [pc, #248]	; (8010194 <searchF4+0x500>)
 801009a:	781b      	ldrb	r3, [r3, #0]
 801009c:	3301      	adds	r3, #1
 801009e:	b2da      	uxtb	r2, r3
 80100a0:	4b3c      	ldr	r3, [pc, #240]	; (8010194 <searchF4+0x500>)
 80100a2:	701a      	strb	r2, [r3, #0]
 80100a4:	e002      	b.n	80100ac <searchF4+0x418>
						half_sectionV();
 80100a6:	f7f5 ff25 	bl	8005ef4 <half_sectionV>
				break;
 80100aa:	e7ff      	b.n	80100ac <searchF4+0x418>
 80100ac:	bf00      	nop
		}

	}while(pass[p_cnt] != -114);
 80100ae:	4b39      	ldr	r3, [pc, #228]	; (8010194 <searchF4+0x500>)
 80100b0:	781b      	ldrb	r3, [r3, #0]
 80100b2:	461a      	mov	r2, r3
 80100b4:	4b38      	ldr	r3, [pc, #224]	; (8010198 <searchF4+0x504>)
 80100b6:	569b      	ldrsb	r3, [r3, r2]
 80100b8:	f113 0f72 	cmn.w	r3, #114	; 0x72
 80100bc:	f47f ae2e 	bne.w	800fd1c <searchF4+0x88>

	mouse.x = goal_x;
 80100c0:	4b37      	ldr	r3, [pc, #220]	; (80101a0 <searchF4+0x50c>)
 80100c2:	781a      	ldrb	r2, [r3, #0]
 80100c4:	4b37      	ldr	r3, [pc, #220]	; (80101a4 <searchF4+0x510>)
 80100c6:	701a      	strb	r2, [r3, #0]
	mouse.y = goal_y;
 80100c8:	4b37      	ldr	r3, [pc, #220]	; (80101a8 <searchF4+0x514>)
 80100ca:	781a      	ldrb	r2, [r3, #0]
 80100cc:	4b35      	ldr	r3, [pc, #212]	; (80101a4 <searchF4+0x510>)
 80100ce:	705a      	strb	r2, [r3, #1]
	mouse.dir = mouse.dir / 2;
 80100d0:	4b34      	ldr	r3, [pc, #208]	; (80101a4 <searchF4+0x510>)
 80100d2:	789b      	ldrb	r3, [r3, #2]
 80100d4:	b2db      	uxtb	r3, r3
 80100d6:	085b      	lsrs	r3, r3, #1
 80100d8:	b2da      	uxtb	r2, r3
 80100da:	4b32      	ldr	r3, [pc, #200]	; (80101a4 <searchF4+0x510>)
 80100dc:	709a      	strb	r2, [r3, #2]
	MF.FLAG.XDIR = 0;
 80100de:	4a33      	ldr	r2, [pc, #204]	; (80101ac <searchF4+0x518>)
 80100e0:	8813      	ldrh	r3, [r2, #0]
 80100e2:	f36f 330c 	bfc	r3, #12, #1
 80100e6:	8013      	strh	r3, [r2, #0]

	if(pass[p_cnt-1] != -13 && pass[p_cnt-1] != -14 && pass[p_cnt-1] != -15 && pass[p_cnt-1] != -16){
 80100e8:	4b2a      	ldr	r3, [pc, #168]	; (8010194 <searchF4+0x500>)
 80100ea:	781b      	ldrb	r3, [r3, #0]
 80100ec:	3b01      	subs	r3, #1
 80100ee:	4a2a      	ldr	r2, [pc, #168]	; (8010198 <searchF4+0x504>)
 80100f0:	56d3      	ldrsb	r3, [r2, r3]
 80100f2:	f113 0f0d 	cmn.w	r3, #13
 80100f6:	d02c      	beq.n	8010152 <searchF4+0x4be>
 80100f8:	4b26      	ldr	r3, [pc, #152]	; (8010194 <searchF4+0x500>)
 80100fa:	781b      	ldrb	r3, [r3, #0]
 80100fc:	3b01      	subs	r3, #1
 80100fe:	4a26      	ldr	r2, [pc, #152]	; (8010198 <searchF4+0x504>)
 8010100:	56d3      	ldrsb	r3, [r2, r3]
 8010102:	f113 0f0e 	cmn.w	r3, #14
 8010106:	d024      	beq.n	8010152 <searchF4+0x4be>
 8010108:	4b22      	ldr	r3, [pc, #136]	; (8010194 <searchF4+0x500>)
 801010a:	781b      	ldrb	r3, [r3, #0]
 801010c:	3b01      	subs	r3, #1
 801010e:	4a22      	ldr	r2, [pc, #136]	; (8010198 <searchF4+0x504>)
 8010110:	56d3      	ldrsb	r3, [r2, r3]
 8010112:	f113 0f0f 	cmn.w	r3, #15
 8010116:	d01c      	beq.n	8010152 <searchF4+0x4be>
 8010118:	4b1e      	ldr	r3, [pc, #120]	; (8010194 <searchF4+0x500>)
 801011a:	781b      	ldrb	r3, [r3, #0]
 801011c:	3b01      	subs	r3, #1
 801011e:	4a1e      	ldr	r2, [pc, #120]	; (8010198 <searchF4+0x504>)
 8010120:	56d3      	ldrsb	r3, [r2, r3]
 8010122:	f113 0f10 	cmn.w	r3, #16
 8010126:	d014      	beq.n	8010152 <searchF4+0x4be>
		for(int j=0; j<goal_mode-1; j++){
 8010128:	2300      	movs	r3, #0
 801012a:	607b      	str	r3, [r7, #4]
 801012c:	e006      	b.n	801013c <searchF4+0x4a8>
			one_sectionU();
 801012e:	f7f6 f939 	bl	80063a4 <one_sectionU>
			adv_pos();
 8010132:	f000 f841 	bl	80101b8 <adv_pos>
		for(int j=0; j<goal_mode-1; j++){
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	3301      	adds	r3, #1
 801013a:	607b      	str	r3, [r7, #4]
 801013c:	4b1c      	ldr	r3, [pc, #112]	; (80101b0 <searchF4+0x51c>)
 801013e:	781b      	ldrb	r3, [r3, #0]
 8010140:	3b01      	subs	r3, #1
 8010142:	687a      	ldr	r2, [r7, #4]
 8010144:	429a      	cmp	r2, r3
 8010146:	dbf2      	blt.n	801012e <searchF4+0x49a>
		}
		half_sectionD();
 8010148:	f7f5 fdae 	bl	8005ca8 <half_sectionD>
		set_positionF();
 801014c:	f7f5 fbf6 	bl	800593c <set_positionF>
 8010150:	e00f      	b.n	8010172 <searchF4+0x4de>
	}else{														//a減速斜めでgoalする場合
		for(int j=0; j<goal_mode-1; j++){
 8010152:	2300      	movs	r3, #0
 8010154:	603b      	str	r3, [r7, #0]
 8010156:	e006      	b.n	8010166 <searchF4+0x4d2>
			one_section();
 8010158:	f7f5 fed8 	bl	8005f0c <one_section>
			adv_pos();
 801015c:	f000 f82c 	bl	80101b8 <adv_pos>
		for(int j=0; j<goal_mode-1; j++){
 8010160:	683b      	ldr	r3, [r7, #0]
 8010162:	3301      	adds	r3, #1
 8010164:	603b      	str	r3, [r7, #0]
 8010166:	4b12      	ldr	r3, [pc, #72]	; (80101b0 <searchF4+0x51c>)
 8010168:	781b      	ldrb	r3, [r3, #0]
 801016a:	3b01      	subs	r3, #1
 801016c:	683a      	ldr	r2, [r7, #0]
 801016e:	429a      	cmp	r2, r3
 8010170:	dbf2      	blt.n	8010158 <searchF4+0x4c4>
		}
	}
	HAL_Delay(500);
 8010172:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8010176:	f7f0 ff51 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 801017a:	f7f6 fae5 	bl	8006748 <rotate_180>
//	driveC2(SETPOS_BACK); 							        //a尻を当てる程度に後退。回転後に停止する
//	degree_z = target_degree_z;
//	start_mode = 0;
	start_mode = 1;
 801017e:	4b0d      	ldr	r3, [pc, #52]	; (80101b4 <searchF4+0x520>)
 8010180:	2201      	movs	r2, #1
 8010182:	701a      	strb	r2, [r3, #0]
	goal_mode = 1;
 8010184:	4b0a      	ldr	r3, [pc, #40]	; (80101b0 <searchF4+0x51c>)
 8010186:	2201      	movs	r2, #1
 8010188:	701a      	strb	r2, [r3, #0]
}
 801018a:	bf00      	nop
 801018c:	3710      	adds	r7, #16
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}
 8010192:	bf00      	nop
 8010194:	200002b0 	.word	0x200002b0
 8010198:	20000350 	.word	0x20000350
 801019c:	20000fa4 	.word	0x20000fa4
 80101a0:	20000c30 	.word	0x20000c30
 80101a4:	20000c8c 	.word	0x20000c8c
 80101a8:	20000b8c 	.word	0x20000b8c
 80101ac:	20000fa8 	.word	0x20000fa8
 80101b0:	20000c31 	.word	0x20000c31
 80101b4:	20001648 	.word	0x20001648

080101b8 <adv_pos>:
//adv_pos
//aマイクロマウス内部位置情報で前進させる
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void adv_pos(){
 80101b8:	b480      	push	{r7}
 80101ba:	af00      	add	r7, sp, #0

	switch(mouse.dir){										//aマイクロマウスが現在向いている方向で判定
 80101bc:	4b1a      	ldr	r3, [pc, #104]	; (8010228 <adv_pos+0x70>)
 80101be:	789b      	ldrb	r3, [r3, #2]
 80101c0:	b2db      	uxtb	r3, r3
 80101c2:	2b03      	cmp	r3, #3
 80101c4:	d82a      	bhi.n	801021c <adv_pos+0x64>
 80101c6:	a201      	add	r2, pc, #4	; (adr r2, 80101cc <adv_pos+0x14>)
 80101c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101cc:	080101dd 	.word	0x080101dd
 80101d0:	080101ed 	.word	0x080101ed
 80101d4:	080101fd 	.word	0x080101fd
 80101d8:	0801020d 	.word	0x0801020d
	case 0x00:												//a北方向に向いている場合
		mouse.y++;											//Y座標をインクリメント
 80101dc:	4b12      	ldr	r3, [pc, #72]	; (8010228 <adv_pos+0x70>)
 80101de:	785b      	ldrb	r3, [r3, #1]
 80101e0:	b2db      	uxtb	r3, r3
 80101e2:	3301      	adds	r3, #1
 80101e4:	b2da      	uxtb	r2, r3
 80101e6:	4b10      	ldr	r3, [pc, #64]	; (8010228 <adv_pos+0x70>)
 80101e8:	705a      	strb	r2, [r3, #1]
		break;
 80101ea:	e017      	b.n	801021c <adv_pos+0x64>
	case 0x01:												//a東方向に向いている場合
		mouse.x++;											//X座標をインクリメント
 80101ec:	4b0e      	ldr	r3, [pc, #56]	; (8010228 <adv_pos+0x70>)
 80101ee:	781b      	ldrb	r3, [r3, #0]
 80101f0:	b2db      	uxtb	r3, r3
 80101f2:	3301      	adds	r3, #1
 80101f4:	b2da      	uxtb	r2, r3
 80101f6:	4b0c      	ldr	r3, [pc, #48]	; (8010228 <adv_pos+0x70>)
 80101f8:	701a      	strb	r2, [r3, #0]
		break;
 80101fa:	e00f      	b.n	801021c <adv_pos+0x64>
	case 0x02:												//a南方向に向いている場合
		mouse.y--;											//Y座標をデクリメント
 80101fc:	4b0a      	ldr	r3, [pc, #40]	; (8010228 <adv_pos+0x70>)
 80101fe:	785b      	ldrb	r3, [r3, #1]
 8010200:	b2db      	uxtb	r3, r3
 8010202:	3b01      	subs	r3, #1
 8010204:	b2da      	uxtb	r2, r3
 8010206:	4b08      	ldr	r3, [pc, #32]	; (8010228 <adv_pos+0x70>)
 8010208:	705a      	strb	r2, [r3, #1]
		break;
 801020a:	e007      	b.n	801021c <adv_pos+0x64>
	case 0x03:												//a西方向に向いている場合
		mouse.x--;											//X座標をデクリメント
 801020c:	4b06      	ldr	r3, [pc, #24]	; (8010228 <adv_pos+0x70>)
 801020e:	781b      	ldrb	r3, [r3, #0]
 8010210:	b2db      	uxtb	r3, r3
 8010212:	3b01      	subs	r3, #1
 8010214:	b2da      	uxtb	r2, r3
 8010216:	4b04      	ldr	r3, [pc, #16]	; (8010228 <adv_pos+0x70>)
 8010218:	701a      	strb	r2, [r3, #0]
		break;
 801021a:	bf00      	nop
	}
}
 801021c:	bf00      	nop
 801021e:	46bd      	mov	sp, r7
 8010220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010224:	4770      	bx	lr
 8010226:	bf00      	nop
 8010228:	20000c8c 	.word	0x20000c8c

0801022c <conf_route>:
//conf_route
//a進路を判定する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void conf_route(){
 801022c:	b580      	push	{r7, lr}
 801022e:	af00      	add	r7, sp, #0

	//----a壁情報書き込み----
	write_map();
 8010230:	f000 f886 	bl	8010340 <write_map>

	//----a最短経路上に壁があれば進路変更----
	if(wall_info & route[r_cnt]){
 8010234:	4b09      	ldr	r3, [pc, #36]	; (801025c <conf_route+0x30>)
 8010236:	781b      	ldrb	r3, [r3, #0]
 8010238:	461a      	mov	r2, r3
 801023a:	4b09      	ldr	r3, [pc, #36]	; (8010260 <conf_route+0x34>)
 801023c:	5c9a      	ldrb	r2, [r3, r2]
 801023e:	4b09      	ldr	r3, [pc, #36]	; (8010264 <conf_route+0x38>)
 8010240:	781b      	ldrb	r3, [r3, #0]
 8010242:	4013      	ands	r3, r2
 8010244:	b2db      	uxtb	r3, r3
 8010246:	2b00      	cmp	r3, #0
 8010248:	d006      	beq.n	8010258 <conf_route+0x2c>
		make_smap();										//a歩数マップを更新
 801024a:	f000 fa6d 	bl	8010728 <make_smap>
		make_route();										//a最短経路を更新
 801024e:	f000 fe29 	bl	8010ea4 <make_route>
		r_cnt = 0;											//a経路カウンタを0に
 8010252:	4b02      	ldr	r3, [pc, #8]	; (801025c <conf_route+0x30>)
 8010254:	2200      	movs	r2, #0
 8010256:	701a      	strb	r2, [r3, #0]
	}
}
 8010258:	bf00      	nop
 801025a:	bd80      	pop	{r7, pc}
 801025c:	20001650 	.word	0x20001650
 8010260:	20000c94 	.word	0x20000c94
 8010264:	200002c8 	.word	0x200002c8

08010268 <map_Init>:
//map_Init
//aマップ格納配列map[][]の初期化をする
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void map_Init(){
 8010268:	b480      	push	{r7}
 801026a:	b083      	sub	sp, #12
 801026c:	af00      	add	r7, sp, #0
	//====a変数宣言====
	uint8_t x, y;											//for文用変数

	//====a初期化開始====
	//aマップのクリア
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 801026e:	2300      	movs	r3, #0
 8010270:	71bb      	strb	r3, [r7, #6]
 8010272:	e013      	b.n	801029c <map_Init+0x34>
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 8010274:	2300      	movs	r3, #0
 8010276:	71fb      	strb	r3, [r7, #7]
 8010278:	e00a      	b.n	8010290 <map_Init+0x28>
			map[y][x] = 0xf0;								//a上位4ビット（2次走行時）を壁あり，下位4ビット（1次走行時）を壁なしとする。
 801027a:	79ba      	ldrb	r2, [r7, #6]
 801027c:	79fb      	ldrb	r3, [r7, #7]
 801027e:	492f      	ldr	r1, [pc, #188]	; (801033c <map_Init+0xd4>)
 8010280:	0112      	lsls	r2, r2, #4
 8010282:	440a      	add	r2, r1
 8010284:	4413      	add	r3, r2
 8010286:	22f0      	movs	r2, #240	; 0xf0
 8010288:	701a      	strb	r2, [r3, #0]
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 801028a:	79fb      	ldrb	r3, [r7, #7]
 801028c:	3301      	adds	r3, #1
 801028e:	71fb      	strb	r3, [r7, #7]
 8010290:	79fb      	ldrb	r3, [r7, #7]
 8010292:	2b0f      	cmp	r3, #15
 8010294:	d9f1      	bls.n	801027a <map_Init+0x12>
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 8010296:	79bb      	ldrb	r3, [r7, #6]
 8010298:	3301      	adds	r3, #1
 801029a:	71bb      	strb	r3, [r7, #6]
 801029c:	79bb      	ldrb	r3, [r7, #6]
 801029e:	2b0f      	cmp	r3, #15
 80102a0:	d9e8      	bls.n	8010274 <map_Init+0xc>
		}
	}

	//a確定壁の配置
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 80102a2:	2300      	movs	r3, #0
 80102a4:	71bb      	strb	r3, [r7, #6]
 80102a6:	e020      	b.n	80102ea <map_Init+0x82>
		map[y][0] |= 0xf1;									//a最西に壁を配置
 80102a8:	79bb      	ldrb	r3, [r7, #6]
 80102aa:	4a24      	ldr	r2, [pc, #144]	; (801033c <map_Init+0xd4>)
 80102ac:	011b      	lsls	r3, r3, #4
 80102ae:	4413      	add	r3, r2
 80102b0:	781a      	ldrb	r2, [r3, #0]
 80102b2:	79bb      	ldrb	r3, [r7, #6]
 80102b4:	f062 020e 	orn	r2, r2, #14
 80102b8:	b2d1      	uxtb	r1, r2
 80102ba:	4a20      	ldr	r2, [pc, #128]	; (801033c <map_Init+0xd4>)
 80102bc:	011b      	lsls	r3, r3, #4
 80102be:	4413      	add	r3, r2
 80102c0:	460a      	mov	r2, r1
 80102c2:	701a      	strb	r2, [r3, #0]
		map[y][15] |= 0xf4;									//a最東に壁を配置
 80102c4:	79bb      	ldrb	r3, [r7, #6]
 80102c6:	4a1d      	ldr	r2, [pc, #116]	; (801033c <map_Init+0xd4>)
 80102c8:	011b      	lsls	r3, r3, #4
 80102ca:	4413      	add	r3, r2
 80102cc:	330f      	adds	r3, #15
 80102ce:	781a      	ldrb	r2, [r3, #0]
 80102d0:	79bb      	ldrb	r3, [r7, #6]
 80102d2:	f062 020b 	orn	r2, r2, #11
 80102d6:	b2d1      	uxtb	r1, r2
 80102d8:	4a18      	ldr	r2, [pc, #96]	; (801033c <map_Init+0xd4>)
 80102da:	011b      	lsls	r3, r3, #4
 80102dc:	4413      	add	r3, r2
 80102de:	330f      	adds	r3, #15
 80102e0:	460a      	mov	r2, r1
 80102e2:	701a      	strb	r2, [r3, #0]
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 80102e4:	79bb      	ldrb	r3, [r7, #6]
 80102e6:	3301      	adds	r3, #1
 80102e8:	71bb      	strb	r3, [r7, #6]
 80102ea:	79bb      	ldrb	r3, [r7, #6]
 80102ec:	2b0f      	cmp	r3, #15
 80102ee:	d9db      	bls.n	80102a8 <map_Init+0x40>
	}
	for(x = 0; x <= 15; x++){								//a各X座標で実行
 80102f0:	2300      	movs	r3, #0
 80102f2:	71fb      	strb	r3, [r7, #7]
 80102f4:	e019      	b.n	801032a <map_Init+0xc2>
		map[0][x] |= 0xf2;									//a最南に壁を配置
 80102f6:	79fb      	ldrb	r3, [r7, #7]
 80102f8:	4a10      	ldr	r2, [pc, #64]	; (801033c <map_Init+0xd4>)
 80102fa:	5cd2      	ldrb	r2, [r2, r3]
 80102fc:	79fb      	ldrb	r3, [r7, #7]
 80102fe:	f062 020d 	orn	r2, r2, #13
 8010302:	b2d1      	uxtb	r1, r2
 8010304:	4a0d      	ldr	r2, [pc, #52]	; (801033c <map_Init+0xd4>)
 8010306:	54d1      	strb	r1, [r2, r3]
		map[15][x] |= 0xf8;									//a最北に壁を配置
 8010308:	79fb      	ldrb	r3, [r7, #7]
 801030a:	4a0c      	ldr	r2, [pc, #48]	; (801033c <map_Init+0xd4>)
 801030c:	4413      	add	r3, r2
 801030e:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 8010312:	79fb      	ldrb	r3, [r7, #7]
 8010314:	f062 0207 	orn	r2, r2, #7
 8010318:	b2d1      	uxtb	r1, r2
 801031a:	4a08      	ldr	r2, [pc, #32]	; (801033c <map_Init+0xd4>)
 801031c:	4413      	add	r3, r2
 801031e:	460a      	mov	r2, r1
 8010320:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	for(x = 0; x <= 15; x++){								//a各X座標で実行
 8010324:	79fb      	ldrb	r3, [r7, #7]
 8010326:	3301      	adds	r3, #1
 8010328:	71fb      	strb	r3, [r7, #7]
 801032a:	79fb      	ldrb	r3, [r7, #7]
 801032c:	2b0f      	cmp	r3, #15
 801032e:	d9e2      	bls.n	80102f6 <map_Init+0x8e>
	}
}
 8010330:	bf00      	nop
 8010332:	370c      	adds	r7, #12
 8010334:	46bd      	mov	sp, r7
 8010336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033a:	4770      	bx	lr
 801033c:	200001ac 	.word	0x200001ac

08010340 <write_map>:
//write_map
//aマップデータを書き込む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void write_map(){
 8010340:	b490      	push	{r4, r7}
 8010342:	b082      	sub	sp, #8
 8010344:	af00      	add	r7, sp, #0

	//====a変数宣言====
	uint8_t m_temp;											//a向きを補正した壁情報

	//====a壁情報の補正格納====
	m_temp = (wall_info >> mouse.dir) & 0x0f;				//aセンサ壁情報をmouse.dirで向きを補正させて下位4bit分を残す
 8010346:	4b8f      	ldr	r3, [pc, #572]	; (8010584 <write_map+0x244>)
 8010348:	781b      	ldrb	r3, [r3, #0]
 801034a:	461a      	mov	r2, r3
 801034c:	4b8e      	ldr	r3, [pc, #568]	; (8010588 <write_map+0x248>)
 801034e:	789b      	ldrb	r3, [r3, #2]
 8010350:	b2db      	uxtb	r3, r3
 8010352:	fa42 f303 	asr.w	r3, r2, r3
 8010356:	b2db      	uxtb	r3, r3
 8010358:	f003 030f 	and.w	r3, r3, #15
 801035c:	71fb      	strb	r3, [r7, #7]
	m_temp |= (m_temp << 4);								//a上位4bitに下位4bitをコピー。この作業でm_tempにNESW順で壁が格納
 801035e:	79fb      	ldrb	r3, [r7, #7]
 8010360:	011b      	lsls	r3, r3, #4
 8010362:	b25a      	sxtb	r2, r3
 8010364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010368:	4313      	orrs	r3, r2
 801036a:	b25b      	sxtb	r3, r3
 801036c:	71fb      	strb	r3, [r7, #7]

	//====aデータの書き込み====
	map[mouse.y][mouse.x] = m_temp; 						//a現在地に壁情報書き込み
 801036e:	4b86      	ldr	r3, [pc, #536]	; (8010588 <write_map+0x248>)
 8010370:	785b      	ldrb	r3, [r3, #1]
 8010372:	b2db      	uxtb	r3, r3
 8010374:	4618      	mov	r0, r3
 8010376:	4b84      	ldr	r3, [pc, #528]	; (8010588 <write_map+0x248>)
 8010378:	781b      	ldrb	r3, [r3, #0]
 801037a:	b2db      	uxtb	r3, r3
 801037c:	4619      	mov	r1, r3
 801037e:	4a83      	ldr	r2, [pc, #524]	; (801058c <write_map+0x24c>)
 8010380:	0103      	lsls	r3, r0, #4
 8010382:	4413      	add	r3, r2
 8010384:	440b      	add	r3, r1
 8010386:	79fa      	ldrb	r2, [r7, #7]
 8010388:	701a      	strb	r2, [r3, #0]
	//----a周辺に書き込む----
	//a北側について
	if(mouse.y != 15){										//a現在最北端でないとき
 801038a:	4b7f      	ldr	r3, [pc, #508]	; (8010588 <write_map+0x248>)
 801038c:	785b      	ldrb	r3, [r3, #1]
 801038e:	b2db      	uxtb	r3, r3
 8010390:	2b0f      	cmp	r3, #15
 8010392:	d039      	beq.n	8010408 <write_map+0xc8>
		if(m_temp & 0x88){									//a北壁がある場合
 8010394:	79fb      	ldrb	r3, [r7, #7]
 8010396:	f003 0388 	and.w	r3, r3, #136	; 0x88
 801039a:	2b00      	cmp	r3, #0
 801039c:	d01a      	beq.n	80103d4 <write_map+0x94>
			map[mouse.y + 1][mouse.x] |= 0x22;				//a北側の区画から見て南壁ありを書き込む
 801039e:	4b7a      	ldr	r3, [pc, #488]	; (8010588 <write_map+0x248>)
 80103a0:	785b      	ldrb	r3, [r3, #1]
 80103a2:	b2d8      	uxtb	r0, r3
 80103a4:	4603      	mov	r3, r0
 80103a6:	3301      	adds	r3, #1
 80103a8:	4a77      	ldr	r2, [pc, #476]	; (8010588 <write_map+0x248>)
 80103aa:	7812      	ldrb	r2, [r2, #0]
 80103ac:	b2d1      	uxtb	r1, r2
 80103ae:	460c      	mov	r4, r1
 80103b0:	4a76      	ldr	r2, [pc, #472]	; (801058c <write_map+0x24c>)
 80103b2:	011b      	lsls	r3, r3, #4
 80103b4:	4413      	add	r3, r2
 80103b6:	4423      	add	r3, r4
 80103b8:	781a      	ldrb	r2, [r3, #0]
 80103ba:	4603      	mov	r3, r0
 80103bc:	3301      	adds	r3, #1
 80103be:	4608      	mov	r0, r1
 80103c0:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 80103c4:	b2d1      	uxtb	r1, r2
 80103c6:	4a71      	ldr	r2, [pc, #452]	; (801058c <write_map+0x24c>)
 80103c8:	011b      	lsls	r3, r3, #4
 80103ca:	4413      	add	r3, r2
 80103cc:	4403      	add	r3, r0
 80103ce:	460a      	mov	r2, r1
 80103d0:	701a      	strb	r2, [r3, #0]
 80103d2:	e019      	b.n	8010408 <write_map+0xc8>
		}else{												//a北壁がない場合
			map[mouse.y + 1][mouse.x] &= 0xDD;				//a北側の区画から見て南壁なしを書き込む
 80103d4:	4b6c      	ldr	r3, [pc, #432]	; (8010588 <write_map+0x248>)
 80103d6:	785b      	ldrb	r3, [r3, #1]
 80103d8:	b2d8      	uxtb	r0, r3
 80103da:	4603      	mov	r3, r0
 80103dc:	3301      	adds	r3, #1
 80103de:	4a6a      	ldr	r2, [pc, #424]	; (8010588 <write_map+0x248>)
 80103e0:	7812      	ldrb	r2, [r2, #0]
 80103e2:	b2d1      	uxtb	r1, r2
 80103e4:	460c      	mov	r4, r1
 80103e6:	4a69      	ldr	r2, [pc, #420]	; (801058c <write_map+0x24c>)
 80103e8:	011b      	lsls	r3, r3, #4
 80103ea:	4413      	add	r3, r2
 80103ec:	4423      	add	r3, r4
 80103ee:	781a      	ldrb	r2, [r3, #0]
 80103f0:	4603      	mov	r3, r0
 80103f2:	3301      	adds	r3, #1
 80103f4:	4608      	mov	r0, r1
 80103f6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80103fa:	b2d1      	uxtb	r1, r2
 80103fc:	4a63      	ldr	r2, [pc, #396]	; (801058c <write_map+0x24c>)
 80103fe:	011b      	lsls	r3, r3, #4
 8010400:	4413      	add	r3, r2
 8010402:	4403      	add	r3, r0
 8010404:	460a      	mov	r2, r1
 8010406:	701a      	strb	r2, [r3, #0]
		}
	}
	//a東側について
	if(mouse.x != 15){										//a現在最東端でないとき
 8010408:	4b5f      	ldr	r3, [pc, #380]	; (8010588 <write_map+0x248>)
 801040a:	781b      	ldrb	r3, [r3, #0]
 801040c:	b2db      	uxtb	r3, r3
 801040e:	2b0f      	cmp	r3, #15
 8010410:	d037      	beq.n	8010482 <write_map+0x142>
		if(m_temp & 0x44){									//a東壁がある場合
 8010412:	79fb      	ldrb	r3, [r7, #7]
 8010414:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010418:	2b00      	cmp	r3, #0
 801041a:	d019      	beq.n	8010450 <write_map+0x110>
			map[mouse.y][mouse.x + 1] |= 0x11;				//a東側の区画から見て西壁ありを書き込む
 801041c:	4b5a      	ldr	r3, [pc, #360]	; (8010588 <write_map+0x248>)
 801041e:	785b      	ldrb	r3, [r3, #1]
 8010420:	b2dc      	uxtb	r4, r3
 8010422:	4622      	mov	r2, r4
 8010424:	4b58      	ldr	r3, [pc, #352]	; (8010588 <write_map+0x248>)
 8010426:	781b      	ldrb	r3, [r3, #0]
 8010428:	b2d8      	uxtb	r0, r3
 801042a:	4603      	mov	r3, r0
 801042c:	3301      	adds	r3, #1
 801042e:	4957      	ldr	r1, [pc, #348]	; (801058c <write_map+0x24c>)
 8010430:	0112      	lsls	r2, r2, #4
 8010432:	440a      	add	r2, r1
 8010434:	4413      	add	r3, r2
 8010436:	781a      	ldrb	r2, [r3, #0]
 8010438:	4603      	mov	r3, r0
 801043a:	3301      	adds	r3, #1
 801043c:	f042 0211 	orr.w	r2, r2, #17
 8010440:	b2d0      	uxtb	r0, r2
 8010442:	4952      	ldr	r1, [pc, #328]	; (801058c <write_map+0x24c>)
 8010444:	0122      	lsls	r2, r4, #4
 8010446:	440a      	add	r2, r1
 8010448:	4413      	add	r3, r2
 801044a:	4602      	mov	r2, r0
 801044c:	701a      	strb	r2, [r3, #0]
 801044e:	e018      	b.n	8010482 <write_map+0x142>
		}else{												//a北壁がない場合
			map[mouse.y][mouse.x + 1] &= 0xEE;				//a東側の区画から見て西壁なしを書き込む
 8010450:	4b4d      	ldr	r3, [pc, #308]	; (8010588 <write_map+0x248>)
 8010452:	785b      	ldrb	r3, [r3, #1]
 8010454:	b2dc      	uxtb	r4, r3
 8010456:	4622      	mov	r2, r4
 8010458:	4b4b      	ldr	r3, [pc, #300]	; (8010588 <write_map+0x248>)
 801045a:	781b      	ldrb	r3, [r3, #0]
 801045c:	b2d8      	uxtb	r0, r3
 801045e:	4603      	mov	r3, r0
 8010460:	3301      	adds	r3, #1
 8010462:	494a      	ldr	r1, [pc, #296]	; (801058c <write_map+0x24c>)
 8010464:	0112      	lsls	r2, r2, #4
 8010466:	440a      	add	r2, r1
 8010468:	4413      	add	r3, r2
 801046a:	781a      	ldrb	r2, [r3, #0]
 801046c:	4603      	mov	r3, r0
 801046e:	3301      	adds	r3, #1
 8010470:	f022 0211 	bic.w	r2, r2, #17
 8010474:	b2d0      	uxtb	r0, r2
 8010476:	4945      	ldr	r1, [pc, #276]	; (801058c <write_map+0x24c>)
 8010478:	0122      	lsls	r2, r4, #4
 801047a:	440a      	add	r2, r1
 801047c:	4413      	add	r3, r2
 801047e:	4602      	mov	r2, r0
 8010480:	701a      	strb	r2, [r3, #0]
		}
	}
	//a南壁について
	if(mouse.y != 0){										//a現在最南端でないとき
 8010482:	4b41      	ldr	r3, [pc, #260]	; (8010588 <write_map+0x248>)
 8010484:	785b      	ldrb	r3, [r3, #1]
 8010486:	b2db      	uxtb	r3, r3
 8010488:	2b00      	cmp	r3, #0
 801048a:	d039      	beq.n	8010500 <write_map+0x1c0>
		if(m_temp & 0x22){									//a南壁がある場合
 801048c:	79fb      	ldrb	r3, [r7, #7]
 801048e:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8010492:	2b00      	cmp	r3, #0
 8010494:	d01a      	beq.n	80104cc <write_map+0x18c>
			map[mouse.y - 1][mouse.x] |= 0x88;				//a南側の区画から見て北壁ありを書き込む
 8010496:	4b3c      	ldr	r3, [pc, #240]	; (8010588 <write_map+0x248>)
 8010498:	785b      	ldrb	r3, [r3, #1]
 801049a:	b2d8      	uxtb	r0, r3
 801049c:	4603      	mov	r3, r0
 801049e:	3b01      	subs	r3, #1
 80104a0:	4a39      	ldr	r2, [pc, #228]	; (8010588 <write_map+0x248>)
 80104a2:	7812      	ldrb	r2, [r2, #0]
 80104a4:	b2d1      	uxtb	r1, r2
 80104a6:	460c      	mov	r4, r1
 80104a8:	4a38      	ldr	r2, [pc, #224]	; (801058c <write_map+0x24c>)
 80104aa:	011b      	lsls	r3, r3, #4
 80104ac:	4413      	add	r3, r2
 80104ae:	4423      	add	r3, r4
 80104b0:	781a      	ldrb	r2, [r3, #0]
 80104b2:	4603      	mov	r3, r0
 80104b4:	3b01      	subs	r3, #1
 80104b6:	4608      	mov	r0, r1
 80104b8:	f062 0277 	orn	r2, r2, #119	; 0x77
 80104bc:	b2d1      	uxtb	r1, r2
 80104be:	4a33      	ldr	r2, [pc, #204]	; (801058c <write_map+0x24c>)
 80104c0:	011b      	lsls	r3, r3, #4
 80104c2:	4413      	add	r3, r2
 80104c4:	4403      	add	r3, r0
 80104c6:	460a      	mov	r2, r1
 80104c8:	701a      	strb	r2, [r3, #0]
 80104ca:	e019      	b.n	8010500 <write_map+0x1c0>
		}else{												//a南壁がない場合
			map[mouse.y - 1][mouse.x] &= 0x77;				//a南側の区画から見て北壁なしを書き込む
 80104cc:	4b2e      	ldr	r3, [pc, #184]	; (8010588 <write_map+0x248>)
 80104ce:	785b      	ldrb	r3, [r3, #1]
 80104d0:	b2d8      	uxtb	r0, r3
 80104d2:	4603      	mov	r3, r0
 80104d4:	3b01      	subs	r3, #1
 80104d6:	4a2c      	ldr	r2, [pc, #176]	; (8010588 <write_map+0x248>)
 80104d8:	7812      	ldrb	r2, [r2, #0]
 80104da:	b2d1      	uxtb	r1, r2
 80104dc:	460c      	mov	r4, r1
 80104de:	4a2b      	ldr	r2, [pc, #172]	; (801058c <write_map+0x24c>)
 80104e0:	011b      	lsls	r3, r3, #4
 80104e2:	4413      	add	r3, r2
 80104e4:	4423      	add	r3, r4
 80104e6:	781a      	ldrb	r2, [r3, #0]
 80104e8:	4603      	mov	r3, r0
 80104ea:	3b01      	subs	r3, #1
 80104ec:	4608      	mov	r0, r1
 80104ee:	f002 0277 	and.w	r2, r2, #119	; 0x77
 80104f2:	b2d1      	uxtb	r1, r2
 80104f4:	4a25      	ldr	r2, [pc, #148]	; (801058c <write_map+0x24c>)
 80104f6:	011b      	lsls	r3, r3, #4
 80104f8:	4413      	add	r3, r2
 80104fa:	4403      	add	r3, r0
 80104fc:	460a      	mov	r2, r1
 80104fe:	701a      	strb	r2, [r3, #0]
		}
	}
	//a西側について
	if(mouse.x != 0){										//a現在最西端でないとき
 8010500:	4b21      	ldr	r3, [pc, #132]	; (8010588 <write_map+0x248>)
 8010502:	781b      	ldrb	r3, [r3, #0]
 8010504:	b2db      	uxtb	r3, r3
 8010506:	2b00      	cmp	r3, #0
 8010508:	d037      	beq.n	801057a <write_map+0x23a>
		if(m_temp & 0x11){									//a西壁がある場合
 801050a:	79fb      	ldrb	r3, [r7, #7]
 801050c:	f003 0311 	and.w	r3, r3, #17
 8010510:	2b00      	cmp	r3, #0
 8010512:	d019      	beq.n	8010548 <write_map+0x208>
			map[mouse.y][mouse.x - 1] |= 0x44;				//a西側の区画から見て東壁ありを書き込む
 8010514:	4b1c      	ldr	r3, [pc, #112]	; (8010588 <write_map+0x248>)
 8010516:	785b      	ldrb	r3, [r3, #1]
 8010518:	b2dc      	uxtb	r4, r3
 801051a:	4622      	mov	r2, r4
 801051c:	4b1a      	ldr	r3, [pc, #104]	; (8010588 <write_map+0x248>)
 801051e:	781b      	ldrb	r3, [r3, #0]
 8010520:	b2d8      	uxtb	r0, r3
 8010522:	4603      	mov	r3, r0
 8010524:	3b01      	subs	r3, #1
 8010526:	4919      	ldr	r1, [pc, #100]	; (801058c <write_map+0x24c>)
 8010528:	0112      	lsls	r2, r2, #4
 801052a:	440a      	add	r2, r1
 801052c:	4413      	add	r3, r2
 801052e:	781a      	ldrb	r2, [r3, #0]
 8010530:	4603      	mov	r3, r0
 8010532:	3b01      	subs	r3, #1
 8010534:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 8010538:	b2d0      	uxtb	r0, r2
 801053a:	4914      	ldr	r1, [pc, #80]	; (801058c <write_map+0x24c>)
 801053c:	0122      	lsls	r2, r4, #4
 801053e:	440a      	add	r2, r1
 8010540:	4413      	add	r3, r2
 8010542:	4602      	mov	r2, r0
 8010544:	701a      	strb	r2, [r3, #0]
		}else{												//a西壁がない場合
			map[mouse.y][mouse.x - 1] &= 0xBB;				//a西側の区画から見て東側なしを書き込む
		}
	}
}
 8010546:	e018      	b.n	801057a <write_map+0x23a>
			map[mouse.y][mouse.x - 1] &= 0xBB;				//a西側の区画から見て東側なしを書き込む
 8010548:	4b0f      	ldr	r3, [pc, #60]	; (8010588 <write_map+0x248>)
 801054a:	785b      	ldrb	r3, [r3, #1]
 801054c:	b2dc      	uxtb	r4, r3
 801054e:	4622      	mov	r2, r4
 8010550:	4b0d      	ldr	r3, [pc, #52]	; (8010588 <write_map+0x248>)
 8010552:	781b      	ldrb	r3, [r3, #0]
 8010554:	b2d8      	uxtb	r0, r3
 8010556:	4603      	mov	r3, r0
 8010558:	3b01      	subs	r3, #1
 801055a:	490c      	ldr	r1, [pc, #48]	; (801058c <write_map+0x24c>)
 801055c:	0112      	lsls	r2, r2, #4
 801055e:	440a      	add	r2, r1
 8010560:	4413      	add	r3, r2
 8010562:	781a      	ldrb	r2, [r3, #0]
 8010564:	4603      	mov	r3, r0
 8010566:	3b01      	subs	r3, #1
 8010568:	f022 0244 	bic.w	r2, r2, #68	; 0x44
 801056c:	b2d0      	uxtb	r0, r2
 801056e:	4907      	ldr	r1, [pc, #28]	; (801058c <write_map+0x24c>)
 8010570:	0122      	lsls	r2, r4, #4
 8010572:	440a      	add	r2, r1
 8010574:	4413      	add	r3, r2
 8010576:	4602      	mov	r2, r0
 8010578:	701a      	strb	r2, [r3, #0]
}
 801057a:	bf00      	nop
 801057c:	3708      	adds	r7, #8
 801057e:	46bd      	mov	sp, r7
 8010580:	bc90      	pop	{r4, r7}
 8010582:	4770      	bx	lr
 8010584:	200002c8 	.word	0x200002c8
 8010588:	20000c8c 	.word	0x20000c8c
 801058c:	200001ac 	.word	0x200001ac

08010590 <turn_dir>:
//turn_dir
//aマウスの方向を変更する
//a引数1：t_pat …… 回転方向(search.hでマクロ定義)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void turn_dir(uint8_t t_pat, uint8_t t_mode){
 8010590:	b480      	push	{r7}
 8010592:	b083      	sub	sp, #12
 8010594:	af00      	add	r7, sp, #0
 8010596:	4603      	mov	r3, r0
 8010598:	460a      	mov	r2, r1
 801059a:	71fb      	strb	r3, [r7, #7]
 801059c:	4613      	mov	r3, r2
 801059e:	71bb      	strb	r3, [r7, #6]

	//====a方向を変更====
	if(t_mode < 2){												//4方位モード
 80105a0:	79bb      	ldrb	r3, [r7, #6]
 80105a2:	2b01      	cmp	r3, #1
 80105a4:	d837      	bhi.n	8010616 <turn_dir+0x86>
		mouse.dir = (mouse.dir + t_pat) & 0x03;					//a指定された分mouse.dirを回転させる
 80105a6:	4b5a      	ldr	r3, [pc, #360]	; (8010710 <turn_dir+0x180>)
 80105a8:	789b      	ldrb	r3, [r3, #2]
 80105aa:	b2da      	uxtb	r2, r3
 80105ac:	79fb      	ldrb	r3, [r7, #7]
 80105ae:	4413      	add	r3, r2
 80105b0:	b2db      	uxtb	r3, r3
 80105b2:	f003 0303 	and.w	r3, r3, #3
 80105b6:	b2da      	uxtb	r2, r3
 80105b8:	4b55      	ldr	r3, [pc, #340]	; (8010710 <turn_dir+0x180>)
 80105ba:	709a      	strb	r2, [r3, #2]
		if(t_mode == 1){
 80105bc:	79bb      	ldrb	r3, [r7, #6]
 80105be:	2b01      	cmp	r3, #1
 80105c0:	f040 809f 	bne.w	8010702 <turn_dir+0x172>
			if(t_pat == 0x01) target_degree_z -= 90.5;			//a目標角度+右90度
 80105c4:	79fb      	ldrb	r3, [r7, #7]
 80105c6:	2b01      	cmp	r3, #1
 80105c8:	d109      	bne.n	80105de <turn_dir+0x4e>
 80105ca:	4b52      	ldr	r3, [pc, #328]	; (8010714 <turn_dir+0x184>)
 80105cc:	edd3 7a00 	vldr	s15, [r3]
 80105d0:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8010718 <turn_dir+0x188>
 80105d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80105d8:	4b4e      	ldr	r3, [pc, #312]	; (8010714 <turn_dir+0x184>)
 80105da:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xff) target_degree_z += 90.5;			//a目標角度+左90度
 80105de:	79fb      	ldrb	r3, [r7, #7]
 80105e0:	2bff      	cmp	r3, #255	; 0xff
 80105e2:	d109      	bne.n	80105f8 <turn_dir+0x68>
 80105e4:	4b4b      	ldr	r3, [pc, #300]	; (8010714 <turn_dir+0x184>)
 80105e6:	edd3 7a00 	vldr	s15, [r3]
 80105ea:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8010718 <turn_dir+0x188>
 80105ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80105f2:	4b48      	ldr	r3, [pc, #288]	; (8010714 <turn_dir+0x184>)
 80105f4:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x02) target_degree_z -= 181;			//a目標角度+右180度
 80105f8:	79fb      	ldrb	r3, [r7, #7]
 80105fa:	2b02      	cmp	r3, #2
 80105fc:	f040 8081 	bne.w	8010702 <turn_dir+0x172>
 8010600:	4b44      	ldr	r3, [pc, #272]	; (8010714 <turn_dir+0x184>)
 8010602:	edd3 7a00 	vldr	s15, [r3]
 8010606:	ed9f 7a45 	vldr	s14, [pc, #276]	; 801071c <turn_dir+0x18c>
 801060a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801060e:	4b41      	ldr	r3, [pc, #260]	; (8010714 <turn_dir+0x184>)
 8010610:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfe) target_degree_z += 90.5;			//a目標角度+左90度
			if(t_pat == 0xfd) target_degree_z += 135.75;		//a目標角度+右180度
			if(t_pat == 0xfc) target_degree_z += 181;			//a目標角度+右180度
		}
	}
}
 8010614:	e075      	b.n	8010702 <turn_dir+0x172>
		mouse.dir = (mouse.dir + t_pat) & 0x07;					//a指定された分mouse.dirを回転させる
 8010616:	4b3e      	ldr	r3, [pc, #248]	; (8010710 <turn_dir+0x180>)
 8010618:	789b      	ldrb	r3, [r3, #2]
 801061a:	b2da      	uxtb	r2, r3
 801061c:	79fb      	ldrb	r3, [r7, #7]
 801061e:	4413      	add	r3, r2
 8010620:	b2db      	uxtb	r3, r3
 8010622:	f003 0307 	and.w	r3, r3, #7
 8010626:	b2da      	uxtb	r2, r3
 8010628:	4b39      	ldr	r3, [pc, #228]	; (8010710 <turn_dir+0x180>)
 801062a:	709a      	strb	r2, [r3, #2]
		if(t_mode == 3){
 801062c:	79bb      	ldrb	r3, [r7, #6]
 801062e:	2b03      	cmp	r3, #3
 8010630:	d167      	bne.n	8010702 <turn_dir+0x172>
			if(t_pat == 0x01) target_degree_z -= 45.25;			//a目標角度+右90度
 8010632:	79fb      	ldrb	r3, [r7, #7]
 8010634:	2b01      	cmp	r3, #1
 8010636:	d109      	bne.n	801064c <turn_dir+0xbc>
 8010638:	4b36      	ldr	r3, [pc, #216]	; (8010714 <turn_dir+0x184>)
 801063a:	edd3 7a00 	vldr	s15, [r3]
 801063e:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8010720 <turn_dir+0x190>
 8010642:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010646:	4b33      	ldr	r3, [pc, #204]	; (8010714 <turn_dir+0x184>)
 8010648:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x02) target_degree_z -= 90.5;			//a目標角度+左90度
 801064c:	79fb      	ldrb	r3, [r7, #7]
 801064e:	2b02      	cmp	r3, #2
 8010650:	d109      	bne.n	8010666 <turn_dir+0xd6>
 8010652:	4b30      	ldr	r3, [pc, #192]	; (8010714 <turn_dir+0x184>)
 8010654:	edd3 7a00 	vldr	s15, [r3]
 8010658:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8010718 <turn_dir+0x188>
 801065c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010660:	4b2c      	ldr	r3, [pc, #176]	; (8010714 <turn_dir+0x184>)
 8010662:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x03) target_degree_z -= 135.75;		//a目標角度+右180度
 8010666:	79fb      	ldrb	r3, [r7, #7]
 8010668:	2b03      	cmp	r3, #3
 801066a:	d109      	bne.n	8010680 <turn_dir+0xf0>
 801066c:	4b29      	ldr	r3, [pc, #164]	; (8010714 <turn_dir+0x184>)
 801066e:	edd3 7a00 	vldr	s15, [r3]
 8010672:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8010724 <turn_dir+0x194>
 8010676:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801067a:	4b26      	ldr	r3, [pc, #152]	; (8010714 <turn_dir+0x184>)
 801067c:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x04) target_degree_z -= 181;			//a目標角度+右180度
 8010680:	79fb      	ldrb	r3, [r7, #7]
 8010682:	2b04      	cmp	r3, #4
 8010684:	d109      	bne.n	801069a <turn_dir+0x10a>
 8010686:	4b23      	ldr	r3, [pc, #140]	; (8010714 <turn_dir+0x184>)
 8010688:	edd3 7a00 	vldr	s15, [r3]
 801068c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 801071c <turn_dir+0x18c>
 8010690:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010694:	4b1f      	ldr	r3, [pc, #124]	; (8010714 <turn_dir+0x184>)
 8010696:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xff) target_degree_z += 45.25;			//a目標角度+右90度
 801069a:	79fb      	ldrb	r3, [r7, #7]
 801069c:	2bff      	cmp	r3, #255	; 0xff
 801069e:	d109      	bne.n	80106b4 <turn_dir+0x124>
 80106a0:	4b1c      	ldr	r3, [pc, #112]	; (8010714 <turn_dir+0x184>)
 80106a2:	edd3 7a00 	vldr	s15, [r3]
 80106a6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8010720 <turn_dir+0x190>
 80106aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80106ae:	4b19      	ldr	r3, [pc, #100]	; (8010714 <turn_dir+0x184>)
 80106b0:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfe) target_degree_z += 90.5;			//a目標角度+左90度
 80106b4:	79fb      	ldrb	r3, [r7, #7]
 80106b6:	2bfe      	cmp	r3, #254	; 0xfe
 80106b8:	d109      	bne.n	80106ce <turn_dir+0x13e>
 80106ba:	4b16      	ldr	r3, [pc, #88]	; (8010714 <turn_dir+0x184>)
 80106bc:	edd3 7a00 	vldr	s15, [r3]
 80106c0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8010718 <turn_dir+0x188>
 80106c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80106c8:	4b12      	ldr	r3, [pc, #72]	; (8010714 <turn_dir+0x184>)
 80106ca:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfd) target_degree_z += 135.75;		//a目標角度+右180度
 80106ce:	79fb      	ldrb	r3, [r7, #7]
 80106d0:	2bfd      	cmp	r3, #253	; 0xfd
 80106d2:	d109      	bne.n	80106e8 <turn_dir+0x158>
 80106d4:	4b0f      	ldr	r3, [pc, #60]	; (8010714 <turn_dir+0x184>)
 80106d6:	edd3 7a00 	vldr	s15, [r3]
 80106da:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8010724 <turn_dir+0x194>
 80106de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80106e2:	4b0c      	ldr	r3, [pc, #48]	; (8010714 <turn_dir+0x184>)
 80106e4:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfc) target_degree_z += 181;			//a目標角度+右180度
 80106e8:	79fb      	ldrb	r3, [r7, #7]
 80106ea:	2bfc      	cmp	r3, #252	; 0xfc
 80106ec:	d109      	bne.n	8010702 <turn_dir+0x172>
 80106ee:	4b09      	ldr	r3, [pc, #36]	; (8010714 <turn_dir+0x184>)
 80106f0:	edd3 7a00 	vldr	s15, [r3]
 80106f4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 801071c <turn_dir+0x18c>
 80106f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80106fc:	4b05      	ldr	r3, [pc, #20]	; (8010714 <turn_dir+0x184>)
 80106fe:	edc3 7a00 	vstr	s15, [r3]
}
 8010702:	bf00      	nop
 8010704:	370c      	adds	r7, #12
 8010706:	46bd      	mov	sp, r7
 8010708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070c:	4770      	bx	lr
 801070e:	bf00      	nop
 8010710:	20000c8c 	.word	0x20000c8c
 8010714:	20000c78 	.word	0x20000c78
 8010718:	42b50000 	.word	0x42b50000
 801071c:	43350000 	.word	0x43350000
 8010720:	42350000 	.word	0x42350000
 8010724:	4307c000 	.word	0x4307c000

08010728 <make_smap>:
//make_smap
//a歩数マップを作成する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap(void){
 8010728:	b590      	push	{r4, r7, lr}
 801072a:	b08f      	sub	sp, #60	; 0x3c
 801072c:	af00      	add	r7, sp, #0
	//====a変数宣言====
	uint8_t x, y;											//for文用変数
	uint8_t m_temp_sample[16];

	//====a歩数マップのクリア====
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 801072e:	2300      	movs	r3, #0
 8010730:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8010734:	e01c      	b.n	8010770 <make_smap+0x48>
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 8010736:	2300      	movs	r3, #0
 8010738:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801073c:	e00f      	b.n	801075e <make_smap+0x36>
			smap[y][x] = 0x03e7;							//a未記入部分は歩数最大とする
 801073e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010742:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010746:	49be      	ldr	r1, [pc, #760]	; (8010a40 <make_smap+0x318>)
 8010748:	0112      	lsls	r2, r2, #4
 801074a:	4413      	add	r3, r2
 801074c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010750:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 8010754:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010758:	3301      	adds	r3, #1
 801075a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801075e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010762:	2b0f      	cmp	r3, #15
 8010764:	d9eb      	bls.n	801073e <make_smap+0x16>
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 8010766:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801076a:	3301      	adds	r3, #1
 801076c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8010770:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010774:	2b0f      	cmp	r3, #15
 8010776:	d9de      	bls.n	8010736 <make_smap+0xe>
		}
	}

	//====aゴール座標を0にする====
	m_step = 0;												//a歩数カウンタを0にする
 8010778:	4bb2      	ldr	r3, [pc, #712]	; (8010a44 <make_smap+0x31c>)
 801077a:	2200      	movs	r2, #0
 801077c:	801a      	strh	r2, [r3, #0]

	for(int j=0; j<goal_mode; j++){
 801077e:	2300      	movs	r3, #0
 8010780:	633b      	str	r3, [r7, #48]	; 0x30
 8010782:	e01e      	b.n	80107c2 <make_smap+0x9a>
		for(int k=0; k<goal_mode; k++){
 8010784:	2300      	movs	r3, #0
 8010786:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010788:	e012      	b.n	80107b0 <make_smap+0x88>
		smap[goal_y+j][goal_x+k] = 0;
 801078a:	4baf      	ldr	r3, [pc, #700]	; (8010a48 <make_smap+0x320>)
 801078c:	781b      	ldrb	r3, [r3, #0]
 801078e:	461a      	mov	r2, r3
 8010790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010792:	441a      	add	r2, r3
 8010794:	4bad      	ldr	r3, [pc, #692]	; (8010a4c <make_smap+0x324>)
 8010796:	781b      	ldrb	r3, [r3, #0]
 8010798:	4619      	mov	r1, r3
 801079a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801079c:	440b      	add	r3, r1
 801079e:	49a8      	ldr	r1, [pc, #672]	; (8010a40 <make_smap+0x318>)
 80107a0:	0112      	lsls	r2, r2, #4
 80107a2:	4413      	add	r3, r2
 80107a4:	2200      	movs	r2, #0
 80107a6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int k=0; k<goal_mode; k++){
 80107aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ac:	3301      	adds	r3, #1
 80107ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80107b0:	4ba7      	ldr	r3, [pc, #668]	; (8010a50 <make_smap+0x328>)
 80107b2:	781b      	ldrb	r3, [r3, #0]
 80107b4:	461a      	mov	r2, r3
 80107b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107b8:	4293      	cmp	r3, r2
 80107ba:	dbe6      	blt.n	801078a <make_smap+0x62>
	for(int j=0; j<goal_mode; j++){
 80107bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107be:	3301      	adds	r3, #1
 80107c0:	633b      	str	r3, [r7, #48]	; 0x30
 80107c2:	4ba3      	ldr	r3, [pc, #652]	; (8010a50 <make_smap+0x328>)
 80107c4:	781b      	ldrb	r3, [r3, #0]
 80107c6:	461a      	mov	r2, r3
 80107c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ca:	4293      	cmp	r3, r2
 80107cc:	dbda      	blt.n	8010784 <make_smap+0x5c>
	}

//	smap[goal_y][goal_x] = 0;

	//====a歩数カウンタの重みづけ====
	int straight = 2;
 80107ce:	2302      	movs	r3, #2
 80107d0:	617b      	str	r3, [r7, #20]
	int turn = 5;
 80107d2:	2305      	movs	r3, #5
 80107d4:	613b      	str	r3, [r7, #16]
	full_led_write1(GREEN);
 80107d6:	2002      	movs	r0, #2
 80107d8:	f001 fd6e 	bl	80122b8 <full_led_write1>
	//====a自分の座標にたどり着くまでループ====
	do{
		//----aマップ全域を捜索----
		for(y = 0; y <= 15; y++){							//a各Y座標で実行
 80107dc:	2300      	movs	r3, #0
 80107de:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80107e2:	e334      	b.n	8010e4e <make_smap+0x726>
			for(x = 0; x <= 15; x++){						//a各X座標で実行
 80107e4:	2300      	movs	r3, #0
 80107e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80107ea:	e326      	b.n	8010e3a <make_smap+0x712>
				//----a現在最大の歩数を発見したとき----
				if(smap[y][x] == m_step){					//a歩数カウンタm_stepの値が現在最大の歩数
 80107ec:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80107f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80107f4:	4992      	ldr	r1, [pc, #584]	; (8010a40 <make_smap+0x318>)
 80107f6:	0112      	lsls	r2, r2, #4
 80107f8:	4413      	add	r3, r2
 80107fa:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80107fe:	4b91      	ldr	r3, [pc, #580]	; (8010a44 <make_smap+0x31c>)
 8010800:	881b      	ldrh	r3, [r3, #0]
 8010802:	429a      	cmp	r2, r3
 8010804:	f040 8314 	bne.w	8010e30 <make_smap+0x708>
					uint8_t m_temp = map[y][x];				//map配列からマップデータを取り出す
 8010808:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801080c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010810:	4990      	ldr	r1, [pc, #576]	; (8010a54 <make_smap+0x32c>)
 8010812:	0112      	lsls	r2, r2, #4
 8010814:	440a      	add	r2, r1
 8010816:	4413      	add	r3, r2
 8010818:	781b      	ldrb	r3, [r3, #0]
 801081a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					if(MF.FLAG.SCND){						//a二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 801081e:	4b8e      	ldr	r3, [pc, #568]	; (8010a58 <make_smap+0x330>)
 8010820:	881b      	ldrh	r3, [r3, #0]
 8010822:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010826:	b2db      	uxtb	r3, r3
 8010828:	2b00      	cmp	r3, #0
 801082a:	d004      	beq.n	8010836 <make_smap+0x10e>
						m_temp >>= 4;						//a上位4bitを使うので4bit分右にシフトさせる
 801082c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010830:	091b      	lsrs	r3, r3, #4
 8010832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					}
					//----a北壁についての処理----
					if(!(m_temp & 0x08) && y != 15){		//a北壁がなく現在最北端でないとき
 8010836:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801083a:	f003 0308 	and.w	r3, r3, #8
 801083e:	2b00      	cmp	r3, #0
 8010840:	f040 80b4 	bne.w	80109ac <make_smap+0x284>
 8010844:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010848:	2b0f      	cmp	r3, #15
 801084a:	f000 80af 	beq.w	80109ac <make_smap+0x284>
						if(smap[y+1][x] >= (smap[y][x]+turn)){		//a北側が記入後より大きいなら
 801084e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010852:	1c5a      	adds	r2, r3, #1
 8010854:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010858:	4979      	ldr	r1, [pc, #484]	; (8010a40 <make_smap+0x318>)
 801085a:	0112      	lsls	r2, r2, #4
 801085c:	4413      	add	r3, r2
 801085e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010862:	4618      	mov	r0, r3
 8010864:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010868:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801086c:	4974      	ldr	r1, [pc, #464]	; (8010a40 <make_smap+0x318>)
 801086e:	0112      	lsls	r2, r2, #4
 8010870:	4413      	add	r3, r2
 8010872:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010876:	461a      	mov	r2, r3
 8010878:	693b      	ldr	r3, [r7, #16]
 801087a:	4413      	add	r3, r2
 801087c:	4298      	cmp	r0, r3
 801087e:	f2c0 8095 	blt.w	80109ac <make_smap+0x284>
							smap[y+1][x] = smap[y][x] + turn;		//a次の歩数を書き込む
 8010882:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010886:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801088a:	496d      	ldr	r1, [pc, #436]	; (8010a40 <make_smap+0x318>)
 801088c:	0112      	lsls	r2, r2, #4
 801088e:	4413      	add	r3, r2
 8010890:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010894:	693b      	ldr	r3, [r7, #16]
 8010896:	b299      	uxth	r1, r3
 8010898:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801089c:	1c5a      	adds	r2, r3, #1
 801089e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80108a2:	4401      	add	r1, r0
 80108a4:	b288      	uxth	r0, r1
 80108a6:	4966      	ldr	r1, [pc, #408]	; (8010a40 <make_smap+0x318>)
 80108a8:	0112      	lsls	r2, r2, #4
 80108aa:	4413      	add	r3, r2
 80108ac:	4602      	mov	r2, r0
 80108ae:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 80108b2:	4b69      	ldr	r3, [pc, #420]	; (8010a58 <make_smap+0x330>)
 80108b4:	881b      	ldrh	r3, [r3, #0]
 80108b6:	f3c3 2380 	ubfx	r3, r3, #10, #1
 80108ba:	b2db      	uxtb	r3, r3
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d075      	beq.n	80109ac <make_smap+0x284>
								//----a直線優先処理----
								for(int k=1; k<16-y; k++) {					//a現在座標から見て北のマスすべてにおいて
 80108c0:	2301      	movs	r3, #1
 80108c2:	627b      	str	r3, [r7, #36]	; 0x24
 80108c4:	e06b      	b.n	801099e <make_smap+0x276>
									m_temp_sample[k] = map[y+k][x];				//map配列からマップデータを取り出す
 80108c6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80108ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108cc:	441a      	add	r2, r3
 80108ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80108d2:	4960      	ldr	r1, [pc, #384]	; (8010a54 <make_smap+0x32c>)
 80108d4:	0112      	lsls	r2, r2, #4
 80108d6:	440a      	add	r2, r1
 80108d8:	4413      	add	r3, r2
 80108da:	7819      	ldrb	r1, [r3, #0]
 80108dc:	463a      	mov	r2, r7
 80108de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108e0:	4413      	add	r3, r2
 80108e2:	460a      	mov	r2, r1
 80108e4:	701a      	strb	r2, [r3, #0]
									if(MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 80108e6:	4b5c      	ldr	r3, [pc, #368]	; (8010a58 <make_smap+0x330>)
 80108e8:	881b      	ldrh	r3, [r3, #0]
 80108ea:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80108ee:	b2db      	uxtb	r3, r3
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d00a      	beq.n	801090a <make_smap+0x1e2>
 80108f4:	463a      	mov	r2, r7
 80108f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108f8:	4413      	add	r3, r2
 80108fa:	781b      	ldrb	r3, [r3, #0]
 80108fc:	091b      	lsrs	r3, r3, #4
 80108fe:	b2d9      	uxtb	r1, r3
 8010900:	463a      	mov	r2, r7
 8010902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010904:	4413      	add	r3, r2
 8010906:	460a      	mov	r2, r1
 8010908:	701a      	strb	r2, [r3, #0]
									if(!(m_temp_sample[k] & 0x08) && (y+k) != 15) {		//a北壁がなく現在最北端でないとき
 801090a:	463a      	mov	r2, r7
 801090c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801090e:	4413      	add	r3, r2
 8010910:	781b      	ldrb	r3, [r3, #0]
 8010912:	f003 0308 	and.w	r3, r3, #8
 8010916:	2b00      	cmp	r3, #0
 8010918:	d148      	bne.n	80109ac <make_smap+0x284>
 801091a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801091e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010920:	4413      	add	r3, r2
 8010922:	2b0f      	cmp	r3, #15
 8010924:	d042      	beq.n	80109ac <make_smap+0x284>
										if(smap[y+k+1][x] >= (smap[y+k][x]+straight)){		//a北側が記入後より大きいなら
 8010926:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801092c:	4413      	add	r3, r2
 801092e:	1c5a      	adds	r2, r3, #1
 8010930:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010934:	4942      	ldr	r1, [pc, #264]	; (8010a40 <make_smap+0x318>)
 8010936:	0112      	lsls	r2, r2, #4
 8010938:	4413      	add	r3, r2
 801093a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801093e:	4618      	mov	r0, r3
 8010940:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010946:	441a      	add	r2, r3
 8010948:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801094c:	493c      	ldr	r1, [pc, #240]	; (8010a40 <make_smap+0x318>)
 801094e:	0112      	lsls	r2, r2, #4
 8010950:	4413      	add	r3, r2
 8010952:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010956:	461a      	mov	r2, r3
 8010958:	697b      	ldr	r3, [r7, #20]
 801095a:	4413      	add	r3, r2
 801095c:	4298      	cmp	r0, r3
 801095e:	db1b      	blt.n	8010998 <make_smap+0x270>
											smap[y+k+1][x] = smap[y+k][x] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 8010960:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010966:	441a      	add	r2, r3
 8010968:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801096c:	4934      	ldr	r1, [pc, #208]	; (8010a40 <make_smap+0x318>)
 801096e:	0112      	lsls	r2, r2, #4
 8010970:	4413      	add	r3, r2
 8010972:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010976:	697b      	ldr	r3, [r7, #20]
 8010978:	b299      	uxth	r1, r3
 801097a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801097e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010980:	4413      	add	r3, r2
 8010982:	1c5a      	adds	r2, r3, #1
 8010984:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010988:	4401      	add	r1, r0
 801098a:	b288      	uxth	r0, r1
 801098c:	492c      	ldr	r1, [pc, #176]	; (8010a40 <make_smap+0x318>)
 801098e:	0112      	lsls	r2, r2, #4
 8010990:	4413      	add	r3, r2
 8010992:	4602      	mov	r2, r0
 8010994:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for(int k=1; k<16-y; k++) {					//a現在座標から見て北のマスすべてにおいて
 8010998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801099a:	3301      	adds	r3, #1
 801099c:	627b      	str	r3, [r7, #36]	; 0x24
 801099e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80109a2:	f1c3 0310 	rsb	r3, r3, #16
 80109a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109a8:	429a      	cmp	r2, r3
 80109aa:	db8c      	blt.n	80108c6 <make_smap+0x19e>
								}
							}
						}
					}
					//----a東壁についての処理----
					if(!(m_temp & 0x04) && x != 15){		//a東壁がなく現在最東端でないとき
 80109ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80109b0:	f003 0304 	and.w	r3, r3, #4
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	f040 80c4 	bne.w	8010b42 <make_smap+0x41a>
 80109ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80109be:	2b0f      	cmp	r3, #15
 80109c0:	f000 80bf 	beq.w	8010b42 <make_smap+0x41a>
						if(smap[y][x+1] >= (smap[y][x]+turn)){	//a東側が記入後より大きいなら
 80109c4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80109c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80109cc:	3301      	adds	r3, #1
 80109ce:	491c      	ldr	r1, [pc, #112]	; (8010a40 <make_smap+0x318>)
 80109d0:	0112      	lsls	r2, r2, #4
 80109d2:	4413      	add	r3, r2
 80109d4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80109d8:	4618      	mov	r0, r3
 80109da:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80109de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80109e2:	4917      	ldr	r1, [pc, #92]	; (8010a40 <make_smap+0x318>)
 80109e4:	0112      	lsls	r2, r2, #4
 80109e6:	4413      	add	r3, r2
 80109e8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80109ec:	461a      	mov	r2, r3
 80109ee:	693b      	ldr	r3, [r7, #16]
 80109f0:	4413      	add	r3, r2
 80109f2:	4298      	cmp	r0, r3
 80109f4:	f2c0 80a5 	blt.w	8010b42 <make_smap+0x41a>
							smap[y][x+1] = smap[y][x] + turn;	//a次の歩数を書き込む
 80109f8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80109fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010a00:	490f      	ldr	r1, [pc, #60]	; (8010a40 <make_smap+0x318>)
 8010a02:	0112      	lsls	r2, r2, #4
 8010a04:	4413      	add	r3, r2
 8010a06:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010a0a:	693b      	ldr	r3, [r7, #16]
 8010a0c:	b299      	uxth	r1, r3
 8010a0e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010a12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010a16:	3301      	adds	r3, #1
 8010a18:	4401      	add	r1, r0
 8010a1a:	b288      	uxth	r0, r1
 8010a1c:	4908      	ldr	r1, [pc, #32]	; (8010a40 <make_smap+0x318>)
 8010a1e:	0112      	lsls	r2, r2, #4
 8010a20:	4413      	add	r3, r2
 8010a22:	4602      	mov	r2, r0
 8010a24:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 8010a28:	4b0b      	ldr	r3, [pc, #44]	; (8010a58 <make_smap+0x330>)
 8010a2a:	881b      	ldrh	r3, [r3, #0]
 8010a2c:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8010a30:	b2db      	uxtb	r3, r3
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	f000 8085 	beq.w	8010b42 <make_smap+0x41a>
								//----a直線優先処理----
								for(int k=1; k<16-x; k++) {					//a現在座標から見て東のマスすべてにおいて
 8010a38:	2301      	movs	r3, #1
 8010a3a:	623b      	str	r3, [r7, #32]
 8010a3c:	e07a      	b.n	8010b34 <make_smap+0x40c>
 8010a3e:	bf00      	nop
 8010a40:	20000da0 	.word	0x20000da0
 8010a44:	2000034e 	.word	0x2000034e
 8010a48:	20000b8c 	.word	0x20000b8c
 8010a4c:	20000c30 	.word	0x20000c30
 8010a50:	20000c31 	.word	0x20000c31
 8010a54:	200001ac 	.word	0x200001ac
 8010a58:	20000fa8 	.word	0x20000fa8
									m_temp_sample[k] = map[y][x+k];				//map配列からマップデータを取り出す
 8010a5c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010a60:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8010a64:	6a3b      	ldr	r3, [r7, #32]
 8010a66:	440b      	add	r3, r1
 8010a68:	49b6      	ldr	r1, [pc, #728]	; (8010d44 <make_smap+0x61c>)
 8010a6a:	0112      	lsls	r2, r2, #4
 8010a6c:	440a      	add	r2, r1
 8010a6e:	4413      	add	r3, r2
 8010a70:	7819      	ldrb	r1, [r3, #0]
 8010a72:	463a      	mov	r2, r7
 8010a74:	6a3b      	ldr	r3, [r7, #32]
 8010a76:	4413      	add	r3, r2
 8010a78:	460a      	mov	r2, r1
 8010a7a:	701a      	strb	r2, [r3, #0]
									if(MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 8010a7c:	4bb2      	ldr	r3, [pc, #712]	; (8010d48 <make_smap+0x620>)
 8010a7e:	881b      	ldrh	r3, [r3, #0]
 8010a80:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010a84:	b2db      	uxtb	r3, r3
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d00a      	beq.n	8010aa0 <make_smap+0x378>
 8010a8a:	463a      	mov	r2, r7
 8010a8c:	6a3b      	ldr	r3, [r7, #32]
 8010a8e:	4413      	add	r3, r2
 8010a90:	781b      	ldrb	r3, [r3, #0]
 8010a92:	091b      	lsrs	r3, r3, #4
 8010a94:	b2d9      	uxtb	r1, r3
 8010a96:	463a      	mov	r2, r7
 8010a98:	6a3b      	ldr	r3, [r7, #32]
 8010a9a:	4413      	add	r3, r2
 8010a9c:	460a      	mov	r2, r1
 8010a9e:	701a      	strb	r2, [r3, #0]
									if(!(m_temp_sample[k] & 0x04) && (x+k) != 15) {		//a東壁がなく現在最東端でないとき
 8010aa0:	463a      	mov	r2, r7
 8010aa2:	6a3b      	ldr	r3, [r7, #32]
 8010aa4:	4413      	add	r3, r2
 8010aa6:	781b      	ldrb	r3, [r3, #0]
 8010aa8:	f003 0304 	and.w	r3, r3, #4
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d148      	bne.n	8010b42 <make_smap+0x41a>
 8010ab0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010ab4:	6a3b      	ldr	r3, [r7, #32]
 8010ab6:	4413      	add	r3, r2
 8010ab8:	2b0f      	cmp	r3, #15
 8010aba:	d042      	beq.n	8010b42 <make_smap+0x41a>
										if(smap[y][x+k+1] >= (smap[y][x+k]+straight)){		//a東側が記入後より大きいなら
 8010abc:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010ac0:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8010ac4:	6a3b      	ldr	r3, [r7, #32]
 8010ac6:	440b      	add	r3, r1
 8010ac8:	3301      	adds	r3, #1
 8010aca:	49a0      	ldr	r1, [pc, #640]	; (8010d4c <make_smap+0x624>)
 8010acc:	0112      	lsls	r2, r2, #4
 8010ace:	4413      	add	r3, r2
 8010ad0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010ada:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8010ade:	6a3b      	ldr	r3, [r7, #32]
 8010ae0:	440b      	add	r3, r1
 8010ae2:	499a      	ldr	r1, [pc, #616]	; (8010d4c <make_smap+0x624>)
 8010ae4:	0112      	lsls	r2, r2, #4
 8010ae6:	4413      	add	r3, r2
 8010ae8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010aec:	461a      	mov	r2, r3
 8010aee:	697b      	ldr	r3, [r7, #20]
 8010af0:	4413      	add	r3, r2
 8010af2:	4298      	cmp	r0, r3
 8010af4:	db1b      	blt.n	8010b2e <make_smap+0x406>
											smap[y][x+k+1] = smap[y][x+k] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 8010af6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010afa:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8010afe:	6a3b      	ldr	r3, [r7, #32]
 8010b00:	440b      	add	r3, r1
 8010b02:	4992      	ldr	r1, [pc, #584]	; (8010d4c <make_smap+0x624>)
 8010b04:	0112      	lsls	r2, r2, #4
 8010b06:	4413      	add	r3, r2
 8010b08:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010b0c:	697b      	ldr	r3, [r7, #20]
 8010b0e:	b299      	uxth	r1, r3
 8010b10:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010b14:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8010b18:	6a3b      	ldr	r3, [r7, #32]
 8010b1a:	4423      	add	r3, r4
 8010b1c:	3301      	adds	r3, #1
 8010b1e:	4401      	add	r1, r0
 8010b20:	b288      	uxth	r0, r1
 8010b22:	498a      	ldr	r1, [pc, #552]	; (8010d4c <make_smap+0x624>)
 8010b24:	0112      	lsls	r2, r2, #4
 8010b26:	4413      	add	r3, r2
 8010b28:	4602      	mov	r2, r0
 8010b2a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for(int k=1; k<16-x; k++) {					//a現在座標から見て東のマスすべてにおいて
 8010b2e:	6a3b      	ldr	r3, [r7, #32]
 8010b30:	3301      	adds	r3, #1
 8010b32:	623b      	str	r3, [r7, #32]
 8010b34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010b38:	f1c3 0310 	rsb	r3, r3, #16
 8010b3c:	6a3a      	ldr	r2, [r7, #32]
 8010b3e:	429a      	cmp	r2, r3
 8010b40:	db8c      	blt.n	8010a5c <make_smap+0x334>
								}
							}
						}
					}
					//----a南壁についての処理----
					if(!(m_temp & 0x02) && y != 0){			//a南壁がなく現在最南端でないとき
 8010b42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010b46:	f003 0302 	and.w	r3, r3, #2
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	f040 80b1 	bne.w	8010cb2 <make_smap+0x58a>
 8010b50:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	f000 80ac 	beq.w	8010cb2 <make_smap+0x58a>
						if(smap[y-1][x] >= (smap[y][x]+turn)){	//a南側が記入後より大きいなら
 8010b5a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010b5e:	1e5a      	subs	r2, r3, #1
 8010b60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010b64:	4979      	ldr	r1, [pc, #484]	; (8010d4c <make_smap+0x624>)
 8010b66:	0112      	lsls	r2, r2, #4
 8010b68:	4413      	add	r3, r2
 8010b6a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010b6e:	4618      	mov	r0, r3
 8010b70:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010b74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010b78:	4974      	ldr	r1, [pc, #464]	; (8010d4c <make_smap+0x624>)
 8010b7a:	0112      	lsls	r2, r2, #4
 8010b7c:	4413      	add	r3, r2
 8010b7e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010b82:	461a      	mov	r2, r3
 8010b84:	693b      	ldr	r3, [r7, #16]
 8010b86:	4413      	add	r3, r2
 8010b88:	4298      	cmp	r0, r3
 8010b8a:	f2c0 8092 	blt.w	8010cb2 <make_smap+0x58a>
							smap[y-1][x] = smap[y][x] + turn;	//a次の歩数を書き込む
 8010b8e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010b92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010b96:	496d      	ldr	r1, [pc, #436]	; (8010d4c <make_smap+0x624>)
 8010b98:	0112      	lsls	r2, r2, #4
 8010b9a:	4413      	add	r3, r2
 8010b9c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010ba0:	693b      	ldr	r3, [r7, #16]
 8010ba2:	b299      	uxth	r1, r3
 8010ba4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010ba8:	1e5a      	subs	r2, r3, #1
 8010baa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010bae:	4401      	add	r1, r0
 8010bb0:	b288      	uxth	r0, r1
 8010bb2:	4966      	ldr	r1, [pc, #408]	; (8010d4c <make_smap+0x624>)
 8010bb4:	0112      	lsls	r2, r2, #4
 8010bb6:	4413      	add	r3, r2
 8010bb8:	4602      	mov	r2, r0
 8010bba:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 8010bbe:	4b62      	ldr	r3, [pc, #392]	; (8010d48 <make_smap+0x620>)
 8010bc0:	881b      	ldrh	r3, [r3, #0]
 8010bc2:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8010bc6:	b2db      	uxtb	r3, r3
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d072      	beq.n	8010cb2 <make_smap+0x58a>
								//----a直線優先処理----
								for(int k=1; k<y; k++) {						//a現在座標から見て南のマスすべてにおいて
 8010bcc:	2301      	movs	r3, #1
 8010bce:	61fb      	str	r3, [r7, #28]
 8010bd0:	e06a      	b.n	8010ca8 <make_smap+0x580>
									m_temp_sample[k] = map[y-k][x];				//map配列からマップデータを取り出す
 8010bd2:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010bd6:	69fb      	ldr	r3, [r7, #28]
 8010bd8:	1ad2      	subs	r2, r2, r3
 8010bda:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010bde:	4959      	ldr	r1, [pc, #356]	; (8010d44 <make_smap+0x61c>)
 8010be0:	0112      	lsls	r2, r2, #4
 8010be2:	440a      	add	r2, r1
 8010be4:	4413      	add	r3, r2
 8010be6:	7819      	ldrb	r1, [r3, #0]
 8010be8:	463a      	mov	r2, r7
 8010bea:	69fb      	ldr	r3, [r7, #28]
 8010bec:	4413      	add	r3, r2
 8010bee:	460a      	mov	r2, r1
 8010bf0:	701a      	strb	r2, [r3, #0]
									if(MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 8010bf2:	4b55      	ldr	r3, [pc, #340]	; (8010d48 <make_smap+0x620>)
 8010bf4:	881b      	ldrh	r3, [r3, #0]
 8010bf6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010bfa:	b2db      	uxtb	r3, r3
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d00a      	beq.n	8010c16 <make_smap+0x4ee>
 8010c00:	463a      	mov	r2, r7
 8010c02:	69fb      	ldr	r3, [r7, #28]
 8010c04:	4413      	add	r3, r2
 8010c06:	781b      	ldrb	r3, [r3, #0]
 8010c08:	091b      	lsrs	r3, r3, #4
 8010c0a:	b2d9      	uxtb	r1, r3
 8010c0c:	463a      	mov	r2, r7
 8010c0e:	69fb      	ldr	r3, [r7, #28]
 8010c10:	4413      	add	r3, r2
 8010c12:	460a      	mov	r2, r1
 8010c14:	701a      	strb	r2, [r3, #0]
									if(!(m_temp_sample[k] & 0x02) && (y-k) != 0) {		//a南壁がなく現在最南端でないとき
 8010c16:	463a      	mov	r2, r7
 8010c18:	69fb      	ldr	r3, [r7, #28]
 8010c1a:	4413      	add	r3, r2
 8010c1c:	781b      	ldrb	r3, [r3, #0]
 8010c1e:	f003 0302 	and.w	r3, r3, #2
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d145      	bne.n	8010cb2 <make_smap+0x58a>
 8010c26:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010c2a:	69fa      	ldr	r2, [r7, #28]
 8010c2c:	429a      	cmp	r2, r3
 8010c2e:	d040      	beq.n	8010cb2 <make_smap+0x58a>
										if(smap[y-k-1][x] >= (smap[y-k][x]+straight)){		//a南側が記入後より大きいなら
 8010c30:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010c34:	69fb      	ldr	r3, [r7, #28]
 8010c36:	1ad3      	subs	r3, r2, r3
 8010c38:	1e5a      	subs	r2, r3, #1
 8010c3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c3e:	4943      	ldr	r1, [pc, #268]	; (8010d4c <make_smap+0x624>)
 8010c40:	0112      	lsls	r2, r2, #4
 8010c42:	4413      	add	r3, r2
 8010c44:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010c4e:	69fb      	ldr	r3, [r7, #28]
 8010c50:	1ad2      	subs	r2, r2, r3
 8010c52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c56:	493d      	ldr	r1, [pc, #244]	; (8010d4c <make_smap+0x624>)
 8010c58:	0112      	lsls	r2, r2, #4
 8010c5a:	4413      	add	r3, r2
 8010c5c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010c60:	461a      	mov	r2, r3
 8010c62:	697b      	ldr	r3, [r7, #20]
 8010c64:	4413      	add	r3, r2
 8010c66:	4298      	cmp	r0, r3
 8010c68:	db1b      	blt.n	8010ca2 <make_smap+0x57a>
											smap[y-k-1][x] = smap[y-k][x] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 8010c6a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010c6e:	69fb      	ldr	r3, [r7, #28]
 8010c70:	1ad2      	subs	r2, r2, r3
 8010c72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c76:	4935      	ldr	r1, [pc, #212]	; (8010d4c <make_smap+0x624>)
 8010c78:	0112      	lsls	r2, r2, #4
 8010c7a:	4413      	add	r3, r2
 8010c7c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010c80:	697b      	ldr	r3, [r7, #20]
 8010c82:	b299      	uxth	r1, r3
 8010c84:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010c88:	69fb      	ldr	r3, [r7, #28]
 8010c8a:	1ad3      	subs	r3, r2, r3
 8010c8c:	1e5a      	subs	r2, r3, #1
 8010c8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c92:	4401      	add	r1, r0
 8010c94:	b288      	uxth	r0, r1
 8010c96:	492d      	ldr	r1, [pc, #180]	; (8010d4c <make_smap+0x624>)
 8010c98:	0112      	lsls	r2, r2, #4
 8010c9a:	4413      	add	r3, r2
 8010c9c:	4602      	mov	r2, r0
 8010c9e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for(int k=1; k<y; k++) {						//a現在座標から見て南のマスすべてにおいて
 8010ca2:	69fb      	ldr	r3, [r7, #28]
 8010ca4:	3301      	adds	r3, #1
 8010ca6:	61fb      	str	r3, [r7, #28]
 8010ca8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010cac:	69fa      	ldr	r2, [r7, #28]
 8010cae:	429a      	cmp	r2, r3
 8010cb0:	db8f      	blt.n	8010bd2 <make_smap+0x4aa>
								}
							}
						}
					}
					//----a西壁についての処理----
					if(!(m_temp & 0x01) && x != 0){			//a西壁がなく現在最西端でないとき
 8010cb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010cb6:	f003 0301 	and.w	r3, r3, #1
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	f040 80b8 	bne.w	8010e30 <make_smap+0x708>
 8010cc0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	f000 80b3 	beq.w	8010e30 <make_smap+0x708>
						if(smap[y][x-1] >= (smap[y][x]+turn)){	//a西側が記入後より大きいなら
 8010cca:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010cce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010cd2:	3b01      	subs	r3, #1
 8010cd4:	491d      	ldr	r1, [pc, #116]	; (8010d4c <make_smap+0x624>)
 8010cd6:	0112      	lsls	r2, r2, #4
 8010cd8:	4413      	add	r3, r2
 8010cda:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010ce4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ce8:	4918      	ldr	r1, [pc, #96]	; (8010d4c <make_smap+0x624>)
 8010cea:	0112      	lsls	r2, r2, #4
 8010cec:	4413      	add	r3, r2
 8010cee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010cf2:	461a      	mov	r2, r3
 8010cf4:	693b      	ldr	r3, [r7, #16]
 8010cf6:	4413      	add	r3, r2
 8010cf8:	4298      	cmp	r0, r3
 8010cfa:	f2c0 8099 	blt.w	8010e30 <make_smap+0x708>
							smap[y][x-1] = smap[y][x] + turn;	//a次の歩数を書き込む
 8010cfe:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010d02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010d06:	4911      	ldr	r1, [pc, #68]	; (8010d4c <make_smap+0x624>)
 8010d08:	0112      	lsls	r2, r2, #4
 8010d0a:	4413      	add	r3, r2
 8010d0c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010d10:	693b      	ldr	r3, [r7, #16]
 8010d12:	b299      	uxth	r1, r3
 8010d14:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010d18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010d1c:	3b01      	subs	r3, #1
 8010d1e:	4401      	add	r1, r0
 8010d20:	b288      	uxth	r0, r1
 8010d22:	490a      	ldr	r1, [pc, #40]	; (8010d4c <make_smap+0x624>)
 8010d24:	0112      	lsls	r2, r2, #4
 8010d26:	4413      	add	r3, r2
 8010d28:	4602      	mov	r2, r0
 8010d2a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 8010d2e:	4b06      	ldr	r3, [pc, #24]	; (8010d48 <make_smap+0x620>)
 8010d30:	881b      	ldrh	r3, [r3, #0]
 8010d32:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8010d36:	b2db      	uxtb	r3, r3
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d079      	beq.n	8010e30 <make_smap+0x708>
								//----a直線優先処理----
								for(int k=1; k<x; k++) {						//a現在座標から見て西のマスすべてにおいて
 8010d3c:	2301      	movs	r3, #1
 8010d3e:	61bb      	str	r3, [r7, #24]
 8010d40:	e071      	b.n	8010e26 <make_smap+0x6fe>
 8010d42:	bf00      	nop
 8010d44:	200001ac 	.word	0x200001ac
 8010d48:	20000fa8 	.word	0x20000fa8
 8010d4c:	20000da0 	.word	0x20000da0
									m_temp_sample[k] = map[y][x-k];				//map配列からマップデータを取り出す
 8010d50:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010d54:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8010d58:	69bb      	ldr	r3, [r7, #24]
 8010d5a:	1acb      	subs	r3, r1, r3
 8010d5c:	494c      	ldr	r1, [pc, #304]	; (8010e90 <make_smap+0x768>)
 8010d5e:	0112      	lsls	r2, r2, #4
 8010d60:	440a      	add	r2, r1
 8010d62:	4413      	add	r3, r2
 8010d64:	7819      	ldrb	r1, [r3, #0]
 8010d66:	463a      	mov	r2, r7
 8010d68:	69bb      	ldr	r3, [r7, #24]
 8010d6a:	4413      	add	r3, r2
 8010d6c:	460a      	mov	r2, r1
 8010d6e:	701a      	strb	r2, [r3, #0]
									if(MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 8010d70:	4b48      	ldr	r3, [pc, #288]	; (8010e94 <make_smap+0x76c>)
 8010d72:	881b      	ldrh	r3, [r3, #0]
 8010d74:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010d78:	b2db      	uxtb	r3, r3
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d00a      	beq.n	8010d94 <make_smap+0x66c>
 8010d7e:	463a      	mov	r2, r7
 8010d80:	69bb      	ldr	r3, [r7, #24]
 8010d82:	4413      	add	r3, r2
 8010d84:	781b      	ldrb	r3, [r3, #0]
 8010d86:	091b      	lsrs	r3, r3, #4
 8010d88:	b2d9      	uxtb	r1, r3
 8010d8a:	463a      	mov	r2, r7
 8010d8c:	69bb      	ldr	r3, [r7, #24]
 8010d8e:	4413      	add	r3, r2
 8010d90:	460a      	mov	r2, r1
 8010d92:	701a      	strb	r2, [r3, #0]
									if(!(m_temp_sample[k] & 0x01) && (x-k) != 0) {		//a西壁がなく現在最西端でないとき
 8010d94:	463a      	mov	r2, r7
 8010d96:	69bb      	ldr	r3, [r7, #24]
 8010d98:	4413      	add	r3, r2
 8010d9a:	781b      	ldrb	r3, [r3, #0]
 8010d9c:	f003 0301 	and.w	r3, r3, #1
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d145      	bne.n	8010e30 <make_smap+0x708>
 8010da4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010da8:	69ba      	ldr	r2, [r7, #24]
 8010daa:	429a      	cmp	r2, r3
 8010dac:	d040      	beq.n	8010e30 <make_smap+0x708>
										if(smap[y][x-k-1] >= (smap[y][x-k]+straight)){		//a西側が記入後より大きいなら
 8010dae:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010db2:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8010db6:	69bb      	ldr	r3, [r7, #24]
 8010db8:	1acb      	subs	r3, r1, r3
 8010dba:	3b01      	subs	r3, #1
 8010dbc:	4936      	ldr	r1, [pc, #216]	; (8010e98 <make_smap+0x770>)
 8010dbe:	0112      	lsls	r2, r2, #4
 8010dc0:	4413      	add	r3, r2
 8010dc2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010dcc:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8010dd0:	69bb      	ldr	r3, [r7, #24]
 8010dd2:	1acb      	subs	r3, r1, r3
 8010dd4:	4930      	ldr	r1, [pc, #192]	; (8010e98 <make_smap+0x770>)
 8010dd6:	0112      	lsls	r2, r2, #4
 8010dd8:	4413      	add	r3, r2
 8010dda:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010dde:	461a      	mov	r2, r3
 8010de0:	697b      	ldr	r3, [r7, #20]
 8010de2:	4413      	add	r3, r2
 8010de4:	4298      	cmp	r0, r3
 8010de6:	db1b      	blt.n	8010e20 <make_smap+0x6f8>
											smap[y][x-k-1] = smap[y][x-k] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 8010de8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010dec:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8010df0:	69bb      	ldr	r3, [r7, #24]
 8010df2:	1acb      	subs	r3, r1, r3
 8010df4:	4928      	ldr	r1, [pc, #160]	; (8010e98 <make_smap+0x770>)
 8010df6:	0112      	lsls	r2, r2, #4
 8010df8:	4413      	add	r3, r2
 8010dfa:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010dfe:	697b      	ldr	r3, [r7, #20]
 8010e00:	b299      	uxth	r1, r3
 8010e02:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010e06:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8010e0a:	69bb      	ldr	r3, [r7, #24]
 8010e0c:	1ae3      	subs	r3, r4, r3
 8010e0e:	3b01      	subs	r3, #1
 8010e10:	4401      	add	r1, r0
 8010e12:	b288      	uxth	r0, r1
 8010e14:	4920      	ldr	r1, [pc, #128]	; (8010e98 <make_smap+0x770>)
 8010e16:	0112      	lsls	r2, r2, #4
 8010e18:	4413      	add	r3, r2
 8010e1a:	4602      	mov	r2, r0
 8010e1c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for(int k=1; k<x; k++) {						//a現在座標から見て西のマスすべてにおいて
 8010e20:	69bb      	ldr	r3, [r7, #24]
 8010e22:	3301      	adds	r3, #1
 8010e24:	61bb      	str	r3, [r7, #24]
 8010e26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010e2a:	69ba      	ldr	r2, [r7, #24]
 8010e2c:	429a      	cmp	r2, r3
 8010e2e:	db8f      	blt.n	8010d50 <make_smap+0x628>
			for(x = 0; x <= 15; x++){						//a各X座標で実行
 8010e30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010e34:	3301      	adds	r3, #1
 8010e36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010e3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010e3e:	2b0f      	cmp	r3, #15
 8010e40:	f67f acd4 	bls.w	80107ec <make_smap+0xc4>
		for(y = 0; y <= 15; y++){							//a各Y座標で実行
 8010e44:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010e48:	3301      	adds	r3, #1
 8010e4a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8010e4e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010e52:	2b0f      	cmp	r3, #15
 8010e54:	f67f acc6 	bls.w	80107e4 <make_smap+0xbc>
					}
				}
			}
		}
		//====a歩数カウンタのインクリメント====
		m_step++;
 8010e58:	4b10      	ldr	r3, [pc, #64]	; (8010e9c <make_smap+0x774>)
 8010e5a:	881b      	ldrh	r3, [r3, #0]
 8010e5c:	3301      	adds	r3, #1
 8010e5e:	b29a      	uxth	r2, r3
 8010e60:	4b0e      	ldr	r3, [pc, #56]	; (8010e9c <make_smap+0x774>)
 8010e62:	801a      	strh	r2, [r3, #0]
	}while(smap[mouse.y][mouse.x] == 0x03e7);					//a現在座標が未記入ではなくなるまで実行
 8010e64:	4b0e      	ldr	r3, [pc, #56]	; (8010ea0 <make_smap+0x778>)
 8010e66:	785b      	ldrb	r3, [r3, #1]
 8010e68:	b2db      	uxtb	r3, r3
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	4b0c      	ldr	r3, [pc, #48]	; (8010ea0 <make_smap+0x778>)
 8010e6e:	781b      	ldrb	r3, [r3, #0]
 8010e70:	b2db      	uxtb	r3, r3
 8010e72:	4619      	mov	r1, r3
 8010e74:	4a08      	ldr	r2, [pc, #32]	; (8010e98 <make_smap+0x770>)
 8010e76:	0103      	lsls	r3, r0, #4
 8010e78:	440b      	add	r3, r1
 8010e7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010e7e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010e82:	4293      	cmp	r3, r2
 8010e84:	f43f acaa 	beq.w	80107dc <make_smap+0xb4>
}
 8010e88:	bf00      	nop
 8010e8a:	373c      	adds	r7, #60	; 0x3c
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	bd90      	pop	{r4, r7, pc}
 8010e90:	200001ac 	.word	0x200001ac
 8010e94:	20000fa8 	.word	0x20000fa8
 8010e98:	20000da0 	.word	0x20000da0
 8010e9c:	2000034e 	.word	0x2000034e
 8010ea0:	20000c8c 	.word	0x20000c8c

08010ea4 <make_route>:
//make_route
//a最短経路を導出する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_route(){
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b082      	sub	sp, #8
 8010ea8:	af00      	add	r7, sp, #0

	//====a変数宣言====
	uint8_t x, y;												//X，Y座標
	uint8_t dir_temp =  mouse.dir;								//aマウスの方角を表すmouse.dirの値をdir_temp変数に退避させる
 8010eaa:	4ba6      	ldr	r3, [pc, #664]	; (8011144 <make_route+0x2a0>)
 8010eac:	789b      	ldrb	r3, [r3, #2]
 8010eae:	703b      	strb	r3, [r7, #0]

	//====a最短経路を初期化====
	uint16_t i;
	for(i = 0; i < 256; i++){
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	80bb      	strh	r3, [r7, #4]
 8010eb4:	e006      	b.n	8010ec4 <make_route+0x20>
		route[i] = 0xff;										//routeを0xffで初期化
 8010eb6:	88bb      	ldrh	r3, [r7, #4]
 8010eb8:	4aa3      	ldr	r2, [pc, #652]	; (8011148 <make_route+0x2a4>)
 8010eba:	21ff      	movs	r1, #255	; 0xff
 8010ebc:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < 256; i++){
 8010ebe:	88bb      	ldrh	r3, [r7, #4]
 8010ec0:	3301      	adds	r3, #1
 8010ec2:	80bb      	strh	r3, [r7, #4]
 8010ec4:	88bb      	ldrh	r3, [r7, #4]
 8010ec6:	2bff      	cmp	r3, #255	; 0xff
 8010ec8:	d9f5      	bls.n	8010eb6 <make_route+0x12>
	}

	//====a歩数カウンタをセット====
	uint16_t m_step = smap[mouse.y][mouse.x];					//a現在座標の歩数マップ値を取得
 8010eca:	4b9e      	ldr	r3, [pc, #632]	; (8011144 <make_route+0x2a0>)
 8010ecc:	785b      	ldrb	r3, [r3, #1]
 8010ece:	b2db      	uxtb	r3, r3
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	4b9c      	ldr	r3, [pc, #624]	; (8011144 <make_route+0x2a0>)
 8010ed4:	781b      	ldrb	r3, [r3, #0]
 8010ed6:	b2db      	uxtb	r3, r3
 8010ed8:	4619      	mov	r1, r3
 8010eda:	4a9c      	ldr	r2, [pc, #624]	; (801114c <make_route+0x2a8>)
 8010edc:	0103      	lsls	r3, r0, #4
 8010ede:	440b      	add	r3, r1
 8010ee0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ee4:	807b      	strh	r3, [r7, #2]

	//====x, yに現在座標を書き込み====
	x = mouse.x;
 8010ee6:	4b97      	ldr	r3, [pc, #604]	; (8011144 <make_route+0x2a0>)
 8010ee8:	781b      	ldrb	r3, [r3, #0]
 8010eea:	71fb      	strb	r3, [r7, #7]
	y = mouse.y;
 8010eec:	4b95      	ldr	r3, [pc, #596]	; (8011144 <make_route+0x2a0>)
 8010eee:	785b      	ldrb	r3, [r3, #1]
 8010ef0:	71bb      	strb	r3, [r7, #6]

	//====a最短経路を導出====
	if(pass_mode == 4){
 8010ef2:	4b97      	ldr	r3, [pc, #604]	; (8011150 <make_route+0x2ac>)
 8010ef4:	781b      	ldrb	r3, [r3, #0]
 8010ef6:	2b04      	cmp	r3, #4
 8010ef8:	d105      	bne.n	8010f06 <make_route+0x62>
		route[0] = 0x77;
 8010efa:	4b93      	ldr	r3, [pc, #588]	; (8011148 <make_route+0x2a4>)
 8010efc:	2277      	movs	r2, #119	; 0x77
 8010efe:	701a      	strb	r2, [r3, #0]
		i = 1;
 8010f00:	2301      	movs	r3, #1
 8010f02:	80bb      	strh	r3, [r7, #4]
 8010f04:	e001      	b.n	8010f0a <make_route+0x66>
	}else{
		i = 0;
 8010f06:	2300      	movs	r3, #0
 8010f08:	80bb      	strh	r3, [r7, #4]
	}

	do{
		uint8_t m_temp = map[y][x];								//a比較用マップ情報の格納
 8010f0a:	79ba      	ldrb	r2, [r7, #6]
 8010f0c:	79fb      	ldrb	r3, [r7, #7]
 8010f0e:	4991      	ldr	r1, [pc, #580]	; (8011154 <make_route+0x2b0>)
 8010f10:	0112      	lsls	r2, r2, #4
 8010f12:	440a      	add	r2, r1
 8010f14:	4413      	add	r3, r2
 8010f16:	781b      	ldrb	r3, [r3, #0]
 8010f18:	707b      	strb	r3, [r7, #1]
		if(MF.FLAG.SCND){										//a二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 8010f1a:	4b8f      	ldr	r3, [pc, #572]	; (8011158 <make_route+0x2b4>)
 8010f1c:	881b      	ldrh	r3, [r3, #0]
 8010f1e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010f22:	b2db      	uxtb	r3, r3
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d002      	beq.n	8010f2e <make_route+0x8a>
			m_temp >>= 4;										//a上位4bitを使うので4bit分右にシフトさせる
 8010f28:	787b      	ldrb	r3, [r7, #1]
 8010f2a:	091b      	lsrs	r3, r3, #4
 8010f2c:	707b      	strb	r3, [r7, #1]
		}
		//----a北を見る----
		if(!(m_temp & 0x08) && (smap[y+1][x] < m_step)){		//a北側に壁が無く、現在地より小さい歩数マップ値であれば
 8010f2e:	787b      	ldrb	r3, [r7, #1]
 8010f30:	f003 0308 	and.w	r3, r3, #8
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d122      	bne.n	8010f7e <make_route+0xda>
 8010f38:	79bb      	ldrb	r3, [r7, #6]
 8010f3a:	1c5a      	adds	r2, r3, #1
 8010f3c:	79fb      	ldrb	r3, [r7, #7]
 8010f3e:	4983      	ldr	r1, [pc, #524]	; (801114c <make_route+0x2a8>)
 8010f40:	0112      	lsls	r2, r2, #4
 8010f42:	4413      	add	r3, r2
 8010f44:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010f48:	887a      	ldrh	r2, [r7, #2]
 8010f4a:	429a      	cmp	r2, r3
 8010f4c:	d917      	bls.n	8010f7e <make_route+0xda>
			route[i] = (0x00 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 8010f4e:	4b7d      	ldr	r3, [pc, #500]	; (8011144 <make_route+0x2a0>)
 8010f50:	789b      	ldrb	r3, [r3, #2]
 8010f52:	b2db      	uxtb	r3, r3
 8010f54:	425b      	negs	r3, r3
 8010f56:	b2da      	uxtb	r2, r3
 8010f58:	88bb      	ldrh	r3, [r7, #4]
 8010f5a:	f002 0203 	and.w	r2, r2, #3
 8010f5e:	b2d1      	uxtb	r1, r2
 8010f60:	4a79      	ldr	r2, [pc, #484]	; (8011148 <make_route+0x2a4>)
 8010f62:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y+1][x];								//a最大歩数マップ値を更新
 8010f64:	79bb      	ldrb	r3, [r7, #6]
 8010f66:	1c5a      	adds	r2, r3, #1
 8010f68:	79fb      	ldrb	r3, [r7, #7]
 8010f6a:	4978      	ldr	r1, [pc, #480]	; (801114c <make_route+0x2a8>)
 8010f6c:	0112      	lsls	r2, r2, #4
 8010f6e:	4413      	add	r3, r2
 8010f70:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010f74:	807b      	strh	r3, [r7, #2]
			y++;												//a北に進んだのでY座標をインクリメント
 8010f76:	79bb      	ldrb	r3, [r7, #6]
 8010f78:	3301      	adds	r3, #1
 8010f7a:	71bb      	strb	r3, [r7, #6]
 8010f7c:	e079      	b.n	8011072 <make_route+0x1ce>
		}
		//----a東を見る----
		else if(!(m_temp & 0x04) && (smap[y][x+1] < m_step)){	//a東側に壁が無く、現在地より小さい歩数マップ値であれば
 8010f7e:	787b      	ldrb	r3, [r7, #1]
 8010f80:	f003 0304 	and.w	r3, r3, #4
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d123      	bne.n	8010fd0 <make_route+0x12c>
 8010f88:	79ba      	ldrb	r2, [r7, #6]
 8010f8a:	79fb      	ldrb	r3, [r7, #7]
 8010f8c:	3301      	adds	r3, #1
 8010f8e:	496f      	ldr	r1, [pc, #444]	; (801114c <make_route+0x2a8>)
 8010f90:	0112      	lsls	r2, r2, #4
 8010f92:	4413      	add	r3, r2
 8010f94:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010f98:	887a      	ldrh	r2, [r7, #2]
 8010f9a:	429a      	cmp	r2, r3
 8010f9c:	d918      	bls.n	8010fd0 <make_route+0x12c>
			route[i] = (0x01 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 8010f9e:	4b69      	ldr	r3, [pc, #420]	; (8011144 <make_route+0x2a0>)
 8010fa0:	789b      	ldrb	r3, [r3, #2]
 8010fa2:	b2db      	uxtb	r3, r3
 8010fa4:	f1c3 0301 	rsb	r3, r3, #1
 8010fa8:	b2da      	uxtb	r2, r3
 8010faa:	88bb      	ldrh	r3, [r7, #4]
 8010fac:	f002 0203 	and.w	r2, r2, #3
 8010fb0:	b2d1      	uxtb	r1, r2
 8010fb2:	4a65      	ldr	r2, [pc, #404]	; (8011148 <make_route+0x2a4>)
 8010fb4:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x+1];								//a最大歩数マップ値を更新
 8010fb6:	79ba      	ldrb	r2, [r7, #6]
 8010fb8:	79fb      	ldrb	r3, [r7, #7]
 8010fba:	3301      	adds	r3, #1
 8010fbc:	4963      	ldr	r1, [pc, #396]	; (801114c <make_route+0x2a8>)
 8010fbe:	0112      	lsls	r2, r2, #4
 8010fc0:	4413      	add	r3, r2
 8010fc2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010fc6:	807b      	strh	r3, [r7, #2]
			x++;												//a東に進んだのでX座標をインクリメント
 8010fc8:	79fb      	ldrb	r3, [r7, #7]
 8010fca:	3301      	adds	r3, #1
 8010fcc:	71fb      	strb	r3, [r7, #7]
 8010fce:	e050      	b.n	8011072 <make_route+0x1ce>
		}
		//----a南を見る----
		else if(!(m_temp & 0x02) && (smap[y-1][x] < m_step)){	//a南側に壁が無く、現在地より小さい歩数マップ値であれば
 8010fd0:	787b      	ldrb	r3, [r7, #1]
 8010fd2:	f003 0302 	and.w	r3, r3, #2
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d123      	bne.n	8011022 <make_route+0x17e>
 8010fda:	79bb      	ldrb	r3, [r7, #6]
 8010fdc:	1e5a      	subs	r2, r3, #1
 8010fde:	79fb      	ldrb	r3, [r7, #7]
 8010fe0:	495a      	ldr	r1, [pc, #360]	; (801114c <make_route+0x2a8>)
 8010fe2:	0112      	lsls	r2, r2, #4
 8010fe4:	4413      	add	r3, r2
 8010fe6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010fea:	887a      	ldrh	r2, [r7, #2]
 8010fec:	429a      	cmp	r2, r3
 8010fee:	d918      	bls.n	8011022 <make_route+0x17e>
			route[i] = (0x02 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 8010ff0:	4b54      	ldr	r3, [pc, #336]	; (8011144 <make_route+0x2a0>)
 8010ff2:	789b      	ldrb	r3, [r3, #2]
 8010ff4:	b2db      	uxtb	r3, r3
 8010ff6:	f1c3 0302 	rsb	r3, r3, #2
 8010ffa:	b2da      	uxtb	r2, r3
 8010ffc:	88bb      	ldrh	r3, [r7, #4]
 8010ffe:	f002 0203 	and.w	r2, r2, #3
 8011002:	b2d1      	uxtb	r1, r2
 8011004:	4a50      	ldr	r2, [pc, #320]	; (8011148 <make_route+0x2a4>)
 8011006:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y-1][x];								//a最大歩数マップ値を更新
 8011008:	79bb      	ldrb	r3, [r7, #6]
 801100a:	1e5a      	subs	r2, r3, #1
 801100c:	79fb      	ldrb	r3, [r7, #7]
 801100e:	494f      	ldr	r1, [pc, #316]	; (801114c <make_route+0x2a8>)
 8011010:	0112      	lsls	r2, r2, #4
 8011012:	4413      	add	r3, r2
 8011014:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011018:	807b      	strh	r3, [r7, #2]
			y--;												//a南に進んだのでY座標をデクリメント
 801101a:	79bb      	ldrb	r3, [r7, #6]
 801101c:	3b01      	subs	r3, #1
 801101e:	71bb      	strb	r3, [r7, #6]
 8011020:	e027      	b.n	8011072 <make_route+0x1ce>
		}
		//----a西を見る----
		else if(!(m_temp & 0x01) && (smap[y][x-1] < m_step)){	//a西側に壁が無く、現在地より小さい歩数マップ値であれば
 8011022:	787b      	ldrb	r3, [r7, #1]
 8011024:	f003 0301 	and.w	r3, r3, #1
 8011028:	2b00      	cmp	r3, #0
 801102a:	d122      	bne.n	8011072 <make_route+0x1ce>
 801102c:	79ba      	ldrb	r2, [r7, #6]
 801102e:	79fb      	ldrb	r3, [r7, #7]
 8011030:	3b01      	subs	r3, #1
 8011032:	4946      	ldr	r1, [pc, #280]	; (801114c <make_route+0x2a8>)
 8011034:	0112      	lsls	r2, r2, #4
 8011036:	4413      	add	r3, r2
 8011038:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801103c:	887a      	ldrh	r2, [r7, #2]
 801103e:	429a      	cmp	r2, r3
 8011040:	d917      	bls.n	8011072 <make_route+0x1ce>
			route[i] = (0x03 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 8011042:	4b40      	ldr	r3, [pc, #256]	; (8011144 <make_route+0x2a0>)
 8011044:	789b      	ldrb	r3, [r3, #2]
 8011046:	b2db      	uxtb	r3, r3
 8011048:	f1c3 0303 	rsb	r3, r3, #3
 801104c:	b2da      	uxtb	r2, r3
 801104e:	88bb      	ldrh	r3, [r7, #4]
 8011050:	f002 0203 	and.w	r2, r2, #3
 8011054:	b2d1      	uxtb	r1, r2
 8011056:	4a3c      	ldr	r2, [pc, #240]	; (8011148 <make_route+0x2a4>)
 8011058:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x-1];								//a最大歩数マップ値を更新
 801105a:	79ba      	ldrb	r2, [r7, #6]
 801105c:	79fb      	ldrb	r3, [r7, #7]
 801105e:	3b01      	subs	r3, #1
 8011060:	493a      	ldr	r1, [pc, #232]	; (801114c <make_route+0x2a8>)
 8011062:	0112      	lsls	r2, r2, #4
 8011064:	4413      	add	r3, r2
 8011066:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801106a:	807b      	strh	r3, [r7, #2]
			x--;												//a西に進んだのでX座標をデクリメント
 801106c:	79fb      	ldrb	r3, [r7, #7]
 801106e:	3b01      	subs	r3, #1
 8011070:	71fb      	strb	r3, [r7, #7]
				y--;												//a南に進んだのでY座標をデクリメント
			}*/

		}
		//----a格納データ形式変更----
		switch(route[i]){										//route配列に格納した要素値で分岐
 8011072:	88bb      	ldrh	r3, [r7, #4]
 8011074:	4a34      	ldr	r2, [pc, #208]	; (8011148 <make_route+0x2a4>)
 8011076:	5cd3      	ldrb	r3, [r2, r3]
 8011078:	2b03      	cmp	r3, #3
 801107a:	d83c      	bhi.n	80110f6 <make_route+0x252>
 801107c:	a201      	add	r2, pc, #4	; (adr r2, 8011084 <make_route+0x1e0>)
 801107e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011082:	bf00      	nop
 8011084:	08011095 	.word	0x08011095
 8011088:	080110c1 	.word	0x080110c1
 801108c:	080110d3 	.word	0x080110d3
 8011090:	080110e5 	.word	0x080110e5
		case 0x00:												//a前進する場合
			if(pass_mode < 3){
 8011094:	4b2e      	ldr	r3, [pc, #184]	; (8011150 <make_route+0x2ac>)
 8011096:	781b      	ldrb	r3, [r3, #0]
 8011098:	2b02      	cmp	r3, #2
 801109a:	d804      	bhi.n	80110a6 <make_route+0x202>
				route[i] = 0x88;									//a格納データ形式を変更
 801109c:	88bb      	ldrh	r3, [r7, #4]
 801109e:	4a2a      	ldr	r2, [pc, #168]	; (8011148 <make_route+0x2a4>)
 80110a0:	2188      	movs	r1, #136	; 0x88
 80110a2:	54d1      	strb	r1, [r2, r3]
			}else{
				route[i] = 0x77;
				route[i+1] = 0x77;
				i++;
			}
			break;
 80110a4:	e02c      	b.n	8011100 <make_route+0x25c>
				route[i] = 0x77;
 80110a6:	88bb      	ldrh	r3, [r7, #4]
 80110a8:	4a27      	ldr	r2, [pc, #156]	; (8011148 <make_route+0x2a4>)
 80110aa:	2177      	movs	r1, #119	; 0x77
 80110ac:	54d1      	strb	r1, [r2, r3]
				route[i+1] = 0x77;
 80110ae:	88bb      	ldrh	r3, [r7, #4]
 80110b0:	3301      	adds	r3, #1
 80110b2:	4a25      	ldr	r2, [pc, #148]	; (8011148 <make_route+0x2a4>)
 80110b4:	2177      	movs	r1, #119	; 0x77
 80110b6:	54d1      	strb	r1, [r2, r3]
				i++;
 80110b8:	88bb      	ldrh	r3, [r7, #4]
 80110ba:	3301      	adds	r3, #1
 80110bc:	80bb      	strh	r3, [r7, #4]
			break;
 80110be:	e01f      	b.n	8011100 <make_route+0x25c>
		case 0x01:												//a右折する場合
			turn_dir(DIR_TURN_R90, 0);							//a内部情報の方向を90度右回転
 80110c0:	2100      	movs	r1, #0
 80110c2:	2001      	movs	r0, #1
 80110c4:	f7ff fa64 	bl	8010590 <turn_dir>
			route[i] = 0x44;									//a格納データ形式を変更
 80110c8:	88bb      	ldrh	r3, [r7, #4]
 80110ca:	4a1f      	ldr	r2, [pc, #124]	; (8011148 <make_route+0x2a4>)
 80110cc:	2144      	movs	r1, #68	; 0x44
 80110ce:	54d1      	strb	r1, [r2, r3]
			break;
 80110d0:	e016      	b.n	8011100 <make_route+0x25c>
		case 0x02:												//Uターンする場合
			turn_dir(DIR_TURN_180, 0);							//a内部情報の方向を180度回転
 80110d2:	2100      	movs	r1, #0
 80110d4:	2002      	movs	r0, #2
 80110d6:	f7ff fa5b 	bl	8010590 <turn_dir>
			route[i] = 0x22;									//a格納データ形式を変更
 80110da:	88bb      	ldrh	r3, [r7, #4]
 80110dc:	4a1a      	ldr	r2, [pc, #104]	; (8011148 <make_route+0x2a4>)
 80110de:	2122      	movs	r1, #34	; 0x22
 80110e0:	54d1      	strb	r1, [r2, r3]
			break;
 80110e2:	e00d      	b.n	8011100 <make_route+0x25c>
		case 0x03:												//a左折する場合
			turn_dir(DIR_TURN_L90, 0);							//a内部情報の方向を90度左回転
 80110e4:	2100      	movs	r1, #0
 80110e6:	20ff      	movs	r0, #255	; 0xff
 80110e8:	f7ff fa52 	bl	8010590 <turn_dir>
			route[i] = 0x11;									//a格納データ形式を変更
 80110ec:	88bb      	ldrh	r3, [r7, #4]
 80110ee:	4a16      	ldr	r2, [pc, #88]	; (8011148 <make_route+0x2a4>)
 80110f0:	2111      	movs	r1, #17
 80110f2:	54d1      	strb	r1, [r2, r3]
			break;
 80110f4:	e004      	b.n	8011100 <make_route+0x25c>
		default:												//aそれ以外の場合
			route[i] = 0x00;									//a格納データ形式を変更
 80110f6:	88bb      	ldrh	r3, [r7, #4]
 80110f8:	4a13      	ldr	r2, [pc, #76]	; (8011148 <make_route+0x2a4>)
 80110fa:	2100      	movs	r1, #0
 80110fc:	54d1      	strb	r1, [r2, r3]
			break;
 80110fe:	bf00      	nop
		}
		i++;													//aカウンタをインクリメント
 8011100:	88bb      	ldrh	r3, [r7, #4]
 8011102:	3301      	adds	r3, #1
 8011104:	80bb      	strh	r3, [r7, #4]
	}while(smap[y][x] != 0);									//a進んだ先の歩数マップ値が0（=ゴール）になるまで実行
 8011106:	79ba      	ldrb	r2, [r7, #6]
 8011108:	79fb      	ldrb	r3, [r7, #7]
 801110a:	4910      	ldr	r1, [pc, #64]	; (801114c <make_route+0x2a8>)
 801110c:	0112      	lsls	r2, r2, #4
 801110e:	4413      	add	r3, r2
 8011110:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011114:	2b00      	cmp	r3, #0
 8011116:	f47f aef8 	bne.w	8010f0a <make_route+0x66>

	if(MF.FLAG.SCND){
 801111a:	4b0f      	ldr	r3, [pc, #60]	; (8011158 <make_route+0x2b4>)
 801111c:	881b      	ldrh	r3, [r3, #0]
 801111e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8011122:	b2db      	uxtb	r3, r3
 8011124:	2b00      	cmp	r3, #0
 8011126:	d005      	beq.n	8011134 <make_route+0x290>
		goal_x = x;
 8011128:	4a0c      	ldr	r2, [pc, #48]	; (801115c <make_route+0x2b8>)
 801112a:	79fb      	ldrb	r3, [r7, #7]
 801112c:	7013      	strb	r3, [r2, #0]
		goal_y = y;												//a二次走行でgoal後自己座標をgoal座標にするのでその時用
 801112e:	4a0c      	ldr	r2, [pc, #48]	; (8011160 <make_route+0x2bc>)
 8011130:	79bb      	ldrb	r3, [r7, #6]
 8011132:	7013      	strb	r3, [r2, #0]
	}
	mouse.dir = dir_temp;										//dir_tempに退避させた値をmouse.dirにリストア
 8011134:	4a03      	ldr	r2, [pc, #12]	; (8011144 <make_route+0x2a0>)
 8011136:	783b      	ldrb	r3, [r7, #0]
 8011138:	7093      	strb	r3, [r2, #2]
}
 801113a:	bf00      	nop
 801113c:	3708      	adds	r7, #8
 801113e:	46bd      	mov	sp, r7
 8011140:	bd80      	pop	{r7, pc}
 8011142:	bf00      	nop
 8011144:	20000c8c 	.word	0x20000c8c
 8011148:	20000c94 	.word	0x20000c94
 801114c:	20000da0 	.word	0x20000da0
 8011150:	20000457 	.word	0x20000457
 8011154:	200001ac 	.word	0x200001ac
 8011158:	20000fa8 	.word	0x20000fa8
 801115c:	20000c30 	.word	0x20000c30
 8011160:	20000b8c 	.word	0x20000b8c

08011164 <find_pregoal>:
//	未探索壁を含む＆現在座標から最も近いマス(=仮goal)を探す
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void find_pregoal()
{
 8011164:	b480      	push	{r7}
 8011166:	b085      	sub	sp, #20
 8011168:	af00      	add	r7, sp, #0
	//====変数宣言====
	uint8_t x, y;															//for文用変数
	uint8_t m_temp;															//マップデータ一時保持
	//uint8_t m_temp_sample[16];
	uint8_t break_flag = 0;													//未知壁マスを見つけた時のループ脱出フラグ
 801116a:	2300      	movs	r3, #0
 801116c:	737b      	strb	r3, [r7, #13]

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 801116e:	2300      	movs	r3, #0
 8011170:	73bb      	strb	r3, [r7, #14]
 8011172:	e014      	b.n	801119e <find_pregoal+0x3a>
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 8011174:	2300      	movs	r3, #0
 8011176:	73fb      	strb	r3, [r7, #15]
 8011178:	e00b      	b.n	8011192 <find_pregoal+0x2e>
			smap[y][x] = 0x03e7;											//未記入部分は歩数最大とする
 801117a:	7bba      	ldrb	r2, [r7, #14]
 801117c:	7bfb      	ldrb	r3, [r7, #15]
 801117e:	49a0      	ldr	r1, [pc, #640]	; (8011400 <find_pregoal+0x29c>)
 8011180:	0112      	lsls	r2, r2, #4
 8011182:	4413      	add	r3, r2
 8011184:	f240 32e7 	movw	r2, #999	; 0x3e7
 8011188:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 801118c:	7bfb      	ldrb	r3, [r7, #15]
 801118e:	3301      	adds	r3, #1
 8011190:	73fb      	strb	r3, [r7, #15]
 8011192:	7bfb      	ldrb	r3, [r7, #15]
 8011194:	2b0f      	cmp	r3, #15
 8011196:	d9f0      	bls.n	801117a <find_pregoal+0x16>
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 8011198:	7bbb      	ldrb	r3, [r7, #14]
 801119a:	3301      	adds	r3, #1
 801119c:	73bb      	strb	r3, [r7, #14]
 801119e:	7bbb      	ldrb	r3, [r7, #14]
 80111a0:	2b0f      	cmp	r3, #15
 80111a2:	d9e7      	bls.n	8011174 <find_pregoal+0x10>
		}
	}

	//====探索完了フラグのクリア====
	MF2.FLAG.ALLMAP = 0;
 80111a4:	4a97      	ldr	r2, [pc, #604]	; (8011404 <find_pregoal+0x2a0>)
 80111a6:	8813      	ldrh	r3, [r2, #0]
 80111a8:	f36f 0382 	bfc	r3, #2, #1
 80111ac:	8013      	strh	r3, [r2, #0]

	//====現在座標を0にする====
	smap[mouse.y][mouse.x] = 0;
 80111ae:	4b96      	ldr	r3, [pc, #600]	; (8011408 <find_pregoal+0x2a4>)
 80111b0:	785b      	ldrb	r3, [r3, #1]
 80111b2:	b2db      	uxtb	r3, r3
 80111b4:	4618      	mov	r0, r3
 80111b6:	4b94      	ldr	r3, [pc, #592]	; (8011408 <find_pregoal+0x2a4>)
 80111b8:	781b      	ldrb	r3, [r3, #0]
 80111ba:	b2db      	uxtb	r3, r3
 80111bc:	4619      	mov	r1, r3
 80111be:	4a90      	ldr	r2, [pc, #576]	; (8011400 <find_pregoal+0x29c>)
 80111c0:	0103      	lsls	r3, r0, #4
 80111c2:	440b      	add	r3, r1
 80111c4:	2100      	movs	r1, #0
 80111c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====歩数カウンタを0にする====
	m_step = 0;																//現在記入した最大の歩数となる
 80111ca:	4b90      	ldr	r3, [pc, #576]	; (801140c <find_pregoal+0x2a8>)
 80111cc:	2200      	movs	r2, #0
 80111ce:	801a      	strh	r2, [r3, #0]

	//====歩数カウンタの重みづけ====
	int straight = 3;
 80111d0:	2303      	movs	r3, #3
 80111d2:	60bb      	str	r3, [r7, #8]
	int turn = 1;
 80111d4:	2301      	movs	r3, #1
 80111d6:	607b      	str	r3, [r7, #4]

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 80111d8:	2300      	movs	r3, #0
 80111da:	73bb      	strb	r3, [r7, #14]
 80111dc:	e180      	b.n	80114e0 <find_pregoal+0x37c>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 80111de:	2300      	movs	r3, #0
 80111e0:	73fb      	strb	r3, [r7, #15]
 80111e2:	e173      	b.n	80114cc <find_pregoal+0x368>
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {									//歩数格納変数m_stepの値が現在最大の歩数のとき
 80111e4:	7bba      	ldrb	r2, [r7, #14]
 80111e6:	7bfb      	ldrb	r3, [r7, #15]
 80111e8:	4985      	ldr	r1, [pc, #532]	; (8011400 <find_pregoal+0x29c>)
 80111ea:	0112      	lsls	r2, r2, #4
 80111ec:	4413      	add	r3, r2
 80111ee:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80111f2:	4b86      	ldr	r3, [pc, #536]	; (801140c <find_pregoal+0x2a8>)
 80111f4:	881b      	ldrh	r3, [r3, #0]
 80111f6:	429a      	cmp	r2, r3
 80111f8:	f040 8165 	bne.w	80114c6 <find_pregoal+0x362>
					m_temp = map[y][x];										//map配列からマップデータを取り出す
 80111fc:	7bba      	ldrb	r2, [r7, #14]
 80111fe:	7bfb      	ldrb	r3, [r7, #15]
 8011200:	4983      	ldr	r1, [pc, #524]	; (8011410 <find_pregoal+0x2ac>)
 8011202:	0112      	lsls	r2, r2, #4
 8011204:	440a      	add	r2, r1
 8011206:	4413      	add	r3, r2
 8011208:	781b      	ldrb	r3, [r3, #0]
 801120a:	70fb      	strb	r3, [r7, #3]
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {					//北壁がなく現在最北端でないとき
 801120c:	78fb      	ldrb	r3, [r7, #3]
 801120e:	f003 0308 	and.w	r3, r3, #8
 8011212:	2b00      	cmp	r3, #0
 8011214:	d14d      	bne.n	80112b2 <find_pregoal+0x14e>
 8011216:	7bbb      	ldrb	r3, [r7, #14]
 8011218:	2b0f      	cmp	r3, #15
 801121a:	d04a      	beq.n	80112b2 <find_pregoal+0x14e>
						if (smap[y + 1][x] == 0x03e7) {						//北側が未記入なら
 801121c:	7bbb      	ldrb	r3, [r7, #14]
 801121e:	1c5a      	adds	r2, r3, #1
 8011220:	7bfb      	ldrb	r3, [r7, #15]
 8011222:	4977      	ldr	r1, [pc, #476]	; (8011400 <find_pregoal+0x29c>)
 8011224:	0112      	lsls	r2, r2, #4
 8011226:	4413      	add	r3, r2
 8011228:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801122c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8011230:	4293      	cmp	r3, r2
 8011232:	d13e      	bne.n	80112b2 <find_pregoal+0x14e>
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 8011234:	7bba      	ldrb	r2, [r7, #14]
 8011236:	7bfb      	ldrb	r3, [r7, #15]
 8011238:	4971      	ldr	r1, [pc, #452]	; (8011400 <find_pregoal+0x29c>)
 801123a:	0112      	lsls	r2, r2, #4
 801123c:	4413      	add	r3, r2
 801123e:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	b299      	uxth	r1, r3
 8011246:	7bbb      	ldrb	r3, [r7, #14]
 8011248:	1c5a      	adds	r2, r3, #1
 801124a:	7bfb      	ldrb	r3, [r7, #15]
 801124c:	4401      	add	r1, r0
 801124e:	b288      	uxth	r0, r1
 8011250:	496b      	ldr	r1, [pc, #428]	; (8011400 <find_pregoal+0x29c>)
 8011252:	0112      	lsls	r2, r2, #4
 8011254:	4413      	add	r3, r2
 8011256:	4602      	mov	r2, r0
 8011258:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y + 1][x] & 0x0f ) << 4) != (map[y + 1][x] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 801125c:	7bbb      	ldrb	r3, [r7, #14]
 801125e:	1c5a      	adds	r2, r3, #1
 8011260:	7bfb      	ldrb	r3, [r7, #15]
 8011262:	496b      	ldr	r1, [pc, #428]	; (8011410 <find_pregoal+0x2ac>)
 8011264:	0112      	lsls	r2, r2, #4
 8011266:	440a      	add	r2, r1
 8011268:	4413      	add	r3, r2
 801126a:	781b      	ldrb	r3, [r3, #0]
 801126c:	011b      	lsls	r3, r3, #4
 801126e:	b2da      	uxtb	r2, r3
 8011270:	7bbb      	ldrb	r3, [r7, #14]
 8011272:	1c59      	adds	r1, r3, #1
 8011274:	7bfb      	ldrb	r3, [r7, #15]
 8011276:	4866      	ldr	r0, [pc, #408]	; (8011410 <find_pregoal+0x2ac>)
 8011278:	0109      	lsls	r1, r1, #4
 801127a:	4401      	add	r1, r0
 801127c:	440b      	add	r3, r1
 801127e:	781b      	ldrb	r3, [r3, #0]
 8011280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011284:	429a      	cmp	r2, r3
 8011286:	d014      	beq.n	80112b2 <find_pregoal+0x14e>
								break_flag = 1;								//for文を抜けるフラグを立てて
 8011288:	2301      	movs	r3, #1
 801128a:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y + 1][x];					//仮goalの歩数を記録
 801128c:	7bbb      	ldrb	r3, [r7, #14]
 801128e:	1c5a      	adds	r2, r3, #1
 8011290:	7bfb      	ldrb	r3, [r7, #15]
 8011292:	495b      	ldr	r1, [pc, #364]	; (8011400 <find_pregoal+0x29c>)
 8011294:	0112      	lsls	r2, r2, #4
 8011296:	4413      	add	r3, r2
 8011298:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 801129c:	4b5d      	ldr	r3, [pc, #372]	; (8011414 <find_pregoal+0x2b0>)
 801129e:	801a      	strh	r2, [r3, #0]
								pregoal_x = x;
 80112a0:	4a5d      	ldr	r2, [pc, #372]	; (8011418 <find_pregoal+0x2b4>)
 80112a2:	7bfb      	ldrb	r3, [r7, #15]
 80112a4:	7013      	strb	r3, [r2, #0]
								pregoal_y = y + 1;							//仮goalの座標を記録
 80112a6:	7bbb      	ldrb	r3, [r7, #14]
 80112a8:	3301      	adds	r3, #1
 80112aa:	b2da      	uxtb	r2, r3
 80112ac:	4b5b      	ldr	r3, [pc, #364]	; (801141c <find_pregoal+0x2b8>)
 80112ae:	701a      	strb	r2, [r3, #0]
								break;
 80112b0:	e110      	b.n	80114d4 <find_pregoal+0x370>
							}
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {					//東壁がなく現在最東端でないとき
 80112b2:	78fb      	ldrb	r3, [r7, #3]
 80112b4:	f003 0304 	and.w	r3, r3, #4
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d14d      	bne.n	8011358 <find_pregoal+0x1f4>
 80112bc:	7bfb      	ldrb	r3, [r7, #15]
 80112be:	2b0f      	cmp	r3, #15
 80112c0:	d04a      	beq.n	8011358 <find_pregoal+0x1f4>
						if (smap[y][x + 1] == 0x03e7) {						//東側が未記入なら
 80112c2:	7bba      	ldrb	r2, [r7, #14]
 80112c4:	7bfb      	ldrb	r3, [r7, #15]
 80112c6:	3301      	adds	r3, #1
 80112c8:	494d      	ldr	r1, [pc, #308]	; (8011400 <find_pregoal+0x29c>)
 80112ca:	0112      	lsls	r2, r2, #4
 80112cc:	4413      	add	r3, r2
 80112ce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80112d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80112d6:	4293      	cmp	r3, r2
 80112d8:	d13e      	bne.n	8011358 <find_pregoal+0x1f4>
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 80112da:	7bba      	ldrb	r2, [r7, #14]
 80112dc:	7bfb      	ldrb	r3, [r7, #15]
 80112de:	4948      	ldr	r1, [pc, #288]	; (8011400 <find_pregoal+0x29c>)
 80112e0:	0112      	lsls	r2, r2, #4
 80112e2:	4413      	add	r3, r2
 80112e4:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	b299      	uxth	r1, r3
 80112ec:	7bba      	ldrb	r2, [r7, #14]
 80112ee:	7bfb      	ldrb	r3, [r7, #15]
 80112f0:	3301      	adds	r3, #1
 80112f2:	4401      	add	r1, r0
 80112f4:	b288      	uxth	r0, r1
 80112f6:	4942      	ldr	r1, [pc, #264]	; (8011400 <find_pregoal+0x29c>)
 80112f8:	0112      	lsls	r2, r2, #4
 80112fa:	4413      	add	r3, r2
 80112fc:	4602      	mov	r2, r0
 80112fe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y][x + 1] & 0x0f) << 4) != (map[y][x + 1] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 8011302:	7bba      	ldrb	r2, [r7, #14]
 8011304:	7bfb      	ldrb	r3, [r7, #15]
 8011306:	3301      	adds	r3, #1
 8011308:	4941      	ldr	r1, [pc, #260]	; (8011410 <find_pregoal+0x2ac>)
 801130a:	0112      	lsls	r2, r2, #4
 801130c:	440a      	add	r2, r1
 801130e:	4413      	add	r3, r2
 8011310:	781b      	ldrb	r3, [r3, #0]
 8011312:	011b      	lsls	r3, r3, #4
 8011314:	b2da      	uxtb	r2, r3
 8011316:	7bb9      	ldrb	r1, [r7, #14]
 8011318:	7bfb      	ldrb	r3, [r7, #15]
 801131a:	3301      	adds	r3, #1
 801131c:	483c      	ldr	r0, [pc, #240]	; (8011410 <find_pregoal+0x2ac>)
 801131e:	0109      	lsls	r1, r1, #4
 8011320:	4401      	add	r1, r0
 8011322:	440b      	add	r3, r1
 8011324:	781b      	ldrb	r3, [r3, #0]
 8011326:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801132a:	429a      	cmp	r2, r3
 801132c:	d014      	beq.n	8011358 <find_pregoal+0x1f4>
								break_flag = 1;								//for文を抜けるフラグを立てて
 801132e:	2301      	movs	r3, #1
 8011330:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y][x + 1];					//仮ゴールの歩数を記録
 8011332:	7bba      	ldrb	r2, [r7, #14]
 8011334:	7bfb      	ldrb	r3, [r7, #15]
 8011336:	3301      	adds	r3, #1
 8011338:	4931      	ldr	r1, [pc, #196]	; (8011400 <find_pregoal+0x29c>)
 801133a:	0112      	lsls	r2, r2, #4
 801133c:	4413      	add	r3, r2
 801133e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8011342:	4b34      	ldr	r3, [pc, #208]	; (8011414 <find_pregoal+0x2b0>)
 8011344:	801a      	strh	r2, [r3, #0]
								pregoal_x = x + 1;
 8011346:	7bfb      	ldrb	r3, [r7, #15]
 8011348:	3301      	adds	r3, #1
 801134a:	b2da      	uxtb	r2, r3
 801134c:	4b32      	ldr	r3, [pc, #200]	; (8011418 <find_pregoal+0x2b4>)
 801134e:	701a      	strb	r2, [r3, #0]
								pregoal_y = y;								//仮goalの座標を記録
 8011350:	4a32      	ldr	r2, [pc, #200]	; (801141c <find_pregoal+0x2b8>)
 8011352:	7bbb      	ldrb	r3, [r7, #14]
 8011354:	7013      	strb	r3, [r2, #0]
								break;
 8011356:	e0bd      	b.n	80114d4 <find_pregoal+0x370>
							}
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {						//南壁がなく現在最南端でないとき
 8011358:	78fb      	ldrb	r3, [r7, #3]
 801135a:	f003 0302 	and.w	r3, r3, #2
 801135e:	2b00      	cmp	r3, #0
 8011360:	d15e      	bne.n	8011420 <find_pregoal+0x2bc>
 8011362:	7bbb      	ldrb	r3, [r7, #14]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d05b      	beq.n	8011420 <find_pregoal+0x2bc>
						if (smap[y - 1][x] == 0x03e7) {						//南側が未記入なら
 8011368:	7bbb      	ldrb	r3, [r7, #14]
 801136a:	1e5a      	subs	r2, r3, #1
 801136c:	7bfb      	ldrb	r3, [r7, #15]
 801136e:	4924      	ldr	r1, [pc, #144]	; (8011400 <find_pregoal+0x29c>)
 8011370:	0112      	lsls	r2, r2, #4
 8011372:	4413      	add	r3, r2
 8011374:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011378:	f240 32e7 	movw	r2, #999	; 0x3e7
 801137c:	4293      	cmp	r3, r2
 801137e:	d14f      	bne.n	8011420 <find_pregoal+0x2bc>
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 8011380:	7bba      	ldrb	r2, [r7, #14]
 8011382:	7bfb      	ldrb	r3, [r7, #15]
 8011384:	491e      	ldr	r1, [pc, #120]	; (8011400 <find_pregoal+0x29c>)
 8011386:	0112      	lsls	r2, r2, #4
 8011388:	4413      	add	r3, r2
 801138a:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	b299      	uxth	r1, r3
 8011392:	7bbb      	ldrb	r3, [r7, #14]
 8011394:	1e5a      	subs	r2, r3, #1
 8011396:	7bfb      	ldrb	r3, [r7, #15]
 8011398:	4401      	add	r1, r0
 801139a:	b288      	uxth	r0, r1
 801139c:	4918      	ldr	r1, [pc, #96]	; (8011400 <find_pregoal+0x29c>)
 801139e:	0112      	lsls	r2, r2, #4
 80113a0:	4413      	add	r3, r2
 80113a2:	4602      	mov	r2, r0
 80113a4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y - 1][x] & 0x0f) << 4) != (map[y - 1][x] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 80113a8:	7bbb      	ldrb	r3, [r7, #14]
 80113aa:	1e5a      	subs	r2, r3, #1
 80113ac:	7bfb      	ldrb	r3, [r7, #15]
 80113ae:	4918      	ldr	r1, [pc, #96]	; (8011410 <find_pregoal+0x2ac>)
 80113b0:	0112      	lsls	r2, r2, #4
 80113b2:	440a      	add	r2, r1
 80113b4:	4413      	add	r3, r2
 80113b6:	781b      	ldrb	r3, [r3, #0]
 80113b8:	011b      	lsls	r3, r3, #4
 80113ba:	b2da      	uxtb	r2, r3
 80113bc:	7bbb      	ldrb	r3, [r7, #14]
 80113be:	1e59      	subs	r1, r3, #1
 80113c0:	7bfb      	ldrb	r3, [r7, #15]
 80113c2:	4813      	ldr	r0, [pc, #76]	; (8011410 <find_pregoal+0x2ac>)
 80113c4:	0109      	lsls	r1, r1, #4
 80113c6:	4401      	add	r1, r0
 80113c8:	440b      	add	r3, r1
 80113ca:	781b      	ldrb	r3, [r3, #0]
 80113cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80113d0:	429a      	cmp	r2, r3
 80113d2:	d025      	beq.n	8011420 <find_pregoal+0x2bc>
								break_flag = 1;								//for文を抜けるフラグを立てて
 80113d4:	2301      	movs	r3, #1
 80113d6:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y - 1][x];					//仮ゴールの歩数を記録
 80113d8:	7bbb      	ldrb	r3, [r7, #14]
 80113da:	1e5a      	subs	r2, r3, #1
 80113dc:	7bfb      	ldrb	r3, [r7, #15]
 80113de:	4908      	ldr	r1, [pc, #32]	; (8011400 <find_pregoal+0x29c>)
 80113e0:	0112      	lsls	r2, r2, #4
 80113e2:	4413      	add	r3, r2
 80113e4:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80113e8:	4b0a      	ldr	r3, [pc, #40]	; (8011414 <find_pregoal+0x2b0>)
 80113ea:	801a      	strh	r2, [r3, #0]
								pregoal_x = x;
 80113ec:	4a0a      	ldr	r2, [pc, #40]	; (8011418 <find_pregoal+0x2b4>)
 80113ee:	7bfb      	ldrb	r3, [r7, #15]
 80113f0:	7013      	strb	r3, [r2, #0]
								pregoal_y = y - 1;							//仮goalの座標を記録
 80113f2:	7bbb      	ldrb	r3, [r7, #14]
 80113f4:	3b01      	subs	r3, #1
 80113f6:	b2da      	uxtb	r2, r3
 80113f8:	4b08      	ldr	r3, [pc, #32]	; (801141c <find_pregoal+0x2b8>)
 80113fa:	701a      	strb	r2, [r3, #0]
								break;
 80113fc:	e06a      	b.n	80114d4 <find_pregoal+0x370>
 80113fe:	bf00      	nop
 8011400:	20000da0 	.word	0x20000da0
 8011404:	20000fa4 	.word	0x20000fa4
 8011408:	20000c8c 	.word	0x20000c8c
 801140c:	2000034e 	.word	0x2000034e
 8011410:	200001ac 	.word	0x200001ac
 8011414:	20000c84 	.word	0x20000c84
 8011418:	20000d9c 	.word	0x20000d9c
 801141c:	20001321 	.word	0x20001321
							}
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {						//西壁がなく現在最西端でないとき
 8011420:	78fb      	ldrb	r3, [r7, #3]
 8011422:	f003 0301 	and.w	r3, r3, #1
 8011426:	2b00      	cmp	r3, #0
 8011428:	d14d      	bne.n	80114c6 <find_pregoal+0x362>
 801142a:	7bfb      	ldrb	r3, [r7, #15]
 801142c:	2b00      	cmp	r3, #0
 801142e:	d04a      	beq.n	80114c6 <find_pregoal+0x362>
						if (smap[y][x - 1] == 0x03e7) {						//西側が未記入なら
 8011430:	7bba      	ldrb	r2, [r7, #14]
 8011432:	7bfb      	ldrb	r3, [r7, #15]
 8011434:	3b01      	subs	r3, #1
 8011436:	493e      	ldr	r1, [pc, #248]	; (8011530 <find_pregoal+0x3cc>)
 8011438:	0112      	lsls	r2, r2, #4
 801143a:	4413      	add	r3, r2
 801143c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011440:	f240 32e7 	movw	r2, #999	; 0x3e7
 8011444:	4293      	cmp	r3, r2
 8011446:	d13e      	bne.n	80114c6 <find_pregoal+0x362>
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
 8011448:	7bba      	ldrb	r2, [r7, #14]
 801144a:	7bfb      	ldrb	r3, [r7, #15]
 801144c:	4938      	ldr	r1, [pc, #224]	; (8011530 <find_pregoal+0x3cc>)
 801144e:	0112      	lsls	r2, r2, #4
 8011450:	4413      	add	r3, r2
 8011452:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	b299      	uxth	r1, r3
 801145a:	7bba      	ldrb	r2, [r7, #14]
 801145c:	7bfb      	ldrb	r3, [r7, #15]
 801145e:	3b01      	subs	r3, #1
 8011460:	4401      	add	r1, r0
 8011462:	b288      	uxth	r0, r1
 8011464:	4932      	ldr	r1, [pc, #200]	; (8011530 <find_pregoal+0x3cc>)
 8011466:	0112      	lsls	r2, r2, #4
 8011468:	4413      	add	r3, r2
 801146a:	4602      	mov	r2, r0
 801146c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y][x - 1] & 0x0f) << 4) != (map[y][x - 1] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 8011470:	7bba      	ldrb	r2, [r7, #14]
 8011472:	7bfb      	ldrb	r3, [r7, #15]
 8011474:	3b01      	subs	r3, #1
 8011476:	492f      	ldr	r1, [pc, #188]	; (8011534 <find_pregoal+0x3d0>)
 8011478:	0112      	lsls	r2, r2, #4
 801147a:	440a      	add	r2, r1
 801147c:	4413      	add	r3, r2
 801147e:	781b      	ldrb	r3, [r3, #0]
 8011480:	011b      	lsls	r3, r3, #4
 8011482:	b2da      	uxtb	r2, r3
 8011484:	7bb9      	ldrb	r1, [r7, #14]
 8011486:	7bfb      	ldrb	r3, [r7, #15]
 8011488:	3b01      	subs	r3, #1
 801148a:	482a      	ldr	r0, [pc, #168]	; (8011534 <find_pregoal+0x3d0>)
 801148c:	0109      	lsls	r1, r1, #4
 801148e:	4401      	add	r1, r0
 8011490:	440b      	add	r3, r1
 8011492:	781b      	ldrb	r3, [r3, #0]
 8011494:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011498:	429a      	cmp	r2, r3
 801149a:	d014      	beq.n	80114c6 <find_pregoal+0x362>
								break_flag = 1;								//for文を抜けるフラグを立てて
 801149c:	2301      	movs	r3, #1
 801149e:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y][x - 1];					//仮ゴールの歩数を記録
 80114a0:	7bba      	ldrb	r2, [r7, #14]
 80114a2:	7bfb      	ldrb	r3, [r7, #15]
 80114a4:	3b01      	subs	r3, #1
 80114a6:	4922      	ldr	r1, [pc, #136]	; (8011530 <find_pregoal+0x3cc>)
 80114a8:	0112      	lsls	r2, r2, #4
 80114aa:	4413      	add	r3, r2
 80114ac:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80114b0:	4b21      	ldr	r3, [pc, #132]	; (8011538 <find_pregoal+0x3d4>)
 80114b2:	801a      	strh	r2, [r3, #0]
								pregoal_x = x - 1;
 80114b4:	7bfb      	ldrb	r3, [r7, #15]
 80114b6:	3b01      	subs	r3, #1
 80114b8:	b2da      	uxtb	r2, r3
 80114ba:	4b20      	ldr	r3, [pc, #128]	; (801153c <find_pregoal+0x3d8>)
 80114bc:	701a      	strb	r2, [r3, #0]
								pregoal_y = y;								//仮goalの座標を記録
 80114be:	4a20      	ldr	r2, [pc, #128]	; (8011540 <find_pregoal+0x3dc>)
 80114c0:	7bbb      	ldrb	r3, [r7, #14]
 80114c2:	7013      	strb	r3, [r2, #0]
								break;							}
 80114c4:	e006      	b.n	80114d4 <find_pregoal+0x370>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 80114c6:	7bfb      	ldrb	r3, [r7, #15]
 80114c8:	3301      	adds	r3, #1
 80114ca:	73fb      	strb	r3, [r7, #15]
 80114cc:	7bfb      	ldrb	r3, [r7, #15]
 80114ce:	2b0f      	cmp	r3, #15
 80114d0:	f67f ae88 	bls.w	80111e4 <find_pregoal+0x80>
						}
					}
				}
			}
			if (break_flag) break;		//map内の上位4bitと下位4bitが異なる場合、for文を抜ける
 80114d4:	7b7b      	ldrb	r3, [r7, #13]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d107      	bne.n	80114ea <find_pregoal+0x386>
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 80114da:	7bbb      	ldrb	r3, [r7, #14]
 80114dc:	3301      	adds	r3, #1
 80114de:	73bb      	strb	r3, [r7, #14]
 80114e0:	7bbb      	ldrb	r3, [r7, #14]
 80114e2:	2b0f      	cmp	r3, #15
 80114e4:	f67f ae7b 	bls.w	80111de <find_pregoal+0x7a>
 80114e8:	e000      	b.n	80114ec <find_pregoal+0x388>
			if (break_flag) break;		//map内の上位4bitと下位4bitが異なる場合、for文を抜ける
 80114ea:	bf00      	nop
		}
		//====歩数カウンタのインクリメント====
		m_step++;
 80114ec:	4b15      	ldr	r3, [pc, #84]	; (8011544 <find_pregoal+0x3e0>)
 80114ee:	881b      	ldrh	r3, [r3, #0]
 80114f0:	3301      	adds	r3, #1
 80114f2:	b29a      	uxth	r2, r3
 80114f4:	4b13      	ldr	r3, [pc, #76]	; (8011544 <find_pregoal+0x3e0>)
 80114f6:	801a      	strh	r2, [r3, #0]
		if(m_step > 500) MF2.FLAG.ALLMAP = 1;
 80114f8:	4b12      	ldr	r3, [pc, #72]	; (8011544 <find_pregoal+0x3e0>)
 80114fa:	881b      	ldrh	r3, [r3, #0]
 80114fc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8011500:	d904      	bls.n	801150c <find_pregoal+0x3a8>
 8011502:	4a11      	ldr	r2, [pc, #68]	; (8011548 <find_pregoal+0x3e4>)
 8011504:	8813      	ldrh	r3, [r2, #0]
 8011506:	f043 0304 	orr.w	r3, r3, #4
 801150a:	8013      	strh	r3, [r2, #0]
	} while(break_flag == 0 && MF2.FLAG.ALLMAP != 1);		//未探索壁ありマスを見つけるまで実行
 801150c:	7b7b      	ldrb	r3, [r7, #13]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d107      	bne.n	8011522 <find_pregoal+0x3be>
 8011512:	4b0d      	ldr	r3, [pc, #52]	; (8011548 <find_pregoal+0x3e4>)
 8011514:	881b      	ldrh	r3, [r3, #0]
 8011516:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801151a:	b2db      	uxtb	r3, r3
 801151c:	2b01      	cmp	r3, #1
 801151e:	f47f ae5b 	bne.w	80111d8 <find_pregoal+0x74>
}
 8011522:	bf00      	nop
 8011524:	3714      	adds	r7, #20
 8011526:	46bd      	mov	sp, r7
 8011528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152c:	4770      	bx	lr
 801152e:	bf00      	nop
 8011530:	20000da0 	.word	0x20000da0
 8011534:	200001ac 	.word	0x200001ac
 8011538:	20000c84 	.word	0x20000c84
 801153c:	20000d9c 	.word	0x20000d9c
 8011540:	20001321 	.word	0x20001321
 8011544:	2000034e 	.word	0x2000034e
 8011548:	20000fa4 	.word	0x20000fa4

0801154c <make_smap2>:
//	歩数マップを作成する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap2()
{
 801154c:	b480      	push	{r7}
 801154e:	b085      	sub	sp, #20
 8011550:	af00      	add	r7, sp, #0
	//====変数宣言====
	uint8_t x, y;															//for文用変数
	uint8_t m_temp;															//マップデータ一時保持

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 8011552:	2300      	movs	r3, #0
 8011554:	73bb      	strb	r3, [r7, #14]
 8011556:	e014      	b.n	8011582 <make_smap2+0x36>
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 8011558:	2300      	movs	r3, #0
 801155a:	73fb      	strb	r3, [r7, #15]
 801155c:	e00b      	b.n	8011576 <make_smap2+0x2a>
			smap[y][x] = 0x03e7;											//未記入部分は歩数最大とする
 801155e:	7bba      	ldrb	r2, [r7, #14]
 8011560:	7bfb      	ldrb	r3, [r7, #15]
 8011562:	4986      	ldr	r1, [pc, #536]	; (801177c <make_smap2+0x230>)
 8011564:	0112      	lsls	r2, r2, #4
 8011566:	4413      	add	r3, r2
 8011568:	f240 32e7 	movw	r2, #999	; 0x3e7
 801156c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 8011570:	7bfb      	ldrb	r3, [r7, #15]
 8011572:	3301      	adds	r3, #1
 8011574:	73fb      	strb	r3, [r7, #15]
 8011576:	7bfb      	ldrb	r3, [r7, #15]
 8011578:	2b0f      	cmp	r3, #15
 801157a:	d9f0      	bls.n	801155e <make_smap2+0x12>
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 801157c:	7bbb      	ldrb	r3, [r7, #14]
 801157e:	3301      	adds	r3, #1
 8011580:	73bb      	strb	r3, [r7, #14]
 8011582:	7bbb      	ldrb	r3, [r7, #14]
 8011584:	2b0f      	cmp	r3, #15
 8011586:	d9e7      	bls.n	8011558 <make_smap2+0xc>
		}
	}

	//====仮ゴール座標を0にする====
	smap[pregoal_y][pregoal_x] = 0;
 8011588:	4b7d      	ldr	r3, [pc, #500]	; (8011780 <make_smap2+0x234>)
 801158a:	781b      	ldrb	r3, [r3, #0]
 801158c:	4618      	mov	r0, r3
 801158e:	4b7d      	ldr	r3, [pc, #500]	; (8011784 <make_smap2+0x238>)
 8011590:	781b      	ldrb	r3, [r3, #0]
 8011592:	4619      	mov	r1, r3
 8011594:	4a79      	ldr	r2, [pc, #484]	; (801177c <make_smap2+0x230>)
 8011596:	0103      	lsls	r3, r0, #4
 8011598:	440b      	add	r3, r1
 801159a:	2100      	movs	r1, #0
 801159c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====歩数カウンタを0にする====
	m_step = 0;																//現在記入した最大の歩数となる
 80115a0:	4b79      	ldr	r3, [pc, #484]	; (8011788 <make_smap2+0x23c>)
 80115a2:	2200      	movs	r2, #0
 80115a4:	801a      	strh	r2, [r3, #0]

	//====歩数カウンタの重みづけ====
	int straight = 3;
 80115a6:	2303      	movs	r3, #3
 80115a8:	60bb      	str	r3, [r7, #8]
	int turn = 5;
 80115aa:	2305      	movs	r3, #5
 80115ac:	607b      	str	r3, [r7, #4]

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 80115ae:	2300      	movs	r3, #0
 80115b0:	73bb      	strb	r3, [r7, #14]
 80115b2:	e0c0      	b.n	8011736 <make_smap2+0x1ea>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 80115b4:	2300      	movs	r3, #0
 80115b6:	73fb      	strb	r3, [r7, #15]
 80115b8:	e0b6      	b.n	8011728 <make_smap2+0x1dc>
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {									//歩数格納変数m_stepの値が現在最大の歩数のとき
 80115ba:	7bba      	ldrb	r2, [r7, #14]
 80115bc:	7bfb      	ldrb	r3, [r7, #15]
 80115be:	496f      	ldr	r1, [pc, #444]	; (801177c <make_smap2+0x230>)
 80115c0:	0112      	lsls	r2, r2, #4
 80115c2:	4413      	add	r3, r2
 80115c4:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80115c8:	4b6f      	ldr	r3, [pc, #444]	; (8011788 <make_smap2+0x23c>)
 80115ca:	881b      	ldrh	r3, [r3, #0]
 80115cc:	429a      	cmp	r2, r3
 80115ce:	f040 80a8 	bne.w	8011722 <make_smap2+0x1d6>
					m_temp = map[y][x];										//map配列からマップデータを取り出す
 80115d2:	7bba      	ldrb	r2, [r7, #14]
 80115d4:	7bfb      	ldrb	r3, [r7, #15]
 80115d6:	496d      	ldr	r1, [pc, #436]	; (801178c <make_smap2+0x240>)
 80115d8:	0112      	lsls	r2, r2, #4
 80115da:	440a      	add	r2, r1
 80115dc:	4413      	add	r3, r2
 80115de:	781b      	ldrb	r3, [r3, #0]
 80115e0:	70fb      	strb	r3, [r7, #3]
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {					//北壁がなく現在最北端でないとき
 80115e2:	78fb      	ldrb	r3, [r7, #3]
 80115e4:	f003 0308 	and.w	r3, r3, #8
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d122      	bne.n	8011632 <make_smap2+0xe6>
 80115ec:	7bbb      	ldrb	r3, [r7, #14]
 80115ee:	2b0f      	cmp	r3, #15
 80115f0:	d01f      	beq.n	8011632 <make_smap2+0xe6>
						if (smap[y + 1][x] == 0x03e7) {						//北側が未記入なら
 80115f2:	7bbb      	ldrb	r3, [r7, #14]
 80115f4:	1c5a      	adds	r2, r3, #1
 80115f6:	7bfb      	ldrb	r3, [r7, #15]
 80115f8:	4960      	ldr	r1, [pc, #384]	; (801177c <make_smap2+0x230>)
 80115fa:	0112      	lsls	r2, r2, #4
 80115fc:	4413      	add	r3, r2
 80115fe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011602:	f240 32e7 	movw	r2, #999	; 0x3e7
 8011606:	4293      	cmp	r3, r2
 8011608:	d113      	bne.n	8011632 <make_smap2+0xe6>
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 801160a:	7bba      	ldrb	r2, [r7, #14]
 801160c:	7bfb      	ldrb	r3, [r7, #15]
 801160e:	495b      	ldr	r1, [pc, #364]	; (801177c <make_smap2+0x230>)
 8011610:	0112      	lsls	r2, r2, #4
 8011612:	4413      	add	r3, r2
 8011614:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	b299      	uxth	r1, r3
 801161c:	7bbb      	ldrb	r3, [r7, #14]
 801161e:	1c5a      	adds	r2, r3, #1
 8011620:	7bfb      	ldrb	r3, [r7, #15]
 8011622:	4401      	add	r1, r0
 8011624:	b288      	uxth	r0, r1
 8011626:	4955      	ldr	r1, [pc, #340]	; (801177c <make_smap2+0x230>)
 8011628:	0112      	lsls	r2, r2, #4
 801162a:	4413      	add	r3, r2
 801162c:	4602      	mov	r2, r0
 801162e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {					//東壁がなく現在最東端でないとき
 8011632:	78fb      	ldrb	r3, [r7, #3]
 8011634:	f003 0304 	and.w	r3, r3, #4
 8011638:	2b00      	cmp	r3, #0
 801163a:	d122      	bne.n	8011682 <make_smap2+0x136>
 801163c:	7bfb      	ldrb	r3, [r7, #15]
 801163e:	2b0f      	cmp	r3, #15
 8011640:	d01f      	beq.n	8011682 <make_smap2+0x136>
						if (smap[y][x + 1] == 0x03e7) {						//東側が未記入なら
 8011642:	7bba      	ldrb	r2, [r7, #14]
 8011644:	7bfb      	ldrb	r3, [r7, #15]
 8011646:	3301      	adds	r3, #1
 8011648:	494c      	ldr	r1, [pc, #304]	; (801177c <make_smap2+0x230>)
 801164a:	0112      	lsls	r2, r2, #4
 801164c:	4413      	add	r3, r2
 801164e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011652:	f240 32e7 	movw	r2, #999	; 0x3e7
 8011656:	4293      	cmp	r3, r2
 8011658:	d113      	bne.n	8011682 <make_smap2+0x136>
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 801165a:	7bba      	ldrb	r2, [r7, #14]
 801165c:	7bfb      	ldrb	r3, [r7, #15]
 801165e:	4947      	ldr	r1, [pc, #284]	; (801177c <make_smap2+0x230>)
 8011660:	0112      	lsls	r2, r2, #4
 8011662:	4413      	add	r3, r2
 8011664:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	b299      	uxth	r1, r3
 801166c:	7bba      	ldrb	r2, [r7, #14]
 801166e:	7bfb      	ldrb	r3, [r7, #15]
 8011670:	3301      	adds	r3, #1
 8011672:	4401      	add	r1, r0
 8011674:	b288      	uxth	r0, r1
 8011676:	4941      	ldr	r1, [pc, #260]	; (801177c <make_smap2+0x230>)
 8011678:	0112      	lsls	r2, r2, #4
 801167a:	4413      	add	r3, r2
 801167c:	4602      	mov	r2, r0
 801167e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {						//南壁がなく現在最南端でないとき
 8011682:	78fb      	ldrb	r3, [r7, #3]
 8011684:	f003 0302 	and.w	r3, r3, #2
 8011688:	2b00      	cmp	r3, #0
 801168a:	d122      	bne.n	80116d2 <make_smap2+0x186>
 801168c:	7bbb      	ldrb	r3, [r7, #14]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d01f      	beq.n	80116d2 <make_smap2+0x186>
						if (smap[y - 1][x] == 0x03e7) {						//南側が未記入なら
 8011692:	7bbb      	ldrb	r3, [r7, #14]
 8011694:	1e5a      	subs	r2, r3, #1
 8011696:	7bfb      	ldrb	r3, [r7, #15]
 8011698:	4938      	ldr	r1, [pc, #224]	; (801177c <make_smap2+0x230>)
 801169a:	0112      	lsls	r2, r2, #4
 801169c:	4413      	add	r3, r2
 801169e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80116a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80116a6:	4293      	cmp	r3, r2
 80116a8:	d113      	bne.n	80116d2 <make_smap2+0x186>
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 80116aa:	7bba      	ldrb	r2, [r7, #14]
 80116ac:	7bfb      	ldrb	r3, [r7, #15]
 80116ae:	4933      	ldr	r1, [pc, #204]	; (801177c <make_smap2+0x230>)
 80116b0:	0112      	lsls	r2, r2, #4
 80116b2:	4413      	add	r3, r2
 80116b4:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	b299      	uxth	r1, r3
 80116bc:	7bbb      	ldrb	r3, [r7, #14]
 80116be:	1e5a      	subs	r2, r3, #1
 80116c0:	7bfb      	ldrb	r3, [r7, #15]
 80116c2:	4401      	add	r1, r0
 80116c4:	b288      	uxth	r0, r1
 80116c6:	492d      	ldr	r1, [pc, #180]	; (801177c <make_smap2+0x230>)
 80116c8:	0112      	lsls	r2, r2, #4
 80116ca:	4413      	add	r3, r2
 80116cc:	4602      	mov	r2, r0
 80116ce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {						//西壁がなく現在最西端でないとき
 80116d2:	78fb      	ldrb	r3, [r7, #3]
 80116d4:	f003 0301 	and.w	r3, r3, #1
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d122      	bne.n	8011722 <make_smap2+0x1d6>
 80116dc:	7bfb      	ldrb	r3, [r7, #15]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d01f      	beq.n	8011722 <make_smap2+0x1d6>
						if (smap[y][x - 1] == 0x03e7) {						//西側が未記入なら
 80116e2:	7bba      	ldrb	r2, [r7, #14]
 80116e4:	7bfb      	ldrb	r3, [r7, #15]
 80116e6:	3b01      	subs	r3, #1
 80116e8:	4924      	ldr	r1, [pc, #144]	; (801177c <make_smap2+0x230>)
 80116ea:	0112      	lsls	r2, r2, #4
 80116ec:	4413      	add	r3, r2
 80116ee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80116f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80116f6:	4293      	cmp	r3, r2
 80116f8:	d113      	bne.n	8011722 <make_smap2+0x1d6>
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
 80116fa:	7bba      	ldrb	r2, [r7, #14]
 80116fc:	7bfb      	ldrb	r3, [r7, #15]
 80116fe:	491f      	ldr	r1, [pc, #124]	; (801177c <make_smap2+0x230>)
 8011700:	0112      	lsls	r2, r2, #4
 8011702:	4413      	add	r3, r2
 8011704:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	b299      	uxth	r1, r3
 801170c:	7bba      	ldrb	r2, [r7, #14]
 801170e:	7bfb      	ldrb	r3, [r7, #15]
 8011710:	3b01      	subs	r3, #1
 8011712:	4401      	add	r1, r0
 8011714:	b288      	uxth	r0, r1
 8011716:	4919      	ldr	r1, [pc, #100]	; (801177c <make_smap2+0x230>)
 8011718:	0112      	lsls	r2, r2, #4
 801171a:	4413      	add	r3, r2
 801171c:	4602      	mov	r2, r0
 801171e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 8011722:	7bfb      	ldrb	r3, [r7, #15]
 8011724:	3301      	adds	r3, #1
 8011726:	73fb      	strb	r3, [r7, #15]
 8011728:	7bfb      	ldrb	r3, [r7, #15]
 801172a:	2b0f      	cmp	r3, #15
 801172c:	f67f af45 	bls.w	80115ba <make_smap2+0x6e>
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 8011730:	7bbb      	ldrb	r3, [r7, #14]
 8011732:	3301      	adds	r3, #1
 8011734:	73bb      	strb	r3, [r7, #14]
 8011736:	7bbb      	ldrb	r3, [r7, #14]
 8011738:	2b0f      	cmp	r3, #15
 801173a:	f67f af3b 	bls.w	80115b4 <make_smap2+0x68>
					}
				}
			}
		}
		//====歩数カウンタのインクリメント====
		m_step++;
 801173e:	4b12      	ldr	r3, [pc, #72]	; (8011788 <make_smap2+0x23c>)
 8011740:	881b      	ldrh	r3, [r3, #0]
 8011742:	3301      	adds	r3, #1
 8011744:	b29a      	uxth	r2, r3
 8011746:	4b10      	ldr	r3, [pc, #64]	; (8011788 <make_smap2+0x23c>)
 8011748:	801a      	strh	r2, [r3, #0]
	} while (smap[mouse.y][mouse.x] == 0x03e7);		//現在座標が未記入ではなくなるまで実行
 801174a:	4b11      	ldr	r3, [pc, #68]	; (8011790 <make_smap2+0x244>)
 801174c:	785b      	ldrb	r3, [r3, #1]
 801174e:	b2db      	uxtb	r3, r3
 8011750:	4618      	mov	r0, r3
 8011752:	4b0f      	ldr	r3, [pc, #60]	; (8011790 <make_smap2+0x244>)
 8011754:	781b      	ldrb	r3, [r3, #0]
 8011756:	b2db      	uxtb	r3, r3
 8011758:	4619      	mov	r1, r3
 801175a:	4a08      	ldr	r2, [pc, #32]	; (801177c <make_smap2+0x230>)
 801175c:	0103      	lsls	r3, r0, #4
 801175e:	440b      	add	r3, r1
 8011760:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011764:	f240 32e7 	movw	r2, #999	; 0x3e7
 8011768:	4293      	cmp	r3, r2
 801176a:	f43f af20 	beq.w	80115ae <make_smap2+0x62>
}
 801176e:	bf00      	nop
 8011770:	3714      	adds	r7, #20
 8011772:	46bd      	mov	sp, r7
 8011774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011778:	4770      	bx	lr
 801177a:	bf00      	nop
 801177c:	20000da0 	.word	0x20000da0
 8011780:	20001321 	.word	0x20001321
 8011784:	20000d9c 	.word	0x20000d9c
 8011788:	2000034e 	.word	0x2000034e
 801178c:	200001ac 	.word	0x200001ac
 8011790:	20000c8c 	.word	0x20000c8c

08011794 <pass_route2>:
//pass_route2
// route配列をpass圧縮する(半区画ベース)
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_route2(void){
 8011794:	b480      	push	{r7}
 8011796:	b083      	sub	sp, #12
 8011798:	af00      	add	r7, sp, #0
	int i;
	uint8_t s_flag = 0;
 801179a:	2300      	movs	r3, #0
 801179c:	70fb      	strb	r3, [r7, #3]
	for(i = 0; i < 256; i++){
 801179e:	2300      	movs	r3, #0
 80117a0:	607b      	str	r3, [r7, #4]
 80117a2:	e007      	b.n	80117b4 <pass_route2+0x20>
		pass[i] = 0;								//pass配列の初期化
 80117a4:	4a83      	ldr	r2, [pc, #524]	; (80119b4 <pass_route2+0x220>)
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	4413      	add	r3, r2
 80117aa:	2200      	movs	r2, #0
 80117ac:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 256; i++){
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	3301      	adds	r3, #1
 80117b2:	607b      	str	r3, [r7, #4]
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	2bff      	cmp	r3, #255	; 0xff
 80117b8:	ddf4      	ble.n	80117a4 <pass_route2+0x10>
	}
	uint8_t p = 0;									//pass配列の配列番号用変数
 80117ba:	2300      	movs	r3, #0
 80117bc:	70bb      	strb	r3, [r7, #2]
	i = 0;
 80117be:	2300      	movs	r3, #0
 80117c0:	607b      	str	r3, [r7, #4]
	uint8_t s = 0;									//a直線数カウント用変数
 80117c2:	2300      	movs	r3, #0
 80117c4:	707b      	strb	r3, [r7, #1]
	while(route[i-1] != 0xff){
 80117c6:	e0e8      	b.n	801199a <pass_route2+0x206>
		s = 0;
 80117c8:	2300      	movs	r3, #0
 80117ca:	707b      	strb	r3, [r7, #1]
		if(route[i] == 0x44){
 80117cc:	4a7a      	ldr	r2, [pc, #488]	; (80119b8 <pass_route2+0x224>)
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	4413      	add	r3, r2
 80117d2:	781b      	ldrb	r3, [r3, #0]
 80117d4:	2b44      	cmp	r3, #68	; 0x44
 80117d6:	d107      	bne.n	80117e8 <pass_route2+0x54>
			pass[p] = -1;							//a右スラローム
 80117d8:	78bb      	ldrb	r3, [r7, #2]
 80117da:	4a76      	ldr	r2, [pc, #472]	; (80119b4 <pass_route2+0x220>)
 80117dc:	21ff      	movs	r1, #255	; 0xff
 80117de:	54d1      	strb	r1, [r2, r3]
			i++;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	3301      	adds	r3, #1
 80117e4:	607b      	str	r3, [r7, #4]
 80117e6:	e0d5      	b.n	8011994 <pass_route2+0x200>
		}else if(route[i] == 0x11){
 80117e8:	4a73      	ldr	r2, [pc, #460]	; (80119b8 <pass_route2+0x224>)
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	4413      	add	r3, r2
 80117ee:	781b      	ldrb	r3, [r3, #0]
 80117f0:	2b11      	cmp	r3, #17
 80117f2:	d107      	bne.n	8011804 <pass_route2+0x70>
			pass[p] = -2;							//a左スラローム
 80117f4:	78bb      	ldrb	r3, [r7, #2]
 80117f6:	4a6f      	ldr	r2, [pc, #444]	; (80119b4 <pass_route2+0x220>)
 80117f8:	21fe      	movs	r1, #254	; 0xfe
 80117fa:	54d1      	strb	r1, [r2, r3]
			i++;
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	3301      	adds	r3, #1
 8011800:	607b      	str	r3, [r7, #4]
 8011802:	e0c7      	b.n	8011994 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x77){
 8011804:	4a6c      	ldr	r2, [pc, #432]	; (80119b8 <pass_route2+0x224>)
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	4413      	add	r3, r2
 801180a:	781b      	ldrb	r3, [r3, #0]
 801180c:	2b77      	cmp	r3, #119	; 0x77
 801180e:	d115      	bne.n	801183c <pass_route2+0xa8>
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	3301      	adds	r3, #1
 8011814:	4a68      	ldr	r2, [pc, #416]	; (80119b8 <pass_route2+0x224>)
 8011816:	5cd3      	ldrb	r3, [r2, r3]
 8011818:	2b44      	cmp	r3, #68	; 0x44
 801181a:	d10f      	bne.n	801183c <pass_route2+0xa8>
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	3302      	adds	r3, #2
 8011820:	4a65      	ldr	r2, [pc, #404]	; (80119b8 <pass_route2+0x224>)
 8011822:	5cd3      	ldrb	r3, [r2, r3]
 8011824:	2b77      	cmp	r3, #119	; 0x77
 8011826:	d109      	bne.n	801183c <pass_route2+0xa8>
			s_flag = 0;
 8011828:	2300      	movs	r3, #0
 801182a:	70fb      	strb	r3, [r7, #3]
			pass[p] = -3;							//a大回り右スラローム
 801182c:	78bb      	ldrb	r3, [r7, #2]
 801182e:	4a61      	ldr	r2, [pc, #388]	; (80119b4 <pass_route2+0x220>)
 8011830:	21fd      	movs	r1, #253	; 0xfd
 8011832:	54d1      	strb	r1, [r2, r3]
			i = i + 3;
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	3303      	adds	r3, #3
 8011838:	607b      	str	r3, [r7, #4]
 801183a:	e0ab      	b.n	8011994 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x77){
 801183c:	4a5e      	ldr	r2, [pc, #376]	; (80119b8 <pass_route2+0x224>)
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	4413      	add	r3, r2
 8011842:	781b      	ldrb	r3, [r3, #0]
 8011844:	2b77      	cmp	r3, #119	; 0x77
 8011846:	d115      	bne.n	8011874 <pass_route2+0xe0>
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	3301      	adds	r3, #1
 801184c:	4a5a      	ldr	r2, [pc, #360]	; (80119b8 <pass_route2+0x224>)
 801184e:	5cd3      	ldrb	r3, [r2, r3]
 8011850:	2b11      	cmp	r3, #17
 8011852:	d10f      	bne.n	8011874 <pass_route2+0xe0>
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	3302      	adds	r3, #2
 8011858:	4a57      	ldr	r2, [pc, #348]	; (80119b8 <pass_route2+0x224>)
 801185a:	5cd3      	ldrb	r3, [r2, r3]
 801185c:	2b77      	cmp	r3, #119	; 0x77
 801185e:	d109      	bne.n	8011874 <pass_route2+0xe0>
			s_flag = 0;
 8011860:	2300      	movs	r3, #0
 8011862:	70fb      	strb	r3, [r7, #3]
			pass[p] = -4;							//a大回り左スラローム
 8011864:	78bb      	ldrb	r3, [r7, #2]
 8011866:	4a53      	ldr	r2, [pc, #332]	; (80119b4 <pass_route2+0x220>)
 8011868:	21fc      	movs	r1, #252	; 0xfc
 801186a:	54d1      	strb	r1, [r2, r3]
			i = i + 3;
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	3303      	adds	r3, #3
 8011870:	607b      	str	r3, [r7, #4]
 8011872:	e08f      	b.n	8011994 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x77){
 8011874:	4a50      	ldr	r2, [pc, #320]	; (80119b8 <pass_route2+0x224>)
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	4413      	add	r3, r2
 801187a:	781b      	ldrb	r3, [r3, #0]
 801187c:	2b77      	cmp	r3, #119	; 0x77
 801187e:	d11b      	bne.n	80118b8 <pass_route2+0x124>
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	3301      	adds	r3, #1
 8011884:	4a4c      	ldr	r2, [pc, #304]	; (80119b8 <pass_route2+0x224>)
 8011886:	5cd3      	ldrb	r3, [r2, r3]
 8011888:	2b44      	cmp	r3, #68	; 0x44
 801188a:	d115      	bne.n	80118b8 <pass_route2+0x124>
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	3302      	adds	r3, #2
 8011890:	4a49      	ldr	r2, [pc, #292]	; (80119b8 <pass_route2+0x224>)
 8011892:	5cd3      	ldrb	r3, [r2, r3]
 8011894:	2b44      	cmp	r3, #68	; 0x44
 8011896:	d10f      	bne.n	80118b8 <pass_route2+0x124>
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	3303      	adds	r3, #3
 801189c:	4a46      	ldr	r2, [pc, #280]	; (80119b8 <pass_route2+0x224>)
 801189e:	5cd3      	ldrb	r3, [r2, r3]
 80118a0:	2b77      	cmp	r3, #119	; 0x77
 80118a2:	d109      	bne.n	80118b8 <pass_route2+0x124>
			s_flag = 0;
 80118a4:	2300      	movs	r3, #0
 80118a6:	70fb      	strb	r3, [r7, #3]
			pass[p] = -5;							//a大回り右180スラローム
 80118a8:	78bb      	ldrb	r3, [r7, #2]
 80118aa:	4a42      	ldr	r2, [pc, #264]	; (80119b4 <pass_route2+0x220>)
 80118ac:	21fb      	movs	r1, #251	; 0xfb
 80118ae:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	3304      	adds	r3, #4
 80118b4:	607b      	str	r3, [r7, #4]
 80118b6:	e06d      	b.n	8011994 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x77){
 80118b8:	4a3f      	ldr	r2, [pc, #252]	; (80119b8 <pass_route2+0x224>)
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	4413      	add	r3, r2
 80118be:	781b      	ldrb	r3, [r3, #0]
 80118c0:	2b77      	cmp	r3, #119	; 0x77
 80118c2:	d11b      	bne.n	80118fc <pass_route2+0x168>
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	3301      	adds	r3, #1
 80118c8:	4a3b      	ldr	r2, [pc, #236]	; (80119b8 <pass_route2+0x224>)
 80118ca:	5cd3      	ldrb	r3, [r2, r3]
 80118cc:	2b11      	cmp	r3, #17
 80118ce:	d115      	bne.n	80118fc <pass_route2+0x168>
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	3302      	adds	r3, #2
 80118d4:	4a38      	ldr	r2, [pc, #224]	; (80119b8 <pass_route2+0x224>)
 80118d6:	5cd3      	ldrb	r3, [r2, r3]
 80118d8:	2b11      	cmp	r3, #17
 80118da:	d10f      	bne.n	80118fc <pass_route2+0x168>
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	3303      	adds	r3, #3
 80118e0:	4a35      	ldr	r2, [pc, #212]	; (80119b8 <pass_route2+0x224>)
 80118e2:	5cd3      	ldrb	r3, [r2, r3]
 80118e4:	2b77      	cmp	r3, #119	; 0x77
 80118e6:	d109      	bne.n	80118fc <pass_route2+0x168>
			s_flag = 0;
 80118e8:	2300      	movs	r3, #0
 80118ea:	70fb      	strb	r3, [r7, #3]
			pass[p] = -6;							//a大回り左180スラローム
 80118ec:	78bb      	ldrb	r3, [r7, #2]
 80118ee:	4a31      	ldr	r2, [pc, #196]	; (80119b4 <pass_route2+0x220>)
 80118f0:	21fa      	movs	r1, #250	; 0xfa
 80118f2:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	3304      	adds	r3, #4
 80118f8:	607b      	str	r3, [r7, #4]
 80118fa:	e04b      	b.n	8011994 <pass_route2+0x200>
		}else if(route[i] == 0xff){
 80118fc:	4a2e      	ldr	r2, [pc, #184]	; (80119b8 <pass_route2+0x224>)
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	4413      	add	r3, r2
 8011902:	781b      	ldrb	r3, [r3, #0]
 8011904:	2bff      	cmp	r3, #255	; 0xff
 8011906:	d107      	bne.n	8011918 <pass_route2+0x184>
			pass[p] = -114;							//a終了条件用
 8011908:	78bb      	ldrb	r3, [r7, #2]
 801190a:	4a2a      	ldr	r2, [pc, #168]	; (80119b4 <pass_route2+0x220>)
 801190c:	218e      	movs	r1, #142	; 0x8e
 801190e:	54d1      	strb	r1, [r2, r3]
			i++;
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	3301      	adds	r3, #1
 8011914:	607b      	str	r3, [r7, #4]
 8011916:	e03d      	b.n	8011994 <pass_route2+0x200>
		}else if(route[i] == 0x77){
 8011918:	4a27      	ldr	r2, [pc, #156]	; (80119b8 <pass_route2+0x224>)
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	4413      	add	r3, r2
 801191e:	781b      	ldrb	r3, [r3, #0]
 8011920:	2b77      	cmp	r3, #119	; 0x77
 8011922:	d137      	bne.n	8011994 <pass_route2+0x200>
			if(s_flag){
 8011924:	78fb      	ldrb	r3, [r7, #3]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d012      	beq.n	8011950 <pass_route2+0x1bc>
				pass[p-1]++;
 801192a:	78bb      	ldrb	r3, [r7, #2]
 801192c:	3b01      	subs	r3, #1
 801192e:	4a21      	ldr	r2, [pc, #132]	; (80119b4 <pass_route2+0x220>)
 8011930:	56d2      	ldrsb	r2, [r2, r3]
 8011932:	b2d2      	uxtb	r2, r2
 8011934:	3201      	adds	r2, #1
 8011936:	b2d2      	uxtb	r2, r2
 8011938:	b251      	sxtb	r1, r2
 801193a:	4a1e      	ldr	r2, [pc, #120]	; (80119b4 <pass_route2+0x220>)
 801193c:	54d1      	strb	r1, [r2, r3]
				p--;
 801193e:	78bb      	ldrb	r3, [r7, #2]
 8011940:	3b01      	subs	r3, #1
 8011942:	70bb      	strb	r3, [r7, #2]
				s_flag = 0;
 8011944:	2300      	movs	r3, #0
 8011946:	70fb      	strb	r3, [r7, #3]
				i++;
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	3301      	adds	r3, #1
 801194c:	607b      	str	r3, [r7, #4]
 801194e:	e021      	b.n	8011994 <pass_route2+0x200>
			}else{
				s++;
 8011950:	787b      	ldrb	r3, [r7, #1]
 8011952:	3301      	adds	r3, #1
 8011954:	707b      	strb	r3, [r7, #1]
				pass[p] = s;
 8011956:	78bb      	ldrb	r3, [r7, #2]
 8011958:	f997 1001 	ldrsb.w	r1, [r7, #1]
 801195c:	4a15      	ldr	r2, [pc, #84]	; (80119b4 <pass_route2+0x220>)
 801195e:	54d1      	strb	r1, [r2, r3]
				while(route[i+1] == 0x77){
 8011960:	e00c      	b.n	801197c <pass_route2+0x1e8>
					s_flag = 1;
 8011962:	2301      	movs	r3, #1
 8011964:	70fb      	strb	r3, [r7, #3]
					pass[p] = s;
 8011966:	78bb      	ldrb	r3, [r7, #2]
 8011968:	f997 1001 	ldrsb.w	r1, [r7, #1]
 801196c:	4a11      	ldr	r2, [pc, #68]	; (80119b4 <pass_route2+0x220>)
 801196e:	54d1      	strb	r1, [r2, r3]
					i++;
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	3301      	adds	r3, #1
 8011974:	607b      	str	r3, [r7, #4]
					s++;
 8011976:	787b      	ldrb	r3, [r7, #1]
 8011978:	3301      	adds	r3, #1
 801197a:	707b      	strb	r3, [r7, #1]
				while(route[i+1] == 0x77){
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	3301      	adds	r3, #1
 8011980:	4a0d      	ldr	r2, [pc, #52]	; (80119b8 <pass_route2+0x224>)
 8011982:	5cd3      	ldrb	r3, [r2, r3]
 8011984:	2b77      	cmp	r3, #119	; 0x77
 8011986:	d0ec      	beq.n	8011962 <pass_route2+0x1ce>
				}
				if(!s_flag){
 8011988:	78fb      	ldrb	r3, [r7, #3]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d102      	bne.n	8011994 <pass_route2+0x200>
					i++;
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	3301      	adds	r3, #1
 8011992:	607b      	str	r3, [r7, #4]
				}
			}
		}
		p++;
 8011994:	78bb      	ldrb	r3, [r7, #2]
 8011996:	3301      	adds	r3, #1
 8011998:	70bb      	strb	r3, [r7, #2]
	while(route[i-1] != 0xff){
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	3b01      	subs	r3, #1
 801199e:	4a06      	ldr	r2, [pc, #24]	; (80119b8 <pass_route2+0x224>)
 80119a0:	5cd3      	ldrb	r3, [r2, r3]
 80119a2:	2bff      	cmp	r3, #255	; 0xff
 80119a4:	f47f af10 	bne.w	80117c8 <pass_route2+0x34>
	}
}
 80119a8:	bf00      	nop
 80119aa:	370c      	adds	r7, #12
 80119ac:	46bd      	mov	sp, r7
 80119ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b2:	4770      	bx	lr
 80119b4:	20000350 	.word	0x20000350
 80119b8:	20000c94 	.word	0x20000c94

080119bc <pass_route3>:
//pass_route3
// route配列をpass圧縮する(半区画ベース+斜めあり)
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_route3(void){
 80119bc:	b480      	push	{r7}
 80119be:	b083      	sub	sp, #12
 80119c0:	af00      	add	r7, sp, #0
	int i;
	uint8_t s_flag = 0;
 80119c2:	2300      	movs	r3, #0
 80119c4:	70fb      	strb	r3, [r7, #3]
	MF2.FLAG.V = 0;										//a斜めフラグの初期化
 80119c6:	4a98      	ldr	r2, [pc, #608]	; (8011c28 <pass_route3+0x26c>)
 80119c8:	8813      	ldrh	r3, [r2, #0]
 80119ca:	f36f 03c3 	bfc	r3, #3, #1
 80119ce:	8013      	strh	r3, [r2, #0]
	for(i = 0; i < 256; i++){
 80119d0:	2300      	movs	r3, #0
 80119d2:	607b      	str	r3, [r7, #4]
 80119d4:	e007      	b.n	80119e6 <pass_route3+0x2a>
		pass[i] = 0;								//pass配列の初期化
 80119d6:	4a95      	ldr	r2, [pc, #596]	; (8011c2c <pass_route3+0x270>)
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	4413      	add	r3, r2
 80119dc:	2200      	movs	r2, #0
 80119de:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 256; i++){
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	3301      	adds	r3, #1
 80119e4:	607b      	str	r3, [r7, #4]
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	2bff      	cmp	r3, #255	; 0xff
 80119ea:	ddf4      	ble.n	80119d6 <pass_route3+0x1a>
	}
	uint8_t p = 0;									//pass配列の配列番号用変数
 80119ec:	2300      	movs	r3, #0
 80119ee:	70bb      	strb	r3, [r7, #2]
	i = 0;
 80119f0:	2300      	movs	r3, #0
 80119f2:	607b      	str	r3, [r7, #4]
	uint8_t s = 0;									//a直線数カウント用変数
 80119f4:	2300      	movs	r3, #0
 80119f6:	707b      	strb	r3, [r7, #1]
	while(route[i-1] != 0xff){
 80119f8:	e324      	b.n	8012044 <pass_route3+0x688>
		s = 0;
 80119fa:	2300      	movs	r3, #0
 80119fc:	707b      	strb	r3, [r7, #1]
		if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x77){
 80119fe:	4a8c      	ldr	r2, [pc, #560]	; (8011c30 <pass_route3+0x274>)
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	4413      	add	r3, r2
 8011a04:	781b      	ldrb	r3, [r3, #0]
 8011a06:	2b77      	cmp	r3, #119	; 0x77
 8011a08:	d11b      	bne.n	8011a42 <pass_route3+0x86>
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	3301      	adds	r3, #1
 8011a0e:	4a88      	ldr	r2, [pc, #544]	; (8011c30 <pass_route3+0x274>)
 8011a10:	5cd3      	ldrb	r3, [r2, r3]
 8011a12:	2b44      	cmp	r3, #68	; 0x44
 8011a14:	d115      	bne.n	8011a42 <pass_route3+0x86>
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	3302      	adds	r3, #2
 8011a1a:	4a85      	ldr	r2, [pc, #532]	; (8011c30 <pass_route3+0x274>)
 8011a1c:	5cd3      	ldrb	r3, [r2, r3]
 8011a1e:	2b77      	cmp	r3, #119	; 0x77
 8011a20:	d10f      	bne.n	8011a42 <pass_route3+0x86>
			s_flag = 0;
 8011a22:	2300      	movs	r3, #0
 8011a24:	70fb      	strb	r3, [r7, #3]
			pass[p] = -3;							//a大回り右90
 8011a26:	78bb      	ldrb	r3, [r7, #2]
 8011a28:	4a80      	ldr	r2, [pc, #512]	; (8011c2c <pass_route3+0x270>)
 8011a2a:	21fd      	movs	r1, #253	; 0xfd
 8011a2c:	54d1      	strb	r1, [r2, r3]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d102      	bne.n	8011a3a <pass_route3+0x7e>
				start_mode = 2;
 8011a34:	4b7f      	ldr	r3, [pc, #508]	; (8011c34 <pass_route3+0x278>)
 8011a36:	2202      	movs	r2, #2
 8011a38:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	3303      	adds	r3, #3
 8011a3e:	607b      	str	r3, [r7, #4]
 8011a40:	e2fd      	b.n	801203e <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x77){
 8011a42:	4a7b      	ldr	r2, [pc, #492]	; (8011c30 <pass_route3+0x274>)
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	4413      	add	r3, r2
 8011a48:	781b      	ldrb	r3, [r3, #0]
 8011a4a:	2b77      	cmp	r3, #119	; 0x77
 8011a4c:	d11b      	bne.n	8011a86 <pass_route3+0xca>
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	3301      	adds	r3, #1
 8011a52:	4a77      	ldr	r2, [pc, #476]	; (8011c30 <pass_route3+0x274>)
 8011a54:	5cd3      	ldrb	r3, [r2, r3]
 8011a56:	2b11      	cmp	r3, #17
 8011a58:	d115      	bne.n	8011a86 <pass_route3+0xca>
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	3302      	adds	r3, #2
 8011a5e:	4a74      	ldr	r2, [pc, #464]	; (8011c30 <pass_route3+0x274>)
 8011a60:	5cd3      	ldrb	r3, [r2, r3]
 8011a62:	2b77      	cmp	r3, #119	; 0x77
 8011a64:	d10f      	bne.n	8011a86 <pass_route3+0xca>
			s_flag = 0;
 8011a66:	2300      	movs	r3, #0
 8011a68:	70fb      	strb	r3, [r7, #3]
			pass[p] = -4;							//a大回り左90
 8011a6a:	78bb      	ldrb	r3, [r7, #2]
 8011a6c:	4a6f      	ldr	r2, [pc, #444]	; (8011c2c <pass_route3+0x270>)
 8011a6e:	21fc      	movs	r1, #252	; 0xfc
 8011a70:	54d1      	strb	r1, [r2, r3]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d102      	bne.n	8011a7e <pass_route3+0xc2>
				start_mode = 2;
 8011a78:	4b6e      	ldr	r3, [pc, #440]	; (8011c34 <pass_route3+0x278>)
 8011a7a:	2202      	movs	r2, #2
 8011a7c:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	3303      	adds	r3, #3
 8011a82:	607b      	str	r3, [r7, #4]
 8011a84:	e2db      	b.n	801203e <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x77){
 8011a86:	4a6a      	ldr	r2, [pc, #424]	; (8011c30 <pass_route3+0x274>)
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	4413      	add	r3, r2
 8011a8c:	781b      	ldrb	r3, [r3, #0]
 8011a8e:	2b77      	cmp	r3, #119	; 0x77
 8011a90:	d11b      	bne.n	8011aca <pass_route3+0x10e>
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	3301      	adds	r3, #1
 8011a96:	4a66      	ldr	r2, [pc, #408]	; (8011c30 <pass_route3+0x274>)
 8011a98:	5cd3      	ldrb	r3, [r2, r3]
 8011a9a:	2b44      	cmp	r3, #68	; 0x44
 8011a9c:	d115      	bne.n	8011aca <pass_route3+0x10e>
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	3302      	adds	r3, #2
 8011aa2:	4a63      	ldr	r2, [pc, #396]	; (8011c30 <pass_route3+0x274>)
 8011aa4:	5cd3      	ldrb	r3, [r2, r3]
 8011aa6:	2b44      	cmp	r3, #68	; 0x44
 8011aa8:	d10f      	bne.n	8011aca <pass_route3+0x10e>
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	3303      	adds	r3, #3
 8011aae:	4a60      	ldr	r2, [pc, #384]	; (8011c30 <pass_route3+0x274>)
 8011ab0:	5cd3      	ldrb	r3, [r2, r3]
 8011ab2:	2b77      	cmp	r3, #119	; 0x77
 8011ab4:	d109      	bne.n	8011aca <pass_route3+0x10e>
			s_flag = 0;
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	70fb      	strb	r3, [r7, #3]
			pass[p] = -5;							//a大回り右180
 8011aba:	78bb      	ldrb	r3, [r7, #2]
 8011abc:	4a5b      	ldr	r2, [pc, #364]	; (8011c2c <pass_route3+0x270>)
 8011abe:	21fb      	movs	r1, #251	; 0xfb
 8011ac0:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	3304      	adds	r3, #4
 8011ac6:	607b      	str	r3, [r7, #4]
 8011ac8:	e2b9      	b.n	801203e <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x77){
 8011aca:	4a59      	ldr	r2, [pc, #356]	; (8011c30 <pass_route3+0x274>)
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	4413      	add	r3, r2
 8011ad0:	781b      	ldrb	r3, [r3, #0]
 8011ad2:	2b77      	cmp	r3, #119	; 0x77
 8011ad4:	d11b      	bne.n	8011b0e <pass_route3+0x152>
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	3301      	adds	r3, #1
 8011ada:	4a55      	ldr	r2, [pc, #340]	; (8011c30 <pass_route3+0x274>)
 8011adc:	5cd3      	ldrb	r3, [r2, r3]
 8011ade:	2b11      	cmp	r3, #17
 8011ae0:	d115      	bne.n	8011b0e <pass_route3+0x152>
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	3302      	adds	r3, #2
 8011ae6:	4a52      	ldr	r2, [pc, #328]	; (8011c30 <pass_route3+0x274>)
 8011ae8:	5cd3      	ldrb	r3, [r2, r3]
 8011aea:	2b11      	cmp	r3, #17
 8011aec:	d10f      	bne.n	8011b0e <pass_route3+0x152>
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	3303      	adds	r3, #3
 8011af2:	4a4f      	ldr	r2, [pc, #316]	; (8011c30 <pass_route3+0x274>)
 8011af4:	5cd3      	ldrb	r3, [r2, r3]
 8011af6:	2b77      	cmp	r3, #119	; 0x77
 8011af8:	d109      	bne.n	8011b0e <pass_route3+0x152>
			s_flag = 0;
 8011afa:	2300      	movs	r3, #0
 8011afc:	70fb      	strb	r3, [r7, #3]
			pass[p] = -6;							//a大回り左180
 8011afe:	78bb      	ldrb	r3, [r7, #2]
 8011b00:	4a4a      	ldr	r2, [pc, #296]	; (8011c2c <pass_route3+0x270>)
 8011b02:	21fa      	movs	r1, #250	; 0xfa
 8011b04:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	3304      	adds	r3, #4
 8011b0a:	607b      	str	r3, [r7, #4]
 8011b0c:	e297      	b.n	801203e <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x11){
 8011b0e:	4a48      	ldr	r2, [pc, #288]	; (8011c30 <pass_route3+0x274>)
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	4413      	add	r3, r2
 8011b14:	781b      	ldrb	r3, [r3, #0]
 8011b16:	2b77      	cmp	r3, #119	; 0x77
 8011b18:	d120      	bne.n	8011b5c <pass_route3+0x1a0>
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	3301      	adds	r3, #1
 8011b1e:	4a44      	ldr	r2, [pc, #272]	; (8011c30 <pass_route3+0x274>)
 8011b20:	5cd3      	ldrb	r3, [r2, r3]
 8011b22:	2b44      	cmp	r3, #68	; 0x44
 8011b24:	d11a      	bne.n	8011b5c <pass_route3+0x1a0>
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	3302      	adds	r3, #2
 8011b2a:	4a41      	ldr	r2, [pc, #260]	; (8011c30 <pass_route3+0x274>)
 8011b2c:	5cd3      	ldrb	r3, [r2, r3]
 8011b2e:	2b11      	cmp	r3, #17
 8011b30:	d114      	bne.n	8011b5c <pass_route3+0x1a0>
			s_flag = 0;
 8011b32:	2300      	movs	r3, #0
 8011b34:	70fb      	strb	r3, [r7, #3]
			pass[p] = -7;							//a斜め右V45in
 8011b36:	78bb      	ldrb	r3, [r7, #2]
 8011b38:	4a3c      	ldr	r2, [pc, #240]	; (8011c2c <pass_route3+0x270>)
 8011b3a:	21f9      	movs	r1, #249	; 0xf9
 8011b3c:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8011b3e:	4a3a      	ldr	r2, [pc, #232]	; (8011c28 <pass_route3+0x26c>)
 8011b40:	8813      	ldrh	r3, [r2, #0]
 8011b42:	f043 0308 	orr.w	r3, r3, #8
 8011b46:	8013      	strh	r3, [r2, #0]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d102      	bne.n	8011b54 <pass_route3+0x198>
				start_mode = 2;
 8011b4e:	4b39      	ldr	r3, [pc, #228]	; (8011c34 <pass_route3+0x278>)
 8011b50:	2202      	movs	r2, #2
 8011b52:	701a      	strb	r2, [r3, #0]
			}
			i = i + 2;
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	3302      	adds	r3, #2
 8011b58:	607b      	str	r3, [r7, #4]
 8011b5a:	e270      	b.n	801203e <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x44 && route[i+1] == 0x77){
 8011b5c:	4b32      	ldr	r3, [pc, #200]	; (8011c28 <pass_route3+0x26c>)
 8011b5e:	881b      	ldrh	r3, [r3, #0]
 8011b60:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011b64:	b2db      	uxtb	r3, r3
 8011b66:	2b01      	cmp	r3, #1
 8011b68:	d11a      	bne.n	8011ba0 <pass_route3+0x1e4>
 8011b6a:	4a31      	ldr	r2, [pc, #196]	; (8011c30 <pass_route3+0x274>)
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	4413      	add	r3, r2
 8011b70:	781b      	ldrb	r3, [r3, #0]
 8011b72:	2b44      	cmp	r3, #68	; 0x44
 8011b74:	d114      	bne.n	8011ba0 <pass_route3+0x1e4>
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	3301      	adds	r3, #1
 8011b7a:	4a2d      	ldr	r2, [pc, #180]	; (8011c30 <pass_route3+0x274>)
 8011b7c:	5cd3      	ldrb	r3, [r2, r3]
 8011b7e:	2b77      	cmp	r3, #119	; 0x77
 8011b80:	d10e      	bne.n	8011ba0 <pass_route3+0x1e4>
			s_flag = 0;
 8011b82:	2300      	movs	r3, #0
 8011b84:	70fb      	strb	r3, [r7, #3]
			pass[p] = -7;							//a斜め右V45out
 8011b86:	78bb      	ldrb	r3, [r7, #2]
 8011b88:	4a28      	ldr	r2, [pc, #160]	; (8011c2c <pass_route3+0x270>)
 8011b8a:	21f9      	movs	r1, #249	; 0xf9
 8011b8c:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 0;
 8011b8e:	4a26      	ldr	r2, [pc, #152]	; (8011c28 <pass_route3+0x26c>)
 8011b90:	8813      	ldrh	r3, [r2, #0]
 8011b92:	f36f 03c3 	bfc	r3, #3, #1
 8011b96:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	3302      	adds	r3, #2
 8011b9c:	607b      	str	r3, [r7, #4]
 8011b9e:	e24e      	b.n	801203e <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x44){
 8011ba0:	4a23      	ldr	r2, [pc, #140]	; (8011c30 <pass_route3+0x274>)
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	4413      	add	r3, r2
 8011ba6:	781b      	ldrb	r3, [r3, #0]
 8011ba8:	2b77      	cmp	r3, #119	; 0x77
 8011baa:	d11a      	bne.n	8011be2 <pass_route3+0x226>
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	3301      	adds	r3, #1
 8011bb0:	4a1f      	ldr	r2, [pc, #124]	; (8011c30 <pass_route3+0x274>)
 8011bb2:	5cd3      	ldrb	r3, [r2, r3]
 8011bb4:	2b11      	cmp	r3, #17
 8011bb6:	d114      	bne.n	8011be2 <pass_route3+0x226>
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	3302      	adds	r3, #2
 8011bbc:	4a1c      	ldr	r2, [pc, #112]	; (8011c30 <pass_route3+0x274>)
 8011bbe:	5cd3      	ldrb	r3, [r2, r3]
 8011bc0:	2b44      	cmp	r3, #68	; 0x44
 8011bc2:	d10e      	bne.n	8011be2 <pass_route3+0x226>
			s_flag = 0;
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	70fb      	strb	r3, [r7, #3]
			pass[p] = -8;							//a斜め左V45in
 8011bc8:	78bb      	ldrb	r3, [r7, #2]
 8011bca:	4a18      	ldr	r2, [pc, #96]	; (8011c2c <pass_route3+0x270>)
 8011bcc:	21f8      	movs	r1, #248	; 0xf8
 8011bce:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8011bd0:	4a15      	ldr	r2, [pc, #84]	; (8011c28 <pass_route3+0x26c>)
 8011bd2:	8813      	ldrh	r3, [r2, #0]
 8011bd4:	f043 0308 	orr.w	r3, r3, #8
 8011bd8:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	3302      	adds	r3, #2
 8011bde:	607b      	str	r3, [r7, #4]
 8011be0:	e22d      	b.n	801203e <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x11 && route[i+1] == 0x77){
 8011be2:	4b11      	ldr	r3, [pc, #68]	; (8011c28 <pass_route3+0x26c>)
 8011be4:	881b      	ldrh	r3, [r3, #0]
 8011be6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011bea:	b2db      	uxtb	r3, r3
 8011bec:	2b01      	cmp	r3, #1
 8011bee:	d123      	bne.n	8011c38 <pass_route3+0x27c>
 8011bf0:	4a0f      	ldr	r2, [pc, #60]	; (8011c30 <pass_route3+0x274>)
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	4413      	add	r3, r2
 8011bf6:	781b      	ldrb	r3, [r3, #0]
 8011bf8:	2b11      	cmp	r3, #17
 8011bfa:	d11d      	bne.n	8011c38 <pass_route3+0x27c>
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	3301      	adds	r3, #1
 8011c00:	4a0b      	ldr	r2, [pc, #44]	; (8011c30 <pass_route3+0x274>)
 8011c02:	5cd3      	ldrb	r3, [r2, r3]
 8011c04:	2b77      	cmp	r3, #119	; 0x77
 8011c06:	d117      	bne.n	8011c38 <pass_route3+0x27c>
			s_flag = 0;
 8011c08:	2300      	movs	r3, #0
 8011c0a:	70fb      	strb	r3, [r7, #3]
			pass[p] = -8;							//a斜め左V45out
 8011c0c:	78bb      	ldrb	r3, [r7, #2]
 8011c0e:	4a07      	ldr	r2, [pc, #28]	; (8011c2c <pass_route3+0x270>)
 8011c10:	21f8      	movs	r1, #248	; 0xf8
 8011c12:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 0;
 8011c14:	4a04      	ldr	r2, [pc, #16]	; (8011c28 <pass_route3+0x26c>)
 8011c16:	8813      	ldrh	r3, [r2, #0]
 8011c18:	f36f 03c3 	bfc	r3, #3, #1
 8011c1c:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	3302      	adds	r3, #2
 8011c22:	607b      	str	r3, [r7, #4]
 8011c24:	e20b      	b.n	801203e <pass_route3+0x682>
 8011c26:	bf00      	nop
 8011c28:	20000fa4 	.word	0x20000fa4
 8011c2c:	20000350 	.word	0x20000350
 8011c30:	20000c94 	.word	0x20000c94
 8011c34:	20001648 	.word	0x20001648
		}else if(MF2.FLAG.V == 1 && route[i] == 0x44 && route[i+1] == 0x44 && route[i+2] == 0x11){
 8011c38:	4b99      	ldr	r3, [pc, #612]	; (8011ea0 <pass_route3+0x4e4>)
 8011c3a:	881b      	ldrh	r3, [r3, #0]
 8011c3c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011c40:	b2db      	uxtb	r3, r3
 8011c42:	2b01      	cmp	r3, #1
 8011c44:	d120      	bne.n	8011c88 <pass_route3+0x2cc>
 8011c46:	4a97      	ldr	r2, [pc, #604]	; (8011ea4 <pass_route3+0x4e8>)
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	4413      	add	r3, r2
 8011c4c:	781b      	ldrb	r3, [r3, #0]
 8011c4e:	2b44      	cmp	r3, #68	; 0x44
 8011c50:	d11a      	bne.n	8011c88 <pass_route3+0x2cc>
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	3301      	adds	r3, #1
 8011c56:	4a93      	ldr	r2, [pc, #588]	; (8011ea4 <pass_route3+0x4e8>)
 8011c58:	5cd3      	ldrb	r3, [r2, r3]
 8011c5a:	2b44      	cmp	r3, #68	; 0x44
 8011c5c:	d114      	bne.n	8011c88 <pass_route3+0x2cc>
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	3302      	adds	r3, #2
 8011c62:	4a90      	ldr	r2, [pc, #576]	; (8011ea4 <pass_route3+0x4e8>)
 8011c64:	5cd3      	ldrb	r3, [r2, r3]
 8011c66:	2b11      	cmp	r3, #17
 8011c68:	d10e      	bne.n	8011c88 <pass_route3+0x2cc>
			s_flag = 0;
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	70fb      	strb	r3, [r7, #3]
			pass[p] = -9;							//a斜め右V90
 8011c6e:	78bb      	ldrb	r3, [r7, #2]
 8011c70:	4a8d      	ldr	r2, [pc, #564]	; (8011ea8 <pass_route3+0x4ec>)
 8011c72:	21f7      	movs	r1, #247	; 0xf7
 8011c74:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8011c76:	4a8a      	ldr	r2, [pc, #552]	; (8011ea0 <pass_route3+0x4e4>)
 8011c78:	8813      	ldrh	r3, [r2, #0]
 8011c7a:	f043 0308 	orr.w	r3, r3, #8
 8011c7e:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	3302      	adds	r3, #2
 8011c84:	607b      	str	r3, [r7, #4]
 8011c86:	e1da      	b.n	801203e <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x11 && route[i+1] == 0x11 && route[i+2] == 0x44){
 8011c88:	4b85      	ldr	r3, [pc, #532]	; (8011ea0 <pass_route3+0x4e4>)
 8011c8a:	881b      	ldrh	r3, [r3, #0]
 8011c8c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011c90:	b2db      	uxtb	r3, r3
 8011c92:	2b01      	cmp	r3, #1
 8011c94:	d120      	bne.n	8011cd8 <pass_route3+0x31c>
 8011c96:	4a83      	ldr	r2, [pc, #524]	; (8011ea4 <pass_route3+0x4e8>)
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	4413      	add	r3, r2
 8011c9c:	781b      	ldrb	r3, [r3, #0]
 8011c9e:	2b11      	cmp	r3, #17
 8011ca0:	d11a      	bne.n	8011cd8 <pass_route3+0x31c>
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	3301      	adds	r3, #1
 8011ca6:	4a7f      	ldr	r2, [pc, #508]	; (8011ea4 <pass_route3+0x4e8>)
 8011ca8:	5cd3      	ldrb	r3, [r2, r3]
 8011caa:	2b11      	cmp	r3, #17
 8011cac:	d114      	bne.n	8011cd8 <pass_route3+0x31c>
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	3302      	adds	r3, #2
 8011cb2:	4a7c      	ldr	r2, [pc, #496]	; (8011ea4 <pass_route3+0x4e8>)
 8011cb4:	5cd3      	ldrb	r3, [r2, r3]
 8011cb6:	2b44      	cmp	r3, #68	; 0x44
 8011cb8:	d10e      	bne.n	8011cd8 <pass_route3+0x31c>
			s_flag = 0;
 8011cba:	2300      	movs	r3, #0
 8011cbc:	70fb      	strb	r3, [r7, #3]
			pass[p] = -10;							//a斜め左V90
 8011cbe:	78bb      	ldrb	r3, [r7, #2]
 8011cc0:	4a79      	ldr	r2, [pc, #484]	; (8011ea8 <pass_route3+0x4ec>)
 8011cc2:	21f6      	movs	r1, #246	; 0xf6
 8011cc4:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8011cc6:	4a76      	ldr	r2, [pc, #472]	; (8011ea0 <pass_route3+0x4e4>)
 8011cc8:	8813      	ldrh	r3, [r2, #0]
 8011cca:	f043 0308 	orr.w	r3, r3, #8
 8011cce:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	3302      	adds	r3, #2
 8011cd4:	607b      	str	r3, [r7, #4]
 8011cd6:	e1b2      	b.n	801203e <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x11){
 8011cd8:	4a72      	ldr	r2, [pc, #456]	; (8011ea4 <pass_route3+0x4e8>)
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	4413      	add	r3, r2
 8011cde:	781b      	ldrb	r3, [r3, #0]
 8011ce0:	2b77      	cmp	r3, #119	; 0x77
 8011ce2:	d126      	bne.n	8011d32 <pass_route3+0x376>
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	3301      	adds	r3, #1
 8011ce8:	4a6e      	ldr	r2, [pc, #440]	; (8011ea4 <pass_route3+0x4e8>)
 8011cea:	5cd3      	ldrb	r3, [r2, r3]
 8011cec:	2b44      	cmp	r3, #68	; 0x44
 8011cee:	d120      	bne.n	8011d32 <pass_route3+0x376>
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	3302      	adds	r3, #2
 8011cf4:	4a6b      	ldr	r2, [pc, #428]	; (8011ea4 <pass_route3+0x4e8>)
 8011cf6:	5cd3      	ldrb	r3, [r2, r3]
 8011cf8:	2b44      	cmp	r3, #68	; 0x44
 8011cfa:	d11a      	bne.n	8011d32 <pass_route3+0x376>
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	3303      	adds	r3, #3
 8011d00:	4a68      	ldr	r2, [pc, #416]	; (8011ea4 <pass_route3+0x4e8>)
 8011d02:	5cd3      	ldrb	r3, [r2, r3]
 8011d04:	2b11      	cmp	r3, #17
 8011d06:	d114      	bne.n	8011d32 <pass_route3+0x376>
			s_flag = 0;
 8011d08:	2300      	movs	r3, #0
 8011d0a:	70fb      	strb	r3, [r7, #3]
			pass[p] = -11;							//a斜め右V135in
 8011d0c:	78bb      	ldrb	r3, [r7, #2]
 8011d0e:	4a66      	ldr	r2, [pc, #408]	; (8011ea8 <pass_route3+0x4ec>)
 8011d10:	21f5      	movs	r1, #245	; 0xf5
 8011d12:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8011d14:	4a62      	ldr	r2, [pc, #392]	; (8011ea0 <pass_route3+0x4e4>)
 8011d16:	8813      	ldrh	r3, [r2, #0]
 8011d18:	f043 0308 	orr.w	r3, r3, #8
 8011d1c:	8013      	strh	r3, [r2, #0]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d102      	bne.n	8011d2a <pass_route3+0x36e>
				start_mode = 2;
 8011d24:	4b61      	ldr	r3, [pc, #388]	; (8011eac <pass_route3+0x4f0>)
 8011d26:	2202      	movs	r2, #2
 8011d28:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	3303      	adds	r3, #3
 8011d2e:	607b      	str	r3, [r7, #4]
 8011d30:	e185      	b.n	801203e <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x44 && route[i+1] == 0x44 && route[i+2] == 0x77){
 8011d32:	4b5b      	ldr	r3, [pc, #364]	; (8011ea0 <pass_route3+0x4e4>)
 8011d34:	881b      	ldrh	r3, [r3, #0]
 8011d36:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011d3a:	b2db      	uxtb	r3, r3
 8011d3c:	2b01      	cmp	r3, #1
 8011d3e:	d120      	bne.n	8011d82 <pass_route3+0x3c6>
 8011d40:	4a58      	ldr	r2, [pc, #352]	; (8011ea4 <pass_route3+0x4e8>)
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	4413      	add	r3, r2
 8011d46:	781b      	ldrb	r3, [r3, #0]
 8011d48:	2b44      	cmp	r3, #68	; 0x44
 8011d4a:	d11a      	bne.n	8011d82 <pass_route3+0x3c6>
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	3301      	adds	r3, #1
 8011d50:	4a54      	ldr	r2, [pc, #336]	; (8011ea4 <pass_route3+0x4e8>)
 8011d52:	5cd3      	ldrb	r3, [r2, r3]
 8011d54:	2b44      	cmp	r3, #68	; 0x44
 8011d56:	d114      	bne.n	8011d82 <pass_route3+0x3c6>
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	3302      	adds	r3, #2
 8011d5c:	4a51      	ldr	r2, [pc, #324]	; (8011ea4 <pass_route3+0x4e8>)
 8011d5e:	5cd3      	ldrb	r3, [r2, r3]
 8011d60:	2b77      	cmp	r3, #119	; 0x77
 8011d62:	d10e      	bne.n	8011d82 <pass_route3+0x3c6>
			s_flag = 0;
 8011d64:	2300      	movs	r3, #0
 8011d66:	70fb      	strb	r3, [r7, #3]
			pass[p] = -11;							//a斜め右V135out
 8011d68:	78bb      	ldrb	r3, [r7, #2]
 8011d6a:	4a4f      	ldr	r2, [pc, #316]	; (8011ea8 <pass_route3+0x4ec>)
 8011d6c:	21f5      	movs	r1, #245	; 0xf5
 8011d6e:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 0;
 8011d70:	4a4b      	ldr	r2, [pc, #300]	; (8011ea0 <pass_route3+0x4e4>)
 8011d72:	8813      	ldrh	r3, [r2, #0]
 8011d74:	f36f 03c3 	bfc	r3, #3, #1
 8011d78:	8013      	strh	r3, [r2, #0]
			i = i + 3;
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	3303      	adds	r3, #3
 8011d7e:	607b      	str	r3, [r7, #4]
 8011d80:	e15d      	b.n	801203e <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x44){
 8011d82:	4a48      	ldr	r2, [pc, #288]	; (8011ea4 <pass_route3+0x4e8>)
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	4413      	add	r3, r2
 8011d88:	781b      	ldrb	r3, [r3, #0]
 8011d8a:	2b77      	cmp	r3, #119	; 0x77
 8011d8c:	d120      	bne.n	8011dd0 <pass_route3+0x414>
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	3301      	adds	r3, #1
 8011d92:	4a44      	ldr	r2, [pc, #272]	; (8011ea4 <pass_route3+0x4e8>)
 8011d94:	5cd3      	ldrb	r3, [r2, r3]
 8011d96:	2b11      	cmp	r3, #17
 8011d98:	d11a      	bne.n	8011dd0 <pass_route3+0x414>
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	3302      	adds	r3, #2
 8011d9e:	4a41      	ldr	r2, [pc, #260]	; (8011ea4 <pass_route3+0x4e8>)
 8011da0:	5cd3      	ldrb	r3, [r2, r3]
 8011da2:	2b11      	cmp	r3, #17
 8011da4:	d114      	bne.n	8011dd0 <pass_route3+0x414>
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	3303      	adds	r3, #3
 8011daa:	4a3e      	ldr	r2, [pc, #248]	; (8011ea4 <pass_route3+0x4e8>)
 8011dac:	5cd3      	ldrb	r3, [r2, r3]
 8011dae:	2b44      	cmp	r3, #68	; 0x44
 8011db0:	d10e      	bne.n	8011dd0 <pass_route3+0x414>
			s_flag = 0;
 8011db2:	2300      	movs	r3, #0
 8011db4:	70fb      	strb	r3, [r7, #3]
			pass[p] = -12;							//a斜め左V135in
 8011db6:	78bb      	ldrb	r3, [r7, #2]
 8011db8:	4a3b      	ldr	r2, [pc, #236]	; (8011ea8 <pass_route3+0x4ec>)
 8011dba:	21f4      	movs	r1, #244	; 0xf4
 8011dbc:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8011dbe:	4a38      	ldr	r2, [pc, #224]	; (8011ea0 <pass_route3+0x4e4>)
 8011dc0:	8813      	ldrh	r3, [r2, #0]
 8011dc2:	f043 0308 	orr.w	r3, r3, #8
 8011dc6:	8013      	strh	r3, [r2, #0]
			i = i + 3;
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	3303      	adds	r3, #3
 8011dcc:	607b      	str	r3, [r7, #4]
 8011dce:	e136      	b.n	801203e <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x11 && route[i+1] == 0x11 && route[i+2] == 0x77){
 8011dd0:	4b33      	ldr	r3, [pc, #204]	; (8011ea0 <pass_route3+0x4e4>)
 8011dd2:	881b      	ldrh	r3, [r3, #0]
 8011dd4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011dd8:	b2db      	uxtb	r3, r3
 8011dda:	2b01      	cmp	r3, #1
 8011ddc:	d120      	bne.n	8011e20 <pass_route3+0x464>
 8011dde:	4a31      	ldr	r2, [pc, #196]	; (8011ea4 <pass_route3+0x4e8>)
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	4413      	add	r3, r2
 8011de4:	781b      	ldrb	r3, [r3, #0]
 8011de6:	2b11      	cmp	r3, #17
 8011de8:	d11a      	bne.n	8011e20 <pass_route3+0x464>
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	3301      	adds	r3, #1
 8011dee:	4a2d      	ldr	r2, [pc, #180]	; (8011ea4 <pass_route3+0x4e8>)
 8011df0:	5cd3      	ldrb	r3, [r2, r3]
 8011df2:	2b11      	cmp	r3, #17
 8011df4:	d114      	bne.n	8011e20 <pass_route3+0x464>
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	3302      	adds	r3, #2
 8011dfa:	4a2a      	ldr	r2, [pc, #168]	; (8011ea4 <pass_route3+0x4e8>)
 8011dfc:	5cd3      	ldrb	r3, [r2, r3]
 8011dfe:	2b77      	cmp	r3, #119	; 0x77
 8011e00:	d10e      	bne.n	8011e20 <pass_route3+0x464>
			s_flag = 0;
 8011e02:	2300      	movs	r3, #0
 8011e04:	70fb      	strb	r3, [r7, #3]
			pass[p] = -12;							//a斜め左V135out
 8011e06:	78bb      	ldrb	r3, [r7, #2]
 8011e08:	4a27      	ldr	r2, [pc, #156]	; (8011ea8 <pass_route3+0x4ec>)
 8011e0a:	21f4      	movs	r1, #244	; 0xf4
 8011e0c:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 0;
 8011e0e:	4a24      	ldr	r2, [pc, #144]	; (8011ea0 <pass_route3+0x4e4>)
 8011e10:	8813      	ldrh	r3, [r2, #0]
 8011e12:	f36f 03c3 	bfc	r3, #3, #1
 8011e16:	8013      	strh	r3, [r2, #0]
			i = i + 3;
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	3303      	adds	r3, #3
 8011e1c:	607b      	str	r3, [r7, #4]
 8011e1e:	e10e      	b.n	801203e <pass_route3+0x682>
		}else if(route[i] == 0xff){
 8011e20:	4a20      	ldr	r2, [pc, #128]	; (8011ea4 <pass_route3+0x4e8>)
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	4413      	add	r3, r2
 8011e26:	781b      	ldrb	r3, [r3, #0]
 8011e28:	2bff      	cmp	r3, #255	; 0xff
 8011e2a:	d16a      	bne.n	8011f02 <pass_route3+0x546>
			if(MF2.FLAG.V == 1){
 8011e2c:	4b1c      	ldr	r3, [pc, #112]	; (8011ea0 <pass_route3+0x4e4>)
 8011e2e:	881b      	ldrh	r3, [r3, #0]
 8011e30:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011e34:	b2db      	uxtb	r3, r3
 8011e36:	2b01      	cmp	r3, #1
 8011e38:	d15b      	bne.n	8011ef2 <pass_route3+0x536>
				if(pass[p-1] == -1 && pass[p-2] == -1){
 8011e3a:	78bb      	ldrb	r3, [r7, #2]
 8011e3c:	3b01      	subs	r3, #1
 8011e3e:	4a1a      	ldr	r2, [pc, #104]	; (8011ea8 <pass_route3+0x4ec>)
 8011e40:	56d3      	ldrsb	r3, [r2, r3]
 8011e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e46:	d111      	bne.n	8011e6c <pass_route3+0x4b0>
 8011e48:	78bb      	ldrb	r3, [r7, #2]
 8011e4a:	3b02      	subs	r3, #2
 8011e4c:	4a16      	ldr	r2, [pc, #88]	; (8011ea8 <pass_route3+0x4ec>)
 8011e4e:	56d3      	ldrsb	r3, [r2, r3]
 8011e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e54:	d10a      	bne.n	8011e6c <pass_route3+0x4b0>
					pass[p-2] = -15;
 8011e56:	78bb      	ldrb	r3, [r7, #2]
 8011e58:	3b02      	subs	r3, #2
 8011e5a:	4a13      	ldr	r2, [pc, #76]	; (8011ea8 <pass_route3+0x4ec>)
 8011e5c:	21f1      	movs	r1, #241	; 0xf1
 8011e5e:	54d1      	strb	r1, [r2, r3]
					pass[p-1] = -114;
 8011e60:	78bb      	ldrb	r3, [r7, #2]
 8011e62:	3b01      	subs	r3, #1
 8011e64:	4a10      	ldr	r2, [pc, #64]	; (8011ea8 <pass_route3+0x4ec>)
 8011e66:	218e      	movs	r1, #142	; 0x8e
 8011e68:	54d1      	strb	r1, [r2, r3]
 8011e6a:	e042      	b.n	8011ef2 <pass_route3+0x536>
				}else if(pass[p-1] == -2 && pass[p-2] == -2){
 8011e6c:	78bb      	ldrb	r3, [r7, #2]
 8011e6e:	3b01      	subs	r3, #1
 8011e70:	4a0d      	ldr	r2, [pc, #52]	; (8011ea8 <pass_route3+0x4ec>)
 8011e72:	56d3      	ldrsb	r3, [r2, r3]
 8011e74:	f113 0f02 	cmn.w	r3, #2
 8011e78:	d11a      	bne.n	8011eb0 <pass_route3+0x4f4>
 8011e7a:	78bb      	ldrb	r3, [r7, #2]
 8011e7c:	3b02      	subs	r3, #2
 8011e7e:	4a0a      	ldr	r2, [pc, #40]	; (8011ea8 <pass_route3+0x4ec>)
 8011e80:	56d3      	ldrsb	r3, [r2, r3]
 8011e82:	f113 0f02 	cmn.w	r3, #2
 8011e86:	d113      	bne.n	8011eb0 <pass_route3+0x4f4>
					pass[p-2] = -16;
 8011e88:	78bb      	ldrb	r3, [r7, #2]
 8011e8a:	3b02      	subs	r3, #2
 8011e8c:	4a06      	ldr	r2, [pc, #24]	; (8011ea8 <pass_route3+0x4ec>)
 8011e8e:	21f0      	movs	r1, #240	; 0xf0
 8011e90:	54d1      	strb	r1, [r2, r3]
					pass[p-1] = -114;
 8011e92:	78bb      	ldrb	r3, [r7, #2]
 8011e94:	3b01      	subs	r3, #1
 8011e96:	4a04      	ldr	r2, [pc, #16]	; (8011ea8 <pass_route3+0x4ec>)
 8011e98:	218e      	movs	r1, #142	; 0x8e
 8011e9a:	54d1      	strb	r1, [r2, r3]
 8011e9c:	e029      	b.n	8011ef2 <pass_route3+0x536>
 8011e9e:	bf00      	nop
 8011ea0:	20000fa4 	.word	0x20000fa4
 8011ea4:	20000c94 	.word	0x20000c94
 8011ea8:	20000350 	.word	0x20000350
 8011eac:	20001648 	.word	0x20001648
				}else if(pass[p-1] == -1){
 8011eb0:	78bb      	ldrb	r3, [r7, #2]
 8011eb2:	3b01      	subs	r3, #1
 8011eb4:	4a6a      	ldr	r2, [pc, #424]	; (8012060 <pass_route3+0x6a4>)
 8011eb6:	56d3      	ldrsb	r3, [r2, r3]
 8011eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ebc:	d109      	bne.n	8011ed2 <pass_route3+0x516>
					pass[p-1] = -13;
 8011ebe:	78bb      	ldrb	r3, [r7, #2]
 8011ec0:	3b01      	subs	r3, #1
 8011ec2:	4a67      	ldr	r2, [pc, #412]	; (8012060 <pass_route3+0x6a4>)
 8011ec4:	21f3      	movs	r1, #243	; 0xf3
 8011ec6:	54d1      	strb	r1, [r2, r3]
					pass[p] = -114;
 8011ec8:	78bb      	ldrb	r3, [r7, #2]
 8011eca:	4a65      	ldr	r2, [pc, #404]	; (8012060 <pass_route3+0x6a4>)
 8011ecc:	218e      	movs	r1, #142	; 0x8e
 8011ece:	54d1      	strb	r1, [r2, r3]
 8011ed0:	e00f      	b.n	8011ef2 <pass_route3+0x536>
				}else if(pass[p-1] == -2){
 8011ed2:	78bb      	ldrb	r3, [r7, #2]
 8011ed4:	3b01      	subs	r3, #1
 8011ed6:	4a62      	ldr	r2, [pc, #392]	; (8012060 <pass_route3+0x6a4>)
 8011ed8:	56d3      	ldrsb	r3, [r2, r3]
 8011eda:	f113 0f02 	cmn.w	r3, #2
 8011ede:	d108      	bne.n	8011ef2 <pass_route3+0x536>
					pass[p-1] = -14;
 8011ee0:	78bb      	ldrb	r3, [r7, #2]
 8011ee2:	3b01      	subs	r3, #1
 8011ee4:	4a5e      	ldr	r2, [pc, #376]	; (8012060 <pass_route3+0x6a4>)
 8011ee6:	21f2      	movs	r1, #242	; 0xf2
 8011ee8:	54d1      	strb	r1, [r2, r3]
					pass[p] = -114;
 8011eea:	78bb      	ldrb	r3, [r7, #2]
 8011eec:	4a5c      	ldr	r2, [pc, #368]	; (8012060 <pass_route3+0x6a4>)
 8011eee:	218e      	movs	r1, #142	; 0x8e
 8011ef0:	54d1      	strb	r1, [r2, r3]
				}
			}
			pass[p] = -114;							//a終了用配列
 8011ef2:	78bb      	ldrb	r3, [r7, #2]
 8011ef4:	4a5a      	ldr	r2, [pc, #360]	; (8012060 <pass_route3+0x6a4>)
 8011ef6:	218e      	movs	r1, #142	; 0x8e
 8011ef8:	54d1      	strb	r1, [r2, r3]
			i++;
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	3301      	adds	r3, #1
 8011efe:	607b      	str	r3, [r7, #4]
 8011f00:	e09d      	b.n	801203e <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x44 && route[i+1] == 0x11){
 8011f02:	4b58      	ldr	r3, [pc, #352]	; (8012064 <pass_route3+0x6a8>)
 8011f04:	881b      	ldrh	r3, [r3, #0]
 8011f06:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011f0a:	b2db      	uxtb	r3, r3
 8011f0c:	2b01      	cmp	r3, #1
 8011f0e:	d11a      	bne.n	8011f46 <pass_route3+0x58a>
 8011f10:	4a55      	ldr	r2, [pc, #340]	; (8012068 <pass_route3+0x6ac>)
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	4413      	add	r3, r2
 8011f16:	781b      	ldrb	r3, [r3, #0]
 8011f18:	2b44      	cmp	r3, #68	; 0x44
 8011f1a:	d114      	bne.n	8011f46 <pass_route3+0x58a>
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	3301      	adds	r3, #1
 8011f20:	4a51      	ldr	r2, [pc, #324]	; (8012068 <pass_route3+0x6ac>)
 8011f22:	5cd3      	ldrb	r3, [r2, r3]
 8011f24:	2b11      	cmp	r3, #17
 8011f26:	d10e      	bne.n	8011f46 <pass_route3+0x58a>
			s_flag = 0;
 8011f28:	2300      	movs	r3, #0
 8011f2a:	70fb      	strb	r3, [r7, #3]
			pass[p] = 64;							//a斜め半直線
 8011f2c:	78bb      	ldrb	r3, [r7, #2]
 8011f2e:	4a4c      	ldr	r2, [pc, #304]	; (8012060 <pass_route3+0x6a4>)
 8011f30:	2140      	movs	r1, #64	; 0x40
 8011f32:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8011f34:	4a4b      	ldr	r2, [pc, #300]	; (8012064 <pass_route3+0x6a8>)
 8011f36:	8813      	ldrh	r3, [r2, #0]
 8011f38:	f043 0308 	orr.w	r3, r3, #8
 8011f3c:	8013      	strh	r3, [r2, #0]
			i++;
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	3301      	adds	r3, #1
 8011f42:	607b      	str	r3, [r7, #4]
 8011f44:	e07b      	b.n	801203e <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x11 && route[i+1] == 0x44){
 8011f46:	4b47      	ldr	r3, [pc, #284]	; (8012064 <pass_route3+0x6a8>)
 8011f48:	881b      	ldrh	r3, [r3, #0]
 8011f4a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011f4e:	b2db      	uxtb	r3, r3
 8011f50:	2b01      	cmp	r3, #1
 8011f52:	d11a      	bne.n	8011f8a <pass_route3+0x5ce>
 8011f54:	4a44      	ldr	r2, [pc, #272]	; (8012068 <pass_route3+0x6ac>)
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	4413      	add	r3, r2
 8011f5a:	781b      	ldrb	r3, [r3, #0]
 8011f5c:	2b11      	cmp	r3, #17
 8011f5e:	d114      	bne.n	8011f8a <pass_route3+0x5ce>
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	3301      	adds	r3, #1
 8011f64:	4a40      	ldr	r2, [pc, #256]	; (8012068 <pass_route3+0x6ac>)
 8011f66:	5cd3      	ldrb	r3, [r2, r3]
 8011f68:	2b44      	cmp	r3, #68	; 0x44
 8011f6a:	d10e      	bne.n	8011f8a <pass_route3+0x5ce>
			s_flag = 0;
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	70fb      	strb	r3, [r7, #3]
			pass[p] = 64;							//a斜め半直線
 8011f70:	78bb      	ldrb	r3, [r7, #2]
 8011f72:	4a3b      	ldr	r2, [pc, #236]	; (8012060 <pass_route3+0x6a4>)
 8011f74:	2140      	movs	r1, #64	; 0x40
 8011f76:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8011f78:	4a3a      	ldr	r2, [pc, #232]	; (8012064 <pass_route3+0x6a8>)
 8011f7a:	8813      	ldrh	r3, [r2, #0]
 8011f7c:	f043 0308 	orr.w	r3, r3, #8
 8011f80:	8013      	strh	r3, [r2, #0]
			i++;
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	3301      	adds	r3, #1
 8011f86:	607b      	str	r3, [r7, #4]
 8011f88:	e059      	b.n	801203e <pass_route3+0x682>
		}else if(route[i] == 0x44){
 8011f8a:	4a37      	ldr	r2, [pc, #220]	; (8012068 <pass_route3+0x6ac>)
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	4413      	add	r3, r2
 8011f90:	781b      	ldrb	r3, [r3, #0]
 8011f92:	2b44      	cmp	r3, #68	; 0x44
 8011f94:	d107      	bne.n	8011fa6 <pass_route3+0x5ea>
			pass[p] = -1;							//a右スラローム
 8011f96:	78bb      	ldrb	r3, [r7, #2]
 8011f98:	4a31      	ldr	r2, [pc, #196]	; (8012060 <pass_route3+0x6a4>)
 8011f9a:	21ff      	movs	r1, #255	; 0xff
 8011f9c:	54d1      	strb	r1, [r2, r3]
			i++;
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	3301      	adds	r3, #1
 8011fa2:	607b      	str	r3, [r7, #4]
 8011fa4:	e04b      	b.n	801203e <pass_route3+0x682>
		}else if(route[i] == 0x11){
 8011fa6:	4a30      	ldr	r2, [pc, #192]	; (8012068 <pass_route3+0x6ac>)
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	4413      	add	r3, r2
 8011fac:	781b      	ldrb	r3, [r3, #0]
 8011fae:	2b11      	cmp	r3, #17
 8011fb0:	d107      	bne.n	8011fc2 <pass_route3+0x606>
			pass[p] = -2;							//a左スラローム
 8011fb2:	78bb      	ldrb	r3, [r7, #2]
 8011fb4:	4a2a      	ldr	r2, [pc, #168]	; (8012060 <pass_route3+0x6a4>)
 8011fb6:	21fe      	movs	r1, #254	; 0xfe
 8011fb8:	54d1      	strb	r1, [r2, r3]
			i++;
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	3301      	adds	r3, #1
 8011fbe:	607b      	str	r3, [r7, #4]
 8011fc0:	e03d      	b.n	801203e <pass_route3+0x682>
		}else if(route[i] == 0x77){
 8011fc2:	4a29      	ldr	r2, [pc, #164]	; (8012068 <pass_route3+0x6ac>)
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	4413      	add	r3, r2
 8011fc8:	781b      	ldrb	r3, [r3, #0]
 8011fca:	2b77      	cmp	r3, #119	; 0x77
 8011fcc:	d137      	bne.n	801203e <pass_route3+0x682>
			if(s_flag){
 8011fce:	78fb      	ldrb	r3, [r7, #3]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d012      	beq.n	8011ffa <pass_route3+0x63e>
				pass[p-1]++;						//aスラローム前半直線追加
 8011fd4:	78bb      	ldrb	r3, [r7, #2]
 8011fd6:	3b01      	subs	r3, #1
 8011fd8:	4a21      	ldr	r2, [pc, #132]	; (8012060 <pass_route3+0x6a4>)
 8011fda:	56d2      	ldrsb	r2, [r2, r3]
 8011fdc:	b2d2      	uxtb	r2, r2
 8011fde:	3201      	adds	r2, #1
 8011fe0:	b2d2      	uxtb	r2, r2
 8011fe2:	b251      	sxtb	r1, r2
 8011fe4:	4a1e      	ldr	r2, [pc, #120]	; (8012060 <pass_route3+0x6a4>)
 8011fe6:	54d1      	strb	r1, [r2, r3]
				p--;
 8011fe8:	78bb      	ldrb	r3, [r7, #2]
 8011fea:	3b01      	subs	r3, #1
 8011fec:	70bb      	strb	r3, [r7, #2]
				s_flag = 0;
 8011fee:	2300      	movs	r3, #0
 8011ff0:	70fb      	strb	r3, [r7, #3]
				i++;
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	3301      	adds	r3, #1
 8011ff6:	607b      	str	r3, [r7, #4]
 8011ff8:	e021      	b.n	801203e <pass_route3+0x682>
			}else{
				s++;
 8011ffa:	787b      	ldrb	r3, [r7, #1]
 8011ffc:	3301      	adds	r3, #1
 8011ffe:	707b      	strb	r3, [r7, #1]
				pass[p] = s;						//aもし半直線1つだけの場合whileには入らない
 8012000:	78bb      	ldrb	r3, [r7, #2]
 8012002:	f997 1001 	ldrsb.w	r1, [r7, #1]
 8012006:	4a16      	ldr	r2, [pc, #88]	; (8012060 <pass_route3+0x6a4>)
 8012008:	54d1      	strb	r1, [r2, r3]
				while(route[i+1] == 0x77){
 801200a:	e00c      	b.n	8012026 <pass_route3+0x66a>
					s_flag = 1;
 801200c:	2301      	movs	r3, #1
 801200e:	70fb      	strb	r3, [r7, #3]
					pass[p] = s;					//a半直線2つ以上続く場合、最後半直線は大回り用に残す
 8012010:	78bb      	ldrb	r3, [r7, #2]
 8012012:	f997 1001 	ldrsb.w	r1, [r7, #1]
 8012016:	4a12      	ldr	r2, [pc, #72]	; (8012060 <pass_route3+0x6a4>)
 8012018:	54d1      	strb	r1, [r2, r3]
					i++;
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	3301      	adds	r3, #1
 801201e:	607b      	str	r3, [r7, #4]
					s++;
 8012020:	787b      	ldrb	r3, [r7, #1]
 8012022:	3301      	adds	r3, #1
 8012024:	707b      	strb	r3, [r7, #1]
				while(route[i+1] == 0x77){
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	3301      	adds	r3, #1
 801202a:	4a0f      	ldr	r2, [pc, #60]	; (8012068 <pass_route3+0x6ac>)
 801202c:	5cd3      	ldrb	r3, [r2, r3]
 801202e:	2b77      	cmp	r3, #119	; 0x77
 8012030:	d0ec      	beq.n	801200c <pass_route3+0x650>
				}
				if(!s_flag){
 8012032:	78fb      	ldrb	r3, [r7, #3]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d102      	bne.n	801203e <pass_route3+0x682>
					i++;
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	3301      	adds	r3, #1
 801203c:	607b      	str	r3, [r7, #4]
				}
			}
		}
		p++;
 801203e:	78bb      	ldrb	r3, [r7, #2]
 8012040:	3301      	adds	r3, #1
 8012042:	70bb      	strb	r3, [r7, #2]
	while(route[i-1] != 0xff){
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	3b01      	subs	r3, #1
 8012048:	4a07      	ldr	r2, [pc, #28]	; (8012068 <pass_route3+0x6ac>)
 801204a:	5cd3      	ldrb	r3, [r2, r3]
 801204c:	2bff      	cmp	r3, #255	; 0xff
 801204e:	f47f acd4 	bne.w	80119fa <pass_route3+0x3e>
	}
}
 8012052:	bf00      	nop
 8012054:	370c      	adds	r7, #12
 8012056:	46bd      	mov	sp, r7
 8012058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801205c:	4770      	bx	lr
 801205e:	bf00      	nop
 8012060:	20000350 	.word	0x20000350
 8012064:	20000fa4 	.word	0x20000fa4
 8012068:	20000c94 	.word	0x20000c94

0801206c <store_map_in_eeprom>:
//store_map_in_eeprom
// mapデータをeepromに格納する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void store_map_in_eeprom(void){
 801206c:	b580      	push	{r7, lr}
 801206e:	b082      	sub	sp, #8
 8012070:	af00      	add	r7, sp, #0
	printf("eprom func start \n");
 8012072:	4818      	ldr	r0, [pc, #96]	; (80120d4 <store_map_in_eeprom+0x68>)
 8012074:	f000 ff78 	bl	8012f68 <puts>
	eeprom_enable_write();
 8012078:	f7fa fdc0 	bl	800cbfc <eeprom_enable_write>
	printf("eprom enable_write fin \n");
 801207c:	4816      	ldr	r0, [pc, #88]	; (80120d8 <store_map_in_eeprom+0x6c>)
 801207e:	f000 ff73 	bl	8012f68 <puts>
	int i;
	for(i = 0; i < 16; i++){
 8012082:	2300      	movs	r3, #0
 8012084:	607b      	str	r3, [r7, #4]
 8012086:	e01b      	b.n	80120c0 <store_map_in_eeprom+0x54>
		int j;
		for(j = 0; j < 16; j++){
 8012088:	2300      	movs	r3, #0
 801208a:	603b      	str	r3, [r7, #0]
 801208c:	e012      	b.n	80120b4 <store_map_in_eeprom+0x48>
			eeprom_write_halfword(i*16 + j, (uint16_t) map[i][j]);
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	011a      	lsls	r2, r3, #4
 8012092:	683b      	ldr	r3, [r7, #0]
 8012094:	4413      	add	r3, r2
 8012096:	4618      	mov	r0, r3
 8012098:	4a10      	ldr	r2, [pc, #64]	; (80120dc <store_map_in_eeprom+0x70>)
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	011b      	lsls	r3, r3, #4
 801209e:	441a      	add	r2, r3
 80120a0:	683b      	ldr	r3, [r7, #0]
 80120a2:	4413      	add	r3, r2
 80120a4:	781b      	ldrb	r3, [r3, #0]
 80120a6:	b29b      	uxth	r3, r3
 80120a8:	4619      	mov	r1, r3
 80120aa:	f7fa fdd2 	bl	800cc52 <eeprom_write_halfword>
		for(j = 0; j < 16; j++){
 80120ae:	683b      	ldr	r3, [r7, #0]
 80120b0:	3301      	adds	r3, #1
 80120b2:	603b      	str	r3, [r7, #0]
 80120b4:	683b      	ldr	r3, [r7, #0]
 80120b6:	2b0f      	cmp	r3, #15
 80120b8:	dde9      	ble.n	801208e <store_map_in_eeprom+0x22>
	for(i = 0; i < 16; i++){
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	3301      	adds	r3, #1
 80120be:	607b      	str	r3, [r7, #4]
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	2b0f      	cmp	r3, #15
 80120c4:	dde0      	ble.n	8012088 <store_map_in_eeprom+0x1c>
		}
	}
	eeprom_disable_write();
 80120c6:	f7fa fdbd 	bl	800cc44 <eeprom_disable_write>
}
 80120ca:	bf00      	nop
 80120cc:	3708      	adds	r7, #8
 80120ce:	46bd      	mov	sp, r7
 80120d0:	bd80      	pop	{r7, pc}
 80120d2:	bf00      	nop
 80120d4:	08014508 	.word	0x08014508
 80120d8:	0801451c 	.word	0x0801451c
 80120dc:	200001ac 	.word	0x200001ac

080120e0 <load_map_from_eeprom>:
//load_map_in_eeprom
// mapデータをeepromから取得する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void load_map_from_eeprom(void){
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b082      	sub	sp, #8
 80120e4:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 16; i++){
 80120e6:	2300      	movs	r3, #0
 80120e8:	607b      	str	r3, [r7, #4]
 80120ea:	e01c      	b.n	8012126 <load_map_from_eeprom+0x46>
		int j;
		for(j = 0; j < 16; j++){
 80120ec:	2300      	movs	r3, #0
 80120ee:	603b      	str	r3, [r7, #0]
 80120f0:	e013      	b.n	801211a <load_map_from_eeprom+0x3a>
			map[i][j] = (uint8_t) eeprom_read_halfword(i*16 + j);
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	011a      	lsls	r2, r3, #4
 80120f6:	683b      	ldr	r3, [r7, #0]
 80120f8:	4413      	add	r3, r2
 80120fa:	4618      	mov	r0, r3
 80120fc:	f7fa fdc6 	bl	800cc8c <eeprom_read_halfword>
 8012100:	4603      	mov	r3, r0
 8012102:	b2d9      	uxtb	r1, r3
 8012104:	4a0b      	ldr	r2, [pc, #44]	; (8012134 <load_map_from_eeprom+0x54>)
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	011b      	lsls	r3, r3, #4
 801210a:	441a      	add	r2, r3
 801210c:	683b      	ldr	r3, [r7, #0]
 801210e:	4413      	add	r3, r2
 8012110:	460a      	mov	r2, r1
 8012112:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 16; j++){
 8012114:	683b      	ldr	r3, [r7, #0]
 8012116:	3301      	adds	r3, #1
 8012118:	603b      	str	r3, [r7, #0]
 801211a:	683b      	ldr	r3, [r7, #0]
 801211c:	2b0f      	cmp	r3, #15
 801211e:	dde8      	ble.n	80120f2 <load_map_from_eeprom+0x12>
	for(i = 0; i < 16; i++){
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	3301      	adds	r3, #1
 8012124:	607b      	str	r3, [r7, #4]
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	2b0f      	cmp	r3, #15
 801212a:	dddf      	ble.n	80120ec <load_map_from_eeprom+0xc>
		}
	}
}
 801212c:	bf00      	nop
 801212e:	3708      	adds	r7, #8
 8012130:	46bd      	mov	sp, r7
 8012132:	bd80      	pop	{r7, pc}
 8012134:	200001ac 	.word	0x200001ac

08012138 <sensor_init>:

#include "global.h"


void sensor_init(void){
 8012138:	b480      	push	{r7}
 801213a:	af00      	add	r7, sp, #0
	tp = 0;
 801213c:	4b0e      	ldr	r3, [pc, #56]	; (8012178 <sensor_init+0x40>)
 801213e:	2200      	movs	r2, #0
 8012140:	701a      	strb	r2, [r3, #0]
	ad_l = ad_r = ad_fr = ad_fl = 0;
 8012142:	4b0e      	ldr	r3, [pc, #56]	; (801217c <sensor_init+0x44>)
 8012144:	2200      	movs	r2, #0
 8012146:	601a      	str	r2, [r3, #0]
 8012148:	4b0c      	ldr	r3, [pc, #48]	; (801217c <sensor_init+0x44>)
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	4a0c      	ldr	r2, [pc, #48]	; (8012180 <sensor_init+0x48>)
 801214e:	6013      	str	r3, [r2, #0]
 8012150:	4b0b      	ldr	r3, [pc, #44]	; (8012180 <sensor_init+0x48>)
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	4a0b      	ldr	r2, [pc, #44]	; (8012184 <sensor_init+0x4c>)
 8012156:	6013      	str	r3, [r2, #0]
 8012158:	4b0a      	ldr	r3, [pc, #40]	; (8012184 <sensor_init+0x4c>)
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	4a0a      	ldr	r2, [pc, #40]	; (8012188 <sensor_init+0x50>)
 801215e:	6013      	str	r3, [r2, #0]
	base_l = base_r = 0;
 8012160:	4b0a      	ldr	r3, [pc, #40]	; (801218c <sensor_init+0x54>)
 8012162:	2200      	movs	r2, #0
 8012164:	801a      	strh	r2, [r3, #0]
 8012166:	4b09      	ldr	r3, [pc, #36]	; (801218c <sensor_init+0x54>)
 8012168:	881a      	ldrh	r2, [r3, #0]
 801216a:	4b09      	ldr	r3, [pc, #36]	; (8012190 <sensor_init+0x58>)
 801216c:	801a      	strh	r2, [r3, #0]
}
 801216e:	bf00      	nop
 8012170:	46bd      	mov	sp, r7
 8012172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012176:	4770      	bx	lr
 8012178:	20001320 	.word	0x20001320
 801217c:	20000d94 	.word	0x20000d94
 8012180:	20000c80 	.word	0x20000c80
 8012184:	20000fa0 	.word	0x20000fa0
 8012188:	20000b3c 	.word	0x20000b3c
 801218c:	200002c0 	.word	0x200002c0
 8012190:	2000034c 	.word	0x2000034c

08012194 <get_base>:


uint8_t get_base(){
 8012194:	b480      	push	{r7}
 8012196:	b083      	sub	sp, #12
 8012198:	af00      	add	r7, sp, #0
	uint8_t res = 1;									//for return
 801219a:	2301      	movs	r3, #1
 801219c:	71fb      	strb	r3, [r7, #7]

	base_l = ad_l;										//sensor value base L
 801219e:	4b08      	ldr	r3, [pc, #32]	; (80121c0 <get_base+0x2c>)
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	b29a      	uxth	r2, r3
 80121a4:	4b07      	ldr	r3, [pc, #28]	; (80121c4 <get_base+0x30>)
 80121a6:	801a      	strh	r2, [r3, #0]
	base_r = ad_r;										//sensor value base R
 80121a8:	4b07      	ldr	r3, [pc, #28]	; (80121c8 <get_base+0x34>)
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	b29a      	uxth	r2, r3
 80121ae:	4b07      	ldr	r3, [pc, #28]	; (80121cc <get_base+0x38>)
 80121b0:	801a      	strh	r2, [r3, #0]

	return res;											//
 80121b2:	79fb      	ldrb	r3, [r7, #7]
}
 80121b4:	4618      	mov	r0, r3
 80121b6:	370c      	adds	r7, #12
 80121b8:	46bd      	mov	sp, r7
 80121ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121be:	4770      	bx	lr
 80121c0:	20000b3c 	.word	0x20000b3c
 80121c4:	2000034c 	.word	0x2000034c
 80121c8:	20000fa0 	.word	0x20000fa0
 80121cc:	200002c0 	.word	0x200002c0

080121d0 <get_wall_info>:


void get_wall_info(){
 80121d0:	b480      	push	{r7}
 80121d2:	af00      	add	r7, sp, #0

	//----reset----
	wall_info = 0x00;									//wall
 80121d4:	4b16      	ldr	r3, [pc, #88]	; (8012230 <get_wall_info+0x60>)
 80121d6:	2200      	movs	r2, #0
 80121d8:	701a      	strb	r2, [r3, #0]
	//----look forward----
	if(ad_fr > WALL_BASE_FR || ad_fl > WALL_BASE_FL){
 80121da:	4b16      	ldr	r3, [pc, #88]	; (8012234 <get_wall_info+0x64>)
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	2b78      	cmp	r3, #120	; 0x78
 80121e0:	d803      	bhi.n	80121ea <get_wall_info+0x1a>
 80121e2:	4b15      	ldr	r3, [pc, #84]	; (8012238 <get_wall_info+0x68>)
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	2bc8      	cmp	r3, #200	; 0xc8
 80121e8:	d906      	bls.n	80121f8 <get_wall_info+0x28>
		wall_info |= 0x88;								//forward check
 80121ea:	4b11      	ldr	r3, [pc, #68]	; (8012230 <get_wall_info+0x60>)
 80121ec:	781b      	ldrb	r3, [r3, #0]
 80121ee:	f063 0377 	orn	r3, r3, #119	; 0x77
 80121f2:	b2da      	uxtb	r2, r3
 80121f4:	4b0e      	ldr	r3, [pc, #56]	; (8012230 <get_wall_info+0x60>)
 80121f6:	701a      	strb	r2, [r3, #0]
	}
	//----look right----
	if(ad_r > WALL_BASE_R){
 80121f8:	4b10      	ldr	r3, [pc, #64]	; (801223c <get_wall_info+0x6c>)
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	2b78      	cmp	r3, #120	; 0x78
 80121fe:	d906      	bls.n	801220e <get_wall_info+0x3e>
		wall_info |= 0x44;								//right check
 8012200:	4b0b      	ldr	r3, [pc, #44]	; (8012230 <get_wall_info+0x60>)
 8012202:	781b      	ldrb	r3, [r3, #0]
 8012204:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8012208:	b2da      	uxtb	r2, r3
 801220a:	4b09      	ldr	r3, [pc, #36]	; (8012230 <get_wall_info+0x60>)
 801220c:	701a      	strb	r2, [r3, #0]
	}
	//----look left----
	if(ad_l > WALL_BASE_L){
 801220e:	4b0c      	ldr	r3, [pc, #48]	; (8012240 <get_wall_info+0x70>)
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	2b8c      	cmp	r3, #140	; 0x8c
 8012214:	d906      	bls.n	8012224 <get_wall_info+0x54>
		wall_info |= 0x11;								//light check
 8012216:	4b06      	ldr	r3, [pc, #24]	; (8012230 <get_wall_info+0x60>)
 8012218:	781b      	ldrb	r3, [r3, #0]
 801221a:	f043 0311 	orr.w	r3, r3, #17
 801221e:	b2da      	uxtb	r2, r3
 8012220:	4b03      	ldr	r3, [pc, #12]	; (8012230 <get_wall_info+0x60>)
 8012222:	701a      	strb	r2, [r3, #0]
	}
}
 8012224:	bf00      	nop
 8012226:	46bd      	mov	sp, r7
 8012228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222c:	4770      	bx	lr
 801222e:	bf00      	nop
 8012230:	200002c8 	.word	0x200002c8
 8012234:	20000c80 	.word	0x20000c80
 8012238:	20000d94 	.word	0x20000d94
 801223c:	20000fa0 	.word	0x20000fa0
 8012240:	20000b3c 	.word	0x20000b3c

08012244 <led_write>:
//led_write
//aモード選択用LEDのON-OFF
//a引数：led1(0=>OFF, 1=>ON), led2(0=>OFF, 1=>ON), led3(0=>OFF, 1=>ON)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void led_write(uint8_t led3, uint8_t led2, uint8_t led1){
 8012244:	b580      	push	{r7, lr}
 8012246:	b082      	sub	sp, #8
 8012248:	af00      	add	r7, sp, #0
 801224a:	4603      	mov	r3, r0
 801224c:	71fb      	strb	r3, [r7, #7]
 801224e:	460b      	mov	r3, r1
 8012250:	71bb      	strb	r3, [r7, #6]
 8012252:	4613      	mov	r3, r2
 8012254:	717b      	strb	r3, [r7, #5]
	if(led1) HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8012256:	797b      	ldrb	r3, [r7, #5]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d005      	beq.n	8012268 <led_write+0x24>
 801225c:	2201      	movs	r2, #1
 801225e:	2180      	movs	r1, #128	; 0x80
 8012260:	4814      	ldr	r0, [pc, #80]	; (80122b4 <led_write+0x70>)
 8012262:	f7f0 f84f 	bl	8002304 <HAL_GPIO_WritePin>
 8012266:	e004      	b.n	8012272 <led_write+0x2e>
	else HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8012268:	2200      	movs	r2, #0
 801226a:	2180      	movs	r1, #128	; 0x80
 801226c:	4811      	ldr	r0, [pc, #68]	; (80122b4 <led_write+0x70>)
 801226e:	f7f0 f849 	bl	8002304 <HAL_GPIO_WritePin>

	if(led2) HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8012272:	79bb      	ldrb	r3, [r7, #6]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d005      	beq.n	8012284 <led_write+0x40>
 8012278:	2201      	movs	r2, #1
 801227a:	2140      	movs	r1, #64	; 0x40
 801227c:	480d      	ldr	r0, [pc, #52]	; (80122b4 <led_write+0x70>)
 801227e:	f7f0 f841 	bl	8002304 <HAL_GPIO_WritePin>
 8012282:	e004      	b.n	801228e <led_write+0x4a>
	else HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8012284:	2200      	movs	r2, #0
 8012286:	2140      	movs	r1, #64	; 0x40
 8012288:	480a      	ldr	r0, [pc, #40]	; (80122b4 <led_write+0x70>)
 801228a:	f7f0 f83b 	bl	8002304 <HAL_GPIO_WritePin>

	if(led3) HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 801228e:	79fb      	ldrb	r3, [r7, #7]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d005      	beq.n	80122a0 <led_write+0x5c>
 8012294:	2201      	movs	r2, #1
 8012296:	2120      	movs	r1, #32
 8012298:	4806      	ldr	r0, [pc, #24]	; (80122b4 <led_write+0x70>)
 801229a:	f7f0 f833 	bl	8002304 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
}
 801229e:	e004      	b.n	80122aa <led_write+0x66>
	else HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80122a0:	2200      	movs	r2, #0
 80122a2:	2120      	movs	r1, #32
 80122a4:	4803      	ldr	r0, [pc, #12]	; (80122b4 <led_write+0x70>)
 80122a6:	f7f0 f82d 	bl	8002304 <HAL_GPIO_WritePin>
}
 80122aa:	bf00      	nop
 80122ac:	3708      	adds	r7, #8
 80122ae:	46bd      	mov	sp, r7
 80122b0:	bd80      	pop	{r7, pc}
 80122b2:	bf00      	nop
 80122b4:	40020000 	.word	0x40020000

080122b8 <full_led_write1>:
//full_led_write1
//a頭部フルカラーLEDの色選択
//a引数：fulled(0=>OFF, 1=>a赤, 2=>緑, 3=>青, 4=>青緑, 5=>紫, 6=>黄, 7=>白)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void full_led_write1(uint8_t fulled){
 80122b8:	b580      	push	{r7, lr}
 80122ba:	b082      	sub	sp, #8
 80122bc:	af00      	add	r7, sp, #0
 80122be:	4603      	mov	r3, r0
 80122c0:	71fb      	strb	r3, [r7, #7]
	if(fulled == 0){
 80122c2:	79fb      	ldrb	r3, [r7, #7]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d10f      	bne.n	80122e8 <full_led_write1+0x30>
	    HAL_GPIO_WritePin(FLED1_RED_GPIO_Port, FLED1_RED_Pin, GPIO_PIN_SET);
 80122c8:	2201      	movs	r2, #1
 80122ca:	2140      	movs	r1, #64	; 0x40
 80122cc:	484a      	ldr	r0, [pc, #296]	; (80123f8 <full_led_write1+0x140>)
 80122ce:	f7f0 f819 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED1_GREEN_GPIO_Port, FLED1_GREEN_Pin, GPIO_PIN_SET);
 80122d2:	2201      	movs	r2, #1
 80122d4:	2180      	movs	r1, #128	; 0x80
 80122d6:	4848      	ldr	r0, [pc, #288]	; (80123f8 <full_led_write1+0x140>)
 80122d8:	f7f0 f814 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED1_BLUE_GPIO_Port, FLED1_BLUE_Pin, GPIO_PIN_SET);
 80122dc:	2201      	movs	r2, #1
 80122de:	2120      	movs	r1, #32
 80122e0:	4845      	ldr	r0, [pc, #276]	; (80123f8 <full_led_write1+0x140>)
 80122e2:	f7f0 f80f 	bl	8002304 <HAL_GPIO_WritePin>
	else if(fulled == 7){
	    HAL_GPIO_WritePin(FLED1_RED_GPIO_Port, FLED1_RED_Pin, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(FLED1_GREEN_GPIO_Port, FLED1_GREEN_Pin, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(FLED1_BLUE_GPIO_Port, FLED1_BLUE_Pin, GPIO_PIN_RESET);
	}
}
 80122e6:	e083      	b.n	80123f0 <full_led_write1+0x138>
	else if(fulled == 1){
 80122e8:	79fb      	ldrb	r3, [r7, #7]
 80122ea:	2b01      	cmp	r3, #1
 80122ec:	d10f      	bne.n	801230e <full_led_write1+0x56>
	    HAL_GPIO_WritePin(FLED1_RED_GPIO_Port, FLED1_RED_Pin, GPIO_PIN_RESET);
 80122ee:	2200      	movs	r2, #0
 80122f0:	2140      	movs	r1, #64	; 0x40
 80122f2:	4841      	ldr	r0, [pc, #260]	; (80123f8 <full_led_write1+0x140>)
 80122f4:	f7f0 f806 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED1_GREEN_GPIO_Port, FLED1_GREEN_Pin, GPIO_PIN_SET);
 80122f8:	2201      	movs	r2, #1
 80122fa:	2180      	movs	r1, #128	; 0x80
 80122fc:	483e      	ldr	r0, [pc, #248]	; (80123f8 <full_led_write1+0x140>)
 80122fe:	f7f0 f801 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED1_BLUE_GPIO_Port, FLED1_BLUE_Pin, GPIO_PIN_SET);
 8012302:	2201      	movs	r2, #1
 8012304:	2120      	movs	r1, #32
 8012306:	483c      	ldr	r0, [pc, #240]	; (80123f8 <full_led_write1+0x140>)
 8012308:	f7ef fffc 	bl	8002304 <HAL_GPIO_WritePin>
}
 801230c:	e070      	b.n	80123f0 <full_led_write1+0x138>
	else if(fulled == 2){
 801230e:	79fb      	ldrb	r3, [r7, #7]
 8012310:	2b02      	cmp	r3, #2
 8012312:	d10f      	bne.n	8012334 <full_led_write1+0x7c>
	    HAL_GPIO_WritePin(FLED1_RED_GPIO_Port, FLED1_RED_Pin, GPIO_PIN_SET);
 8012314:	2201      	movs	r2, #1
 8012316:	2140      	movs	r1, #64	; 0x40
 8012318:	4837      	ldr	r0, [pc, #220]	; (80123f8 <full_led_write1+0x140>)
 801231a:	f7ef fff3 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED1_GREEN_GPIO_Port, FLED1_GREEN_Pin, GPIO_PIN_RESET);
 801231e:	2200      	movs	r2, #0
 8012320:	2180      	movs	r1, #128	; 0x80
 8012322:	4835      	ldr	r0, [pc, #212]	; (80123f8 <full_led_write1+0x140>)
 8012324:	f7ef ffee 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED1_BLUE_GPIO_Port, FLED1_BLUE_Pin, GPIO_PIN_SET);
 8012328:	2201      	movs	r2, #1
 801232a:	2120      	movs	r1, #32
 801232c:	4832      	ldr	r0, [pc, #200]	; (80123f8 <full_led_write1+0x140>)
 801232e:	f7ef ffe9 	bl	8002304 <HAL_GPIO_WritePin>
}
 8012332:	e05d      	b.n	80123f0 <full_led_write1+0x138>
	else if(fulled == 3){
 8012334:	79fb      	ldrb	r3, [r7, #7]
 8012336:	2b03      	cmp	r3, #3
 8012338:	d10f      	bne.n	801235a <full_led_write1+0xa2>
	    HAL_GPIO_WritePin(FLED1_RED_GPIO_Port, FLED1_RED_Pin, GPIO_PIN_SET);
 801233a:	2201      	movs	r2, #1
 801233c:	2140      	movs	r1, #64	; 0x40
 801233e:	482e      	ldr	r0, [pc, #184]	; (80123f8 <full_led_write1+0x140>)
 8012340:	f7ef ffe0 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED1_GREEN_GPIO_Port, FLED1_GREEN_Pin, GPIO_PIN_SET);
 8012344:	2201      	movs	r2, #1
 8012346:	2180      	movs	r1, #128	; 0x80
 8012348:	482b      	ldr	r0, [pc, #172]	; (80123f8 <full_led_write1+0x140>)
 801234a:	f7ef ffdb 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED1_BLUE_GPIO_Port, FLED1_BLUE_Pin, GPIO_PIN_RESET);
 801234e:	2200      	movs	r2, #0
 8012350:	2120      	movs	r1, #32
 8012352:	4829      	ldr	r0, [pc, #164]	; (80123f8 <full_led_write1+0x140>)
 8012354:	f7ef ffd6 	bl	8002304 <HAL_GPIO_WritePin>
}
 8012358:	e04a      	b.n	80123f0 <full_led_write1+0x138>
	else if(fulled == 4){
 801235a:	79fb      	ldrb	r3, [r7, #7]
 801235c:	2b04      	cmp	r3, #4
 801235e:	d10f      	bne.n	8012380 <full_led_write1+0xc8>
	    HAL_GPIO_WritePin(FLED1_RED_GPIO_Port, FLED1_RED_Pin, GPIO_PIN_SET);
 8012360:	2201      	movs	r2, #1
 8012362:	2140      	movs	r1, #64	; 0x40
 8012364:	4824      	ldr	r0, [pc, #144]	; (80123f8 <full_led_write1+0x140>)
 8012366:	f7ef ffcd 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED1_GREEN_GPIO_Port, FLED1_GREEN_Pin, GPIO_PIN_RESET);
 801236a:	2200      	movs	r2, #0
 801236c:	2180      	movs	r1, #128	; 0x80
 801236e:	4822      	ldr	r0, [pc, #136]	; (80123f8 <full_led_write1+0x140>)
 8012370:	f7ef ffc8 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED1_BLUE_GPIO_Port, FLED1_BLUE_Pin, GPIO_PIN_RESET);
 8012374:	2200      	movs	r2, #0
 8012376:	2120      	movs	r1, #32
 8012378:	481f      	ldr	r0, [pc, #124]	; (80123f8 <full_led_write1+0x140>)
 801237a:	f7ef ffc3 	bl	8002304 <HAL_GPIO_WritePin>
}
 801237e:	e037      	b.n	80123f0 <full_led_write1+0x138>
	else if(fulled == 5){
 8012380:	79fb      	ldrb	r3, [r7, #7]
 8012382:	2b05      	cmp	r3, #5
 8012384:	d10f      	bne.n	80123a6 <full_led_write1+0xee>
	    HAL_GPIO_WritePin(FLED1_RED_GPIO_Port, FLED1_RED_Pin, GPIO_PIN_RESET);
 8012386:	2200      	movs	r2, #0
 8012388:	2140      	movs	r1, #64	; 0x40
 801238a:	481b      	ldr	r0, [pc, #108]	; (80123f8 <full_led_write1+0x140>)
 801238c:	f7ef ffba 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED1_GREEN_GPIO_Port, FLED1_GREEN_Pin, GPIO_PIN_SET);
 8012390:	2201      	movs	r2, #1
 8012392:	2180      	movs	r1, #128	; 0x80
 8012394:	4818      	ldr	r0, [pc, #96]	; (80123f8 <full_led_write1+0x140>)
 8012396:	f7ef ffb5 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED1_BLUE_GPIO_Port, FLED1_BLUE_Pin, GPIO_PIN_RESET);
 801239a:	2200      	movs	r2, #0
 801239c:	2120      	movs	r1, #32
 801239e:	4816      	ldr	r0, [pc, #88]	; (80123f8 <full_led_write1+0x140>)
 80123a0:	f7ef ffb0 	bl	8002304 <HAL_GPIO_WritePin>
}
 80123a4:	e024      	b.n	80123f0 <full_led_write1+0x138>
	else if(fulled == 6){
 80123a6:	79fb      	ldrb	r3, [r7, #7]
 80123a8:	2b06      	cmp	r3, #6
 80123aa:	d10f      	bne.n	80123cc <full_led_write1+0x114>
	    HAL_GPIO_WritePin(FLED1_RED_GPIO_Port, FLED1_RED_Pin, GPIO_PIN_RESET);
 80123ac:	2200      	movs	r2, #0
 80123ae:	2140      	movs	r1, #64	; 0x40
 80123b0:	4811      	ldr	r0, [pc, #68]	; (80123f8 <full_led_write1+0x140>)
 80123b2:	f7ef ffa7 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED1_GREEN_GPIO_Port, FLED1_GREEN_Pin, GPIO_PIN_RESET);
 80123b6:	2200      	movs	r2, #0
 80123b8:	2180      	movs	r1, #128	; 0x80
 80123ba:	480f      	ldr	r0, [pc, #60]	; (80123f8 <full_led_write1+0x140>)
 80123bc:	f7ef ffa2 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED1_BLUE_GPIO_Port, FLED1_BLUE_Pin, GPIO_PIN_SET);
 80123c0:	2201      	movs	r2, #1
 80123c2:	2120      	movs	r1, #32
 80123c4:	480c      	ldr	r0, [pc, #48]	; (80123f8 <full_led_write1+0x140>)
 80123c6:	f7ef ff9d 	bl	8002304 <HAL_GPIO_WritePin>
}
 80123ca:	e011      	b.n	80123f0 <full_led_write1+0x138>
	else if(fulled == 7){
 80123cc:	79fb      	ldrb	r3, [r7, #7]
 80123ce:	2b07      	cmp	r3, #7
 80123d0:	d10e      	bne.n	80123f0 <full_led_write1+0x138>
	    HAL_GPIO_WritePin(FLED1_RED_GPIO_Port, FLED1_RED_Pin, GPIO_PIN_RESET);
 80123d2:	2200      	movs	r2, #0
 80123d4:	2140      	movs	r1, #64	; 0x40
 80123d6:	4808      	ldr	r0, [pc, #32]	; (80123f8 <full_led_write1+0x140>)
 80123d8:	f7ef ff94 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED1_GREEN_GPIO_Port, FLED1_GREEN_Pin, GPIO_PIN_RESET);
 80123dc:	2200      	movs	r2, #0
 80123de:	2180      	movs	r1, #128	; 0x80
 80123e0:	4805      	ldr	r0, [pc, #20]	; (80123f8 <full_led_write1+0x140>)
 80123e2:	f7ef ff8f 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FLED1_BLUE_GPIO_Port, FLED1_BLUE_Pin, GPIO_PIN_RESET);
 80123e6:	2200      	movs	r2, #0
 80123e8:	2120      	movs	r1, #32
 80123ea:	4803      	ldr	r0, [pc, #12]	; (80123f8 <full_led_write1+0x140>)
 80123ec:	f7ef ff8a 	bl	8002304 <HAL_GPIO_WritePin>
}
 80123f0:	bf00      	nop
 80123f2:	3708      	adds	r7, #8
 80123f4:	46bd      	mov	sp, r7
 80123f6:	bd80      	pop	{r7, pc}
 80123f8:	40020400 	.word	0x40020400

080123fc <sensor_test>:
//sensor_test
//a壁センサーとジャイロセンサーの値確認
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sensor_test(){
 80123fc:	b580      	push	{r7, lr}
 80123fe:	b08c      	sub	sp, #48	; 0x30
 8012400:	af02      	add	r7, sp, #8

	int mode = 0;
 8012402:	2300      	movs	r3, #0
 8012404:	627b      	str	r3, [r7, #36]	; 0x24
	printf("Mode : %d\n", mode);
 8012406:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012408:	4881      	ldr	r0, [pc, #516]	; (8012610 <sensor_test+0x214>)
 801240a:	f000 fd39 	bl	8012e80 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 801240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012410:	b2db      	uxtb	r3, r3
 8012412:	f003 0301 	and.w	r3, r3, #1
 8012416:	b2d8      	uxtb	r0, r3
 8012418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801241a:	b2db      	uxtb	r3, r3
 801241c:	f003 0302 	and.w	r3, r3, #2
 8012420:	b2d9      	uxtb	r1, r3
 8012422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012424:	b2db      	uxtb	r3, r3
 8012426:	f003 0304 	and.w	r3, r3, #4
 801242a:	b2db      	uxtb	r3, r3
 801242c:	461a      	mov	r2, r3
 801242e:	f7ff ff09 	bl	8012244 <led_write>
		  if(dist_r >= 20){
 8012432:	4b78      	ldr	r3, [pc, #480]	; (8012614 <sensor_test+0x218>)
 8012434:	edd3 7a00 	vldr	s15, [r3]
 8012438:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 801243c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012444:	db0f      	blt.n	8012466 <sensor_test+0x6a>
			  mode++;
 8012446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012448:	3301      	adds	r3, #1
 801244a:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 801244c:	4b71      	ldr	r3, [pc, #452]	; (8012614 <sensor_test+0x218>)
 801244e:	f04f 0200 	mov.w	r2, #0
 8012452:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8012454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012456:	2b07      	cmp	r3, #7
 8012458:	dd01      	ble.n	801245e <sensor_test+0x62>
				  mode = 0;
 801245a:	2300      	movs	r3, #0
 801245c:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 801245e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012460:	486b      	ldr	r0, [pc, #428]	; (8012610 <sensor_test+0x214>)
 8012462:	f000 fd0d 	bl	8012e80 <iprintf>
		  }
		  if(dist_r <= -20){
 8012466:	4b6b      	ldr	r3, [pc, #428]	; (8012614 <sensor_test+0x218>)
 8012468:	edd3 7a00 	vldr	s15, [r3]
 801246c:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8012470:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012478:	d80f      	bhi.n	801249a <sensor_test+0x9e>
			  mode--;
 801247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801247c:	3b01      	subs	r3, #1
 801247e:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 8012480:	4b64      	ldr	r3, [pc, #400]	; (8012614 <sensor_test+0x218>)
 8012482:	f04f 0200 	mov.w	r2, #0
 8012486:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8012488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801248a:	2b00      	cmp	r3, #0
 801248c:	da01      	bge.n	8012492 <sensor_test+0x96>
				  mode = 7;
 801248e:	2307      	movs	r3, #7
 8012490:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 8012492:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012494:	485e      	ldr	r0, [pc, #376]	; (8012610 <sensor_test+0x214>)
 8012496:	f000 fcf3 	bl	8012e80 <iprintf>
		  }
		  if(dist_l <= -20){
 801249a:	4b5f      	ldr	r3, [pc, #380]	; (8012618 <sensor_test+0x21c>)
 801249c:	edd3 7a00 	vldr	s15, [r3]
 80124a0:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80124a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80124a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124ac:	f200 80af 	bhi.w	801260e <sensor_test+0x212>
			  dist_l = 0;
 80124b0:	4b59      	ldr	r3, [pc, #356]	; (8012618 <sensor_test+0x21c>)
 80124b2:	f04f 0200 	mov.w	r2, #0
 80124b6:	601a      	str	r2, [r3, #0]
			  drive_ready();
 80124b8:	f7f2 fbd8 	bl	8004c6c <drive_ready>

			  switch(mode){
 80124bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124be:	2b07      	cmp	r3, #7
 80124c0:	f200 80a1 	bhi.w	8012606 <sensor_test+0x20a>
 80124c4:	a201      	add	r2, pc, #4	; (adr r2, 80124cc <sensor_test+0xd0>)
 80124c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124ca:	bf00      	nop
 80124cc:	080124ed 	.word	0x080124ed
 80124d0:	080124f3 	.word	0x080124f3
 80124d4:	08012545 	.word	0x08012545
 80124d8:	08012607 	.word	0x08012607
 80124dc:	08012607 	.word	0x08012607
 80124e0:	08012607 	.word	0x08012607
 80124e4:	08012607 	.word	0x08012607
 80124e8:	08012607 	.word	0x08012607
				case 0:
					get_base();
 80124ec:	f7ff fe52 	bl	8012194 <get_base>
					break;
 80124f0:	e089      	b.n	8012606 <sensor_test+0x20a>
				case 1:
					  //----Wall sensor check----
					  printf("Wall Sensor Check.\n");
 80124f2:	484a      	ldr	r0, [pc, #296]	; (801261c <sensor_test+0x220>)
 80124f4:	f000 fd38 	bl	8012f68 <puts>
					  while(1){
						  get_wall_info();
 80124f8:	f7ff fe6a 	bl	80121d0 <get_wall_info>
						  led_write(wall_info & 0x11, wall_info & 0x88, wall_info & 0x44);
 80124fc:	4b48      	ldr	r3, [pc, #288]	; (8012620 <sensor_test+0x224>)
 80124fe:	781b      	ldrb	r3, [r3, #0]
 8012500:	f003 0311 	and.w	r3, r3, #17
 8012504:	b2d8      	uxtb	r0, r3
 8012506:	4b46      	ldr	r3, [pc, #280]	; (8012620 <sensor_test+0x224>)
 8012508:	781b      	ldrb	r3, [r3, #0]
 801250a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801250e:	b2d9      	uxtb	r1, r3
 8012510:	4b43      	ldr	r3, [pc, #268]	; (8012620 <sensor_test+0x224>)
 8012512:	781b      	ldrb	r3, [r3, #0]
 8012514:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012518:	b2db      	uxtb	r3, r3
 801251a:	461a      	mov	r2, r3
 801251c:	f7ff fe92 	bl	8012244 <led_write>
						  printf("ad_l : %d, ad_fl : %d, ad_fr : %d, ad_r : %d\n", ad_l, ad_fl, ad_fr, ad_r);
 8012520:	4b40      	ldr	r3, [pc, #256]	; (8012624 <sensor_test+0x228>)
 8012522:	6819      	ldr	r1, [r3, #0]
 8012524:	4b40      	ldr	r3, [pc, #256]	; (8012628 <sensor_test+0x22c>)
 8012526:	681a      	ldr	r2, [r3, #0]
 8012528:	4b40      	ldr	r3, [pc, #256]	; (801262c <sensor_test+0x230>)
 801252a:	6818      	ldr	r0, [r3, #0]
 801252c:	4b40      	ldr	r3, [pc, #256]	; (8012630 <sensor_test+0x234>)
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	9300      	str	r3, [sp, #0]
 8012532:	4603      	mov	r3, r0
 8012534:	483f      	ldr	r0, [pc, #252]	; (8012634 <sensor_test+0x238>)
 8012536:	f000 fca3 	bl	8012e80 <iprintf>
						  HAL_Delay(333);
 801253a:	f240 104d 	movw	r0, #333	; 0x14d
 801253e:	f7ee fd6d 	bl	800101c <HAL_Delay>
						  get_wall_info();
 8012542:	e7d9      	b.n	80124f8 <sensor_test+0xfc>
						}
					break;
				case 2:
					//----Gyro sensor check----
					printf("Gyro Sensor Check.\n");
 8012544:	483c      	ldr	r0, [pc, #240]	; (8012638 <sensor_test+0x23c>)
 8012546:	f000 fd0f 	bl	8012f68 <puts>
					int accel_x, accel_y, accel_z;
					int gyro_x, gyro_y, gyro_z;
					int deg_x, deg_y, deg_z;
					  while(1){
						  accel_x = accel_read_x();
 801254a:	f7fa fc47 	bl	800cddc <accel_read_x>
 801254e:	eef0 7a40 	vmov.f32	s15, s0
 8012552:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012556:	ee17 3a90 	vmov	r3, s15
 801255a:	623b      	str	r3, [r7, #32]
						  accel_y = accel_read_y();
 801255c:	f7fa fc64 	bl	800ce28 <accel_read_y>
 8012560:	eef0 7a40 	vmov.f32	s15, s0
 8012564:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012568:	ee17 3a90 	vmov	r3, s15
 801256c:	61fb      	str	r3, [r7, #28]
						  accel_z = accel_read_z();
 801256e:	f7fa fc81 	bl	800ce74 <accel_read_z>
 8012572:	eef0 7a40 	vmov.f32	s15, s0
 8012576:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801257a:	ee17 3a90 	vmov	r3, s15
 801257e:	61bb      	str	r3, [r7, #24]
						  gyro_x = gyro_read_x();
 8012580:	f7fa fca2 	bl	800cec8 <gyro_read_x>
 8012584:	eef0 7a40 	vmov.f32	s15, s0
 8012588:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801258c:	ee17 3a90 	vmov	r3, s15
 8012590:	617b      	str	r3, [r7, #20]
						  gyro_y = gyro_read_y();
 8012592:	f7fa fcd5 	bl	800cf40 <gyro_read_y>
 8012596:	eef0 7a40 	vmov.f32	s15, s0
 801259a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801259e:	ee17 3a90 	vmov	r3, s15
 80125a2:	613b      	str	r3, [r7, #16]
						  gyro_z = gyro_read_z();
 80125a4:	f7fa fd08 	bl	800cfb8 <gyro_read_z>
 80125a8:	eef0 7a40 	vmov.f32	s15, s0
 80125ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80125b0:	ee17 3a90 	vmov	r3, s15
 80125b4:	60fb      	str	r3, [r7, #12]
						  deg_x = degree_x;
 80125b6:	4b21      	ldr	r3, [pc, #132]	; (801263c <sensor_test+0x240>)
 80125b8:	edd3 7a00 	vldr	s15, [r3]
 80125bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80125c0:	ee17 3a90 	vmov	r3, s15
 80125c4:	60bb      	str	r3, [r7, #8]
						  deg_y = degree_y;
 80125c6:	4b1e      	ldr	r3, [pc, #120]	; (8012640 <sensor_test+0x244>)
 80125c8:	edd3 7a00 	vldr	s15, [r3]
 80125cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80125d0:	ee17 3a90 	vmov	r3, s15
 80125d4:	607b      	str	r3, [r7, #4]
						  deg_z = degree_z;
 80125d6:	4b1b      	ldr	r3, [pc, #108]	; (8012644 <sensor_test+0x248>)
 80125d8:	edd3 7a00 	vldr	s15, [r3]
 80125dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80125e0:	ee17 3a90 	vmov	r3, s15
 80125e4:	603b      	str	r3, [r7, #0]

						  //printf("Accel x: %3d, y: %3d, z: %3d\n", accel_x, accel_y, accel_z);
						  printf("Gyro  x: %3d, y: %3d, z: %3d\n", gyro_x, gyro_y, gyro_z);
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	693a      	ldr	r2, [r7, #16]
 80125ea:	6979      	ldr	r1, [r7, #20]
 80125ec:	4816      	ldr	r0, [pc, #88]	; (8012648 <sensor_test+0x24c>)
 80125ee:	f000 fc47 	bl	8012e80 <iprintf>
						  printf("Deg   x: %3d, y: %3d, z: %3d\n", deg_x, deg_y, deg_z);
 80125f2:	683b      	ldr	r3, [r7, #0]
 80125f4:	687a      	ldr	r2, [r7, #4]
 80125f6:	68b9      	ldr	r1, [r7, #8]
 80125f8:	4814      	ldr	r0, [pc, #80]	; (801264c <sensor_test+0x250>)
 80125fa:	f000 fc41 	bl	8012e80 <iprintf>
						  HAL_Delay(111);
 80125fe:	206f      	movs	r0, #111	; 0x6f
 8012600:	f7ee fd0c 	bl	800101c <HAL_Delay>
						  accel_x = accel_read_x();
 8012604:	e7a1      	b.n	801254a <sensor_test+0x14e>
				case 6:
					break;
				case 7:
					break;
			  }
			  dist_l = 0;
 8012606:	4b04      	ldr	r3, [pc, #16]	; (8012618 <sensor_test+0x21c>)
 8012608:	f04f 0200 	mov.w	r2, #0
 801260c:	601a      	str	r2, [r3, #0]
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 801260e:	e6fe      	b.n	801240e <sensor_test+0x12>
 8012610:	08014534 	.word	0x08014534
 8012614:	20000b2c 	.word	0x20000b2c
 8012618:	20001644 	.word	0x20001644
 801261c:	08014540 	.word	0x08014540
 8012620:	200002c8 	.word	0x200002c8
 8012624:	20000b3c 	.word	0x20000b3c
 8012628:	20000d94 	.word	0x20000d94
 801262c:	20000c80 	.word	0x20000c80
 8012630:	20000fa0 	.word	0x20000fa0
 8012634:	08014554 	.word	0x08014554
 8012638:	08014584 	.word	0x08014584
 801263c:	20000450 	.word	0x20000450
 8012640:	20000ff0 	.word	0x20000ff0
 8012644:	20000b9c 	.word	0x20000b9c
 8012648:	08014598 	.word	0x08014598
 801264c:	080145b8 	.word	0x080145b8

08012650 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8012650:	b480      	push	{r7}
 8012652:	b083      	sub	sp, #12
 8012654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012656:	2300      	movs	r3, #0
 8012658:	607b      	str	r3, [r7, #4]
 801265a:	4b10      	ldr	r3, [pc, #64]	; (801269c <HAL_MspInit+0x4c>)
 801265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801265e:	4a0f      	ldr	r2, [pc, #60]	; (801269c <HAL_MspInit+0x4c>)
 8012660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012664:	6453      	str	r3, [r2, #68]	; 0x44
 8012666:	4b0d      	ldr	r3, [pc, #52]	; (801269c <HAL_MspInit+0x4c>)
 8012668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801266a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801266e:	607b      	str	r3, [r7, #4]
 8012670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8012672:	2300      	movs	r3, #0
 8012674:	603b      	str	r3, [r7, #0]
 8012676:	4b09      	ldr	r3, [pc, #36]	; (801269c <HAL_MspInit+0x4c>)
 8012678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801267a:	4a08      	ldr	r2, [pc, #32]	; (801269c <HAL_MspInit+0x4c>)
 801267c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012680:	6413      	str	r3, [r2, #64]	; 0x40
 8012682:	4b06      	ldr	r3, [pc, #24]	; (801269c <HAL_MspInit+0x4c>)
 8012684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801268a:	603b      	str	r3, [r7, #0]
 801268c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801268e:	bf00      	nop
 8012690:	370c      	adds	r7, #12
 8012692:	46bd      	mov	sp, r7
 8012694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012698:	4770      	bx	lr
 801269a:	bf00      	nop
 801269c:	40023800 	.word	0x40023800

080126a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b08a      	sub	sp, #40	; 0x28
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80126a8:	f107 0314 	add.w	r3, r7, #20
 80126ac:	2200      	movs	r2, #0
 80126ae:	601a      	str	r2, [r3, #0]
 80126b0:	605a      	str	r2, [r3, #4]
 80126b2:	609a      	str	r2, [r3, #8]
 80126b4:	60da      	str	r2, [r3, #12]
 80126b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	4a17      	ldr	r2, [pc, #92]	; (801271c <HAL_ADC_MspInit+0x7c>)
 80126be:	4293      	cmp	r3, r2
 80126c0:	d127      	bne.n	8012712 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80126c2:	2300      	movs	r3, #0
 80126c4:	613b      	str	r3, [r7, #16]
 80126c6:	4b16      	ldr	r3, [pc, #88]	; (8012720 <HAL_ADC_MspInit+0x80>)
 80126c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80126ca:	4a15      	ldr	r2, [pc, #84]	; (8012720 <HAL_ADC_MspInit+0x80>)
 80126cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80126d0:	6453      	str	r3, [r2, #68]	; 0x44
 80126d2:	4b13      	ldr	r3, [pc, #76]	; (8012720 <HAL_ADC_MspInit+0x80>)
 80126d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80126d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80126da:	613b      	str	r3, [r7, #16]
 80126dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80126de:	2300      	movs	r3, #0
 80126e0:	60fb      	str	r3, [r7, #12]
 80126e2:	4b0f      	ldr	r3, [pc, #60]	; (8012720 <HAL_ADC_MspInit+0x80>)
 80126e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126e6:	4a0e      	ldr	r2, [pc, #56]	; (8012720 <HAL_ADC_MspInit+0x80>)
 80126e8:	f043 0304 	orr.w	r3, r3, #4
 80126ec:	6313      	str	r3, [r2, #48]	; 0x30
 80126ee:	4b0c      	ldr	r3, [pc, #48]	; (8012720 <HAL_ADC_MspInit+0x80>)
 80126f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126f2:	f003 0304 	and.w	r3, r3, #4
 80126f6:	60fb      	str	r3, [r7, #12]
 80126f8:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13 
    */
    GPIO_InitStruct.Pin = VAL_FR_Pin|VAL_R_Pin|VAL_L_Pin|VAL_FL_Pin;
 80126fa:	230f      	movs	r3, #15
 80126fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80126fe:	2303      	movs	r3, #3
 8012700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012702:	2300      	movs	r3, #0
 8012704:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012706:	f107 0314 	add.w	r3, r7, #20
 801270a:	4619      	mov	r1, r3
 801270c:	4805      	ldr	r0, [pc, #20]	; (8012724 <HAL_ADC_MspInit+0x84>)
 801270e:	f7ef fc47 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8012712:	bf00      	nop
 8012714:	3728      	adds	r7, #40	; 0x28
 8012716:	46bd      	mov	sp, r7
 8012718:	bd80      	pop	{r7, pc}
 801271a:	bf00      	nop
 801271c:	40012000 	.word	0x40012000
 8012720:	40023800 	.word	0x40023800
 8012724:	40020800 	.word	0x40020800

08012728 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8012728:	b580      	push	{r7, lr}
 801272a:	b08a      	sub	sp, #40	; 0x28
 801272c:	af00      	add	r7, sp, #0
 801272e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012730:	f107 0314 	add.w	r3, r7, #20
 8012734:	2200      	movs	r2, #0
 8012736:	601a      	str	r2, [r3, #0]
 8012738:	605a      	str	r2, [r3, #4]
 801273a:	609a      	str	r2, [r3, #8]
 801273c:	60da      	str	r2, [r3, #12]
 801273e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	4a19      	ldr	r2, [pc, #100]	; (80127ac <HAL_SPI_MspInit+0x84>)
 8012746:	4293      	cmp	r3, r2
 8012748:	d12c      	bne.n	80127a4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 801274a:	2300      	movs	r3, #0
 801274c:	613b      	str	r3, [r7, #16]
 801274e:	4b18      	ldr	r3, [pc, #96]	; (80127b0 <HAL_SPI_MspInit+0x88>)
 8012750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012752:	4a17      	ldr	r2, [pc, #92]	; (80127b0 <HAL_SPI_MspInit+0x88>)
 8012754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012758:	6413      	str	r3, [r2, #64]	; 0x40
 801275a:	4b15      	ldr	r3, [pc, #84]	; (80127b0 <HAL_SPI_MspInit+0x88>)
 801275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801275e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012762:	613b      	str	r3, [r7, #16]
 8012764:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012766:	2300      	movs	r3, #0
 8012768:	60fb      	str	r3, [r7, #12]
 801276a:	4b11      	ldr	r3, [pc, #68]	; (80127b0 <HAL_SPI_MspInit+0x88>)
 801276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801276e:	4a10      	ldr	r2, [pc, #64]	; (80127b0 <HAL_SPI_MspInit+0x88>)
 8012770:	f043 0304 	orr.w	r3, r3, #4
 8012774:	6313      	str	r3, [r2, #48]	; 0x30
 8012776:	4b0e      	ldr	r3, [pc, #56]	; (80127b0 <HAL_SPI_MspInit+0x88>)
 8012778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801277a:	f003 0304 	and.w	r3, r3, #4
 801277e:	60fb      	str	r3, [r7, #12]
 8012780:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8012782:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8012786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012788:	2302      	movs	r3, #2
 801278a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801278c:	2300      	movs	r3, #0
 801278e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012790:	2303      	movs	r3, #3
 8012792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8012794:	2306      	movs	r3, #6
 8012796:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012798:	f107 0314 	add.w	r3, r7, #20
 801279c:	4619      	mov	r1, r3
 801279e:	4805      	ldr	r0, [pc, #20]	; (80127b4 <HAL_SPI_MspInit+0x8c>)
 80127a0:	f7ef fbfe 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80127a4:	bf00      	nop
 80127a6:	3728      	adds	r7, #40	; 0x28
 80127a8:	46bd      	mov	sp, r7
 80127aa:	bd80      	pop	{r7, pc}
 80127ac:	40003c00 	.word	0x40003c00
 80127b0:	40023800 	.word	0x40023800
 80127b4:	40020800 	.word	0x40020800

080127b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80127b8:	b580      	push	{r7, lr}
 80127ba:	b086      	sub	sp, #24
 80127bc:	af00      	add	r7, sp, #0
 80127be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	4a2c      	ldr	r2, [pc, #176]	; (8012878 <HAL_TIM_Base_MspInit+0xc0>)
 80127c6:	4293      	cmp	r3, r2
 80127c8:	d10e      	bne.n	80127e8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80127ca:	2300      	movs	r3, #0
 80127cc:	617b      	str	r3, [r7, #20]
 80127ce:	4b2b      	ldr	r3, [pc, #172]	; (801287c <HAL_TIM_Base_MspInit+0xc4>)
 80127d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127d2:	4a2a      	ldr	r2, [pc, #168]	; (801287c <HAL_TIM_Base_MspInit+0xc4>)
 80127d4:	f043 0302 	orr.w	r3, r3, #2
 80127d8:	6413      	str	r3, [r2, #64]	; 0x40
 80127da:	4b28      	ldr	r3, [pc, #160]	; (801287c <HAL_TIM_Base_MspInit+0xc4>)
 80127dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127de:	f003 0302 	and.w	r3, r3, #2
 80127e2:	617b      	str	r3, [r7, #20]
 80127e4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80127e6:	e042      	b.n	801286e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM6)
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	4a24      	ldr	r2, [pc, #144]	; (8012880 <HAL_TIM_Base_MspInit+0xc8>)
 80127ee:	4293      	cmp	r3, r2
 80127f0:	d116      	bne.n	8012820 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80127f2:	2300      	movs	r3, #0
 80127f4:	613b      	str	r3, [r7, #16]
 80127f6:	4b21      	ldr	r3, [pc, #132]	; (801287c <HAL_TIM_Base_MspInit+0xc4>)
 80127f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127fa:	4a20      	ldr	r2, [pc, #128]	; (801287c <HAL_TIM_Base_MspInit+0xc4>)
 80127fc:	f043 0310 	orr.w	r3, r3, #16
 8012800:	6413      	str	r3, [r2, #64]	; 0x40
 8012802:	4b1e      	ldr	r3, [pc, #120]	; (801287c <HAL_TIM_Base_MspInit+0xc4>)
 8012804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012806:	f003 0310 	and.w	r3, r3, #16
 801280a:	613b      	str	r3, [r7, #16]
 801280c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 801280e:	2200      	movs	r2, #0
 8012810:	2100      	movs	r1, #0
 8012812:	2036      	movs	r0, #54	; 0x36
 8012814:	f7ef f8b9 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8012818:	2036      	movs	r0, #54	; 0x36
 801281a:	f7ef f8d2 	bl	80019c2 <HAL_NVIC_EnableIRQ>
}
 801281e:	e026      	b.n	801286e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM11)
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	4a17      	ldr	r2, [pc, #92]	; (8012884 <HAL_TIM_Base_MspInit+0xcc>)
 8012826:	4293      	cmp	r3, r2
 8012828:	d10e      	bne.n	8012848 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM11_CLK_ENABLE();
 801282a:	2300      	movs	r3, #0
 801282c:	60fb      	str	r3, [r7, #12]
 801282e:	4b13      	ldr	r3, [pc, #76]	; (801287c <HAL_TIM_Base_MspInit+0xc4>)
 8012830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012832:	4a12      	ldr	r2, [pc, #72]	; (801287c <HAL_TIM_Base_MspInit+0xc4>)
 8012834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012838:	6453      	str	r3, [r2, #68]	; 0x44
 801283a:	4b10      	ldr	r3, [pc, #64]	; (801287c <HAL_TIM_Base_MspInit+0xc4>)
 801283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801283e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012842:	60fb      	str	r3, [r7, #12]
 8012844:	68fb      	ldr	r3, [r7, #12]
}
 8012846:	e012      	b.n	801286e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM12)
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	4a0e      	ldr	r2, [pc, #56]	; (8012888 <HAL_TIM_Base_MspInit+0xd0>)
 801284e:	4293      	cmp	r3, r2
 8012850:	d10d      	bne.n	801286e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8012852:	2300      	movs	r3, #0
 8012854:	60bb      	str	r3, [r7, #8]
 8012856:	4b09      	ldr	r3, [pc, #36]	; (801287c <HAL_TIM_Base_MspInit+0xc4>)
 8012858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801285a:	4a08      	ldr	r2, [pc, #32]	; (801287c <HAL_TIM_Base_MspInit+0xc4>)
 801285c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012860:	6413      	str	r3, [r2, #64]	; 0x40
 8012862:	4b06      	ldr	r3, [pc, #24]	; (801287c <HAL_TIM_Base_MspInit+0xc4>)
 8012864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801286a:	60bb      	str	r3, [r7, #8]
 801286c:	68bb      	ldr	r3, [r7, #8]
}
 801286e:	bf00      	nop
 8012870:	3718      	adds	r7, #24
 8012872:	46bd      	mov	sp, r7
 8012874:	bd80      	pop	{r7, pc}
 8012876:	bf00      	nop
 8012878:	40000400 	.word	0x40000400
 801287c:	40023800 	.word	0x40023800
 8012880:	40001000 	.word	0x40001000
 8012884:	40014800 	.word	0x40014800
 8012888:	40001800 	.word	0x40001800

0801288c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 801288c:	b480      	push	{r7}
 801288e:	b085      	sub	sp, #20
 8012890:	af00      	add	r7, sp, #0
 8012892:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	4a0b      	ldr	r2, [pc, #44]	; (80128c8 <HAL_TIM_PWM_MspInit+0x3c>)
 801289a:	4293      	cmp	r3, r2
 801289c:	d10d      	bne.n	80128ba <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 801289e:	2300      	movs	r3, #0
 80128a0:	60fb      	str	r3, [r7, #12]
 80128a2:	4b0a      	ldr	r3, [pc, #40]	; (80128cc <HAL_TIM_PWM_MspInit+0x40>)
 80128a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128a6:	4a09      	ldr	r2, [pc, #36]	; (80128cc <HAL_TIM_PWM_MspInit+0x40>)
 80128a8:	f043 0304 	orr.w	r3, r3, #4
 80128ac:	6413      	str	r3, [r2, #64]	; 0x40
 80128ae:	4b07      	ldr	r3, [pc, #28]	; (80128cc <HAL_TIM_PWM_MspInit+0x40>)
 80128b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128b2:	f003 0304 	and.w	r3, r3, #4
 80128b6:	60fb      	str	r3, [r7, #12]
 80128b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80128ba:	bf00      	nop
 80128bc:	3714      	adds	r7, #20
 80128be:	46bd      	mov	sp, r7
 80128c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c4:	4770      	bx	lr
 80128c6:	bf00      	nop
 80128c8:	40000800 	.word	0x40000800
 80128cc:	40023800 	.word	0x40023800

080128d0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b08c      	sub	sp, #48	; 0x30
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80128d8:	f107 031c 	add.w	r3, r7, #28
 80128dc:	2200      	movs	r2, #0
 80128de:	601a      	str	r2, [r3, #0]
 80128e0:	605a      	str	r2, [r3, #4]
 80128e2:	609a      	str	r2, [r3, #8]
 80128e4:	60da      	str	r2, [r3, #12]
 80128e6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	4a32      	ldr	r2, [pc, #200]	; (80129b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 80128ee:	4293      	cmp	r3, r2
 80128f0:	d12c      	bne.n	801294c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80128f2:	2300      	movs	r3, #0
 80128f4:	61bb      	str	r3, [r7, #24]
 80128f6:	4b31      	ldr	r3, [pc, #196]	; (80129bc <HAL_TIM_Encoder_MspInit+0xec>)
 80128f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128fa:	4a30      	ldr	r2, [pc, #192]	; (80129bc <HAL_TIM_Encoder_MspInit+0xec>)
 80128fc:	f043 0308 	orr.w	r3, r3, #8
 8012900:	6413      	str	r3, [r2, #64]	; 0x40
 8012902:	4b2e      	ldr	r3, [pc, #184]	; (80129bc <HAL_TIM_Encoder_MspInit+0xec>)
 8012904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012906:	f003 0308 	and.w	r3, r3, #8
 801290a:	61bb      	str	r3, [r7, #24]
 801290c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801290e:	2300      	movs	r3, #0
 8012910:	617b      	str	r3, [r7, #20]
 8012912:	4b2a      	ldr	r3, [pc, #168]	; (80129bc <HAL_TIM_Encoder_MspInit+0xec>)
 8012914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012916:	4a29      	ldr	r2, [pc, #164]	; (80129bc <HAL_TIM_Encoder_MspInit+0xec>)
 8012918:	f043 0301 	orr.w	r3, r3, #1
 801291c:	6313      	str	r3, [r2, #48]	; 0x30
 801291e:	4b27      	ldr	r3, [pc, #156]	; (80129bc <HAL_TIM_Encoder_MspInit+0xec>)
 8012920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012922:	f003 0301 	and.w	r3, r3, #1
 8012926:	617b      	str	r3, [r7, #20]
 8012928:	697b      	ldr	r3, [r7, #20]
    /**TIM5 GPIO Configuration    
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2 
    */
    GPIO_InitStruct.Pin = EC_L_A_Pin|EC_L_B_Pin;
 801292a:	2303      	movs	r3, #3
 801292c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801292e:	2302      	movs	r3, #2
 8012930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012932:	2300      	movs	r3, #0
 8012934:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012936:	2300      	movs	r3, #0
 8012938:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 801293a:	2302      	movs	r3, #2
 801293c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801293e:	f107 031c 	add.w	r3, r7, #28
 8012942:	4619      	mov	r1, r3
 8012944:	481e      	ldr	r0, [pc, #120]	; (80129c0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8012946:	f7ef fb2b 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 801294a:	e030      	b.n	80129ae <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	4a1c      	ldr	r2, [pc, #112]	; (80129c4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8012952:	4293      	cmp	r3, r2
 8012954:	d12b      	bne.n	80129ae <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8012956:	2300      	movs	r3, #0
 8012958:	613b      	str	r3, [r7, #16]
 801295a:	4b18      	ldr	r3, [pc, #96]	; (80129bc <HAL_TIM_Encoder_MspInit+0xec>)
 801295c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801295e:	4a17      	ldr	r2, [pc, #92]	; (80129bc <HAL_TIM_Encoder_MspInit+0xec>)
 8012960:	f043 0302 	orr.w	r3, r3, #2
 8012964:	6453      	str	r3, [r2, #68]	; 0x44
 8012966:	4b15      	ldr	r3, [pc, #84]	; (80129bc <HAL_TIM_Encoder_MspInit+0xec>)
 8012968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801296a:	f003 0302 	and.w	r3, r3, #2
 801296e:	613b      	str	r3, [r7, #16]
 8012970:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012972:	2300      	movs	r3, #0
 8012974:	60fb      	str	r3, [r7, #12]
 8012976:	4b11      	ldr	r3, [pc, #68]	; (80129bc <HAL_TIM_Encoder_MspInit+0xec>)
 8012978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801297a:	4a10      	ldr	r2, [pc, #64]	; (80129bc <HAL_TIM_Encoder_MspInit+0xec>)
 801297c:	f043 0304 	orr.w	r3, r3, #4
 8012980:	6313      	str	r3, [r2, #48]	; 0x30
 8012982:	4b0e      	ldr	r3, [pc, #56]	; (80129bc <HAL_TIM_Encoder_MspInit+0xec>)
 8012984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012986:	f003 0304 	and.w	r3, r3, #4
 801298a:	60fb      	str	r3, [r7, #12]
 801298c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EC_R_A_Pin|EC_R_B_Pin;
 801298e:	23c0      	movs	r3, #192	; 0xc0
 8012990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012992:	2302      	movs	r3, #2
 8012994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012996:	2300      	movs	r3, #0
 8012998:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801299a:	2300      	movs	r3, #0
 801299c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 801299e:	2303      	movs	r3, #3
 80129a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80129a2:	f107 031c 	add.w	r3, r7, #28
 80129a6:	4619      	mov	r1, r3
 80129a8:	4807      	ldr	r0, [pc, #28]	; (80129c8 <HAL_TIM_Encoder_MspInit+0xf8>)
 80129aa:	f7ef faf9 	bl	8001fa0 <HAL_GPIO_Init>
}
 80129ae:	bf00      	nop
 80129b0:	3730      	adds	r7, #48	; 0x30
 80129b2:	46bd      	mov	sp, r7
 80129b4:	bd80      	pop	{r7, pc}
 80129b6:	bf00      	nop
 80129b8:	40000c00 	.word	0x40000c00
 80129bc:	40023800 	.word	0x40023800
 80129c0:	40020000 	.word	0x40020000
 80129c4:	40010400 	.word	0x40010400
 80129c8:	40020800 	.word	0x40020800

080129cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b08c      	sub	sp, #48	; 0x30
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80129d4:	f107 031c 	add.w	r3, r7, #28
 80129d8:	2200      	movs	r2, #0
 80129da:	601a      	str	r2, [r3, #0]
 80129dc:	605a      	str	r2, [r3, #4]
 80129de:	609a      	str	r2, [r3, #8]
 80129e0:	60da      	str	r2, [r3, #12]
 80129e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	4a49      	ldr	r2, [pc, #292]	; (8012b10 <HAL_TIM_MspPostInit+0x144>)
 80129ea:	4293      	cmp	r3, r2
 80129ec:	d11e      	bne.n	8012a2c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80129ee:	2300      	movs	r3, #0
 80129f0:	61bb      	str	r3, [r7, #24]
 80129f2:	4b48      	ldr	r3, [pc, #288]	; (8012b14 <HAL_TIM_MspPostInit+0x148>)
 80129f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129f6:	4a47      	ldr	r2, [pc, #284]	; (8012b14 <HAL_TIM_MspPostInit+0x148>)
 80129f8:	f043 0302 	orr.w	r3, r3, #2
 80129fc:	6313      	str	r3, [r2, #48]	; 0x30
 80129fe:	4b45      	ldr	r3, [pc, #276]	; (8012b14 <HAL_TIM_MspPostInit+0x148>)
 8012a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a02:	f003 0302 	and.w	r3, r3, #2
 8012a06:	61bb      	str	r3, [r7, #24]
 8012a08:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3 
    */
    GPIO_InitStruct.Pin = MOTOR_L_PWM_Pin;
 8012a0a:	2301      	movs	r3, #1
 8012a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012a0e:	2302      	movs	r3, #2
 8012a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012a12:	2300      	movs	r3, #0
 8012a14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012a16:	2300      	movs	r3, #0
 8012a18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8012a1a:	2302      	movs	r3, #2
 8012a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MOTOR_L_PWM_GPIO_Port, &GPIO_InitStruct);
 8012a1e:	f107 031c 	add.w	r3, r7, #28
 8012a22:	4619      	mov	r1, r3
 8012a24:	483c      	ldr	r0, [pc, #240]	; (8012b18 <HAL_TIM_MspPostInit+0x14c>)
 8012a26:	f7ef fabb 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8012a2a:	e06d      	b.n	8012b08 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM4)
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	4a3a      	ldr	r2, [pc, #232]	; (8012b1c <HAL_TIM_MspPostInit+0x150>)
 8012a32:	4293      	cmp	r3, r2
 8012a34:	d11f      	bne.n	8012a76 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012a36:	2300      	movs	r3, #0
 8012a38:	617b      	str	r3, [r7, #20]
 8012a3a:	4b36      	ldr	r3, [pc, #216]	; (8012b14 <HAL_TIM_MspPostInit+0x148>)
 8012a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a3e:	4a35      	ldr	r2, [pc, #212]	; (8012b14 <HAL_TIM_MspPostInit+0x148>)
 8012a40:	f043 0302 	orr.w	r3, r3, #2
 8012a44:	6313      	str	r3, [r2, #48]	; 0x30
 8012a46:	4b33      	ldr	r3, [pc, #204]	; (8012b14 <HAL_TIM_MspPostInit+0x148>)
 8012a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a4a:	f003 0302 	and.w	r3, r3, #2
 8012a4e:	617b      	str	r3, [r7, #20]
 8012a50:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BUZZER_PWM_Pin;
 8012a52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012a58:	2302      	movs	r3, #2
 8012a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012a60:	2300      	movs	r3, #0
 8012a62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8012a64:	2302      	movs	r3, #2
 8012a66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BUZZER_PWM_GPIO_Port, &GPIO_InitStruct);
 8012a68:	f107 031c 	add.w	r3, r7, #28
 8012a6c:	4619      	mov	r1, r3
 8012a6e:	482a      	ldr	r0, [pc, #168]	; (8012b18 <HAL_TIM_MspPostInit+0x14c>)
 8012a70:	f7ef fa96 	bl	8001fa0 <HAL_GPIO_Init>
}
 8012a74:	e048      	b.n	8012b08 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM11)
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	4a29      	ldr	r2, [pc, #164]	; (8012b20 <HAL_TIM_MspPostInit+0x154>)
 8012a7c:	4293      	cmp	r3, r2
 8012a7e:	d11f      	bne.n	8012ac0 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012a80:	2300      	movs	r3, #0
 8012a82:	613b      	str	r3, [r7, #16]
 8012a84:	4b23      	ldr	r3, [pc, #140]	; (8012b14 <HAL_TIM_MspPostInit+0x148>)
 8012a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a88:	4a22      	ldr	r2, [pc, #136]	; (8012b14 <HAL_TIM_MspPostInit+0x148>)
 8012a8a:	f043 0302 	orr.w	r3, r3, #2
 8012a8e:	6313      	str	r3, [r2, #48]	; 0x30
 8012a90:	4b20      	ldr	r3, [pc, #128]	; (8012b14 <HAL_TIM_MspPostInit+0x148>)
 8012a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a94:	f003 0302 	and.w	r3, r3, #2
 8012a98:	613b      	str	r3, [r7, #16]
 8012a9a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VACUUM_PWM_Pin;
 8012a9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012aa2:	2302      	movs	r3, #2
 8012aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012aaa:	2300      	movs	r3, #0
 8012aac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8012aae:	2303      	movs	r3, #3
 8012ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VACUUM_PWM_GPIO_Port, &GPIO_InitStruct);
 8012ab2:	f107 031c 	add.w	r3, r7, #28
 8012ab6:	4619      	mov	r1, r3
 8012ab8:	4817      	ldr	r0, [pc, #92]	; (8012b18 <HAL_TIM_MspPostInit+0x14c>)
 8012aba:	f7ef fa71 	bl	8001fa0 <HAL_GPIO_Init>
}
 8012abe:	e023      	b.n	8012b08 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM12)
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	4a17      	ldr	r2, [pc, #92]	; (8012b24 <HAL_TIM_MspPostInit+0x158>)
 8012ac6:	4293      	cmp	r3, r2
 8012ac8:	d11e      	bne.n	8012b08 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012aca:	2300      	movs	r3, #0
 8012acc:	60fb      	str	r3, [r7, #12]
 8012ace:	4b11      	ldr	r3, [pc, #68]	; (8012b14 <HAL_TIM_MspPostInit+0x148>)
 8012ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ad2:	4a10      	ldr	r2, [pc, #64]	; (8012b14 <HAL_TIM_MspPostInit+0x148>)
 8012ad4:	f043 0302 	orr.w	r3, r3, #2
 8012ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8012ada:	4b0e      	ldr	r3, [pc, #56]	; (8012b14 <HAL_TIM_MspPostInit+0x148>)
 8012adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ade:	f003 0302 	and.w	r3, r3, #2
 8012ae2:	60fb      	str	r3, [r7, #12]
 8012ae4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8012ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012aec:	2302      	movs	r3, #2
 8012aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012af0:	2300      	movs	r3, #0
 8012af2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012af4:	2300      	movs	r3, #0
 8012af6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8012af8:	2309      	movs	r3, #9
 8012afa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012afc:	f107 031c 	add.w	r3, r7, #28
 8012b00:	4619      	mov	r1, r3
 8012b02:	4805      	ldr	r0, [pc, #20]	; (8012b18 <HAL_TIM_MspPostInit+0x14c>)
 8012b04:	f7ef fa4c 	bl	8001fa0 <HAL_GPIO_Init>
}
 8012b08:	bf00      	nop
 8012b0a:	3730      	adds	r7, #48	; 0x30
 8012b0c:	46bd      	mov	sp, r7
 8012b0e:	bd80      	pop	{r7, pc}
 8012b10:	40000400 	.word	0x40000400
 8012b14:	40023800 	.word	0x40023800
 8012b18:	40020400 	.word	0x40020400
 8012b1c:	40000800 	.word	0x40000800
 8012b20:	40014800 	.word	0x40014800
 8012b24:	40001800 	.word	0x40001800

08012b28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b08a      	sub	sp, #40	; 0x28
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012b30:	f107 0314 	add.w	r3, r7, #20
 8012b34:	2200      	movs	r2, #0
 8012b36:	601a      	str	r2, [r3, #0]
 8012b38:	605a      	str	r2, [r3, #4]
 8012b3a:	609a      	str	r2, [r3, #8]
 8012b3c:	60da      	str	r2, [r3, #12]
 8012b3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	4a19      	ldr	r2, [pc, #100]	; (8012bac <HAL_UART_MspInit+0x84>)
 8012b46:	4293      	cmp	r3, r2
 8012b48:	d12c      	bne.n	8012ba4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	613b      	str	r3, [r7, #16]
 8012b4e:	4b18      	ldr	r3, [pc, #96]	; (8012bb0 <HAL_UART_MspInit+0x88>)
 8012b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b52:	4a17      	ldr	r2, [pc, #92]	; (8012bb0 <HAL_UART_MspInit+0x88>)
 8012b54:	f043 0310 	orr.w	r3, r3, #16
 8012b58:	6453      	str	r3, [r2, #68]	; 0x44
 8012b5a:	4b15      	ldr	r3, [pc, #84]	; (8012bb0 <HAL_UART_MspInit+0x88>)
 8012b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b5e:	f003 0310 	and.w	r3, r3, #16
 8012b62:	613b      	str	r3, [r7, #16]
 8012b64:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012b66:	2300      	movs	r3, #0
 8012b68:	60fb      	str	r3, [r7, #12]
 8012b6a:	4b11      	ldr	r3, [pc, #68]	; (8012bb0 <HAL_UART_MspInit+0x88>)
 8012b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b6e:	4a10      	ldr	r2, [pc, #64]	; (8012bb0 <HAL_UART_MspInit+0x88>)
 8012b70:	f043 0301 	orr.w	r3, r3, #1
 8012b74:	6313      	str	r3, [r2, #48]	; 0x30
 8012b76:	4b0e      	ldr	r3, [pc, #56]	; (8012bb0 <HAL_UART_MspInit+0x88>)
 8012b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b7a:	f003 0301 	and.w	r3, r3, #1
 8012b7e:	60fb      	str	r3, [r7, #12]
 8012b80:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8012b82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8012b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012b88:	2302      	movs	r3, #2
 8012b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8012b8c:	2301      	movs	r3, #1
 8012b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012b90:	2303      	movs	r3, #3
 8012b92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8012b94:	2307      	movs	r3, #7
 8012b96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012b98:	f107 0314 	add.w	r3, r7, #20
 8012b9c:	4619      	mov	r1, r3
 8012b9e:	4805      	ldr	r0, [pc, #20]	; (8012bb4 <HAL_UART_MspInit+0x8c>)
 8012ba0:	f7ef f9fe 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8012ba4:	bf00      	nop
 8012ba6:	3728      	adds	r7, #40	; 0x28
 8012ba8:	46bd      	mov	sp, r7
 8012baa:	bd80      	pop	{r7, pc}
 8012bac:	40011000 	.word	0x40011000
 8012bb0:	40023800 	.word	0x40023800
 8012bb4:	40020000 	.word	0x40020000

08012bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8012bb8:	b480      	push	{r7}
 8012bba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8012bbc:	bf00      	nop
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc4:	4770      	bx	lr

08012bc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8012bc6:	b480      	push	{r7}
 8012bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012bca:	e7fe      	b.n	8012bca <HardFault_Handler+0x4>

08012bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8012bcc:	b480      	push	{r7}
 8012bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8012bd0:	e7fe      	b.n	8012bd0 <MemManage_Handler+0x4>

08012bd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8012bd2:	b480      	push	{r7}
 8012bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8012bd6:	e7fe      	b.n	8012bd6 <BusFault_Handler+0x4>

08012bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8012bd8:	b480      	push	{r7}
 8012bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8012bdc:	e7fe      	b.n	8012bdc <UsageFault_Handler+0x4>

08012bde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8012bde:	b480      	push	{r7}
 8012be0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8012be2:	bf00      	nop
 8012be4:	46bd      	mov	sp, r7
 8012be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bea:	4770      	bx	lr

08012bec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8012bec:	b480      	push	{r7}
 8012bee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8012bf0:	bf00      	nop
 8012bf2:	46bd      	mov	sp, r7
 8012bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf8:	4770      	bx	lr

08012bfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8012bfa:	b480      	push	{r7}
 8012bfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8012bfe:	bf00      	nop
 8012c00:	46bd      	mov	sp, r7
 8012c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c06:	4770      	bx	lr

08012c08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8012c0c:	f7ee f9e6 	bl	8000fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8012c10:	bf00      	nop
 8012c12:	bd80      	pop	{r7, pc}

08012c14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8012c14:	b580      	push	{r7, lr}
 8012c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8012c18:	4802      	ldr	r0, [pc, #8]	; (8012c24 <TIM6_DAC_IRQHandler+0x10>)
 8012c1a:	f7f0 fec4 	bl	80039a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8012c1e:	bf00      	nop
 8012c20:	bd80      	pop	{r7, pc}
 8012c22:	bf00      	nop
 8012c24:	20000c34 	.word	0x20000c34

08012c28 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b086      	sub	sp, #24
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	60f8      	str	r0, [r7, #12]
 8012c30:	60b9      	str	r1, [r7, #8]
 8012c32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012c34:	2300      	movs	r3, #0
 8012c36:	617b      	str	r3, [r7, #20]
 8012c38:	e00a      	b.n	8012c50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8012c3a:	f3af 8000 	nop.w
 8012c3e:	4601      	mov	r1, r0
 8012c40:	68bb      	ldr	r3, [r7, #8]
 8012c42:	1c5a      	adds	r2, r3, #1
 8012c44:	60ba      	str	r2, [r7, #8]
 8012c46:	b2ca      	uxtb	r2, r1
 8012c48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012c4a:	697b      	ldr	r3, [r7, #20]
 8012c4c:	3301      	adds	r3, #1
 8012c4e:	617b      	str	r3, [r7, #20]
 8012c50:	697a      	ldr	r2, [r7, #20]
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	429a      	cmp	r2, r3
 8012c56:	dbf0      	blt.n	8012c3a <_read+0x12>
	}

return len;
 8012c58:	687b      	ldr	r3, [r7, #4]
}
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	3718      	adds	r7, #24
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	bd80      	pop	{r7, pc}

08012c62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8012c62:	b580      	push	{r7, lr}
 8012c64:	b086      	sub	sp, #24
 8012c66:	af00      	add	r7, sp, #0
 8012c68:	60f8      	str	r0, [r7, #12]
 8012c6a:	60b9      	str	r1, [r7, #8]
 8012c6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012c6e:	2300      	movs	r3, #0
 8012c70:	617b      	str	r3, [r7, #20]
 8012c72:	e009      	b.n	8012c88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8012c74:	68bb      	ldr	r3, [r7, #8]
 8012c76:	1c5a      	adds	r2, r3, #1
 8012c78:	60ba      	str	r2, [r7, #8]
 8012c7a:	781b      	ldrb	r3, [r3, #0]
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	f7fa f9d5 	bl	800d02c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012c82:	697b      	ldr	r3, [r7, #20]
 8012c84:	3301      	adds	r3, #1
 8012c86:	617b      	str	r3, [r7, #20]
 8012c88:	697a      	ldr	r2, [r7, #20]
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	429a      	cmp	r2, r3
 8012c8e:	dbf1      	blt.n	8012c74 <_write+0x12>
	}
	return len;
 8012c90:	687b      	ldr	r3, [r7, #4]
}
 8012c92:	4618      	mov	r0, r3
 8012c94:	3718      	adds	r7, #24
 8012c96:	46bd      	mov	sp, r7
 8012c98:	bd80      	pop	{r7, pc}

08012c9a <_close>:

int _close(int file)
{
 8012c9a:	b480      	push	{r7}
 8012c9c:	b083      	sub	sp, #12
 8012c9e:	af00      	add	r7, sp, #0
 8012ca0:	6078      	str	r0, [r7, #4]
	return -1;
 8012ca2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	370c      	adds	r7, #12
 8012caa:	46bd      	mov	sp, r7
 8012cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb0:	4770      	bx	lr

08012cb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8012cb2:	b480      	push	{r7}
 8012cb4:	b083      	sub	sp, #12
 8012cb6:	af00      	add	r7, sp, #0
 8012cb8:	6078      	str	r0, [r7, #4]
 8012cba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8012cbc:	683b      	ldr	r3, [r7, #0]
 8012cbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8012cc2:	605a      	str	r2, [r3, #4]
	return 0;
 8012cc4:	2300      	movs	r3, #0
}
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	370c      	adds	r7, #12
 8012cca:	46bd      	mov	sp, r7
 8012ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd0:	4770      	bx	lr

08012cd2 <_isatty>:

int _isatty(int file)
{
 8012cd2:	b480      	push	{r7}
 8012cd4:	b083      	sub	sp, #12
 8012cd6:	af00      	add	r7, sp, #0
 8012cd8:	6078      	str	r0, [r7, #4]
	return 1;
 8012cda:	2301      	movs	r3, #1
}
 8012cdc:	4618      	mov	r0, r3
 8012cde:	370c      	adds	r7, #12
 8012ce0:	46bd      	mov	sp, r7
 8012ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce6:	4770      	bx	lr

08012ce8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8012ce8:	b480      	push	{r7}
 8012cea:	b085      	sub	sp, #20
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	60f8      	str	r0, [r7, #12]
 8012cf0:	60b9      	str	r1, [r7, #8]
 8012cf2:	607a      	str	r2, [r7, #4]
	return 0;
 8012cf4:	2300      	movs	r3, #0
}
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	3714      	adds	r7, #20
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d00:	4770      	bx	lr
	...

08012d04 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8012d04:	b580      	push	{r7, lr}
 8012d06:	b084      	sub	sp, #16
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8012d0c:	4b11      	ldr	r3, [pc, #68]	; (8012d54 <_sbrk+0x50>)
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d102      	bne.n	8012d1a <_sbrk+0x16>
		heap_end = &end;
 8012d14:	4b0f      	ldr	r3, [pc, #60]	; (8012d54 <_sbrk+0x50>)
 8012d16:	4a10      	ldr	r2, [pc, #64]	; (8012d58 <_sbrk+0x54>)
 8012d18:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8012d1a:	4b0e      	ldr	r3, [pc, #56]	; (8012d54 <_sbrk+0x50>)
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8012d20:	4b0c      	ldr	r3, [pc, #48]	; (8012d54 <_sbrk+0x50>)
 8012d22:	681a      	ldr	r2, [r3, #0]
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	4413      	add	r3, r2
 8012d28:	466a      	mov	r2, sp
 8012d2a:	4293      	cmp	r3, r2
 8012d2c:	d907      	bls.n	8012d3e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8012d2e:	f000 f875 	bl	8012e1c <__errno>
 8012d32:	4602      	mov	r2, r0
 8012d34:	230c      	movs	r3, #12
 8012d36:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8012d38:	f04f 33ff 	mov.w	r3, #4294967295
 8012d3c:	e006      	b.n	8012d4c <_sbrk+0x48>
	}

	heap_end += incr;
 8012d3e:	4b05      	ldr	r3, [pc, #20]	; (8012d54 <_sbrk+0x50>)
 8012d40:	681a      	ldr	r2, [r3, #0]
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	4413      	add	r3, r2
 8012d46:	4a03      	ldr	r2, [pc, #12]	; (8012d54 <_sbrk+0x50>)
 8012d48:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8012d4a:	68fb      	ldr	r3, [r7, #12]
}
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	3710      	adds	r7, #16
 8012d50:	46bd      	mov	sp, r7
 8012d52:	bd80      	pop	{r7, pc}
 8012d54:	20000114 	.word	0x20000114
 8012d58:	20001660 	.word	0x20001660

08012d5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8012d5c:	b480      	push	{r7}
 8012d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8012d60:	4b16      	ldr	r3, [pc, #88]	; (8012dbc <SystemInit+0x60>)
 8012d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012d66:	4a15      	ldr	r2, [pc, #84]	; (8012dbc <SystemInit+0x60>)
 8012d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8012d70:	4b13      	ldr	r3, [pc, #76]	; (8012dc0 <SystemInit+0x64>)
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	4a12      	ldr	r2, [pc, #72]	; (8012dc0 <SystemInit+0x64>)
 8012d76:	f043 0301 	orr.w	r3, r3, #1
 8012d7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8012d7c:	4b10      	ldr	r3, [pc, #64]	; (8012dc0 <SystemInit+0x64>)
 8012d7e:	2200      	movs	r2, #0
 8012d80:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8012d82:	4b0f      	ldr	r3, [pc, #60]	; (8012dc0 <SystemInit+0x64>)
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	4a0e      	ldr	r2, [pc, #56]	; (8012dc0 <SystemInit+0x64>)
 8012d88:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8012d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012d90:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8012d92:	4b0b      	ldr	r3, [pc, #44]	; (8012dc0 <SystemInit+0x64>)
 8012d94:	4a0b      	ldr	r2, [pc, #44]	; (8012dc4 <SystemInit+0x68>)
 8012d96:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8012d98:	4b09      	ldr	r3, [pc, #36]	; (8012dc0 <SystemInit+0x64>)
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	4a08      	ldr	r2, [pc, #32]	; (8012dc0 <SystemInit+0x64>)
 8012d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012da2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8012da4:	4b06      	ldr	r3, [pc, #24]	; (8012dc0 <SystemInit+0x64>)
 8012da6:	2200      	movs	r2, #0
 8012da8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8012daa:	4b04      	ldr	r3, [pc, #16]	; (8012dbc <SystemInit+0x60>)
 8012dac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8012db0:	609a      	str	r2, [r3, #8]
#endif
}
 8012db2:	bf00      	nop
 8012db4:	46bd      	mov	sp, r7
 8012db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dba:	4770      	bx	lr
 8012dbc:	e000ed00 	.word	0xe000ed00
 8012dc0:	40023800 	.word	0x40023800
 8012dc4:	24003010 	.word	0x24003010

08012dc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8012dc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8012e00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8012dcc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8012dce:	e003      	b.n	8012dd8 <LoopCopyDataInit>

08012dd0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8012dd0:	4b0c      	ldr	r3, [pc, #48]	; (8012e04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8012dd2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8012dd4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8012dd6:	3104      	adds	r1, #4

08012dd8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8012dd8:	480b      	ldr	r0, [pc, #44]	; (8012e08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8012dda:	4b0c      	ldr	r3, [pc, #48]	; (8012e0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8012ddc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8012dde:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8012de0:	d3f6      	bcc.n	8012dd0 <CopyDataInit>
  ldr  r2, =_sbss
 8012de2:	4a0b      	ldr	r2, [pc, #44]	; (8012e10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8012de4:	e002      	b.n	8012dec <LoopFillZerobss>

08012de6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8012de6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8012de8:	f842 3b04 	str.w	r3, [r2], #4

08012dec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8012dec:	4b09      	ldr	r3, [pc, #36]	; (8012e14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8012dee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8012df0:	d3f9      	bcc.n	8012de6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8012df2:	f7ff ffb3 	bl	8012d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8012df6:	f000 f817 	bl	8012e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8012dfa:	f7fb fbf1 	bl	800e5e0 <main>
  bx  lr    
 8012dfe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8012e00:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8012e04:	0801469c 	.word	0x0801469c
  ldr  r0, =_sdata
 8012e08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8012e0c:	200000ec 	.word	0x200000ec
  ldr  r2, =_sbss
 8012e10:	200000ec 	.word	0x200000ec
  ldr  r3, = _ebss
 8012e14:	2000165c 	.word	0x2000165c

08012e18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8012e18:	e7fe      	b.n	8012e18 <ADC_IRQHandler>
	...

08012e1c <__errno>:
 8012e1c:	4b01      	ldr	r3, [pc, #4]	; (8012e24 <__errno+0x8>)
 8012e1e:	6818      	ldr	r0, [r3, #0]
 8012e20:	4770      	bx	lr
 8012e22:	bf00      	nop
 8012e24:	20000084 	.word	0x20000084

08012e28 <__libc_init_array>:
 8012e28:	b570      	push	{r4, r5, r6, lr}
 8012e2a:	4e0d      	ldr	r6, [pc, #52]	; (8012e60 <__libc_init_array+0x38>)
 8012e2c:	4c0d      	ldr	r4, [pc, #52]	; (8012e64 <__libc_init_array+0x3c>)
 8012e2e:	1ba4      	subs	r4, r4, r6
 8012e30:	10a4      	asrs	r4, r4, #2
 8012e32:	2500      	movs	r5, #0
 8012e34:	42a5      	cmp	r5, r4
 8012e36:	d109      	bne.n	8012e4c <__libc_init_array+0x24>
 8012e38:	4e0b      	ldr	r6, [pc, #44]	; (8012e68 <__libc_init_array+0x40>)
 8012e3a:	4c0c      	ldr	r4, [pc, #48]	; (8012e6c <__libc_init_array+0x44>)
 8012e3c:	f001 f932 	bl	80140a4 <_init>
 8012e40:	1ba4      	subs	r4, r4, r6
 8012e42:	10a4      	asrs	r4, r4, #2
 8012e44:	2500      	movs	r5, #0
 8012e46:	42a5      	cmp	r5, r4
 8012e48:	d105      	bne.n	8012e56 <__libc_init_array+0x2e>
 8012e4a:	bd70      	pop	{r4, r5, r6, pc}
 8012e4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012e50:	4798      	blx	r3
 8012e52:	3501      	adds	r5, #1
 8012e54:	e7ee      	b.n	8012e34 <__libc_init_array+0xc>
 8012e56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012e5a:	4798      	blx	r3
 8012e5c:	3501      	adds	r5, #1
 8012e5e:	e7f2      	b.n	8012e46 <__libc_init_array+0x1e>
 8012e60:	08014694 	.word	0x08014694
 8012e64:	08014694 	.word	0x08014694
 8012e68:	08014694 	.word	0x08014694
 8012e6c:	08014698 	.word	0x08014698

08012e70 <memset>:
 8012e70:	4402      	add	r2, r0
 8012e72:	4603      	mov	r3, r0
 8012e74:	4293      	cmp	r3, r2
 8012e76:	d100      	bne.n	8012e7a <memset+0xa>
 8012e78:	4770      	bx	lr
 8012e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8012e7e:	e7f9      	b.n	8012e74 <memset+0x4>

08012e80 <iprintf>:
 8012e80:	b40f      	push	{r0, r1, r2, r3}
 8012e82:	4b0a      	ldr	r3, [pc, #40]	; (8012eac <iprintf+0x2c>)
 8012e84:	b513      	push	{r0, r1, r4, lr}
 8012e86:	681c      	ldr	r4, [r3, #0]
 8012e88:	b124      	cbz	r4, 8012e94 <iprintf+0x14>
 8012e8a:	69a3      	ldr	r3, [r4, #24]
 8012e8c:	b913      	cbnz	r3, 8012e94 <iprintf+0x14>
 8012e8e:	4620      	mov	r0, r4
 8012e90:	f000 fad8 	bl	8013444 <__sinit>
 8012e94:	ab05      	add	r3, sp, #20
 8012e96:	9a04      	ldr	r2, [sp, #16]
 8012e98:	68a1      	ldr	r1, [r4, #8]
 8012e9a:	9301      	str	r3, [sp, #4]
 8012e9c:	4620      	mov	r0, r4
 8012e9e:	f000 fc99 	bl	80137d4 <_vfiprintf_r>
 8012ea2:	b002      	add	sp, #8
 8012ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ea8:	b004      	add	sp, #16
 8012eaa:	4770      	bx	lr
 8012eac:	20000084 	.word	0x20000084

08012eb0 <_puts_r>:
 8012eb0:	b570      	push	{r4, r5, r6, lr}
 8012eb2:	460e      	mov	r6, r1
 8012eb4:	4605      	mov	r5, r0
 8012eb6:	b118      	cbz	r0, 8012ec0 <_puts_r+0x10>
 8012eb8:	6983      	ldr	r3, [r0, #24]
 8012eba:	b90b      	cbnz	r3, 8012ec0 <_puts_r+0x10>
 8012ebc:	f000 fac2 	bl	8013444 <__sinit>
 8012ec0:	69ab      	ldr	r3, [r5, #24]
 8012ec2:	68ac      	ldr	r4, [r5, #8]
 8012ec4:	b913      	cbnz	r3, 8012ecc <_puts_r+0x1c>
 8012ec6:	4628      	mov	r0, r5
 8012ec8:	f000 fabc 	bl	8013444 <__sinit>
 8012ecc:	4b23      	ldr	r3, [pc, #140]	; (8012f5c <_puts_r+0xac>)
 8012ece:	429c      	cmp	r4, r3
 8012ed0:	d117      	bne.n	8012f02 <_puts_r+0x52>
 8012ed2:	686c      	ldr	r4, [r5, #4]
 8012ed4:	89a3      	ldrh	r3, [r4, #12]
 8012ed6:	071b      	lsls	r3, r3, #28
 8012ed8:	d51d      	bpl.n	8012f16 <_puts_r+0x66>
 8012eda:	6923      	ldr	r3, [r4, #16]
 8012edc:	b1db      	cbz	r3, 8012f16 <_puts_r+0x66>
 8012ede:	3e01      	subs	r6, #1
 8012ee0:	68a3      	ldr	r3, [r4, #8]
 8012ee2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012ee6:	3b01      	subs	r3, #1
 8012ee8:	60a3      	str	r3, [r4, #8]
 8012eea:	b9e9      	cbnz	r1, 8012f28 <_puts_r+0x78>
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	da2e      	bge.n	8012f4e <_puts_r+0x9e>
 8012ef0:	4622      	mov	r2, r4
 8012ef2:	210a      	movs	r1, #10
 8012ef4:	4628      	mov	r0, r5
 8012ef6:	f000 f8f5 	bl	80130e4 <__swbuf_r>
 8012efa:	3001      	adds	r0, #1
 8012efc:	d011      	beq.n	8012f22 <_puts_r+0x72>
 8012efe:	200a      	movs	r0, #10
 8012f00:	e011      	b.n	8012f26 <_puts_r+0x76>
 8012f02:	4b17      	ldr	r3, [pc, #92]	; (8012f60 <_puts_r+0xb0>)
 8012f04:	429c      	cmp	r4, r3
 8012f06:	d101      	bne.n	8012f0c <_puts_r+0x5c>
 8012f08:	68ac      	ldr	r4, [r5, #8]
 8012f0a:	e7e3      	b.n	8012ed4 <_puts_r+0x24>
 8012f0c:	4b15      	ldr	r3, [pc, #84]	; (8012f64 <_puts_r+0xb4>)
 8012f0e:	429c      	cmp	r4, r3
 8012f10:	bf08      	it	eq
 8012f12:	68ec      	ldreq	r4, [r5, #12]
 8012f14:	e7de      	b.n	8012ed4 <_puts_r+0x24>
 8012f16:	4621      	mov	r1, r4
 8012f18:	4628      	mov	r0, r5
 8012f1a:	f000 f935 	bl	8013188 <__swsetup_r>
 8012f1e:	2800      	cmp	r0, #0
 8012f20:	d0dd      	beq.n	8012ede <_puts_r+0x2e>
 8012f22:	f04f 30ff 	mov.w	r0, #4294967295
 8012f26:	bd70      	pop	{r4, r5, r6, pc}
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	da04      	bge.n	8012f36 <_puts_r+0x86>
 8012f2c:	69a2      	ldr	r2, [r4, #24]
 8012f2e:	429a      	cmp	r2, r3
 8012f30:	dc06      	bgt.n	8012f40 <_puts_r+0x90>
 8012f32:	290a      	cmp	r1, #10
 8012f34:	d004      	beq.n	8012f40 <_puts_r+0x90>
 8012f36:	6823      	ldr	r3, [r4, #0]
 8012f38:	1c5a      	adds	r2, r3, #1
 8012f3a:	6022      	str	r2, [r4, #0]
 8012f3c:	7019      	strb	r1, [r3, #0]
 8012f3e:	e7cf      	b.n	8012ee0 <_puts_r+0x30>
 8012f40:	4622      	mov	r2, r4
 8012f42:	4628      	mov	r0, r5
 8012f44:	f000 f8ce 	bl	80130e4 <__swbuf_r>
 8012f48:	3001      	adds	r0, #1
 8012f4a:	d1c9      	bne.n	8012ee0 <_puts_r+0x30>
 8012f4c:	e7e9      	b.n	8012f22 <_puts_r+0x72>
 8012f4e:	6823      	ldr	r3, [r4, #0]
 8012f50:	200a      	movs	r0, #10
 8012f52:	1c5a      	adds	r2, r3, #1
 8012f54:	6022      	str	r2, [r4, #0]
 8012f56:	7018      	strb	r0, [r3, #0]
 8012f58:	e7e5      	b.n	8012f26 <_puts_r+0x76>
 8012f5a:	bf00      	nop
 8012f5c:	08014614 	.word	0x08014614
 8012f60:	08014634 	.word	0x08014634
 8012f64:	080145f4 	.word	0x080145f4

08012f68 <puts>:
 8012f68:	4b02      	ldr	r3, [pc, #8]	; (8012f74 <puts+0xc>)
 8012f6a:	4601      	mov	r1, r0
 8012f6c:	6818      	ldr	r0, [r3, #0]
 8012f6e:	f7ff bf9f 	b.w	8012eb0 <_puts_r>
 8012f72:	bf00      	nop
 8012f74:	20000084 	.word	0x20000084

08012f78 <setbuf>:
 8012f78:	2900      	cmp	r1, #0
 8012f7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012f7e:	bf0c      	ite	eq
 8012f80:	2202      	moveq	r2, #2
 8012f82:	2200      	movne	r2, #0
 8012f84:	f000 b800 	b.w	8012f88 <setvbuf>

08012f88 <setvbuf>:
 8012f88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012f8c:	461d      	mov	r5, r3
 8012f8e:	4b51      	ldr	r3, [pc, #324]	; (80130d4 <setvbuf+0x14c>)
 8012f90:	681e      	ldr	r6, [r3, #0]
 8012f92:	4604      	mov	r4, r0
 8012f94:	460f      	mov	r7, r1
 8012f96:	4690      	mov	r8, r2
 8012f98:	b126      	cbz	r6, 8012fa4 <setvbuf+0x1c>
 8012f9a:	69b3      	ldr	r3, [r6, #24]
 8012f9c:	b913      	cbnz	r3, 8012fa4 <setvbuf+0x1c>
 8012f9e:	4630      	mov	r0, r6
 8012fa0:	f000 fa50 	bl	8013444 <__sinit>
 8012fa4:	4b4c      	ldr	r3, [pc, #304]	; (80130d8 <setvbuf+0x150>)
 8012fa6:	429c      	cmp	r4, r3
 8012fa8:	d152      	bne.n	8013050 <setvbuf+0xc8>
 8012faa:	6874      	ldr	r4, [r6, #4]
 8012fac:	f1b8 0f02 	cmp.w	r8, #2
 8012fb0:	d006      	beq.n	8012fc0 <setvbuf+0x38>
 8012fb2:	f1b8 0f01 	cmp.w	r8, #1
 8012fb6:	f200 8089 	bhi.w	80130cc <setvbuf+0x144>
 8012fba:	2d00      	cmp	r5, #0
 8012fbc:	f2c0 8086 	blt.w	80130cc <setvbuf+0x144>
 8012fc0:	4621      	mov	r1, r4
 8012fc2:	4630      	mov	r0, r6
 8012fc4:	f000 f9d4 	bl	8013370 <_fflush_r>
 8012fc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012fca:	b141      	cbz	r1, 8012fde <setvbuf+0x56>
 8012fcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012fd0:	4299      	cmp	r1, r3
 8012fd2:	d002      	beq.n	8012fda <setvbuf+0x52>
 8012fd4:	4630      	mov	r0, r6
 8012fd6:	f000 fb2b 	bl	8013630 <_free_r>
 8012fda:	2300      	movs	r3, #0
 8012fdc:	6363      	str	r3, [r4, #52]	; 0x34
 8012fde:	2300      	movs	r3, #0
 8012fe0:	61a3      	str	r3, [r4, #24]
 8012fe2:	6063      	str	r3, [r4, #4]
 8012fe4:	89a3      	ldrh	r3, [r4, #12]
 8012fe6:	061b      	lsls	r3, r3, #24
 8012fe8:	d503      	bpl.n	8012ff2 <setvbuf+0x6a>
 8012fea:	6921      	ldr	r1, [r4, #16]
 8012fec:	4630      	mov	r0, r6
 8012fee:	f000 fb1f 	bl	8013630 <_free_r>
 8012ff2:	89a3      	ldrh	r3, [r4, #12]
 8012ff4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8012ff8:	f023 0303 	bic.w	r3, r3, #3
 8012ffc:	f1b8 0f02 	cmp.w	r8, #2
 8013000:	81a3      	strh	r3, [r4, #12]
 8013002:	d05d      	beq.n	80130c0 <setvbuf+0x138>
 8013004:	ab01      	add	r3, sp, #4
 8013006:	466a      	mov	r2, sp
 8013008:	4621      	mov	r1, r4
 801300a:	4630      	mov	r0, r6
 801300c:	f000 faa4 	bl	8013558 <__swhatbuf_r>
 8013010:	89a3      	ldrh	r3, [r4, #12]
 8013012:	4318      	orrs	r0, r3
 8013014:	81a0      	strh	r0, [r4, #12]
 8013016:	bb2d      	cbnz	r5, 8013064 <setvbuf+0xdc>
 8013018:	9d00      	ldr	r5, [sp, #0]
 801301a:	4628      	mov	r0, r5
 801301c:	f000 fb00 	bl	8013620 <malloc>
 8013020:	4607      	mov	r7, r0
 8013022:	2800      	cmp	r0, #0
 8013024:	d14e      	bne.n	80130c4 <setvbuf+0x13c>
 8013026:	f8dd 9000 	ldr.w	r9, [sp]
 801302a:	45a9      	cmp	r9, r5
 801302c:	d13c      	bne.n	80130a8 <setvbuf+0x120>
 801302e:	f04f 30ff 	mov.w	r0, #4294967295
 8013032:	89a3      	ldrh	r3, [r4, #12]
 8013034:	f043 0302 	orr.w	r3, r3, #2
 8013038:	81a3      	strh	r3, [r4, #12]
 801303a:	2300      	movs	r3, #0
 801303c:	60a3      	str	r3, [r4, #8]
 801303e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013042:	6023      	str	r3, [r4, #0]
 8013044:	6123      	str	r3, [r4, #16]
 8013046:	2301      	movs	r3, #1
 8013048:	6163      	str	r3, [r4, #20]
 801304a:	b003      	add	sp, #12
 801304c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013050:	4b22      	ldr	r3, [pc, #136]	; (80130dc <setvbuf+0x154>)
 8013052:	429c      	cmp	r4, r3
 8013054:	d101      	bne.n	801305a <setvbuf+0xd2>
 8013056:	68b4      	ldr	r4, [r6, #8]
 8013058:	e7a8      	b.n	8012fac <setvbuf+0x24>
 801305a:	4b21      	ldr	r3, [pc, #132]	; (80130e0 <setvbuf+0x158>)
 801305c:	429c      	cmp	r4, r3
 801305e:	bf08      	it	eq
 8013060:	68f4      	ldreq	r4, [r6, #12]
 8013062:	e7a3      	b.n	8012fac <setvbuf+0x24>
 8013064:	2f00      	cmp	r7, #0
 8013066:	d0d8      	beq.n	801301a <setvbuf+0x92>
 8013068:	69b3      	ldr	r3, [r6, #24]
 801306a:	b913      	cbnz	r3, 8013072 <setvbuf+0xea>
 801306c:	4630      	mov	r0, r6
 801306e:	f000 f9e9 	bl	8013444 <__sinit>
 8013072:	f1b8 0f01 	cmp.w	r8, #1
 8013076:	bf08      	it	eq
 8013078:	89a3      	ldrheq	r3, [r4, #12]
 801307a:	6027      	str	r7, [r4, #0]
 801307c:	bf04      	itt	eq
 801307e:	f043 0301 	orreq.w	r3, r3, #1
 8013082:	81a3      	strheq	r3, [r4, #12]
 8013084:	89a3      	ldrh	r3, [r4, #12]
 8013086:	f013 0008 	ands.w	r0, r3, #8
 801308a:	e9c4 7504 	strd	r7, r5, [r4, #16]
 801308e:	d01b      	beq.n	80130c8 <setvbuf+0x140>
 8013090:	f013 0001 	ands.w	r0, r3, #1
 8013094:	bf18      	it	ne
 8013096:	426d      	negne	r5, r5
 8013098:	f04f 0300 	mov.w	r3, #0
 801309c:	bf1d      	ittte	ne
 801309e:	60a3      	strne	r3, [r4, #8]
 80130a0:	61a5      	strne	r5, [r4, #24]
 80130a2:	4618      	movne	r0, r3
 80130a4:	60a5      	streq	r5, [r4, #8]
 80130a6:	e7d0      	b.n	801304a <setvbuf+0xc2>
 80130a8:	4648      	mov	r0, r9
 80130aa:	f000 fab9 	bl	8013620 <malloc>
 80130ae:	4607      	mov	r7, r0
 80130b0:	2800      	cmp	r0, #0
 80130b2:	d0bc      	beq.n	801302e <setvbuf+0xa6>
 80130b4:	89a3      	ldrh	r3, [r4, #12]
 80130b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80130ba:	81a3      	strh	r3, [r4, #12]
 80130bc:	464d      	mov	r5, r9
 80130be:	e7d3      	b.n	8013068 <setvbuf+0xe0>
 80130c0:	2000      	movs	r0, #0
 80130c2:	e7b6      	b.n	8013032 <setvbuf+0xaa>
 80130c4:	46a9      	mov	r9, r5
 80130c6:	e7f5      	b.n	80130b4 <setvbuf+0x12c>
 80130c8:	60a0      	str	r0, [r4, #8]
 80130ca:	e7be      	b.n	801304a <setvbuf+0xc2>
 80130cc:	f04f 30ff 	mov.w	r0, #4294967295
 80130d0:	e7bb      	b.n	801304a <setvbuf+0xc2>
 80130d2:	bf00      	nop
 80130d4:	20000084 	.word	0x20000084
 80130d8:	08014614 	.word	0x08014614
 80130dc:	08014634 	.word	0x08014634
 80130e0:	080145f4 	.word	0x080145f4

080130e4 <__swbuf_r>:
 80130e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130e6:	460e      	mov	r6, r1
 80130e8:	4614      	mov	r4, r2
 80130ea:	4605      	mov	r5, r0
 80130ec:	b118      	cbz	r0, 80130f6 <__swbuf_r+0x12>
 80130ee:	6983      	ldr	r3, [r0, #24]
 80130f0:	b90b      	cbnz	r3, 80130f6 <__swbuf_r+0x12>
 80130f2:	f000 f9a7 	bl	8013444 <__sinit>
 80130f6:	4b21      	ldr	r3, [pc, #132]	; (801317c <__swbuf_r+0x98>)
 80130f8:	429c      	cmp	r4, r3
 80130fa:	d12a      	bne.n	8013152 <__swbuf_r+0x6e>
 80130fc:	686c      	ldr	r4, [r5, #4]
 80130fe:	69a3      	ldr	r3, [r4, #24]
 8013100:	60a3      	str	r3, [r4, #8]
 8013102:	89a3      	ldrh	r3, [r4, #12]
 8013104:	071a      	lsls	r2, r3, #28
 8013106:	d52e      	bpl.n	8013166 <__swbuf_r+0x82>
 8013108:	6923      	ldr	r3, [r4, #16]
 801310a:	b363      	cbz	r3, 8013166 <__swbuf_r+0x82>
 801310c:	6923      	ldr	r3, [r4, #16]
 801310e:	6820      	ldr	r0, [r4, #0]
 8013110:	1ac0      	subs	r0, r0, r3
 8013112:	6963      	ldr	r3, [r4, #20]
 8013114:	b2f6      	uxtb	r6, r6
 8013116:	4283      	cmp	r3, r0
 8013118:	4637      	mov	r7, r6
 801311a:	dc04      	bgt.n	8013126 <__swbuf_r+0x42>
 801311c:	4621      	mov	r1, r4
 801311e:	4628      	mov	r0, r5
 8013120:	f000 f926 	bl	8013370 <_fflush_r>
 8013124:	bb28      	cbnz	r0, 8013172 <__swbuf_r+0x8e>
 8013126:	68a3      	ldr	r3, [r4, #8]
 8013128:	3b01      	subs	r3, #1
 801312a:	60a3      	str	r3, [r4, #8]
 801312c:	6823      	ldr	r3, [r4, #0]
 801312e:	1c5a      	adds	r2, r3, #1
 8013130:	6022      	str	r2, [r4, #0]
 8013132:	701e      	strb	r6, [r3, #0]
 8013134:	6963      	ldr	r3, [r4, #20]
 8013136:	3001      	adds	r0, #1
 8013138:	4283      	cmp	r3, r0
 801313a:	d004      	beq.n	8013146 <__swbuf_r+0x62>
 801313c:	89a3      	ldrh	r3, [r4, #12]
 801313e:	07db      	lsls	r3, r3, #31
 8013140:	d519      	bpl.n	8013176 <__swbuf_r+0x92>
 8013142:	2e0a      	cmp	r6, #10
 8013144:	d117      	bne.n	8013176 <__swbuf_r+0x92>
 8013146:	4621      	mov	r1, r4
 8013148:	4628      	mov	r0, r5
 801314a:	f000 f911 	bl	8013370 <_fflush_r>
 801314e:	b190      	cbz	r0, 8013176 <__swbuf_r+0x92>
 8013150:	e00f      	b.n	8013172 <__swbuf_r+0x8e>
 8013152:	4b0b      	ldr	r3, [pc, #44]	; (8013180 <__swbuf_r+0x9c>)
 8013154:	429c      	cmp	r4, r3
 8013156:	d101      	bne.n	801315c <__swbuf_r+0x78>
 8013158:	68ac      	ldr	r4, [r5, #8]
 801315a:	e7d0      	b.n	80130fe <__swbuf_r+0x1a>
 801315c:	4b09      	ldr	r3, [pc, #36]	; (8013184 <__swbuf_r+0xa0>)
 801315e:	429c      	cmp	r4, r3
 8013160:	bf08      	it	eq
 8013162:	68ec      	ldreq	r4, [r5, #12]
 8013164:	e7cb      	b.n	80130fe <__swbuf_r+0x1a>
 8013166:	4621      	mov	r1, r4
 8013168:	4628      	mov	r0, r5
 801316a:	f000 f80d 	bl	8013188 <__swsetup_r>
 801316e:	2800      	cmp	r0, #0
 8013170:	d0cc      	beq.n	801310c <__swbuf_r+0x28>
 8013172:	f04f 37ff 	mov.w	r7, #4294967295
 8013176:	4638      	mov	r0, r7
 8013178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801317a:	bf00      	nop
 801317c:	08014614 	.word	0x08014614
 8013180:	08014634 	.word	0x08014634
 8013184:	080145f4 	.word	0x080145f4

08013188 <__swsetup_r>:
 8013188:	4b32      	ldr	r3, [pc, #200]	; (8013254 <__swsetup_r+0xcc>)
 801318a:	b570      	push	{r4, r5, r6, lr}
 801318c:	681d      	ldr	r5, [r3, #0]
 801318e:	4606      	mov	r6, r0
 8013190:	460c      	mov	r4, r1
 8013192:	b125      	cbz	r5, 801319e <__swsetup_r+0x16>
 8013194:	69ab      	ldr	r3, [r5, #24]
 8013196:	b913      	cbnz	r3, 801319e <__swsetup_r+0x16>
 8013198:	4628      	mov	r0, r5
 801319a:	f000 f953 	bl	8013444 <__sinit>
 801319e:	4b2e      	ldr	r3, [pc, #184]	; (8013258 <__swsetup_r+0xd0>)
 80131a0:	429c      	cmp	r4, r3
 80131a2:	d10f      	bne.n	80131c4 <__swsetup_r+0x3c>
 80131a4:	686c      	ldr	r4, [r5, #4]
 80131a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80131aa:	b29a      	uxth	r2, r3
 80131ac:	0715      	lsls	r5, r2, #28
 80131ae:	d42c      	bmi.n	801320a <__swsetup_r+0x82>
 80131b0:	06d0      	lsls	r0, r2, #27
 80131b2:	d411      	bmi.n	80131d8 <__swsetup_r+0x50>
 80131b4:	2209      	movs	r2, #9
 80131b6:	6032      	str	r2, [r6, #0]
 80131b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80131bc:	81a3      	strh	r3, [r4, #12]
 80131be:	f04f 30ff 	mov.w	r0, #4294967295
 80131c2:	e03e      	b.n	8013242 <__swsetup_r+0xba>
 80131c4:	4b25      	ldr	r3, [pc, #148]	; (801325c <__swsetup_r+0xd4>)
 80131c6:	429c      	cmp	r4, r3
 80131c8:	d101      	bne.n	80131ce <__swsetup_r+0x46>
 80131ca:	68ac      	ldr	r4, [r5, #8]
 80131cc:	e7eb      	b.n	80131a6 <__swsetup_r+0x1e>
 80131ce:	4b24      	ldr	r3, [pc, #144]	; (8013260 <__swsetup_r+0xd8>)
 80131d0:	429c      	cmp	r4, r3
 80131d2:	bf08      	it	eq
 80131d4:	68ec      	ldreq	r4, [r5, #12]
 80131d6:	e7e6      	b.n	80131a6 <__swsetup_r+0x1e>
 80131d8:	0751      	lsls	r1, r2, #29
 80131da:	d512      	bpl.n	8013202 <__swsetup_r+0x7a>
 80131dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80131de:	b141      	cbz	r1, 80131f2 <__swsetup_r+0x6a>
 80131e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80131e4:	4299      	cmp	r1, r3
 80131e6:	d002      	beq.n	80131ee <__swsetup_r+0x66>
 80131e8:	4630      	mov	r0, r6
 80131ea:	f000 fa21 	bl	8013630 <_free_r>
 80131ee:	2300      	movs	r3, #0
 80131f0:	6363      	str	r3, [r4, #52]	; 0x34
 80131f2:	89a3      	ldrh	r3, [r4, #12]
 80131f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80131f8:	81a3      	strh	r3, [r4, #12]
 80131fa:	2300      	movs	r3, #0
 80131fc:	6063      	str	r3, [r4, #4]
 80131fe:	6923      	ldr	r3, [r4, #16]
 8013200:	6023      	str	r3, [r4, #0]
 8013202:	89a3      	ldrh	r3, [r4, #12]
 8013204:	f043 0308 	orr.w	r3, r3, #8
 8013208:	81a3      	strh	r3, [r4, #12]
 801320a:	6923      	ldr	r3, [r4, #16]
 801320c:	b94b      	cbnz	r3, 8013222 <__swsetup_r+0x9a>
 801320e:	89a3      	ldrh	r3, [r4, #12]
 8013210:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013218:	d003      	beq.n	8013222 <__swsetup_r+0x9a>
 801321a:	4621      	mov	r1, r4
 801321c:	4630      	mov	r0, r6
 801321e:	f000 f9bf 	bl	80135a0 <__smakebuf_r>
 8013222:	89a2      	ldrh	r2, [r4, #12]
 8013224:	f012 0301 	ands.w	r3, r2, #1
 8013228:	d00c      	beq.n	8013244 <__swsetup_r+0xbc>
 801322a:	2300      	movs	r3, #0
 801322c:	60a3      	str	r3, [r4, #8]
 801322e:	6963      	ldr	r3, [r4, #20]
 8013230:	425b      	negs	r3, r3
 8013232:	61a3      	str	r3, [r4, #24]
 8013234:	6923      	ldr	r3, [r4, #16]
 8013236:	b953      	cbnz	r3, 801324e <__swsetup_r+0xc6>
 8013238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801323c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8013240:	d1ba      	bne.n	80131b8 <__swsetup_r+0x30>
 8013242:	bd70      	pop	{r4, r5, r6, pc}
 8013244:	0792      	lsls	r2, r2, #30
 8013246:	bf58      	it	pl
 8013248:	6963      	ldrpl	r3, [r4, #20]
 801324a:	60a3      	str	r3, [r4, #8]
 801324c:	e7f2      	b.n	8013234 <__swsetup_r+0xac>
 801324e:	2000      	movs	r0, #0
 8013250:	e7f7      	b.n	8013242 <__swsetup_r+0xba>
 8013252:	bf00      	nop
 8013254:	20000084 	.word	0x20000084
 8013258:	08014614 	.word	0x08014614
 801325c:	08014634 	.word	0x08014634
 8013260:	080145f4 	.word	0x080145f4

08013264 <__sflush_r>:
 8013264:	898a      	ldrh	r2, [r1, #12]
 8013266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801326a:	4605      	mov	r5, r0
 801326c:	0710      	lsls	r0, r2, #28
 801326e:	460c      	mov	r4, r1
 8013270:	d458      	bmi.n	8013324 <__sflush_r+0xc0>
 8013272:	684b      	ldr	r3, [r1, #4]
 8013274:	2b00      	cmp	r3, #0
 8013276:	dc05      	bgt.n	8013284 <__sflush_r+0x20>
 8013278:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801327a:	2b00      	cmp	r3, #0
 801327c:	dc02      	bgt.n	8013284 <__sflush_r+0x20>
 801327e:	2000      	movs	r0, #0
 8013280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013284:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013286:	2e00      	cmp	r6, #0
 8013288:	d0f9      	beq.n	801327e <__sflush_r+0x1a>
 801328a:	2300      	movs	r3, #0
 801328c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013290:	682f      	ldr	r7, [r5, #0]
 8013292:	6a21      	ldr	r1, [r4, #32]
 8013294:	602b      	str	r3, [r5, #0]
 8013296:	d032      	beq.n	80132fe <__sflush_r+0x9a>
 8013298:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801329a:	89a3      	ldrh	r3, [r4, #12]
 801329c:	075a      	lsls	r2, r3, #29
 801329e:	d505      	bpl.n	80132ac <__sflush_r+0x48>
 80132a0:	6863      	ldr	r3, [r4, #4]
 80132a2:	1ac0      	subs	r0, r0, r3
 80132a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80132a6:	b10b      	cbz	r3, 80132ac <__sflush_r+0x48>
 80132a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80132aa:	1ac0      	subs	r0, r0, r3
 80132ac:	2300      	movs	r3, #0
 80132ae:	4602      	mov	r2, r0
 80132b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80132b2:	6a21      	ldr	r1, [r4, #32]
 80132b4:	4628      	mov	r0, r5
 80132b6:	47b0      	blx	r6
 80132b8:	1c43      	adds	r3, r0, #1
 80132ba:	89a3      	ldrh	r3, [r4, #12]
 80132bc:	d106      	bne.n	80132cc <__sflush_r+0x68>
 80132be:	6829      	ldr	r1, [r5, #0]
 80132c0:	291d      	cmp	r1, #29
 80132c2:	d848      	bhi.n	8013356 <__sflush_r+0xf2>
 80132c4:	4a29      	ldr	r2, [pc, #164]	; (801336c <__sflush_r+0x108>)
 80132c6:	40ca      	lsrs	r2, r1
 80132c8:	07d6      	lsls	r6, r2, #31
 80132ca:	d544      	bpl.n	8013356 <__sflush_r+0xf2>
 80132cc:	2200      	movs	r2, #0
 80132ce:	6062      	str	r2, [r4, #4]
 80132d0:	04d9      	lsls	r1, r3, #19
 80132d2:	6922      	ldr	r2, [r4, #16]
 80132d4:	6022      	str	r2, [r4, #0]
 80132d6:	d504      	bpl.n	80132e2 <__sflush_r+0x7e>
 80132d8:	1c42      	adds	r2, r0, #1
 80132da:	d101      	bne.n	80132e0 <__sflush_r+0x7c>
 80132dc:	682b      	ldr	r3, [r5, #0]
 80132de:	b903      	cbnz	r3, 80132e2 <__sflush_r+0x7e>
 80132e0:	6560      	str	r0, [r4, #84]	; 0x54
 80132e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80132e4:	602f      	str	r7, [r5, #0]
 80132e6:	2900      	cmp	r1, #0
 80132e8:	d0c9      	beq.n	801327e <__sflush_r+0x1a>
 80132ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80132ee:	4299      	cmp	r1, r3
 80132f0:	d002      	beq.n	80132f8 <__sflush_r+0x94>
 80132f2:	4628      	mov	r0, r5
 80132f4:	f000 f99c 	bl	8013630 <_free_r>
 80132f8:	2000      	movs	r0, #0
 80132fa:	6360      	str	r0, [r4, #52]	; 0x34
 80132fc:	e7c0      	b.n	8013280 <__sflush_r+0x1c>
 80132fe:	2301      	movs	r3, #1
 8013300:	4628      	mov	r0, r5
 8013302:	47b0      	blx	r6
 8013304:	1c41      	adds	r1, r0, #1
 8013306:	d1c8      	bne.n	801329a <__sflush_r+0x36>
 8013308:	682b      	ldr	r3, [r5, #0]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d0c5      	beq.n	801329a <__sflush_r+0x36>
 801330e:	2b1d      	cmp	r3, #29
 8013310:	d001      	beq.n	8013316 <__sflush_r+0xb2>
 8013312:	2b16      	cmp	r3, #22
 8013314:	d101      	bne.n	801331a <__sflush_r+0xb6>
 8013316:	602f      	str	r7, [r5, #0]
 8013318:	e7b1      	b.n	801327e <__sflush_r+0x1a>
 801331a:	89a3      	ldrh	r3, [r4, #12]
 801331c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013320:	81a3      	strh	r3, [r4, #12]
 8013322:	e7ad      	b.n	8013280 <__sflush_r+0x1c>
 8013324:	690f      	ldr	r7, [r1, #16]
 8013326:	2f00      	cmp	r7, #0
 8013328:	d0a9      	beq.n	801327e <__sflush_r+0x1a>
 801332a:	0793      	lsls	r3, r2, #30
 801332c:	680e      	ldr	r6, [r1, #0]
 801332e:	bf08      	it	eq
 8013330:	694b      	ldreq	r3, [r1, #20]
 8013332:	600f      	str	r7, [r1, #0]
 8013334:	bf18      	it	ne
 8013336:	2300      	movne	r3, #0
 8013338:	eba6 0807 	sub.w	r8, r6, r7
 801333c:	608b      	str	r3, [r1, #8]
 801333e:	f1b8 0f00 	cmp.w	r8, #0
 8013342:	dd9c      	ble.n	801327e <__sflush_r+0x1a>
 8013344:	4643      	mov	r3, r8
 8013346:	463a      	mov	r2, r7
 8013348:	6a21      	ldr	r1, [r4, #32]
 801334a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801334c:	4628      	mov	r0, r5
 801334e:	47b0      	blx	r6
 8013350:	2800      	cmp	r0, #0
 8013352:	dc06      	bgt.n	8013362 <__sflush_r+0xfe>
 8013354:	89a3      	ldrh	r3, [r4, #12]
 8013356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801335a:	81a3      	strh	r3, [r4, #12]
 801335c:	f04f 30ff 	mov.w	r0, #4294967295
 8013360:	e78e      	b.n	8013280 <__sflush_r+0x1c>
 8013362:	4407      	add	r7, r0
 8013364:	eba8 0800 	sub.w	r8, r8, r0
 8013368:	e7e9      	b.n	801333e <__sflush_r+0xda>
 801336a:	bf00      	nop
 801336c:	20400001 	.word	0x20400001

08013370 <_fflush_r>:
 8013370:	b538      	push	{r3, r4, r5, lr}
 8013372:	690b      	ldr	r3, [r1, #16]
 8013374:	4605      	mov	r5, r0
 8013376:	460c      	mov	r4, r1
 8013378:	b1db      	cbz	r3, 80133b2 <_fflush_r+0x42>
 801337a:	b118      	cbz	r0, 8013384 <_fflush_r+0x14>
 801337c:	6983      	ldr	r3, [r0, #24]
 801337e:	b90b      	cbnz	r3, 8013384 <_fflush_r+0x14>
 8013380:	f000 f860 	bl	8013444 <__sinit>
 8013384:	4b0c      	ldr	r3, [pc, #48]	; (80133b8 <_fflush_r+0x48>)
 8013386:	429c      	cmp	r4, r3
 8013388:	d109      	bne.n	801339e <_fflush_r+0x2e>
 801338a:	686c      	ldr	r4, [r5, #4]
 801338c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013390:	b17b      	cbz	r3, 80133b2 <_fflush_r+0x42>
 8013392:	4621      	mov	r1, r4
 8013394:	4628      	mov	r0, r5
 8013396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801339a:	f7ff bf63 	b.w	8013264 <__sflush_r>
 801339e:	4b07      	ldr	r3, [pc, #28]	; (80133bc <_fflush_r+0x4c>)
 80133a0:	429c      	cmp	r4, r3
 80133a2:	d101      	bne.n	80133a8 <_fflush_r+0x38>
 80133a4:	68ac      	ldr	r4, [r5, #8]
 80133a6:	e7f1      	b.n	801338c <_fflush_r+0x1c>
 80133a8:	4b05      	ldr	r3, [pc, #20]	; (80133c0 <_fflush_r+0x50>)
 80133aa:	429c      	cmp	r4, r3
 80133ac:	bf08      	it	eq
 80133ae:	68ec      	ldreq	r4, [r5, #12]
 80133b0:	e7ec      	b.n	801338c <_fflush_r+0x1c>
 80133b2:	2000      	movs	r0, #0
 80133b4:	bd38      	pop	{r3, r4, r5, pc}
 80133b6:	bf00      	nop
 80133b8:	08014614 	.word	0x08014614
 80133bc:	08014634 	.word	0x08014634
 80133c0:	080145f4 	.word	0x080145f4

080133c4 <std>:
 80133c4:	2300      	movs	r3, #0
 80133c6:	b510      	push	{r4, lr}
 80133c8:	4604      	mov	r4, r0
 80133ca:	e9c0 3300 	strd	r3, r3, [r0]
 80133ce:	6083      	str	r3, [r0, #8]
 80133d0:	8181      	strh	r1, [r0, #12]
 80133d2:	6643      	str	r3, [r0, #100]	; 0x64
 80133d4:	81c2      	strh	r2, [r0, #14]
 80133d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80133da:	6183      	str	r3, [r0, #24]
 80133dc:	4619      	mov	r1, r3
 80133de:	2208      	movs	r2, #8
 80133e0:	305c      	adds	r0, #92	; 0x5c
 80133e2:	f7ff fd45 	bl	8012e70 <memset>
 80133e6:	4b05      	ldr	r3, [pc, #20]	; (80133fc <std+0x38>)
 80133e8:	6263      	str	r3, [r4, #36]	; 0x24
 80133ea:	4b05      	ldr	r3, [pc, #20]	; (8013400 <std+0x3c>)
 80133ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80133ee:	4b05      	ldr	r3, [pc, #20]	; (8013404 <std+0x40>)
 80133f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80133f2:	4b05      	ldr	r3, [pc, #20]	; (8013408 <std+0x44>)
 80133f4:	6224      	str	r4, [r4, #32]
 80133f6:	6323      	str	r3, [r4, #48]	; 0x30
 80133f8:	bd10      	pop	{r4, pc}
 80133fa:	bf00      	nop
 80133fc:	08013d31 	.word	0x08013d31
 8013400:	08013d53 	.word	0x08013d53
 8013404:	08013d8b 	.word	0x08013d8b
 8013408:	08013daf 	.word	0x08013daf

0801340c <_cleanup_r>:
 801340c:	4901      	ldr	r1, [pc, #4]	; (8013414 <_cleanup_r+0x8>)
 801340e:	f000 b885 	b.w	801351c <_fwalk_reent>
 8013412:	bf00      	nop
 8013414:	08013371 	.word	0x08013371

08013418 <__sfmoreglue>:
 8013418:	b570      	push	{r4, r5, r6, lr}
 801341a:	1e4a      	subs	r2, r1, #1
 801341c:	2568      	movs	r5, #104	; 0x68
 801341e:	4355      	muls	r5, r2
 8013420:	460e      	mov	r6, r1
 8013422:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013426:	f000 f951 	bl	80136cc <_malloc_r>
 801342a:	4604      	mov	r4, r0
 801342c:	b140      	cbz	r0, 8013440 <__sfmoreglue+0x28>
 801342e:	2100      	movs	r1, #0
 8013430:	e9c0 1600 	strd	r1, r6, [r0]
 8013434:	300c      	adds	r0, #12
 8013436:	60a0      	str	r0, [r4, #8]
 8013438:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801343c:	f7ff fd18 	bl	8012e70 <memset>
 8013440:	4620      	mov	r0, r4
 8013442:	bd70      	pop	{r4, r5, r6, pc}

08013444 <__sinit>:
 8013444:	6983      	ldr	r3, [r0, #24]
 8013446:	b510      	push	{r4, lr}
 8013448:	4604      	mov	r4, r0
 801344a:	bb33      	cbnz	r3, 801349a <__sinit+0x56>
 801344c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8013450:	6503      	str	r3, [r0, #80]	; 0x50
 8013452:	4b12      	ldr	r3, [pc, #72]	; (801349c <__sinit+0x58>)
 8013454:	4a12      	ldr	r2, [pc, #72]	; (80134a0 <__sinit+0x5c>)
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	6282      	str	r2, [r0, #40]	; 0x28
 801345a:	4298      	cmp	r0, r3
 801345c:	bf04      	itt	eq
 801345e:	2301      	moveq	r3, #1
 8013460:	6183      	streq	r3, [r0, #24]
 8013462:	f000 f81f 	bl	80134a4 <__sfp>
 8013466:	6060      	str	r0, [r4, #4]
 8013468:	4620      	mov	r0, r4
 801346a:	f000 f81b 	bl	80134a4 <__sfp>
 801346e:	60a0      	str	r0, [r4, #8]
 8013470:	4620      	mov	r0, r4
 8013472:	f000 f817 	bl	80134a4 <__sfp>
 8013476:	2200      	movs	r2, #0
 8013478:	60e0      	str	r0, [r4, #12]
 801347a:	2104      	movs	r1, #4
 801347c:	6860      	ldr	r0, [r4, #4]
 801347e:	f7ff ffa1 	bl	80133c4 <std>
 8013482:	2201      	movs	r2, #1
 8013484:	2109      	movs	r1, #9
 8013486:	68a0      	ldr	r0, [r4, #8]
 8013488:	f7ff ff9c 	bl	80133c4 <std>
 801348c:	2202      	movs	r2, #2
 801348e:	2112      	movs	r1, #18
 8013490:	68e0      	ldr	r0, [r4, #12]
 8013492:	f7ff ff97 	bl	80133c4 <std>
 8013496:	2301      	movs	r3, #1
 8013498:	61a3      	str	r3, [r4, #24]
 801349a:	bd10      	pop	{r4, pc}
 801349c:	080145f0 	.word	0x080145f0
 80134a0:	0801340d 	.word	0x0801340d

080134a4 <__sfp>:
 80134a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134a6:	4b1b      	ldr	r3, [pc, #108]	; (8013514 <__sfp+0x70>)
 80134a8:	681e      	ldr	r6, [r3, #0]
 80134aa:	69b3      	ldr	r3, [r6, #24]
 80134ac:	4607      	mov	r7, r0
 80134ae:	b913      	cbnz	r3, 80134b6 <__sfp+0x12>
 80134b0:	4630      	mov	r0, r6
 80134b2:	f7ff ffc7 	bl	8013444 <__sinit>
 80134b6:	3648      	adds	r6, #72	; 0x48
 80134b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80134bc:	3b01      	subs	r3, #1
 80134be:	d503      	bpl.n	80134c8 <__sfp+0x24>
 80134c0:	6833      	ldr	r3, [r6, #0]
 80134c2:	b133      	cbz	r3, 80134d2 <__sfp+0x2e>
 80134c4:	6836      	ldr	r6, [r6, #0]
 80134c6:	e7f7      	b.n	80134b8 <__sfp+0x14>
 80134c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80134cc:	b16d      	cbz	r5, 80134ea <__sfp+0x46>
 80134ce:	3468      	adds	r4, #104	; 0x68
 80134d0:	e7f4      	b.n	80134bc <__sfp+0x18>
 80134d2:	2104      	movs	r1, #4
 80134d4:	4638      	mov	r0, r7
 80134d6:	f7ff ff9f 	bl	8013418 <__sfmoreglue>
 80134da:	6030      	str	r0, [r6, #0]
 80134dc:	2800      	cmp	r0, #0
 80134de:	d1f1      	bne.n	80134c4 <__sfp+0x20>
 80134e0:	230c      	movs	r3, #12
 80134e2:	603b      	str	r3, [r7, #0]
 80134e4:	4604      	mov	r4, r0
 80134e6:	4620      	mov	r0, r4
 80134e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134ea:	4b0b      	ldr	r3, [pc, #44]	; (8013518 <__sfp+0x74>)
 80134ec:	6665      	str	r5, [r4, #100]	; 0x64
 80134ee:	e9c4 5500 	strd	r5, r5, [r4]
 80134f2:	60a5      	str	r5, [r4, #8]
 80134f4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80134f8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80134fc:	2208      	movs	r2, #8
 80134fe:	4629      	mov	r1, r5
 8013500:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013504:	f7ff fcb4 	bl	8012e70 <memset>
 8013508:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801350c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013510:	e7e9      	b.n	80134e6 <__sfp+0x42>
 8013512:	bf00      	nop
 8013514:	080145f0 	.word	0x080145f0
 8013518:	ffff0001 	.word	0xffff0001

0801351c <_fwalk_reent>:
 801351c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013520:	4680      	mov	r8, r0
 8013522:	4689      	mov	r9, r1
 8013524:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013528:	2600      	movs	r6, #0
 801352a:	b914      	cbnz	r4, 8013532 <_fwalk_reent+0x16>
 801352c:	4630      	mov	r0, r6
 801352e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013532:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8013536:	3f01      	subs	r7, #1
 8013538:	d501      	bpl.n	801353e <_fwalk_reent+0x22>
 801353a:	6824      	ldr	r4, [r4, #0]
 801353c:	e7f5      	b.n	801352a <_fwalk_reent+0xe>
 801353e:	89ab      	ldrh	r3, [r5, #12]
 8013540:	2b01      	cmp	r3, #1
 8013542:	d907      	bls.n	8013554 <_fwalk_reent+0x38>
 8013544:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013548:	3301      	adds	r3, #1
 801354a:	d003      	beq.n	8013554 <_fwalk_reent+0x38>
 801354c:	4629      	mov	r1, r5
 801354e:	4640      	mov	r0, r8
 8013550:	47c8      	blx	r9
 8013552:	4306      	orrs	r6, r0
 8013554:	3568      	adds	r5, #104	; 0x68
 8013556:	e7ee      	b.n	8013536 <_fwalk_reent+0x1a>

08013558 <__swhatbuf_r>:
 8013558:	b570      	push	{r4, r5, r6, lr}
 801355a:	460e      	mov	r6, r1
 801355c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013560:	2900      	cmp	r1, #0
 8013562:	b096      	sub	sp, #88	; 0x58
 8013564:	4614      	mov	r4, r2
 8013566:	461d      	mov	r5, r3
 8013568:	da07      	bge.n	801357a <__swhatbuf_r+0x22>
 801356a:	2300      	movs	r3, #0
 801356c:	602b      	str	r3, [r5, #0]
 801356e:	89b3      	ldrh	r3, [r6, #12]
 8013570:	061a      	lsls	r2, r3, #24
 8013572:	d410      	bmi.n	8013596 <__swhatbuf_r+0x3e>
 8013574:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013578:	e00e      	b.n	8013598 <__swhatbuf_r+0x40>
 801357a:	466a      	mov	r2, sp
 801357c:	f000 fc3e 	bl	8013dfc <_fstat_r>
 8013580:	2800      	cmp	r0, #0
 8013582:	dbf2      	blt.n	801356a <__swhatbuf_r+0x12>
 8013584:	9a01      	ldr	r2, [sp, #4]
 8013586:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801358a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801358e:	425a      	negs	r2, r3
 8013590:	415a      	adcs	r2, r3
 8013592:	602a      	str	r2, [r5, #0]
 8013594:	e7ee      	b.n	8013574 <__swhatbuf_r+0x1c>
 8013596:	2340      	movs	r3, #64	; 0x40
 8013598:	2000      	movs	r0, #0
 801359a:	6023      	str	r3, [r4, #0]
 801359c:	b016      	add	sp, #88	; 0x58
 801359e:	bd70      	pop	{r4, r5, r6, pc}

080135a0 <__smakebuf_r>:
 80135a0:	898b      	ldrh	r3, [r1, #12]
 80135a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80135a4:	079d      	lsls	r5, r3, #30
 80135a6:	4606      	mov	r6, r0
 80135a8:	460c      	mov	r4, r1
 80135aa:	d507      	bpl.n	80135bc <__smakebuf_r+0x1c>
 80135ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80135b0:	6023      	str	r3, [r4, #0]
 80135b2:	6123      	str	r3, [r4, #16]
 80135b4:	2301      	movs	r3, #1
 80135b6:	6163      	str	r3, [r4, #20]
 80135b8:	b002      	add	sp, #8
 80135ba:	bd70      	pop	{r4, r5, r6, pc}
 80135bc:	ab01      	add	r3, sp, #4
 80135be:	466a      	mov	r2, sp
 80135c0:	f7ff ffca 	bl	8013558 <__swhatbuf_r>
 80135c4:	9900      	ldr	r1, [sp, #0]
 80135c6:	4605      	mov	r5, r0
 80135c8:	4630      	mov	r0, r6
 80135ca:	f000 f87f 	bl	80136cc <_malloc_r>
 80135ce:	b948      	cbnz	r0, 80135e4 <__smakebuf_r+0x44>
 80135d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80135d4:	059a      	lsls	r2, r3, #22
 80135d6:	d4ef      	bmi.n	80135b8 <__smakebuf_r+0x18>
 80135d8:	f023 0303 	bic.w	r3, r3, #3
 80135dc:	f043 0302 	orr.w	r3, r3, #2
 80135e0:	81a3      	strh	r3, [r4, #12]
 80135e2:	e7e3      	b.n	80135ac <__smakebuf_r+0xc>
 80135e4:	4b0d      	ldr	r3, [pc, #52]	; (801361c <__smakebuf_r+0x7c>)
 80135e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80135e8:	89a3      	ldrh	r3, [r4, #12]
 80135ea:	6020      	str	r0, [r4, #0]
 80135ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80135f0:	81a3      	strh	r3, [r4, #12]
 80135f2:	9b00      	ldr	r3, [sp, #0]
 80135f4:	6163      	str	r3, [r4, #20]
 80135f6:	9b01      	ldr	r3, [sp, #4]
 80135f8:	6120      	str	r0, [r4, #16]
 80135fa:	b15b      	cbz	r3, 8013614 <__smakebuf_r+0x74>
 80135fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013600:	4630      	mov	r0, r6
 8013602:	f000 fc0d 	bl	8013e20 <_isatty_r>
 8013606:	b128      	cbz	r0, 8013614 <__smakebuf_r+0x74>
 8013608:	89a3      	ldrh	r3, [r4, #12]
 801360a:	f023 0303 	bic.w	r3, r3, #3
 801360e:	f043 0301 	orr.w	r3, r3, #1
 8013612:	81a3      	strh	r3, [r4, #12]
 8013614:	89a3      	ldrh	r3, [r4, #12]
 8013616:	431d      	orrs	r5, r3
 8013618:	81a5      	strh	r5, [r4, #12]
 801361a:	e7cd      	b.n	80135b8 <__smakebuf_r+0x18>
 801361c:	0801340d 	.word	0x0801340d

08013620 <malloc>:
 8013620:	4b02      	ldr	r3, [pc, #8]	; (801362c <malloc+0xc>)
 8013622:	4601      	mov	r1, r0
 8013624:	6818      	ldr	r0, [r3, #0]
 8013626:	f000 b851 	b.w	80136cc <_malloc_r>
 801362a:	bf00      	nop
 801362c:	20000084 	.word	0x20000084

08013630 <_free_r>:
 8013630:	b538      	push	{r3, r4, r5, lr}
 8013632:	4605      	mov	r5, r0
 8013634:	2900      	cmp	r1, #0
 8013636:	d045      	beq.n	80136c4 <_free_r+0x94>
 8013638:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801363c:	1f0c      	subs	r4, r1, #4
 801363e:	2b00      	cmp	r3, #0
 8013640:	bfb8      	it	lt
 8013642:	18e4      	addlt	r4, r4, r3
 8013644:	f000 fc0e 	bl	8013e64 <__malloc_lock>
 8013648:	4a1f      	ldr	r2, [pc, #124]	; (80136c8 <_free_r+0x98>)
 801364a:	6813      	ldr	r3, [r2, #0]
 801364c:	4610      	mov	r0, r2
 801364e:	b933      	cbnz	r3, 801365e <_free_r+0x2e>
 8013650:	6063      	str	r3, [r4, #4]
 8013652:	6014      	str	r4, [r2, #0]
 8013654:	4628      	mov	r0, r5
 8013656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801365a:	f000 bc04 	b.w	8013e66 <__malloc_unlock>
 801365e:	42a3      	cmp	r3, r4
 8013660:	d90c      	bls.n	801367c <_free_r+0x4c>
 8013662:	6821      	ldr	r1, [r4, #0]
 8013664:	1862      	adds	r2, r4, r1
 8013666:	4293      	cmp	r3, r2
 8013668:	bf04      	itt	eq
 801366a:	681a      	ldreq	r2, [r3, #0]
 801366c:	685b      	ldreq	r3, [r3, #4]
 801366e:	6063      	str	r3, [r4, #4]
 8013670:	bf04      	itt	eq
 8013672:	1852      	addeq	r2, r2, r1
 8013674:	6022      	streq	r2, [r4, #0]
 8013676:	6004      	str	r4, [r0, #0]
 8013678:	e7ec      	b.n	8013654 <_free_r+0x24>
 801367a:	4613      	mov	r3, r2
 801367c:	685a      	ldr	r2, [r3, #4]
 801367e:	b10a      	cbz	r2, 8013684 <_free_r+0x54>
 8013680:	42a2      	cmp	r2, r4
 8013682:	d9fa      	bls.n	801367a <_free_r+0x4a>
 8013684:	6819      	ldr	r1, [r3, #0]
 8013686:	1858      	adds	r0, r3, r1
 8013688:	42a0      	cmp	r0, r4
 801368a:	d10b      	bne.n	80136a4 <_free_r+0x74>
 801368c:	6820      	ldr	r0, [r4, #0]
 801368e:	4401      	add	r1, r0
 8013690:	1858      	adds	r0, r3, r1
 8013692:	4282      	cmp	r2, r0
 8013694:	6019      	str	r1, [r3, #0]
 8013696:	d1dd      	bne.n	8013654 <_free_r+0x24>
 8013698:	6810      	ldr	r0, [r2, #0]
 801369a:	6852      	ldr	r2, [r2, #4]
 801369c:	605a      	str	r2, [r3, #4]
 801369e:	4401      	add	r1, r0
 80136a0:	6019      	str	r1, [r3, #0]
 80136a2:	e7d7      	b.n	8013654 <_free_r+0x24>
 80136a4:	d902      	bls.n	80136ac <_free_r+0x7c>
 80136a6:	230c      	movs	r3, #12
 80136a8:	602b      	str	r3, [r5, #0]
 80136aa:	e7d3      	b.n	8013654 <_free_r+0x24>
 80136ac:	6820      	ldr	r0, [r4, #0]
 80136ae:	1821      	adds	r1, r4, r0
 80136b0:	428a      	cmp	r2, r1
 80136b2:	bf04      	itt	eq
 80136b4:	6811      	ldreq	r1, [r2, #0]
 80136b6:	6852      	ldreq	r2, [r2, #4]
 80136b8:	6062      	str	r2, [r4, #4]
 80136ba:	bf04      	itt	eq
 80136bc:	1809      	addeq	r1, r1, r0
 80136be:	6021      	streq	r1, [r4, #0]
 80136c0:	605c      	str	r4, [r3, #4]
 80136c2:	e7c7      	b.n	8013654 <_free_r+0x24>
 80136c4:	bd38      	pop	{r3, r4, r5, pc}
 80136c6:	bf00      	nop
 80136c8:	20000118 	.word	0x20000118

080136cc <_malloc_r>:
 80136cc:	b570      	push	{r4, r5, r6, lr}
 80136ce:	1ccd      	adds	r5, r1, #3
 80136d0:	f025 0503 	bic.w	r5, r5, #3
 80136d4:	3508      	adds	r5, #8
 80136d6:	2d0c      	cmp	r5, #12
 80136d8:	bf38      	it	cc
 80136da:	250c      	movcc	r5, #12
 80136dc:	2d00      	cmp	r5, #0
 80136de:	4606      	mov	r6, r0
 80136e0:	db01      	blt.n	80136e6 <_malloc_r+0x1a>
 80136e2:	42a9      	cmp	r1, r5
 80136e4:	d903      	bls.n	80136ee <_malloc_r+0x22>
 80136e6:	230c      	movs	r3, #12
 80136e8:	6033      	str	r3, [r6, #0]
 80136ea:	2000      	movs	r0, #0
 80136ec:	bd70      	pop	{r4, r5, r6, pc}
 80136ee:	f000 fbb9 	bl	8013e64 <__malloc_lock>
 80136f2:	4a21      	ldr	r2, [pc, #132]	; (8013778 <_malloc_r+0xac>)
 80136f4:	6814      	ldr	r4, [r2, #0]
 80136f6:	4621      	mov	r1, r4
 80136f8:	b991      	cbnz	r1, 8013720 <_malloc_r+0x54>
 80136fa:	4c20      	ldr	r4, [pc, #128]	; (801377c <_malloc_r+0xb0>)
 80136fc:	6823      	ldr	r3, [r4, #0]
 80136fe:	b91b      	cbnz	r3, 8013708 <_malloc_r+0x3c>
 8013700:	4630      	mov	r0, r6
 8013702:	f000 fb05 	bl	8013d10 <_sbrk_r>
 8013706:	6020      	str	r0, [r4, #0]
 8013708:	4629      	mov	r1, r5
 801370a:	4630      	mov	r0, r6
 801370c:	f000 fb00 	bl	8013d10 <_sbrk_r>
 8013710:	1c43      	adds	r3, r0, #1
 8013712:	d124      	bne.n	801375e <_malloc_r+0x92>
 8013714:	230c      	movs	r3, #12
 8013716:	6033      	str	r3, [r6, #0]
 8013718:	4630      	mov	r0, r6
 801371a:	f000 fba4 	bl	8013e66 <__malloc_unlock>
 801371e:	e7e4      	b.n	80136ea <_malloc_r+0x1e>
 8013720:	680b      	ldr	r3, [r1, #0]
 8013722:	1b5b      	subs	r3, r3, r5
 8013724:	d418      	bmi.n	8013758 <_malloc_r+0x8c>
 8013726:	2b0b      	cmp	r3, #11
 8013728:	d90f      	bls.n	801374a <_malloc_r+0x7e>
 801372a:	600b      	str	r3, [r1, #0]
 801372c:	50cd      	str	r5, [r1, r3]
 801372e:	18cc      	adds	r4, r1, r3
 8013730:	4630      	mov	r0, r6
 8013732:	f000 fb98 	bl	8013e66 <__malloc_unlock>
 8013736:	f104 000b 	add.w	r0, r4, #11
 801373a:	1d23      	adds	r3, r4, #4
 801373c:	f020 0007 	bic.w	r0, r0, #7
 8013740:	1ac3      	subs	r3, r0, r3
 8013742:	d0d3      	beq.n	80136ec <_malloc_r+0x20>
 8013744:	425a      	negs	r2, r3
 8013746:	50e2      	str	r2, [r4, r3]
 8013748:	e7d0      	b.n	80136ec <_malloc_r+0x20>
 801374a:	428c      	cmp	r4, r1
 801374c:	684b      	ldr	r3, [r1, #4]
 801374e:	bf16      	itet	ne
 8013750:	6063      	strne	r3, [r4, #4]
 8013752:	6013      	streq	r3, [r2, #0]
 8013754:	460c      	movne	r4, r1
 8013756:	e7eb      	b.n	8013730 <_malloc_r+0x64>
 8013758:	460c      	mov	r4, r1
 801375a:	6849      	ldr	r1, [r1, #4]
 801375c:	e7cc      	b.n	80136f8 <_malloc_r+0x2c>
 801375e:	1cc4      	adds	r4, r0, #3
 8013760:	f024 0403 	bic.w	r4, r4, #3
 8013764:	42a0      	cmp	r0, r4
 8013766:	d005      	beq.n	8013774 <_malloc_r+0xa8>
 8013768:	1a21      	subs	r1, r4, r0
 801376a:	4630      	mov	r0, r6
 801376c:	f000 fad0 	bl	8013d10 <_sbrk_r>
 8013770:	3001      	adds	r0, #1
 8013772:	d0cf      	beq.n	8013714 <_malloc_r+0x48>
 8013774:	6025      	str	r5, [r4, #0]
 8013776:	e7db      	b.n	8013730 <_malloc_r+0x64>
 8013778:	20000118 	.word	0x20000118
 801377c:	2000011c 	.word	0x2000011c

08013780 <__sfputc_r>:
 8013780:	6893      	ldr	r3, [r2, #8]
 8013782:	3b01      	subs	r3, #1
 8013784:	2b00      	cmp	r3, #0
 8013786:	b410      	push	{r4}
 8013788:	6093      	str	r3, [r2, #8]
 801378a:	da08      	bge.n	801379e <__sfputc_r+0x1e>
 801378c:	6994      	ldr	r4, [r2, #24]
 801378e:	42a3      	cmp	r3, r4
 8013790:	db01      	blt.n	8013796 <__sfputc_r+0x16>
 8013792:	290a      	cmp	r1, #10
 8013794:	d103      	bne.n	801379e <__sfputc_r+0x1e>
 8013796:	f85d 4b04 	ldr.w	r4, [sp], #4
 801379a:	f7ff bca3 	b.w	80130e4 <__swbuf_r>
 801379e:	6813      	ldr	r3, [r2, #0]
 80137a0:	1c58      	adds	r0, r3, #1
 80137a2:	6010      	str	r0, [r2, #0]
 80137a4:	7019      	strb	r1, [r3, #0]
 80137a6:	4608      	mov	r0, r1
 80137a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80137ac:	4770      	bx	lr

080137ae <__sfputs_r>:
 80137ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137b0:	4606      	mov	r6, r0
 80137b2:	460f      	mov	r7, r1
 80137b4:	4614      	mov	r4, r2
 80137b6:	18d5      	adds	r5, r2, r3
 80137b8:	42ac      	cmp	r4, r5
 80137ba:	d101      	bne.n	80137c0 <__sfputs_r+0x12>
 80137bc:	2000      	movs	r0, #0
 80137be:	e007      	b.n	80137d0 <__sfputs_r+0x22>
 80137c0:	463a      	mov	r2, r7
 80137c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137c6:	4630      	mov	r0, r6
 80137c8:	f7ff ffda 	bl	8013780 <__sfputc_r>
 80137cc:	1c43      	adds	r3, r0, #1
 80137ce:	d1f3      	bne.n	80137b8 <__sfputs_r+0xa>
 80137d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080137d4 <_vfiprintf_r>:
 80137d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137d8:	460c      	mov	r4, r1
 80137da:	b09d      	sub	sp, #116	; 0x74
 80137dc:	4617      	mov	r7, r2
 80137de:	461d      	mov	r5, r3
 80137e0:	4606      	mov	r6, r0
 80137e2:	b118      	cbz	r0, 80137ec <_vfiprintf_r+0x18>
 80137e4:	6983      	ldr	r3, [r0, #24]
 80137e6:	b90b      	cbnz	r3, 80137ec <_vfiprintf_r+0x18>
 80137e8:	f7ff fe2c 	bl	8013444 <__sinit>
 80137ec:	4b7c      	ldr	r3, [pc, #496]	; (80139e0 <_vfiprintf_r+0x20c>)
 80137ee:	429c      	cmp	r4, r3
 80137f0:	d158      	bne.n	80138a4 <_vfiprintf_r+0xd0>
 80137f2:	6874      	ldr	r4, [r6, #4]
 80137f4:	89a3      	ldrh	r3, [r4, #12]
 80137f6:	0718      	lsls	r0, r3, #28
 80137f8:	d55e      	bpl.n	80138b8 <_vfiprintf_r+0xe4>
 80137fa:	6923      	ldr	r3, [r4, #16]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d05b      	beq.n	80138b8 <_vfiprintf_r+0xe4>
 8013800:	2300      	movs	r3, #0
 8013802:	9309      	str	r3, [sp, #36]	; 0x24
 8013804:	2320      	movs	r3, #32
 8013806:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801380a:	2330      	movs	r3, #48	; 0x30
 801380c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013810:	9503      	str	r5, [sp, #12]
 8013812:	f04f 0b01 	mov.w	fp, #1
 8013816:	46b8      	mov	r8, r7
 8013818:	4645      	mov	r5, r8
 801381a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801381e:	b10b      	cbz	r3, 8013824 <_vfiprintf_r+0x50>
 8013820:	2b25      	cmp	r3, #37	; 0x25
 8013822:	d154      	bne.n	80138ce <_vfiprintf_r+0xfa>
 8013824:	ebb8 0a07 	subs.w	sl, r8, r7
 8013828:	d00b      	beq.n	8013842 <_vfiprintf_r+0x6e>
 801382a:	4653      	mov	r3, sl
 801382c:	463a      	mov	r2, r7
 801382e:	4621      	mov	r1, r4
 8013830:	4630      	mov	r0, r6
 8013832:	f7ff ffbc 	bl	80137ae <__sfputs_r>
 8013836:	3001      	adds	r0, #1
 8013838:	f000 80c2 	beq.w	80139c0 <_vfiprintf_r+0x1ec>
 801383c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801383e:	4453      	add	r3, sl
 8013840:	9309      	str	r3, [sp, #36]	; 0x24
 8013842:	f898 3000 	ldrb.w	r3, [r8]
 8013846:	2b00      	cmp	r3, #0
 8013848:	f000 80ba 	beq.w	80139c0 <_vfiprintf_r+0x1ec>
 801384c:	2300      	movs	r3, #0
 801384e:	f04f 32ff 	mov.w	r2, #4294967295
 8013852:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013856:	9304      	str	r3, [sp, #16]
 8013858:	9307      	str	r3, [sp, #28]
 801385a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801385e:	931a      	str	r3, [sp, #104]	; 0x68
 8013860:	46a8      	mov	r8, r5
 8013862:	2205      	movs	r2, #5
 8013864:	f818 1b01 	ldrb.w	r1, [r8], #1
 8013868:	485e      	ldr	r0, [pc, #376]	; (80139e4 <_vfiprintf_r+0x210>)
 801386a:	f7ec fcb1 	bl	80001d0 <memchr>
 801386e:	9b04      	ldr	r3, [sp, #16]
 8013870:	bb78      	cbnz	r0, 80138d2 <_vfiprintf_r+0xfe>
 8013872:	06d9      	lsls	r1, r3, #27
 8013874:	bf44      	itt	mi
 8013876:	2220      	movmi	r2, #32
 8013878:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801387c:	071a      	lsls	r2, r3, #28
 801387e:	bf44      	itt	mi
 8013880:	222b      	movmi	r2, #43	; 0x2b
 8013882:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013886:	782a      	ldrb	r2, [r5, #0]
 8013888:	2a2a      	cmp	r2, #42	; 0x2a
 801388a:	d02a      	beq.n	80138e2 <_vfiprintf_r+0x10e>
 801388c:	9a07      	ldr	r2, [sp, #28]
 801388e:	46a8      	mov	r8, r5
 8013890:	2000      	movs	r0, #0
 8013892:	250a      	movs	r5, #10
 8013894:	4641      	mov	r1, r8
 8013896:	f811 3b01 	ldrb.w	r3, [r1], #1
 801389a:	3b30      	subs	r3, #48	; 0x30
 801389c:	2b09      	cmp	r3, #9
 801389e:	d969      	bls.n	8013974 <_vfiprintf_r+0x1a0>
 80138a0:	b360      	cbz	r0, 80138fc <_vfiprintf_r+0x128>
 80138a2:	e024      	b.n	80138ee <_vfiprintf_r+0x11a>
 80138a4:	4b50      	ldr	r3, [pc, #320]	; (80139e8 <_vfiprintf_r+0x214>)
 80138a6:	429c      	cmp	r4, r3
 80138a8:	d101      	bne.n	80138ae <_vfiprintf_r+0xda>
 80138aa:	68b4      	ldr	r4, [r6, #8]
 80138ac:	e7a2      	b.n	80137f4 <_vfiprintf_r+0x20>
 80138ae:	4b4f      	ldr	r3, [pc, #316]	; (80139ec <_vfiprintf_r+0x218>)
 80138b0:	429c      	cmp	r4, r3
 80138b2:	bf08      	it	eq
 80138b4:	68f4      	ldreq	r4, [r6, #12]
 80138b6:	e79d      	b.n	80137f4 <_vfiprintf_r+0x20>
 80138b8:	4621      	mov	r1, r4
 80138ba:	4630      	mov	r0, r6
 80138bc:	f7ff fc64 	bl	8013188 <__swsetup_r>
 80138c0:	2800      	cmp	r0, #0
 80138c2:	d09d      	beq.n	8013800 <_vfiprintf_r+0x2c>
 80138c4:	f04f 30ff 	mov.w	r0, #4294967295
 80138c8:	b01d      	add	sp, #116	; 0x74
 80138ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138ce:	46a8      	mov	r8, r5
 80138d0:	e7a2      	b.n	8013818 <_vfiprintf_r+0x44>
 80138d2:	4a44      	ldr	r2, [pc, #272]	; (80139e4 <_vfiprintf_r+0x210>)
 80138d4:	1a80      	subs	r0, r0, r2
 80138d6:	fa0b f000 	lsl.w	r0, fp, r0
 80138da:	4318      	orrs	r0, r3
 80138dc:	9004      	str	r0, [sp, #16]
 80138de:	4645      	mov	r5, r8
 80138e0:	e7be      	b.n	8013860 <_vfiprintf_r+0x8c>
 80138e2:	9a03      	ldr	r2, [sp, #12]
 80138e4:	1d11      	adds	r1, r2, #4
 80138e6:	6812      	ldr	r2, [r2, #0]
 80138e8:	9103      	str	r1, [sp, #12]
 80138ea:	2a00      	cmp	r2, #0
 80138ec:	db01      	blt.n	80138f2 <_vfiprintf_r+0x11e>
 80138ee:	9207      	str	r2, [sp, #28]
 80138f0:	e004      	b.n	80138fc <_vfiprintf_r+0x128>
 80138f2:	4252      	negs	r2, r2
 80138f4:	f043 0302 	orr.w	r3, r3, #2
 80138f8:	9207      	str	r2, [sp, #28]
 80138fa:	9304      	str	r3, [sp, #16]
 80138fc:	f898 3000 	ldrb.w	r3, [r8]
 8013900:	2b2e      	cmp	r3, #46	; 0x2e
 8013902:	d10e      	bne.n	8013922 <_vfiprintf_r+0x14e>
 8013904:	f898 3001 	ldrb.w	r3, [r8, #1]
 8013908:	2b2a      	cmp	r3, #42	; 0x2a
 801390a:	d138      	bne.n	801397e <_vfiprintf_r+0x1aa>
 801390c:	9b03      	ldr	r3, [sp, #12]
 801390e:	1d1a      	adds	r2, r3, #4
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	9203      	str	r2, [sp, #12]
 8013914:	2b00      	cmp	r3, #0
 8013916:	bfb8      	it	lt
 8013918:	f04f 33ff 	movlt.w	r3, #4294967295
 801391c:	f108 0802 	add.w	r8, r8, #2
 8013920:	9305      	str	r3, [sp, #20]
 8013922:	4d33      	ldr	r5, [pc, #204]	; (80139f0 <_vfiprintf_r+0x21c>)
 8013924:	f898 1000 	ldrb.w	r1, [r8]
 8013928:	2203      	movs	r2, #3
 801392a:	4628      	mov	r0, r5
 801392c:	f7ec fc50 	bl	80001d0 <memchr>
 8013930:	b140      	cbz	r0, 8013944 <_vfiprintf_r+0x170>
 8013932:	2340      	movs	r3, #64	; 0x40
 8013934:	1b40      	subs	r0, r0, r5
 8013936:	fa03 f000 	lsl.w	r0, r3, r0
 801393a:	9b04      	ldr	r3, [sp, #16]
 801393c:	4303      	orrs	r3, r0
 801393e:	f108 0801 	add.w	r8, r8, #1
 8013942:	9304      	str	r3, [sp, #16]
 8013944:	f898 1000 	ldrb.w	r1, [r8]
 8013948:	482a      	ldr	r0, [pc, #168]	; (80139f4 <_vfiprintf_r+0x220>)
 801394a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801394e:	2206      	movs	r2, #6
 8013950:	f108 0701 	add.w	r7, r8, #1
 8013954:	f7ec fc3c 	bl	80001d0 <memchr>
 8013958:	2800      	cmp	r0, #0
 801395a:	d037      	beq.n	80139cc <_vfiprintf_r+0x1f8>
 801395c:	4b26      	ldr	r3, [pc, #152]	; (80139f8 <_vfiprintf_r+0x224>)
 801395e:	bb1b      	cbnz	r3, 80139a8 <_vfiprintf_r+0x1d4>
 8013960:	9b03      	ldr	r3, [sp, #12]
 8013962:	3307      	adds	r3, #7
 8013964:	f023 0307 	bic.w	r3, r3, #7
 8013968:	3308      	adds	r3, #8
 801396a:	9303      	str	r3, [sp, #12]
 801396c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801396e:	444b      	add	r3, r9
 8013970:	9309      	str	r3, [sp, #36]	; 0x24
 8013972:	e750      	b.n	8013816 <_vfiprintf_r+0x42>
 8013974:	fb05 3202 	mla	r2, r5, r2, r3
 8013978:	2001      	movs	r0, #1
 801397a:	4688      	mov	r8, r1
 801397c:	e78a      	b.n	8013894 <_vfiprintf_r+0xc0>
 801397e:	2300      	movs	r3, #0
 8013980:	f108 0801 	add.w	r8, r8, #1
 8013984:	9305      	str	r3, [sp, #20]
 8013986:	4619      	mov	r1, r3
 8013988:	250a      	movs	r5, #10
 801398a:	4640      	mov	r0, r8
 801398c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013990:	3a30      	subs	r2, #48	; 0x30
 8013992:	2a09      	cmp	r2, #9
 8013994:	d903      	bls.n	801399e <_vfiprintf_r+0x1ca>
 8013996:	2b00      	cmp	r3, #0
 8013998:	d0c3      	beq.n	8013922 <_vfiprintf_r+0x14e>
 801399a:	9105      	str	r1, [sp, #20]
 801399c:	e7c1      	b.n	8013922 <_vfiprintf_r+0x14e>
 801399e:	fb05 2101 	mla	r1, r5, r1, r2
 80139a2:	2301      	movs	r3, #1
 80139a4:	4680      	mov	r8, r0
 80139a6:	e7f0      	b.n	801398a <_vfiprintf_r+0x1b6>
 80139a8:	ab03      	add	r3, sp, #12
 80139aa:	9300      	str	r3, [sp, #0]
 80139ac:	4622      	mov	r2, r4
 80139ae:	4b13      	ldr	r3, [pc, #76]	; (80139fc <_vfiprintf_r+0x228>)
 80139b0:	a904      	add	r1, sp, #16
 80139b2:	4630      	mov	r0, r6
 80139b4:	f3af 8000 	nop.w
 80139b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80139bc:	4681      	mov	r9, r0
 80139be:	d1d5      	bne.n	801396c <_vfiprintf_r+0x198>
 80139c0:	89a3      	ldrh	r3, [r4, #12]
 80139c2:	065b      	lsls	r3, r3, #25
 80139c4:	f53f af7e 	bmi.w	80138c4 <_vfiprintf_r+0xf0>
 80139c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80139ca:	e77d      	b.n	80138c8 <_vfiprintf_r+0xf4>
 80139cc:	ab03      	add	r3, sp, #12
 80139ce:	9300      	str	r3, [sp, #0]
 80139d0:	4622      	mov	r2, r4
 80139d2:	4b0a      	ldr	r3, [pc, #40]	; (80139fc <_vfiprintf_r+0x228>)
 80139d4:	a904      	add	r1, sp, #16
 80139d6:	4630      	mov	r0, r6
 80139d8:	f000 f888 	bl	8013aec <_printf_i>
 80139dc:	e7ec      	b.n	80139b8 <_vfiprintf_r+0x1e4>
 80139de:	bf00      	nop
 80139e0:	08014614 	.word	0x08014614
 80139e4:	08014654 	.word	0x08014654
 80139e8:	08014634 	.word	0x08014634
 80139ec:	080145f4 	.word	0x080145f4
 80139f0:	0801465a 	.word	0x0801465a
 80139f4:	0801465e 	.word	0x0801465e
 80139f8:	00000000 	.word	0x00000000
 80139fc:	080137af 	.word	0x080137af

08013a00 <_printf_common>:
 8013a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a04:	4691      	mov	r9, r2
 8013a06:	461f      	mov	r7, r3
 8013a08:	688a      	ldr	r2, [r1, #8]
 8013a0a:	690b      	ldr	r3, [r1, #16]
 8013a0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013a10:	4293      	cmp	r3, r2
 8013a12:	bfb8      	it	lt
 8013a14:	4613      	movlt	r3, r2
 8013a16:	f8c9 3000 	str.w	r3, [r9]
 8013a1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013a1e:	4606      	mov	r6, r0
 8013a20:	460c      	mov	r4, r1
 8013a22:	b112      	cbz	r2, 8013a2a <_printf_common+0x2a>
 8013a24:	3301      	adds	r3, #1
 8013a26:	f8c9 3000 	str.w	r3, [r9]
 8013a2a:	6823      	ldr	r3, [r4, #0]
 8013a2c:	0699      	lsls	r1, r3, #26
 8013a2e:	bf42      	ittt	mi
 8013a30:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013a34:	3302      	addmi	r3, #2
 8013a36:	f8c9 3000 	strmi.w	r3, [r9]
 8013a3a:	6825      	ldr	r5, [r4, #0]
 8013a3c:	f015 0506 	ands.w	r5, r5, #6
 8013a40:	d107      	bne.n	8013a52 <_printf_common+0x52>
 8013a42:	f104 0a19 	add.w	sl, r4, #25
 8013a46:	68e3      	ldr	r3, [r4, #12]
 8013a48:	f8d9 2000 	ldr.w	r2, [r9]
 8013a4c:	1a9b      	subs	r3, r3, r2
 8013a4e:	42ab      	cmp	r3, r5
 8013a50:	dc28      	bgt.n	8013aa4 <_printf_common+0xa4>
 8013a52:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8013a56:	6822      	ldr	r2, [r4, #0]
 8013a58:	3300      	adds	r3, #0
 8013a5a:	bf18      	it	ne
 8013a5c:	2301      	movne	r3, #1
 8013a5e:	0692      	lsls	r2, r2, #26
 8013a60:	d42d      	bmi.n	8013abe <_printf_common+0xbe>
 8013a62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013a66:	4639      	mov	r1, r7
 8013a68:	4630      	mov	r0, r6
 8013a6a:	47c0      	blx	r8
 8013a6c:	3001      	adds	r0, #1
 8013a6e:	d020      	beq.n	8013ab2 <_printf_common+0xb2>
 8013a70:	6823      	ldr	r3, [r4, #0]
 8013a72:	68e5      	ldr	r5, [r4, #12]
 8013a74:	f8d9 2000 	ldr.w	r2, [r9]
 8013a78:	f003 0306 	and.w	r3, r3, #6
 8013a7c:	2b04      	cmp	r3, #4
 8013a7e:	bf08      	it	eq
 8013a80:	1aad      	subeq	r5, r5, r2
 8013a82:	68a3      	ldr	r3, [r4, #8]
 8013a84:	6922      	ldr	r2, [r4, #16]
 8013a86:	bf0c      	ite	eq
 8013a88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013a8c:	2500      	movne	r5, #0
 8013a8e:	4293      	cmp	r3, r2
 8013a90:	bfc4      	itt	gt
 8013a92:	1a9b      	subgt	r3, r3, r2
 8013a94:	18ed      	addgt	r5, r5, r3
 8013a96:	f04f 0900 	mov.w	r9, #0
 8013a9a:	341a      	adds	r4, #26
 8013a9c:	454d      	cmp	r5, r9
 8013a9e:	d11a      	bne.n	8013ad6 <_printf_common+0xd6>
 8013aa0:	2000      	movs	r0, #0
 8013aa2:	e008      	b.n	8013ab6 <_printf_common+0xb6>
 8013aa4:	2301      	movs	r3, #1
 8013aa6:	4652      	mov	r2, sl
 8013aa8:	4639      	mov	r1, r7
 8013aaa:	4630      	mov	r0, r6
 8013aac:	47c0      	blx	r8
 8013aae:	3001      	adds	r0, #1
 8013ab0:	d103      	bne.n	8013aba <_printf_common+0xba>
 8013ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8013ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013aba:	3501      	adds	r5, #1
 8013abc:	e7c3      	b.n	8013a46 <_printf_common+0x46>
 8013abe:	18e1      	adds	r1, r4, r3
 8013ac0:	1c5a      	adds	r2, r3, #1
 8013ac2:	2030      	movs	r0, #48	; 0x30
 8013ac4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013ac8:	4422      	add	r2, r4
 8013aca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013ace:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013ad2:	3302      	adds	r3, #2
 8013ad4:	e7c5      	b.n	8013a62 <_printf_common+0x62>
 8013ad6:	2301      	movs	r3, #1
 8013ad8:	4622      	mov	r2, r4
 8013ada:	4639      	mov	r1, r7
 8013adc:	4630      	mov	r0, r6
 8013ade:	47c0      	blx	r8
 8013ae0:	3001      	adds	r0, #1
 8013ae2:	d0e6      	beq.n	8013ab2 <_printf_common+0xb2>
 8013ae4:	f109 0901 	add.w	r9, r9, #1
 8013ae8:	e7d8      	b.n	8013a9c <_printf_common+0x9c>
	...

08013aec <_printf_i>:
 8013aec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013af0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013af4:	460c      	mov	r4, r1
 8013af6:	7e09      	ldrb	r1, [r1, #24]
 8013af8:	b085      	sub	sp, #20
 8013afa:	296e      	cmp	r1, #110	; 0x6e
 8013afc:	4617      	mov	r7, r2
 8013afe:	4606      	mov	r6, r0
 8013b00:	4698      	mov	r8, r3
 8013b02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013b04:	f000 80b3 	beq.w	8013c6e <_printf_i+0x182>
 8013b08:	d822      	bhi.n	8013b50 <_printf_i+0x64>
 8013b0a:	2963      	cmp	r1, #99	; 0x63
 8013b0c:	d036      	beq.n	8013b7c <_printf_i+0x90>
 8013b0e:	d80a      	bhi.n	8013b26 <_printf_i+0x3a>
 8013b10:	2900      	cmp	r1, #0
 8013b12:	f000 80b9 	beq.w	8013c88 <_printf_i+0x19c>
 8013b16:	2958      	cmp	r1, #88	; 0x58
 8013b18:	f000 8083 	beq.w	8013c22 <_printf_i+0x136>
 8013b1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013b20:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013b24:	e032      	b.n	8013b8c <_printf_i+0xa0>
 8013b26:	2964      	cmp	r1, #100	; 0x64
 8013b28:	d001      	beq.n	8013b2e <_printf_i+0x42>
 8013b2a:	2969      	cmp	r1, #105	; 0x69
 8013b2c:	d1f6      	bne.n	8013b1c <_printf_i+0x30>
 8013b2e:	6820      	ldr	r0, [r4, #0]
 8013b30:	6813      	ldr	r3, [r2, #0]
 8013b32:	0605      	lsls	r5, r0, #24
 8013b34:	f103 0104 	add.w	r1, r3, #4
 8013b38:	d52a      	bpl.n	8013b90 <_printf_i+0xa4>
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	6011      	str	r1, [r2, #0]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	da03      	bge.n	8013b4a <_printf_i+0x5e>
 8013b42:	222d      	movs	r2, #45	; 0x2d
 8013b44:	425b      	negs	r3, r3
 8013b46:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8013b4a:	486f      	ldr	r0, [pc, #444]	; (8013d08 <_printf_i+0x21c>)
 8013b4c:	220a      	movs	r2, #10
 8013b4e:	e039      	b.n	8013bc4 <_printf_i+0xd8>
 8013b50:	2973      	cmp	r1, #115	; 0x73
 8013b52:	f000 809d 	beq.w	8013c90 <_printf_i+0x1a4>
 8013b56:	d808      	bhi.n	8013b6a <_printf_i+0x7e>
 8013b58:	296f      	cmp	r1, #111	; 0x6f
 8013b5a:	d020      	beq.n	8013b9e <_printf_i+0xb2>
 8013b5c:	2970      	cmp	r1, #112	; 0x70
 8013b5e:	d1dd      	bne.n	8013b1c <_printf_i+0x30>
 8013b60:	6823      	ldr	r3, [r4, #0]
 8013b62:	f043 0320 	orr.w	r3, r3, #32
 8013b66:	6023      	str	r3, [r4, #0]
 8013b68:	e003      	b.n	8013b72 <_printf_i+0x86>
 8013b6a:	2975      	cmp	r1, #117	; 0x75
 8013b6c:	d017      	beq.n	8013b9e <_printf_i+0xb2>
 8013b6e:	2978      	cmp	r1, #120	; 0x78
 8013b70:	d1d4      	bne.n	8013b1c <_printf_i+0x30>
 8013b72:	2378      	movs	r3, #120	; 0x78
 8013b74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013b78:	4864      	ldr	r0, [pc, #400]	; (8013d0c <_printf_i+0x220>)
 8013b7a:	e055      	b.n	8013c28 <_printf_i+0x13c>
 8013b7c:	6813      	ldr	r3, [r2, #0]
 8013b7e:	1d19      	adds	r1, r3, #4
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	6011      	str	r1, [r2, #0]
 8013b84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013b88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013b8c:	2301      	movs	r3, #1
 8013b8e:	e08c      	b.n	8013caa <_printf_i+0x1be>
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	6011      	str	r1, [r2, #0]
 8013b94:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013b98:	bf18      	it	ne
 8013b9a:	b21b      	sxthne	r3, r3
 8013b9c:	e7cf      	b.n	8013b3e <_printf_i+0x52>
 8013b9e:	6813      	ldr	r3, [r2, #0]
 8013ba0:	6825      	ldr	r5, [r4, #0]
 8013ba2:	1d18      	adds	r0, r3, #4
 8013ba4:	6010      	str	r0, [r2, #0]
 8013ba6:	0628      	lsls	r0, r5, #24
 8013ba8:	d501      	bpl.n	8013bae <_printf_i+0xc2>
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	e002      	b.n	8013bb4 <_printf_i+0xc8>
 8013bae:	0668      	lsls	r0, r5, #25
 8013bb0:	d5fb      	bpl.n	8013baa <_printf_i+0xbe>
 8013bb2:	881b      	ldrh	r3, [r3, #0]
 8013bb4:	4854      	ldr	r0, [pc, #336]	; (8013d08 <_printf_i+0x21c>)
 8013bb6:	296f      	cmp	r1, #111	; 0x6f
 8013bb8:	bf14      	ite	ne
 8013bba:	220a      	movne	r2, #10
 8013bbc:	2208      	moveq	r2, #8
 8013bbe:	2100      	movs	r1, #0
 8013bc0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013bc4:	6865      	ldr	r5, [r4, #4]
 8013bc6:	60a5      	str	r5, [r4, #8]
 8013bc8:	2d00      	cmp	r5, #0
 8013bca:	f2c0 8095 	blt.w	8013cf8 <_printf_i+0x20c>
 8013bce:	6821      	ldr	r1, [r4, #0]
 8013bd0:	f021 0104 	bic.w	r1, r1, #4
 8013bd4:	6021      	str	r1, [r4, #0]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d13d      	bne.n	8013c56 <_printf_i+0x16a>
 8013bda:	2d00      	cmp	r5, #0
 8013bdc:	f040 808e 	bne.w	8013cfc <_printf_i+0x210>
 8013be0:	4665      	mov	r5, ip
 8013be2:	2a08      	cmp	r2, #8
 8013be4:	d10b      	bne.n	8013bfe <_printf_i+0x112>
 8013be6:	6823      	ldr	r3, [r4, #0]
 8013be8:	07db      	lsls	r3, r3, #31
 8013bea:	d508      	bpl.n	8013bfe <_printf_i+0x112>
 8013bec:	6923      	ldr	r3, [r4, #16]
 8013bee:	6862      	ldr	r2, [r4, #4]
 8013bf0:	429a      	cmp	r2, r3
 8013bf2:	bfde      	ittt	le
 8013bf4:	2330      	movle	r3, #48	; 0x30
 8013bf6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013bfa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013bfe:	ebac 0305 	sub.w	r3, ip, r5
 8013c02:	6123      	str	r3, [r4, #16]
 8013c04:	f8cd 8000 	str.w	r8, [sp]
 8013c08:	463b      	mov	r3, r7
 8013c0a:	aa03      	add	r2, sp, #12
 8013c0c:	4621      	mov	r1, r4
 8013c0e:	4630      	mov	r0, r6
 8013c10:	f7ff fef6 	bl	8013a00 <_printf_common>
 8013c14:	3001      	adds	r0, #1
 8013c16:	d14d      	bne.n	8013cb4 <_printf_i+0x1c8>
 8013c18:	f04f 30ff 	mov.w	r0, #4294967295
 8013c1c:	b005      	add	sp, #20
 8013c1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c22:	4839      	ldr	r0, [pc, #228]	; (8013d08 <_printf_i+0x21c>)
 8013c24:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013c28:	6813      	ldr	r3, [r2, #0]
 8013c2a:	6821      	ldr	r1, [r4, #0]
 8013c2c:	1d1d      	adds	r5, r3, #4
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	6015      	str	r5, [r2, #0]
 8013c32:	060a      	lsls	r2, r1, #24
 8013c34:	d50b      	bpl.n	8013c4e <_printf_i+0x162>
 8013c36:	07ca      	lsls	r2, r1, #31
 8013c38:	bf44      	itt	mi
 8013c3a:	f041 0120 	orrmi.w	r1, r1, #32
 8013c3e:	6021      	strmi	r1, [r4, #0]
 8013c40:	b91b      	cbnz	r3, 8013c4a <_printf_i+0x15e>
 8013c42:	6822      	ldr	r2, [r4, #0]
 8013c44:	f022 0220 	bic.w	r2, r2, #32
 8013c48:	6022      	str	r2, [r4, #0]
 8013c4a:	2210      	movs	r2, #16
 8013c4c:	e7b7      	b.n	8013bbe <_printf_i+0xd2>
 8013c4e:	064d      	lsls	r5, r1, #25
 8013c50:	bf48      	it	mi
 8013c52:	b29b      	uxthmi	r3, r3
 8013c54:	e7ef      	b.n	8013c36 <_printf_i+0x14a>
 8013c56:	4665      	mov	r5, ip
 8013c58:	fbb3 f1f2 	udiv	r1, r3, r2
 8013c5c:	fb02 3311 	mls	r3, r2, r1, r3
 8013c60:	5cc3      	ldrb	r3, [r0, r3]
 8013c62:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013c66:	460b      	mov	r3, r1
 8013c68:	2900      	cmp	r1, #0
 8013c6a:	d1f5      	bne.n	8013c58 <_printf_i+0x16c>
 8013c6c:	e7b9      	b.n	8013be2 <_printf_i+0xf6>
 8013c6e:	6813      	ldr	r3, [r2, #0]
 8013c70:	6825      	ldr	r5, [r4, #0]
 8013c72:	6961      	ldr	r1, [r4, #20]
 8013c74:	1d18      	adds	r0, r3, #4
 8013c76:	6010      	str	r0, [r2, #0]
 8013c78:	0628      	lsls	r0, r5, #24
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	d501      	bpl.n	8013c82 <_printf_i+0x196>
 8013c7e:	6019      	str	r1, [r3, #0]
 8013c80:	e002      	b.n	8013c88 <_printf_i+0x19c>
 8013c82:	066a      	lsls	r2, r5, #25
 8013c84:	d5fb      	bpl.n	8013c7e <_printf_i+0x192>
 8013c86:	8019      	strh	r1, [r3, #0]
 8013c88:	2300      	movs	r3, #0
 8013c8a:	6123      	str	r3, [r4, #16]
 8013c8c:	4665      	mov	r5, ip
 8013c8e:	e7b9      	b.n	8013c04 <_printf_i+0x118>
 8013c90:	6813      	ldr	r3, [r2, #0]
 8013c92:	1d19      	adds	r1, r3, #4
 8013c94:	6011      	str	r1, [r2, #0]
 8013c96:	681d      	ldr	r5, [r3, #0]
 8013c98:	6862      	ldr	r2, [r4, #4]
 8013c9a:	2100      	movs	r1, #0
 8013c9c:	4628      	mov	r0, r5
 8013c9e:	f7ec fa97 	bl	80001d0 <memchr>
 8013ca2:	b108      	cbz	r0, 8013ca8 <_printf_i+0x1bc>
 8013ca4:	1b40      	subs	r0, r0, r5
 8013ca6:	6060      	str	r0, [r4, #4]
 8013ca8:	6863      	ldr	r3, [r4, #4]
 8013caa:	6123      	str	r3, [r4, #16]
 8013cac:	2300      	movs	r3, #0
 8013cae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013cb2:	e7a7      	b.n	8013c04 <_printf_i+0x118>
 8013cb4:	6923      	ldr	r3, [r4, #16]
 8013cb6:	462a      	mov	r2, r5
 8013cb8:	4639      	mov	r1, r7
 8013cba:	4630      	mov	r0, r6
 8013cbc:	47c0      	blx	r8
 8013cbe:	3001      	adds	r0, #1
 8013cc0:	d0aa      	beq.n	8013c18 <_printf_i+0x12c>
 8013cc2:	6823      	ldr	r3, [r4, #0]
 8013cc4:	079b      	lsls	r3, r3, #30
 8013cc6:	d413      	bmi.n	8013cf0 <_printf_i+0x204>
 8013cc8:	68e0      	ldr	r0, [r4, #12]
 8013cca:	9b03      	ldr	r3, [sp, #12]
 8013ccc:	4298      	cmp	r0, r3
 8013cce:	bfb8      	it	lt
 8013cd0:	4618      	movlt	r0, r3
 8013cd2:	e7a3      	b.n	8013c1c <_printf_i+0x130>
 8013cd4:	2301      	movs	r3, #1
 8013cd6:	464a      	mov	r2, r9
 8013cd8:	4639      	mov	r1, r7
 8013cda:	4630      	mov	r0, r6
 8013cdc:	47c0      	blx	r8
 8013cde:	3001      	adds	r0, #1
 8013ce0:	d09a      	beq.n	8013c18 <_printf_i+0x12c>
 8013ce2:	3501      	adds	r5, #1
 8013ce4:	68e3      	ldr	r3, [r4, #12]
 8013ce6:	9a03      	ldr	r2, [sp, #12]
 8013ce8:	1a9b      	subs	r3, r3, r2
 8013cea:	42ab      	cmp	r3, r5
 8013cec:	dcf2      	bgt.n	8013cd4 <_printf_i+0x1e8>
 8013cee:	e7eb      	b.n	8013cc8 <_printf_i+0x1dc>
 8013cf0:	2500      	movs	r5, #0
 8013cf2:	f104 0919 	add.w	r9, r4, #25
 8013cf6:	e7f5      	b.n	8013ce4 <_printf_i+0x1f8>
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d1ac      	bne.n	8013c56 <_printf_i+0x16a>
 8013cfc:	7803      	ldrb	r3, [r0, #0]
 8013cfe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013d02:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013d06:	e76c      	b.n	8013be2 <_printf_i+0xf6>
 8013d08:	08014665 	.word	0x08014665
 8013d0c:	08014676 	.word	0x08014676

08013d10 <_sbrk_r>:
 8013d10:	b538      	push	{r3, r4, r5, lr}
 8013d12:	4c06      	ldr	r4, [pc, #24]	; (8013d2c <_sbrk_r+0x1c>)
 8013d14:	2300      	movs	r3, #0
 8013d16:	4605      	mov	r5, r0
 8013d18:	4608      	mov	r0, r1
 8013d1a:	6023      	str	r3, [r4, #0]
 8013d1c:	f7fe fff2 	bl	8012d04 <_sbrk>
 8013d20:	1c43      	adds	r3, r0, #1
 8013d22:	d102      	bne.n	8013d2a <_sbrk_r+0x1a>
 8013d24:	6823      	ldr	r3, [r4, #0]
 8013d26:	b103      	cbz	r3, 8013d2a <_sbrk_r+0x1a>
 8013d28:	602b      	str	r3, [r5, #0]
 8013d2a:	bd38      	pop	{r3, r4, r5, pc}
 8013d2c:	20001658 	.word	0x20001658

08013d30 <__sread>:
 8013d30:	b510      	push	{r4, lr}
 8013d32:	460c      	mov	r4, r1
 8013d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d38:	f000 f896 	bl	8013e68 <_read_r>
 8013d3c:	2800      	cmp	r0, #0
 8013d3e:	bfab      	itete	ge
 8013d40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013d42:	89a3      	ldrhlt	r3, [r4, #12]
 8013d44:	181b      	addge	r3, r3, r0
 8013d46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013d4a:	bfac      	ite	ge
 8013d4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8013d4e:	81a3      	strhlt	r3, [r4, #12]
 8013d50:	bd10      	pop	{r4, pc}

08013d52 <__swrite>:
 8013d52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d56:	461f      	mov	r7, r3
 8013d58:	898b      	ldrh	r3, [r1, #12]
 8013d5a:	05db      	lsls	r3, r3, #23
 8013d5c:	4605      	mov	r5, r0
 8013d5e:	460c      	mov	r4, r1
 8013d60:	4616      	mov	r6, r2
 8013d62:	d505      	bpl.n	8013d70 <__swrite+0x1e>
 8013d64:	2302      	movs	r3, #2
 8013d66:	2200      	movs	r2, #0
 8013d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d6c:	f000 f868 	bl	8013e40 <_lseek_r>
 8013d70:	89a3      	ldrh	r3, [r4, #12]
 8013d72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013d76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013d7a:	81a3      	strh	r3, [r4, #12]
 8013d7c:	4632      	mov	r2, r6
 8013d7e:	463b      	mov	r3, r7
 8013d80:	4628      	mov	r0, r5
 8013d82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d86:	f000 b817 	b.w	8013db8 <_write_r>

08013d8a <__sseek>:
 8013d8a:	b510      	push	{r4, lr}
 8013d8c:	460c      	mov	r4, r1
 8013d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d92:	f000 f855 	bl	8013e40 <_lseek_r>
 8013d96:	1c43      	adds	r3, r0, #1
 8013d98:	89a3      	ldrh	r3, [r4, #12]
 8013d9a:	bf15      	itete	ne
 8013d9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8013d9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013da2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013da6:	81a3      	strheq	r3, [r4, #12]
 8013da8:	bf18      	it	ne
 8013daa:	81a3      	strhne	r3, [r4, #12]
 8013dac:	bd10      	pop	{r4, pc}

08013dae <__sclose>:
 8013dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013db2:	f000 b813 	b.w	8013ddc <_close_r>
	...

08013db8 <_write_r>:
 8013db8:	b538      	push	{r3, r4, r5, lr}
 8013dba:	4c07      	ldr	r4, [pc, #28]	; (8013dd8 <_write_r+0x20>)
 8013dbc:	4605      	mov	r5, r0
 8013dbe:	4608      	mov	r0, r1
 8013dc0:	4611      	mov	r1, r2
 8013dc2:	2200      	movs	r2, #0
 8013dc4:	6022      	str	r2, [r4, #0]
 8013dc6:	461a      	mov	r2, r3
 8013dc8:	f7fe ff4b 	bl	8012c62 <_write>
 8013dcc:	1c43      	adds	r3, r0, #1
 8013dce:	d102      	bne.n	8013dd6 <_write_r+0x1e>
 8013dd0:	6823      	ldr	r3, [r4, #0]
 8013dd2:	b103      	cbz	r3, 8013dd6 <_write_r+0x1e>
 8013dd4:	602b      	str	r3, [r5, #0]
 8013dd6:	bd38      	pop	{r3, r4, r5, pc}
 8013dd8:	20001658 	.word	0x20001658

08013ddc <_close_r>:
 8013ddc:	b538      	push	{r3, r4, r5, lr}
 8013dde:	4c06      	ldr	r4, [pc, #24]	; (8013df8 <_close_r+0x1c>)
 8013de0:	2300      	movs	r3, #0
 8013de2:	4605      	mov	r5, r0
 8013de4:	4608      	mov	r0, r1
 8013de6:	6023      	str	r3, [r4, #0]
 8013de8:	f7fe ff57 	bl	8012c9a <_close>
 8013dec:	1c43      	adds	r3, r0, #1
 8013dee:	d102      	bne.n	8013df6 <_close_r+0x1a>
 8013df0:	6823      	ldr	r3, [r4, #0]
 8013df2:	b103      	cbz	r3, 8013df6 <_close_r+0x1a>
 8013df4:	602b      	str	r3, [r5, #0]
 8013df6:	bd38      	pop	{r3, r4, r5, pc}
 8013df8:	20001658 	.word	0x20001658

08013dfc <_fstat_r>:
 8013dfc:	b538      	push	{r3, r4, r5, lr}
 8013dfe:	4c07      	ldr	r4, [pc, #28]	; (8013e1c <_fstat_r+0x20>)
 8013e00:	2300      	movs	r3, #0
 8013e02:	4605      	mov	r5, r0
 8013e04:	4608      	mov	r0, r1
 8013e06:	4611      	mov	r1, r2
 8013e08:	6023      	str	r3, [r4, #0]
 8013e0a:	f7fe ff52 	bl	8012cb2 <_fstat>
 8013e0e:	1c43      	adds	r3, r0, #1
 8013e10:	d102      	bne.n	8013e18 <_fstat_r+0x1c>
 8013e12:	6823      	ldr	r3, [r4, #0]
 8013e14:	b103      	cbz	r3, 8013e18 <_fstat_r+0x1c>
 8013e16:	602b      	str	r3, [r5, #0]
 8013e18:	bd38      	pop	{r3, r4, r5, pc}
 8013e1a:	bf00      	nop
 8013e1c:	20001658 	.word	0x20001658

08013e20 <_isatty_r>:
 8013e20:	b538      	push	{r3, r4, r5, lr}
 8013e22:	4c06      	ldr	r4, [pc, #24]	; (8013e3c <_isatty_r+0x1c>)
 8013e24:	2300      	movs	r3, #0
 8013e26:	4605      	mov	r5, r0
 8013e28:	4608      	mov	r0, r1
 8013e2a:	6023      	str	r3, [r4, #0]
 8013e2c:	f7fe ff51 	bl	8012cd2 <_isatty>
 8013e30:	1c43      	adds	r3, r0, #1
 8013e32:	d102      	bne.n	8013e3a <_isatty_r+0x1a>
 8013e34:	6823      	ldr	r3, [r4, #0]
 8013e36:	b103      	cbz	r3, 8013e3a <_isatty_r+0x1a>
 8013e38:	602b      	str	r3, [r5, #0]
 8013e3a:	bd38      	pop	{r3, r4, r5, pc}
 8013e3c:	20001658 	.word	0x20001658

08013e40 <_lseek_r>:
 8013e40:	b538      	push	{r3, r4, r5, lr}
 8013e42:	4c07      	ldr	r4, [pc, #28]	; (8013e60 <_lseek_r+0x20>)
 8013e44:	4605      	mov	r5, r0
 8013e46:	4608      	mov	r0, r1
 8013e48:	4611      	mov	r1, r2
 8013e4a:	2200      	movs	r2, #0
 8013e4c:	6022      	str	r2, [r4, #0]
 8013e4e:	461a      	mov	r2, r3
 8013e50:	f7fe ff4a 	bl	8012ce8 <_lseek>
 8013e54:	1c43      	adds	r3, r0, #1
 8013e56:	d102      	bne.n	8013e5e <_lseek_r+0x1e>
 8013e58:	6823      	ldr	r3, [r4, #0]
 8013e5a:	b103      	cbz	r3, 8013e5e <_lseek_r+0x1e>
 8013e5c:	602b      	str	r3, [r5, #0]
 8013e5e:	bd38      	pop	{r3, r4, r5, pc}
 8013e60:	20001658 	.word	0x20001658

08013e64 <__malloc_lock>:
 8013e64:	4770      	bx	lr

08013e66 <__malloc_unlock>:
 8013e66:	4770      	bx	lr

08013e68 <_read_r>:
 8013e68:	b538      	push	{r3, r4, r5, lr}
 8013e6a:	4c07      	ldr	r4, [pc, #28]	; (8013e88 <_read_r+0x20>)
 8013e6c:	4605      	mov	r5, r0
 8013e6e:	4608      	mov	r0, r1
 8013e70:	4611      	mov	r1, r2
 8013e72:	2200      	movs	r2, #0
 8013e74:	6022      	str	r2, [r4, #0]
 8013e76:	461a      	mov	r2, r3
 8013e78:	f7fe fed6 	bl	8012c28 <_read>
 8013e7c:	1c43      	adds	r3, r0, #1
 8013e7e:	d102      	bne.n	8013e86 <_read_r+0x1e>
 8013e80:	6823      	ldr	r3, [r4, #0]
 8013e82:	b103      	cbz	r3, 8013e86 <_read_r+0x1e>
 8013e84:	602b      	str	r3, [r5, #0]
 8013e86:	bd38      	pop	{r3, r4, r5, pc}
 8013e88:	20001658 	.word	0x20001658

08013e8c <sqrt>:
 8013e8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013e90:	ed2d 8b02 	vpush	{d8}
 8013e94:	b08b      	sub	sp, #44	; 0x2c
 8013e96:	ec55 4b10 	vmov	r4, r5, d0
 8013e9a:	f000 f851 	bl	8013f40 <__ieee754_sqrt>
 8013e9e:	4b26      	ldr	r3, [pc, #152]	; (8013f38 <sqrt+0xac>)
 8013ea0:	eeb0 8a40 	vmov.f32	s16, s0
 8013ea4:	eef0 8a60 	vmov.f32	s17, s1
 8013ea8:	f993 6000 	ldrsb.w	r6, [r3]
 8013eac:	1c73      	adds	r3, r6, #1
 8013eae:	d02a      	beq.n	8013f06 <sqrt+0x7a>
 8013eb0:	4622      	mov	r2, r4
 8013eb2:	462b      	mov	r3, r5
 8013eb4:	4620      	mov	r0, r4
 8013eb6:	4629      	mov	r1, r5
 8013eb8:	f7ec fe30 	bl	8000b1c <__aeabi_dcmpun>
 8013ebc:	4607      	mov	r7, r0
 8013ebe:	bb10      	cbnz	r0, 8013f06 <sqrt+0x7a>
 8013ec0:	f04f 0800 	mov.w	r8, #0
 8013ec4:	f04f 0900 	mov.w	r9, #0
 8013ec8:	4642      	mov	r2, r8
 8013eca:	464b      	mov	r3, r9
 8013ecc:	4620      	mov	r0, r4
 8013ece:	4629      	mov	r1, r5
 8013ed0:	f7ec fdfc 	bl	8000acc <__aeabi_dcmplt>
 8013ed4:	b1b8      	cbz	r0, 8013f06 <sqrt+0x7a>
 8013ed6:	2301      	movs	r3, #1
 8013ed8:	9300      	str	r3, [sp, #0]
 8013eda:	4b18      	ldr	r3, [pc, #96]	; (8013f3c <sqrt+0xb0>)
 8013edc:	9301      	str	r3, [sp, #4]
 8013ede:	9708      	str	r7, [sp, #32]
 8013ee0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8013ee4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8013ee8:	b9b6      	cbnz	r6, 8013f18 <sqrt+0x8c>
 8013eea:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8013eee:	4668      	mov	r0, sp
 8013ef0:	f000 f8d6 	bl	80140a0 <matherr>
 8013ef4:	b1d0      	cbz	r0, 8013f2c <sqrt+0xa0>
 8013ef6:	9b08      	ldr	r3, [sp, #32]
 8013ef8:	b11b      	cbz	r3, 8013f02 <sqrt+0x76>
 8013efa:	f7fe ff8f 	bl	8012e1c <__errno>
 8013efe:	9b08      	ldr	r3, [sp, #32]
 8013f00:	6003      	str	r3, [r0, #0]
 8013f02:	ed9d 8b06 	vldr	d8, [sp, #24]
 8013f06:	eeb0 0a48 	vmov.f32	s0, s16
 8013f0a:	eef0 0a68 	vmov.f32	s1, s17
 8013f0e:	b00b      	add	sp, #44	; 0x2c
 8013f10:	ecbd 8b02 	vpop	{d8}
 8013f14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f18:	4642      	mov	r2, r8
 8013f1a:	464b      	mov	r3, r9
 8013f1c:	4640      	mov	r0, r8
 8013f1e:	4649      	mov	r1, r9
 8013f20:	f7ec fc8c 	bl	800083c <__aeabi_ddiv>
 8013f24:	2e02      	cmp	r6, #2
 8013f26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013f2a:	d1e0      	bne.n	8013eee <sqrt+0x62>
 8013f2c:	f7fe ff76 	bl	8012e1c <__errno>
 8013f30:	2321      	movs	r3, #33	; 0x21
 8013f32:	6003      	str	r3, [r0, #0]
 8013f34:	e7df      	b.n	8013ef6 <sqrt+0x6a>
 8013f36:	bf00      	nop
 8013f38:	200000e8 	.word	0x200000e8
 8013f3c:	08014687 	.word	0x08014687

08013f40 <__ieee754_sqrt>:
 8013f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f44:	4955      	ldr	r1, [pc, #340]	; (801409c <__ieee754_sqrt+0x15c>)
 8013f46:	ec55 4b10 	vmov	r4, r5, d0
 8013f4a:	43a9      	bics	r1, r5
 8013f4c:	462b      	mov	r3, r5
 8013f4e:	462a      	mov	r2, r5
 8013f50:	d112      	bne.n	8013f78 <__ieee754_sqrt+0x38>
 8013f52:	ee10 2a10 	vmov	r2, s0
 8013f56:	ee10 0a10 	vmov	r0, s0
 8013f5a:	4629      	mov	r1, r5
 8013f5c:	f7ec fb44 	bl	80005e8 <__aeabi_dmul>
 8013f60:	4602      	mov	r2, r0
 8013f62:	460b      	mov	r3, r1
 8013f64:	4620      	mov	r0, r4
 8013f66:	4629      	mov	r1, r5
 8013f68:	f7ec f988 	bl	800027c <__adddf3>
 8013f6c:	4604      	mov	r4, r0
 8013f6e:	460d      	mov	r5, r1
 8013f70:	ec45 4b10 	vmov	d0, r4, r5
 8013f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f78:	2d00      	cmp	r5, #0
 8013f7a:	ee10 0a10 	vmov	r0, s0
 8013f7e:	4621      	mov	r1, r4
 8013f80:	dc0f      	bgt.n	8013fa2 <__ieee754_sqrt+0x62>
 8013f82:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013f86:	4330      	orrs	r0, r6
 8013f88:	d0f2      	beq.n	8013f70 <__ieee754_sqrt+0x30>
 8013f8a:	b155      	cbz	r5, 8013fa2 <__ieee754_sqrt+0x62>
 8013f8c:	ee10 2a10 	vmov	r2, s0
 8013f90:	4620      	mov	r0, r4
 8013f92:	4629      	mov	r1, r5
 8013f94:	f7ec f970 	bl	8000278 <__aeabi_dsub>
 8013f98:	4602      	mov	r2, r0
 8013f9a:	460b      	mov	r3, r1
 8013f9c:	f7ec fc4e 	bl	800083c <__aeabi_ddiv>
 8013fa0:	e7e4      	b.n	8013f6c <__ieee754_sqrt+0x2c>
 8013fa2:	151b      	asrs	r3, r3, #20
 8013fa4:	d073      	beq.n	801408e <__ieee754_sqrt+0x14e>
 8013fa6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013faa:	07dd      	lsls	r5, r3, #31
 8013fac:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8013fb0:	bf48      	it	mi
 8013fb2:	0fc8      	lsrmi	r0, r1, #31
 8013fb4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8013fb8:	bf44      	itt	mi
 8013fba:	0049      	lslmi	r1, r1, #1
 8013fbc:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8013fc0:	2500      	movs	r5, #0
 8013fc2:	1058      	asrs	r0, r3, #1
 8013fc4:	0fcb      	lsrs	r3, r1, #31
 8013fc6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8013fca:	0049      	lsls	r1, r1, #1
 8013fcc:	2316      	movs	r3, #22
 8013fce:	462c      	mov	r4, r5
 8013fd0:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8013fd4:	19a7      	adds	r7, r4, r6
 8013fd6:	4297      	cmp	r7, r2
 8013fd8:	bfde      	ittt	le
 8013fda:	19bc      	addle	r4, r7, r6
 8013fdc:	1bd2      	suble	r2, r2, r7
 8013fde:	19ad      	addle	r5, r5, r6
 8013fe0:	0fcf      	lsrs	r7, r1, #31
 8013fe2:	3b01      	subs	r3, #1
 8013fe4:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8013fe8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013fec:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8013ff0:	d1f0      	bne.n	8013fd4 <__ieee754_sqrt+0x94>
 8013ff2:	f04f 0c20 	mov.w	ip, #32
 8013ff6:	469e      	mov	lr, r3
 8013ff8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8013ffc:	42a2      	cmp	r2, r4
 8013ffe:	eb06 070e 	add.w	r7, r6, lr
 8014002:	dc02      	bgt.n	801400a <__ieee754_sqrt+0xca>
 8014004:	d112      	bne.n	801402c <__ieee754_sqrt+0xec>
 8014006:	428f      	cmp	r7, r1
 8014008:	d810      	bhi.n	801402c <__ieee754_sqrt+0xec>
 801400a:	2f00      	cmp	r7, #0
 801400c:	eb07 0e06 	add.w	lr, r7, r6
 8014010:	da42      	bge.n	8014098 <__ieee754_sqrt+0x158>
 8014012:	f1be 0f00 	cmp.w	lr, #0
 8014016:	db3f      	blt.n	8014098 <__ieee754_sqrt+0x158>
 8014018:	f104 0801 	add.w	r8, r4, #1
 801401c:	1b12      	subs	r2, r2, r4
 801401e:	428f      	cmp	r7, r1
 8014020:	bf88      	it	hi
 8014022:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8014026:	1bc9      	subs	r1, r1, r7
 8014028:	4433      	add	r3, r6
 801402a:	4644      	mov	r4, r8
 801402c:	0052      	lsls	r2, r2, #1
 801402e:	f1bc 0c01 	subs.w	ip, ip, #1
 8014032:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8014036:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801403a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801403e:	d1dd      	bne.n	8013ffc <__ieee754_sqrt+0xbc>
 8014040:	430a      	orrs	r2, r1
 8014042:	d006      	beq.n	8014052 <__ieee754_sqrt+0x112>
 8014044:	1c5c      	adds	r4, r3, #1
 8014046:	bf13      	iteet	ne
 8014048:	3301      	addne	r3, #1
 801404a:	3501      	addeq	r5, #1
 801404c:	4663      	moveq	r3, ip
 801404e:	f023 0301 	bicne.w	r3, r3, #1
 8014052:	106a      	asrs	r2, r5, #1
 8014054:	085b      	lsrs	r3, r3, #1
 8014056:	07e9      	lsls	r1, r5, #31
 8014058:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801405c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8014060:	bf48      	it	mi
 8014062:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8014066:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801406a:	461c      	mov	r4, r3
 801406c:	e780      	b.n	8013f70 <__ieee754_sqrt+0x30>
 801406e:	0aca      	lsrs	r2, r1, #11
 8014070:	3815      	subs	r0, #21
 8014072:	0549      	lsls	r1, r1, #21
 8014074:	2a00      	cmp	r2, #0
 8014076:	d0fa      	beq.n	801406e <__ieee754_sqrt+0x12e>
 8014078:	02d6      	lsls	r6, r2, #11
 801407a:	d50a      	bpl.n	8014092 <__ieee754_sqrt+0x152>
 801407c:	f1c3 0420 	rsb	r4, r3, #32
 8014080:	fa21 f404 	lsr.w	r4, r1, r4
 8014084:	1e5d      	subs	r5, r3, #1
 8014086:	4099      	lsls	r1, r3
 8014088:	4322      	orrs	r2, r4
 801408a:	1b43      	subs	r3, r0, r5
 801408c:	e78b      	b.n	8013fa6 <__ieee754_sqrt+0x66>
 801408e:	4618      	mov	r0, r3
 8014090:	e7f0      	b.n	8014074 <__ieee754_sqrt+0x134>
 8014092:	0052      	lsls	r2, r2, #1
 8014094:	3301      	adds	r3, #1
 8014096:	e7ef      	b.n	8014078 <__ieee754_sqrt+0x138>
 8014098:	46a0      	mov	r8, r4
 801409a:	e7bf      	b.n	801401c <__ieee754_sqrt+0xdc>
 801409c:	7ff00000 	.word	0x7ff00000

080140a0 <matherr>:
 80140a0:	2000      	movs	r0, #0
 80140a2:	4770      	bx	lr

080140a4 <_init>:
 80140a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140a6:	bf00      	nop
 80140a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80140aa:	bc08      	pop	{r3}
 80140ac:	469e      	mov	lr, r3
 80140ae:	4770      	bx	lr

080140b0 <_fini>:
 80140b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140b2:	bf00      	nop
 80140b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80140b6:	bc08      	pop	{r3}
 80140b8:	469e      	mov	lr, r3
 80140ba:	4770      	bx	lr
